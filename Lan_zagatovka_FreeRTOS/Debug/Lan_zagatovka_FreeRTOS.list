
Lan_zagatovka_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ad10  080180c8  080180c8  000280c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022dd8  08022dd8  00040518  2**0
                  CONTENTS
  4 .ARM          00000008  08022dd8  08022dd8  00032dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022de0  08022de0  00040518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022de0  08022de0  00032de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022de4  08022de4  00032de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  20000000  08022de8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040518  2**0
                  CONTENTS
 10 .bss          000145bc  20000518  20000518  00040518  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014ad4  20014ad4  00040518  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040518  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047f31  00000000  00000000  00040548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008205  00000000  00000000  00088479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a8  00000000  00000000  00090680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021a0  00000000  00000000  00092928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011759  00000000  00000000  00094ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003546a  00000000  00000000  000a6221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3047  00000000  00000000  000db68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ce6d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c64  00000000  00000000  001ce728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000518 	.word	0x20000518
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080180b0 	.word	0x080180b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000051c 	.word	0x2000051c
 80001cc:	080180b0 	.word	0x080180b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"json","formjson","menu"};
char const **TAGS = TAGCHAR;
int f = 0;
//
uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b097      	sub	sp, #92	; 0x5c
 800059c:	af0c      	add	r7, sp, #48	; 0x30
 800059e:	6278      	str	r0, [r7, #36]	; 0x24
 80005a0:	6239      	str	r1, [r7, #32]
 80005a2:	61fa      	str	r2, [r7, #28]
 80005a4:	837b      	strh	r3, [r7, #26]
	//printf("+++ jsongo +++ %d \n", jsongo);
	switch (iIndex) {
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 85e2 	beq.w	8001172 <ssi_handler+0xbda>
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 85e8 	bgt.w	8001186 <ssi_handler+0xbee>
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <ssi_handler+0x30>
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 8460 	beq.w	8000e84 <ssi_handler+0x8ec>
		case 2:
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
			return strlen(pcInsert);
			break;
		default :
			break;
 80005c4:	f000 bddf 	b.w	8001186 <ssi_handler+0xbee>
		if (variable == numpin) {
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <ssi_handler+0x50>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b3a      	cmp	r3, #58	; 0x3a
 80005ce:	d104      	bne.n	80005da <ssi_handler+0x42>
			variable = 0;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <ssi_handler+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
			break;
 80005d6:	f000 bdd7 	b.w	8001188 <ssi_handler+0xbf0>
			if(jsongo == 1){
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <ssi_handler+0x54>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	f040 8084 	bne.w	80006ec <ssi_handler+0x154>
				while(variable3 <= numpintopin-1){
 80005e4:	e076      	b.n	80006d4 <ssi_handler+0x13c>
 80005e6:	bf00      	nop
 80005e8:	20003230 	.word	0x20003230
 80005ec:	20003234 	.word	0x20003234
						if(variable3 == 0) {
 80005f0:	4bab      	ldr	r3, [pc, #684]	; (80008a0 <ssi_handler+0x308>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <ssi_handler+0x78>
							strcat(listaction, "{");
 80005f8:	48aa      	ldr	r0, [pc, #680]	; (80008a4 <ssi_handler+0x30c>)
 80005fa:	f7ff fdf3 	bl	80001e4 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4ba8      	ldr	r3, [pc, #672]	; (80008a4 <ssi_handler+0x30c>)
 8000604:	4413      	add	r3, r2
 8000606:	49a8      	ldr	r1, [pc, #672]	; (80008a8 <ssi_handler+0x310>)
 8000608:	461a      	mov	r2, r3
 800060a:	460b      	mov	r3, r1
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	8013      	strh	r3, [r2, #0]
						if(variable == TO[variable3].idin && TO[variable3].flag == 1){
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <ssi_handler+0x308>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	49a5      	ldr	r1, [pc, #660]	; (80008ac <ssi_handler+0x314>)
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	440b      	add	r3, r1
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4ba3      	ldr	r3, [pc, #652]	; (80008b0 <ssi_handler+0x318>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	d125      	bne.n	8000676 <ssi_handler+0xde>
 800062a:	4b9d      	ldr	r3, [pc, #628]	; (80008a0 <ssi_handler+0x308>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	499f      	ldr	r1, [pc, #636]	; (80008ac <ssi_handler+0x314>)
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	440b      	add	r3, r1
 800063a:	3308      	adds	r3, #8
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d119      	bne.n	8000676 <ssi_handler+0xde>
							sprintf(name3, "\"%s\":%d,",tp[TO[variable3].idout].pins, variable3);
 8000642:	4b97      	ldr	r3, [pc, #604]	; (80008a0 <ssi_handler+0x308>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4999      	ldr	r1, [pc, #612]	; (80008ac <ssi_handler+0x314>)
 8000648:	4613      	mov	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	3304      	adds	r3, #4
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4613      	mov	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4a95      	ldr	r2, [pc, #596]	; (80008b4 <ssi_handler+0x31c>)
 8000660:	441a      	add	r2, r3
 8000662:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <ssi_handler+0x308>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4994      	ldr	r1, [pc, #592]	; (80008b8 <ssi_handler+0x320>)
 8000668:	4894      	ldr	r0, [pc, #592]	; (80008bc <ssi_handler+0x324>)
 800066a:	f016 fbf9 	bl	8016e60 <siprintf>
							strcat(listaction, name3); // {"PA5":0,"PA6":1, в поле "Relay connection"
 800066e:	4993      	ldr	r1, [pc, #588]	; (80008bc <ssi_handler+0x324>)
 8000670:	488c      	ldr	r0, [pc, #560]	; (80008a4 <ssi_handler+0x30c>)
 8000672:	f016 fc58 	bl	8016f26 <strcat>
						if(variable3 == numpintopin-1 &&  strcmp(listaction[strlen(listaction)-1], '{') > 0){
 8000676:	4b8a      	ldr	r3, [pc, #552]	; (80008a0 <ssi_handler+0x308>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b45      	cmp	r3, #69	; 0x45
 800067c:	d115      	bne.n	80006aa <ssi_handler+0x112>
 800067e:	4889      	ldr	r0, [pc, #548]	; (80008a4 <ssi_handler+0x30c>)
 8000680:	f7ff fdb0 	bl	80001e4 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	3b01      	subs	r3, #1
 8000688:	4a86      	ldr	r2, [pc, #536]	; (80008a4 <ssi_handler+0x30c>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	217b      	movs	r1, #123	; 0x7b
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	dd07      	ble.n	80006aa <ssi_handler+0x112>
							listaction[strlen(listaction)-1] = '\0';
 800069a:	4882      	ldr	r0, [pc, #520]	; (80008a4 <ssi_handler+0x30c>)
 800069c:	f7ff fda2 	bl	80001e4 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4a7f      	ldr	r2, [pc, #508]	; (80008a4 <ssi_handler+0x30c>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	54d1      	strb	r1, [r2, r3]
						if(variable3 == numpintopin-1) {
 80006aa:	4b7d      	ldr	r3, [pc, #500]	; (80008a0 <ssi_handler+0x308>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b45      	cmp	r3, #69	; 0x45
 80006b0:	d10b      	bne.n	80006ca <ssi_handler+0x132>
							strcat(listaction, "}");
 80006b2:	487c      	ldr	r0, [pc, #496]	; (80008a4 <ssi_handler+0x30c>)
 80006b4:	f7ff fd96 	bl	80001e4 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b79      	ldr	r3, [pc, #484]	; (80008a4 <ssi_handler+0x30c>)
 80006be:	4413      	add	r3, r2
 80006c0:	497f      	ldr	r1, [pc, #508]	; (80008c0 <ssi_handler+0x328>)
 80006c2:	461a      	mov	r2, r3
 80006c4:	460b      	mov	r3, r1
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	8013      	strh	r3, [r2, #0]
						variable3++;
 80006ca:	4b75      	ldr	r3, [pc, #468]	; (80008a0 <ssi_handler+0x308>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a73      	ldr	r2, [pc, #460]	; (80008a0 <ssi_handler+0x308>)
 80006d2:	6013      	str	r3, [r2, #0]
				while(variable3 <= numpintopin-1){
 80006d4:	4b72      	ldr	r3, [pc, #456]	; (80008a0 <ssi_handler+0x308>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b45      	cmp	r3, #69	; 0x45
 80006da:	dd89      	ble.n	80005f0 <ssi_handler+0x58>
				memset(name3, '\0', sizeof(name3)); // TEST ????????????? TEST
 80006dc:	220a      	movs	r2, #10
 80006de:	2100      	movs	r1, #0
 80006e0:	4876      	ldr	r0, [pc, #472]	; (80008bc <ssi_handler+0x324>)
 80006e2:	f016 f9de 	bl	8016aa2 <memset>
				variable3 = 0;
 80006e6:	4b6e      	ldr	r3, [pc, #440]	; (80008a0 <ssi_handler+0x308>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
			if (variable == 0) {
 80006ec:	4b70      	ldr	r3, [pc, #448]	; (80008b0 <ssi_handler+0x318>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f040 814b 	bne.w	800098c <ssi_handler+0x3f4>
				if(jsongo == 1){
 80006f6:	4b73      	ldr	r3, [pc, #460]	; (80008c4 <ssi_handler+0x32c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	f040 8082 	bne.w	8000804 <ssi_handler+0x26c>
					printf("START buttoms START\n");
 8000700:	4871      	ldr	r0, [pc, #452]	; (80008c8 <ssi_handler+0x330>)
 8000702:	f016 fab7 	bl	8016c74 <puts>
				sprintf(pcInsert,
 8000706:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <ssi_handler+0x318>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a70      	ldr	r2, [pc, #448]	; (80008cc <ssi_handler+0x334>)
 800070c:	2168      	movs	r1, #104	; 0x68
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	4413      	add	r3, r2
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <ssi_handler+0x318>)
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 800071e:	4b64      	ldr	r3, [pc, #400]	; (80008b0 <ssi_handler+0x318>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4a62      	ldr	r2, [pc, #392]	; (80008b4 <ssi_handler+0x31c>)
 800072c:	1899      	adds	r1, r3, r2
 800072e:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <ssi_handler+0x318>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2268      	movs	r2, #104	; 0x68
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	3318      	adds	r3, #24
 800073c:	4a63      	ldr	r2, [pc, #396]	; (80008cc <ssi_handler+0x334>)
 800073e:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8000740:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <ssi_handler+0x318>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a61      	ldr	r2, [pc, #388]	; (80008cc <ssi_handler+0x334>)
 8000746:	2168      	movs	r1, #104	; 0x68
 8000748:	fb01 f303 	mul.w	r3, r1, r3
 800074c:	4413      	add	r3, r2
 800074e:	332c      	adds	r3, #44	; 0x2c
 8000750:	681d      	ldr	r5, [r3, #0]
 8000752:	4b57      	ldr	r3, [pc, #348]	; (80008b0 <ssi_handler+0x318>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a5d      	ldr	r2, [pc, #372]	; (80008cc <ssi_handler+0x334>)
 8000758:	2168      	movs	r1, #104	; 0x68
 800075a:	fb01 f303 	mul.w	r3, r1, r3
 800075e:	4413      	add	r3, r2
 8000760:	3330      	adds	r3, #48	; 0x30
 8000762:	681e      	ldr	r6, [r3, #0]
 8000764:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <ssi_handler+0x318>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a58      	ldr	r2, [pc, #352]	; (80008cc <ssi_handler+0x334>)
 800076a:	2168      	movs	r1, #104	; 0x68
 800076c:	fb01 f303 	mul.w	r3, r1, r3
 8000770:	4413      	add	r3, r2
 8000772:	3334      	adds	r3, #52	; 0x34
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	60ba      	str	r2, [r7, #8]
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <ssi_handler+0x318>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a53      	ldr	r2, [pc, #332]	; (80008cc <ssi_handler+0x334>)
 800077e:	2168      	movs	r1, #104	; 0x68
 8000780:	fb01 f303 	mul.w	r3, r1, r3
 8000784:	4413      	add	r3, r2
 8000786:	3338      	adds	r3, #56	; 0x38
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	6079      	str	r1, [r7, #4]
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <ssi_handler+0x318>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a4e      	ldr	r2, [pc, #312]	; (80008cc <ssi_handler+0x334>)
 8000792:	2168      	movs	r1, #104	; 0x68
 8000794:	fb01 f303 	mul.w	r3, r1, r3
 8000798:	4413      	add	r3, r2
 800079a:	333c      	adds	r3, #60	; 0x3c
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <ssi_handler+0x318>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a49      	ldr	r2, [pc, #292]	; (80008cc <ssi_handler+0x334>)
 80007a6:	2168      	movs	r1, #104	; 0x68
 80007a8:	fb01 f303 	mul.w	r3, r1, r3
 80007ac:	4413      	add	r3, r2
 80007ae:	3340      	adds	r3, #64	; 0x40
 80007b0:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <ssi_handler+0x318>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2268      	movs	r2, #104	; 0x68
 80007b8:	fb02 f303 	mul.w	r3, r2, r3
 80007bc:	3340      	adds	r3, #64	; 0x40
 80007be:	4a43      	ldr	r2, [pc, #268]	; (80008cc <ssi_handler+0x334>)
 80007c0:	4413      	add	r3, r2
 80007c2:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 80007c4:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <ssi_handler+0x318>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4840      	ldr	r0, [pc, #256]	; (80008cc <ssi_handler+0x334>)
 80007ca:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80007ce:	fb0c f303 	mul.w	r3, ip, r3
 80007d2:	4403      	add	r3, r0
 80007d4:	3364      	adds	r3, #100	; 0x64
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	930a      	str	r3, [sp, #40]	; 0x28
 80007da:	9209      	str	r2, [sp, #36]	; 0x24
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <ssi_handler+0x30c>)
 80007de:	9308      	str	r3, [sp, #32]
 80007e0:	9107      	str	r1, [sp, #28]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	9306      	str	r3, [sp, #24]
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	9105      	str	r1, [sp, #20]
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	9204      	str	r2, [sp, #16]
 80007ee:	9603      	str	r6, [sp, #12]
 80007f0:	9502      	str	r5, [sp, #8]
 80007f2:	9401      	str	r4, [sp, #4]
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	9100      	str	r1, [sp, #0]
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	4934      	ldr	r1, [pc, #208]	; (80008d0 <ssi_handler+0x338>)
 80007fe:	6a38      	ldr	r0, [r7, #32]
 8000800:	f016 fb2e 	bl	8016e60 <siprintf>
				if(jsongo == 2){
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <ssi_handler+0x32c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	f040 8093 	bne.w	8000934 <ssi_handler+0x39c>
				sprintf(pcInsert,
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <ssi_handler+0x318>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <ssi_handler+0x334>)
 8000814:	2168      	movs	r1, #104	; 0x68
 8000816:	fb01 f303 	mul.w	r3, r1, r3
 800081a:	4413      	add	r3, r2
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <ssi_handler+0x318>)
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <ssi_handler+0x318>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <ssi_handler+0x31c>)
 8000834:	4413      	add	r3, r2
						T[variable].ptype,
 8000836:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <ssi_handler+0x318>)
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	2168      	movs	r1, #104	; 0x68
 800083c:	fb01 f202 	mul.w	r2, r1, r2
 8000840:	3218      	adds	r2, #24
 8000842:	4922      	ldr	r1, [pc, #136]	; (80008cc <ssi_handler+0x334>)
 8000844:	440a      	add	r2, r1
				sprintf(pcInsert,
 8000846:	491a      	ldr	r1, [pc, #104]	; (80008b0 <ssi_handler+0x318>)
 8000848:	6809      	ldr	r1, [r1, #0]
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <ssi_handler+0x334>)
 800084c:	2468      	movs	r4, #104	; 0x68
 800084e:	fb04 f101 	mul.w	r1, r4, r1
 8000852:	4401      	add	r1, r0
 8000854:	3104      	adds	r1, #4
 8000856:	6809      	ldr	r1, [r1, #0]
 8000858:	4815      	ldr	r0, [pc, #84]	; (80008b0 <ssi_handler+0x318>)
 800085a:	6800      	ldr	r0, [r0, #0]
 800085c:	4c1b      	ldr	r4, [pc, #108]	; (80008cc <ssi_handler+0x334>)
 800085e:	2568      	movs	r5, #104	; 0x68
 8000860:	fb05 f000 	mul.w	r0, r5, r0
 8000864:	4420      	add	r0, r4
 8000866:	3008      	adds	r0, #8
 8000868:	6800      	ldr	r0, [r0, #0]
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	4c10      	ldr	r4, [pc, #64]	; (80008b0 <ssi_handler+0x318>)
 800086e:	6824      	ldr	r4, [r4, #0]
 8000870:	4d16      	ldr	r5, [pc, #88]	; (80008cc <ssi_handler+0x334>)
 8000872:	2668      	movs	r6, #104	; 0x68
 8000874:	fb06 f404 	mul.w	r4, r6, r4
 8000878:	442c      	add	r4, r5
 800087a:	340c      	adds	r4, #12
 800087c:	6820      	ldr	r0, [r4, #0]
 800087e:	60b8      	str	r0, [r7, #8]
 8000880:	4d0b      	ldr	r5, [pc, #44]	; (80008b0 <ssi_handler+0x318>)
 8000882:	682d      	ldr	r5, [r5, #0]
 8000884:	4e11      	ldr	r6, [pc, #68]	; (80008cc <ssi_handler+0x334>)
 8000886:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800088a:	fb0c f505 	mul.w	r5, ip, r5
 800088e:	4435      	add	r5, r6
 8000890:	3510      	adds	r5, #16
 8000892:	682d      	ldr	r5, [r5, #0]
 8000894:	4e06      	ldr	r6, [pc, #24]	; (80008b0 <ssi_handler+0x318>)
 8000896:	6836      	ldr	r6, [r6, #0]
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <ssi_handler+0x334>)
 800089a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800089e:	e019      	b.n	80008d4 <ssi_handler+0x33c>
 80008a0:	20003220 	.word	0x20003220
 80008a4:	2000336c 	.word	0x2000336c
 80008a8:	080180e4 	.word	0x080180e4
 80008ac:	200084f4 	.word	0x200084f4
 80008b0:	20003230 	.word	0x20003230
 80008b4:	20000000 	.word	0x20000000
 80008b8:	080180e8 	.word	0x080180e8
 80008bc:	20003224 	.word	0x20003224
 80008c0:	080180f4 	.word	0x080180f4
 80008c4:	20003234 	.word	0x20003234
 80008c8:	080180f8 	.word	0x080180f8
 80008cc:	2000883c 	.word	0x2000883c
 80008d0:	0801810c 	.word	0x0801810c
 80008d4:	fb0c f606 	mul.w	r6, ip, r6
 80008d8:	4406      	add	r6, r0
 80008da:	3614      	adds	r6, #20
 80008dc:	6836      	ldr	r6, [r6, #0]
						T[variable].info,
 80008de:	4825      	ldr	r0, [pc, #148]	; (8000974 <ssi_handler+0x3dc>)
 80008e0:	6800      	ldr	r0, [r0, #0]
 80008e2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80008e6:	fb0c fc00 	mul.w	ip, ip, r0
 80008ea:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <ssi_handler+0x3e0>)
 80008f0:	4484      	add	ip, r0
 80008f2:	f10c 0004 	add.w	r0, ip, #4
 80008f6:	6078      	str	r0, [r7, #4]
				sprintf(pcInsert,
 80008f8:	481e      	ldr	r0, [pc, #120]	; (8000974 <ssi_handler+0x3dc>)
 80008fa:	6800      	ldr	r0, [r0, #0]
 80008fc:	4c1e      	ldr	r4, [pc, #120]	; (8000978 <ssi_handler+0x3e0>)
 80008fe:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000902:	fb0c fc00 	mul.w	ip, ip, r0
 8000906:	44a4      	add	ip, r4
 8000908:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 800090c:	f8dc 0000 	ldr.w	r0, [ip]
 8000910:	9008      	str	r0, [sp, #32]
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	9007      	str	r0, [sp, #28]
 8000916:	9606      	str	r6, [sp, #24]
 8000918:	9505      	str	r5, [sp, #20]
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	9004      	str	r0, [sp, #16]
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	9003      	str	r0, [sp, #12]
 8000922:	9102      	str	r1, [sp, #8]
 8000924:	9201      	str	r2, [sp, #4]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4913      	ldr	r1, [pc, #76]	; (800097c <ssi_handler+0x3e4>)
 800092e:	6a38      	ldr	r0, [r7, #32]
 8000930:	f016 fa96 	bl	8016e60 <siprintf>
				if(jsongo == 3){
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <ssi_handler+0x3e8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	f040 827d 	bne.w	8000e38 <ssi_handler+0x8a0>
					sprintf(pcInsert,
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <ssi_handler+0x3dc>)
 8000940:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <ssi_handler+0x3dc>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <ssi_handler+0x3ec>)
 8000950:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <ssi_handler+0x3dc>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4808      	ldr	r0, [pc, #32]	; (8000978 <ssi_handler+0x3e0>)
 8000958:	2468      	movs	r4, #104	; 0x68
 800095a:	fb04 f303 	mul.w	r3, r4, r3
 800095e:	4403      	add	r3, r0
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4613      	mov	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <ssi_handler+0x3f0>)
 800096a:	6a38      	ldr	r0, [r7, #32]
 800096c:	f016 fa78 	bl	8016e60 <siprintf>
 8000970:	e262      	b.n	8000e38 <ssi_handler+0x8a0>
 8000972:	bf00      	nop
 8000974:	20003230 	.word	0x20003230
 8000978:	2000883c 	.word	0x2000883c
 800097c:	080181a8 	.word	0x080181a8
 8000980:	20003234 	.word	0x20003234
 8000984:	20000000 	.word	0x20000000
 8000988:	08018224 	.word	0x08018224
			} else if (variable == numpin-1) {
 800098c:	4b93      	ldr	r3, [pc, #588]	; (8000bdc <ssi_handler+0x644>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b39      	cmp	r3, #57	; 0x39
 8000992:	f040 8135 	bne.w	8000c00 <ssi_handler+0x668>
				if(jsongo == 1){
 8000996:	4b92      	ldr	r3, [pc, #584]	; (8000be0 <ssi_handler+0x648>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	f040 8082 	bne.w	8000aa4 <ssi_handler+0x50c>
				sprintf(pcInsert,
 80009a0:	4b8e      	ldr	r3, [pc, #568]	; (8000bdc <ssi_handler+0x644>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a8f      	ldr	r2, [pc, #572]	; (8000be4 <ssi_handler+0x64c>)
 80009a6:	2168      	movs	r1, #104	; 0x68
 80009a8:	fb01 f303 	mul.w	r3, r1, r3
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	4b8a      	ldr	r3, [pc, #552]	; (8000bdc <ssi_handler+0x644>)
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 80009b8:	4b88      	ldr	r3, [pc, #544]	; (8000bdc <ssi_handler+0x644>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4613      	mov	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4a88      	ldr	r2, [pc, #544]	; (8000be8 <ssi_handler+0x650>)
 80009c6:	1899      	adds	r1, r3, r2
 80009c8:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 80009ca:	4b84      	ldr	r3, [pc, #528]	; (8000bdc <ssi_handler+0x644>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2268      	movs	r2, #104	; 0x68
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	3318      	adds	r3, #24
 80009d6:	4a83      	ldr	r2, [pc, #524]	; (8000be4 <ssi_handler+0x64c>)
 80009d8:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 80009da:	4b80      	ldr	r3, [pc, #512]	; (8000bdc <ssi_handler+0x644>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a81      	ldr	r2, [pc, #516]	; (8000be4 <ssi_handler+0x64c>)
 80009e0:	2168      	movs	r1, #104	; 0x68
 80009e2:	fb01 f303 	mul.w	r3, r1, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	332c      	adds	r3, #44	; 0x2c
 80009ea:	681d      	ldr	r5, [r3, #0]
 80009ec:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <ssi_handler+0x644>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a7c      	ldr	r2, [pc, #496]	; (8000be4 <ssi_handler+0x64c>)
 80009f2:	2168      	movs	r1, #104	; 0x68
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	3330      	adds	r3, #48	; 0x30
 80009fc:	681e      	ldr	r6, [r3, #0]
 80009fe:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <ssi_handler+0x644>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a78      	ldr	r2, [pc, #480]	; (8000be4 <ssi_handler+0x64c>)
 8000a04:	2168      	movs	r1, #104	; 0x68
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3334      	adds	r3, #52	; 0x34
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	4b72      	ldr	r3, [pc, #456]	; (8000bdc <ssi_handler+0x644>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a73      	ldr	r2, [pc, #460]	; (8000be4 <ssi_handler+0x64c>)
 8000a18:	2168      	movs	r1, #104	; 0x68
 8000a1a:	fb01 f303 	mul.w	r3, r1, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	3338      	adds	r3, #56	; 0x38
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	6079      	str	r1, [r7, #4]
 8000a26:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <ssi_handler+0x644>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a6e      	ldr	r2, [pc, #440]	; (8000be4 <ssi_handler+0x64c>)
 8000a2c:	2168      	movs	r1, #104	; 0x68
 8000a2e:	fb01 f303 	mul.w	r3, r1, r3
 8000a32:	4413      	add	r3, r2
 8000a34:	333c      	adds	r3, #60	; 0x3c
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <ssi_handler+0x644>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a69      	ldr	r2, [pc, #420]	; (8000be4 <ssi_handler+0x64c>)
 8000a40:	2168      	movs	r1, #104	; 0x68
 8000a42:	fb01 f303 	mul.w	r3, r1, r3
 8000a46:	4413      	add	r3, r2
 8000a48:	3340      	adds	r3, #64	; 0x40
 8000a4a:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000a4c:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <ssi_handler+0x644>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2268      	movs	r2, #104	; 0x68
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	3340      	adds	r3, #64	; 0x40
 8000a58:	4a62      	ldr	r2, [pc, #392]	; (8000be4 <ssi_handler+0x64c>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000a5e:	4b5f      	ldr	r3, [pc, #380]	; (8000bdc <ssi_handler+0x644>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4860      	ldr	r0, [pc, #384]	; (8000be4 <ssi_handler+0x64c>)
 8000a64:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000a68:	fb0c f303 	mul.w	r3, ip, r3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3364      	adds	r3, #100	; 0x64
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	930a      	str	r3, [sp, #40]	; 0x28
 8000a74:	9209      	str	r2, [sp, #36]	; 0x24
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <ssi_handler+0x654>)
 8000a78:	9308      	str	r3, [sp, #32]
 8000a7a:	9107      	str	r1, [sp, #28]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	9306      	str	r3, [sp, #24]
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	9105      	str	r1, [sp, #20]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	9204      	str	r2, [sp, #16]
 8000a88:	9603      	str	r6, [sp, #12]
 8000a8a:	9502      	str	r5, [sp, #8]
 8000a8c:	9401      	str	r4, [sp, #4]
 8000a8e:	68f9      	ldr	r1, [r7, #12]
 8000a90:	9100      	str	r1, [sp, #0]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	4956      	ldr	r1, [pc, #344]	; (8000bf0 <ssi_handler+0x658>)
 8000a98:	6a38      	ldr	r0, [r7, #32]
 8000a9a:	f016 f9e1 	bl	8016e60 <siprintf>
				printf("END buttoms END\n");
 8000a9e:	4855      	ldr	r0, [pc, #340]	; (8000bf4 <ssi_handler+0x65c>)
 8000aa0:	f016 f8e8 	bl	8016c74 <puts>
				if(jsongo == 2){
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <ssi_handler+0x648>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d177      	bne.n	8000b9c <ssi_handler+0x604>
					sprintf(pcInsert,
 8000aac:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <ssi_handler+0x644>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <ssi_handler+0x64c>)
 8000ab2:	2168      	movs	r1, #104	; 0x68
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <ssi_handler+0x644>)
 8000ac0:	6819      	ldr	r1, [r3, #0]
 8000ac2:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 8000ac4:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <ssi_handler+0x644>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <ssi_handler+0x650>)
 8000ad2:	4413      	add	r3, r2
							T[variable].ptype,
 8000ad4:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <ssi_handler+0x644>)
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	2168      	movs	r1, #104	; 0x68
 8000ada:	fb01 f202 	mul.w	r2, r1, r2
 8000ade:	3218      	adds	r2, #24
 8000ae0:	4940      	ldr	r1, [pc, #256]	; (8000be4 <ssi_handler+0x64c>)
 8000ae2:	440a      	add	r2, r1
					sprintf(pcInsert,
 8000ae4:	493d      	ldr	r1, [pc, #244]	; (8000bdc <ssi_handler+0x644>)
 8000ae6:	6809      	ldr	r1, [r1, #0]
 8000ae8:	483e      	ldr	r0, [pc, #248]	; (8000be4 <ssi_handler+0x64c>)
 8000aea:	2468      	movs	r4, #104	; 0x68
 8000aec:	fb04 f101 	mul.w	r1, r4, r1
 8000af0:	4401      	add	r1, r0
 8000af2:	3104      	adds	r1, #4
 8000af4:	6809      	ldr	r1, [r1, #0]
 8000af6:	4839      	ldr	r0, [pc, #228]	; (8000bdc <ssi_handler+0x644>)
 8000af8:	6800      	ldr	r0, [r0, #0]
 8000afa:	4c3a      	ldr	r4, [pc, #232]	; (8000be4 <ssi_handler+0x64c>)
 8000afc:	2568      	movs	r5, #104	; 0x68
 8000afe:	fb05 f000 	mul.w	r0, r5, r0
 8000b02:	4420      	add	r0, r4
 8000b04:	3008      	adds	r0, #8
 8000b06:	6800      	ldr	r0, [r0, #0]
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	4c34      	ldr	r4, [pc, #208]	; (8000bdc <ssi_handler+0x644>)
 8000b0c:	6824      	ldr	r4, [r4, #0]
 8000b0e:	4d35      	ldr	r5, [pc, #212]	; (8000be4 <ssi_handler+0x64c>)
 8000b10:	2668      	movs	r6, #104	; 0x68
 8000b12:	fb06 f404 	mul.w	r4, r6, r4
 8000b16:	442c      	add	r4, r5
 8000b18:	340c      	adds	r4, #12
 8000b1a:	6820      	ldr	r0, [r4, #0]
 8000b1c:	60b8      	str	r0, [r7, #8]
 8000b1e:	4d2f      	ldr	r5, [pc, #188]	; (8000bdc <ssi_handler+0x644>)
 8000b20:	682d      	ldr	r5, [r5, #0]
 8000b22:	4e30      	ldr	r6, [pc, #192]	; (8000be4 <ssi_handler+0x64c>)
 8000b24:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b28:	fb0c f505 	mul.w	r5, ip, r5
 8000b2c:	4435      	add	r5, r6
 8000b2e:	3510      	adds	r5, #16
 8000b30:	682d      	ldr	r5, [r5, #0]
 8000b32:	4e2a      	ldr	r6, [pc, #168]	; (8000bdc <ssi_handler+0x644>)
 8000b34:	6836      	ldr	r6, [r6, #0]
 8000b36:	482b      	ldr	r0, [pc, #172]	; (8000be4 <ssi_handler+0x64c>)
 8000b38:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b3c:	fb0c f606 	mul.w	r6, ip, r6
 8000b40:	4406      	add	r6, r0
 8000b42:	3614      	adds	r6, #20
 8000b44:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 8000b46:	4825      	ldr	r0, [pc, #148]	; (8000bdc <ssi_handler+0x644>)
 8000b48:	6800      	ldr	r0, [r0, #0]
 8000b4a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b4e:	fb0c fc00 	mul.w	ip, ip, r0
 8000b52:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <ssi_handler+0x64c>)
 8000b58:	4484      	add	ip, r0
 8000b5a:	f10c 0004 	add.w	r0, ip, #4
 8000b5e:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <ssi_handler+0x644>)
 8000b62:	6800      	ldr	r0, [r0, #0]
 8000b64:	4c1f      	ldr	r4, [pc, #124]	; (8000be4 <ssi_handler+0x64c>)
 8000b66:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b6a:	fb0c fc00 	mul.w	ip, ip, r0
 8000b6e:	44a4      	add	ip, r4
 8000b70:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000b74:	f8dc 0000 	ldr.w	r0, [ip]
 8000b78:	9008      	str	r0, [sp, #32]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	9007      	str	r0, [sp, #28]
 8000b7e:	9606      	str	r6, [sp, #24]
 8000b80:	9505      	str	r5, [sp, #20]
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	9004      	str	r0, [sp, #16]
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	9003      	str	r0, [sp, #12]
 8000b8a:	9102      	str	r1, [sp, #8]
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <ssi_handler+0x660>)
 8000b96:	6a38      	ldr	r0, [r7, #32]
 8000b98:	f016 f962 	bl	8016e60 <siprintf>
				if(jsongo == 3){
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <ssi_handler+0x648>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	f040 8149 	bne.w	8000e38 <ssi_handler+0x8a0>
					sprintf(pcInsert,
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <ssi_handler+0x644>)
 8000ba8:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <ssi_handler+0x644>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <ssi_handler+0x650>)
 8000bb8:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <ssi_handler+0x644>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <ssi_handler+0x64c>)
 8000bc0:	2468      	movs	r4, #104	; 0x68
 8000bc2:	fb04 f303 	mul.w	r3, r4, r3
 8000bc6:	4403      	add	r3, r0
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	460a      	mov	r2, r1
 8000bd0:	490a      	ldr	r1, [pc, #40]	; (8000bfc <ssi_handler+0x664>)
 8000bd2:	6a38      	ldr	r0, [r7, #32]
 8000bd4:	f016 f944 	bl	8016e60 <siprintf>
 8000bd8:	e12e      	b.n	8000e38 <ssi_handler+0x8a0>
 8000bda:	bf00      	nop
 8000bdc:	20003230 	.word	0x20003230
 8000be0:	20003234 	.word	0x20003234
 8000be4:	2000883c 	.word	0x2000883c
 8000be8:	20000000 	.word	0x20000000
 8000bec:	2000336c 	.word	0x2000336c
 8000bf0:	08018248 	.word	0x08018248
 8000bf4:	080182e4 	.word	0x080182e4
 8000bf8:	080182f4 	.word	0x080182f4
 8000bfc:	08018370 	.word	0x08018370
				if(jsongo == 1){
 8000c00:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <ssi_handler+0x8cc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d17e      	bne.n	8000d06 <ssi_handler+0x76e>
				sprintf(pcInsert,
 8000c08:	4b97      	ldr	r3, [pc, #604]	; (8000e68 <ssi_handler+0x8d0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a97      	ldr	r2, [pc, #604]	; (8000e6c <ssi_handler+0x8d4>)
 8000c0e:	2168      	movs	r1, #104	; 0x68
 8000c10:	fb01 f303 	mul.w	r3, r1, r3
 8000c14:	4413      	add	r3, r2
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b93      	ldr	r3, [pc, #588]	; (8000e68 <ssi_handler+0x8d0>)
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000c20:	4b91      	ldr	r3, [pc, #580]	; (8000e68 <ssi_handler+0x8d0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4a90      	ldr	r2, [pc, #576]	; (8000e70 <ssi_handler+0x8d8>)
 8000c2e:	1899      	adds	r1, r3, r2
 8000c30:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8000c32:	4b8d      	ldr	r3, [pc, #564]	; (8000e68 <ssi_handler+0x8d0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2268      	movs	r2, #104	; 0x68
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	4a8b      	ldr	r2, [pc, #556]	; (8000e6c <ssi_handler+0x8d4>)
 8000c40:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <ssi_handler+0x8d0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a89      	ldr	r2, [pc, #548]	; (8000e6c <ssi_handler+0x8d4>)
 8000c48:	2168      	movs	r1, #104	; 0x68
 8000c4a:	fb01 f303 	mul.w	r3, r1, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	332c      	adds	r3, #44	; 0x2c
 8000c52:	681d      	ldr	r5, [r3, #0]
 8000c54:	4b84      	ldr	r3, [pc, #528]	; (8000e68 <ssi_handler+0x8d0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a84      	ldr	r2, [pc, #528]	; (8000e6c <ssi_handler+0x8d4>)
 8000c5a:	2168      	movs	r1, #104	; 0x68
 8000c5c:	fb01 f303 	mul.w	r3, r1, r3
 8000c60:	4413      	add	r3, r2
 8000c62:	3330      	adds	r3, #48	; 0x30
 8000c64:	681e      	ldr	r6, [r3, #0]
 8000c66:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <ssi_handler+0x8d0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a80      	ldr	r2, [pc, #512]	; (8000e6c <ssi_handler+0x8d4>)
 8000c6c:	2168      	movs	r1, #104	; 0x68
 8000c6e:	fb01 f303 	mul.w	r3, r1, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	3334      	adds	r3, #52	; 0x34
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <ssi_handler+0x8d0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a7b      	ldr	r2, [pc, #492]	; (8000e6c <ssi_handler+0x8d4>)
 8000c80:	2168      	movs	r1, #104	; 0x68
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	3338      	adds	r3, #56	; 0x38
 8000c8a:	6819      	ldr	r1, [r3, #0]
 8000c8c:	6079      	str	r1, [r7, #4]
 8000c8e:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <ssi_handler+0x8d0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a76      	ldr	r2, [pc, #472]	; (8000e6c <ssi_handler+0x8d4>)
 8000c94:	2168      	movs	r1, #104	; 0x68
 8000c96:	fb01 f303 	mul.w	r3, r1, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	333c      	adds	r3, #60	; 0x3c
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b71      	ldr	r3, [pc, #452]	; (8000e68 <ssi_handler+0x8d0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a71      	ldr	r2, [pc, #452]	; (8000e6c <ssi_handler+0x8d4>)
 8000ca8:	2168      	movs	r1, #104	; 0x68
 8000caa:	fb01 f303 	mul.w	r3, r1, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	3340      	adds	r3, #64	; 0x40
 8000cb2:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000cb4:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <ssi_handler+0x8d0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2268      	movs	r2, #104	; 0x68
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	3340      	adds	r3, #64	; 0x40
 8000cc0:	4a6a      	ldr	r2, [pc, #424]	; (8000e6c <ssi_handler+0x8d4>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000cc6:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <ssi_handler+0x8d0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4868      	ldr	r0, [pc, #416]	; (8000e6c <ssi_handler+0x8d4>)
 8000ccc:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000cd0:	fb0c f303 	mul.w	r3, ip, r3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	3364      	adds	r3, #100	; 0x64
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	930a      	str	r3, [sp, #40]	; 0x28
 8000cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8000cde:	4b65      	ldr	r3, [pc, #404]	; (8000e74 <ssi_handler+0x8dc>)
 8000ce0:	9308      	str	r3, [sp, #32]
 8000ce2:	9107      	str	r1, [sp, #28]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	9306      	str	r3, [sp, #24]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	9105      	str	r1, [sp, #20]
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	9204      	str	r2, [sp, #16]
 8000cf0:	9603      	str	r6, [sp, #12]
 8000cf2:	9502      	str	r5, [sp, #8]
 8000cf4:	9401      	str	r4, [sp, #4]
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	9100      	str	r1, [sp, #0]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	495e      	ldr	r1, [pc, #376]	; (8000e78 <ssi_handler+0x8e0>)
 8000d00:	6a38      	ldr	r0, [r7, #32]
 8000d02:	f016 f8ad 	bl	8016e60 <siprintf>
				if(jsongo == 2){
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <ssi_handler+0x8cc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d177      	bne.n	8000dfe <ssi_handler+0x866>
					sprintf(pcInsert,
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <ssi_handler+0x8d0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <ssi_handler+0x8d4>)
 8000d14:	2168      	movs	r1, #104	; 0x68
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <ssi_handler+0x8d0>)
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 8000d26:	4b50      	ldr	r3, [pc, #320]	; (8000e68 <ssi_handler+0x8d0>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <ssi_handler+0x8d8>)
 8000d34:	4413      	add	r3, r2
							T[variable].ptype,
 8000d36:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <ssi_handler+0x8d0>)
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	2168      	movs	r1, #104	; 0x68
 8000d3c:	fb01 f202 	mul.w	r2, r1, r2
 8000d40:	3218      	adds	r2, #24
 8000d42:	494a      	ldr	r1, [pc, #296]	; (8000e6c <ssi_handler+0x8d4>)
 8000d44:	440a      	add	r2, r1
					sprintf(pcInsert,
 8000d46:	4948      	ldr	r1, [pc, #288]	; (8000e68 <ssi_handler+0x8d0>)
 8000d48:	6809      	ldr	r1, [r1, #0]
 8000d4a:	4848      	ldr	r0, [pc, #288]	; (8000e6c <ssi_handler+0x8d4>)
 8000d4c:	2468      	movs	r4, #104	; 0x68
 8000d4e:	fb04 f101 	mul.w	r1, r4, r1
 8000d52:	4401      	add	r1, r0
 8000d54:	3104      	adds	r1, #4
 8000d56:	6809      	ldr	r1, [r1, #0]
 8000d58:	4843      	ldr	r0, [pc, #268]	; (8000e68 <ssi_handler+0x8d0>)
 8000d5a:	6800      	ldr	r0, [r0, #0]
 8000d5c:	4c43      	ldr	r4, [pc, #268]	; (8000e6c <ssi_handler+0x8d4>)
 8000d5e:	2568      	movs	r5, #104	; 0x68
 8000d60:	fb05 f000 	mul.w	r0, r5, r0
 8000d64:	4420      	add	r0, r4
 8000d66:	3008      	adds	r0, #8
 8000d68:	6800      	ldr	r0, [r0, #0]
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	4c3e      	ldr	r4, [pc, #248]	; (8000e68 <ssi_handler+0x8d0>)
 8000d6e:	6824      	ldr	r4, [r4, #0]
 8000d70:	4d3e      	ldr	r5, [pc, #248]	; (8000e6c <ssi_handler+0x8d4>)
 8000d72:	2668      	movs	r6, #104	; 0x68
 8000d74:	fb06 f404 	mul.w	r4, r6, r4
 8000d78:	442c      	add	r4, r5
 8000d7a:	340c      	adds	r4, #12
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	60b8      	str	r0, [r7, #8]
 8000d80:	4d39      	ldr	r5, [pc, #228]	; (8000e68 <ssi_handler+0x8d0>)
 8000d82:	682d      	ldr	r5, [r5, #0]
 8000d84:	4e39      	ldr	r6, [pc, #228]	; (8000e6c <ssi_handler+0x8d4>)
 8000d86:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000d8a:	fb0c f505 	mul.w	r5, ip, r5
 8000d8e:	4435      	add	r5, r6
 8000d90:	3510      	adds	r5, #16
 8000d92:	682d      	ldr	r5, [r5, #0]
 8000d94:	4e34      	ldr	r6, [pc, #208]	; (8000e68 <ssi_handler+0x8d0>)
 8000d96:	6836      	ldr	r6, [r6, #0]
 8000d98:	4834      	ldr	r0, [pc, #208]	; (8000e6c <ssi_handler+0x8d4>)
 8000d9a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000d9e:	fb0c f606 	mul.w	r6, ip, r6
 8000da2:	4406      	add	r6, r0
 8000da4:	3614      	adds	r6, #20
 8000da6:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 8000da8:	482f      	ldr	r0, [pc, #188]	; (8000e68 <ssi_handler+0x8d0>)
 8000daa:	6800      	ldr	r0, [r0, #0]
 8000dac:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000db0:	fb0c fc00 	mul.w	ip, ip, r0
 8000db4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000db8:	482c      	ldr	r0, [pc, #176]	; (8000e6c <ssi_handler+0x8d4>)
 8000dba:	4484      	add	ip, r0
 8000dbc:	f10c 0004 	add.w	r0, ip, #4
 8000dc0:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8000dc2:	4829      	ldr	r0, [pc, #164]	; (8000e68 <ssi_handler+0x8d0>)
 8000dc4:	6800      	ldr	r0, [r0, #0]
 8000dc6:	4c29      	ldr	r4, [pc, #164]	; (8000e6c <ssi_handler+0x8d4>)
 8000dc8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000dcc:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd0:	44a4      	add	ip, r4
 8000dd2:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000dd6:	f8dc 0000 	ldr.w	r0, [ip]
 8000dda:	9008      	str	r0, [sp, #32]
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	9007      	str	r0, [sp, #28]
 8000de0:	9606      	str	r6, [sp, #24]
 8000de2:	9505      	str	r5, [sp, #20]
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	9004      	str	r0, [sp, #16]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	9003      	str	r0, [sp, #12]
 8000dec:	9102      	str	r1, [sp, #8]
 8000dee:	9201      	str	r2, [sp, #4]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	4921      	ldr	r1, [pc, #132]	; (8000e7c <ssi_handler+0x8e4>)
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f016 f831 	bl	8016e60 <siprintf>
				if(jsongo == 3){
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <ssi_handler+0x8cc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d118      	bne.n	8000e38 <ssi_handler+0x8a0>
					sprintf(pcInsert,
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <ssi_handler+0x8d0>)
 8000e08:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <ssi_handler+0x8d0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <ssi_handler+0x8d8>)
 8000e18:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <ssi_handler+0x8d0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4813      	ldr	r0, [pc, #76]	; (8000e6c <ssi_handler+0x8d4>)
 8000e20:	2468      	movs	r4, #104	; 0x68
 8000e22:	fb04 f303 	mul.w	r3, r4, r3
 8000e26:	4403      	add	r3, r0
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	460a      	mov	r2, r1
 8000e30:	4913      	ldr	r1, [pc, #76]	; (8000e80 <ssi_handler+0x8e8>)
 8000e32:	6a38      	ldr	r0, [r7, #32]
 8000e34:	f016 f814 	bl	8016e60 <siprintf>
			memset(listaction, '\0', sizeof(listaction));
 8000e38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <ssi_handler+0x8dc>)
 8000e40:	f015 fe2f 	bl	8016aa2 <memset>
			*next_tag_part = variable;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <ssi_handler+0x8d0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e4c:	801a      	strh	r2, [r3, #0]
			variable++;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <ssi_handler+0x8d0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <ssi_handler+0x8d0>)
 8000e56:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000e58:	6a38      	ldr	r0, [r7, #32]
 8000e5a:	f7ff f9c3 	bl	80001e4 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	e192      	b.n	800118a <ssi_handler+0xbf2>
 8000e64:	20003234 	.word	0x20003234
 8000e68:	20003230 	.word	0x20003230
 8000e6c:	2000883c 	.word	0x2000883c
 8000e70:	20000000 	.word	0x20000000
 8000e74:	2000336c 	.word	0x2000336c
 8000e78:	08018394 	.word	0x08018394
 8000e7c:	08018430 	.word	0x08018430
 8000e80:	080184ac 	.word	0x080184ac
			if(idtab == 1){
 8000e84:	4b84      	ldr	r3, [pc, #528]	; (8001098 <ssi_handler+0xb00>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d17c      	bne.n	8000f86 <ssi_handler+0x9ee>
			sprintf(pcInsert,
 8000e8c:	4b83      	ldr	r3, [pc, #524]	; (800109c <ssi_handler+0xb04>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a83      	ldr	r2, [pc, #524]	; (80010a0 <ssi_handler+0xb08>)
 8000e92:	2168      	movs	r1, #104	; 0x68
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	; (800109c <ssi_handler+0xb04>)
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 8000ea4:	4b7d      	ldr	r3, [pc, #500]	; (800109c <ssi_handler+0xb04>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4a7c      	ldr	r2, [pc, #496]	; (80010a4 <ssi_handler+0xb0c>)
 8000eb2:	1899      	adds	r1, r3, r2
 8000eb4:	60f9      	str	r1, [r7, #12]
					T[id].ptype,
 8000eb6:	4b79      	ldr	r3, [pc, #484]	; (800109c <ssi_handler+0xb04>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2268      	movs	r2, #104	; 0x68
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	4a77      	ldr	r2, [pc, #476]	; (80010a0 <ssi_handler+0xb08>)
 8000ec4:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 8000ec6:	4b75      	ldr	r3, [pc, #468]	; (800109c <ssi_handler+0xb04>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <ssi_handler+0xb08>)
 8000ecc:	2168      	movs	r1, #104	; 0x68
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	332c      	adds	r3, #44	; 0x2c
 8000ed6:	681d      	ldr	r5, [r3, #0]
 8000ed8:	4b70      	ldr	r3, [pc, #448]	; (800109c <ssi_handler+0xb04>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a70      	ldr	r2, [pc, #448]	; (80010a0 <ssi_handler+0xb08>)
 8000ede:	2168      	movs	r1, #104	; 0x68
 8000ee0:	fb01 f303 	mul.w	r3, r1, r3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3330      	adds	r3, #48	; 0x30
 8000ee8:	681e      	ldr	r6, [r3, #0]
 8000eea:	4b6c      	ldr	r3, [pc, #432]	; (800109c <ssi_handler+0xb04>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6c      	ldr	r2, [pc, #432]	; (80010a0 <ssi_handler+0xb08>)
 8000ef0:	2168      	movs	r1, #104	; 0x68
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3334      	adds	r3, #52	; 0x34
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <ssi_handler+0xb04>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <ssi_handler+0xb08>)
 8000f04:	2168      	movs	r1, #104	; 0x68
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3338      	adds	r3, #56	; 0x38
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	6079      	str	r1, [r7, #4]
 8000f12:	4b62      	ldr	r3, [pc, #392]	; (800109c <ssi_handler+0xb04>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a62      	ldr	r2, [pc, #392]	; (80010a0 <ssi_handler+0xb08>)
 8000f18:	2168      	movs	r1, #104	; 0x68
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	333c      	adds	r3, #60	; 0x3c
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <ssi_handler+0xb04>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a5d      	ldr	r2, [pc, #372]	; (80010a0 <ssi_handler+0xb08>)
 8000f2c:	2168      	movs	r1, #104	; 0x68
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	3340      	adds	r3, #64	; 0x40
 8000f36:	6819      	ldr	r1, [r3, #0]
					T[id].info,
 8000f38:	4b58      	ldr	r3, [pc, #352]	; (800109c <ssi_handler+0xb04>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2268      	movs	r2, #104	; 0x68
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	3340      	adds	r3, #64	; 0x40
 8000f44:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <ssi_handler+0xb08>)
 8000f46:	4413      	add	r3, r2
 8000f48:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <ssi_handler+0xb04>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <ssi_handler+0xb08>)
 8000f50:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f54:	fb0c f303 	mul.w	r3, ip, r3
 8000f58:	4403      	add	r3, r0
 8000f5a:	3364      	adds	r3, #100	; 0x64
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f60:	9208      	str	r2, [sp, #32]
 8000f62:	9107      	str	r1, [sp, #28]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	9306      	str	r3, [sp, #24]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	9105      	str	r1, [sp, #20]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	9204      	str	r2, [sp, #16]
 8000f70:	9603      	str	r6, [sp, #12]
 8000f72:	9502      	str	r5, [sp, #8]
 8000f74:	9401      	str	r4, [sp, #4]
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	9100      	str	r1, [sp, #0]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	494a      	ldr	r1, [pc, #296]	; (80010a8 <ssi_handler+0xb10>)
 8000f80:	6a38      	ldr	r0, [r7, #32]
 8000f82:	f015 ff6d 	bl	8016e60 <siprintf>
			if(idtab == 2){
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <ssi_handler+0xb00>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d177      	bne.n	800107e <ssi_handler+0xae6>
			sprintf(pcInsert,
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <ssi_handler+0xb04>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <ssi_handler+0xb08>)
 8000f94:	2168      	movs	r1, #104	; 0x68
 8000f96:	fb01 f303 	mul.w	r3, r1, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	; (800109c <ssi_handler+0xb04>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	; (800109c <ssi_handler+0xb04>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <ssi_handler+0xb0c>)
 8000fb4:	4413      	add	r3, r2
					T[id].ptype,
 8000fb6:	4a39      	ldr	r2, [pc, #228]	; (800109c <ssi_handler+0xb04>)
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	2168      	movs	r1, #104	; 0x68
 8000fbc:	fb01 f202 	mul.w	r2, r1, r2
 8000fc0:	3218      	adds	r2, #24
 8000fc2:	4937      	ldr	r1, [pc, #220]	; (80010a0 <ssi_handler+0xb08>)
 8000fc4:	440a      	add	r2, r1
			sprintf(pcInsert,
 8000fc6:	4935      	ldr	r1, [pc, #212]	; (800109c <ssi_handler+0xb04>)
 8000fc8:	6809      	ldr	r1, [r1, #0]
 8000fca:	4835      	ldr	r0, [pc, #212]	; (80010a0 <ssi_handler+0xb08>)
 8000fcc:	2468      	movs	r4, #104	; 0x68
 8000fce:	fb04 f101 	mul.w	r1, r4, r1
 8000fd2:	4401      	add	r1, r0
 8000fd4:	3104      	adds	r1, #4
 8000fd6:	6809      	ldr	r1, [r1, #0]
 8000fd8:	4830      	ldr	r0, [pc, #192]	; (800109c <ssi_handler+0xb04>)
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	4c30      	ldr	r4, [pc, #192]	; (80010a0 <ssi_handler+0xb08>)
 8000fde:	2568      	movs	r5, #104	; 0x68
 8000fe0:	fb05 f000 	mul.w	r0, r5, r0
 8000fe4:	4420      	add	r0, r4
 8000fe6:	3008      	adds	r0, #8
 8000fe8:	6800      	ldr	r0, [r0, #0]
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	4c2b      	ldr	r4, [pc, #172]	; (800109c <ssi_handler+0xb04>)
 8000fee:	6824      	ldr	r4, [r4, #0]
 8000ff0:	4d2b      	ldr	r5, [pc, #172]	; (80010a0 <ssi_handler+0xb08>)
 8000ff2:	2668      	movs	r6, #104	; 0x68
 8000ff4:	fb06 f404 	mul.w	r4, r6, r4
 8000ff8:	442c      	add	r4, r5
 8000ffa:	340c      	adds	r4, #12
 8000ffc:	6820      	ldr	r0, [r4, #0]
 8000ffe:	60b8      	str	r0, [r7, #8]
 8001000:	4d26      	ldr	r5, [pc, #152]	; (800109c <ssi_handler+0xb04>)
 8001002:	682d      	ldr	r5, [r5, #0]
 8001004:	4e26      	ldr	r6, [pc, #152]	; (80010a0 <ssi_handler+0xb08>)
 8001006:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800100a:	fb0c f505 	mul.w	r5, ip, r5
 800100e:	4435      	add	r5, r6
 8001010:	3510      	adds	r5, #16
 8001012:	682d      	ldr	r5, [r5, #0]
 8001014:	4e21      	ldr	r6, [pc, #132]	; (800109c <ssi_handler+0xb04>)
 8001016:	6836      	ldr	r6, [r6, #0]
 8001018:	4821      	ldr	r0, [pc, #132]	; (80010a0 <ssi_handler+0xb08>)
 800101a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800101e:	fb0c f606 	mul.w	r6, ip, r6
 8001022:	4406      	add	r6, r0
 8001024:	3614      	adds	r6, #20
 8001026:	6836      	ldr	r6, [r6, #0]
					T[id].info,
 8001028:	481c      	ldr	r0, [pc, #112]	; (800109c <ssi_handler+0xb04>)
 800102a:	6800      	ldr	r0, [r0, #0]
 800102c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001030:	fb0c fc00 	mul.w	ip, ip, r0
 8001034:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001038:	4819      	ldr	r0, [pc, #100]	; (80010a0 <ssi_handler+0xb08>)
 800103a:	4484      	add	ip, r0
 800103c:	f10c 0004 	add.w	r0, ip, #4
 8001040:	6078      	str	r0, [r7, #4]
			sprintf(pcInsert,
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <ssi_handler+0xb04>)
 8001044:	6800      	ldr	r0, [r0, #0]
 8001046:	4c16      	ldr	r4, [pc, #88]	; (80010a0 <ssi_handler+0xb08>)
 8001048:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800104c:	fb0c fc00 	mul.w	ip, ip, r0
 8001050:	44a4      	add	ip, r4
 8001052:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001056:	f8dc 0000 	ldr.w	r0, [ip]
 800105a:	9008      	str	r0, [sp, #32]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	9007      	str	r0, [sp, #28]
 8001060:	9606      	str	r6, [sp, #24]
 8001062:	9505      	str	r5, [sp, #20]
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	9004      	str	r0, [sp, #16]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	9003      	str	r0, [sp, #12]
 800106c:	9102      	str	r1, [sp, #8]
 800106e:	9201      	str	r2, [sp, #4]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <ssi_handler+0xb14>)
 8001078:	6a38      	ldr	r0, [r7, #32]
 800107a:	f015 fef1 	bl	8016e60 <siprintf>
			if(idtab == 3){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <ssi_handler+0xb00>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d163      	bne.n	800114e <ssi_handler+0xbb6>
				sprintf(jsonrp, "{");
 8001086:	490a      	ldr	r1, [pc, #40]	; (80010b0 <ssi_handler+0xb18>)
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <ssi_handler+0xb1c>)
 800108a:	f015 fee9 	bl	8016e60 <siprintf>
				strcat(bufervar, jsonrp);
 800108e:	4909      	ldr	r1, [pc, #36]	; (80010b4 <ssi_handler+0xb1c>)
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <ssi_handler+0xb20>)
 8001092:	f015 ff48 	bl	8016f26 <strcat>
			while(variable <= numpin-1){
 8001096:	e032      	b.n	80010fe <ssi_handler+0xb66>
 8001098:	2000323c 	.word	0x2000323c
 800109c:	20003238 	.word	0x20003238
 80010a0:	2000883c 	.word	0x2000883c
 80010a4:	20000000 	.word	0x20000000
 80010a8:	080184d0 	.word	0x080184d0
 80010ac:	08018560 	.word	0x08018560
 80010b0:	080180e4 	.word	0x080180e4
 80010b4:	20003240 	.word	0x20003240
 80010b8:	20000534 	.word	0x20000534
				if(T[variable].topin == 2){
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <ssi_handler+0xbfc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a35      	ldr	r2, [pc, #212]	; (8001198 <ssi_handler+0xc00>)
 80010c2:	2168      	movs	r1, #104	; 0x68
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d111      	bne.n	80010f4 <ssi_handler+0xb5c>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <ssi_handler+0xbfc>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <ssi_handler+0xc04>)
 80010de:	441a      	add	r2, r3
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <ssi_handler+0xbfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	492e      	ldr	r1, [pc, #184]	; (80011a0 <ssi_handler+0xc08>)
 80010e6:	482f      	ldr	r0, [pc, #188]	; (80011a4 <ssi_handler+0xc0c>)
 80010e8:	f015 feba 	bl	8016e60 <siprintf>
				    strcat(bufervar, jsonrp);
 80010ec:	492d      	ldr	r1, [pc, #180]	; (80011a4 <ssi_handler+0xc0c>)
 80010ee:	482e      	ldr	r0, [pc, #184]	; (80011a8 <ssi_handler+0xc10>)
 80010f0:	f015 ff19 	bl	8016f26 <strcat>
				variable++;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <ssi_handler+0xbfc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <ssi_handler+0xbfc>)
 80010fc:	6013      	str	r3, [r2, #0]
			while(variable <= numpin-1){
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <ssi_handler+0xbfc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b39      	cmp	r3, #57	; 0x39
 8001104:	ddda      	ble.n	80010bc <ssi_handler+0xb24>
				bufervar[strlen(bufervar)-1] = '\0';
 8001106:	4828      	ldr	r0, [pc, #160]	; (80011a8 <ssi_handler+0xc10>)
 8001108:	f7ff f86c 	bl	80001e4 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	3b01      	subs	r3, #1
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <ssi_handler+0xc10>)
 8001112:	2100      	movs	r1, #0
 8001114:	54d1      	strb	r1, [r2, r3]
				sprintf(jsonrp, "}");
 8001116:	4925      	ldr	r1, [pc, #148]	; (80011ac <ssi_handler+0xc14>)
 8001118:	4822      	ldr	r0, [pc, #136]	; (80011a4 <ssi_handler+0xc0c>)
 800111a:	f015 fea1 	bl	8016e60 <siprintf>
				strcat(bufervar, jsonrp);
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <ssi_handler+0xc0c>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <ssi_handler+0xc10>)
 8001122:	f015 ff00 	bl	8016f26 <strcat>
				variable = 0;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <ssi_handler+0xbfc>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id, tp[id].pins, bufervar);
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <ssi_handler+0xc18>)
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <ssi_handler+0xc18>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <ssi_handler+0xc04>)
 800113e:	4413      	add	r3, r2
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <ssi_handler+0xc10>)
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	460a      	mov	r2, r1
 8001146:	491b      	ldr	r1, [pc, #108]	; (80011b4 <ssi_handler+0xc1c>)
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f015 fe89 	bl	8016e60 <siprintf>
			memset(jsonrp, '\0', sizeof(jsonrp)); // TEST ????????????? TEST
 800114e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001152:	2100      	movs	r1, #0
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <ssi_handler+0xc0c>)
 8001156:	f015 fca4 	bl	8016aa2 <memset>
			memset(bufervar, '\0', sizeof(bufervar));
 800115a:	f642 1204 	movw	r2, #10500	; 0x2904
 800115e:	2100      	movs	r1, #0
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <ssi_handler+0xc10>)
 8001162:	f015 fc9e 	bl	8016aa2 <memset>
			return strlen(pcInsert);
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f7ff f83c 	bl	80001e4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
 8001170:	e00b      	b.n	800118a <ssi_handler+0xbf2>
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
 8001172:	4911      	ldr	r1, [pc, #68]	; (80011b8 <ssi_handler+0xc20>)
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	f015 fe73 	bl	8016e60 <siprintf>
			return strlen(pcInsert);
 800117a:	6a38      	ldr	r0, [r7, #32]
 800117c:	f7ff f832 	bl	80001e4 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29b      	uxth	r3, r3
 8001184:	e001      	b.n	800118a <ssi_handler+0xbf2>
			break;
 8001186:	bf00      	nop
	}
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	bf00      	nop
 8001194:	20003230 	.word	0x20003230
 8001198:	2000883c 	.word	0x2000883c
 800119c:	20000000 	.word	0x20000000
 80011a0:	080180e8 	.word	0x080180e8
 80011a4:	20003240 	.word	0x20003240
 80011a8:	20000534 	.word	0x20000534
 80011ac:	080180f4 	.word	0x080180f4
 80011b0:	20003238 	.word	0x20003238
 80011b4:	080185d8 	.word	0x080185d8
 80011b8:	080185fc 	.word	0x080185fc

080011bc <CGIForm_Handler>:
};

const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI
const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d120      	bne.n	8001212 <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e019      	b.n	800120a <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <CGIForm_Handler+0x60>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7fe fff4 	bl	80001d0 <strcmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f015 fafb 	bl	80167f4 <atoi>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <CGIForm_Handler+0x64>)
 8001202:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	429a      	cmp	r2, r3
 8001210:	dbe1      	blt.n	80011d6 <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <CGIForm_Handler+0x68>)
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	080186fc 	.word	0x080186fc
 8001220:	20003234 	.word	0x20003234
 8001224:	080186b4 	.word	0x080186b4

08001228 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <CGIForm_Handler1+0x20>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d002      	beq.n	8001248 <CGIForm_Handler1+0x20>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d137      	bne.n	80012b8 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e030      	b.n	80012b0 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4921      	ldr	r1, [pc, #132]	; (80012e0 <CGIForm_Handler1+0xb8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ffb8 	bl	80001d0 <strcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10a      	bne.n	800127c <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f015 fabf 	bl	80167f4 <atoi>
 8001276:	4603      	mov	r3, r0
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <CGIForm_Handler1+0xbc>)
 800127a:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4918      	ldr	r1, [pc, #96]	; (80012e8 <CGIForm_Handler1+0xc0>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffa1 	bl	80001d0 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10a      	bne.n	80012aa <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	4413      	add	r3, r2
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f015 faa8 	bl	80167f4 <atoi>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a11      	ldr	r2, [pc, #68]	; (80012ec <CGIForm_Handler1+0xc4>)
 80012a8:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbca      	blt.n	800124e <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <CGIForm_Handler1+0xc8>)
 80012c0:	e00a      	b.n	80012d8 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d101      	bne.n	80012cc <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <CGIForm_Handler1+0xcc>)
 80012ca:	e005      	b.n	80012d8 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d101      	bne.n	80012d6 <CGIForm_Handler1+0xae>
			return "/form3.shtml";
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <CGIForm_Handler1+0xd0>)
 80012d4:	e000      	b.n	80012d8 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <CGIForm_Handler1+0xd4>)
	}
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	08018704 	.word	0x08018704
 80012e4:	20003238 	.word	0x20003238
 80012e8:	08018708 	.word	0x08018708
 80012ec:	2000323c 	.word	0x2000323c
 80012f0:	080186c0 	.word	0x080186c0
 80012f4:	080186d0 	.word	0x080186d0
 80012f8:	080186e0 	.word	0x080186e0
 80012fc:	0801870c 	.word	0x0801870c

08001300 <CGIForm_Handler2>:

const char *CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <CGIForm_Handler2+0xa8>)
 8001310:	f015 fcb0 	bl	8016c74 <puts>
	if (iIndex == 4)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b04      	cmp	r3, #4
 8001318:	d140      	bne.n	800139c <CGIForm_Handler2+0x9c>
	{
		for (int i=0; i<iNumParams; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e039      	b.n	8001394 <CGIForm_Handler2+0x94>
		{
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4920      	ldr	r1, [pc, #128]	; (80013ac <CGIForm_Handler2+0xac>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff4f 	bl	80001d0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d12a      	bne.n	800138e <CGIForm_Handler2+0x8e>
			{
				id = atoi(pcValue[i]);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	4413      	add	r3, r2
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f015 fa56 	bl	80167f4 <atoi>
 8001348:	4603      	mov	r3, r0
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <CGIForm_Handler2+0xb0>)
 800134c:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <CGIForm_Handler2+0xb0>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <CGIForm_Handler2+0xb4>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3304      	adds	r3, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <CGIForm_Handler2+0xb0>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4912      	ldr	r1, [pc, #72]	; (80013b4 <CGIForm_Handler2+0xb4>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <CGIForm_Handler2+0xb0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	490d      	ldr	r1, [pc, #52]	; (80013b4 <CGIForm_Handler2+0xb4>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3308      	adds	r3, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		for (int i=0; i<iNumParams; i++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbc1      	blt.n	8001320 <CGIForm_Handler2+0x20>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <CGIForm_Handler2+0xb8>)
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08018718 	.word	0x08018718
 80013ac:	08018724 	.word	0x08018724
 80013b0:	20003238 	.word	0x20003238
 80013b4:	200084f4 	.word	0x200084f4
 80013b8:	080186f0 	.word	0x080186f0

080013bc <httpd_post_begin>:
static void *current_connection;
static void *valid_connection;
int http_post_content_len;
// char *urls;
char urls[30] = { 0 };
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request, uint16_t http_request_len, int content_len, char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	807b      	strh	r3, [r7, #2]
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 80013ca:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <httpd_post_begin+0x44>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6013      	str	r3, [r2, #0]
	//urls = uri;
	strncpy(urls, uri, 15);
 80013d0:	220f      	movs	r2, #15
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <httpd_post_begin+0x48>)
 80013d6:	f015 fddc 	bl	8016f92 <strncpy>
	//printf("+++++++++uri %s +++++++++++------- \r\n",uri);  // Вывод /select.shtml +
	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);
	if (current_connection != connection) {
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <httpd_post_begin+0x4c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d007      	beq.n	80013f4 <httpd_post_begin+0x38>
		current_connection = connection;
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <httpd_post_begin+0x4c>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <httpd_post_begin+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e001      	b.n	80013f8 <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 80013f4:	f06f 0305 	mvn.w	r3, #5
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200084f0 	.word	0x200084f0
 8001404:	20003504 	.word	0x20003504
 8001408:	200034fc 	.word	0x200034fc
 800140c:	20003500 	.word	0x20003500

08001410 <httpd_post_receive_data>:
//		printf("END \r\n");
//		pbuf_free(p);
//	}
//	return ERR_VAL;
//}
err_t httpd_post_receive_data(void *connection, struct pbuf *p ) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]

    //printf("OK POST 2 \r\n");
    //char data;


    if (current_connection == connection && p != NULL) {
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <httpd_post_receive_data+0x5c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d113      	bne.n	800144c <httpd_post_receive_data+0x3c>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <httpd_post_receive_data+0x3c>

        //data = p->payload;
        //printf("DATA %s \r\n", data);
        //strcat(bufervar, p->payload);
        //strncpy(readvar, p->payload, p->tot_len);
        strncpy(readvar, p->payload, p->len);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	895b      	ldrh	r3, [r3, #10]
 8001432:	461a      	mov	r2, r3
 8001434:	480e      	ldr	r0, [pc, #56]	; (8001470 <httpd_post_receive_data+0x60>)
 8001436:	f015 fdac 	bl	8016f92 <strncpy>
        //strcpy(readvar, p->payload);
        //printf("DATA %s \r\n", readvar);
        //printf("num %d \r\n", p->len);
        strcat(bufervar, readvar);
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <httpd_post_receive_data+0x60>)
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <httpd_post_receive_data+0x64>)
 800143e:	f015 fd72 	bl	8016f26 <strcat>
        pbuf_free(p);
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f00c f800 	bl	800d448 <pbuf_free>
        //memset(data, '\0', sizeof(data));
        //memset(readvar, '\0', sizeof(readvar));
        return ERR_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e00a      	b.n	8001462 <httpd_post_receive_data+0x52>
    }

    if (p != NULL) {
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <httpd_post_receive_data+0x4e>
        printf("END \r\n");
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <httpd_post_receive_data+0x68>)
 8001454:	f015 fc0e 	bl	8016c74 <puts>
        pbuf_free(p);
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f00b fff5 	bl	800d448 <pbuf_free>
    }

    return ERR_VAL;
 800145e:	f06f 0305 	mvn.w	r3, #5
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200034fc 	.word	0x200034fc
 8001470:	20002e38 	.word	0x20002e38
 8001474:	20000534 	.word	0x20000534
 8001478:	08018728 	.word	0x08018728

0800147c <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8001482:	af00      	add	r7, sp, #0
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	6018      	str	r0, [r3, #0]
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	6019      	str	r1, [r3, #0]
 8001490:	1dbb      	adds	r3, r7, #6
 8001492:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
 8001494:	48ca      	ldr	r0, [pc, #808]	; (80017c0 <httpd_post_finished+0x344>)
 8001496:	f015 fbed 	bl	8016c74 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	int variable2;
	//char urlline[http_post_content_len];
	char urlline[1000] = {0};
 80014a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	3304      	adds	r3, #4
 80014b0:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f015 faf3 	bl	8016aa2 <memset>
	char name0[50] = {0};
 80014bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	3304      	adds	r3, #4
 80014c6:	222e      	movs	r2, #46	; 0x2e
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f015 fae9 	bl	8016aa2 <memset>
	char nametoken[50] = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	222e      	movs	r2, #46	; 0x2e
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f015 fadf 	bl	8016aa2 <memset>

	memset(name0, '\0', sizeof(name0));
 80014e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e8:	2232      	movs	r2, #50	; 0x32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f015 fad8 	bl	8016aa2 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 80014f2:	4bb4      	ldr	r3, [pc, #720]	; (80017c4 <httpd_post_finished+0x348>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014fc:	49b2      	ldr	r1, [pc, #712]	; (80017c8 <httpd_post_finished+0x34c>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f015 fd47 	bl	8016f92 <strncpy>

	printf("+++ urlline +++ %s \r\n", urlline);
 8001504:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001508:	4619      	mov	r1, r3
 800150a:	48b0      	ldr	r0, [pc, #704]	; (80017cc <httpd_post_finished+0x350>)
 800150c:	f015 fb2c 	bl	8016b68 <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 8001510:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <httpd_post_finished+0x348>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	48ae      	ldr	r0, [pc, #696]	; (80017d0 <httpd_post_finished+0x354>)
 8001518:	f015 fb26 	bl	8016b68 <iprintf>
	char *rest = urlline;
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001524:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 8001526:	e27a      	b.n	8001a1e <httpd_post_finished+0x5a2>
		//printf("%s\n", token);
		char *rest1 = token;
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8001530:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 8001532:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001536:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800153a:	4618      	mov	r0, r3
 800153c:	f015 fcf3 	bl	8016f26 <strcat>
		y = 0;
 8001540:	4ba4      	ldr	r3, [pc, #656]	; (80017d4 <httpd_post_finished+0x358>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001546:	e21e      	b.n	8001986 <httpd_post_finished+0x50a>
			z = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 800154e:	4ba1      	ldr	r3, [pc, #644]	; (80017d4 <httpd_post_finished+0x358>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d133      	bne.n	80015be <httpd_post_finished+0x142>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800155e:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001560:	e016      	b.n	8001590 <httpd_post_finished+0x114>
					if (z == 0) {
 8001562:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <httpd_post_finished+0xf6>
						name1 = token2;
 800156a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800156e:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 8001572:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001576:	2b01      	cmp	r3, #1
 8001578:	d105      	bne.n	8001586 <httpd_post_finished+0x10a>
						id = atoi(token2);
 800157a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800157e:	f015 f939 	bl	80167f4 <atoi>
 8001582:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 8001586:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f107 0214 	add.w	r2, r7, #20
 800159a:	498f      	ldr	r1, [pc, #572]	; (80017d8 <httpd_post_finished+0x35c>)
 800159c:	4618      	mov	r0, r3
 800159e:	f015 fd4a 	bl	8017036 <strtok_r>
 80015a2:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 80015a6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1d9      	bne.n	8001562 <httpd_post_finished+0xe6>
				}
				memset((char *)rest2, '\0', sizeof(*rest2)); // TEST ????????????? TEST
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f015 fa72 	bl	8016aa2 <memset>
			}
			if(y == 1){
 80015be:	4b85      	ldr	r3, [pc, #532]	; (80017d4 <httpd_post_finished+0x358>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	f040 81da 	bne.w	800197c <httpd_post_finished+0x500>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 80015c8:	4984      	ldr	r1, [pc, #528]	; (80017dc <httpd_post_finished+0x360>)
 80015ca:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80015ce:	f7fe fdff 	bl	80001d0 <strcmp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <httpd_post_finished+0x178>
					strcpy(T[id].ptype, token1);
 80015d8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80015dc:	2268      	movs	r2, #104	; 0x68
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	3318      	adds	r3, #24
 80015e4:	4a7e      	ldr	r2, [pc, #504]	; (80017e0 <httpd_post_finished+0x364>)
 80015e6:	4413      	add	r3, r2
 80015e8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80015ec:	4618      	mov	r0, r3
 80015ee:	f015 fcb6 	bl	8016f5e <strcpy>
 80015f2:	e1c3      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "topin") == 0) {
 80015f4:	497b      	ldr	r1, [pc, #492]	; (80017e4 <httpd_post_finished+0x368>)
 80015f6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80015fa:	f7fe fde9 	bl	80001d0 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10d      	bne.n	8001620 <httpd_post_finished+0x1a4>
					T[id].topin = atoi(token1);
 8001604:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001608:	f015 f8f4 	bl	80167f4 <atoi>
 800160c:	4602      	mov	r2, r0
 800160e:	4974      	ldr	r1, [pc, #464]	; (80017e0 <httpd_post_finished+0x364>)
 8001610:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001614:	2068      	movs	r0, #104	; 0x68
 8001616:	fb00 f303 	mul.w	r3, r0, r3
 800161a:	440b      	add	r3, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e1ad      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "binter") == 0) {
 8001620:	4971      	ldr	r1, [pc, #452]	; (80017e8 <httpd_post_finished+0x36c>)
 8001622:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001626:	f7fe fdd3 	bl	80001d0 <strcmp>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10e      	bne.n	800164e <httpd_post_finished+0x1d2>
					T[id].binter = atoi(token1);
 8001630:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001634:	f015 f8de 	bl	80167f4 <atoi>
 8001638:	4602      	mov	r2, r0
 800163a:	4969      	ldr	r1, [pc, #420]	; (80017e0 <httpd_post_finished+0x364>)
 800163c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001640:	2068      	movs	r0, #104	; 0x68
 8001642:	fb00 f303 	mul.w	r3, r0, r3
 8001646:	440b      	add	r3, r1
 8001648:	332c      	adds	r3, #44	; 0x2c
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e196      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "hinter") == 0) {
 800164e:	4967      	ldr	r1, [pc, #412]	; (80017ec <httpd_post_finished+0x370>)
 8001650:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001654:	f7fe fdbc 	bl	80001d0 <strcmp>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10e      	bne.n	800167c <httpd_post_finished+0x200>
					T[id].hinter = atoi(token1);
 800165e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001662:	f015 f8c7 	bl	80167f4 <atoi>
 8001666:	4602      	mov	r2, r0
 8001668:	495d      	ldr	r1, [pc, #372]	; (80017e0 <httpd_post_finished+0x364>)
 800166a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800166e:	2068      	movs	r0, #104	; 0x68
 8001670:	fb00 f303 	mul.w	r3, r0, r3
 8001674:	440b      	add	r3, r1
 8001676:	3330      	adds	r3, #48	; 0x30
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e17f      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "repeat") == 0) {
 800167c:	495c      	ldr	r1, [pc, #368]	; (80017f0 <httpd_post_finished+0x374>)
 800167e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001682:	f7fe fda5 	bl	80001d0 <strcmp>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10e      	bne.n	80016aa <httpd_post_finished+0x22e>
					T[id].repeat = atoi(token1);
 800168c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001690:	f015 f8b0 	bl	80167f4 <atoi>
 8001694:	4602      	mov	r2, r0
 8001696:	4952      	ldr	r1, [pc, #328]	; (80017e0 <httpd_post_finished+0x364>)
 8001698:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800169c:	2068      	movs	r0, #104	; 0x68
 800169e:	fb00 f303 	mul.w	r3, r0, r3
 80016a2:	440b      	add	r3, r1
 80016a4:	3334      	adds	r3, #52	; 0x34
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e168      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "rinter") == 0) {
 80016aa:	4952      	ldr	r1, [pc, #328]	; (80017f4 <httpd_post_finished+0x378>)
 80016ac:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80016b0:	f7fe fd8e 	bl	80001d0 <strcmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10e      	bne.n	80016d8 <httpd_post_finished+0x25c>
					T[id].rinter = atoi(token1);
 80016ba:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80016be:	f015 f899 	bl	80167f4 <atoi>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4946      	ldr	r1, [pc, #280]	; (80017e0 <httpd_post_finished+0x364>)
 80016c6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80016ca:	2068      	movs	r0, #104	; 0x68
 80016cc:	fb00 f303 	mul.w	r3, r0, r3
 80016d0:	440b      	add	r3, r1
 80016d2:	3338      	adds	r3, #56	; 0x38
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e151      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "dcinter") == 0) {
 80016d8:	4947      	ldr	r1, [pc, #284]	; (80017f8 <httpd_post_finished+0x37c>)
 80016da:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80016de:	f7fe fd77 	bl	80001d0 <strcmp>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10e      	bne.n	8001706 <httpd_post_finished+0x28a>
					T[id].dcinter = atoi(token1);
 80016e8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80016ec:	f015 f882 	bl	80167f4 <atoi>
 80016f0:	4602      	mov	r2, r0
 80016f2:	493b      	ldr	r1, [pc, #236]	; (80017e0 <httpd_post_finished+0x364>)
 80016f4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80016f8:	2068      	movs	r0, #104	; 0x68
 80016fa:	fb00 f303 	mul.w	r3, r0, r3
 80016fe:	440b      	add	r3, r1
 8001700:	333c      	adds	r3, #60	; 0x3c
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e13a      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "pclick") == 0) {
 8001706:	493d      	ldr	r1, [pc, #244]	; (80017fc <httpd_post_finished+0x380>)
 8001708:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800170c:	f7fe fd60 	bl	80001d0 <strcmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10e      	bne.n	8001734 <httpd_post_finished+0x2b8>
					T[id].pclick = atoi(token1);
 8001716:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800171a:	f015 f86b 	bl	80167f4 <atoi>
 800171e:	4602      	mov	r2, r0
 8001720:	492f      	ldr	r1, [pc, #188]	; (80017e0 <httpd_post_finished+0x364>)
 8001722:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001726:	2068      	movs	r0, #104	; 0x68
 8001728:	fb00 f303 	mul.w	r3, r0, r3
 800172c:	440b      	add	r3, r1
 800172e:	3340      	adds	r3, #64	; 0x40
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e123      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "info") == 0) {
 8001734:	4932      	ldr	r1, [pc, #200]	; (8001800 <httpd_post_finished+0x384>)
 8001736:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800173a:	f7fe fd49 	bl	80001d0 <strcmp>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10e      	bne.n	8001762 <httpd_post_finished+0x2e6>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 8001744:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001748:	2268      	movs	r2, #104	; 0x68
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	3340      	adds	r3, #64	; 0x40
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <httpd_post_finished+0x364>)
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800175a:	4618      	mov	r0, r3
 800175c:	f015 fbff 	bl	8016f5e <strcpy>
 8001760:	e10c      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "onoff") == 0) {
 8001762:	4928      	ldr	r1, [pc, #160]	; (8001804 <httpd_post_finished+0x388>)
 8001764:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001768:	f7fe fd32 	bl	80001d0 <strcmp>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <httpd_post_finished+0x314>
					T[id].onoff = atoi(token1);
 8001772:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001776:	f015 f83d 	bl	80167f4 <atoi>
 800177a:	4602      	mov	r2, r0
 800177c:	4918      	ldr	r1, [pc, #96]	; (80017e0 <httpd_post_finished+0x364>)
 800177e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001782:	2068      	movs	r0, #104	; 0x68
 8001784:	fb00 f303 	mul.w	r3, r0, r3
 8001788:	440b      	add	r3, r1
 800178a:	3364      	adds	r3, #100	; 0x64
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e0f5      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "pwm") == 0) {
 8001790:	491d      	ldr	r1, [pc, #116]	; (8001808 <httpd_post_finished+0x38c>)
 8001792:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001796:	f7fe fd1b 	bl	80001d0 <strcmp>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d135      	bne.n	800180c <httpd_post_finished+0x390>
					T[id].pwm = atoi(token1);
 80017a0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80017a4:	f015 f826 	bl	80167f4 <atoi>
 80017a8:	4602      	mov	r2, r0
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <httpd_post_finished+0x364>)
 80017ac:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80017b0:	2068      	movs	r0, #104	; 0x68
 80017b2:	fb00 f303 	mul.w	r3, r0, r3
 80017b6:	440b      	add	r3, r1
 80017b8:	3304      	adds	r3, #4
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e0de      	b.n	800197c <httpd_post_finished+0x500>
 80017be:	bf00      	nop
 80017c0:	08018730 	.word	0x08018730
 80017c4:	200084f0 	.word	0x200084f0
 80017c8:	20000534 	.word	0x20000534
 80017cc:	0801873c 	.word	0x0801873c
 80017d0:	08018754 	.word	0x08018754
 80017d4:	20009fcc 	.word	0x20009fcc
 80017d8:	08018760 	.word	0x08018760
 80017dc:	08018764 	.word	0x08018764
 80017e0:	2000883c 	.word	0x2000883c
 80017e4:	0801876c 	.word	0x0801876c
 80017e8:	08018774 	.word	0x08018774
 80017ec:	0801877c 	.word	0x0801877c
 80017f0:	08018784 	.word	0x08018784
 80017f4:	0801878c 	.word	0x0801878c
 80017f8:	08018794 	.word	0x08018794
 80017fc:	0801879c 	.word	0x0801879c
 8001800:	080187a4 	.word	0x080187a4
 8001804:	080187ac 	.word	0x080187ac
 8001808:	080187b4 	.word	0x080187b4
				} else if (strcmp(name1, "on") == 0) {
 800180c:	49ad      	ldr	r1, [pc, #692]	; (8001ac4 <httpd_post_finished+0x648>)
 800180e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001812:	f7fe fcdd 	bl	80001d0 <strcmp>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10e      	bne.n	800183a <httpd_post_finished+0x3be>
					T[id].on = atoi(token1);
 800181c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001820:	f014 ffe8 	bl	80167f4 <atoi>
 8001824:	4602      	mov	r2, r0
 8001826:	49a8      	ldr	r1, [pc, #672]	; (8001ac8 <httpd_post_finished+0x64c>)
 8001828:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800182c:	2068      	movs	r0, #104	; 0x68
 800182e:	fb00 f303 	mul.w	r3, r0, r3
 8001832:	440b      	add	r3, r1
 8001834:	3308      	adds	r3, #8
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e0a0      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "istate") == 0) {
 800183a:	49a4      	ldr	r1, [pc, #656]	; (8001acc <httpd_post_finished+0x650>)
 800183c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001840:	f7fe fcc6 	bl	80001d0 <strcmp>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10e      	bne.n	8001868 <httpd_post_finished+0x3ec>
					T[id].istate = atoi(token1);
 800184a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800184e:	f014 ffd1 	bl	80167f4 <atoi>
 8001852:	4602      	mov	r2, r0
 8001854:	499c      	ldr	r1, [pc, #624]	; (8001ac8 <httpd_post_finished+0x64c>)
 8001856:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800185a:	2068      	movs	r0, #104	; 0x68
 800185c:	fb00 f303 	mul.w	r3, r0, r3
 8001860:	440b      	add	r3, r1
 8001862:	330c      	adds	r3, #12
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e089      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "dvalue") == 0) {
 8001868:	4999      	ldr	r1, [pc, #612]	; (8001ad0 <httpd_post_finished+0x654>)
 800186a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800186e:	f7fe fcaf 	bl	80001d0 <strcmp>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10e      	bne.n	8001896 <httpd_post_finished+0x41a>
					T[id].dvalue = atoi(token1);
 8001878:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800187c:	f014 ffba 	bl	80167f4 <atoi>
 8001880:	4602      	mov	r2, r0
 8001882:	4991      	ldr	r1, [pc, #580]	; (8001ac8 <httpd_post_finished+0x64c>)
 8001884:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001888:	2068      	movs	r0, #104	; 0x68
 800188a:	fb00 f303 	mul.w	r3, r0, r3
 800188e:	440b      	add	r3, r1
 8001890:	3310      	adds	r3, #16
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e072      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "ponr") == 0) {
 8001896:	498f      	ldr	r1, [pc, #572]	; (8001ad4 <httpd_post_finished+0x658>)
 8001898:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800189c:	f7fe fc98 	bl	80001d0 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <httpd_post_finished+0x448>
					T[id].ponr = atoi(token1);
 80018a6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80018aa:	f014 ffa3 	bl	80167f4 <atoi>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4985      	ldr	r1, [pc, #532]	; (8001ac8 <httpd_post_finished+0x64c>)
 80018b2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80018b6:	2068      	movs	r0, #104	; 0x68
 80018b8:	fb00 f303 	mul.w	r3, r0, r3
 80018bc:	440b      	add	r3, r1
 80018be:	3314      	adds	r3, #20
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e05b      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "idin") == 0) {
 80018c4:	4984      	ldr	r1, [pc, #528]	; (8001ad8 <httpd_post_finished+0x65c>)
 80018c6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80018ca:	f7fe fc81 	bl	80001d0 <strcmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d139      	bne.n	8001948 <httpd_post_finished+0x4cc>
					//printf("idin------- %d \r\n", atoi(token1));
					while(variable1 <= numpintopin-1){
 80018d4:	e030      	b.n	8001938 <httpd_post_finished+0x4bc>
						if(TO[variable1].flag == 0){
 80018d6:	4981      	ldr	r1, [pc, #516]	; (8001adc <httpd_post_finished+0x660>)
 80018d8:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11f      	bne.n	800192e <httpd_post_finished+0x4b2>
							TO[variable1].idin = atoi(token1);
 80018ee:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80018f2:	f014 ff7f 	bl	80167f4 <atoi>
 80018f6:	4601      	mov	r1, r0
 80018f8:	4878      	ldr	r0, [pc, #480]	; (8001adc <httpd_post_finished+0x660>)
 80018fa:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4403      	add	r3, r0
 8001908:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 800190a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800190e:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 8001912:	4972      	ldr	r1, [pc, #456]	; (8001adc <httpd_post_finished+0x660>)
 8001914:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3308      	adds	r3, #8
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 8001928:	2346      	movs	r3, #70	; 0x46
 800192a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 800192e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while(variable1 <= numpintopin-1){
 8001938:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800193c:	2b45      	cmp	r3, #69	; 0x45
 800193e:	ddca      	ble.n	80018d6 <httpd_post_finished+0x45a>
					}
					variable1 = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8001946:	e019      	b.n	800197c <httpd_post_finished+0x500>
				} else if (strcmp(name1, "idout") == 0) {
 8001948:	4965      	ldr	r1, [pc, #404]	; (8001ae0 <httpd_post_finished+0x664>)
 800194a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800194e:	f7fe fc3f 	bl	80001d0 <strcmp>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <httpd_post_finished+0x500>
					TO[variable2].idout = atoi(token1);
 8001958:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800195c:	f014 ff4a 	bl	80167f4 <atoi>
 8001960:	4601      	mov	r1, r0
 8001962:	485e      	ldr	r0, [pc, #376]	; (8001adc <httpd_post_finished+0x660>)
 8001964:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4403      	add	r3, r0
 8001972:	3304      	adds	r3, #4
 8001974:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//					}
//					variable1 = 0;
					//////////////
				}
			}
			y++;
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <httpd_post_finished+0x668>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <httpd_post_finished+0x668>)
 8001984:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f107 0218 	add.w	r2, r7, #24
 8001990:	4955      	ldr	r1, [pc, #340]	; (8001ae8 <httpd_post_finished+0x66c>)
 8001992:	4618      	mov	r0, r3
 8001994:	f015 fb4f 	bl	8017036 <strtok_r>
 8001998:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 800199c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f add1 	bne.w	8001548 <httpd_post_finished+0xcc>
		}
		memset((char *)rest1, '\0', sizeof(*rest1)); // TEST ????????????? TEST
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f015 f876 	bl	8016aa2 <memset>
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то, его заполняем "null".
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 80019be:	494b      	ldr	r1, [pc, #300]	; (8001aec <httpd_post_finished+0x670>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f015 fa4d 	bl	8016e60 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 80019c6:	f107 0220 	add.w	r2, r7, #32
 80019ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fbfd 	bl	80001d0 <strcmp>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10d      	bne.n	80019f8 <httpd_post_finished+0x57c>
			strcpy(T[id].info, "null");
 80019dc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80019e0:	2268      	movs	r2, #104	; 0x68
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	3340      	adds	r3, #64	; 0x40
 80019e8:	4a37      	ldr	r2, [pc, #220]	; (8001ac8 <httpd_post_finished+0x64c>)
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	4a40      	ldr	r2, [pc, #256]	; (8001af0 <httpd_post_finished+0x674>)
 80019f0:	6810      	ldr	r0, [r2, #0]
 80019f2:	6018      	str	r0, [r3, #0]
 80019f4:	7912      	ldrb	r2, [r2, #4]
 80019f6:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 80019f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019fc:	2232      	movs	r2, #50	; 0x32
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f015 f84e 	bl	8016aa2 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2232      	movs	r2, #50	; 0x32
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f015 f847 	bl	8016aa2 <memset>
		z++;
 8001a14:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f107 021c 	add.w	r2, r7, #28
 8001a28:	4932      	ldr	r1, [pc, #200]	; (8001af4 <httpd_post_finished+0x678>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f015 fb03 	bl	8017036 <strtok_r>
 8001a30:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8001a34:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f47f ad75 	bne.w	8001528 <httpd_post_finished+0xac>
	}
	memset((char *)rest, '\0', sizeof(*rest)); // TEST ????????????? TEST
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f015 f82a 	bl	8016aa2 <memset>
	//memset(rest, '\0', sizeof(rest)); // TEST ????????????? TEST
	memset(urlline, '\0', sizeof(urlline));
 8001a4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f015 f822 	bl	8016aa2 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8001a5e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001a62:	2100      	movs	r1, #0
 8001a64:	4824      	ldr	r0, [pc, #144]	; (8001af8 <httpd_post_finished+0x67c>)
 8001a66:	f015 f81c 	bl	8016aa2 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("----------- %s ------- \r\n", urls);
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <httpd_post_finished+0x680>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	f015 f9bf 	bl	8016df8 <sniprintf>
	if (current_connection == connection) {
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <httpd_post_finished+0x684>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f107 020c 	add.w	r2, r7, #12
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d114      	bne.n	8001ab2 <httpd_post_finished+0x636>
		if (valid_connection == connection) {
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <httpd_post_finished+0x688>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d107      	bne.n	8001aa6 <httpd_post_finished+0x62a>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8001a96:	1dbb      	adds	r3, r7, #6
 8001a98:	8819      	ldrh	r1, [r3, #0]
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <httpd_post_finished+0x680>)
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f015 f9a9 	bl	8016df8 <sniprintf>
		}
		current_connection = NULL;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <httpd_post_finished+0x684>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <httpd_post_finished+0x688>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	080187b8 	.word	0x080187b8
 8001ac8:	2000883c 	.word	0x2000883c
 8001acc:	080187bc 	.word	0x080187bc
 8001ad0:	080187c4 	.word	0x080187c4
 8001ad4:	080187cc 	.word	0x080187cc
 8001ad8:	080187d4 	.word	0x080187d4
 8001adc:	200084f4 	.word	0x200084f4
 8001ae0:	080187dc 	.word	0x080187dc
 8001ae4:	20009fcc 	.word	0x20009fcc
 8001ae8:	080187e4 	.word	0x080187e4
 8001aec:	080187e8 	.word	0x080187e8
 8001af0:	080187f8 	.word	0x080187f8
 8001af4:	08018800 	.word	0x08018800
 8001af8:	20000534 	.word	0x20000534
 8001afc:	20003504 	.word	0x20003504
 8001b00:	200034fc 	.word	0x200034fc
 8001b04:	20003500 	.word	0x20003500

08001b08 <http_server_init>:
//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	httpd_init();
 8001b0c:	f009 ff80 	bl	800ba10 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <http_server_init+0x24>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <http_server_init+0x28>)
 8001b1a:	f009 ff99 	bl	800ba50 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8001b1e:	2305      	movs	r3, #5
 8001b20:	4619      	mov	r1, r3
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <http_server_init+0x2c>)
 8001b24:	f009 ffd6 	bl	800bad4 <http_set_cgi_handlers>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000494 	.word	0x20000494
 8001b30:	08000599 	.word	0x08000599
 8001b34:	0801bad0 	.word	0x0801bad0

08001b38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001b50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001b58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001b60:	e000      	b.n	8001b64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001b62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001b64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f9      	beq.n	8001b62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001b6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <_write>:
void StartDefaultTask(void *argument);
void Start_LED_Task(void *argument);
void Start_TEST_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2332      	movs	r3, #50	; 0x32
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <_write+0x48>)
 8001b9e:	f002 fffa 	bl	8004b96 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x34>
		ITM_SendChar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ffc1 	bl	8001b38 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x20>
	}
	return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000e014 	.word	0x2000e014

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd8:	f000 fb98 	bl	800230c <HAL_Init>

  /* USER CODE BEGIN Init */
	Tim = HAL_GetTick();
 8001bdc:	f000 fbcc 	bl	8002378 <HAL_GetTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <main+0x60>)
 8001be4:	6013      	str	r3, [r2, #0]
	flag = 1;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <main+0x64>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bec:	f000 f838 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf0:	f000 f8ca 	bl	8001d88 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001bf4:	f000 f89e 	bl	8001d34 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bf8:	f004 f848 	bl	8005c8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <main+0x68>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <main+0x6c>)
 8001c02:	f004 f8a2 	bl	8005d4a <osThreadNew>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <main+0x70>)
 8001c0a:	6013      	str	r3, [r2, #0]

  /* creation of my_LED_Task */
  my_LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &my_LED_Task_attributes);
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <main+0x74>)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	480e      	ldr	r0, [pc, #56]	; (8001c4c <main+0x78>)
 8001c12:	f004 f89a 	bl	8005d4a <osThreadNew>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <main+0x7c>)
 8001c1a:	6013      	str	r3, [r2, #0]

  /* creation of my_TEST_Task */
  my_TEST_TaskHandle = osThreadNew(Start_TEST_Task, NULL, &my_TEST_Task_attributes);
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <main+0x80>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <main+0x84>)
 8001c22:	f004 f892 	bl	8005d4a <osThreadNew>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <main+0x88>)
 8001c2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c2c:	f004 f852 	bl	8005cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <main+0x5c>
 8001c32:	bf00      	nop
 8001c34:	20009fd4 	.word	0x20009fd4
 8001c38:	20009fd8 	.word	0x20009fd8
 8001c3c:	0801baf8 	.word	0x0801baf8
 8001c40:	08001e61 	.word	0x08001e61
 8001c44:	20009fd0 	.word	0x20009fd0
 8001c48:	0801bb1c 	.word	0x0801bb1c
 8001c4c:	08001e79 	.word	0x08001e79
 8001c50:	2000e114 	.word	0x2000e114
 8001c54:	0801bb40 	.word	0x0801bb40
 8001c58:	08001ec5 	.word	0x08001ec5
 8001c5c:	2000a010 	.word	0x2000a010

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	; 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	; 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f014 ff17 	bl	8016aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <SystemClock_Config+0xcc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <SystemClock_Config+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <SystemClock_Config+0xd0>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <SystemClock_Config+0xd0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cd4:	23a8      	movs	r3, #168	; 0xa8
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 ffb5 	bl	8003c54 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf0:	f000 f924 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2105      	movs	r1, #5
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fa16 	bl	8004144 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d1e:	f000 f90d 	bl	8001f3c <Error_Handler>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3750      	adds	r7, #80	; 0x50
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_USART6_UART_Init+0x50>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_USART6_UART_Init+0x4c>)
 8001d6c:	f002 fec6 	bl	8004afc <HAL_UART_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d76:	f000 f8e1 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000e014 	.word	0x2000e014
 8001d84:	40011400 	.word	0x40011400

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a2c      	ldr	r2, [pc, #176]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_GPIO_Init+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0xd4>)
 8001e30:	f001 fef6 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e34:	2301      	movs	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <MX_GPIO_Init+0xd4>)
 8001e4c:	f001 fd4c 	bl	80038e8 <HAL_GPIO_Init>

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020c00 	.word	0x40020c00

08001e60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001e68:	f003 f95e 	bl	8005128 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001e6c:	f7ff fe4c 	bl	8001b08 <http_server_init>
  {
//	  ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
//	         to the lwIP for handling */
//	  	  sys_check_timeouts();/* Handle timeouts */
//
    osDelay(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f003 fffc 	bl	8005e6e <osDelay>
 8001e76:	e7fb      	b.n	8001e70 <StartDefaultTask+0x10>

08001e78 <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 1) {
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <Start_LED_Task+0x40>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00f      	beq.n	8001ea8 <Start_LED_Task+0x30>
			if (HAL_GetTick() - Tim >= 250) {
 8001e88:	f000 fa76 	bl	8002378 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <Start_LED_Task+0x44>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2bf9      	cmp	r3, #249	; 0xf9
 8001e96:	d907      	bls.n	8001ea8 <Start_LED_Task+0x30>
				flag = 0;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <Start_LED_Task+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
				Tim = HAL_GetTick();
 8001e9e:	f000 fa6b 	bl	8002378 <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <Start_LED_Task+0x44>)
 8001ea6:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, flag);
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <Start_LED_Task+0x40>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <Start_LED_Task+0x48>)
 8001eb2:	f001 feb5 	bl	8003c20 <HAL_GPIO_WritePin>
		if (flag == 1) {
 8001eb6:	e7e3      	b.n	8001e80 <Start_LED_Task+0x8>
 8001eb8:	20009fd8 	.word	0x20009fd8
 8001ebc:	20009fd4 	.word	0x20009fd4
 8001ec0:	40020c00 	.word	0x40020c00

08001ec4 <Start_TEST_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_TEST_Task */
void Start_TEST_Task(void *argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TEST_Task */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 0) {
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <Start_TEST_Task+0x48>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00f      	beq.n	8001efa <Start_TEST_Task+0x36>
			if (HAL_GetTick() - Tim >= 250) {
 8001eda:	f000 fa4d 	bl	8002378 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <Start_TEST_Task+0x4c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2bf9      	cmp	r3, #249	; 0xf9
 8001ee8:	d907      	bls.n	8001efa <Start_TEST_Task+0x36>
				flag = 1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <Start_TEST_Task+0x48>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
				Tim = HAL_GetTick();
 8001ef0:	f000 fa42 	bl	8002378 <HAL_GetTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <Start_TEST_Task+0x4c>)
 8001ef8:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, flag);
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <Start_TEST_Task+0x48>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	2101      	movs	r1, #1
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <Start_TEST_Task+0x50>)
 8001f04:	f001 fe8c 	bl	8003c20 <HAL_GPIO_WritePin>
		if (flag == 0) {
 8001f08:	e7e0      	b.n	8001ecc <Start_TEST_Task+0x8>
 8001f0a:	bf00      	nop
 8001f0c:	20009fd8 	.word	0x20009fd8
 8001f10:	20009fd4 	.word	0x20009fd4
 8001f14:	40020c00 	.word	0x40020c00

08001f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f2a:	f000 fa11 	bl	8002350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40002000 	.word	0x40002000

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_MspInit+0x54>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_MspInit+0x54>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x54>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_MspInit+0x54>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_MspInit+0x54>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_MspInit+0x54>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	210f      	movs	r1, #15
 8001f8a:	f06f 0001 	mvn.w	r0, #1
 8001f8e:	f000 fadb 	bl	8002548 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_UART_MspInit+0x84>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12b      	bne.n	800201a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_UART_MspInit+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800200a:	2308      	movs	r3, #8
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_UART_MspInit+0x8c>)
 8002016:	f001 fc67 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40011400 	.word	0x40011400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020800 	.word	0x40020800

08002030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	; 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	202d      	movs	r0, #45	; 0x2d
 8002046:	f000 fa7f 	bl	8002548 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800204a:	202d      	movs	r0, #45	; 0x2d
 800204c:	f000 fa98 	bl	8002580 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_InitTick+0xa4>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_InitTick+0xa4>)
 800205a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_InitTick+0xa4>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206c:	f107 0210 	add.w	r2, r7, #16
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fa60 	bl	800453c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800207c:	f002 fa36 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_InitTick+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3b01      	subs	r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_InitTick+0xac>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_InitTick+0xb0>)
 8002098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_InitTick+0xac>)
 800209c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_InitTick+0xac>)
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_InitTick+0xac>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_InitTick+0xac>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <HAL_InitTick+0xac>)
 80020b6:	f002 fa73 	bl	80045a0 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <HAL_InitTick+0xac>)
 80020c2:	f002 fac7 	bl	8004654 <HAL_TIM_Base_Start_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	2000e118 	.word	0x2000e118
 80020e0:	40002000 	.word	0x40002000

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler+0x4>

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002116:	f002 fb0d 	bl	8004734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000e118 	.word	0x2000e118

08002124 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <ETH_IRQHandler+0x10>)
 800212a:	f000 fe1b 	bl	8002d64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000fa78 	.word	0x2000fa78

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <_kill+0x20>)
 8002154:	2216      	movs	r2, #22
 8002156:	601a      	str	r2, [r3, #0]
	return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20014ac0 	.word	0x20014ac0

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe5 	bl	8002148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800217e:	e7fe      	b.n	800217e <_exit+0x12>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
	}

return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	return -1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e2:	605a      	str	r2, [r3, #4]
	return 0;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_isatty>:

int _isatty(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <_sbrk+0x5c>)
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <_sbrk+0x60>)
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <_sbrk+0x64>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <_sbrk+0x68>)
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d205      	bcs.n	8002260 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <_sbrk+0x6c>)
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800225e:	e009      	b.n	8002274 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a06      	ldr	r2, [pc, #24]	; (8002288 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20020000 	.word	0x20020000
 8002284:	00000400 	.word	0x00000400
 8002288:	20003524 	.word	0x20003524
 800228c:	20014ad8 	.word	0x20014ad8
 8002290:	20014ac0 	.word	0x20014ac0

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022e2:	f7ff ffd7 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f014 fb7f 	bl	80169e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ea:	f7ff fc73 	bl	8001bd4 <main>
  bx  lr    
 80022ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	20000518 	.word	0x20000518
  ldr r2, =_sidata
 80022fc:	08022de8 	.word	0x08022de8
  ldr r2, =_sbss
 8002300:	20000518 	.word	0x20000518
  ldr r4, =_ebss
 8002304:	20014ad4 	.word	0x20014ad4

08002308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f8fc 	bl	8002532 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	200f      	movs	r0, #15
 800233c:	f7ff fe78 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff fe02 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200004a0 	.word	0x200004a0
 8002374:	2000e160 	.word	0x2000e160

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000e160 	.word	0x2000e160

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004a0 	.word	0x200004a0

080023d8 <__NVIC_SetPriorityGrouping>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff4c 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255a:	f7ff ff61 	bl	8002420 <__NVIC_GetPriorityGrouping>
 800255e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7ff ffb1 	bl	80024cc <NVIC_EncodePriority>
 800256a:	4602      	mov	r2, r0
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff80 	bl	8002478 <__NVIC_SetPriority>
}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff54 	bl	800243c <__NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80025ac:	4baa      	ldr	r3, [pc, #680]	; (8002858 <HAL_ETH_Init+0x2bc>)
 80025ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e183      	b.n	80028ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f002 ff08 	bl	80053ec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	4b9e      	ldr	r3, [pc, #632]	; (800285c <HAL_ETH_Init+0x2c0>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	4a9d      	ldr	r2, [pc, #628]	; (800285c <HAL_ETH_Init+0x2c0>)
 80025e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ea:	6453      	str	r3, [r2, #68]	; 0x44
 80025ec:	4b9b      	ldr	r3, [pc, #620]	; (800285c <HAL_ETH_Init+0x2c0>)
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025f8:	4b99      	ldr	r3, [pc, #612]	; (8002860 <HAL_ETH_Init+0x2c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_ETH_Init+0x2c4>)
 80025fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002602:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <HAL_ETH_Init+0x2c4>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4994      	ldr	r1, [pc, #592]	; (8002860 <HAL_ETH_Init+0x2c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800262a:	f7ff fea5 	bl	8002378 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002630:	e011      	b.n	8002656 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002632:	f7ff fea1 	bl	8002378 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002640:	d909      	bls.n	8002656 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e139      	b.n	80028ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e4      	bne.n	8002632 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f023 031c 	bic.w	r3, r3, #28
 8002676:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002678:	f001 ff2c 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 800267c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4a78      	ldr	r2, [pc, #480]	; (8002864 <HAL_ETH_Init+0x2c8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d908      	bls.n	8002698 <HAL_ETH_Init+0xfc>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4a77      	ldr	r2, [pc, #476]	; (8002868 <HAL_ETH_Init+0x2cc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d804      	bhi.n	8002698 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e027      	b.n	80026e8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_ETH_Init+0x2cc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d908      	bls.n	80026b2 <HAL_ETH_Init+0x116>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4a6d      	ldr	r2, [pc, #436]	; (8002858 <HAL_ETH_Init+0x2bc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d204      	bcs.n	80026b2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f043 030c 	orr.w	r3, r3, #12
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	e01a      	b.n	80026e8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_ETH_Init+0x2bc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d303      	bcc.n	80026c2 <HAL_ETH_Init+0x126>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4a6b      	ldr	r2, [pc, #428]	; (800286c <HAL_ETH_Init+0x2d0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d911      	bls.n	80026e6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4a69      	ldr	r2, [pc, #420]	; (800286c <HAL_ETH_Init+0x2d0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d908      	bls.n	80026dc <HAL_ETH_Init+0x140>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4a68      	ldr	r2, [pc, #416]	; (8002870 <HAL_ETH_Init+0x2d4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d804      	bhi.n	80026dc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e005      	b.n	80026e8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e000      	b.n	80026e8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80026f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fc17 	bl	8002f2a <HAL_ETH_WritePHYRegister>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002706:	6939      	ldr	r1, [r7, #16]
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fdcd 	bl	80032a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0d7      	b.n	80028ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800271a:	20ff      	movs	r0, #255	; 0xff
 800271c:	f7ff fe38 	bl	8002390 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a5 	beq.w	8002874 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800272a:	f7ff fe25 	bl	8002378 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	461a      	mov	r2, r3
 8002736:	2101      	movs	r1, #1
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb8e 	bl	8002e5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800273e:	f7ff fe1b 	bl	8002378 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d90f      	bls.n	8002770 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fda6 	bl	80032a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0ac      	b.n	80028ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0da      	beq.n	8002730 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800277a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800277e:	2100      	movs	r1, #0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fbd2 	bl	8002f2a <HAL_ETH_WritePHYRegister>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fd88 	bl	80032a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80027a0:	2301      	movs	r3, #1
 80027a2:	e092      	b.n	80028ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80027a4:	f7ff fde8 	bl	8002378 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	461a      	mov	r2, r3
 80027b0:	2101      	movs	r1, #1
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb51 	bl	8002e5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027b8:	f7ff fdde 	bl	8002378 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d90f      	bls.n	80027ea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fd69 	bl	80032a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e06f      	b.n	80028ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0da      	beq.n	80027aa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	461a      	mov	r2, r3
 80027fa:	2110      	movs	r1, #16
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb2c 	bl	8002e5a <HAL_ETH_ReadPHYRegister>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800280c:	6939      	ldr	r1, [r7, #16]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fd4a 	bl	80032a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800281c:	2301      	movs	r3, #1
 800281e:	e054      	b.n	80028ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	e002      	b.n	800283a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e035      	b.n	80028b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	e030      	b.n	80028b8 <HAL_ETH_Init+0x31c>
 8002856:	bf00      	nop
 8002858:	03938700 	.word	0x03938700
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	01312cff 	.word	0x01312cff
 8002868:	02160ebf 	.word	0x02160ebf
 800286c:	05f5e0ff 	.word	0x05f5e0ff
 8002870:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002884:	4313      	orrs	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fb4c 	bl	8002f2a <HAL_ETH_WritePHYRegister>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800289c:	6939      	ldr	r1, [r7, #16]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fd02 	bl	80032a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e00c      	b.n	80028ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80028b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80028b4:	f7ff fd6c 	bl	8002390 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80028b8:	6939      	ldr	r1, [r7, #16]
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fcf4 	bl	80032a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop

080028d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_ETH_DMATxDescListInit+0x20>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e052      	b.n	800299a <HAL_ETH_DMATxDescListInit+0xc6>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e030      	b.n	8002972 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	4413      	add	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002920:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	461a      	mov	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3b01      	subs	r3, #1
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	d208      	bcs.n	8002966 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	461a      	mov	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	e002      	b.n	800296c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3301      	adds	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d3ca      	bcc.n	8002910 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	3310      	adds	r3, #16
 8002986:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ETH_DMARxDescListInit+0x20>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e056      	b.n	8002a74 <HAL_ETH_DMARxDescListInit+0xce>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e034      	b.n	8002a4c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	015b      	lsls	r3, r3, #5
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80029fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d208      	bcs.n	8002a40 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	015b      	lsls	r3, r3, #5
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	4413      	add	r3, r2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	e002      	b.n	8002a46 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3c6      	bcc.n	80029e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5e:	330c      	adds	r3, #12
 8002a60:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ETH_TransmitFrame+0x24>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e0cd      	b.n	8002c40 <HAL_ETH_TransmitFrame+0x1c0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0b8      	b.n	8002c40 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da09      	bge.n	8002aec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2212      	movs	r2, #18
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0a9      	b.n	8002c40 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d915      	bls.n	8002b22 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	4a54      	ldr	r2, [pc, #336]	; (8002c4c <HAL_ETH_TransmitFrame+0x1cc>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4b51      	ldr	r3, [pc, #324]	; (8002c4c <HAL_ETH_TransmitFrame+0x1cc>)
 8002b06:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e001      	b.n	8002b26 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002b22:	2301      	movs	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d11c      	bne.n	8002b66 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002b3a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b46:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b56:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b64:	e04b      	b.n	8002bfe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e044      	b.n	8002bf6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b7a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b90:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b9a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d116      	bne.n	8002bd4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bb4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_ETH_TransmitFrame+0x1d0>)
 8002bba:	fb02 f203 	mul.w	r2, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002bc6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002bd2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002be2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3b6      	bcc.n	8002b6c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c06:	3314      	adds	r3, #20
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	ac02b00b 	.word	0xac02b00b
 8002c50:	fffffa0c 	.word	0xfffffa0c

08002c54 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e074      	b.n	8002d58 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002c7e:	e05a      	b.n	8002d36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d10d      	bne.n	8002cb2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
 8002cb0:	e041      	b.n	8002d36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8002cd6:	e02e      	b.n	8002d36 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d103      	bne.n	8002cfa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d06:	1f1a      	subs	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e010      	b.n	8002d58 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db02      	blt.n	8002d46 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d99c      	bls.n	8002c80 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d74:	3314      	adds	r3, #20
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d112      	bne.n	8002da6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f002 fbe1 	bl	8005548 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8e:	3314      	adds	r3, #20
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da4:	e01b      	b.n	8002dde <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dae:	3314      	adds	r3, #20
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d111      	bne.n	8002dde <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f839 	bl	8002e32 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc8:	3314      	adds	r3, #20
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de6:	3314      	adds	r3, #20
 8002de8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dec:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df6:	3314      	adds	r3, #20
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	d112      	bne.n	8002e2a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f81e 	bl	8002e46 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e12:	3314      	adds	r3, #20
 8002e14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e18:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	460b      	mov	r3, r1
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b82      	cmp	r3, #130	; 0x82
 8002e7a:	d101      	bne.n	8002e80 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e050      	b.n	8002f22 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2282      	movs	r2, #130	; 0x82
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 031c 	and.w	r3, r3, #28
 8002e96:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8a1b      	ldrh	r3, [r3, #16]
 8002e9c:	02db      	lsls	r3, r3, #11
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	019b      	lsls	r3, r3, #6
 8002eaa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0302 	bic.w	r3, r3, #2
 8002eba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ecc:	f7ff fa54 	bl	8002378 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ed2:	e015      	b.n	8002f00 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002ed4:	f7ff fa50 	bl	8002378 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee2:	d309      	bcc.n	8002ef8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e014      	b.n	8002f22 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e4      	bne.n	8002ed4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	460b      	mov	r3, r1
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b42      	cmp	r3, #66	; 0x42
 8002f4a:	d101      	bne.n	8002f50 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e04e      	b.n	8002fee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2242      	movs	r2, #66	; 0x42
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 031c 	and.w	r3, r3, #28
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8a1b      	ldrh	r3, [r3, #16]
 8002f6c:	02db      	lsls	r3, r3, #11
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa6:	f7ff f9e7 	bl	8002378 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fac:	e015      	b.n	8002fda <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002fae:	f7ff f9e3 	bl	8002378 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d309      	bcc.n	8002fd2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e00d      	b.n	8002fee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e4      	bne.n	8002fae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_ETH_Start+0x16>
 8003008:	2302      	movs	r3, #2
 800300a:	e01f      	b.n	800304c <HAL_ETH_Start+0x56>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fb45 	bl	80036ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fb7c 	bl	8003720 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fc13 	bl	8003854 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fbb0 	bl	8003794 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fbdd 	bl	80037f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_ETH_Stop+0x16>
 8003066:	2302      	movs	r3, #2
 8003068:	e01f      	b.n	80030aa <HAL_ETH_Stop+0x56>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fba2 	bl	80037c4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fbcf 	bl	8003824 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb67 	bl	800375a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fbe1 	bl	8003854 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fb27 	bl	80036e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_ETH_ConfigMAC+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0e4      	b.n	800329a <HAL_ETH_ConfigMAC+0x1e6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b1 	beq.w	800324a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_ETH_ConfigMAC+0x1f0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003100:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003106:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800310c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003112:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003118:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800311e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003124:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800312a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003130:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003136:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800313c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003142:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff f918 	bl	8002390 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003170:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003176:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800317c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003182:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003188:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800318e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800319a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800319c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff f8f2 	bl	8002390 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031bc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031c6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80031e4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80031ea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80031f0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80031f6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80031fc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003214:	2001      	movs	r0, #1
 8003216:	f7ff f8bb 	bl	8002390 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800323a:	2001      	movs	r0, #1
 800323c:	f7ff f8a8 	bl	8002390 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	61da      	str	r2, [r3, #28]
 8003248:	e01e      	b.n	8003288 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003258:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800327a:	2001      	movs	r0, #1
 800327c:	f7ff f888 	bl	8002390 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	ff20810f 	.word	0xff20810f

080032a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0b0      	sub	sp, #192	; 0xc0
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80032d6:	2300      	movs	r3, #0
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80032ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f2:	663b      	str	r3, [r7, #96]	; 0x60
 80032f4:	e001      	b.n	80032fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80032fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003304:	2300      	movs	r3, #0
 8003306:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003314:	2340      	movs	r3, #64	; 0x40
 8003316:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800334e:	2300      	movs	r3, #0
 8003350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800337c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003380:	4bac      	ldr	r3, [pc, #688]	; (8003634 <ETH_MACDMAConfig+0x38c>)
 8003382:	4013      	ands	r3, r2
 8003384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003388:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800338a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800338c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800338e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003390:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003394:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800339a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800339e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80033a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80033a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80033a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80033aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80033ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80033ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80033b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80033b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80033b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80033b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80033ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80033bc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80033be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033dc:	2001      	movs	r0, #1
 80033de:	f7fe ffd7 	bl	8002390 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80033ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80033f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80033f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80033f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80033f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80033fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80033fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003400:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003406:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800340c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003410:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003418:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800341a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003426:	2001      	movs	r0, #1
 8003428:	f7fe ffb2 	bl	8002390 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003434:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800343e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003448:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003458:	f64f 7341 	movw	r3, #65345	; 0xff41
 800345c:	4013      	ands	r3, r2
 800345e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003466:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800346c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800346e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003472:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003478:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800347a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800347e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003484:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003498:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7fe ff73 	bl	8002390 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80034b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80034b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7fe ff5e 	bl	8002390 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80034e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80034ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003502:	2304      	movs	r3, #4
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800350c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003522:	2300      	movs	r3, #0
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003526:	2300      	movs	r3, #0
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003532:	3318      	adds	r3, #24
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800353a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <ETH_MACDMAConfig+0x390>)
 8003540:	4013      	ands	r3, r2
 8003542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003546:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003548:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800354a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800354c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800354e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003550:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003552:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003554:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003556:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003558:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800355a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800355c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800355e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003562:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003566:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003568:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357a:	3318      	adds	r3, #24
 800357c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003580:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	3318      	adds	r3, #24
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003592:	2001      	movs	r0, #1
 8003594:	f7fe fefc 	bl	8002390 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a0:	3318      	adds	r3, #24
 80035a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80035b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80035b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80035b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80035ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80035be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80035c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f7fe fed5 	bl	8002390 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10f      	bne.n	800361c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003604:	331c      	adds	r3, #28
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	331c      	adds	r3, #28
 800361a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	461a      	mov	r2, r3
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f809 	bl	800363c <ETH_MACAddressConfig>
}
 800362a:	bf00      	nop
 800362c:	37c0      	adds	r7, #192	; 0xc0
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	ff20810f 	.word	0xff20810f
 8003638:	f8de3f23 	.word	0xf8de3f23

0800363c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3305      	adds	r3, #5
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	3204      	adds	r2, #4
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <ETH_MACAddressConfig+0x68>)
 800365e:	4413      	add	r3, r2
 8003660:	461a      	mov	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3303      	adds	r3, #3
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	061a      	lsls	r2, r3, #24
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3302      	adds	r3, #2
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3301      	adds	r3, #1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	4313      	orrs	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <ETH_MACAddressConfig+0x6c>)
 800368e:	4413      	add	r3, r2
 8003690:	461a      	mov	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40028040 	.word	0x40028040
 80036a8:	40028044 	.word	0x40028044

080036ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036d0:	2001      	movs	r0, #1
 80036d2:	f000 f8e9 	bl	80038a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800370a:	2001      	movs	r0, #1
 800370c:	f000 f8cc 	bl	80038a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0204 	orr.w	r2, r2, #4
 800373a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003744:	2001      	movs	r0, #1
 8003746:	f000 f8af 	bl	80038a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0204 	bic.w	r2, r2, #4
 8003774:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800377e:	2001      	movs	r0, #1
 8003780:	f000 f892 	bl	80038a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a4:	3318      	adds	r3, #24
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	3318      	adds	r3, #24
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d4:	3318      	adds	r3, #24
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e4:	3318      	adds	r3, #24
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003804:	3318      	adds	r3, #24
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0202 	orr.w	r2, r2, #2
 8003810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003814:	3318      	adds	r3, #24
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003834:	3318      	adds	r3, #24
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0202 	bic.w	r2, r2, #2
 8003840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003844:	3318      	adds	r3, #24
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003868:	3318      	adds	r3, #24
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003878:	3318      	adds	r3, #24
 800387a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003884:	3318      	adds	r3, #24
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800388a:	2001      	movs	r0, #1
 800388c:	f000 f80c 	bl	80038a8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	3318      	adds	r3, #24
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <ETH_Delay+0x38>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <ETH_Delay+0x3c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a5b      	lsrs	r3, r3, #9
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80038c4:	bf00      	nop
  } 
  while (Delay --);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	60fa      	str	r2, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f9      	bne.n	80038c4 <ETH_Delay+0x1c>
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000498 	.word	0x20000498
 80038e4:	10624dd3 	.word	0x10624dd3

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e16b      	b.n	8003bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	f040 815a 	bne.w	8003bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d005      	beq.n	800393a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	2b02      	cmp	r3, #2
 8003938:	d130      	bne.n	800399c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d017      	beq.n	80039d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d123      	bne.n	8003a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	69b9      	ldr	r1, [r7, #24]
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80b4 	beq.w	8003bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a5f      	ldr	r2, [pc, #380]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_GPIO_Init+0x30c>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_GPIO_Init+0x310>)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_GPIO_Init+0x314>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d02b      	beq.n	8003b0e <HAL_GPIO_Init+0x226>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a51      	ldr	r2, [pc, #324]	; (8003c00 <HAL_GPIO_Init+0x318>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d025      	beq.n	8003b0a <HAL_GPIO_Init+0x222>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a50      	ldr	r2, [pc, #320]	; (8003c04 <HAL_GPIO_Init+0x31c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <HAL_GPIO_Init+0x21e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_GPIO_Init+0x320>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d019      	beq.n	8003b02 <HAL_GPIO_Init+0x21a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_GPIO_Init+0x216>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4d      	ldr	r2, [pc, #308]	; (8003c10 <HAL_GPIO_Init+0x328>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00d      	beq.n	8003afa <HAL_GPIO_Init+0x212>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_GPIO_Init+0x32c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <HAL_GPIO_Init+0x20e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_GPIO_Init+0x330>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_GPIO_Init+0x20a>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e00e      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003af2:	2308      	movs	r3, #8
 8003af4:	e00c      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003af6:	2306      	movs	r3, #6
 8003af8:	e00a      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003afa:	2305      	movs	r3, #5
 8003afc:	e008      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e004      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e002      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x228>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	f002 0203 	and.w	r2, r2, #3
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	4093      	lsls	r3, r2
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b20:	4935      	ldr	r1, [pc, #212]	; (8003bf8 <HAL_GPIO_Init+0x310>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b52:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b58:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bd0:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	f67f ae90 	bls.w	8003904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	40020000 	.word	0x40020000
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020c00 	.word	0x40020c00
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40021400 	.word	0x40021400
 8003c14:	40021800 	.word	0x40021800
 8003c18:	40021c00 	.word	0x40021c00
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e264      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d075      	beq.n	8003d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	4ba3      	ldr	r3, [pc, #652]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4ba0      	ldr	r3, [pc, #640]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	4b99      	ldr	r3, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x108>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d157      	bne.n	8003d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e23f      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x74>
 8003cba:	4b91      	ldr	r3, [pc, #580]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x98>
 8003cd2:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a8a      	ldr	r2, [pc, #552]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a87      	ldr	r2, [pc, #540]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cec:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a83      	ldr	r2, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a80      	ldr	r2, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fb34 	bl	8002378 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fb30 	bl	8002378 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e204      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xc0>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fb20 	bl	8002378 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe fb1c 	bl	8002378 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1f0      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0xe8>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b5c      	ldr	r3, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c4      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b56      	ldr	r3, [pc, #344]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4952      	ldr	r1, [pc, #328]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fad5 	bl	8002378 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fad1 	bl	8002378 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1a5      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4940      	ldr	r1, [pc, #256]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_OscConfig+0x2b0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fab4 	bl	8002378 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fe fab0 	bl	8002378 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e184      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d030      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fa94 	bl	8002378 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fe fa90 	bl	8002378 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e164      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x200>
 8003e72:	e015      	b.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x2b4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe fa7d 	bl	8002378 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fe fa79 	bl	8002378 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e14d      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a0 	beq.w	8003fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d121      	bne.n	8003f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fa3f 	bl	8002378 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e011      	b.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
 8003f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f10:	f7fe fa32 	bl	8002378 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e106      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b85      	ldr	r3, [pc, #532]	; (8004138 <HAL_RCC_OscConfig+0x4e4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x2f0>
 8003f36:	4b81      	ldr	r3, [pc, #516]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a80      	ldr	r2, [pc, #512]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
 8003f42:	e01c      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x312>
 8003f4c:	4b7b      	ldr	r3, [pc, #492]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a7a      	ldr	r2, [pc, #488]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b78      	ldr	r3, [pc, #480]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a77      	ldr	r2, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	e00b      	b.n	8003f7e <HAL_RCC_OscConfig+0x32a>
 8003f66:	4b75      	ldr	r3, [pc, #468]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a74      	ldr	r2, [pc, #464]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
 8003f72:	4b72      	ldr	r3, [pc, #456]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a71      	ldr	r2, [pc, #452]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fe f9f7 	bl	8002378 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fe f9f3 	bl	8002378 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0c5      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCC_OscConfig+0x33a>
 8003fb0:	e014      	b.n	8003fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fe f9e1 	bl	8002378 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fe f9dd 	bl	8002378 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0af      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	4b5a      	ldr	r3, [pc, #360]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ee      	bne.n	8003fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b56      	ldr	r3, [pc, #344]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 809b 	beq.w	800412e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d05c      	beq.n	80040be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d141      	bne.n	8004090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <HAL_RCC_OscConfig+0x4ec>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fe f9b1 	bl	8002378 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fe f9ad 	bl	8002378 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e081      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	4b43      	ldr	r3, [pc, #268]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	019b      	lsls	r3, r3, #6
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	4937      	ldr	r1, [pc, #220]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_OscConfig+0x4ec>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe f986 	bl	8002378 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe f982 	bl	8002378 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e056      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x41c>
 800408e:	e04e      	b.n	800412e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_OscConfig+0x4ec>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe f96f 	bl	8002378 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe f96b 	bl	8002378 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03f      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b0:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x44a>
 80040bc:	e037      	b.n	800412e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e032      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <HAL_RCC_OscConfig+0x4e8>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d028      	beq.n	800412a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d121      	bne.n	800412a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d11a      	bne.n	800412a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fa:	4013      	ands	r3, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004100:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d107      	bne.n	800412a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40007000 	.word	0x40007000
 800413c:	40023800 	.word	0x40023800
 8004140:	42470060 	.word	0x42470060

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0cc      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d90c      	bls.n	8004180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b8      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d044      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e067      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4934      	ldr	r1, [pc, #208]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fe f8a0 	bl	8002378 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fe f89c 	bl	8002378 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e04f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d20c      	bcs.n	800428c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e032      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f821 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	5ccb      	ldrb	r3, [r1, r3]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fea0 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40023c00 	.word	0x40023c00
 8004300:	40023800 	.word	0x40023800
 8004304:	0801bb64 	.word	0x0801bb64
 8004308:	20000498 	.word	0x20000498
 800430c:	2000049c 	.word	0x2000049c

08004310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	2300      	movs	r3, #0
 8004322:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004328:	4b67      	ldr	r3, [pc, #412]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d00d      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x40>
 8004334:	2b08      	cmp	r3, #8
 8004336:	f200 80bd 	bhi.w	80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x34>
 800433e:	2b04      	cmp	r3, #4
 8004340:	d003      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x3a>
 8004342:	e0b7      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004346:	60bb      	str	r3, [r7, #8]
       break;
 8004348:	e0b7      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800434a:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800434c:	60bb      	str	r3, [r7, #8]
      break;
 800434e:	e0b4      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004350:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004358:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435a:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04d      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004366:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	ea02 0800 	and.w	r8, r2, r0
 800437e:	ea03 0901 	and.w	r9, r3, r1
 8004382:	4640      	mov	r0, r8
 8004384:	4649      	mov	r1, r9
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	014b      	lsls	r3, r1, #5
 8004390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004394:	0142      	lsls	r2, r0, #5
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	ebb0 0008 	subs.w	r0, r0, r8
 800439e:	eb61 0109 	sbc.w	r1, r1, r9
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	018b      	lsls	r3, r1, #6
 80043ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043b0:	0182      	lsls	r2, r0, #6
 80043b2:	1a12      	subs	r2, r2, r0
 80043b4:	eb63 0301 	sbc.w	r3, r3, r1
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	00d9      	lsls	r1, r3, #3
 80043c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c6:	00d0      	lsls	r0, r2, #3
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	eb12 0208 	adds.w	r2, r2, r8
 80043d0:	eb43 0309 	adc.w	r3, r3, r9
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	0259      	lsls	r1, r3, #9
 80043de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043e2:	0250      	lsls	r0, r2, #9
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	f7fb ff54 	bl	80002a0 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e04a      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	ea02 0400 	and.w	r4, r2, r0
 800441a:	ea03 0501 	and.w	r5, r3, r1
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	014b      	lsls	r3, r1, #5
 800442c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004430:	0142      	lsls	r2, r0, #5
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	1b00      	subs	r0, r0, r4
 8004438:	eb61 0105 	sbc.w	r1, r1, r5
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	018b      	lsls	r3, r1, #6
 8004446:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800444a:	0182      	lsls	r2, r0, #6
 800444c:	1a12      	subs	r2, r2, r0
 800444e:	eb63 0301 	sbc.w	r3, r3, r1
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	00d9      	lsls	r1, r3, #3
 800445c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004460:	00d0      	lsls	r0, r2, #3
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	1912      	adds	r2, r2, r4
 8004468:	eb45 0303 	adc.w	r3, r5, r3
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0299      	lsls	r1, r3, #10
 8004476:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800447a:	0290      	lsls	r0, r2, #10
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	f7fb ff08 	bl	80002a0 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	3301      	adds	r3, #1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	60bb      	str	r3, [r7, #8]
      break;
 80044b2:	e002      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044b6:	60bb      	str	r3, [r7, #8]
      break;
 80044b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ba:	68bb      	ldr	r3, [r7, #8]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200

080044d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000498 	.word	0x20000498

080044ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f0:	f7ff fff0 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	0a9b      	lsrs	r3, r3, #10
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4903      	ldr	r1, [pc, #12]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40023800 	.word	0x40023800
 8004510:	0801bb74 	.word	0x0801bb74

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004518:	f7ff ffdc 	bl	80044d4 <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0b5b      	lsrs	r3, r3, #13
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	0801bb74 	.word	0x0801bb74

0800453c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	220f      	movs	r2, #15
 800454a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_GetClockConfig+0x5c>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0203 	and.w	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_RCC_GetClockConfig+0x5c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_RCC_GetClockConfig+0x5c>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_GetClockConfig+0x5c>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_RCC_GetClockConfig+0x60>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0207 	and.w	r2, r3, #7
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	40023c00 	.word	0x40023c00

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e041      	b.n	8004636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f839 	bl	800463e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 f9d8 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e04e      	b.n	800470a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a23      	ldr	r2, [pc, #140]	; (8004718 <HAL_TIM_Base_Start_IT+0xc4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d022      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d01d      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_TIM_Base_Start_IT+0xc8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_TIM_Base_Start_IT+0xcc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d013      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_TIM_Base_Start_IT+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_TIM_Base_Start_IT+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <HAL_TIM_Base_Start_IT+0xd8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIM_Base_Start_IT+0xdc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d111      	bne.n	80046f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d010      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e007      	b.n	8004708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40010400 	.word	0x40010400
 800472c:	40014000 	.word	0x40014000
 8004730:	40001800 	.word	0x40001800

08004734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b02      	cmp	r3, #2
 8004748:	d122      	bne.n	8004790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d11b      	bne.n	8004790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0202 	mvn.w	r2, #2
 8004760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8ee 	bl	8004958 <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8e0 	bl	8004944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8f1 	bl	800496c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0204 	mvn.w	r2, #4
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8c4 	bl	8004958 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8b6 	bl	8004944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8c7 	bl	800496c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0208 	mvn.w	r2, #8
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2204      	movs	r2, #4
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f89a 	bl	8004958 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f88c 	bl	8004944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f89d 	bl	800496c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b10      	cmp	r3, #16
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0210 	mvn.w	r2, #16
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2208      	movs	r2, #8
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f870 	bl	8004958 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f862 	bl	8004944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f873 	bl	800496c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10e      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0201 	mvn.w	r2, #1
 80048b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd fb30 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d10e      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d107      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f902 	bl	8004ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d10e      	bne.n	8004910 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d107      	bne.n	8004910 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f838 	bl	8004980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d10e      	bne.n	800493c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b20      	cmp	r3, #32
 800492a:	d107      	bne.n	800493c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0220 	mvn.w	r2, #32
 8004934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f8cc 	bl	8004ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a40      	ldr	r2, [pc, #256]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d00f      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3d      	ldr	r2, [pc, #244]	; (8004aac <TIM_Base_SetConfig+0x118>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <TIM_Base_SetConfig+0x11c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <TIM_Base_SetConfig+0x120>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3a      	ldr	r2, [pc, #232]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d02b      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d027      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <TIM_Base_SetConfig+0x118>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d023      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <TIM_Base_SetConfig+0x11c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01f      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <TIM_Base_SetConfig+0x120>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01b      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d017      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a28      	ldr	r2, [pc, #160]	; (8004abc <TIM_Base_SetConfig+0x128>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <TIM_Base_SetConfig+0x12c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00f      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <TIM_Base_SetConfig+0x130>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <TIM_Base_SetConfig+0x134>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <TIM_Base_SetConfig+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <TIM_Base_SetConfig+0x13c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d108      	bne.n	8004a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0xf8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d103      	bne.n	8004a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	615a      	str	r2, [r3, #20]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800
 8004ac8:	40001800 	.word	0x40001800
 8004acc:	40001c00 	.word	0x40001c00
 8004ad0:	40002000 	.word	0x40002000

08004ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e03f      	b.n	8004b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fa3c 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f929 	bl	8004d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b08a      	sub	sp, #40	; 0x28
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d17c      	bne.n	8004cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_UART_Transmit+0x2c>
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e075      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x3e>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e06e      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2221      	movs	r2, #33	; 0x21
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fd fbc5 	bl	8002378 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x82>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c28:	e02a      	b.n	8004c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f840 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e036      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cf      	bne.n	8004c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f810 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b090      	sub	sp, #64	; 0x40
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	e050      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd2:	d04c      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0x30>
 8004cda:	f7fd fb4d 	bl	8002378 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d241      	bcs.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d0a:	637a      	str	r2, [r7, #52]	; 0x34
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e5      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3314      	adds	r3, #20
 8004d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d3e:	623a      	str	r2, [r7, #32]
 8004d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	69f9      	ldr	r1, [r7, #28]
 8004d44:	6a3a      	ldr	r2, [r7, #32]
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e00f      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d09f      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3740      	adds	r7, #64	; 0x40
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b09f      	sub	sp, #124	; 0x7c
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	68d9      	ldr	r1, [r3, #12]
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	ea40 0301 	orr.w	r3, r0, r1
 8004db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ddc:	f021 010c 	bic.w	r1, r1, #12
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004de6:	430b      	orrs	r3, r1
 8004de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	6999      	ldr	r1, [r3, #24]
 8004df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	ea40 0301 	orr.w	r3, r0, r1
 8004e00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4bc5      	ldr	r3, [pc, #788]	; (800511c <UART_SetConfig+0x384>)
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d004      	beq.n	8004e16 <UART_SetConfig+0x7e>
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4bc3      	ldr	r3, [pc, #780]	; (8005120 <UART_SetConfig+0x388>)
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d103      	bne.n	8004e1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e16:	f7ff fb7d 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8004e1a:	6778      	str	r0, [r7, #116]	; 0x74
 8004e1c:	e002      	b.n	8004e24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e1e:	f7ff fb65 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8004e22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	f040 80b6 	bne.w	8004f9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e32:	461c      	mov	r4, r3
 8004e34:	f04f 0500 	mov.w	r5, #0
 8004e38:	4622      	mov	r2, r4
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	1891      	adds	r1, r2, r2
 8004e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8004e40:	415b      	adcs	r3, r3
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e48:	1912      	adds	r2, r2, r4
 8004e4a:	eb45 0303 	adc.w	r3, r5, r3
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	00d9      	lsls	r1, r3, #3
 8004e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e5c:	00d0      	lsls	r0, r2, #3
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	1911      	adds	r1, r2, r4
 8004e64:	6639      	str	r1, [r7, #96]	; 0x60
 8004e66:	416b      	adcs	r3, r5
 8004e68:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e84:	f7fb fa0c 	bl	80002a0 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4ba5      	ldr	r3, [pc, #660]	; (8005124 <UART_SetConfig+0x38c>)
 8004e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	011e      	lsls	r6, r3, #4
 8004e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e98:	461c      	mov	r4, r3
 8004e9a:	f04f 0500 	mov.w	r5, #0
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	1891      	adds	r1, r2, r2
 8004ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ea6:	415b      	adcs	r3, r3
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004eae:	1912      	adds	r2, r2, r4
 8004eb0:	eb45 0303 	adc.w	r3, r5, r3
 8004eb4:	f04f 0000 	mov.w	r0, #0
 8004eb8:	f04f 0100 	mov.w	r1, #0
 8004ebc:	00d9      	lsls	r1, r3, #3
 8004ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ec2:	00d0      	lsls	r0, r2, #3
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	1911      	adds	r1, r2, r4
 8004eca:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ecc:	416b      	adcs	r3, r5
 8004ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	1891      	adds	r1, r2, r2
 8004edc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ede:	415b      	adcs	r3, r3
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004eea:	f7fb f9d9 	bl	80002a0 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <UART_SetConfig+0x38c>)
 8004ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	2164      	movs	r1, #100	; 0x64
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	3332      	adds	r3, #50	; 0x32
 8004f06:	4a87      	ldr	r2, [pc, #540]	; (8005124 <UART_SetConfig+0x38c>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f14:	441e      	add	r6, r3
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	1894      	adds	r4, r2, r2
 8004f24:	623c      	str	r4, [r7, #32]
 8004f26:	415b      	adcs	r3, r3
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f2e:	1812      	adds	r2, r2, r0
 8004f30:	eb41 0303 	adc.w	r3, r1, r3
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	f04f 0500 	mov.w	r5, #0
 8004f3c:	00dd      	lsls	r5, r3, #3
 8004f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f42:	00d4      	lsls	r4, r2, #3
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	1814      	adds	r4, r2, r0
 8004f4a:	653c      	str	r4, [r7, #80]	; 0x50
 8004f4c:	414b      	adcs	r3, r1
 8004f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	61b9      	str	r1, [r7, #24]
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f6a:	f7fb f999 	bl	80002a0 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4b6c      	ldr	r3, [pc, #432]	; (8005124 <UART_SetConfig+0x38c>)
 8004f74:	fba3 1302 	umull	r1, r3, r3, r2
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	2164      	movs	r1, #100	; 0x64
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	3332      	adds	r3, #50	; 0x32
 8004f86:	4a67      	ldr	r2, [pc, #412]	; (8005124 <UART_SetConfig+0x38c>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	f003 0207 	and.w	r2, r3, #7
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4432      	add	r2, r6
 8004f98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f9a:	e0b9      	b.n	8005110 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9e:	461c      	mov	r4, r3
 8004fa0:	f04f 0500 	mov.w	r5, #0
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	6139      	str	r1, [r7, #16]
 8004fac:	415b      	adcs	r3, r3
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fb4:	1912      	adds	r2, r2, r4
 8004fb6:	eb45 0303 	adc.w	r3, r5, r3
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	00d9      	lsls	r1, r3, #3
 8004fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc8:	00d0      	lsls	r0, r2, #3
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	eb12 0804 	adds.w	r8, r2, r4
 8004fd2:	eb43 0905 	adc.w	r9, r3, r5
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f04f 0100 	mov.w	r1, #0
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	008b      	lsls	r3, r1, #2
 8004fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fee:	0082      	lsls	r2, r0, #2
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb f954 	bl	80002a0 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <UART_SetConfig+0x38c>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011e      	lsls	r6, r3, #4
 8005006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005008:	4618      	mov	r0, r3
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	1894      	adds	r4, r2, r2
 8005014:	60bc      	str	r4, [r7, #8]
 8005016:	415b      	adcs	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501e:	1812      	adds	r2, r2, r0
 8005020:	eb41 0303 	adc.w	r3, r1, r3
 8005024:	f04f 0400 	mov.w	r4, #0
 8005028:	f04f 0500 	mov.w	r5, #0
 800502c:	00dd      	lsls	r5, r3, #3
 800502e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005032:	00d4      	lsls	r4, r2, #3
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	1814      	adds	r4, r2, r0
 800503a:	64bc      	str	r4, [r7, #72]	; 0x48
 800503c:	414b      	adcs	r3, r1
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4618      	mov	r0, r3
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	008b      	lsls	r3, r1, #2
 8005054:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005058:	0082      	lsls	r2, r0, #2
 800505a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800505e:	f7fb f91f 	bl	80002a0 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <UART_SetConfig+0x38c>)
 8005068:	fba3 1302 	umull	r1, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2164      	movs	r1, #100	; 0x64
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <UART_SetConfig+0x38c>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005086:	441e      	add	r6, r3
 8005088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508a:	4618      	mov	r0, r3
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	1894      	adds	r4, r2, r2
 8005096:	603c      	str	r4, [r7, #0]
 8005098:	415b      	adcs	r3, r3
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a0:	1812      	adds	r2, r2, r0
 80050a2:	eb41 0303 	adc.w	r3, r1, r3
 80050a6:	f04f 0400 	mov.w	r4, #0
 80050aa:	f04f 0500 	mov.w	r5, #0
 80050ae:	00dd      	lsls	r5, r3, #3
 80050b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050b4:	00d4      	lsls	r4, r2, #3
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	eb12 0a00 	adds.w	sl, r2, r0
 80050be:	eb43 0b01 	adc.w	fp, r3, r1
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	008b      	lsls	r3, r1, #2
 80050d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050da:	0082      	lsls	r2, r0, #2
 80050dc:	4650      	mov	r0, sl
 80050de:	4659      	mov	r1, fp
 80050e0:	f7fb f8de 	bl	80002a0 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <UART_SetConfig+0x38c>)
 80050ea:	fba3 1302 	umull	r1, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2164      	movs	r1, #100	; 0x64
 80050f2:	fb01 f303 	mul.w	r3, r1, r3
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	; 0x32
 80050fc:	4a09      	ldr	r2, [pc, #36]	; (8005124 <UART_SetConfig+0x38c>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4432      	add	r2, r6
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	377c      	adds	r7, #124	; 0x7c
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	bf00      	nop
 800511c:	40011000 	.word	0x40011000
 8005120:	40011400 	.word	0x40011400
 8005124:	51eb851f 	.word	0x51eb851f

08005128 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800512e:	4ba0      	ldr	r3, [pc, #640]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005130:	22c0      	movs	r2, #192	; 0xc0
 8005132:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005134:	4b9e      	ldr	r3, [pc, #632]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005136:	22a8      	movs	r2, #168	; 0xa8
 8005138:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800513a:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <MX_LWIP_Init+0x288>)
 800513c:	2212      	movs	r2, #18
 800513e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005140:	4b9b      	ldr	r3, [pc, #620]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005142:	226f      	movs	r2, #111	; 0x6f
 8005144:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005146:	4b9b      	ldr	r3, [pc, #620]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005148:	22ff      	movs	r2, #255	; 0xff
 800514a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800514c:	4b99      	ldr	r3, [pc, #612]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800514e:	22ff      	movs	r2, #255	; 0xff
 8005150:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005152:	4b98      	ldr	r3, [pc, #608]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005158:	4b96      	ldr	r3, [pc, #600]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800515a:	2200      	movs	r2, #0
 800515c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800515e:	4b96      	ldr	r3, [pc, #600]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005160:	22c0      	movs	r2, #192	; 0xc0
 8005162:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005164:	4b94      	ldr	r3, [pc, #592]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005166:	22a8      	movs	r2, #168	; 0xa8
 8005168:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800516a:	4b93      	ldr	r3, [pc, #588]	; (80053b8 <MX_LWIP_Init+0x290>)
 800516c:	2212      	movs	r2, #18
 800516e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005170:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005172:	2201      	movs	r2, #1
 8005174:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005176:	2100      	movs	r1, #0
 8005178:	2000      	movs	r0, #0
 800517a:	f004 fcc7 	bl	8009b0c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800517e:	4b8c      	ldr	r3, [pc, #560]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	061a      	lsls	r2, r3, #24
 8005184:	4b8a      	ldr	r3, [pc, #552]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <MX_LWIP_Init+0x288>)
 800518e:	789b      	ldrb	r3, [r3, #2]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	4313      	orrs	r3, r2
 8005194:	4a86      	ldr	r2, [pc, #536]	; (80053b0 <MX_LWIP_Init+0x288>)
 8005196:	78d2      	ldrb	r2, [r2, #3]
 8005198:	4313      	orrs	r3, r2
 800519a:	061a      	lsls	r2, r3, #24
 800519c:	4b84      	ldr	r3, [pc, #528]	; (80053b0 <MX_LWIP_Init+0x288>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	0619      	lsls	r1, r3, #24
 80051a2:	4b83      	ldr	r3, [pc, #524]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	4319      	orrs	r1, r3
 80051aa:	4b81      	ldr	r3, [pc, #516]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051ac:	789b      	ldrb	r3, [r3, #2]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	430b      	orrs	r3, r1
 80051b2:	497f      	ldr	r1, [pc, #508]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051b4:	78c9      	ldrb	r1, [r1, #3]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051be:	431a      	orrs	r2, r3
 80051c0:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	0619      	lsls	r1, r3, #24
 80051c6:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	4319      	orrs	r1, r3
 80051ce:	4b78      	ldr	r3, [pc, #480]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051d0:	789b      	ldrb	r3, [r3, #2]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	430b      	orrs	r3, r1
 80051d6:	4976      	ldr	r1, [pc, #472]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051d8:	78c9      	ldrb	r1, [r1, #3]
 80051da:	430b      	orrs	r3, r1
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051e2:	431a      	orrs	r2, r3
 80051e4:	4b72      	ldr	r3, [pc, #456]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	0619      	lsls	r1, r3, #24
 80051ea:	4b71      	ldr	r3, [pc, #452]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	4319      	orrs	r1, r3
 80051f2:	4b6f      	ldr	r3, [pc, #444]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051f4:	789b      	ldrb	r3, [r3, #2]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	430b      	orrs	r3, r1
 80051fa:	496d      	ldr	r1, [pc, #436]	; (80053b0 <MX_LWIP_Init+0x288>)
 80051fc:	78c9      	ldrb	r1, [r1, #3]
 80051fe:	430b      	orrs	r3, r1
 8005200:	0e1b      	lsrs	r3, r3, #24
 8005202:	4313      	orrs	r3, r2
 8005204:	4a6d      	ldr	r2, [pc, #436]	; (80053bc <MX_LWIP_Init+0x294>)
 8005206:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	061a      	lsls	r2, r3, #24
 800520e:	4b69      	ldr	r3, [pc, #420]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	041b      	lsls	r3, r3, #16
 8005214:	431a      	orrs	r2, r3
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005218:	789b      	ldrb	r3, [r3, #2]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	4313      	orrs	r3, r2
 800521e:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005220:	78d2      	ldrb	r2, [r2, #3]
 8005222:	4313      	orrs	r3, r2
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	0619      	lsls	r1, r3, #24
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	4319      	orrs	r1, r3
 8005234:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005236:	789b      	ldrb	r3, [r3, #2]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	430b      	orrs	r3, r1
 800523c:	495d      	ldr	r1, [pc, #372]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800523e:	78c9      	ldrb	r1, [r1, #3]
 8005240:	430b      	orrs	r3, r1
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005248:	431a      	orrs	r2, r3
 800524a:	4b5a      	ldr	r3, [pc, #360]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	0619      	lsls	r1, r3, #24
 8005250:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	4319      	orrs	r1, r3
 8005258:	4b56      	ldr	r3, [pc, #344]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800525a:	789b      	ldrb	r3, [r3, #2]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	430b      	orrs	r3, r1
 8005260:	4954      	ldr	r1, [pc, #336]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005262:	78c9      	ldrb	r1, [r1, #3]
 8005264:	430b      	orrs	r3, r1
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800526c:	431a      	orrs	r2, r3
 800526e:	4b51      	ldr	r3, [pc, #324]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	0619      	lsls	r1, r3, #24
 8005274:	4b4f      	ldr	r3, [pc, #316]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	4319      	orrs	r1, r3
 800527c:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <MX_LWIP_Init+0x28c>)
 800527e:	789b      	ldrb	r3, [r3, #2]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	430b      	orrs	r3, r1
 8005284:	494b      	ldr	r1, [pc, #300]	; (80053b4 <MX_LWIP_Init+0x28c>)
 8005286:	78c9      	ldrb	r1, [r1, #3]
 8005288:	430b      	orrs	r3, r1
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	4313      	orrs	r3, r2
 800528e:	4a4c      	ldr	r2, [pc, #304]	; (80053c0 <MX_LWIP_Init+0x298>)
 8005290:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005292:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	061a      	lsls	r2, r3, #24
 8005298:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <MX_LWIP_Init+0x290>)
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	4b45      	ldr	r3, [pc, #276]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052a2:	789b      	ldrb	r3, [r3, #2]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	4313      	orrs	r3, r2
 80052a8:	4a43      	ldr	r2, [pc, #268]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052aa:	78d2      	ldrb	r2, [r2, #3]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	061a      	lsls	r2, r3, #24
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	0619      	lsls	r1, r3, #24
 80052b6:	4b40      	ldr	r3, [pc, #256]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	4319      	orrs	r1, r3
 80052be:	4b3e      	ldr	r3, [pc, #248]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052c0:	789b      	ldrb	r3, [r3, #2]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	430b      	orrs	r3, r1
 80052c6:	493c      	ldr	r1, [pc, #240]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052c8:	78c9      	ldrb	r1, [r1, #3]
 80052ca:	430b      	orrs	r3, r1
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052d2:	431a      	orrs	r2, r3
 80052d4:	4b38      	ldr	r3, [pc, #224]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	0619      	lsls	r1, r3, #24
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	4319      	orrs	r1, r3
 80052e2:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052e4:	789b      	ldrb	r3, [r3, #2]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	430b      	orrs	r3, r1
 80052ea:	4933      	ldr	r1, [pc, #204]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052ec:	78c9      	ldrb	r1, [r1, #3]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052f6:	431a      	orrs	r2, r3
 80052f8:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <MX_LWIP_Init+0x290>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	0619      	lsls	r1, r3, #24
 80052fe:	4b2e      	ldr	r3, [pc, #184]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	4319      	orrs	r1, r3
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005308:	789b      	ldrb	r3, [r3, #2]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	430b      	orrs	r3, r1
 800530e:	492a      	ldr	r1, [pc, #168]	; (80053b8 <MX_LWIP_Init+0x290>)
 8005310:	78c9      	ldrb	r1, [r1, #3]
 8005312:	430b      	orrs	r3, r1
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	4313      	orrs	r3, r2
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <MX_LWIP_Init+0x29c>)
 800531a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <MX_LWIP_Init+0x2a0>)
 800531e:	9302      	str	r3, [sp, #8]
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <MX_LWIP_Init+0x2a4>)
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	2300      	movs	r3, #0
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <MX_LWIP_Init+0x29c>)
 800532a:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <MX_LWIP_Init+0x298>)
 800532c:	4923      	ldr	r1, [pc, #140]	; (80053bc <MX_LWIP_Init+0x294>)
 800532e:	4828      	ldr	r0, [pc, #160]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 8005330:	f007 fa18 	bl	800c764 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005334:	4826      	ldr	r0, [pc, #152]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 8005336:	f007 fbc7 	bl	800cac8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800533a:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 800533c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800534c:	4820      	ldr	r0, [pc, #128]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 800534e:	f007 fbcb 	bl	800cae8 <netif_set_up>
 8005352:	e002      	b.n	800535a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005354:	481e      	ldr	r0, [pc, #120]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 8005356:	f007 fc33 	bl	800cbc0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800535a:	491e      	ldr	r1, [pc, #120]	; (80053d4 <MX_LWIP_Init+0x2ac>)
 800535c:	481c      	ldr	r0, [pc, #112]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 800535e:	f007 fcc5 	bl	800ccec <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005362:	2200      	movs	r2, #0
 8005364:	2101      	movs	r1, #1
 8005366:	2001      	movs	r0, #1
 8005368:	f000 feaa 	bl	80060c0 <osSemaphoreNew>
 800536c:	4603      	mov	r3, r0
 800536e:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <MX_LWIP_Init+0x2b0>)
 8005370:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <MX_LWIP_Init+0x2b4>)
 8005374:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <MX_LWIP_Init+0x2a8>)
 8005376:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <MX_LWIP_Init+0x2b0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <MX_LWIP_Init+0x2b4>)
 800537e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	2100      	movs	r1, #0
 8005384:	4816      	ldr	r0, [pc, #88]	; (80053e0 <MX_LWIP_Init+0x2b8>)
 8005386:	f011 fb8c 	bl	8016aa2 <memset>
  attributes.name = "LinkThr";
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <MX_LWIP_Init+0x2b8>)
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <MX_LWIP_Init+0x2bc>)
 800538e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <MX_LWIP_Init+0x2b8>)
 8005392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005396:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <MX_LWIP_Init+0x2b8>)
 800539a:	2210      	movs	r2, #16
 800539c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <MX_LWIP_Init+0x2b8>)
 80053a0:	490e      	ldr	r1, [pc, #56]	; (80053dc <MX_LWIP_Init+0x2b4>)
 80053a2:	4811      	ldr	r0, [pc, #68]	; (80053e8 <MX_LWIP_Init+0x2c0>)
 80053a4:	f000 fcd1 	bl	8005d4a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000e19c 	.word	0x2000e19c
 80053b4:	2000e198 	.word	0x2000e198
 80053b8:	2000e16c 	.word	0x2000e16c
 80053bc:	2000e194 	.word	0x2000e194
 80053c0:	2000e1a0 	.word	0x2000e1a0
 80053c4:	2000e1a4 	.word	0x2000e1a4
 80053c8:	08009a49 	.word	0x08009a49
 80053cc:	08005a15 	.word	0x08005a15
 80053d0:	20009fdc 	.word	0x20009fdc
 80053d4:	08005af9 	.word	0x08005af9
 80053d8:	20003528 	.word	0x20003528
 80053dc:	2000e164 	.word	0x2000e164
 80053e0:	2000e170 	.word	0x2000e170
 80053e4:	0801882c 	.word	0x0801882c
 80053e8:	08005a81 	.word	0x08005a81

080053ec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	; 0x38
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4a      	ldr	r2, [pc, #296]	; (8005534 <HAL_ETH_MspInit+0x148>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f040 808d 	bne.w	800552a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005410:	2300      	movs	r3, #0
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	4b48      	ldr	r3, [pc, #288]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	4a47      	ldr	r2, [pc, #284]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800541a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800541e:	6313      	str	r3, [r2, #48]	; 0x30
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	4b41      	ldr	r3, [pc, #260]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	4a40      	ldr	r2, [pc, #256]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800543a:	6313      	str	r3, [r2, #48]	; 0x30
 800543c:	4b3e      	ldr	r3, [pc, #248]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	4a39      	ldr	r2, [pc, #228]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005452:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005456:	6313      	str	r3, [r2, #48]	; 0x30
 8005458:	4b37      	ldr	r3, [pc, #220]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	4a32      	ldr	r2, [pc, #200]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	6313      	str	r3, [r2, #48]	; 0x30
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b29      	ldr	r3, [pc, #164]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_ETH_MspInit+0x14c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80054b8:	2332      	movs	r3, #50	; 0x32
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054c8:	230b      	movs	r3, #11
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d0:	4619      	mov	r1, r3
 80054d2:	481a      	ldr	r0, [pc, #104]	; (800553c <HAL_ETH_MspInit+0x150>)
 80054d4:	f7fe fa08 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80054d8:	2386      	movs	r3, #134	; 0x86
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054e8:	230b      	movs	r3, #11
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f0:	4619      	mov	r1, r3
 80054f2:	4813      	ldr	r0, [pc, #76]	; (8005540 <HAL_ETH_MspInit+0x154>)
 80054f4:	f7fe f9f8 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80054f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005506:	2303      	movs	r3, #3
 8005508:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800550a:	230b      	movs	r3, #11
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800550e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005512:	4619      	mov	r1, r3
 8005514:	480b      	ldr	r0, [pc, #44]	; (8005544 <HAL_ETH_MspInit+0x158>)
 8005516:	f7fe f9e7 	bl	80038e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800551a:	2200      	movs	r2, #0
 800551c:	2105      	movs	r1, #5
 800551e:	203d      	movs	r0, #61	; 0x3d
 8005520:	f7fd f812 	bl	8002548 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005524:	203d      	movs	r0, #61	; 0x3d
 8005526:	f7fd f82b 	bl	8002580 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800552a:	bf00      	nop
 800552c:	3738      	adds	r7, #56	; 0x38
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40028000 	.word	0x40028000
 8005538:	40023800 	.word	0x40023800
 800553c:	40020800 	.word	0x40020800
 8005540:	40020000 	.word	0x40020000
 8005544:	40020400 	.word	0x40020400

08005548 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <HAL_ETH_RxCpltCallback+0x1c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fe8f 	bl	8006278 <osSemaphoreRelease>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	2000352c 	.word	0x2000352c

08005568 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b090      	sub	sp, #64	; 0x40
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005574:	4b5d      	ldr	r3, [pc, #372]	; (80056ec <low_level_init+0x184>)
 8005576:	4a5e      	ldr	r2, [pc, #376]	; (80056f0 <low_level_init+0x188>)
 8005578:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800557a:	4b5c      	ldr	r3, [pc, #368]	; (80056ec <low_level_init+0x184>)
 800557c:	2201      	movs	r2, #1
 800557e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005580:	4b5a      	ldr	r3, [pc, #360]	; (80056ec <low_level_init+0x184>)
 8005582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005586:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005588:	4b58      	ldr	r3, [pc, #352]	; (80056ec <low_level_init+0x184>)
 800558a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005590:	4b56      	ldr	r3, [pc, #344]	; (80056ec <low_level_init+0x184>)
 8005592:	2201      	movs	r2, #1
 8005594:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005596:	2300      	movs	r3, #0
 8005598:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800559e:	23e1      	movs	r3, #225	; 0xe1
 80055a0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80055a6:	2300      	movs	r3, #0
 80055a8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80055aa:	2300      	movs	r3, #0
 80055ac:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80055ae:	4a4f      	ldr	r2, [pc, #316]	; (80056ec <low_level_init+0x184>)
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80055b6:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <low_level_init+0x184>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80055bc:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <low_level_init+0x184>)
 80055be:	2200      	movs	r2, #0
 80055c0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <low_level_init+0x184>)
 80055c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80055c8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80055ca:	4848      	ldr	r0, [pc, #288]	; (80056ec <low_level_init+0x184>)
 80055cc:	f7fc ffe6 	bl	800259c <HAL_ETH_Init>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80055d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d108      	bne.n	80055f0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80055f0:	2304      	movs	r3, #4
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <low_level_init+0x18c>)
 80055f4:	4940      	ldr	r1, [pc, #256]	; (80056f8 <low_level_init+0x190>)
 80055f6:	483d      	ldr	r0, [pc, #244]	; (80056ec <low_level_init+0x184>)
 80055f8:	f7fd f96c 	bl	80028d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80055fc:	2304      	movs	r3, #4
 80055fe:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <low_level_init+0x194>)
 8005600:	493f      	ldr	r1, [pc, #252]	; (8005700 <low_level_init+0x198>)
 8005602:	483a      	ldr	r0, [pc, #232]	; (80056ec <low_level_init+0x184>)
 8005604:	f7fd f9cf 	bl	80029a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2206      	movs	r2, #6
 800560c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005610:	4b36      	ldr	r3, [pc, #216]	; (80056ec <low_level_init+0x184>)
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <low_level_init+0x184>)
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	785a      	ldrb	r2, [r3, #1]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <low_level_init+0x184>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	789a      	ldrb	r2, [r3, #2]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <low_level_init+0x184>)
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	78da      	ldrb	r2, [r3, #3]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005640:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <low_level_init+0x184>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	791a      	ldrb	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800564c:	4b27      	ldr	r3, [pc, #156]	; (80056ec <low_level_init+0x184>)
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	795a      	ldrb	r2, [r3, #5]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800565e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005666:	f043 030a 	orr.w	r3, r3, #10
 800566a:	b2da      	uxtb	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005672:	2200      	movs	r2, #0
 8005674:	2101      	movs	r1, #1
 8005676:	2001      	movs	r0, #1
 8005678:	f000 fd22 	bl	80060c0 <osSemaphoreNew>
 800567c:	4603      	mov	r3, r0
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <low_level_init+0x19c>)
 8005680:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	2224      	movs	r2, #36	; 0x24
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f011 fa09 	bl	8016aa2 <memset>
  attributes.name = "EthIf";
 8005690:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <low_level_init+0x1a0>)
 8005692:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005694:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800569a:	2330      	movs	r3, #48	; 0x30
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	461a      	mov	r2, r3
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4819      	ldr	r0, [pc, #100]	; (800570c <low_level_init+0x1a4>)
 80056a8:	f000 fb4f 	bl	8005d4a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80056ac:	480f      	ldr	r0, [pc, #60]	; (80056ec <low_level_init+0x184>)
 80056ae:	f7fd fca2 	bl	8002ff6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80056b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056b6:	461a      	mov	r2, r3
 80056b8:	211d      	movs	r1, #29
 80056ba:	480c      	ldr	r0, [pc, #48]	; (80056ec <low_level_init+0x184>)
 80056bc:	f7fd fbcd 	bl	8002e5a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	f043 030b 	orr.w	r3, r3, #11
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	461a      	mov	r2, r3
 80056cc:	211d      	movs	r1, #29
 80056ce:	4807      	ldr	r0, [pc, #28]	; (80056ec <low_level_init+0x184>)
 80056d0:	f7fd fc2b 	bl	8002f2a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80056d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056d8:	461a      	mov	r2, r3
 80056da:	211d      	movs	r1, #29
 80056dc:	4803      	ldr	r0, [pc, #12]	; (80056ec <low_level_init+0x184>)
 80056de:	f7fd fbbc 	bl	8002e5a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80056e2:	bf00      	nop
 80056e4:	3740      	adds	r7, #64	; 0x40
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	2000fa78 	.word	0x2000fa78
 80056f0:	40028000 	.word	0x40028000
 80056f4:	2000fac0 	.word	0x2000fac0
 80056f8:	2000e1a8 	.word	0x2000e1a8
 80056fc:	2000e228 	.word	0x2000e228
 8005700:	2000f9f8 	.word	0x2000f9f8
 8005704:	2000352c 	.word	0x2000352c
 8005708:	08018834 	.word	0x08018834
 800570c:	080059b5 	.word	0x080059b5

08005710 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800571a:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <low_level_output+0x138>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005732:	4b45      	ldr	r3, [pc, #276]	; (8005848 <low_level_output+0x138>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	e05a      	b.n	80057f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	da03      	bge.n	8005752 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800574a:	23f8      	movs	r3, #248	; 0xf8
 800574c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005750:	e05c      	b.n	800580c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	895b      	ldrh	r3, [r3, #10]
 8005756:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800575c:	e02f      	b.n	80057be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	18d0      	adds	r0, r2, r3
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	18d1      	adds	r1, r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005772:	3304      	adds	r3, #4
 8005774:	461a      	mov	r2, r3
 8005776:	f011 f96c 	bl	8016a52 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	da03      	bge.n	8005790 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005788:	23f8      	movs	r3, #248	; 0xf8
 800578a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800578e:	e03d      	b.n	800580c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80057a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d8c8      	bhi.n	800575e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	18d0      	adds	r0, r2, r3
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4413      	add	r3, r2
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4619      	mov	r1, r3
 80057de:	f011 f938 	bl	8016a52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1a1      	bne.n	8005742 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	4811      	ldr	r0, [pc, #68]	; (8005848 <low_level_output+0x138>)
 8005802:	f7fd f93d 	bl	8002a80 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <low_level_output+0x138>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005814:	3314      	adds	r3, #20
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <low_level_output+0x138>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	3314      	adds	r3, #20
 800582a:	2220      	movs	r2, #32
 800582c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800582e:	4b06      	ldr	r3, [pc, #24]	; (8005848 <low_level_output+0x138>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	3304      	adds	r3, #4
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800583c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005840:	4618      	mov	r0, r3
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	2000fa78 	.word	0x2000fa78

0800584c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005854:	2300      	movs	r3, #0
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005870:	484f      	ldr	r0, [pc, #316]	; (80059b0 <low_level_input+0x164>)
 8005872:	f7fd f9ef 	bl	8002c54 <HAL_ETH_GetReceivedFrame_IT>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <low_level_input+0x34>

    return NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	e092      	b.n	80059a6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <low_level_input+0x164>)
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005886:	4b4a      	ldr	r3, [pc, #296]	; (80059b0 <low_level_input+0x164>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800588c:	89fb      	ldrh	r3, [r7, #14]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005898:	4619      	mov	r1, r3
 800589a:	2000      	movs	r0, #0
 800589c:	f007 faf0 	bl	800ce80 <pbuf_alloc>
 80058a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d04b      	beq.n	8005940 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80058a8:	4b41      	ldr	r3, [pc, #260]	; (80059b0 <low_level_input+0x164>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b6:	e040      	b.n	800593a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	895b      	ldrh	r3, [r3, #10]
 80058bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80058c2:	e021      	b.n	8005908 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	18d0      	adds	r0, r2, r3
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	18d1      	adds	r1, r2, r3
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80058d8:	3304      	adds	r3, #4
 80058da:	461a      	mov	r2, r3
 80058dc:	f011 f8b9 	bl	8016a52 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4413      	add	r3, r2
 80058f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80058f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005902:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005912:	4293      	cmp	r3, r2
 8005914:	d8d6      	bhi.n	80058c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	18d0      	adds	r0, r2, r3
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4619      	mov	r1, r3
 8005928:	f011 f893 	bl	8016a52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4413      	add	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1bb      	bne.n	80058b8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005940:	4b1b      	ldr	r3, [pc, #108]	; (80059b0 <low_level_input+0x164>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	e00b      	b.n	8005964 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <low_level_input+0x164>)
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d3ee      	bcc.n	800594c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800596e:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <low_level_input+0x164>)
 8005970:	2200      	movs	r2, #0
 8005972:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <low_level_input+0x164>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597c:	3314      	adds	r3, #20
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <low_level_input+0x164>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	3314      	adds	r3, #20
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <low_level_input+0x164>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	3308      	adds	r3, #8
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3730      	adds	r7, #48	; 0x30
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000fa78 	.word	0x2000fa78

080059b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80059c0:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <ethernetif_input+0x58>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fc03 	bl	80061d4 <osSemaphoreAcquire>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f5      	bne.n	80059c0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80059d4:	480e      	ldr	r0, [pc, #56]	; (8005a10 <ethernetif_input+0x5c>)
 80059d6:	f010 feb3 	bl	8016740 <sys_mutex_lock>
        p = low_level_input( netif );
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff ff36 	bl	800584c <low_level_input>
 80059e0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	4798      	blx	r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80059f8:	68b8      	ldr	r0, [r7, #8]
 80059fa:	f007 fd25 	bl	800d448 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80059fe:	4804      	ldr	r0, [pc, #16]	; (8005a10 <ethernetif_input+0x5c>)
 8005a00:	f010 fead 	bl	801675e <sys_mutex_unlock>
      } while(p!=NULL);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e4      	bne.n	80059d4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a0a:	e7d9      	b.n	80059c0 <ethernetif_input+0xc>
 8005a0c:	2000352c 	.word	0x2000352c
 8005a10:	200112d0 	.word	0x200112d0

08005a14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <ethernetif_init+0x1c>
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <ethernetif_init+0x48>)
 8005a24:	f240 2231 	movw	r2, #561	; 0x231
 8005a28:	490d      	ldr	r1, [pc, #52]	; (8005a60 <ethernetif_init+0x4c>)
 8005a2a:	480e      	ldr	r0, [pc, #56]	; (8005a64 <ethernetif_init+0x50>)
 8005a2c:	f011 f89c 	bl	8016b68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2273      	movs	r2, #115	; 0x73
 8005a34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2274      	movs	r2, #116	; 0x74
 8005a3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <ethernetif_init+0x54>)
 8005a44:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <ethernetif_init+0x58>)
 8005a4a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fd8b 	bl	8005568 <low_level_init>

  return ERR_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	0801883c 	.word	0x0801883c
 8005a60:	08018858 	.word	0x08018858
 8005a64:	08018868 	.word	0x08018868
 8005a68:	08014929 	.word	0x08014929
 8005a6c:	08005711 	.word	0x08005711

08005a70 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a74:	f7fc fc80 	bl	8002378 <HAL_GetTick>
 8005a78:	4603      	mov	r3, r0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	461a      	mov	r2, r3
 8005a96:	2101      	movs	r1, #1
 8005a98:	4816      	ldr	r0, [pc, #88]	; (8005af4 <ethernetif_set_link+0x74>)
 8005a9a:	f7fd f9de 	bl	8002e5a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <ethernetif_set_link+0x48>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f007 f8af 	bl	800cc24 <netif_set_link_up>
 8005ac6:	e011      	b.n	8005aec <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <ethernetif_set_link+0x6c>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f007 f8d0 	bl	800cc8c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005aec:	20c8      	movs	r0, #200	; 0xc8
 8005aee:	f000 f9be 	bl	8005e6e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005af2:	e7cd      	b.n	8005a90 <ethernetif_set_link+0x10>
 8005af4:	2000fa78 	.word	0x2000fa78

08005af8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b0e:	089b      	lsrs	r3, r3, #2
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d05d      	beq.n	8005bd6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005b1a:	4b34      	ldr	r3, [pc, #208]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d03f      	beq.n	8005ba2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b26:	2100      	movs	r1, #0
 8005b28:	4830      	ldr	r0, [pc, #192]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b2a:	f7fd f9fe 	bl	8002f2a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fc fc23 	bl	8002378 <HAL_GetTick>
 8005b32:	4603      	mov	r3, r0
 8005b34:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	482b      	ldr	r0, [pc, #172]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b40:	f7fd f98b 	bl	8002e5a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005b44:	f7fc fc18 	bl	8002378 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b52:	d828      	bhi.n	8005ba6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0eb      	beq.n	8005b36 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	461a      	mov	r2, r3
 8005b64:	2110      	movs	r1, #16
 8005b66:	4821      	ldr	r0, [pc, #132]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b68:	f7fd f977 	bl	8002e5a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	e002      	b.n	8005b86 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005b80:	4b1a      	ldr	r3, [pc, #104]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005b90:	4b16      	ldr	r3, [pc, #88]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	e016      	b.n	8005bc6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005b98:	4b14      	ldr	r3, [pc, #80]	; (8005bec <ethernetif_update_config+0xf4>)
 8005b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	e011      	b.n	8005bc6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <ethernetif_update_config+0xb0>
          goto error;
 8005ba6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <ethernetif_update_config+0xf4>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <ethernetif_update_config+0xf4>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	480a      	ldr	r0, [pc, #40]	; (8005bec <ethernetif_update_config+0xf4>)
 8005bc2:	f7fd f9b2 	bl	8002f2a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4808      	ldr	r0, [pc, #32]	; (8005bec <ethernetif_update_config+0xf4>)
 8005bca:	f7fd fa73 	bl	80030b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005bce:	4807      	ldr	r0, [pc, #28]	; (8005bec <ethernetif_update_config+0xf4>)
 8005bd0:	f7fd fa11 	bl	8002ff6 <HAL_ETH_Start>
 8005bd4:	e002      	b.n	8005bdc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005bd6:	4805      	ldr	r0, [pc, #20]	; (8005bec <ethernetif_update_config+0xf4>)
 8005bd8:	f7fd fa3c 	bl	8003054 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f807 	bl	8005bf0 <ethernetif_notify_conn_changed>
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	2000fa78 	.word	0x2000fa78

08005bf0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <__NVIC_SetPriority>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	db0a      	blt.n	8005c2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	490c      	ldr	r1, [pc, #48]	; (8005c50 <__NVIC_SetPriority+0x4c>)
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	440b      	add	r3, r1
 8005c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c2c:	e00a      	b.n	8005c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4908      	ldr	r1, [pc, #32]	; (8005c54 <__NVIC_SetPriority+0x50>)
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	0112      	lsls	r2, r2, #4
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	440b      	add	r3, r1
 8005c42:	761a      	strb	r2, [r3, #24]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	e000e100 	.word	0xe000e100
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <SysTick_Handler+0x1c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c60:	f002 fc96 	bl	8008590 <xTaskGetSchedulerState>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c6a:	f003 fb7d 	bl	8009368 <xPortSysTickHandler>
  }
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000e010 	.word	0xe000e010

08005c78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	f06f 0004 	mvn.w	r0, #4
 8005c82:	f7ff ffbf 	bl	8005c04 <__NVIC_SetPriority>
#endif
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c92:	f3ef 8305 	mrs	r3, IPSR
 8005c96:	603b      	str	r3, [r7, #0]
  return(result);
 8005c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c9e:	f06f 0305 	mvn.w	r3, #5
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	e00c      	b.n	8005cc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <osKernelInitialize+0x44>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d105      	bne.n	8005cba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <osKernelInitialize+0x44>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	e002      	b.n	8005cc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cc0:	687b      	ldr	r3, [r7, #4]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20003530 	.word	0x20003530

08005cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cda:	f3ef 8305 	mrs	r3, IPSR
 8005cde:	603b      	str	r3, [r7, #0]
  return(result);
 8005ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ce6:	f06f 0305 	mvn.w	r3, #5
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e010      	b.n	8005d10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <osKernelStart+0x48>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d109      	bne.n	8005d0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cf6:	f7ff ffbf 	bl	8005c78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <osKernelStart+0x48>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d00:	f001 ffc8 	bl	8007c94 <vTaskStartScheduler>
      stat = osOK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e002      	b.n	8005d10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d10:	687b      	ldr	r3, [r7, #4]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20003530 	.word	0x20003530

08005d20 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d26:	f3ef 8305 	mrs	r3, IPSR
 8005d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d2c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005d32:	f002 f8db 	bl	8007eec <xTaskGetTickCountFromISR>
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	e002      	b.n	8005d40 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005d3a:	f002 f8c7 	bl	8007ecc <xTaskGetTickCount>
 8005d3e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005d40:	687b      	ldr	r3, [r7, #4]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b08e      	sub	sp, #56	; 0x38
 8005d4e:	af04      	add	r7, sp, #16
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d60:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d17e      	bne.n	8005e64 <osThreadNew+0x11a>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d07b      	beq.n	8005e64 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d70:	2318      	movs	r3, #24
 8005d72:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d045      	beq.n	8005e10 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <osThreadNew+0x48>
        name = attr->name;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <osThreadNew+0x6e>
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2b38      	cmp	r3, #56	; 0x38
 8005daa:	d805      	bhi.n	8005db8 <osThreadNew+0x6e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <osThreadNew+0x72>
        return (NULL);
 8005db8:	2300      	movs	r3, #0
 8005dba:	e054      	b.n	8005e66 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	089b      	lsrs	r3, r3, #2
 8005dca:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <osThreadNew+0xa8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2bbb      	cmp	r3, #187	; 0xbb
 8005dda:	d90a      	bls.n	8005df2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <osThreadNew+0xa8>
        mem = 1;
 8005dec:	2301      	movs	r3, #1
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e010      	b.n	8005e14 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <osThreadNew+0xca>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d108      	bne.n	8005e14 <osThreadNew+0xca>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <osThreadNew+0xca>
          mem = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e001      	b.n	8005e14 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d110      	bne.n	8005e3c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e22:	9202      	str	r2, [sp, #8]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6a3a      	ldr	r2, [r7, #32]
 8005e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f001 fd43 	bl	80078bc <xTaskCreateStatic>
 8005e36:	4603      	mov	r3, r0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e013      	b.n	8005e64 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d110      	bne.n	8005e64 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f107 0310 	add.w	r3, r7, #16
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 fd8e 	bl	8007976 <xTaskCreate>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <osThreadNew+0x11a>
            hTask = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e64:	693b      	ldr	r3, [r7, #16]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e76:	f3ef 8305 	mrs	r3, IPSR
 8005e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <osDelay+0x1c>
    stat = osErrorISR;
 8005e82:	f06f 0305 	mvn.w	r3, #5
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e007      	b.n	8005e9a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fec9 	bl	8007c2c <vTaskDelay>
    }
  }

  return (stat);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb0:	f3ef 8305 	mrs	r3, IPSR
 8005eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eb6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d174      	bne.n	8005fa6 <osMutexNew+0x102>
    if (attr != NULL) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e001      	b.n	8005ece <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <osMutexNew+0x3a>
      rmtx = 1U;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e001      	b.n	8005ee2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d15c      	bne.n	8005fa6 <osMutexNew+0x102>
      mem = -1;
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ef0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <osMutexNew+0x6a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b4f      	cmp	r3, #79	; 0x4f
 8005f06:	d902      	bls.n	8005f0e <osMutexNew+0x6a>
          mem = 1;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	e00c      	b.n	8005f28 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d108      	bne.n	8005f28 <osMutexNew+0x84>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <osMutexNew+0x84>
            mem = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e001      	b.n	8005f28 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d112      	bne.n	8005f54 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	2004      	movs	r0, #4
 8005f3c:	f000 fd69 	bl	8006a12 <xQueueCreateMutexStatic>
 8005f40:	61f8      	str	r0, [r7, #28]
 8005f42:	e016      	b.n	8005f72 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f000 fd61 	bl	8006a12 <xQueueCreateMutexStatic>
 8005f50:	61f8      	str	r0, [r7, #28]
 8005f52:	e00e      	b.n	8005f72 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005f60:	2004      	movs	r0, #4
 8005f62:	f000 fd3e 	bl	80069e2 <xQueueCreateMutex>
 8005f66:	61f8      	str	r0, [r7, #28]
 8005f68:	e003      	b.n	8005f72 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f000 fd39 	bl	80069e2 <xQueueCreateMutex>
 8005f70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <osMutexNew+0xee>
        if (attr != NULL) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <osMutexNew+0xe2>
          name = attr->name;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	69f8      	ldr	r0, [r7, #28]
 8005f8e:	f001 fc0d 	bl	80077ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <osMutexNew+0x102>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005fa6:	69fb      	ldr	r3, [r7, #28]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fce:	f3ef 8305 	mrs	r3, IPSR
 8005fd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005fda:	f06f 0305 	mvn.w	r3, #5
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	e02c      	b.n	800603c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005fe8:	f06f 0303 	mvn.w	r3, #3
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e025      	b.n	800603c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d011      	beq.n	800601a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6938      	ldr	r0, [r7, #16]
 8005ffa:	f000 fd59 	bl	8006ab0 <xQueueTakeMutexRecursive>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d01b      	beq.n	800603c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800600a:	f06f 0301 	mvn.w	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e014      	b.n	800603c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006012:	f06f 0302 	mvn.w	r3, #2
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e010      	b.n	800603c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f001 f8ed 	bl	80071fc <xQueueSemaphoreTake>
 8006022:	4603      	mov	r3, r0
 8006024:	2b01      	cmp	r3, #1
 8006026:	d009      	beq.n	800603c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800602e:	f06f 0301 	mvn.w	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e002      	b.n	800603c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006036:	f06f 0302 	mvn.w	r3, #2
 800603a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800603c:	697b      	ldr	r3, [r7, #20]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006062:	f3ef 8305 	mrs	r3, IPSR
 8006066:	60bb      	str	r3, [r7, #8]
  return(result);
 8006068:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <osMutexRelease+0x30>
    stat = osErrorISR;
 800606e:	f06f 0305 	mvn.w	r3, #5
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e01f      	b.n	80060b6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800607c:	f06f 0303 	mvn.w	r3, #3
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e018      	b.n	80060b6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f000 fcdc 	bl	8006a48 <xQueueGiveMutexRecursive>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d00f      	beq.n	80060b6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006096:	f06f 0302 	mvn.w	r3, #2
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e00b      	b.n	80060b6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800609e:	2300      	movs	r3, #0
 80060a0:	2200      	movs	r2, #0
 80060a2:	2100      	movs	r1, #0
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f000 fda3 	bl	8006bf0 <xQueueGenericSend>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060b0:	f06f 0302 	mvn.w	r3, #2
 80060b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80060b6:	697b      	ldr	r3, [r7, #20]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d0:	f3ef 8305 	mrs	r3, IPSR
 80060d4:	613b      	str	r3, [r7, #16]
  return(result);
 80060d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d175      	bne.n	80061c8 <osSemaphoreNew+0x108>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d072      	beq.n	80061c8 <osSemaphoreNew+0x108>
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d86e      	bhi.n	80061c8 <osSemaphoreNew+0x108>
    mem = -1;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <osSemaphoreNew+0x4c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b4f      	cmp	r3, #79	; 0x4f
 8006104:	d902      	bls.n	800610c <osSemaphoreNew+0x4c>
        mem = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	e00c      	b.n	8006126 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <osSemaphoreNew+0x66>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <osSemaphoreNew+0x66>
          mem = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	e001      	b.n	8006126 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612c:	d04c      	beq.n	80061c8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d128      	bne.n	8006186 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d10a      	bne.n	8006150 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2203      	movs	r2, #3
 8006140:	9200      	str	r2, [sp, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	2100      	movs	r1, #0
 8006146:	2001      	movs	r0, #1
 8006148:	f000 fb5c 	bl	8006804 <xQueueGenericCreateStatic>
 800614c:	61f8      	str	r0, [r7, #28]
 800614e:	e005      	b.n	800615c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006150:	2203      	movs	r2, #3
 8006152:	2100      	movs	r1, #0
 8006154:	2001      	movs	r0, #1
 8006156:	f000 fbcd 	bl	80068f4 <xQueueGenericCreate>
 800615a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d022      	beq.n	80061a8 <osSemaphoreNew+0xe8>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01f      	beq.n	80061a8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006168:	2300      	movs	r3, #0
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	69f8      	ldr	r0, [r7, #28]
 8006170:	f000 fd3e 	bl	8006bf0 <xQueueGenericSend>
 8006174:	4603      	mov	r3, r0
 8006176:	2b01      	cmp	r3, #1
 8006178:	d016      	beq.n	80061a8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800617a:	69f8      	ldr	r0, [r7, #28]
 800617c:	f001 f9ca 	bl	8007514 <vQueueDelete>
            hSemaphore = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	e010      	b.n	80061a8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d108      	bne.n	800619e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	461a      	mov	r2, r3
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fcc1 	bl	8006b1c <xQueueCreateCountingSemaphoreStatic>
 800619a:	61f8      	str	r0, [r7, #28]
 800619c:	e004      	b.n	80061a8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fcf2 	bl	8006b8a <xQueueCreateCountingSemaphore>
 80061a6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <osSemaphoreNew+0xfc>
          name = attr->name;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e001      	b.n	80061c0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	69f8      	ldr	r0, [r7, #28]
 80061c4:	f001 faf2 	bl	80077ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80061c8:	69fb      	ldr	r3, [r7, #28]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80061ec:	f06f 0303 	mvn.w	r3, #3
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e039      	b.n	8006268 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f4:	f3ef 8305 	mrs	r3, IPSR
 80061f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80061fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d022      	beq.n	8006246 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006206:	f06f 0303 	mvn.w	r3, #3
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e02c      	b.n	8006268 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	461a      	mov	r2, r3
 8006218:	2100      	movs	r1, #0
 800621a:	6938      	ldr	r0, [r7, #16]
 800621c:	f001 f8fa 	bl	8007414 <xQueueReceiveFromISR>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d003      	beq.n	800622e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006226:	f06f 0302 	mvn.w	r3, #2
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e01c      	b.n	8006268 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d019      	beq.n	8006268 <osSemaphoreAcquire+0x94>
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <osSemaphoreAcquire+0xa0>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	e010      	b.n	8006268 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6938      	ldr	r0, [r7, #16]
 800624a:	f000 ffd7 	bl	80071fc <xQueueSemaphoreTake>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d009      	beq.n	8006268 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800625a:	f06f 0301 	mvn.w	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e002      	b.n	8006268 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006262:	f06f 0302 	mvn.w	r3, #2
 8006266:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800628e:	f06f 0303 	mvn.w	r3, #3
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e02c      	b.n	80062f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006296:	f3ef 8305 	mrs	r3, IPSR
 800629a:	60fb      	str	r3, [r7, #12]
  return(result);
 800629c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01a      	beq.n	80062d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4619      	mov	r1, r3
 80062ac:	6938      	ldr	r0, [r7, #16]
 80062ae:	f000 fe38 	bl	8006f22 <xQueueGiveFromISR>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d003      	beq.n	80062c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80062b8:	f06f 0302 	mvn.w	r3, #2
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e017      	b.n	80062f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d014      	beq.n	80062f0 <osSemaphoreRelease+0x78>
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <osSemaphoreRelease+0x84>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	e00b      	b.n	80062f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f000 fc86 	bl	8006bf0 <xQueueGenericSend>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d002      	beq.n	80062f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80062ea:	f06f 0302 	mvn.w	r3, #2
 80062ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80062f0:	697b      	ldr	r3, [r7, #20]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006310:	f3ef 8305 	mrs	r3, IPSR
 8006314:	613b      	str	r3, [r7, #16]
  return(result);
 8006316:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006318:	2b00      	cmp	r3, #0
 800631a:	d15f      	bne.n	80063dc <osMessageQueueNew+0xdc>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d05c      	beq.n	80063dc <osMessageQueueNew+0xdc>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d059      	beq.n	80063dc <osMessageQueueNew+0xdc>
    mem = -1;
 8006328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800632c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d029      	beq.n	8006388 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d012      	beq.n	8006362 <osMessageQueueNew+0x62>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b4f      	cmp	r3, #79	; 0x4f
 8006342:	d90e      	bls.n	8006362 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <osMessageQueueNew+0x62>
        mem = 1;
 800635c:	2301      	movs	r3, #1
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e014      	b.n	800638c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <osMessageQueueNew+0x8c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006376:	2b00      	cmp	r3, #0
 8006378:	d108      	bne.n	800638c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <osMessageQueueNew+0x8c>
          mem = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e001      	b.n	800638c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10b      	bne.n	80063aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2100      	movs	r1, #0
 800639c:	9100      	str	r1, [sp, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fa2f 	bl	8006804 <xQueueGenericCreateStatic>
 80063a6:	61f8      	str	r0, [r7, #28]
 80063a8:	e008      	b.n	80063bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d105      	bne.n	80063bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80063b0:	2200      	movs	r2, #0
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa9d 	bl	80068f4 <xQueueGenericCreate>
 80063ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e001      	b.n	80063d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80063d4:	6979      	ldr	r1, [r7, #20]
 80063d6:	69f8      	ldr	r0, [r7, #28]
 80063d8:	f001 f9e8 	bl	80077ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80063dc:	69fb      	ldr	r3, [r7, #28]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006400:	f3ef 8305 	mrs	r3, IPSR
 8006404:	617b      	str	r3, [r7, #20]
  return(result);
 8006406:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <osMessageQueuePut+0x36>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <osMessageQueuePut+0x36>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800641e:	f06f 0303 	mvn.w	r3, #3
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e038      	b.n	8006498 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800642a:	f107 0210 	add.w	r2, r7, #16
 800642e:	2300      	movs	r3, #0
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f000 fcda 	bl	8006dec <xQueueGenericSendFromISR>
 8006438:	4603      	mov	r3, r0
 800643a:	2b01      	cmp	r3, #1
 800643c:	d003      	beq.n	8006446 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800643e:	f06f 0302 	mvn.w	r3, #2
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e028      	b.n	8006498 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d025      	beq.n	8006498 <osMessageQueuePut+0xb0>
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <osMessageQueuePut+0xbc>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	e01c      	b.n	8006498 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <osMessageQueuePut+0x82>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800646a:	f06f 0303 	mvn.w	r3, #3
 800646e:	61fb      	str	r3, [r7, #28]
 8006470:	e012      	b.n	8006498 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006472:	2300      	movs	r3, #0
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	69b8      	ldr	r0, [r7, #24]
 800647a:	f000 fbb9 	bl	8006bf0 <xQueueGenericSend>
 800647e:	4603      	mov	r3, r0
 8006480:	2b01      	cmp	r3, #1
 8006482:	d009      	beq.n	8006498 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800648a:	f06f 0301 	mvn.w	r3, #1
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e002      	b.n	8006498 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006492:	f06f 0302 	mvn.w	r3, #2
 8006496:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006498:	69fb      	ldr	r3, [r7, #28]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064be:	f3ef 8305 	mrs	r3, IPSR
 80064c2:	617b      	str	r3, [r7, #20]
  return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d028      	beq.n	800651c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <osMessageQueueGet+0x34>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <osMessageQueueGet+0x34>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80064dc:	f06f 0303 	mvn.w	r3, #3
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	e037      	b.n	8006554 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	461a      	mov	r2, r3
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	69b8      	ldr	r0, [r7, #24]
 80064f2:	f000 ff8f 	bl	8007414 <xQueueReceiveFromISR>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d003      	beq.n	8006504 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80064fc:	f06f 0302 	mvn.w	r3, #2
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e027      	b.n	8006554 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d024      	beq.n	8006554 <osMessageQueueGet+0xac>
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <osMessageQueueGet+0xb8>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e01b      	b.n	8006554 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <osMessageQueueGet+0x80>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006528:	f06f 0303 	mvn.w	r3, #3
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e011      	b.n	8006554 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f000 fd81 	bl	800703c <xQueueReceive>
 800653a:	4603      	mov	r3, r0
 800653c:	2b01      	cmp	r3, #1
 800653e:	d009      	beq.n	8006554 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006546:	f06f 0301 	mvn.w	r3, #1
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	e002      	b.n	8006554 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800654e:	f06f 0302 	mvn.w	r3, #2
 8006552:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006554:	69fb      	ldr	r3, [r7, #28]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a07      	ldr	r2, [pc, #28]	; (8006590 <vApplicationGetIdleTaskMemory+0x2c>)
 8006574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4a06      	ldr	r2, [pc, #24]	; (8006594 <vApplicationGetIdleTaskMemory+0x30>)
 800657a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20003534 	.word	0x20003534
 8006594:	200035f0 	.word	0x200035f0

08006598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80065a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4a06      	ldr	r2, [pc, #24]	; (80065c8 <vApplicationGetTimerTaskMemory+0x30>)
 80065ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b6:	601a      	str	r2, [r3, #0]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	200037f0 	.word	0x200037f0
 80065c8:	200038ac 	.word	0x200038ac

080065cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f103 0208 	add.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f103 0208 	add.w	r2, r3, #8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f103 0208 	add.w	r2, r3, #8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006684:	d103      	bne.n	800668e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	e00c      	b.n	80066a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3308      	adds	r3, #8
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e002      	b.n	800669c <vListInsert+0x2e>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d2f6      	bcs.n	8006696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6892      	ldr	r2, [r2, #8]
 80066f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6852      	ldr	r2, [r2, #4]
 8006700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d103      	bne.n	8006714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1e5a      	subs	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800675e:	f002 fd71 	bl	8009244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	3b01      	subs	r3, #1
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d114      	bne.n	80067de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01a      	beq.n	80067f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3310      	adds	r3, #16
 80067c0:	4618      	mov	r0, r3
 80067c2:	f001 fd13 	bl	80081ec <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <xQueueGenericReset+0xcc>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	e009      	b.n	80067f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3310      	adds	r3, #16
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fef2 	bl	80065cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3324      	adds	r3, #36	; 0x24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff feed 	bl	80065cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067f2:	f002 fd57 	bl	80092a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067f6:	2301      	movs	r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <xQueueGenericCreateStatic+0x52>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <xQueueGenericCreateStatic+0x56>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <xQueueGenericCreateStatic+0x58>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	623b      	str	r3, [r7, #32]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <xQueueGenericCreateStatic+0x7e>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <xQueueGenericCreateStatic+0x82>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericCreateStatic+0x84>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068a2:	2350      	movs	r3, #80	; 0x50
 80068a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b50      	cmp	r3, #80	; 0x50
 80068aa:	d00a      	beq.n	80068c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	61bb      	str	r3, [r7, #24]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4613      	mov	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f83f 	bl	8006968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3730      	adds	r7, #48	; 0x30
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	613b      	str	r3, [r7, #16]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3350      	adds	r3, #80	; 0x50
 800692c:	4618      	mov	r0, r3
 800692e:	f002 fdab 	bl	8009488 <pvPortMalloc>
 8006932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	3350      	adds	r3, #80	; 0x50
 8006942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800694c:	79fa      	ldrb	r2, [r7, #7]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f805 	bl	8006968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800695e:	69bb      	ldr	r3, [r7, #24]
	}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006996:	2101      	movs	r1, #1
 8006998:	69b8      	ldr	r0, [r7, #24]
 800699a:	f7ff fecb 	bl	8006734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069a6:	bf00      	nop
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00e      	beq.n	80069da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f90b 	bl	8006bf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069ec:	2301      	movs	r3, #1
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6939      	ldr	r1, [r7, #16]
 80069fa:	6978      	ldr	r0, [r7, #20]
 80069fc:	f7ff ff7a 	bl	80068f4 <xQueueGenericCreate>
 8006a00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ffd3 	bl	80069ae <prvInitialiseMutex>

		return xNewQueue;
 8006a08:	68fb      	ldr	r3, [r7, #12]
	}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af02      	add	r7, sp, #8
 8006a18:	4603      	mov	r3, r0
 8006a1a:	6039      	str	r1, [r7, #0]
 8006a1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	6939      	ldr	r1, [r7, #16]
 8006a30:	6978      	ldr	r0, [r7, #20]
 8006a32:	f7ff fee7 	bl	8006804 <xQueueGenericCreateStatic>
 8006a36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff ffb8 	bl	80069ae <prvInitialiseMutex>

		return xNewQueue;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60fb      	str	r3, [r7, #12]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	689c      	ldr	r4, [r3, #8]
 8006a74:	f001 fd7c 	bl	8008570 <xTaskGetCurrentTaskHandle>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d111      	bne.n	8006aa2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006a90:	2300      	movs	r3, #0
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	6938      	ldr	r0, [r7, #16]
 8006a98:	f000 f8aa 	bl	8006bf0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e001      	b.n	8006aa6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006aa6:	697b      	ldr	r3, [r7, #20]
	}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}

08006ab0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	60fb      	str	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	689c      	ldr	r4, [r3, #8]
 8006ade:	f001 fd47 	bl	8008570 <xTaskGetCurrentTaskHandle>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d107      	bne.n	8006af8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e00c      	b.n	8006b12 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6938      	ldr	r0, [r7, #16]
 8006afc:	f000 fb7e 	bl	80071fc <xQueueSemaphoreTake>
 8006b00:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006b12:	697b      	ldr	r3, [r7, #20]
	}
 8006b14:	4618      	mov	r0, r3
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd90      	pop	{r4, r7, pc}

08006b1c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	; 0x28
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	61bb      	str	r3, [r7, #24]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d90a      	bls.n	8006b62 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	617b      	str	r3, [r7, #20]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b62:	2302      	movs	r3, #2
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fe49 	bl	8006804 <xQueueGenericCreateStatic>
 8006b72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b80:	69fb      	ldr	r3, [r7, #28]
	}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	613b      	str	r3, [r7, #16]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d90a      	bls.n	8006bce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006bce:	2202      	movs	r2, #2
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fe8e 	bl	80068f4 <xQueueGenericCreate>
 8006bd8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006be6:	697b      	ldr	r3, [r7, #20]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueGenericSend+0x32>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <xQueueGenericSend+0x40>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <xQueueGenericSend+0x44>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <xQueueGenericSend+0x46>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xQueueGenericSend+0x60>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x6e>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSend+0x72>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSend+0x74>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7e:	f001 fc87 	bl	8008590 <xTaskGetSchedulerState>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <xQueueGenericSend+0x9e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <xQueueGenericSend+0xa2>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <xQueueGenericSend+0xa4>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <xQueueGenericSend+0xbe>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	61fb      	str	r3, [r7, #28]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cae:	f002 fac9 	bl	8009244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <xQueueGenericSend+0xd4>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d129      	bne.n	8006d18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cca:	f000 fc5e 	bl	800758a <prvCopyDataToQueue>
 8006cce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fa85 	bl	80081ec <xTaskRemoveFromEventList>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	e00a      	b.n	8006d10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d00:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d10:	f002 fac8 	bl	80092a4 <vPortExitCritical>
				return pdPASS;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e063      	b.n	8006de0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d1e:	f002 fac1 	bl	80092a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e05c      	b.n	8006de0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fabf 	bl	80082b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3a:	f002 fab3 	bl	80092a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d3e:	f001 f819 	bl	8007d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d42:	f002 fa7f 	bl	8009244 <vPortEnterCritical>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d4c:	b25b      	sxtb	r3, r3
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d52:	d103      	bne.n	8006d5c <xQueueGenericSend+0x16c>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d68:	d103      	bne.n	8006d72 <xQueueGenericSend+0x182>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d72:	f002 fa97 	bl	80092a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d76:	1d3a      	adds	r2, r7, #4
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 faae 	bl	80082e0 <xTaskCheckForTimeOut>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d124      	bne.n	8006dd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d8c:	f000 fcf5 	bl	800777a <prvIsQueueFull>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	3310      	adds	r3, #16
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f9d4 	bl	800814c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da6:	f000 fc80 	bl	80076aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006daa:	f000 fff1 	bl	8007d90 <xTaskResumeAll>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f af7c 	bne.w	8006cae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	e772      	b.n	8006cae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dca:	f000 fc6e 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dce:	f000 ffdf 	bl	8007d90 <xTaskResumeAll>
 8006dd2:	e76c      	b.n	8006cae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd6:	f000 fc68 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dda:	f000 ffd9 	bl	8007d90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3738      	adds	r7, #56	; 0x38
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b090      	sub	sp, #64	; 0x40
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <xQueueGenericSendFromISR+0x3c>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <xQueueGenericSendFromISR+0x40>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <xQueueGenericSendFromISR+0x42>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSendFromISR+0x6a>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <xQueueGenericSendFromISR+0x6e>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <xQueueGenericSendFromISR+0x70>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	623b      	str	r3, [r7, #32]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e76:	f002 fac7 	bl	8009408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61fa      	str	r2, [r7, #28]
 8006e90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <xQueueGenericSendFromISR+0xbc>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d12f      	bne.n	8006f08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ebe:	f000 fb64 	bl	800758a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eca:	d112      	bne.n	8006ef2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d016      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f987 	bl	80081ec <xTaskRemoveFromEventList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e007      	b.n	8006f02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	b25a      	sxtb	r2, r3
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f02:	2301      	movs	r3, #1
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f06:	e001      	b.n	8006f0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3740      	adds	r7, #64	; 0x40
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b08e      	sub	sp, #56	; 0x38
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	623b      	str	r3, [r7, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61fb      	str	r3, [r7, #28]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <xQueueGiveFromISR+0x58>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <xQueueGiveFromISR+0x5c>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <xQueueGiveFromISR+0x5e>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	61bb      	str	r3, [r7, #24]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f9a:	f002 fa35 	bl	8009408 <vPortValidateInterruptPriority>
	__asm volatile
 8006f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	617a      	str	r2, [r7, #20]
 8006fb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006fb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d22b      	bcs.n	8007022 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe4:	d112      	bne.n	800700c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d016      	beq.n	800701c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f8fa 	bl	80081ec <xTaskRemoveFromEventList>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00e      	beq.n	800701c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e007      	b.n	800701c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800700c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007010:	3301      	adds	r3, #1
 8007012:	b2db      	uxtb	r3, r3
 8007014:	b25a      	sxtb	r2, r3
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800701c:	2301      	movs	r3, #1
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
 8007020:	e001      	b.n	8007026 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007022:	2300      	movs	r3, #0
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f383 8811 	msr	BASEPRI, r3
}
 8007030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007034:	4618      	mov	r0, r3
 8007036:	3738      	adds	r7, #56	; 0x38
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08c      	sub	sp, #48	; 0x30
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007048:	2300      	movs	r3, #0
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10a      	bne.n	800706c <xQueueReceive+0x30>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	623b      	str	r3, [r7, #32]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <xQueueReceive+0x3e>
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <xQueueReceive+0x42>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <xQueueReceive+0x44>
 800707e:	2300      	movs	r3, #0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <xQueueReceive+0x5e>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	61fb      	str	r3, [r7, #28]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800709a:	f001 fa79 	bl	8008590 <xTaskGetSchedulerState>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <xQueueReceive+0x6e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <xQueueReceive+0x72>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueReceive+0x74>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueReceive+0x8e>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	61bb      	str	r3, [r7, #24]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ca:	f002 f8bb 	bl	8009244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01f      	beq.n	800711a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f000 fabe 	bl	800765e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	1e5a      	subs	r2, r3, #1
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	3310      	adds	r3, #16
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 f878 	bl	80081ec <xTaskRemoveFromEventList>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007102:	4b3d      	ldr	r3, [pc, #244]	; (80071f8 <xQueueReceive+0x1bc>)
 8007104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007112:	f002 f8c7 	bl	80092a4 <vPortExitCritical>
				return pdPASS;
 8007116:	2301      	movs	r3, #1
 8007118:	e069      	b.n	80071ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007120:	f002 f8c0 	bl	80092a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007124:	2300      	movs	r3, #0
 8007126:	e062      	b.n	80071ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	4618      	mov	r0, r3
 8007134:	f001 f8be 	bl	80082b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007138:	2301      	movs	r3, #1
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713c:	f002 f8b2 	bl	80092a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007140:	f000 fe18 	bl	8007d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007144:	f002 f87e 	bl	8009244 <vPortEnterCritical>
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714e:	b25b      	sxtb	r3, r3
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007154:	d103      	bne.n	800715e <xQueueReceive+0x122>
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007164:	b25b      	sxtb	r3, r3
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716a:	d103      	bne.n	8007174 <xQueueReceive+0x138>
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007174:	f002 f896 	bl	80092a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007178:	1d3a      	adds	r2, r7, #4
 800717a:	f107 0310 	add.w	r3, r7, #16
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f001 f8ad 	bl	80082e0 <xTaskCheckForTimeOut>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d123      	bne.n	80071d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718e:	f000 fade 	bl	800774e <prvIsQueueEmpty>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4611      	mov	r1, r2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 ffd3 	bl	800814c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a8:	f000 fa7f 	bl	80076aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ac:	f000 fdf0 	bl	8007d90 <xTaskResumeAll>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d189      	bne.n	80070ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <xQueueReceive+0x1bc>)
 80071b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	e780      	b.n	80070ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ca:	f000 fa6e 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ce:	f000 fddf 	bl	8007d90 <xTaskResumeAll>
 80071d2:	e77a      	b.n	80070ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f000 fa68 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071da:	f000 fdd9 	bl	8007d90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e0:	f000 fab5 	bl	800774e <prvIsQueueEmpty>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f43f af6f 	beq.w	80070ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	; 0x38
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800720e:	2300      	movs	r3, #0
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	623b      	str	r3, [r7, #32]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	61fb      	str	r3, [r7, #28]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800724c:	f001 f9a0 	bl	8008590 <xTaskGetSchedulerState>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <xQueueSemaphoreTake+0x60>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <xQueueSemaphoreTake+0x64>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <xQueueSemaphoreTake+0x66>
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	61bb      	str	r3, [r7, #24]
}
 8007278:	bf00      	nop
 800727a:	e7fe      	b.n	800727a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800727c:	f001 ffe2 	bl	8009244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	d024      	beq.n	80072d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	1e5a      	subs	r2, r3, #1
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800729c:	f001 faee 	bl	800887c <pvTaskIncrementMutexHeldCount>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00f      	beq.n	80072ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 ff9a 	bl	80081ec <xTaskRemoveFromEventList>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <xQueueSemaphoreTake+0x214>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072ce:	f001 ffe9 	bl	80092a4 <vPortExitCritical>
				return pdPASS;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e097      	b.n	8007406 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d111      	bne.n	8007300 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	617b      	str	r3, [r7, #20]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072f8:	f001 ffd4 	bl	80092a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e082      	b.n	8007406 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	4618      	mov	r0, r3
 800730c:	f000 ffd2 	bl	80082b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007314:	f001 ffc6 	bl	80092a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007318:	f000 fd2c 	bl	8007d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800731c:	f001 ff92 	bl	8009244 <vPortEnterCritical>
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007326:	b25b      	sxtb	r3, r3
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732c:	d103      	bne.n	8007336 <xQueueSemaphoreTake+0x13a>
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733c:	b25b      	sxtb	r3, r3
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007342:	d103      	bne.n	800734c <xQueueSemaphoreTake+0x150>
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800734c:	f001 ffaa 	bl	80092a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007350:	463a      	mov	r2, r7
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f000 ffc1 	bl	80082e0 <xTaskCheckForTimeOut>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d132      	bne.n	80073ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007366:	f000 f9f2 	bl	800774e <prvIsQueueEmpty>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d026      	beq.n	80073be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007378:	f001 ff64 	bl	8009244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f923 	bl	80085cc <xTaskPriorityInherit>
 8007386:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007388:	f001 ff8c 	bl	80092a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fed9 	bl	800814c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800739a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800739c:	f000 f985 	bl	80076aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073a0:	f000 fcf6 	bl	8007d90 <xTaskResumeAll>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f47f af68 	bne.w	800727c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <xQueueSemaphoreTake+0x214>)
 80073ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	e75e      	b.n	800727c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073c0:	f000 f973 	bl	80076aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c4:	f000 fce4 	bl	8007d90 <xTaskResumeAll>
 80073c8:	e758      	b.n	800727c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073cc:	f000 f96d 	bl	80076aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d0:	f000 fcde 	bl	8007d90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d6:	f000 f9ba 	bl	800774e <prvIsQueueEmpty>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f43f af4d 	beq.w	800727c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00d      	beq.n	8007404 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073e8:	f001 ff2c 	bl	8009244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ee:	f000 f8b4 	bl	800755a <prvGetDisinheritPriorityAfterTimeout>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 f9bc 	bl	8008778 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007400:	f001 ff50 	bl	80092a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007406:	4618      	mov	r0, r3
 8007408:	3738      	adds	r7, #56	; 0x38
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	623b      	str	r3, [r7, #32]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <xQueueReceiveFromISR+0x3a>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <xQueueReceiveFromISR+0x3e>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueReceiveFromISR+0x40>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	61fb      	str	r3, [r7, #28]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800746e:	f001 ffcb 	bl	8009408 <vPortValidateInterruptPriority>
	__asm volatile
 8007472:	f3ef 8211 	mrs	r2, BASEPRI
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	61ba      	str	r2, [r7, #24]
 8007488:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800748a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d02f      	beq.n	80074fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074a8:	f000 f8d9 	bl	800765e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074bc:	d112      	bne.n	80074e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	3310      	adds	r3, #16
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fe8e 	bl	80081ec <xTaskRemoveFromEventList>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00e      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e007      	b.n	80074f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e8:	3301      	adds	r3, #1
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	b25a      	sxtb	r2, r3
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074f4:	2301      	movs	r3, #1
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
 80074f8:	e001      	b.n	80074fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f383 8811 	msr	BASEPRI, r3
}
 8007508:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800750c:	4618      	mov	r0, r3
 800750e:	3738      	adds	r7, #56	; 0x38
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <vQueueDelete+0x28>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60bb      	str	r3, [r7, #8]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f95f 	bl	8007800 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f002 f867 	bl	8009620 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e001      	b.n	800757c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800757c:	68fb      	ldr	r3, [r7, #12]
	}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d14d      	bne.n	800764c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f871 	bl	800869c <xTaskPriorityDisinherit>
 80075ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
 80075c2:	e043      	b.n	800764c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d119      	bne.n	80075fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6858      	ldr	r0, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	461a      	mov	r2, r3
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	f00f fa3c 	bl	8016a52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	441a      	add	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d32b      	bcc.n	800764c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	e026      	b.n	800764c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68d8      	ldr	r0, [r3, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	461a      	mov	r2, r3
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	f00f fa22 	bl	8016a52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	425b      	negs	r3, r3
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d207      	bcs.n	800763a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	425b      	negs	r3, r3
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d105      	bne.n	800764c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007654:	697b      	ldr	r3, [r7, #20]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d018      	beq.n	80076a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	441a      	add	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	d303      	bcc.n	8007692 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68d9      	ldr	r1, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	461a      	mov	r2, r3
 800769c:	6838      	ldr	r0, [r7, #0]
 800769e:	f00f f9d8 	bl	8016a52 <memcpy>
	}
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076b2:	f001 fdc7 	bl	8009244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076be:	e011      	b.n	80076e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d012      	beq.n	80076ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3324      	adds	r3, #36	; 0x24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fd8d 	bl	80081ec <xTaskRemoveFromEventList>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076d8:	f000 fe64 	bl	80083a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	3b01      	subs	r3, #1
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dce9      	bgt.n	80076c0 <prvUnlockQueue+0x16>
 80076ec:	e000      	b.n	80076f0 <prvUnlockQueue+0x46>
					break;
 80076ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	22ff      	movs	r2, #255	; 0xff
 80076f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076f8:	f001 fdd4 	bl	80092a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076fc:	f001 fda2 	bl	8009244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007706:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007708:	e011      	b.n	800772e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d012      	beq.n	8007738 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3310      	adds	r3, #16
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fd68 	bl	80081ec <xTaskRemoveFromEventList>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007722:	f000 fe3f 	bl	80083a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	3b01      	subs	r3, #1
 800772a:	b2db      	uxtb	r3, r3
 800772c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800772e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007732:	2b00      	cmp	r3, #0
 8007734:	dce9      	bgt.n	800770a <prvUnlockQueue+0x60>
 8007736:	e000      	b.n	800773a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007738:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007742:	f001 fdaf 	bl	80092a4 <vPortExitCritical>
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007756:	f001 fd75 	bl	8009244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e001      	b.n	800776c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800776c:	f001 fd9a 	bl	80092a4 <vPortExitCritical>

	return xReturn;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007782:	f001 fd5f 	bl	8009244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	429a      	cmp	r2, r3
 8007790:	d102      	bne.n	8007798 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007792:	2301      	movs	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e001      	b.n	800779c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f001 fd82 	bl	80092a4 <vPortExitCritical>

	return xReturn;
 80077a0:	68fb      	ldr	r3, [r7, #12]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e014      	b.n	80077e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077bc:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077c8:	490c      	ldr	r1, [pc, #48]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <vQueueAddToRegistry+0x50>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4413      	add	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077de:	e006      	b.n	80077ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	d9e7      	bls.n	80077bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20011290 	.word	0x20011290

08007800 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e016      	b.n	800783c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800780e:	4a10      	ldr	r2, [pc, #64]	; (8007850 <vQueueUnregisterQueue+0x50>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d10b      	bne.n	8007836 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800781e:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <vQueueUnregisterQueue+0x50>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2100      	movs	r1, #0
 8007824:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <vQueueUnregisterQueue+0x50>)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]
				break;
 8007834:	e006      	b.n	8007844 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3301      	adds	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b07      	cmp	r3, #7
 8007840:	d9e5      	bls.n	800780e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20011290 	.word	0x20011290

08007854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007864:	f001 fcee 	bl	8009244 <vPortEnterCritical>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786e:	b25b      	sxtb	r3, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007874:	d103      	bne.n	800787e <vQueueWaitForMessageRestricted+0x2a>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007884:	b25b      	sxtb	r3, r3
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788a:	d103      	bne.n	8007894 <vQueueWaitForMessageRestricted+0x40>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	f001 fd06 	bl	80092a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fc73 	bl	8008194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f7ff fefb 	bl	80076aa <prvUnlockQueue>
	}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	623b      	str	r3, [r7, #32]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <xTaskCreateStatic+0x46>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61fb      	str	r3, [r7, #28]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007902:	23bc      	movs	r3, #188	; 0xbc
 8007904:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2bbc      	cmp	r3, #188	; 0xbc
 800790a:	d00a      	beq.n	8007922 <xTaskCreateStatic+0x66>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007922:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d01e      	beq.n	8007968 <xTaskCreateStatic+0xac>
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007938:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2202      	movs	r2, #2
 800793e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007942:	2300      	movs	r3, #0
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f850 	bl	8007a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007962:	f000 f8f3 	bl	8007b4c <prvAddNewTaskToReadyList>
 8007966:	e001      	b.n	800796c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800796c:	697b      	ldr	r3, [r7, #20]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3728      	adds	r7, #40	; 0x28
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007976:	b580      	push	{r7, lr}
 8007978:	b08c      	sub	sp, #48	; 0x30
 800797a:	af04      	add	r7, sp, #16
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fd7c 	bl	8009488 <pvPortMalloc>
 8007990:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007998:	20bc      	movs	r0, #188	; 0xbc
 800799a:	f001 fd75 	bl	8009488 <pvPortMalloc>
 800799e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
 80079ac:	e005      	b.n	80079ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ae:	6978      	ldr	r0, [r7, #20]
 80079b0:	f001 fe36 	bl	8009620 <vPortFree>
 80079b4:	e001      	b.n	80079ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079c8:	88fa      	ldrh	r2, [r7, #6]
 80079ca:	2300      	movs	r3, #0
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	9302      	str	r3, [sp, #8]
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f80e 	bl	8007a00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079e4:	69f8      	ldr	r0, [r7, #28]
 80079e6:	f000 f8b1 	bl	8007b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079ea:	2301      	movs	r3, #1
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	e002      	b.n	80079f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079f6:	69bb      	ldr	r3, [r7, #24]
	}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	461a      	mov	r2, r3
 8007a18:	21a5      	movs	r1, #165	; 0xa5
 8007a1a:	f00f f842 	bl	8016aa2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f023 0307 	bic.w	r3, r3, #7
 8007a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	617b      	str	r3, [r7, #20]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01f      	beq.n	8007a9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e012      	b.n	8007a8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	7819      	ldrb	r1, [r3, #0]
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	3334      	adds	r3, #52	; 0x34
 8007a74:	460a      	mov	r2, r1
 8007a76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b0f      	cmp	r3, #15
 8007a8e:	d9e9      	bls.n	8007a64 <prvInitialiseNewTask+0x64>
 8007a90:	e000      	b.n	8007a94 <prvInitialiseNewTask+0x94>
			{
				break;
 8007a92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a9c:	e003      	b.n	8007aa6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	2b37      	cmp	r3, #55	; 0x37
 8007aaa:	d901      	bls.n	8007ab0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007aac:	2337      	movs	r3, #55	; 0x37
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fda0 	bl	800660c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fd9b 	bl	800660c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	3354      	adds	r3, #84	; 0x54
 8007b00:	2260      	movs	r2, #96	; 0x60
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f00e ffcc 	bl	8016aa2 <memset>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	4a0c      	ldr	r2, [pc, #48]	; (8007b40 <prvInitialiseNewTask+0x140>)
 8007b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	4a0c      	ldr	r2, [pc, #48]	; (8007b44 <prvInitialiseNewTask+0x144>)
 8007b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	4a0b      	ldr	r2, [pc, #44]	; (8007b48 <prvInitialiseNewTask+0x148>)
 8007b1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	69b8      	ldr	r0, [r7, #24]
 8007b22:	f001 fa61 	bl	8008fe8 <pxPortInitialiseStack>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b38:	bf00      	nop
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08022cac 	.word	0x08022cac
 8007b44:	08022ccc 	.word	0x08022ccc
 8007b48:	08022c8c 	.word	0x08022c8c

08007b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b54:	f001 fb76 	bl	8009244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b58:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	4a2c      	ldr	r2, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b62:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d110      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b78:	f000 fc38 	bl	80083ec <prvInitialiseTaskLists>
 8007b7c:	e00d      	b.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b86:	4b23      	ldr	r3, [pc, #140]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d802      	bhi.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b9a:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d903      	bls.n	8007bc0 <prvAddNewTaskToReadyList+0x74>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <prvAddNewTaskToReadyList+0xd8>)
 8007bce:	441a      	add	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fd25 	bl	8006626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bdc:	f001 fb62 	bl	80092a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d207      	bcs.n	8007c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvAddNewTaskToReadyList+0xdc>)
 8007bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20004180 	.word	0x20004180
 8007c14:	20003cac 	.word	0x20003cac
 8007c18:	2000418c 	.word	0x2000418c
 8007c1c:	2000419c 	.word	0x2000419c
 8007c20:	20004188 	.word	0x20004188
 8007c24:	20003cb0 	.word	0x20003cb0
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d017      	beq.n	8007c6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <vTaskDelay+0x60>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <vTaskDelay+0x30>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60bb      	str	r3, [r7, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c5c:	f000 f88a 	bl	8007d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fe1e 	bl	80088a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c68:	f000 f892 	bl	8007d90 <xTaskResumeAll>
 8007c6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <vTaskDelay+0x64>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	200041a8 	.word	0x200041a8
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	1d39      	adds	r1, r7, #4
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fc5a 	bl	8006564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	9202      	str	r2, [sp, #8]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	460a      	mov	r2, r1
 8007cc2:	4924      	ldr	r1, [pc, #144]	; (8007d54 <vTaskStartScheduler+0xc0>)
 8007cc4:	4824      	ldr	r0, [pc, #144]	; (8007d58 <vTaskStartScheduler+0xc4>)
 8007cc6:	f7ff fdf9 	bl	80078bc <xTaskCreateStatic>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4a23      	ldr	r2, [pc, #140]	; (8007d5c <vTaskStartScheduler+0xc8>)
 8007cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cd0:	4b22      	ldr	r3, [pc, #136]	; (8007d5c <vTaskStartScheduler+0xc8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e001      	b.n	8007ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d102      	bne.n	8007cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ce8:	f000 fe30 	bl	800894c <xTimerCreateTimerTask>
 8007cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d11b      	bne.n	8007d2c <vTaskStartScheduler+0x98>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d08:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <vTaskStartScheduler+0xcc>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3354      	adds	r3, #84	; 0x54
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <vTaskStartScheduler+0xd0>)
 8007d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <vTaskStartScheduler+0xd4>)
 8007d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d1a:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <vTaskStartScheduler+0xd8>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <vTaskStartScheduler+0xdc>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d26:	f001 f9eb 	bl	8009100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d2a:	e00e      	b.n	8007d4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d32:	d10a      	bne.n	8007d4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60fb      	str	r3, [r7, #12]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <vTaskStartScheduler+0xb4>
}
 8007d4a:	bf00      	nop
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	08018890 	.word	0x08018890
 8007d58:	080083bd 	.word	0x080083bd
 8007d5c:	200041a4 	.word	0x200041a4
 8007d60:	20003cac 	.word	0x20003cac
 8007d64:	200004b4 	.word	0x200004b4
 8007d68:	200041a0 	.word	0x200041a0
 8007d6c:	2000418c 	.word	0x2000418c
 8007d70:	20004184 	.word	0x20004184

08007d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <vTaskSuspendAll+0x18>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	4a03      	ldr	r2, [pc, #12]	; (8007d8c <vTaskSuspendAll+0x18>)
 8007d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	200041a8 	.word	0x200041a8

08007d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d9e:	4b42      	ldr	r3, [pc, #264]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dbc:	f001 fa42 	bl	8009244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dc0:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4a38      	ldr	r2, [pc, #224]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b37      	ldr	r3, [pc, #220]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d162      	bne.n	8007e98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dd2:	4b36      	ldr	r3, [pc, #216]	; (8007eac <xTaskResumeAll+0x11c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d05e      	beq.n	8007e98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dda:	e02f      	b.n	8007e3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ddc:	4b34      	ldr	r3, [pc, #208]	; (8007eb0 <xTaskResumeAll+0x120>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3318      	adds	r3, #24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fc79 	bl	80066e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fc74 	bl	80066e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <xTaskResumeAll+0x124>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskResumeAll+0x7c>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <xTaskResumeAll+0x124>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <xTaskResumeAll+0x128>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe fbff 	bl	8006626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <xTaskResumeAll+0x12c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e36:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <xTaskResumeAll+0x120>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1cb      	bne.n	8007ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e4a:	f000 fb71 	bl	8008530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <xTaskResumeAll+0x134>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e5a:	f000 f859 	bl	8007f10 <xTaskIncrementTick>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e64:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f1      	bne.n	8007e5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <xTaskResumeAll+0x134>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e88:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <xTaskResumeAll+0x138>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e98:	f001 fa04 	bl	80092a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200041a8 	.word	0x200041a8
 8007eac:	20004180 	.word	0x20004180
 8007eb0:	20004140 	.word	0x20004140
 8007eb4:	20004188 	.word	0x20004188
 8007eb8:	20003cb0 	.word	0x20003cb0
 8007ebc:	20003cac 	.word	0x20003cac
 8007ec0:	20004194 	.word	0x20004194
 8007ec4:	20004190 	.word	0x20004190
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <xTaskGetTickCount+0x1c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ed8:	687b      	ldr	r3, [r7, #4]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20004184 	.word	0x20004184

08007eec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ef2:	f001 fa89 	bl	8009408 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007efa:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <xTaskGetTickCountFromISR+0x20>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f00:	683b      	ldr	r3, [r7, #0]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20004184 	.word	0x20004184

08007f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f1a:	4b4f      	ldr	r3, [pc, #316]	; (8008058 <xTaskIncrementTick+0x148>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f040 808f 	bne.w	8008042 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f24:	4b4d      	ldr	r3, [pc, #308]	; (800805c <xTaskIncrementTick+0x14c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f2c:	4a4b      	ldr	r2, [pc, #300]	; (800805c <xTaskIncrementTick+0x14c>)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d120      	bne.n	8007f7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f38:	4b49      	ldr	r3, [pc, #292]	; (8008060 <xTaskIncrementTick+0x150>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	603b      	str	r3, [r7, #0]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <xTaskIncrementTick+0x46>
 8007f58:	4b41      	ldr	r3, [pc, #260]	; (8008060 <xTaskIncrementTick+0x150>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4b41      	ldr	r3, [pc, #260]	; (8008064 <xTaskIncrementTick+0x154>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a3f      	ldr	r2, [pc, #252]	; (8008060 <xTaskIncrementTick+0x150>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	4a3f      	ldr	r2, [pc, #252]	; (8008064 <xTaskIncrementTick+0x154>)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4b3e      	ldr	r3, [pc, #248]	; (8008068 <xTaskIncrementTick+0x158>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a3d      	ldr	r2, [pc, #244]	; (8008068 <xTaskIncrementTick+0x158>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	f000 fadb 	bl	8008530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f7a:	4b3c      	ldr	r3, [pc, #240]	; (800806c <xTaskIncrementTick+0x15c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d349      	bcc.n	8008018 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f84:	4b36      	ldr	r3, [pc, #216]	; (8008060 <xTaskIncrementTick+0x150>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f8e:	4b37      	ldr	r3, [pc, #220]	; (800806c <xTaskIncrementTick+0x15c>)
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f94:	601a      	str	r2, [r3, #0]
					break;
 8007f96:	e03f      	b.n	8008018 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f98:	4b31      	ldr	r3, [pc, #196]	; (8008060 <xTaskIncrementTick+0x150>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d203      	bcs.n	8007fb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fb0:	4a2e      	ldr	r2, [pc, #184]	; (800806c <xTaskIncrementTick+0x15c>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007fb6:	e02f      	b.n	8008018 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fb8f 	bl	80066e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3318      	adds	r3, #24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fb86 	bl	80066e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd8:	4b25      	ldr	r3, [pc, #148]	; (8008070 <xTaskIncrementTick+0x160>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d903      	bls.n	8007fe8 <xTaskIncrementTick+0xd8>
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4a22      	ldr	r2, [pc, #136]	; (8008070 <xTaskIncrementTick+0x160>)
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <xTaskIncrementTick+0x164>)
 8007ff6:	441a      	add	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	f7fe fb11 	bl	8006626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <xTaskIncrementTick+0x168>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	429a      	cmp	r2, r3
 8008010:	d3b8      	bcc.n	8007f84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008012:	2301      	movs	r3, #1
 8008014:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008016:	e7b5      	b.n	8007f84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008018:	4b17      	ldr	r3, [pc, #92]	; (8008078 <xTaskIncrementTick+0x168>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	4915      	ldr	r1, [pc, #84]	; (8008074 <xTaskIncrementTick+0x164>)
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d901      	bls.n	8008034 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008034:	4b11      	ldr	r3, [pc, #68]	; (800807c <xTaskIncrementTick+0x16c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e004      	b.n	800804c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <xTaskIncrementTick+0x170>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3301      	adds	r3, #1
 8008048:	4a0d      	ldr	r2, [pc, #52]	; (8008080 <xTaskIncrementTick+0x170>)
 800804a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800804c:	697b      	ldr	r3, [r7, #20]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200041a8 	.word	0x200041a8
 800805c:	20004184 	.word	0x20004184
 8008060:	20004138 	.word	0x20004138
 8008064:	2000413c 	.word	0x2000413c
 8008068:	20004198 	.word	0x20004198
 800806c:	200041a0 	.word	0x200041a0
 8008070:	20004188 	.word	0x20004188
 8008074:	20003cb0 	.word	0x20003cb0
 8008078:	20003cac 	.word	0x20003cac
 800807c:	20004194 	.word	0x20004194
 8008080:	20004190 	.word	0x20004190

08008084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800808a:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <vTaskSwitchContext+0xb0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008092:	4b29      	ldr	r3, [pc, #164]	; (8008138 <vTaskSwitchContext+0xb4>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008098:	e046      	b.n	8008128 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800809a:	4b27      	ldr	r3, [pc, #156]	; (8008138 <vTaskSwitchContext+0xb4>)
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a0:	4b26      	ldr	r3, [pc, #152]	; (800813c <vTaskSwitchContext+0xb8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	e010      	b.n	80080ca <vTaskSwitchContext+0x46>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vTaskSwitchContext+0x3e>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	491d      	ldr	r1, [pc, #116]	; (8008140 <vTaskSwitchContext+0xbc>)
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0e4      	beq.n	80080a8 <vTaskSwitchContext+0x24>
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4a15      	ldr	r2, [pc, #84]	; (8008140 <vTaskSwitchContext+0xbc>)
 80080ea:	4413      	add	r3, r2
 80080ec:	60bb      	str	r3, [r7, #8]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	605a      	str	r2, [r3, #4]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3308      	adds	r3, #8
 8008100:	429a      	cmp	r2, r3
 8008102:	d104      	bne.n	800810e <vTaskSwitchContext+0x8a>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	605a      	str	r2, [r3, #4]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	4a0b      	ldr	r2, [pc, #44]	; (8008144 <vTaskSwitchContext+0xc0>)
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	4a08      	ldr	r2, [pc, #32]	; (800813c <vTaskSwitchContext+0xb8>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <vTaskSwitchContext+0xc0>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3354      	adds	r3, #84	; 0x54
 8008124:	4a08      	ldr	r2, [pc, #32]	; (8008148 <vTaskSwitchContext+0xc4>)
 8008126:	6013      	str	r3, [r2, #0]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	200041a8 	.word	0x200041a8
 8008138:	20004194 	.word	0x20004194
 800813c:	20004188 	.word	0x20004188
 8008140:	20003cb0 	.word	0x20003cb0
 8008144:	20003cac 	.word	0x20003cac
 8008148:	200004b4 	.word	0x200004b4

0800814c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60fb      	str	r3, [r7, #12]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <vTaskPlaceOnEventList+0x44>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3318      	adds	r3, #24
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fe fa77 	bl	800666e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008180:	2101      	movs	r1, #1
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f000 fb8e 	bl	80088a4 <prvAddCurrentTaskToDelayedList>
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20003cac 	.word	0x20003cac

08008194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	617b      	str	r3, [r7, #20]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3318      	adds	r3, #24
 80081c2:	4619      	mov	r1, r3
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7fe fa2e 	bl	8006626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f000 fb63 	bl	80088a4 <prvAddCurrentTaskToDelayedList>
	}
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20003cac 	.word	0x20003cac

080081ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60fb      	str	r3, [r7, #12]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3318      	adds	r3, #24
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fa5f 	bl	80066e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008222:	4b1e      	ldr	r3, [pc, #120]	; (800829c <xTaskRemoveFromEventList+0xb0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d11d      	bne.n	8008266 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3304      	adds	r3, #4
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fa56 	bl	80066e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <xTaskRemoveFromEventList+0xb4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d903      	bls.n	8008248 <xTaskRemoveFromEventList+0x5c>
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a16      	ldr	r2, [pc, #88]	; (80082a0 <xTaskRemoveFromEventList+0xb4>)
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <xTaskRemoveFromEventList+0xb8>)
 8008256:	441a      	add	r2, r3
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fe f9e1 	bl	8006626 <vListInsertEnd>
 8008264:	e005      	b.n	8008272 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3318      	adds	r3, #24
 800826a:	4619      	mov	r1, r3
 800826c:	480e      	ldr	r0, [pc, #56]	; (80082a8 <xTaskRemoveFromEventList+0xbc>)
 800826e:	f7fe f9da 	bl	8006626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008276:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <xTaskRemoveFromEventList+0xc0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	429a      	cmp	r2, r3
 800827e:	d905      	bls.n	800828c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008284:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <xTaskRemoveFromEventList+0xc4>)
 8008286:	2201      	movs	r2, #1
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e001      	b.n	8008290 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008290:	697b      	ldr	r3, [r7, #20]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	200041a8 	.word	0x200041a8
 80082a0:	20004188 	.word	0x20004188
 80082a4:	20003cb0 	.word	0x20003cb0
 80082a8:	20004140 	.word	0x20004140
 80082ac:	20003cac 	.word	0x20003cac
 80082b0:	20004194 	.word	0x20004194

080082b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082bc:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <vTaskInternalSetTimeOutState+0x24>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <vTaskInternalSetTimeOutState+0x28>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	605a      	str	r2, [r3, #4]
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20004198 	.word	0x20004198
 80082dc:	20004184 	.word	0x20004184

080082e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008322:	f000 ff8f 	bl	8009244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008326:	4b1d      	ldr	r3, [pc, #116]	; (800839c <xTaskCheckForTimeOut+0xbc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800833e:	d102      	bne.n	8008346 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	61fb      	str	r3, [r7, #28]
 8008344:	e023      	b.n	800838e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <xTaskCheckForTimeOut+0xc0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d007      	beq.n	8008362 <xTaskCheckForTimeOut+0x82>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	429a      	cmp	r2, r3
 800835a:	d302      	bcc.n	8008362 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	61fb      	str	r3, [r7, #28]
 8008360:	e015      	b.n	800838e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	429a      	cmp	r2, r3
 800836a:	d20b      	bcs.n	8008384 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff ff9b 	bl	80082b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	61fb      	str	r3, [r7, #28]
 8008382:	e004      	b.n	800838e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800838e:	f000 ff89 	bl	80092a4 <vPortExitCritical>

	return xReturn;
 8008392:	69fb      	ldr	r3, [r7, #28]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20004184 	.word	0x20004184
 80083a0:	20004198 	.word	0x20004198

080083a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083a8:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <vTaskMissedYield+0x14>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	601a      	str	r2, [r3, #0]
}
 80083ae:	bf00      	nop
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20004194 	.word	0x20004194

080083bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083c4:	f000 f852 	bl	800846c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <prvIdleTask+0x28>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d9f9      	bls.n	80083c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <prvIdleTask+0x2c>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083e0:	e7f0      	b.n	80083c4 <prvIdleTask+0x8>
 80083e2:	bf00      	nop
 80083e4:	20003cb0 	.word	0x20003cb0
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f2:	2300      	movs	r3, #0
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	e00c      	b.n	8008412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4a12      	ldr	r2, [pc, #72]	; (800844c <prvInitialiseTaskLists+0x60>)
 8008404:	4413      	add	r3, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe f8e0 	bl	80065cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3301      	adds	r3, #1
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b37      	cmp	r3, #55	; 0x37
 8008416:	d9ef      	bls.n	80083f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008418:	480d      	ldr	r0, [pc, #52]	; (8008450 <prvInitialiseTaskLists+0x64>)
 800841a:	f7fe f8d7 	bl	80065cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800841e:	480d      	ldr	r0, [pc, #52]	; (8008454 <prvInitialiseTaskLists+0x68>)
 8008420:	f7fe f8d4 	bl	80065cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008424:	480c      	ldr	r0, [pc, #48]	; (8008458 <prvInitialiseTaskLists+0x6c>)
 8008426:	f7fe f8d1 	bl	80065cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800842a:	480c      	ldr	r0, [pc, #48]	; (800845c <prvInitialiseTaskLists+0x70>)
 800842c:	f7fe f8ce 	bl	80065cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008430:	480b      	ldr	r0, [pc, #44]	; (8008460 <prvInitialiseTaskLists+0x74>)
 8008432:	f7fe f8cb 	bl	80065cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <prvInitialiseTaskLists+0x78>)
 8008438:	4a05      	ldr	r2, [pc, #20]	; (8008450 <prvInitialiseTaskLists+0x64>)
 800843a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvInitialiseTaskLists+0x7c>)
 800843e:	4a05      	ldr	r2, [pc, #20]	; (8008454 <prvInitialiseTaskLists+0x68>)
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20003cb0 	.word	0x20003cb0
 8008450:	20004110 	.word	0x20004110
 8008454:	20004124 	.word	0x20004124
 8008458:	20004140 	.word	0x20004140
 800845c:	20004154 	.word	0x20004154
 8008460:	2000416c 	.word	0x2000416c
 8008464:	20004138 	.word	0x20004138
 8008468:	2000413c 	.word	0x2000413c

0800846c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008472:	e019      	b.n	80084a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008474:	f000 fee6 	bl	8009244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <prvCheckTasksWaitingTermination+0x50>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3304      	adds	r3, #4
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe f92b 	bl	80066e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <prvCheckTasksWaitingTermination+0x54>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3b01      	subs	r3, #1
 8008490:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <prvCheckTasksWaitingTermination+0x54>)
 8008492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <prvCheckTasksWaitingTermination+0x58>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3b01      	subs	r3, #1
 800849a:	4a0a      	ldr	r2, [pc, #40]	; (80084c4 <prvCheckTasksWaitingTermination+0x58>)
 800849c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800849e:	f000 ff01 	bl	80092a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f810 	bl	80084c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <prvCheckTasksWaitingTermination+0x58>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e1      	bne.n	8008474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20004154 	.word	0x20004154
 80084c0:	20004180 	.word	0x20004180
 80084c4:	20004168 	.word	0x20004168

080084c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3354      	adds	r3, #84	; 0x54
 80084d4:	4618      	mov	r0, r3
 80084d6:	f00e fc23 	bl	8016d20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d108      	bne.n	80084f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f899 	bl	8009620 <vPortFree>
				vPortFree( pxTCB );
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 f896 	bl	8009620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084f4:	e018      	b.n	8008528 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d103      	bne.n	8008508 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f88d 	bl	8009620 <vPortFree>
	}
 8008506:	e00f      	b.n	8008528 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800850e:	2b02      	cmp	r3, #2
 8008510:	d00a      	beq.n	8008528 <prvDeleteTCB+0x60>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60fb      	str	r3, [r7, #12]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <prvDeleteTCB+0x5e>
	}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <prvResetNextTaskUnblockTime+0x38>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <prvResetNextTaskUnblockTime+0x3c>)
 8008542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008548:	e008      	b.n	800855c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <prvResetNextTaskUnblockTime+0x38>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4a04      	ldr	r2, [pc, #16]	; (800856c <prvResetNextTaskUnblockTime+0x3c>)
 800855a:	6013      	str	r3, [r2, #0]
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20004138 	.word	0x20004138
 800856c:	200041a0 	.word	0x200041a0

08008570 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <xTaskGetCurrentTaskHandle+0x1c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800857c:	687b      	ldr	r3, [r7, #4]
	}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20003cac 	.word	0x20003cac

08008590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008596:	4b0b      	ldr	r3, [pc, #44]	; (80085c4 <xTaskGetSchedulerState+0x34>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800859e:	2301      	movs	r3, #1
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e008      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a4:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <xTaskGetSchedulerState+0x38>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085ac:	2302      	movs	r3, #2
 80085ae:	607b      	str	r3, [r7, #4]
 80085b0:	e001      	b.n	80085b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085b2:	2300      	movs	r3, #0
 80085b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085b6:	687b      	ldr	r3, [r7, #4]
	}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	2000418c 	.word	0x2000418c
 80085c8:	200041a8 	.word	0x200041a8

080085cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d051      	beq.n	8008686 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e6:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <xTaskPriorityInherit+0xc4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d241      	bcs.n	8008674 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db06      	blt.n	8008606 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <xTaskPriorityInherit+0xc4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6959      	ldr	r1, [r3, #20]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <xTaskPriorityInherit+0xc8>)
 8008618:	4413      	add	r3, r2
 800861a:	4299      	cmp	r1, r3
 800861c:	d122      	bne.n	8008664 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	3304      	adds	r3, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe f85c 	bl	80066e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008628:	4b19      	ldr	r3, [pc, #100]	; (8008690 <xTaskPriorityInherit+0xc4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	4b18      	ldr	r3, [pc, #96]	; (8008698 <xTaskPriorityInherit+0xcc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d903      	bls.n	8008646 <xTaskPriorityInherit+0x7a>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008642:	4a15      	ldr	r2, [pc, #84]	; (8008698 <xTaskPriorityInherit+0xcc>)
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4a10      	ldr	r2, [pc, #64]	; (8008694 <xTaskPriorityInherit+0xc8>)
 8008654:	441a      	add	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	3304      	adds	r3, #4
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f7fd ffe2 	bl	8006626 <vListInsertEnd>
 8008662:	e004      	b.n	800866e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <xTaskPriorityInherit+0xc4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e008      	b.n	8008686 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <xTaskPriorityInherit+0xc4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	429a      	cmp	r2, r3
 8008680:	d201      	bcs.n	8008686 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008682:	2301      	movs	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008686:	68fb      	ldr	r3, [r7, #12]
	}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20003cac 	.word	0x20003cac
 8008694:	20003cb0 	.word	0x20003cb0
 8008698:	20004188 	.word	0x20004188

0800869c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d056      	beq.n	8008760 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <xTaskPriorityDisinherit+0xd0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d00a      	beq.n	80086d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60fb      	str	r3, [r7, #12]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f4:	1e5a      	subs	r2, r3, #1
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008702:	429a      	cmp	r2, r3
 8008704:	d02c      	beq.n	8008760 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870a:	2b00      	cmp	r3, #0
 800870c:	d128      	bne.n	8008760 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3304      	adds	r3, #4
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd ffe4 	bl	80066e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008730:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <xTaskPriorityDisinherit+0xd4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d903      	bls.n	8008740 <xTaskPriorityDisinherit+0xa4>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a0c      	ldr	r2, [pc, #48]	; (8008770 <xTaskPriorityDisinherit+0xd4>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4a09      	ldr	r2, [pc, #36]	; (8008774 <xTaskPriorityDisinherit+0xd8>)
 800874e:	441a      	add	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fd ff65 	bl	8006626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008760:	697b      	ldr	r3, [r7, #20]
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20003cac 	.word	0x20003cac
 8008770:	20004188 	.word	0x20004188
 8008774:	20003cb0 	.word	0x20003cb0

08008778 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008786:	2301      	movs	r3, #1
 8008788:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d06a      	beq.n	8008866 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	60fb      	str	r3, [r7, #12]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d902      	bls.n	80087be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	e002      	b.n	80087c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d04b      	beq.n	8008866 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d146      	bne.n	8008866 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087d8:	4b25      	ldr	r3, [pc, #148]	; (8008870 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10a      	bne.n	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60bb      	str	r3, [r7, #8]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	db04      	blt.n	8008816 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	6959      	ldr	r1, [r3, #20]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4a13      	ldr	r2, [pc, #76]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008826:	4413      	add	r3, r2
 8008828:	4299      	cmp	r1, r3
 800882a:	d11c      	bne.n	8008866 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	3304      	adds	r3, #4
 8008830:	4618      	mov	r0, r3
 8008832:	f7fd ff55 	bl	80066e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d903      	bls.n	800884a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4a07      	ldr	r2, [pc, #28]	; (8008874 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008858:	441a      	add	r2, r3
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	3304      	adds	r3, #4
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f7fd fee0 	bl	8006626 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008866:	bf00      	nop
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20003cac 	.word	0x20003cac
 8008874:	20003cb0 	.word	0x20003cb0
 8008878:	20004188 	.word	0x20004188

0800887c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008888:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800888e:	3201      	adds	r2, #1
 8008890:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008894:	681b      	ldr	r3, [r3, #0]
	}
 8008896:	4618      	mov	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20003cac 	.word	0x20003cac

080088a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088ae:	4b21      	ldr	r3, [pc, #132]	; (8008934 <prvAddCurrentTaskToDelayedList+0x90>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b4:	4b20      	ldr	r3, [pc, #128]	; (8008938 <prvAddCurrentTaskToDelayedList+0x94>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fd ff10 	bl	80066e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088c6:	d10a      	bne.n	80088de <prvAddCurrentTaskToDelayedList+0x3a>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ce:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <prvAddCurrentTaskToDelayedList+0x94>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4819      	ldr	r0, [pc, #100]	; (800893c <prvAddCurrentTaskToDelayedList+0x98>)
 80088d8:	f7fd fea5 	bl	8006626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088dc:	e026      	b.n	800892c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4413      	add	r3, r2
 80088e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <prvAddCurrentTaskToDelayedList+0x94>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d209      	bcs.n	800890a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f6:	4b12      	ldr	r3, [pc, #72]	; (8008940 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <prvAddCurrentTaskToDelayedList+0x94>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fd feb3 	bl	800666e <vListInsert>
}
 8008908:	e010      	b.n	800892c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800890a:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <prvAddCurrentTaskToDelayedList+0xa0>)
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <prvAddCurrentTaskToDelayedList+0x94>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fd fea9 	bl	800666e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <prvAddCurrentTaskToDelayedList+0xa4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	d202      	bcs.n	800892c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	6013      	str	r3, [r2, #0]
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20004184 	.word	0x20004184
 8008938:	20003cac 	.word	0x20003cac
 800893c:	2000416c 	.word	0x2000416c
 8008940:	2000413c 	.word	0x2000413c
 8008944:	20004138 	.word	0x20004138
 8008948:	200041a0 	.word	0x200041a0

0800894c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008956:	f000 fb07 	bl	8008f68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800895a:	4b1c      	ldr	r3, [pc, #112]	; (80089cc <xTimerCreateTimerTask+0x80>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d021      	beq.n	80089a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800896a:	1d3a      	adds	r2, r7, #4
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	f107 030c 	add.w	r3, r7, #12
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd fe0f 	bl	8006598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	9202      	str	r2, [sp, #8]
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	2302      	movs	r3, #2
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	2300      	movs	r3, #0
 800898a:	460a      	mov	r2, r1
 800898c:	4910      	ldr	r1, [pc, #64]	; (80089d0 <xTimerCreateTimerTask+0x84>)
 800898e:	4811      	ldr	r0, [pc, #68]	; (80089d4 <xTimerCreateTimerTask+0x88>)
 8008990:	f7fe ff94 	bl	80078bc <xTaskCreateStatic>
 8008994:	4603      	mov	r3, r0
 8008996:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <xTimerCreateTimerTask+0x8c>)
 8008998:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800899a:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <xTimerCreateTimerTask+0x8c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089a2:	2301      	movs	r3, #1
 80089a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	613b      	str	r3, [r7, #16]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089c2:	697b      	ldr	r3, [r7, #20]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	200041dc 	.word	0x200041dc
 80089d0:	08018898 	.word	0x08018898
 80089d4:	08008b11 	.word	0x08008b11
 80089d8:	200041e0 	.word	0x200041e0

080089dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	; 0x28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <xTimerGenericCommand+0x2e>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	623b      	str	r3, [r7, #32]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a0a:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <xTimerGenericCommand+0x98>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d02a      	beq.n	8008a68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b05      	cmp	r3, #5
 8008a22:	dc18      	bgt.n	8008a56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a24:	f7ff fdb4 	bl	8008590 <xTaskGetSchedulerState>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d109      	bne.n	8008a42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <xTimerGenericCommand+0x98>)
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	f107 0110 	add.w	r1, r7, #16
 8008a36:	2300      	movs	r3, #0
 8008a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3a:	f7fe f8d9 	bl	8006bf0 <xQueueGenericSend>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8008a40:	e012      	b.n	8008a68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a42:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <xTimerGenericCommand+0x98>)
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	f107 0110 	add.w	r1, r7, #16
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f7fe f8cf 	bl	8006bf0 <xQueueGenericSend>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24
 8008a54:	e008      	b.n	8008a68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a56:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <xTimerGenericCommand+0x98>)
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	f107 0110 	add.w	r1, r7, #16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	f7fe f9c3 	bl	8006dec <xQueueGenericSendFromISR>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3728      	adds	r7, #40	; 0x28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200041dc 	.word	0x200041dc

08008a78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a82:	4b22      	ldr	r3, [pc, #136]	; (8008b0c <prvProcessExpiredTimer+0x94>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fd fe25 	bl	80066e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d022      	beq.n	8008aea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	699a      	ldr	r2, [r3, #24]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	18d1      	adds	r1, r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	6978      	ldr	r0, [r7, #20]
 8008ab2:	f000 f8d1 	bl	8008c58 <prvInsertTimerInActiveList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01f      	beq.n	8008afc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008abc:	2300      	movs	r3, #0
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7ff ff88 	bl	80089dc <xTimerGenericCommand>
 8008acc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d113      	bne.n	8008afc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	60fb      	str	r3, [r7, #12]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	6978      	ldr	r0, [r7, #20]
 8008b02:	4798      	blx	r3
}
 8008b04:	bf00      	nop
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200041d4 	.word	0x200041d4

08008b10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b18:	f107 0308 	add.w	r3, r7, #8
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 f857 	bl	8008bd0 <prvGetNextExpireTime>
 8008b22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4619      	mov	r1, r3
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 f803 	bl	8008b34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b2e:	f000 f8d5 	bl	8008cdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b32:	e7f1      	b.n	8008b18 <prvTimerTask+0x8>

08008b34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b3e:	f7ff f919 	bl	8007d74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f866 	bl	8008c18 <prvSampleTimeNow>
 8008b4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d130      	bne.n	8008bb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <prvProcessTimerOrBlockTask+0x3c>
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d806      	bhi.n	8008b70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b62:	f7ff f915 	bl	8007d90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff85 	bl	8008a78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b6e:	e024      	b.n	8008bba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b76:	4b13      	ldr	r3, [pc, #76]	; (8008bc4 <prvProcessTimerOrBlockTask+0x90>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <prvProcessTimerOrBlockTask+0x50>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <prvProcessTimerOrBlockTask+0x52>
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b88:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <prvProcessTimerOrBlockTask+0x94>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	f7fe fe5d 	bl	8007854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b9a:	f7ff f8f9 	bl	8007d90 <xTaskResumeAll>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <prvProcessTimerOrBlockTask+0x98>)
 8008ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	f3bf 8f6f 	isb	sy
}
 8008bb4:	e001      	b.n	8008bba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bb6:	f7ff f8eb 	bl	8007d90 <xTaskResumeAll>
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	200041d8 	.word	0x200041d8
 8008bc8:	200041dc 	.word	0x200041dc
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <prvGetNextExpireTime+0x44>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <prvGetNextExpireTime+0x16>
 8008be2:	2201      	movs	r2, #1
 8008be4:	e000      	b.n	8008be8 <prvGetNextExpireTime+0x18>
 8008be6:	2200      	movs	r2, #0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bf4:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <prvGetNextExpireTime+0x44>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e001      	b.n	8008c04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	200041d4 	.word	0x200041d4

08008c18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c20:	f7ff f954 	bl	8007ecc <xTaskGetTickCount>
 8008c24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <prvSampleTimeNow+0x3c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d205      	bcs.n	8008c3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c30:	f000 f936 	bl	8008ea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c42:	4a04      	ldr	r2, [pc, #16]	; (8008c54 <prvSampleTimeNow+0x3c>)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c48:	68fb      	ldr	r3, [r7, #12]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200041e4 	.word	0x200041e4

08008c58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d812      	bhi.n	8008ca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d302      	bcc.n	8008c92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	e01b      	b.n	8008cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c92:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <prvInsertTimerInActiveList+0x7c>)
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f7fd fce6 	bl	800666e <vListInsert>
 8008ca2:	e012      	b.n	8008cca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d206      	bcs.n	8008cba <prvInsertTimerInActiveList+0x62>
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d302      	bcc.n	8008cba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e007      	b.n	8008cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cba:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <prvInsertTimerInActiveList+0x80>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7fd fcd2 	bl	800666e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cca:	697b      	ldr	r3, [r7, #20]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	200041d8 	.word	0x200041d8
 8008cd8:	200041d4 	.word	0x200041d4

08008cdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08e      	sub	sp, #56	; 0x38
 8008ce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ce2:	e0ca      	b.n	8008e7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da18      	bge.n	8008d1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	3304      	adds	r3, #4
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	61fb      	str	r3, [r7, #28]
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d12:	6850      	ldr	r0, [r2, #4]
 8008d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d16:	6892      	ldr	r2, [r2, #8]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f2c0 80aa 	blt.w	8008e78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d004      	beq.n	8008d3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	3304      	adds	r3, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fd fcd3 	bl	80066e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff ff6b 	bl	8008c18 <prvSampleTimeNow>
 8008d42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b09      	cmp	r3, #9
 8008d48:	f200 8097 	bhi.w	8008e7a <prvProcessReceivedCommands+0x19e>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <prvProcessReceivedCommands+0x78>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d7d 	.word	0x08008d7d
 8008d58:	08008d7d 	.word	0x08008d7d
 8008d5c:	08008d7d 	.word	0x08008d7d
 8008d60:	08008df1 	.word	0x08008df1
 8008d64:	08008e05 	.word	0x08008e05
 8008d68:	08008e4f 	.word	0x08008e4f
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d7d 	.word	0x08008d7d
 8008d74:	08008df1 	.word	0x08008df1
 8008d78:	08008e05 	.word	0x08008e05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d82:	f043 0301 	orr.w	r3, r3, #1
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	18d1      	adds	r1, r2, r3
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9c:	f7ff ff5c 	bl	8008c58 <prvInsertTimerInActiveList>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d069      	beq.n	8008e7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05e      	beq.n	8008e7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	441a      	add	r2, r3
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2100      	movs	r1, #0
 8008dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dce:	f7ff fe05 	bl	80089dc <xTimerGenericCommand>
 8008dd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d14f      	bne.n	8008e7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	61bb      	str	r3, [r7, #24]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e02:	e03a      	b.n	8008e7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	617b      	str	r3, [r7, #20]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	18d1      	adds	r1, r2, r3
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e48:	f7ff ff06 	bl	8008c58 <prvInsertTimerInActiveList>
					break;
 8008e4c:	e015      	b.n	8008e7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e5e:	f000 fbdf 	bl	8009620 <vPortFree>
 8008e62:	e00a      	b.n	8008e7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e76:	e000      	b.n	8008e7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e7a:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <prvProcessReceivedCommands+0x1c0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	1d39      	adds	r1, r7, #4
 8008e80:	2200      	movs	r2, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe f8da 	bl	800703c <xQueueReceive>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f47f af2a 	bne.w	8008ce4 <prvProcessReceivedCommands+0x8>
	}
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	3730      	adds	r7, #48	; 0x30
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200041dc 	.word	0x200041dc

08008ea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ea6:	e048      	b.n	8008f3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fd fc0d 	bl	80066e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d02e      	beq.n	8008f3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d90e      	bls.n	8008f0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008efa:	4b19      	ldr	r3, [pc, #100]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7fd fbb2 	bl	800666e <vListInsert>
 8008f0a:	e016      	b.n	8008f3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2300      	movs	r3, #0
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	2100      	movs	r1, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fd60 	bl	80089dc <xTimerGenericCommand>
 8008f1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	603b      	str	r3, [r7, #0]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1b1      	bne.n	8008ea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f4a:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <prvSwitchTimerLists+0xc4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a04      	ldr	r2, [pc, #16]	; (8008f60 <prvSwitchTimerLists+0xc0>)
 8008f50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f52:	4a04      	ldr	r2, [pc, #16]	; (8008f64 <prvSwitchTimerLists+0xc4>)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	6013      	str	r3, [r2, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200041d4 	.word	0x200041d4
 8008f64:	200041d8 	.word	0x200041d8

08008f68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f6e:	f000 f969 	bl	8009244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f72:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <prvCheckForValidListAndQueue+0x60>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d120      	bne.n	8008fbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f7a:	4814      	ldr	r0, [pc, #80]	; (8008fcc <prvCheckForValidListAndQueue+0x64>)
 8008f7c:	f7fd fb26 	bl	80065cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f80:	4813      	ldr	r0, [pc, #76]	; (8008fd0 <prvCheckForValidListAndQueue+0x68>)
 8008f82:	f7fd fb23 	bl	80065cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <prvCheckForValidListAndQueue+0x6c>)
 8008f88:	4a10      	ldr	r2, [pc, #64]	; (8008fcc <prvCheckForValidListAndQueue+0x64>)
 8008f8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f8c:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <prvCheckForValidListAndQueue+0x70>)
 8008f8e:	4a10      	ldr	r2, [pc, #64]	; (8008fd0 <prvCheckForValidListAndQueue+0x68>)
 8008f90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f92:	2300      	movs	r3, #0
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <prvCheckForValidListAndQueue+0x74>)
 8008f98:	4a11      	ldr	r2, [pc, #68]	; (8008fe0 <prvCheckForValidListAndQueue+0x78>)
 8008f9a:	2110      	movs	r1, #16
 8008f9c:	200a      	movs	r0, #10
 8008f9e:	f7fd fc31 	bl	8006804 <xQueueGenericCreateStatic>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	4a08      	ldr	r2, [pc, #32]	; (8008fc8 <prvCheckForValidListAndQueue+0x60>)
 8008fa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fa8:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <prvCheckForValidListAndQueue+0x60>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <prvCheckForValidListAndQueue+0x60>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	490b      	ldr	r1, [pc, #44]	; (8008fe4 <prvCheckForValidListAndQueue+0x7c>)
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fbf8 	bl	80077ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fbc:	f000 f972 	bl	80092a4 <vPortExitCritical>
}
 8008fc0:	bf00      	nop
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200041dc 	.word	0x200041dc
 8008fcc:	200041ac 	.word	0x200041ac
 8008fd0:	200041c0 	.word	0x200041c0
 8008fd4:	200041d4 	.word	0x200041d4
 8008fd8:	200041d8 	.word	0x200041d8
 8008fdc:	20004288 	.word	0x20004288
 8008fe0:	200041e8 	.word	0x200041e8
 8008fe4:	080188a0 	.word	0x080188a0

08008fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3b04      	subs	r3, #4
 8009006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f023 0201 	bic.w	r2, r3, #1
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3b04      	subs	r3, #4
 8009016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009018:	4a0c      	ldr	r2, [pc, #48]	; (800904c <pxPortInitialiseStack+0x64>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3b14      	subs	r3, #20
 8009022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3b04      	subs	r3, #4
 800902e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f06f 0202 	mvn.w	r2, #2
 8009036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3b20      	subs	r3, #32
 800903c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800903e:	68fb      	ldr	r3, [r7, #12]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	08009051 	.word	0x08009051

08009050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <prvTaskExitError+0x54>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009062:	d00a      	beq.n	800907a <prvTaskExitError+0x2a>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	60fb      	str	r3, [r7, #12]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <prvTaskExitError+0x28>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60bb      	str	r3, [r7, #8]
}
 800908c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800908e:	bf00      	nop
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0fc      	beq.n	8009090 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	200004a4 	.word	0x200004a4
	...

080090b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090b0:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <pxCurrentTCBConst2>)
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	6808      	ldr	r0, [r1, #0]
 80090b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ba:	f380 8809 	msr	PSP, r0
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8811 	msr	BASEPRI, r0
 80090ca:	4770      	bx	lr
 80090cc:	f3af 8000 	nop.w

080090d0 <pxCurrentTCBConst2>:
 80090d0:	20003cac 	.word	0x20003cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop

080090d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090d8:	4808      	ldr	r0, [pc, #32]	; (80090fc <prvPortStartFirstTask+0x24>)
 80090da:	6800      	ldr	r0, [r0, #0]
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f380 8808 	msr	MSP, r0
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f380 8814 	msr	CONTROL, r0
 80090ea:	b662      	cpsie	i
 80090ec:	b661      	cpsie	f
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	df00      	svc	0
 80090f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090fa:	bf00      	nop
 80090fc:	e000ed08 	.word	0xe000ed08

08009100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009106:	4b46      	ldr	r3, [pc, #280]	; (8009220 <xPortStartScheduler+0x120>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a46      	ldr	r2, [pc, #280]	; (8009224 <xPortStartScheduler+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d10a      	bne.n	8009126 <xPortStartScheduler+0x26>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009126:	4b3e      	ldr	r3, [pc, #248]	; (8009220 <xPortStartScheduler+0x120>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a3f      	ldr	r2, [pc, #252]	; (8009228 <xPortStartScheduler+0x128>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d10a      	bne.n	8009146 <xPortStartScheduler+0x46>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009146:	4b39      	ldr	r3, [pc, #228]	; (800922c <xPortStartScheduler+0x12c>)
 8009148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	22ff      	movs	r2, #255	; 0xff
 8009156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009168:	b2da      	uxtb	r2, r3
 800916a:	4b31      	ldr	r3, [pc, #196]	; (8009230 <xPortStartScheduler+0x130>)
 800916c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800916e:	4b31      	ldr	r3, [pc, #196]	; (8009234 <xPortStartScheduler+0x134>)
 8009170:	2207      	movs	r2, #7
 8009172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009174:	e009      	b.n	800918a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009176:	4b2f      	ldr	r3, [pc, #188]	; (8009234 <xPortStartScheduler+0x134>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3b01      	subs	r3, #1
 800917c:	4a2d      	ldr	r2, [pc, #180]	; (8009234 <xPortStartScheduler+0x134>)
 800917e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009192:	2b80      	cmp	r3, #128	; 0x80
 8009194:	d0ef      	beq.n	8009176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009196:	4b27      	ldr	r3, [pc, #156]	; (8009234 <xPortStartScheduler+0x134>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1c3 0307 	rsb	r3, r3, #7
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d00a      	beq.n	80091b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	60bb      	str	r3, [r7, #8]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <xPortStartScheduler+0x134>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	4a1d      	ldr	r2, [pc, #116]	; (8009234 <xPortStartScheduler+0x134>)
 80091c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <xPortStartScheduler+0x134>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091ca:	4a1a      	ldr	r2, [pc, #104]	; (8009234 <xPortStartScheduler+0x134>)
 80091cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <xPortStartScheduler+0x138>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a17      	ldr	r2, [pc, #92]	; (8009238 <xPortStartScheduler+0x138>)
 80091dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091e2:	4b15      	ldr	r3, [pc, #84]	; (8009238 <xPortStartScheduler+0x138>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a14      	ldr	r2, [pc, #80]	; (8009238 <xPortStartScheduler+0x138>)
 80091e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091ee:	f000 f8dd 	bl	80093ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <xPortStartScheduler+0x13c>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091f8:	f000 f8fc 	bl	80093f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091fc:	4b10      	ldr	r3, [pc, #64]	; (8009240 <xPortStartScheduler+0x140>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a0f      	ldr	r2, [pc, #60]	; (8009240 <xPortStartScheduler+0x140>)
 8009202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009208:	f7ff ff66 	bl	80090d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800920c:	f7fe ff3a 	bl	8008084 <vTaskSwitchContext>
	prvTaskExitError();
 8009210:	f7ff ff1e 	bl	8009050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	e000ed00 	.word	0xe000ed00
 8009224:	410fc271 	.word	0x410fc271
 8009228:	410fc270 	.word	0x410fc270
 800922c:	e000e400 	.word	0xe000e400
 8009230:	200042d8 	.word	0x200042d8
 8009234:	200042dc 	.word	0x200042dc
 8009238:	e000ed20 	.word	0xe000ed20
 800923c:	200004a4 	.word	0x200004a4
 8009240:	e000ef34 	.word	0xe000ef34

08009244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	607b      	str	r3, [r7, #4]
}
 800925c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800925e:	4b0f      	ldr	r3, [pc, #60]	; (800929c <vPortEnterCritical+0x58>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	4a0d      	ldr	r2, [pc, #52]	; (800929c <vPortEnterCritical+0x58>)
 8009266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <vPortEnterCritical+0x58>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d10f      	bne.n	8009290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <vPortEnterCritical+0x5c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <vPortEnterCritical+0x4c>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	603b      	str	r3, [r7, #0]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <vPortEnterCritical+0x4a>
	}
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	200004a4 	.word	0x200004a4
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <vPortExitCritical+0x50>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <vPortExitCritical+0x24>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	607b      	str	r3, [r7, #4]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092c8:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <vPortExitCritical+0x50>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <vPortExitCritical+0x50>)
 80092d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <vPortExitCritical+0x50>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <vPortExitCritical+0x42>
 80092da:	2300      	movs	r3, #0
 80092dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	f383 8811 	msr	BASEPRI, r3
}
 80092e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	200004a4 	.word	0x200004a4
	...

08009300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009300:	f3ef 8009 	mrs	r0, PSP
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	4b15      	ldr	r3, [pc, #84]	; (8009360 <pxCurrentTCBConst>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	f01e 0f10 	tst.w	lr, #16
 8009310:	bf08      	it	eq
 8009312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	6010      	str	r0, [r2, #0]
 800931c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009324:	f380 8811 	msr	BASEPRI, r0
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f7fe fea8 	bl	8008084 <vTaskSwitchContext>
 8009334:	f04f 0000 	mov.w	r0, #0
 8009338:	f380 8811 	msr	BASEPRI, r0
 800933c:	bc09      	pop	{r0, r3}
 800933e:	6819      	ldr	r1, [r3, #0]
 8009340:	6808      	ldr	r0, [r1, #0]
 8009342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009346:	f01e 0f10 	tst.w	lr, #16
 800934a:	bf08      	it	eq
 800934c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009350:	f380 8809 	msr	PSP, r0
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst>:
 8009360:	20003cac 	.word	0x20003cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	607b      	str	r3, [r7, #4]
}
 8009380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009382:	f7fe fdc5 	bl	8007f10 <xTaskIncrementTick>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800938c:	4b06      	ldr	r3, [pc, #24]	; (80093a8 <xPortSysTickHandler+0x40>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f383 8811 	msr	BASEPRI, r3
}
 800939e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	e000ed04 	.word	0xe000ed04

080093ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <vPortSetupTimerInterrupt+0x34>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <vPortSetupTimerInterrupt+0x38>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <vPortSetupTimerInterrupt+0x3c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a0a      	ldr	r2, [pc, #40]	; (80093ec <vPortSetupTimerInterrupt+0x40>)
 80093c2:	fba2 2303 	umull	r2, r3, r2, r3
 80093c6:	099b      	lsrs	r3, r3, #6
 80093c8:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <vPortSetupTimerInterrupt+0x44>)
 80093ca:	3b01      	subs	r3, #1
 80093cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093ce:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <vPortSetupTimerInterrupt+0x34>)
 80093d0:	2207      	movs	r2, #7
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	bf00      	nop
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000e010 	.word	0xe000e010
 80093e4:	e000e018 	.word	0xe000e018
 80093e8:	20000498 	.word	0x20000498
 80093ec:	10624dd3 	.word	0x10624dd3
 80093f0:	e000e014 	.word	0xe000e014

080093f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009404 <vPortEnableVFP+0x10>
 80093f8:	6801      	ldr	r1, [r0, #0]
 80093fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093fe:	6001      	str	r1, [r0, #0]
 8009400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009402:	bf00      	nop
 8009404:	e000ed88 	.word	0xe000ed88

08009408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800940e:	f3ef 8305 	mrs	r3, IPSR
 8009412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b0f      	cmp	r3, #15
 8009418:	d914      	bls.n	8009444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800941a:	4a17      	ldr	r2, [pc, #92]	; (8009478 <vPortValidateInterruptPriority+0x70>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009424:	4b15      	ldr	r3, [pc, #84]	; (800947c <vPortValidateInterruptPriority+0x74>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	7afa      	ldrb	r2, [r7, #11]
 800942a:	429a      	cmp	r2, r3
 800942c:	d20a      	bcs.n	8009444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <vPortValidateInterruptPriority+0x78>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <vPortValidateInterruptPriority+0x7c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d90a      	bls.n	800946a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	603b      	str	r3, [r7, #0]
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <vPortValidateInterruptPriority+0x60>
	}
 800946a:	bf00      	nop
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	e000e3f0 	.word	0xe000e3f0
 800947c:	200042d8 	.word	0x200042d8
 8009480:	e000ed0c 	.word	0xe000ed0c
 8009484:	200042dc 	.word	0x200042dc

08009488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08a      	sub	sp, #40	; 0x28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009490:	2300      	movs	r3, #0
 8009492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009494:	f7fe fc6e 	bl	8007d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009498:	4b5b      	ldr	r3, [pc, #364]	; (8009608 <pvPortMalloc+0x180>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094a0:	f000 f920 	bl	80096e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094a4:	4b59      	ldr	r3, [pc, #356]	; (800960c <pvPortMalloc+0x184>)
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4013      	ands	r3, r2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f040 8093 	bne.w	80095d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01d      	beq.n	80094f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094b8:	2208      	movs	r2, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d014      	beq.n	80094f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f023 0307 	bic.w	r3, r3, #7
 80094d0:	3308      	adds	r3, #8
 80094d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <pvPortMalloc+0x6c>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	617b      	str	r3, [r7, #20]
}
 80094f0:	bf00      	nop
 80094f2:	e7fe      	b.n	80094f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d06e      	beq.n	80095d8 <pvPortMalloc+0x150>
 80094fa:	4b45      	ldr	r3, [pc, #276]	; (8009610 <pvPortMalloc+0x188>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d869      	bhi.n	80095d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009504:	4b43      	ldr	r3, [pc, #268]	; (8009614 <pvPortMalloc+0x18c>)
 8009506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009508:	4b42      	ldr	r3, [pc, #264]	; (8009614 <pvPortMalloc+0x18c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800950e:	e004      	b.n	800951a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d903      	bls.n	800952c <pvPortMalloc+0xa4>
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f1      	bne.n	8009510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <pvPortMalloc+0x180>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009532:	429a      	cmp	r2, r3
 8009534:	d050      	beq.n	80095d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2208      	movs	r2, #8
 800953c:	4413      	add	r3, r2
 800953e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	1ad2      	subs	r2, r2, r3
 8009550:	2308      	movs	r3, #8
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	429a      	cmp	r2, r3
 8009556:	d91f      	bls.n	8009598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4413      	add	r3, r2
 800955e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <pvPortMalloc+0xf8>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	613b      	str	r3, [r7, #16]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	1ad2      	subs	r2, r2, r3
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009592:	69b8      	ldr	r0, [r7, #24]
 8009594:	f000 f908 	bl	80097a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009598:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <pvPortMalloc+0x188>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	4a1b      	ldr	r2, [pc, #108]	; (8009610 <pvPortMalloc+0x188>)
 80095a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095a6:	4b1a      	ldr	r3, [pc, #104]	; (8009610 <pvPortMalloc+0x188>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <pvPortMalloc+0x190>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d203      	bcs.n	80095ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095b2:	4b17      	ldr	r3, [pc, #92]	; (8009610 <pvPortMalloc+0x188>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a18      	ldr	r2, [pc, #96]	; (8009618 <pvPortMalloc+0x190>)
 80095b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <pvPortMalloc+0x184>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	431a      	orrs	r2, r3
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095ce:	4b13      	ldr	r3, [pc, #76]	; (800961c <pvPortMalloc+0x194>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a11      	ldr	r2, [pc, #68]	; (800961c <pvPortMalloc+0x194>)
 80095d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095d8:	f7fe fbda 	bl	8007d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <pvPortMalloc+0x174>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60fb      	str	r3, [r7, #12]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <pvPortMalloc+0x172>
	return pvReturn;
 80095fc:	69fb      	ldr	r3, [r7, #28]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20007ee8 	.word	0x20007ee8
 800960c:	20007efc 	.word	0x20007efc
 8009610:	20007eec 	.word	0x20007eec
 8009614:	20007ee0 	.word	0x20007ee0
 8009618:	20007ef0 	.word	0x20007ef0
 800961c:	20007ef4 	.word	0x20007ef4

08009620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d04d      	beq.n	80096ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009632:	2308      	movs	r3, #8
 8009634:	425b      	negs	r3, r3
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	4413      	add	r3, r2
 800963a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <vPortFree+0xb8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4013      	ands	r3, r2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <vPortFree+0x44>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	60fb      	str	r3, [r7, #12]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <vPortFree+0x62>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	60bb      	str	r3, [r7, #8]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <vPortFree+0xb8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01e      	beq.n	80096ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d11a      	bne.n	80096ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b0e      	ldr	r3, [pc, #56]	; (80096d8 <vPortFree+0xb8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	43db      	mvns	r3, r3
 80096a2:	401a      	ands	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096a8:	f7fe fb64 	bl	8007d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <vPortFree+0xbc>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4413      	add	r3, r2
 80096b6:	4a09      	ldr	r2, [pc, #36]	; (80096dc <vPortFree+0xbc>)
 80096b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096ba:	6938      	ldr	r0, [r7, #16]
 80096bc:	f000 f874 	bl	80097a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <vPortFree+0xc0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3301      	adds	r3, #1
 80096c6:	4a06      	ldr	r2, [pc, #24]	; (80096e0 <vPortFree+0xc0>)
 80096c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096ca:	f7fe fb61 	bl	8007d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096ce:	bf00      	nop
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20007efc 	.word	0x20007efc
 80096dc:	20007eec 	.word	0x20007eec
 80096e0:	20007ef8 	.word	0x20007ef8

080096e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <prvHeapInit+0xac>)
 80096f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00c      	beq.n	8009718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <prvHeapInit+0xac>)
 8009714:	4413      	add	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800971c:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <prvHeapInit+0xb0>)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <prvHeapInit+0xb0>)
 8009724:	2200      	movs	r2, #0
 8009726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	4413      	add	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009730:	2208      	movs	r2, #8
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	1a9b      	subs	r3, r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0307 	bic.w	r3, r3, #7
 800973e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4a15      	ldr	r2, [pc, #84]	; (8009798 <prvHeapInit+0xb4>)
 8009744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <prvHeapInit+0xb4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2200      	movs	r2, #0
 800974c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800974e:	4b12      	ldr	r3, [pc, #72]	; (8009798 <prvHeapInit+0xb4>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <prvHeapInit+0xb4>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <prvHeapInit+0xb8>)
 8009772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <prvHeapInit+0xbc>)
 800977a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <prvHeapInit+0xc0>)
 800977e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	200042e0 	.word	0x200042e0
 8009794:	20007ee0 	.word	0x20007ee0
 8009798:	20007ee8 	.word	0x20007ee8
 800979c:	20007ef0 	.word	0x20007ef0
 80097a0:	20007eec 	.word	0x20007eec
 80097a4:	20007efc 	.word	0x20007efc

080097a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097b0:	4b28      	ldr	r3, [pc, #160]	; (8009854 <prvInsertBlockIntoFreeList+0xac>)
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e002      	b.n	80097bc <prvInsertBlockIntoFreeList+0x14>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d8f7      	bhi.n	80097b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d108      	bne.n	80097ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	441a      	add	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d118      	bne.n	8009830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <prvInsertBlockIntoFreeList+0xb0>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d00d      	beq.n	8009826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	441a      	add	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	e008      	b.n	8009838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvInsertBlockIntoFreeList+0xb0>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e003      	b.n	8009838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	429a      	cmp	r2, r3
 800983e:	d002      	beq.n	8009846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20007ee0 	.word	0x20007ee0
 8009858:	20007ee8 	.word	0x20007ee8

0800985c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009866:	f00a fa21 	bl	8013cac <sys_timeouts_sleeptime>
 800986a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009872:	d10b      	bne.n	800988c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009874:	4813      	ldr	r0, [pc, #76]	; (80098c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009876:	f00c ff72 	bl	801675e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800987a:	2200      	movs	r2, #0
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f00c fefa 	bl	8016678 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009884:	480f      	ldr	r0, [pc, #60]	; (80098c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009886:	f00c ff5b 	bl	8016740 <sys_mutex_lock>
    return;
 800988a:	e018      	b.n	80098be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009892:	f00a f9d1 	bl	8013c38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009896:	e7e6      	b.n	8009866 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009898:	480a      	ldr	r0, [pc, #40]	; (80098c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800989a:	f00c ff60 	bl	801675e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f00c fee8 	bl	8016678 <sys_arch_mbox_fetch>
 80098a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80098aa:	4806      	ldr	r0, [pc, #24]	; (80098c4 <tcpip_timeouts_mbox_fetch+0x68>)
 80098ac:	f00c ff48 	bl	8016740 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b6:	d102      	bne.n	80098be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80098b8:	f00a f9be 	bl	8013c38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80098bc:	e7d3      	b.n	8009866 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	200112d0 	.word	0x200112d0

080098c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80098d0:	4810      	ldr	r0, [pc, #64]	; (8009914 <tcpip_thread+0x4c>)
 80098d2:	f00c ff35 	bl	8016740 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80098d6:	4b10      	ldr	r3, [pc, #64]	; (8009918 <tcpip_thread+0x50>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <tcpip_thread+0x50>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a0e      	ldr	r2, [pc, #56]	; (800991c <tcpip_thread+0x54>)
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	4610      	mov	r0, r2
 80098e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80098ea:	f107 030c 	add.w	r3, r7, #12
 80098ee:	4619      	mov	r1, r3
 80098f0:	480b      	ldr	r0, [pc, #44]	; (8009920 <tcpip_thread+0x58>)
 80098f2:	f7ff ffb3 	bl	800985c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d106      	bne.n	800990a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80098fc:	4b09      	ldr	r3, [pc, #36]	; (8009924 <tcpip_thread+0x5c>)
 80098fe:	2291      	movs	r2, #145	; 0x91
 8009900:	4909      	ldr	r1, [pc, #36]	; (8009928 <tcpip_thread+0x60>)
 8009902:	480a      	ldr	r0, [pc, #40]	; (800992c <tcpip_thread+0x64>)
 8009904:	f00d f930 	bl	8016b68 <iprintf>
      continue;
 8009908:	e003      	b.n	8009912 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 f80f 	bl	8009930 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009912:	e7ea      	b.n	80098ea <tcpip_thread+0x22>
 8009914:	200112d0 	.word	0x200112d0
 8009918:	20007f00 	.word	0x20007f00
 800991c:	20007f04 	.word	0x20007f04
 8009920:	20007f08 	.word	0x20007f08
 8009924:	080188a8 	.word	0x080188a8
 8009928:	080188d8 	.word	0x080188d8
 800992c:	080188f8 	.word	0x080188f8

08009930 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d026      	beq.n	800998e <tcpip_thread_handle_msg+0x5e>
 8009940:	2b02      	cmp	r3, #2
 8009942:	dc2b      	bgt.n	800999c <tcpip_thread_handle_msg+0x6c>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <tcpip_thread_handle_msg+0x1e>
 8009948:	2b01      	cmp	r3, #1
 800994a:	d015      	beq.n	8009978 <tcpip_thread_handle_msg+0x48>
 800994c:	e026      	b.n	800999c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6850      	ldr	r0, [r2, #4]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6892      	ldr	r2, [r2, #8]
 800995a:	4611      	mov	r1, r2
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	f003 fd6d 	bl	800d448 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	2009      	movs	r0, #9
 8009972:	f002 fec5 	bl	800c700 <memp_free>
      break;
 8009976:	e018      	b.n	80099aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6892      	ldr	r2, [r2, #8]
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	2008      	movs	r0, #8
 8009988:	f002 feba 	bl	800c700 <memp_free>
      break;
 800998c:	e00d      	b.n	80099aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6892      	ldr	r2, [r2, #8]
 8009996:	4610      	mov	r0, r2
 8009998:	4798      	blx	r3
      break;
 800999a:	e006      	b.n	80099aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <tcpip_thread_handle_msg+0x84>)
 800999e:	22cf      	movs	r2, #207	; 0xcf
 80099a0:	4905      	ldr	r1, [pc, #20]	; (80099b8 <tcpip_thread_handle_msg+0x88>)
 80099a2:	4806      	ldr	r0, [pc, #24]	; (80099bc <tcpip_thread_handle_msg+0x8c>)
 80099a4:	f00d f8e0 	bl	8016b68 <iprintf>
      break;
 80099a8:	bf00      	nop
  }
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	080188a8 	.word	0x080188a8
 80099b8:	080188d8 	.word	0x080188d8
 80099bc:	080188f8 	.word	0x080188f8

080099c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80099cc:	481a      	ldr	r0, [pc, #104]	; (8009a38 <tcpip_inpkt+0x78>)
 80099ce:	f00c fe84 	bl	80166da <sys_mbox_valid>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d105      	bne.n	80099e4 <tcpip_inpkt+0x24>
 80099d8:	4b18      	ldr	r3, [pc, #96]	; (8009a3c <tcpip_inpkt+0x7c>)
 80099da:	22fc      	movs	r2, #252	; 0xfc
 80099dc:	4918      	ldr	r1, [pc, #96]	; (8009a40 <tcpip_inpkt+0x80>)
 80099de:	4819      	ldr	r0, [pc, #100]	; (8009a44 <tcpip_inpkt+0x84>)
 80099e0:	f00d f8c2 	bl	8016b68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80099e4:	2009      	movs	r0, #9
 80099e6:	f002 fe39 	bl	800c65c <memp_malloc>
 80099ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099f6:	e01a      	b.n	8009a2e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009a10:	6979      	ldr	r1, [r7, #20]
 8009a12:	4809      	ldr	r0, [pc, #36]	; (8009a38 <tcpip_inpkt+0x78>)
 8009a14:	f00c fe16 	bl	8016644 <sys_mbox_trypost>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009a1e:	6979      	ldr	r1, [r7, #20]
 8009a20:	2009      	movs	r0, #9
 8009a22:	f002 fe6d 	bl	800c700 <memp_free>
    return ERR_MEM;
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a2a:	e000      	b.n	8009a2e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009a2c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20007f08 	.word	0x20007f08
 8009a3c:	080188a8 	.word	0x080188a8
 8009a40:	08018920 	.word	0x08018920
 8009a44:	080188f8 	.word	0x080188f8

08009a48 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a58:	f003 0318 	and.w	r3, r3, #24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d006      	beq.n	8009a6e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009a60:	4a08      	ldr	r2, [pc, #32]	; (8009a84 <tcpip_input+0x3c>)
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ffab 	bl	80099c0 <tcpip_inpkt>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	e005      	b.n	8009a7a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009a6e:	4a06      	ldr	r2, [pc, #24]	; (8009a88 <tcpip_input+0x40>)
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff ffa4 	bl	80099c0 <tcpip_inpkt>
 8009a78:	4603      	mov	r3, r0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	08016465 	.word	0x08016465
 8009a88:	08015379 	.word	0x08015379

08009a8c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009a96:	4819      	ldr	r0, [pc, #100]	; (8009afc <tcpip_try_callback+0x70>)
 8009a98:	f00c fe1f 	bl	80166da <sys_mbox_valid>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <tcpip_try_callback+0x24>
 8009aa2:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <tcpip_try_callback+0x74>)
 8009aa4:	f240 125d 	movw	r2, #349	; 0x15d
 8009aa8:	4916      	ldr	r1, [pc, #88]	; (8009b04 <tcpip_try_callback+0x78>)
 8009aaa:	4817      	ldr	r0, [pc, #92]	; (8009b08 <tcpip_try_callback+0x7c>)
 8009aac:	f00d f85c 	bl	8016b68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009ab0:	2008      	movs	r0, #8
 8009ab2:	f002 fdd3 	bl	800c65c <memp_malloc>
 8009ab6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ac2:	e017      	b.n	8009af4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	4808      	ldr	r0, [pc, #32]	; (8009afc <tcpip_try_callback+0x70>)
 8009ada:	f00c fdb3 	bl	8016644 <sys_mbox_trypost>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d006      	beq.n	8009af2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	2008      	movs	r0, #8
 8009ae8:	f002 fe0a 	bl	800c700 <memp_free>
    return ERR_MEM;
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af0:	e000      	b.n	8009af4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20007f08 	.word	0x20007f08
 8009b00:	080188a8 	.word	0x080188a8
 8009b04:	08018920 	.word	0x08018920
 8009b08:	080188f8 	.word	0x080188f8

08009b0c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009b16:	f002 f919 	bl	800bd4c <lwip_init>

  tcpip_init_done = initfunc;
 8009b1a:	4a17      	ldr	r2, [pc, #92]	; (8009b78 <tcpip_init+0x6c>)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009b20:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <tcpip_init+0x70>)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009b26:	2106      	movs	r1, #6
 8009b28:	4815      	ldr	r0, [pc, #84]	; (8009b80 <tcpip_init+0x74>)
 8009b2a:	f00c fd71 	bl	8016610 <sys_mbox_new>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d006      	beq.n	8009b42 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009b34:	4b13      	ldr	r3, [pc, #76]	; (8009b84 <tcpip_init+0x78>)
 8009b36:	f240 2261 	movw	r2, #609	; 0x261
 8009b3a:	4913      	ldr	r1, [pc, #76]	; (8009b88 <tcpip_init+0x7c>)
 8009b3c:	4813      	ldr	r0, [pc, #76]	; (8009b8c <tcpip_init+0x80>)
 8009b3e:	f00d f813 	bl	8016b68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009b42:	4813      	ldr	r0, [pc, #76]	; (8009b90 <tcpip_init+0x84>)
 8009b44:	f00c fde6 	bl	8016714 <sys_mutex_new>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <tcpip_init+0x78>)
 8009b50:	f240 2265 	movw	r2, #613	; 0x265
 8009b54:	490f      	ldr	r1, [pc, #60]	; (8009b94 <tcpip_init+0x88>)
 8009b56:	480d      	ldr	r0, [pc, #52]	; (8009b8c <tcpip_init+0x80>)
 8009b58:	f00d f806 	bl	8016b68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009b5c:	2318      	movs	r3, #24
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b64:	2200      	movs	r2, #0
 8009b66:	490c      	ldr	r1, [pc, #48]	; (8009b98 <tcpip_init+0x8c>)
 8009b68:	480c      	ldr	r0, [pc, #48]	; (8009b9c <tcpip_init+0x90>)
 8009b6a:	f00c fe05 	bl	8016778 <sys_thread_new>
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20007f00 	.word	0x20007f00
 8009b7c:	20007f04 	.word	0x20007f04
 8009b80:	20007f08 	.word	0x20007f08
 8009b84:	080188a8 	.word	0x080188a8
 8009b88:	08018930 	.word	0x08018930
 8009b8c:	080188f8 	.word	0x080188f8
 8009b90:	200112d0 	.word	0x200112d0
 8009b94:	08018954 	.word	0x08018954
 8009b98:	080098c9 	.word	0x080098c9
 8009b9c:	08018978 	.word	0x08018978

08009ba0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <fs_open+0x16>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <fs_open+0x1c>
    return ERR_ARG;
 8009bb6:	f06f 030f 	mvn.w	r3, #15
 8009bba:	e028      	b.n	8009c0e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009bbc:	4b16      	ldr	r3, [pc, #88]	; (8009c18 <fs_open+0x78>)
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e020      	b.n	8009c04 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6838      	ldr	r0, [r7, #0]
 8009bca:	f7f6 fb01 	bl	80001d0 <strcmp>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d114      	bne.n	8009bfe <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	7c1a      	ldrb	r2, [r3, #16]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e007      	b.n	8009c0e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1db      	bne.n	8009bc2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009c0a:	f06f 0305 	mvn.w	r3, #5
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	08022968 	.word	0x08022968

08009c1c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	1ad3      	subs	r3, r2, r3
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8009c54:	f44f 7051 	mov.w	r0, #836	; 0x344
 8009c58:	f002 fb7e 	bl	800c358 <mem_malloc>
 8009c5c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8009c64:	f44f 7251 	mov.w	r2, #836	; 0x344
 8009c68:	2100      	movs	r1, #0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f00c ff19 	bl	8016aa2 <memset>
  }
  return ret;
 8009c70:	687b      	ldr	r3, [r7, #4]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f002 f9cb 	bl	800c024 <mem_free>
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009c9e:	22d8      	movs	r2, #216	; 0xd8
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f00c fefd 	bl	8016aa2 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2205      	movs	r2, #5
 8009cac:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009cbe:	20d8      	movs	r0, #216	; 0xd8
 8009cc0:	f002 fb4a 	bl	800c358 <mem_malloc>
 8009cc4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ffe2 	bl	8009c96 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009cd2:	687b      	ldr	r3, [r7, #4]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff ff93 	bl	8009c1c <fs_close>
    hs->handle = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff ffb6 	bl	8009c7a <http_ssi_state_free>
    hs->ssi = NULL;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <http_state_eof+0x50>
    pbuf_free(hs->req);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f003 fb91 	bl	800d448 <pbuf_free>
    hs->req = NULL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <http_state_free+0x1a>
    http_state_eof(hs);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff ffca 	bl	8009cdc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f002 f96b 	bl	800c024 <mem_free>
  }
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <http_write+0x22>
 8009d6c:	4b2c      	ldr	r3, [pc, #176]	; (8009e20 <http_write+0xc8>)
 8009d6e:	f240 2219 	movw	r2, #537	; 0x219
 8009d72:	492c      	ldr	r1, [pc, #176]	; (8009e24 <http_write+0xcc>)
 8009d74:	482c      	ldr	r0, [pc, #176]	; (8009e28 <http_write+0xd0>)
 8009d76:	f00c fef7 	bl	8016b68 <iprintf>
  len = *length;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009d80:	8afb      	ldrh	r3, [r7, #22]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <http_write+0x32>
    return ERR_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e045      	b.n	8009e16 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d90:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8009d92:	8aba      	ldrh	r2, [r7, #20]
 8009d94:	8afb      	ldrh	r3, [r7, #22]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d201      	bcs.n	8009d9e <http_write+0x46>
    len = max_len;
 8009d9a:	8abb      	ldrh	r3, [r7, #20]
 8009d9c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8009da6:	8afa      	ldrh	r2, [r7, #22]
 8009da8:	8abb      	ldrh	r3, [r7, #20]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d901      	bls.n	8009db2 <http_write+0x5a>
    len = max_len;
 8009dae:	8abb      	ldrh	r3, [r7, #20]
 8009db0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	8afa      	ldrh	r2, [r7, #22]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f008 f8d5 	bl	8011f68 <tcp_write>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009dc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dca:	d10f      	bne.n	8009dec <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d902      	bls.n	8009de6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8009de0:	2301      	movs	r3, #1
 8009de2:	82fb      	strh	r3, [r7, #22]
 8009de4:	e002      	b.n	8009dec <http_write+0x94>
      } else {
        len /= 2;
 8009de6:	8afb      	ldrh	r3, [r7, #22]
 8009de8:	085b      	lsrs	r3, r3, #1
 8009dea:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009df4:	d102      	bne.n	8009dfc <http_write+0xa4>
 8009df6:	8afb      	ldrh	r3, [r7, #22]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d8da      	bhi.n	8009db2 <http_write+0x5a>

  if (err == ERR_OK) {
 8009dfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8afa      	ldrh	r2, [r7, #22]
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009e12:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	08018e58 	.word	0x08018e58
 8009e24:	08018e90 	.word	0x08018e90
 8009e28:	08018ea0 	.word	0x08018ea0

08009e2c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00c      	beq.n	8009e5a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8009e4a:	4b1f      	ldr	r3, [pc, #124]	; (8009ec8 <http_close_or_abort_conn+0x9c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8009e50:	223f      	movs	r2, #63	; 0x3f
 8009e52:	491d      	ldr	r1, [pc, #116]	; (8009ec8 <http_close_or_abort_conn+0x9c>)
 8009e54:	68b8      	ldr	r0, [r7, #8]
 8009e56:	f7f7 fb11 	bl	800147c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f005 f945 	bl	800f0ec <tcp_arg>
  altcp_recv(pcb, NULL);
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f005 f953 	bl	800f110 <tcp_recv>
  altcp_err(pcb, NULL);
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f005 f993 	bl	800f198 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8009e72:	2200      	movs	r2, #0
 8009e74:	2100      	movs	r1, #0
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f005 f9c8 	bl	800f20c <tcp_poll>
  altcp_sent(pcb, NULL);
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f005 f968 	bl	800f154 <tcp_sent>
  if (hs != NULL) {
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8009e8a:	68b8      	ldr	r0, [r7, #8]
 8009e8c:	f7ff ff52 	bl	8009d34 <http_state_free>
  }

  if (abort_conn) {
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f004 f86a 	bl	800df70 <tcp_abort>
    return ERR_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e00f      	b.n	8009ec0 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f003 ff7b 	bl	800dd9c <tcp_close>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8009eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	4905      	ldr	r1, [pc, #20]	; (8009ecc <http_close_or_abort_conn+0xa0>)
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f005 f9a8 	bl	800f20c <tcp_poll>
  }
  return err;
 8009ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000830c 	.word	0x2000830c
 8009ecc:	0800b74b 	.word	0x0800b74b

08009ed0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8009eda:	2200      	movs	r2, #0
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff ffa4 	bl	8009e2c <http_close_or_abort_conn>
 8009ee4:	4603      	mov	r3, r0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ffe8 	bl	8009ed0 <http_close_conn>
  }
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d003      	beq.n	8009f20 <extract_uri_parameters+0x18>
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <extract_uri_parameters+0x1c>
    return (0);
 8009f20:	2300      	movs	r3, #0
 8009f22:	e04b      	b.n	8009fbc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009f28:	2300      	movs	r3, #0
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	e03f      	b.n	8009fae <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	320c      	adds	r2, #12
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8009f3e:	2126      	movs	r1, #38	; 0x26
 8009f40:	6978      	ldr	r0, [r7, #20]
 8009f42:	f00c ffff 	bl	8016f44 <strchr>
 8009f46:	6178      	str	r0, [r7, #20]
    if (pair) {
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d006      	beq.n	8009f5c <extract_uri_parameters+0x54>
      *pair = '\0';
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2200      	movs	r2, #0
 8009f52:	701a      	strb	r2, [r3, #0]
      pair++;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	e00c      	b.n	8009f76 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8009f5c:	2120      	movs	r1, #32
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f00c fff0 	bl	8016f44 <strchr>
 8009f64:	6178      	str	r0, [r7, #20]
      if (pair) {
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8009f76:	213d      	movs	r1, #61	; 0x3d
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f00c ffe3 	bl	8016f44 <strchr>
 8009f7e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <extract_uri_parameters+0x94>
      *equals = '\0';
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	1c59      	adds	r1, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	321c      	adds	r2, #28
 8009f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f9a:	e005      	b.n	8009fa8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	321c      	adds	r2, #28
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3301      	adds	r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b0f      	cmp	r3, #15
 8009fb2:	dc02      	bgt.n	8009fba <extract_uri_parameters+0xb2>
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1b9      	bne.n	8009f2e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8009fba:	693b      	ldr	r3, [r7, #16]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8009fc4:	b590      	push	{r4, r7, lr}
 8009fc6:	b089      	sub	sp, #36	; 0x24
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <get_tag_insert+0x1c>
 8009fd2:	4b5b      	ldr	r3, [pc, #364]	; (800a140 <get_tag_insert+0x17c>)
 8009fd4:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009fd8:	495a      	ldr	r1, [pc, #360]	; (800a144 <get_tag_insert+0x180>)
 8009fda:	485b      	ldr	r0, [pc, #364]	; (800a148 <get_tag_insert+0x184>)
 8009fdc:	f00c fdc4 	bl	8016b68 <iprintf>
  ssi = hs->ssi;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <get_tag_insert+0x36>
 8009fec:	4b54      	ldr	r3, [pc, #336]	; (800a140 <get_tag_insert+0x17c>)
 8009fee:	f240 3206 	movw	r2, #774	; 0x306
 8009ff2:	4956      	ldr	r1, [pc, #344]	; (800a14c <get_tag_insert+0x188>)
 8009ff4:	4854      	ldr	r0, [pc, #336]	; (800a148 <get_tag_insert+0x184>)
 8009ff6:	f00c fdb7 	bl	8016b68 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	8a9b      	ldrh	r3, [r3, #20]
 8009ffe:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a006:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800a008:	4b51      	ldr	r3, [pc, #324]	; (800a150 <get_tag_insert+0x18c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d034      	beq.n	800a07a <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800a010:	4b50      	ldr	r3, [pc, #320]	; (800a154 <get_tag_insert+0x190>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d030      	beq.n	800a07a <get_tag_insert+0xb6>
 800a018:	4b4f      	ldr	r3, [pc, #316]	; (800a158 <get_tag_insert+0x194>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d02c      	beq.n	800a07a <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a020:	2300      	movs	r3, #0
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	e024      	b.n	800a070 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f103 0018 	add.w	r0, r3, #24
 800a02c:	4b49      	ldr	r3, [pc, #292]	; (800a154 <get_tag_insert+0x190>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4619      	mov	r1, r3
 800a03a:	f7f6 f8c9 	bl	80001d0 <strcmp>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d112      	bne.n	800a06a <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800a044:	4b42      	ldr	r3, [pc, #264]	; (800a150 <get_tag_insert+0x18c>)
 800a046:	681c      	ldr	r4, [r3, #0]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	3314      	adds	r3, #20
 800a052:	89fa      	ldrh	r2, [r7, #14]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	47a0      	blx	r4
 800a060:	4603      	mov	r3, r0
 800a062:	461a      	mov	r2, r3
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800a068:	e066      	b.n	800a138 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	3301      	adds	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	4b39      	ldr	r3, [pc, #228]	; (800a158 <get_tag_insert+0x194>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	429a      	cmp	r2, r3
 800a078:	dbd5      	blt.n	800a026 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3318      	adds	r3, #24
 800a07e:	4618      	mov	r0, r3
 800a080:	f7f6 f8b0 	bl	80001e4 <strlen>
 800a084:	4603      	mov	r3, r0
 800a086:	f240 3206 	movw	r2, #774	; 0x306
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d81b      	bhi.n	800a0c6 <get_tag_insert+0x102>
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3318      	adds	r3, #24
 800a092:	4618      	mov	r0, r3
 800a094:	f7f6 f8a6 	bl	80001e4 <strlen>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d813      	bhi.n	800a0c6 <get_tag_insert+0x102>
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	3318      	adds	r3, #24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f6 f89e 	bl	80001e4 <strlen>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f240 3206 	movw	r2, #774	; 0x306
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d806      	bhi.n	800a0c0 <get_tag_insert+0xfc>
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	3318      	adds	r3, #24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7f6 f894 	bl	80001e4 <strlen>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	e003      	b.n	800a0c8 <get_tag_insert+0x104>
 800a0c0:	f240 3307 	movw	r3, #775	; 0x307
 800a0c4:	e000      	b.n	800a0c8 <get_tag_insert+0x104>
 800a0c6:	2309      	movs	r3, #9
 800a0c8:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	3321      	adds	r3, #33	; 0x21
 800a0ce:	2212      	movs	r2, #18
 800a0d0:	4922      	ldr	r1, [pc, #136]	; (800a15c <get_tag_insert+0x198>)
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f00c fcbd 	bl	8016a52 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f00c fcb4 	bl	8016a52 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	3312      	adds	r3, #18
 800a0ee:	3320      	adds	r3, #32
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	2207      	movs	r2, #7
 800a0f8:	4919      	ldr	r1, [pc, #100]	; (800a160 <get_tag_insert+0x19c>)
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f00c fca9 	bl	8016a52 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	3319      	adds	r3, #25
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4413      	add	r3, r2
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	3321      	adds	r3, #33	; 0x21
 800a112:	4618      	mov	r0, r3
 800a114:	f7f6 f866 	bl	80001e4 <strlen>
 800a118:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a120:	d306      	bcc.n	800a130 <get_tag_insert+0x16c>
 800a122:	4b07      	ldr	r3, [pc, #28]	; (800a140 <get_tag_insert+0x17c>)
 800a124:	f240 323f 	movw	r2, #831	; 0x33f
 800a128:	490e      	ldr	r1, [pc, #56]	; (800a164 <get_tag_insert+0x1a0>)
 800a12a:	4807      	ldr	r0, [pc, #28]	; (800a148 <get_tag_insert+0x184>)
 800a12c:	f00c fd1c 	bl	8016b68 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	b29a      	uxth	r2, r3
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	825a      	strh	r2, [r3, #18]
}
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd90      	pop	{r4, r7, pc}
 800a13e:	bf00      	nop
 800a140:	08018e58 	.word	0x08018e58
 800a144:	08018ec8 	.word	0x08018ec8
 800a148:	08018ea0 	.word	0x08018ea0
 800a14c:	08018ed4 	.word	0x08018ed4
 800a150:	2000834c 	.word	0x2000834c
 800a154:	20008354 	.word	0x20008354
 800a158:	20008350 	.word	0x20008350
 800a15c:	08018ee0 	.word	0x08018ee0
 800a160:	08018ef4 	.word	0x08018ef4
 800a164:	08018efc 	.word	0x08018efc

0800a168 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800a172:	4a55      	ldr	r2, [pc, #340]	; (800a2c8 <get_http_headers+0x160>)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d110      	bne.n	800a1b2 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a190:	4a4e      	ldr	r2, [pc, #312]	; (800a2cc <get_http_headers+0x164>)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800a198:	4a4d      	ldr	r2, [pc, #308]	; (800a2d0 <get_http_headers+0x168>)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800a1b0:	e087      	b.n	800a2c2 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800a1b2:	4948      	ldr	r1, [pc, #288]	; (800a2d4 <get_http_headers+0x16c>)
 800a1b4:	6838      	ldr	r0, [r7, #0]
 800a1b6:	f00c feff 	bl	8016fb8 <strstr>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d004      	beq.n	800a1ca <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a1c0:	4a42      	ldr	r2, [pc, #264]	; (800a2cc <get_http_headers+0x164>)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a1c8:	e01b      	b.n	800a202 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800a1ca:	4943      	ldr	r1, [pc, #268]	; (800a2d8 <get_http_headers+0x170>)
 800a1cc:	6838      	ldr	r0, [r7, #0]
 800a1ce:	f00c fef3 	bl	8016fb8 <strstr>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800a1d8:	4a40      	ldr	r2, [pc, #256]	; (800a2dc <get_http_headers+0x174>)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a1e0:	e00f      	b.n	800a202 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800a1e2:	493f      	ldr	r1, [pc, #252]	; (800a2e0 <get_http_headers+0x178>)
 800a1e4:	6838      	ldr	r0, [r7, #0]
 800a1e6:	f00c fee7 	bl	8016fb8 <strstr>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800a1f0:	4a3c      	ldr	r2, [pc, #240]	; (800a2e4 <get_http_headers+0x17c>)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a1f8:	e003      	b.n	800a202 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800a1fa:	4a3b      	ldr	r2, [pc, #236]	; (800a2e8 <get_http_headers+0x180>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800a202:	213f      	movs	r1, #63	; 0x3f
 800a204:	6838      	ldr	r0, [r7, #0]
 800a206:	f00c fe9d 	bl	8016f44 <strchr>
 800a20a:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <get_http_headers+0xb0>
    *vars = '\0';
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2200      	movs	r2, #0
 800a216:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800a21c:	212e      	movs	r1, #46	; 0x2e
 800a21e:	6838      	ldr	r0, [r7, #0]
 800a220:	f00c fe90 	bl	8016f44 <strchr>
 800a224:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a226:	e007      	b.n	800a238 <get_http_headers+0xd0>
    ext = tmp + 1;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	3301      	adds	r3, #1
 800a22c:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800a22e:	212e      	movs	r1, #46	; 0x2e
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f00c fe87 	bl	8016f44 <strchr>
 800a236:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1f4      	bne.n	800a228 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d014      	beq.n	800a26e <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	e00d      	b.n	800a266 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800a24a:	4a28      	ldr	r2, [pc, #160]	; (800a2ec <get_http_headers+0x184>)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	4618      	mov	r0, r3
 800a256:	f001 fcd1 	bl	800bbfc <lwip_stricmp>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	3301      	adds	r3, #1
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b13      	cmp	r3, #19
 800a26a:	d9ee      	bls.n	800a24a <get_http_headers+0xe2>
 800a26c:	e003      	b.n	800a276 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800a26e:	2314      	movs	r3, #20
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e000      	b.n	800a276 <get_http_headers+0x10e>
        break;
 800a274:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <get_http_headers+0x11a>
    *vars = '?';
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	223f      	movs	r2, #63	; 0x3f
 800a280:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b13      	cmp	r3, #19
 800a286:	d808      	bhi.n	800a29a <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800a288:	4a18      	ldr	r2, [pc, #96]	; (800a2ec <get_http_headers+0x184>)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	4413      	add	r3, r2
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a298:	e00b      	b.n	800a2b2 <get_http_headers+0x14a>
  } else if (!ext) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <get_http_headers+0x188>)
 800a2a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a2a8:	e003      	b.n	800a2b2 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a11      	ldr	r2, [pc, #68]	; (800a2f4 <get_http_headers+0x18c>)
 800a2ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	08018ad8 	.word	0x08018ad8
 800a2cc:	0801899c 	.word	0x0801899c
 800a2d0:	08018b18 	.word	0x08018b18
 800a2d4:	08018f0c 	.word	0x08018f0c
 800a2d8:	08018f10 	.word	0x08018f10
 800a2dc:	080189bc 	.word	0x080189bc
 800a2e0:	08018f14 	.word	0x08018f14
 800a2e4:	080189d8 	.word	0x080189d8
 800a2e8:	08018988 	.word	0x08018988
 800a2ec:	0802297c 	.word	0x0802297c
 800a2f0:	08018cac 	.word	0x08018cac
 800a2f4:	08018f18 	.word	0x08018f18

0800a2f8 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <get_http_content_length+0x24>
 800a30e:	4b27      	ldr	r3, [pc, #156]	; (800a3ac <get_http_content_length+0xb4>)
 800a310:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800a314:	4926      	ldr	r1, [pc, #152]	; (800a3b0 <get_http_content_length+0xb8>)
 800a316:	4827      	ldr	r0, [pc, #156]	; (800a3b4 <get_http_content_length+0xbc>)
 800a318:	f00c fc26 	bl	8016b68 <iprintf>

  add_content_len = 0;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10c      	bne.n	800a342 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d008      	beq.n	800a342 <get_http_content_length+0x4a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	7c1b      	ldrb	r3, [r3, #16]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <get_http_content_length+0x4a>
      add_content_len = 1;
 800a33e:	2301      	movs	r3, #1
 800a340:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d025      	beq.n	800a394 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	461a      	mov	r2, r3
 800a356:	210c      	movs	r1, #12
 800a358:	f001 fc84 	bl	800bc64 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	33c4      	adds	r3, #196	; 0xc4
 800a360:	4618      	mov	r0, r3
 800a362:	f7f5 ff3f 	bl	80001e4 <strlen>
 800a366:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b09      	cmp	r3, #9
 800a36c:	d810      	bhi.n	800a390 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	33c0      	adds	r3, #192	; 0xc0
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	3304      	adds	r3, #4
 800a378:	2203      	movs	r2, #3
 800a37a:	490f      	ldr	r1, [pc, #60]	; (800a3b8 <get_http_content_length+0xc0>)
 800a37c:	4618      	mov	r0, r3
 800a37e:	f00c fb68 	bl	8016a52 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800a38e:	e001      	b.n	800a394 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800a39a:	4a08      	ldr	r2, [pc, #32]	; (800a3bc <get_http_content_length+0xc4>)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	08018e58 	.word	0x08018e58
 800a3b0:	08018f38 	.word	0x08018f38
 800a3b4:	08018ea0 	.word	0x08018ea0
 800a3b8:	08018f4c 	.word	0x08018f4c
 800a3bc:	08018a68 	.word	0x08018a68

0800a3c0 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800a3d8:	6838      	ldr	r0, [r7, #0]
 800a3da:	f7ff ff8d 	bl	800a2f8 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a3e4:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800a3e6:	8bfb      	ldrh	r3, [r7, #30]
 800a3e8:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a3ea:	e08b      	b.n	800a504 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	322c      	adds	r2, #44	; 0x2c
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7f5 fef1 	bl	80001e4 <strlen>
 800a402:	4603      	mov	r3, r0
 800a404:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800a406:	8b7b      	ldrh	r3, [r7, #26]
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a40e:	1a9a      	subs	r2, r3, r2
 800a410:	8bfb      	ldrh	r3, [r7, #30]
 800a412:	4293      	cmp	r3, r2
 800a414:	bfa8      	it	ge
 800a416:	4613      	movge	r3, r2
 800a418:	b29b      	uxth	r3, r3
 800a41a:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a422:	461a      	mov	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	322c      	adds	r2, #44	; 0x2c
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a432:	4413      	add	r3, r2
 800a434:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800a436:	89fb      	ldrh	r3, [r7, #14]
 800a438:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800a43a:	2300      	movs	r3, #0
 800a43c:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a444:	2b03      	cmp	r3, #3
 800a446:	d103      	bne.n	800a450 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800a448:	7f3b      	ldrb	r3, [r7, #28]
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a456:	2b03      	cmp	r3, #3
 800a458:	d803      	bhi.n	800a462 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800a45a:	7f3b      	ldrb	r3, [r7, #28]
 800a45c:	f043 0302 	orr.w	r3, r3, #2
 800a460:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800a462:	7f3b      	ldrb	r3, [r7, #28]
 800a464:	f107 020e 	add.w	r2, r7, #14
 800a468:	6979      	ldr	r1, [r7, #20]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fc74 	bl	8009d58 <http_write>
 800a470:	4603      	mov	r3, r0
 800a472:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800a474:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d106      	bne.n	800a48a <http_send_headers+0xca>
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	8a7a      	ldrh	r2, [r7, #18]
 800a480:	429a      	cmp	r2, r3
 800a482:	d002      	beq.n	800a48a <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800a484:	2301      	movs	r3, #1
 800a486:	777b      	strb	r3, [r7, #29]
 800a488:	e005      	b.n	800a496 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800a48a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800a49c:	89fb      	ldrh	r3, [r7, #14]
 800a49e:	4413      	add	r3, r2
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800a4a8:	89fb      	ldrh	r3, [r7, #14]
 800a4aa:	8bfa      	ldrh	r2, [r7, #30]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800a4b6:	8b7a      	ldrh	r2, [r7, #26]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d123      	bne.n	800a504 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a4cc:	e007      	b.n	800a4de <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d809      	bhi.n	800a4fc <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	322c      	adds	r2, #44	; 0x2c
 800a4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0e8      	beq.n	800a4ce <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a504:	8bfb      	ldrh	r3, [r7, #30]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d008      	beq.n	800a51c <http_send_headers+0x15c>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a510:	2b04      	cmp	r3, #4
 800a512:	d803      	bhi.n	800a51c <http_send_headers+0x15c>
 800a514:	89fb      	ldrh	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f47f af68 	bne.w	800a3ec <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a522:	2b04      	cmp	r3, #4
 800a524:	d90f      	bls.n	800a546 <http_send_headers+0x186>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10b      	bne.n	800a546 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f819 	bl	800a568 <http_check_eof>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800a53c:	2302      	movs	r3, #2
 800a53e:	777b      	strb	r3, [r7, #29]
 800a540:	e001      	b.n	800a546 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800a542:	2303      	movs	r3, #3
 800a544:	e00b      	b.n	800a55e <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d903      	bls.n	800a558 <http_send_headers+0x198>
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800a558:	2302      	movs	r3, #2
 800a55a:	e000      	b.n	800a55e <http_send_headers+0x19e>
  }
  return data_to_send;
 800a55c:	7f7b      	ldrb	r3, [r7, #29]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3720      	adds	r7, #32
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d105      	bne.n	800a586 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff fcb6 	bl	8009eee <http_eof>
    return 0;
 800a582:	2300      	movs	r3, #0
 800a584:	e016      	b.n	800a5b4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7ff fb50 	bl	8009c30 <fs_bytes_left>
 800a590:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc05      	bgt.n	800a5a4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fca7 	bl	8009eee <http_eof>
    return 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e007      	b.n	800a5b4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <http_check_eof+0x54>)
 800a5a6:	f240 429d 	movw	r2, #1181	; 0x49d
 800a5aa:	4905      	ldr	r1, [pc, #20]	; (800a5c0 <http_check_eof+0x58>)
 800a5ac:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <http_check_eof+0x5c>)
 800a5ae:	f00c fadb 	bl	8016b68 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a5b2:	2301      	movs	r3, #1
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	08018e58 	.word	0x08018e58
 800a5c0:	08018f50 	.word	0x08018f50
 800a5c4:	08018ea0 	.word	0x08018ea0

0800a5c8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d803      	bhi.n	800a5ea <http_send_data_nonssi+0x22>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	e001      	b.n	800a5ee <http_send_data_nonssi+0x26>
 800a5ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5ee:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	6999      	ldr	r1, [r3, #24]
 800a5f4:	f107 020c 	add.w	r2, r7, #12
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fbac 	bl	8009d58 <http_write>
 800a600:	4603      	mov	r3, r0
 800a602:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10d      	bne.n	800a628 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	89ba      	ldrh	r2, [r7, #12]
 800a616:	441a      	add	r2, r3
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	89ba      	ldrh	r2, [r7, #12]
 800a622:	1a9a      	subs	r2, r3, r2
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <http_send_data_ssi+0x2c>
 800a652:	4b89      	ldr	r3, [pc, #548]	; (800a878 <http_send_data_ssi+0x244>)
 800a654:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a658:	4988      	ldr	r1, [pc, #544]	; (800a87c <http_send_data_ssi+0x248>)
 800a65a:	4889      	ldr	r0, [pc, #548]	; (800a880 <http_send_data_ssi+0x24c>)
 800a65c:	f00c fa84 	bl	8016b68 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a666:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	429a      	cmp	r2, r3
 800a672:	f240 82c5 	bls.w	800ac00 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a684:	4293      	cmp	r3, r2
 800a686:	dc06      	bgt.n	800a696 <http_send_data_ssi+0x62>
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b29b      	uxth	r3, r3
 800a694:	e001      	b.n	800a69a <http_send_data_ssi+0x66>
 800a696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a69a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6999      	ldr	r1, [r3, #24]
 800a6a0:	f107 020e 	add.w	r2, r7, #14
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff fb56 	bl	8009d58 <http_write>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10d      	bne.n	800a6d4 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	89fa      	ldrh	r2, [r7, #14]
 800a6c2:	441a      	add	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	89fa      	ldrh	r2, [r7, #14]
 800a6ce:	1a9a      	subs	r2, r3, r2
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f040 8290 	bne.w	800ac00 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	e2d6      	b.n	800ac92 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <http_send_data_ssi+0xba>
      return data_to_send;
 800a6ea:	7dbb      	ldrb	r3, [r7, #22]
 800a6ec:	e2d1      	b.n	800ac92 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	f200 8282 	bhi.w	800abfe <http_send_data_ssi+0x5ca>
 800a6fa:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <http_send_data_ssi+0xcc>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a715 	.word	0x0800a715
 800a704:	0800a76f 	.word	0x0800a76f
 800a708:	0800a7e1 	.word	0x0800a7e1
 800a70c:	0800a929 	.word	0x0800a929
 800a710:	0800aa9f 	.word	0x0800aa9f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a714:	2300      	movs	r3, #0
 800a716:	757b      	strb	r3, [r7, #21]
 800a718:	e01b      	b.n	800a752 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	7d7b      	ldrb	r3, [r7, #21]
 800a722:	4958      	ldr	r1, [pc, #352]	; (800a884 <http_send_data_ssi+0x250>)
 800a724:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d10e      	bne.n	800a74c <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	7d7a      	ldrb	r2, [r7, #21]
 800a732:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_index = 1;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2201      	movs	r2, #1
 800a740:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800a74a:	e005      	b.n	800a758 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a74c:	7d7b      	ldrb	r3, [r7, #21]
 800a74e:	3301      	adds	r3, #1
 800a750:	757b      	strb	r3, [r7, #21]
 800a752:	7d7b      	ldrb	r3, [r7, #21]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d9e0      	bls.n	800a71a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	1e5a      	subs	r2, r3, #1
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	601a      	str	r2, [r3, #0]
        break;
 800a76c:	e248      	b.n	800ac00 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	7d9b      	ldrb	r3, [r3, #22]
 800a772:	461a      	mov	r2, r3
 800a774:	4b43      	ldr	r3, [pc, #268]	; (800a884 <http_send_data_ssi+0x250>)
 800a776:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	8a12      	ldrh	r2, [r2, #16]
 800a77e:	4413      	add	r3, r2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d107      	bne.n	800a796 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2200      	movs	r2, #0
 800a78a:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 800a794:	e234      	b.n	800ac00 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	7d9b      	ldrb	r3, [r3, #22]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4b38      	ldr	r3, [pc, #224]	; (800a884 <http_send_data_ssi+0x250>)
 800a7a4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800a7a8:	6939      	ldr	r1, [r7, #16]
 800a7aa:	8a09      	ldrh	r1, [r1, #16]
 800a7ac:	440b      	add	r3, r1
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d106      	bne.n	800a7c2 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	8a1b      	ldrh	r3, [r3, #16]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	821a      	strh	r2, [r3, #16]
 800a7c0:	e003      	b.n	800a7ca <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	1e5a      	subs	r2, r3, #1
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	601a      	str	r2, [r3, #0]
        }
        break;
 800a7de:	e20f      	b.n	800ac00 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	8a1b      	ldrh	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11e      	bne.n	800a826 <http_send_data_ssi+0x1f2>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d00e      	beq.n	800a810 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a7f8:	2b09      	cmp	r3, #9
 800a7fa:	d009      	beq.n	800a810 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b0a      	cmp	r3, #10
 800a804:	d004      	beq.n	800a810 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a80c:	2b0d      	cmp	r3, #13
 800a80e:	d10a      	bne.n	800a826 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	1e5a      	subs	r2, r3, #1
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	601a      	str	r2, [r3, #0]
          break;
 800a824:	e1ec      	b.n	800ac00 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	7d9b      	ldrb	r3, [r3, #22]
 800a830:	4914      	ldr	r1, [pc, #80]	; (800a884 <http_send_data_ssi+0x250>)
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	440b      	add	r3, r1
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d013      	beq.n	800a866 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800a844:	2b20      	cmp	r3, #32
 800a846:	d00e      	beq.n	800a866 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b09      	cmp	r3, #9
 800a850:	d009      	beq.n	800a866 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a858:	2b0a      	cmp	r3, #10
 800a85a:	d004      	beq.n	800a866 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b0d      	cmp	r3, #13
 800a864:	d13f      	bne.n	800a8e6 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	8a1b      	ldrh	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10c      	bne.n	800a888 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          if (ssi->tag_index == 0) {
 800a876:	e04c      	b.n	800a912 <http_send_data_ssi+0x2de>
 800a878:	08018e58 	.word	0x08018e58
 800a87c:	08018ed4 	.word	0x08018ed4
 800a880:	08018ea0 	.word	0x08018ea0
 800a884:	08022a58 	.word	0x08022a58
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2203      	movs	r2, #3
 800a88c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	8a1b      	ldrh	r3, [r3, #16]
 800a894:	2bff      	cmp	r3, #255	; 0xff
 800a896:	d906      	bls.n	800a8a6 <http_send_data_ssi+0x272>
 800a898:	4b92      	ldr	r3, [pc, #584]	; (800aae4 <http_send_data_ssi+0x4b0>)
 800a89a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a89e:	4992      	ldr	r1, [pc, #584]	; (800aae8 <http_send_data_ssi+0x4b4>)
 800a8a0:	4892      	ldr	r0, [pc, #584]	; (800aaec <http_send_data_ssi+0x4b8>)
 800a8a2:	f00c f961 	bl	8016b68 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	8a1b      	ldrh	r3, [r3, #16]
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	8a1b      	ldrh	r3, [r3, #16]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	7d9b      	ldrb	r3, [r3, #22]
 800a8c8:	4989      	ldr	r1, [pc, #548]	; (800aaf0 <http_send_data_ssi+0x4bc>)
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	440b      	add	r3, r1
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d103      	bne.n	800a8de <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800a8dc:	e019      	b.n	800a912 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800a8e4:	e015      	b.n	800a912 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	8a1b      	ldrh	r3, [r3, #16]
 800a8ea:	2b07      	cmp	r3, #7
 800a8ec:	d80d      	bhi.n	800a90a <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	8a1b      	ldrh	r3, [r3, #16]
 800a8f6:	1c59      	adds	r1, r3, #1
 800a8f8:	b288      	uxth	r0, r1
 800a8fa:	6939      	ldr	r1, [r7, #16]
 800a8fc:	8208      	strh	r0, [r1, #16]
 800a8fe:	4619      	mov	r1, r3
 800a900:	7812      	ldrb	r2, [r2, #0]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	440b      	add	r3, r1
 800a906:	761a      	strb	r2, [r3, #24]
 800a908:	e003      	b.n	800a912 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	1e5a      	subs	r2, r3, #1
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	601a      	str	r2, [r3, #0]

        break;
 800a926:	e16b      	b.n	800ac00 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	8a1b      	ldrh	r3, [r3, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d11e      	bne.n	800a96e <http_send_data_ssi+0x33a>
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b20      	cmp	r3, #32
 800a938:	d00e      	beq.n	800a958 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a940:	2b09      	cmp	r3, #9
 800a942:	d009      	beq.n	800a958 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b0a      	cmp	r3, #10
 800a94c:	d004      	beq.n	800a958 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a954:	2b0d      	cmp	r3, #13
 800a956:	d10a      	bne.n	800a96e <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	1e5a      	subs	r2, r3, #1
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	601a      	str	r2, [r3, #0]
          break;
 800a96c:	e148      	b.n	800ac00 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	781a      	ldrb	r2, [r3, #0]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	7d9b      	ldrb	r3, [r3, #22]
 800a978:	495d      	ldr	r1, [pc, #372]	; (800aaf0 <http_send_data_ssi+0x4bc>)
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	6939      	ldr	r1, [r7, #16]
 800a982:	8a09      	ldrh	r1, [r1, #16]
 800a984:	440b      	add	r3, r1
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d179      	bne.n	800aa80 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	8a1b      	ldrh	r3, [r3, #16]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	7d9b      	ldrb	r3, [r3, #22]
 800a9b0:	4a4f      	ldr	r2, [pc, #316]	; (800aaf0 <http_send_data_ssi+0x4bc>)
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	4413      	add	r3, r2
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	8a12      	ldrh	r2, [r2, #16]
 800a9bc:	4413      	add	r3, r2
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 811d 	bne.w	800ac00 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800a9cc:	6838      	ldr	r0, [r7, #0]
 800a9ce:	f7ff faf9 	bl	8009fc4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	2204      	movs	r2, #4
 800a9dc:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_end = ssi->parsed;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	f240 8101 	bls.w	800ac00 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	dc06      	bgt.n	800aa1e <http_send_data_ssi+0x3ea>
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	e001      	b.n	800aa22 <http_send_data_ssi+0x3ee>
 800aa1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa22:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6999      	ldr	r1, [r3, #24]
 800aa28:	f107 020e 	add.w	r2, r7, #14
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff f992 	bl	8009d58 <http_write>
 800aa34:	4603      	mov	r3, r0
 800aa36:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800aa38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 80df 	bne.w	800ac00 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d809      	bhi.n	800aa66 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	89fb      	ldrh	r3, [r7, #14]
 800aa60:	4413      	add	r3, r2
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	89fa      	ldrh	r2, [r7, #14]
 800aa6c:	441a      	add	r2, r3
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa76:	89fa      	ldrh	r2, [r7, #14]
 800aa78:	1a9a      	subs	r2, r3, r2
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	625a      	str	r2, [r3, #36]	; 0x24
 800aa7e:	e0bf      	b.n	800ac00 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	1e5a      	subs	r2, r3, #1
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        }
        break;
 800aa9c:	e0b0      	b.n	800ac00 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d95c      	bls.n	800ab64 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d206      	bcs.n	800aac4 <http_send_data_ssi+0x490>
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <http_send_data_ssi+0x4b0>)
 800aab8:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800aabc:	490d      	ldr	r1, [pc, #52]	; (800aaf4 <http_send_data_ssi+0x4c0>)
 800aabe:	480b      	ldr	r0, [pc, #44]	; (800aaec <http_send_data_ssi+0x4b8>)
 800aac0:	f00c f852 	bl	8016b68 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aad2:	4293      	cmp	r3, r2
 800aad4:	dc10      	bgt.n	800aaf8 <http_send_data_ssi+0x4c4>
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	e00b      	b.n	800aafc <http_send_data_ssi+0x4c8>
 800aae4:	08018e58 	.word	0x08018e58
 800aae8:	08018f88 	.word	0x08018f88
 800aaec:	08018ea0 	.word	0x08018ea0
 800aaf0:	08022a58 	.word	0x08022a58
 800aaf4:	08018fa0 	.word	0x08018fa0
 800aaf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aafc:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800aafe:	89fb      	ldrh	r3, [r7, #14]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	6999      	ldr	r1, [r3, #24]
 800ab08:	f107 020e 	add.w	r2, r7, #14
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff f922 	bl	8009d58 <http_write>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]
 800ab18:	e001      	b.n	800ab1e <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800ab1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d16c      	bne.n	800ac00 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800ab26:	2301      	movs	r3, #1
 800ab28:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d809      	bhi.n	800ab4a <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	89fb      	ldrh	r3, [r7, #14]
 800ab44:	4413      	add	r3, r2
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	89fa      	ldrh	r2, [r7, #14]
 800ab50:	441a      	add	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	89fa      	ldrh	r2, [r7, #14]
 800ab5c:	1a9a      	subs	r2, r3, r2
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24
 800ab62:	e04d      	b.n	800ac00 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	8a1a      	ldrh	r2, [r3, #16]
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	8a5b      	ldrh	r3, [r3, #18]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d30b      	bcc.n	800ab88 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	8a9b      	ldrh	r3, [r3, #20]
 800ab74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d005      	beq.n	800ab88 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800ab82:	6838      	ldr	r0, [r7, #0]
 800ab84:	f7ff fa1e 	bl	8009fc4 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	8a1a      	ldrh	r2, [r3, #16]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	8a5b      	ldrh	r3, [r3, #18]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d222      	bcs.n	800abda <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	8a5a      	ldrh	r2, [r3, #18]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	8a1b      	ldrh	r3, [r3, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	8a1b      	ldrh	r3, [r3, #16]
 800aba6:	3320      	adds	r3, #32
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	4413      	add	r3, r2
 800abac:	1c59      	adds	r1, r3, #1
 800abae:	f107 020e 	add.w	r2, r7, #14
 800abb2:	2301      	movs	r3, #1
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff f8cf 	bl	8009d58 <http_write>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800abbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d11c      	bne.n	800ac00 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	8a1a      	ldrh	r2, [r3, #16]
 800abce:	89fb      	ldrh	r3, [r7, #14]
 800abd0:	4413      	add	r3, r2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	821a      	strh	r2, [r3, #16]
 800abd8:	e012      	b.n	800ac00 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	8a9b      	ldrh	r3, [r3, #20]
 800abde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d10c      	bne.n	800ac00 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2200      	movs	r2, #0
 800abea:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800abfc:	e000      	b.n	800ac00 <http_send_data_ssi+0x5cc>
        default:
          break;
 800abfe:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d003      	beq.n	800ac12 <http_send_data_ssi+0x5de>
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <http_send_data_ssi+0x5e8>
 800ac12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f43f ad64 	beq.w	800a6e4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d034      	beq.n	800ac90 <http_send_data_ssi+0x65c>
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d92e      	bls.n	800ac90 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac40:	4293      	cmp	r3, r2
 800ac42:	dc06      	bgt.n	800ac52 <http_send_data_ssi+0x61e>
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	e001      	b.n	800ac56 <http_send_data_ssi+0x622>
 800ac52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac56:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	6999      	ldr	r1, [r3, #24]
 800ac5c:	f107 020e 	add.w	r2, r7, #14
 800ac60:	2300      	movs	r3, #0
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff f878 	bl	8009d58 <http_write>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ac6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10d      	bne.n	800ac90 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800ac74:	2301      	movs	r3, #1
 800ac76:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	89fa      	ldrh	r2, [r7, #14]
 800ac7e:	441a      	add	r2, r3
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	89fa      	ldrh	r2, [r7, #14]
 800ac8a:	1a9a      	subs	r2, r3, r2
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800ac90:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop

0800ac9c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <http_send+0x18>
    return 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	e048      	b.n	800ad46 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d812      	bhi.n	800ace4 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fb7d 	bl	800a3c0 <http_send_headers>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d007      	beq.n	800ace0 <http_send+0x44>
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d006      	beq.n	800ace4 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d801      	bhi.n	800ace4 <http_send+0x48>
      return data_to_send;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	e030      	b.n	800ad46 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d108      	bne.n	800acfe <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff fc3a 	bl	800a568 <http_check_eof>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <http_send+0x62>
      return 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	e023      	b.n	800ad46 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d006      	beq.n	800ad14 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff fc93 	bl	800a634 <http_send_data_ssi>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]
 800ad12:	e005      	b.n	800ad20 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff fc56 	bl	800a5c8 <http_send_data_nonssi>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10d      	bne.n	800ad44 <http_send+0xa8>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fe ff7f 	bl	8009c30 <fs_bytes_left>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc05      	bgt.n	800ad44 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff f8d7 	bl	8009eee <http_eof>
    return 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	e000      	b.n	800ad46 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	; (800add0 <http_get_404_file+0x80>)
 800ad5e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7fe ff19 	bl	8009ba0 <fs_open>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ad72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d024      	beq.n	800adc4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	4a15      	ldr	r2, [pc, #84]	; (800add4 <http_get_404_file+0x84>)
 800ad7e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fe ff09 	bl	8009ba0 <fs_open>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ad92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d014      	beq.n	800adc4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	4a0e      	ldr	r2, [pc, #56]	; (800add8 <http_get_404_file+0x88>)
 800ad9e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7fe fef9 	bl	8009ba0 <fs_open>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800adb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
        return NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e000      	b.n	800adc6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800adc4:	687b      	ldr	r3, [r7, #4]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	08018fb8 	.word	0x08018fb8
 800add4:	08018fc4 	.word	0x08018fc4
 800add8:	08018fd0 	.word	0x08018fd0

0800addc <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800ade4:	4b08      	ldr	r3, [pc, #32]	; (800ae08 <http_handle_post_finished+0x2c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800adea:	223f      	movs	r2, #63	; 0x3f
 800adec:	4906      	ldr	r1, [pc, #24]	; (800ae08 <http_handle_post_finished+0x2c>)
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7f6 fb44 	bl	800147c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800adf4:	2200      	movs	r2, #0
 800adf6:	4904      	ldr	r1, [pc, #16]	; (800ae08 <http_handle_post_finished+0x2c>)
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 faab 	bl	800b354 <http_find_file>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	2000830c 	.word	0x2000830c

0800ae0c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d014      	beq.n	800ae46 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	8912      	ldrh	r2, [r2, #8]
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d204      	bcs.n	800ae34 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800ae32:	e008      	b.n	800ae46 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	8912      	ldrh	r2, [r2, #8]
 800ae3e:	1a9a      	subs	r2, r3, r2
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7f6 fade 	bl	8001410 <httpd_post_receive_data>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	e001      	b.n	800ae5e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800ae5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff ffaf 	bl	800addc <http_handle_post_finished>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	e000      	b.n	800ae84 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b092      	sub	sp, #72	; 0x48
 800ae90:	af04      	add	r7, sp, #16
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800ae9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9c:	1c58      	adds	r0, r3, #1
 800ae9e:	887a      	ldrh	r2, [r7, #2]
 800aea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aea2:	1c59      	adds	r1, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	1acb      	subs	r3, r1, r3
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4965      	ldr	r1, [pc, #404]	; (800b044 <http_post_request+0x1b8>)
 800aeae:	f000 fe6f 	bl	800bb90 <lwip_strnstr>
 800aeb2:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 80be 	beq.w	800b038 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800aebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebe:	1c58      	adds	r0, r3, #1
 800aec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec2:	3301      	adds	r3, #1
 800aec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	461a      	mov	r2, r3
 800aeca:	495f      	ldr	r1, [pc, #380]	; (800b048 <http_post_request+0x1bc>)
 800aecc:	f000 fe60 	bl	800bb90 <lwip_strnstr>
 800aed0:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 80ac 	beq.w	800b032 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	3310      	adds	r3, #16
 800aede:	220a      	movs	r2, #10
 800aee0:	495a      	ldr	r1, [pc, #360]	; (800b04c <http_post_request+0x1c0>)
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 fe54 	bl	800bb90 <lwip_strnstr>
 800aee8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 80a0 	beq.w	800b032 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	3310      	adds	r3, #16
 800aef6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800aef8:	69f8      	ldr	r0, [r7, #28]
 800aefa:	f00b fc7b 	bl	80167f4 <atoi>
 800aefe:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800af00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10b      	bne.n	800af1e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b30      	cmp	r3, #48	; 0x30
 800af0c:	d104      	bne.n	800af18 <http_post_request+0x8c>
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	3301      	adds	r3, #1
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b0d      	cmp	r3, #13
 800af16:	d002      	beq.n	800af1e <http_post_request+0x92>
            content_len = -1;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	2b00      	cmp	r3, #0
 800af22:	f2c0 8083 	blt.w	800b02c <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800af26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af28:	3301      	adds	r3, #1
 800af2a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800af2c:	887a      	ldrh	r2, [r7, #2]
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	1d19      	adds	r1, r3, #4
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	1acb      	subs	r3, r1, r3
 800af36:	429a      	cmp	r2, r3
 800af38:	db05      	blt.n	800af46 <http_post_request+0xba>
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	1d1a      	adds	r2, r3, #4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	e000      	b.n	800af48 <http_post_request+0xbc>
 800af46:	887b      	ldrh	r3, [r7, #2]
 800af48:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800af4a:	887a      	ldrh	r2, [r7, #2]
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	1d19      	adds	r1, r3, #4
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	1acb      	subs	r3, r1, r3
 800af54:	429a      	cmp	r2, r3
 800af56:	db05      	blt.n	800af64 <http_post_request+0xd8>
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	b29b      	uxth	r3, r3
 800af62:	e000      	b.n	800af66 <http_post_request+0xda>
 800af64:	887b      	ldrh	r3, [r7, #2]
 800af66:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800af68:	2301      	movs	r3, #1
 800af6a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800af6c:	4b38      	ldr	r3, [pc, #224]	; (800b050 <http_post_request+0x1c4>)
 800af6e:	2200      	movs	r2, #0
 800af70:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800af78:	8aba      	ldrh	r2, [r7, #20]
 800af7a:	f107 0312 	add.w	r3, r7, #18
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	233f      	movs	r3, #63	; 0x3f
 800af82:	9302      	str	r3, [sp, #8]
 800af84:	4b32      	ldr	r3, [pc, #200]	; (800b050 <http_post_request+0x1c4>)
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	4613      	mov	r3, r2
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af92:	68b8      	ldr	r0, [r7, #8]
 800af94:	f7f6 fa12 	bl	80013bc <httpd_post_begin>
 800af98:	4603      	mov	r3, r0
 800af9a:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800af9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d13c      	bne.n	800b01e <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800afa8:	8afb      	ldrh	r3, [r7, #22]
 800afaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800afac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800afb4:	e007      	b.n	800afc6 <http_post_request+0x13a>
              start_offset -= q->len;
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	895b      	ldrh	r3, [r3, #10]
 800afba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d004      	beq.n	800afd6 <http_post_request+0x14a>
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	895b      	ldrh	r3, [r3, #10]
 800afd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d2ef      	bcs.n	800afb6 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00d      	beq.n	800aff8 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800afdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afde:	4619      	mov	r1, r3
 800afe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe2:	f002 f9ab 	bl	800d33c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800afe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe8:	f002 fad4 	bl	800d594 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800afec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afee:	68b8      	ldr	r0, [r7, #8]
 800aff0:	f7ff ff0c 	bl	800ae0c <http_post_rxpbuf>
 800aff4:	4603      	mov	r3, r0
 800aff6:	e021      	b.n	800b03c <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10b      	bne.n	800b01a <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800b002:	2241      	movs	r2, #65	; 0x41
 800b004:	2100      	movs	r1, #0
 800b006:	2000      	movs	r0, #0
 800b008:	f001 ff3a 	bl	800ce80 <pbuf_alloc>
 800b00c:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800b00e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b010:	68b8      	ldr	r0, [r7, #8]
 800b012:	f7ff fefb 	bl	800ae0c <http_post_rxpbuf>
 800b016:	4603      	mov	r3, r0
 800b018:	e010      	b.n	800b03c <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e00e      	b.n	800b03c <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800b01e:	2200      	movs	r2, #0
 800b020:	490b      	ldr	r1, [pc, #44]	; (800b050 <http_post_request+0x1c4>)
 800b022:	68b8      	ldr	r0, [r7, #8]
 800b024:	f000 f996 	bl	800b354 <http_find_file>
 800b028:	4603      	mov	r3, r0
 800b02a:	e007      	b.n	800b03c <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800b02c:	f06f 030f 	mvn.w	r3, #15
 800b030:	e004      	b.n	800b03c <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800b032:	f06f 030f 	mvn.w	r3, #15
 800b036:	e001      	b.n	800b03c <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800b038:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3738      	adds	r7, #56	; 0x38
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	08018fdc 	.word	0x08018fdc
 800b048:	08018a68 	.word	0x08018a68
 800b04c:	08018f4c 	.word	0x08018f4c
 800b050:	2000830c 	.word	0x2000830c

0800b054 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b092      	sub	sp, #72	; 0x48
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <http_parse_request+0x24>
 800b06a:	4b87      	ldr	r3, [pc, #540]	; (800b288 <http_parse_request+0x234>)
 800b06c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b070:	4986      	ldr	r1, [pc, #536]	; (800b28c <http_parse_request+0x238>)
 800b072:	4887      	ldr	r0, [pc, #540]	; (800b290 <http_parse_request+0x23c>)
 800b074:	f00b fd78 	bl	8016b68 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <http_parse_request+0x38>
 800b07e:	4b82      	ldr	r3, [pc, #520]	; (800b288 <http_parse_request+0x234>)
 800b080:	f240 72af 	movw	r2, #1967	; 0x7af
 800b084:	4983      	ldr	r1, [pc, #524]	; (800b294 <http_parse_request+0x240>)
 800b086:	4882      	ldr	r0, [pc, #520]	; (800b290 <http_parse_request+0x23c>)
 800b088:	f00b fd6e 	bl	8016b68 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d103      	bne.n	800b09c <http_parse_request+0x48>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b09c:	f06f 0307 	mvn.w	r3, #7
 800b0a0:	e0ed      	b.n	800b27e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d103      	bne.n	800b0b2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ae:	621a      	str	r2, [r3, #32]
 800b0b0:	e005      	b.n	800b0be <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f002 fa93 	bl	800d5e4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b0be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0c0:	f002 fa68 	bl	800d594 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d012      	beq.n	800b0f4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	891b      	ldrh	r3, [r3, #8]
 800b0d4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	bf28      	it	cs
 800b0dc:	4613      	movcs	r3, r2
 800b0de:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	6a18      	ldr	r0, [r3, #32]
 800b0e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	496b      	ldr	r1, [pc, #428]	; (800b298 <http_parse_request+0x244>)
 800b0ea:	f002 fba3 	bl	800d834 <pbuf_copy_partial>
    data = httpd_req_buf;
 800b0ee:	4b6a      	ldr	r3, [pc, #424]	; (800b298 <http_parse_request+0x244>)
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f2:	e005      	b.n	800b100 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	895b      	ldrh	r3, [r3, #10]
 800b0fe:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b100:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b102:	2b06      	cmp	r3, #6
 800b104:	f240 80a1 	bls.w	800b24a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b108:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b10a:	461a      	mov	r2, r3
 800b10c:	4963      	ldr	r1, [pc, #396]	; (800b29c <http_parse_request+0x248>)
 800b10e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b110:	f000 fd3e 	bl	800bb90 <lwip_strnstr>
 800b114:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8096 	beq.w	800b24a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b126:	2204      	movs	r2, #4
 800b128:	495d      	ldr	r1, [pc, #372]	; (800b2a0 <http_parse_request+0x24c>)
 800b12a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b12c:	f00b ff1f 	bl	8016f6e <strncmp>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d103      	bne.n	800b13e <http_parse_request+0xea>
        sp1 = data + 3;
 800b136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b138:	3303      	adds	r3, #3
 800b13a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b13c:	e014      	b.n	800b168 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800b13e:	2205      	movs	r2, #5
 800b140:	4958      	ldr	r1, [pc, #352]	; (800b2a4 <http_parse_request+0x250>)
 800b142:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b144:	f00b ff13 	bl	8016f6e <strncmp>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800b14e:	2301      	movs	r3, #1
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800b152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b154:	3304      	adds	r3, #4
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b158:	e006      	b.n	800b168 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800b15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b15c:	3304      	adds	r3, #4
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800b162:	f06f 030f 	mvn.w	r3, #15
 800b166:	e08a      	b.n	800b27e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	b29b      	uxth	r3, r3
 800b172:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	3301      	adds	r3, #1
 800b17c:	8bfa      	ldrh	r2, [r7, #30]
 800b17e:	494a      	ldr	r1, [pc, #296]	; (800b2a8 <http_parse_request+0x254>)
 800b180:	4618      	mov	r0, r3
 800b182:	f000 fd05 	bl	800bb90 <lwip_strnstr>
 800b186:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10c      	bne.n	800b1a8 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	3301      	adds	r3, #1
 800b192:	8bfa      	ldrh	r2, [r7, #30]
 800b194:	4941      	ldr	r1, [pc, #260]	; (800b29c <http_parse_request+0x248>)
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fcfa 	bl	800bb90 <lwip_strnstr>
 800b19c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800b1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d163      	bne.n	800b270 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d048      	beq.n	800b24a <http_parse_request+0x1f6>
 800b1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d944      	bls.n	800b24a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b1c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4939      	ldr	r1, [pc, #228]	; (800b2ac <http_parse_request+0x258>)
 800b1c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1c8:	f000 fce2 	bl	800bb90 <lwip_strnstr>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d03b      	beq.n	800b24a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b1de:	8bbb      	ldrh	r3, [r7, #28]
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d026      	beq.n	800b23c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800b1f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4613      	mov	r3, r2
 800b200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	6978      	ldr	r0, [r7, #20]
 800b206:	f7ff fe41 	bl	800ae8c <http_post_request>
 800b20a:	4603      	mov	r3, r0
 800b20c:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800b20e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	2220      	movs	r2, #32
 800b21a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	2220      	movs	r2, #32
 800b220:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800b222:	8bbb      	ldrh	r3, [r7, #28]
 800b224:	69ba      	ldr	r2, [r7, #24]
 800b226:	4413      	add	r3, r2
 800b228:	2220      	movs	r2, #32
 800b22a:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800b22c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b230:	f113 0f10 	cmn.w	r3, #16
 800b234:	d01e      	beq.n	800b274 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800b236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b23a:	e020      	b.n	800b27e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23e:	69b9      	ldr	r1, [r7, #24]
 800b240:	68b8      	ldr	r0, [r7, #8]
 800b242:	f000 f887 	bl	800b354 <http_find_file>
 800b246:	4603      	mov	r3, r0
 800b248:	e019      	b.n	800b27e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 f988 	bl	800d564 <pbuf_clen>
 800b254:	4603      	mov	r3, r0
 800b256:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	891b      	ldrh	r3, [r3, #8]
 800b25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b262:	d209      	bcs.n	800b278 <http_parse_request+0x224>
 800b264:	8a3b      	ldrh	r3, [r7, #16]
 800b266:	2b05      	cmp	r3, #5
 800b268:	d806      	bhi.n	800b278 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b26a:	f06f 0304 	mvn.w	r3, #4
 800b26e:	e006      	b.n	800b27e <http_parse_request+0x22a>
          goto badrequest;
 800b270:	bf00      	nop
 800b272:	e002      	b.n	800b27a <http_parse_request+0x226>
              goto badrequest;
 800b274:	bf00      	nop
 800b276:	e000      	b.n	800b27a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800b278:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b27a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3740      	adds	r7, #64	; 0x40
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	08018e58 	.word	0x08018e58
 800b28c:	08018fe4 	.word	0x08018fe4
 800b290:	08018ea0 	.word	0x08018ea0
 800b294:	08018ec8 	.word	0x08018ec8
 800b298:	20007f0c 	.word	0x20007f0c
 800b29c:	08018f4c 	.word	0x08018f4c
 800b2a0:	08018ff0 	.word	0x08018ff0
 800b2a4:	08018ff8 	.word	0x08018ff8
 800b2a8:	08019000 	.word	0x08019000
 800b2ac:	08018fdc 	.word	0x08018fdc

0800b2b0 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d040      	beq.n	800b346 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800b2c8:	213f      	movs	r1, #63	; 0x3f
 800b2ca:	6838      	ldr	r0, [r7, #0]
 800b2cc:	f00b fe3a 	bl	8016f44 <strchr>
 800b2d0:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	613b      	str	r3, [r7, #16]
    ext = uri;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b2e6:	212e      	movs	r1, #46	; 0x2e
 800b2e8:	6938      	ldr	r0, [r7, #16]
 800b2ea:	f00b fe2b 	bl	8016f44 <strchr>
 800b2ee:	6138      	str	r0, [r7, #16]
 800b2f0:	e009      	b.n	800b306 <http_uri_is_ssi+0x56>
      ext = sub;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	617b      	str	r3, [r7, #20]
      sub++;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b2fc:	212e      	movs	r1, #46	; 0x2e
 800b2fe:	6938      	ldr	r0, [r7, #16]
 800b300:	f00b fe20 	bl	8016f44 <strchr>
 800b304:	6138      	str	r0, [r7, #16]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f2      	bne.n	800b2f2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	e010      	b.n	800b334 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800b312:	4a0f      	ldr	r2, [pc, #60]	; (800b350 <http_uri_is_ssi+0xa0>)
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6978      	ldr	r0, [r7, #20]
 800b31e:	f000 fc6d 	bl	800bbfc <lwip_stricmp>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800b328:	2301      	movs	r3, #1
 800b32a:	76fb      	strb	r3, [r7, #27]
        break;
 800b32c:	e005      	b.n	800b33a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	3301      	adds	r3, #1
 800b332:	61fb      	str	r3, [r7, #28]
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	2b04      	cmp	r3, #4
 800b338:	d9eb      	bls.n	800b312 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <http_uri_is_ssi+0x96>
      *param = '?';
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	223f      	movs	r2, #63	; 0x3f
 800b344:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800b346:	7efb      	ldrb	r3, [r7, #27]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	08022a1c 	.word	0x08022a1c

0800b354 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b093      	sub	sp, #76	; 0x4c
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4618      	mov	r0, r3
 800b372:	f7f4 ff37 	bl	80001e4 <strlen>
 800b376:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d072      	beq.n	800b464 <http_find_file+0x110>
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	3b01      	subs	r3, #1
 800b384:	4413      	add	r3, r2
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2b2f      	cmp	r3, #47	; 0x2f
 800b38a:	d16b      	bne.n	800b464 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b38c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b38e:	4a80      	ldr	r2, [pc, #512]	; (800b590 <http_find_file+0x23c>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d102      	bne.n	800b39a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	2b01      	cmp	r3, #1
 800b398:	d164      	bne.n	800b464 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	3b01      	subs	r3, #1
 800b39e:	2b3f      	cmp	r3, #63	; 0x3f
 800b3a0:	bf28      	it	cs
 800b3a2:	233f      	movcs	r3, #63	; 0x3f
 800b3a4:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00a      	beq.n	800b3c2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	6a3a      	ldr	r2, [r7, #32]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4877      	ldr	r0, [pc, #476]	; (800b590 <http_find_file+0x23c>)
 800b3b4:	f00b fb4d 	bl	8016a52 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b3b8:	4a75      	ldr	r2, [pc, #468]	; (800b590 <http_find_file+0x23c>)
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	4413      	add	r3, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c6:	e04a      	b.n	800b45e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d028      	beq.n	800b420 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b3d4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01e      	beq.n	800b41a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b3dc:	4a6d      	ldr	r2, [pc, #436]	; (800b594 <http_find_file+0x240>)
 800b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f4 fefd 	bl	80001e4 <strlen>
 800b3ea:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	bf28      	it	cs
 800b3f4:	4613      	movcs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	4a65      	ldr	r2, [pc, #404]	; (800b590 <http_find_file+0x23c>)
 800b3fc:	1898      	adds	r0, r3, r2
 800b3fe:	4a65      	ldr	r2, [pc, #404]	; (800b594 <http_find_file+0x240>)
 800b400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b402:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4619      	mov	r1, r3
 800b40a:	f00b fb22 	bl	8016a52 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b40e:	6a3a      	ldr	r2, [r7, #32]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	4413      	add	r3, r2
 800b414:	4a5e      	ldr	r2, [pc, #376]	; (800b590 <http_find_file+0x23c>)
 800b416:	2100      	movs	r1, #0
 800b418:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b41a:	4b5d      	ldr	r3, [pc, #372]	; (800b590 <http_find_file+0x23c>)
 800b41c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b41e:	e004      	b.n	800b42a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b420:	4a5c      	ldr	r2, [pc, #368]	; (800b594 <http_find_file+0x240>)
 800b422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b428:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fbb6 	bl	8009ba0 <fs_open>
 800b434:	4603      	mov	r3, r0
 800b436:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800b438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10b      	bne.n	800b458 <http_find_file+0x104>
        uri = file_name;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800b448:	4a52      	ldr	r2, [pc, #328]	; (800b594 <http_find_file+0x240>)
 800b44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	4413      	add	r3, r2
 800b450:	791b      	ldrb	r3, [r3, #4]
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800b456:	e005      	b.n	800b464 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45a:	3301      	adds	r3, #1
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	2b04      	cmp	r3, #4
 800b462:	d9b1      	bls.n	800b3c8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d176      	bne.n	800b558 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	213f      	movs	r1, #63	; 0x3f
 800b46e:	4618      	mov	r0, r3
 800b470:	f00b fd68 	bl	8016f44 <strchr>
 800b474:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
      params++;
 800b482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b484:	3301      	adds	r3, #1
 800b486:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800b488:	4b43      	ldr	r3, [pc, #268]	; (800b598 <http_find_file+0x244>)
 800b48a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b48e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800b490:	4b42      	ldr	r3, [pc, #264]	; (800b59c <http_find_file+0x248>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d034      	beq.n	800b502 <http_find_file+0x1ae>
 800b498:	4b41      	ldr	r3, [pc, #260]	; (800b5a0 <http_find_file+0x24c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d030      	beq.n	800b502 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b4a4:	e028      	b.n	800b4f8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800b4a6:	68b8      	ldr	r0, [r7, #8]
 800b4a8:	4b3d      	ldr	r3, [pc, #244]	; (800b5a0 <http_find_file+0x24c>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	4413      	add	r3, r2
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f7f4 fe8b 	bl	80001d0 <strcmp>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d118      	bne.n	800b4f2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800b4c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7fe fd20 	bl	8009f08 <extract_uri_parameters>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	4a33      	ldr	r2, [pc, #204]	; (800b598 <http_find_file+0x244>)
 800b4cc:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b4ce:	4b34      	ldr	r3, [pc, #208]	; (800b5a0 <http_find_file+0x24c>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	4413      	add	r3, r2
 800b4d8:	685c      	ldr	r4, [r3, #4]
 800b4da:	4b2f      	ldr	r3, [pc, #188]	; (800b598 <http_find_file+0x244>)
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ea:	47a0      	blx	r4
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	60bb      	str	r3, [r7, #8]
          break;
 800b4f0:	e007      	b.n	800b502 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	633b      	str	r3, [r7, #48]	; 0x30
 800b4f8:	4b28      	ldr	r3, [pc, #160]	; (800b59c <http_find_file+0x248>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fe:	429a      	cmp	r2, r3
 800b500:	dbd1      	blt.n	800b4a6 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	4611      	mov	r1, r2
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fb49 	bl	8009ba0 <fs_open>
 800b50e:	4603      	mov	r3, r0
 800b510:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800b512:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d102      	bne.n	800b520 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b51e:	e006      	b.n	800b52e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800b520:	f107 0308 	add.w	r3, r7, #8
 800b524:	4619      	mov	r1, r3
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff fc12 	bl	800ad50 <http_get_404_file>
 800b52c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d011      	beq.n	800b558 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	7c1b      	ldrb	r3, [r3, #16]
 800b538:	f003 0308 	and.w	r3, r3, #8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <http_find_file+0x1f4>
        tag_check = 1;
 800b540:	2301      	movs	r3, #1
 800b542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b546:	e007      	b.n	800b558 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	4619      	mov	r1, r3
 800b54c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b54e:	f7ff feaf 	bl	800b2b0 <http_uri_is_ssi>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b55e:	f107 0308 	add.w	r3, r7, #8
 800b562:	4619      	mov	r1, r3
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7ff fbf3 	bl	800ad50 <http_get_404_file>
 800b56a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	4613      	mov	r3, r2
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 f810 	bl	800b5a4 <http_init_file>
 800b584:	4603      	mov	r3, r0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3744      	adds	r7, #68	; 0x44
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	bf00      	nop
 800b590:	2000830c 	.word	0x2000830c
 800b594:	08022a30 	.word	0x08022a30
 800b598:	20008360 	.word	0x20008360
 800b59c:	2000835c 	.word	0x2000835c
 800b5a0:	20008358 	.word	0x20008358

0800b5a4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d06f      	beq.n	800b698 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d106      	bne.n	800b5ce <http_init_file+0x2a>
 800b5c0:	4b46      	ldr	r3, [pc, #280]	; (800b6dc <http_init_file+0x138>)
 800b5c2:	f640 120b 	movw	r2, #2315	; 0x90b
 800b5c6:	4946      	ldr	r1, [pc, #280]	; (800b6e0 <http_init_file+0x13c>)
 800b5c8:	4846      	ldr	r0, [pc, #280]	; (800b6e4 <http_init_file+0x140>)
 800b5ca:	f00b facd 	bl	8016b68 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800b5ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d01c      	beq.n	800b610 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800b5d6:	f7fe fb3a 	bl	8009c4e <http_ssi_state_alloc>
 800b5da:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d016      	beq.n	800b610 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        ssi->parsed = file->data;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	da06      	bge.n	800b634 <http_init_file+0x90>
 800b626:	4b2d      	ldr	r3, [pc, #180]	; (800b6dc <http_init_file+0x138>)
 800b628:	f640 1234 	movw	r2, #2356	; 0x934
 800b62c:	492e      	ldr	r1, [pc, #184]	; (800b6e8 <http_init_file+0x144>)
 800b62e:	482d      	ldr	r0, [pc, #180]	; (800b6e4 <http_init_file+0x140>)
 800b630:	f00b fa9a 	bl	8016b68 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	461a      	mov	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d032      	beq.n	800b6b2 <http_init_file+0x10e>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	7c1b      	ldrb	r3, [r3, #16]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b00      	cmp	r3, #0
 800b658:	d02b      	beq.n	800b6b2 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6998      	ldr	r0, [r3, #24]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	461a      	mov	r2, r3
 800b664:	4921      	ldr	r1, [pc, #132]	; (800b6ec <http_init_file+0x148>)
 800b666:	f000 fa93 	bl	800bb90 <lwip_strnstr>
 800b66a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d01f      	beq.n	800b6b2 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	1d1a      	adds	r2, r3, #4
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	699a      	ldr	r2, [r3, #24]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	441a      	add	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	1ad2      	subs	r2, r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	625a      	str	r2, [r3, #36]	; 0x24
 800b696:	e00c      	b.n	800b6b2 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	695b      	ldr	r3, [r3, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d006      	beq.n	800b6c8 <http_init_file+0x124>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	7c1b      	ldrb	r3, [r3, #16]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7fe fd4c 	bl	800a168 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08018e58 	.word	0x08018e58
 800b6e0:	08019004 	.word	0x08019004
 800b6e4:	08018ea0 	.word	0x08018ea0
 800b6e8:	08019018 	.word	0x08019018
 800b6ec:	08018fdc 	.word	0x08018fdc

0800b6f0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <http_err+0x1c>
    http_state_free(hs);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7fe fb14 	bl	8009d34 <http_state_free>
  }
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	4613      	mov	r3, r2
 800b720:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <http_sent+0x1c>
    return ERR_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	e008      	b.n	800b742 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b738:	6979      	ldr	r1, [r7, #20]
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f7ff faae 	bl	800ac9c <http_send>

  return ERR_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b75e:	2100      	movs	r1, #0
 800b760:	6838      	ldr	r0, [r7, #0]
 800b762:	f7fe fbb5 	bl	8009ed0 <http_close_conn>
 800b766:	4603      	mov	r3, r0
 800b768:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e021      	b.n	800b7b2 <http_poll+0x68>
  } else {
    hs->retries++;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b774:	3301      	adds	r3, #1
 800b776:	b2da      	uxtb	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b784:	2b04      	cmp	r3, #4
 800b786:	d105      	bne.n	800b794 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	6838      	ldr	r0, [r7, #0]
 800b78c:	f7fe fba0 	bl	8009ed0 <http_close_conn>
      return ERR_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	e00e      	b.n	800b7b2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d009      	beq.n	800b7b0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b79c:	68f9      	ldr	r1, [r7, #12]
 800b79e:	6838      	ldr	r0, [r7, #0]
 800b7a0:	f7ff fa7c 	bl	800ac9c <http_send>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b7aa:	6838      	ldr	r0, [r7, #0]
 800b7ac:	f007 f9c6 	bl	8012b3c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
	...

0800b7bc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b7ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d105      	bne.n	800b7e2 <http_recv+0x26>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <http_recv+0x26>
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d111      	bne.n	800b806 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d008      	beq.n	800b7fa <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	891b      	ldrh	r3, [r3, #8]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	68b8      	ldr	r0, [r7, #8]
 800b7f0:	f002 fd98 	bl	800e324 <tcp_recved>
      pbuf_free(p);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fe27 	bl	800d448 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b7fa:	6979      	ldr	r1, [r7, #20]
 800b7fc:	68b8      	ldr	r0, [r7, #8]
 800b7fe:	f7fe fb67 	bl	8009ed0 <http_close_conn>
    return ERR_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	e072      	b.n	800b8ec <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	891b      	ldrh	r3, [r3, #8]
 800b80a:	4619      	mov	r1, r3
 800b80c:	68b8      	ldr	r0, [r7, #8]
 800b80e:	f002 fd89 	bl	800e324 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d012      	beq.n	800b842 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	6978      	ldr	r0, [r7, #20]
 800b828:	f7ff faf0 	bl	800ae0c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d103      	bne.n	800b83e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800b836:	6979      	ldr	r1, [r7, #20]
 800b838:	68b8      	ldr	r0, [r7, #8]
 800b83a:	f7ff fa2f 	bl	800ac9c <http_send>
    }
    return ERR_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	e054      	b.n	800b8ec <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d14c      	bne.n	800b8e4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	6979      	ldr	r1, [r7, #20]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fc00 	bl	800b054 <http_parse_request>
 800b854:	4603      	mov	r3, r0
 800b856:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d015      	beq.n	800b88c <http_recv+0xd0>
 800b860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b864:	f113 0f05 	cmn.w	r3, #5
 800b868:	d010      	beq.n	800b88c <http_recv+0xd0>
 800b86a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b86e:	f113 0f10 	cmn.w	r3, #16
 800b872:	d00b      	beq.n	800b88c <http_recv+0xd0>
 800b874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b878:	f113 0f08 	cmn.w	r3, #8
 800b87c:	d006      	beq.n	800b88c <http_recv+0xd0>
 800b87e:	4b1d      	ldr	r3, [pc, #116]	; (800b8f4 <http_recv+0x138>)
 800b880:	f640 2204 	movw	r2, #2564	; 0xa04
 800b884:	491c      	ldr	r1, [pc, #112]	; (800b8f8 <http_recv+0x13c>)
 800b886:	481d      	ldr	r0, [pc, #116]	; (800b8fc <http_recv+0x140>)
 800b888:	f00b f96e 	bl	8016b68 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b88c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b890:	f113 0f05 	cmn.w	r3, #5
 800b894:	d00b      	beq.n	800b8ae <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <http_recv+0xf2>
          pbuf_free(hs->req);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f001 fdd0 	bl	800d448 <pbuf_free>
          hs->req = NULL;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f001 fdca 	bl	800d448 <pbuf_free>
      if (parsed == ERR_OK) {
 800b8b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d111      	bne.n	800b8ea <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b8c6:	6979      	ldr	r1, [r7, #20]
 800b8c8:	68b8      	ldr	r0, [r7, #8]
 800b8ca:	f7ff f9e7 	bl	800ac9c <http_send>
 800b8ce:	e00c      	b.n	800b8ea <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800b8d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8d4:	f113 0f10 	cmn.w	r3, #16
 800b8d8:	d107      	bne.n	800b8ea <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	68b8      	ldr	r0, [r7, #8]
 800b8de:	f7fe faf7 	bl	8009ed0 <http_close_conn>
 800b8e2:	e002      	b.n	800b8ea <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f001 fdaf 	bl	800d448 <pbuf_free>
    }
  }
  return ERR_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	08018e58 	.word	0x08018e58
 800b8f8:	08019038 	.word	0x08019038
 800b8fc:	08018ea0 	.word	0x08018ea0

0800b900 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d102      	bne.n	800b91c <http_accept+0x1c>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <http_accept+0x22>
    return ERR_VAL;
 800b91c:	f06f 0305 	mvn.w	r3, #5
 800b920:	e025      	b.n	800b96e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b922:	2101      	movs	r1, #1
 800b924:	68b8      	ldr	r0, [r7, #8]
 800b926:	f003 f9e1 	bl	800ecec <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b92a:	f7fe f9c5 	bl	8009cb8 <http_state_alloc>
 800b92e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b93a:	e018      	b.n	800b96e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b942:	6979      	ldr	r1, [r7, #20]
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f003 fbd1 	bl	800f0ec <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b94a:	490b      	ldr	r1, [pc, #44]	; (800b978 <http_accept+0x78>)
 800b94c:	68b8      	ldr	r0, [r7, #8]
 800b94e:	f003 fbdf 	bl	800f110 <tcp_recv>
  altcp_err(pcb, http_err);
 800b952:	490a      	ldr	r1, [pc, #40]	; (800b97c <http_accept+0x7c>)
 800b954:	68b8      	ldr	r0, [r7, #8]
 800b956:	f003 fc1f 	bl	800f198 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b95a:	2204      	movs	r2, #4
 800b95c:	4908      	ldr	r1, [pc, #32]	; (800b980 <http_accept+0x80>)
 800b95e:	68b8      	ldr	r0, [r7, #8]
 800b960:	f003 fc54 	bl	800f20c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b964:	4907      	ldr	r1, [pc, #28]	; (800b984 <http_accept+0x84>)
 800b966:	68b8      	ldr	r0, [r7, #8]
 800b968:	f003 fbf4 	bl	800f154 <tcp_sent>

  return ERR_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	0800b7bd 	.word	0x0800b7bd
 800b97c:	0800b6f1 	.word	0x0800b6f1
 800b980:	0800b74b 	.word	0x0800b74b
 800b984:	0800b715 	.word	0x0800b715

0800b988 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d029      	beq.n	800b9ee <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b99a:	2101      	movs	r1, #1
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f003 f9a5 	bl	800ecec <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b9a2:	887b      	ldrh	r3, [r7, #2]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4914      	ldr	r1, [pc, #80]	; (800b9f8 <httpd_init_pcb+0x70>)
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f002 faed 	bl	800df88 <tcp_bind>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d006      	beq.n	800b9c8 <httpd_init_pcb+0x40>
 800b9ba:	4b10      	ldr	r3, [pc, #64]	; (800b9fc <httpd_init_pcb+0x74>)
 800b9bc:	f640 2257 	movw	r2, #2647	; 0xa57
 800b9c0:	490f      	ldr	r1, [pc, #60]	; (800ba00 <httpd_init_pcb+0x78>)
 800b9c2:	4810      	ldr	r0, [pc, #64]	; (800ba04 <httpd_init_pcb+0x7c>)
 800b9c4:	f00b f8d0 	bl	8016b68 <iprintf>
    pcb = altcp_listen(pcb);
 800b9c8:	21ff      	movs	r1, #255	; 0xff
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f002 fb94 	bl	800e0f8 <tcp_listen_with_backlog>
 800b9d0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <httpd_init_pcb+0x5e>
 800b9d8:	4b08      	ldr	r3, [pc, #32]	; (800b9fc <httpd_init_pcb+0x74>)
 800b9da:	f640 2259 	movw	r2, #2649	; 0xa59
 800b9de:	490a      	ldr	r1, [pc, #40]	; (800ba08 <httpd_init_pcb+0x80>)
 800b9e0:	4808      	ldr	r0, [pc, #32]	; (800ba04 <httpd_init_pcb+0x7c>)
 800b9e2:	f00b f8c1 	bl	8016b68 <iprintf>
    altcp_accept(pcb, http_accept);
 800b9e6:	4909      	ldr	r1, [pc, #36]	; (800ba0c <httpd_init_pcb+0x84>)
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f003 fbf7 	bl	800f1dc <tcp_accept>
  }
}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	08022b78 	.word	0x08022b78
 800b9fc:	08018e58 	.word	0x08018e58
 800ba00:	08019064 	.word	0x08019064
 800ba04:	08018ea0 	.word	0x08018ea0
 800ba08:	08019080 	.word	0x08019080
 800ba0c:	0800b901 	.word	0x0800b901

0800ba10 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800ba16:	202e      	movs	r0, #46	; 0x2e
 800ba18:	f003 fb5a 	bl	800f0d0 <tcp_new_ip_type>
 800ba1c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d106      	bne.n	800ba32 <httpd_init+0x22>
 800ba24:	4b07      	ldr	r3, [pc, #28]	; (800ba44 <httpd_init+0x34>)
 800ba26:	f640 2272 	movw	r2, #2674	; 0xa72
 800ba2a:	4907      	ldr	r1, [pc, #28]	; (800ba48 <httpd_init+0x38>)
 800ba2c:	4807      	ldr	r0, [pc, #28]	; (800ba4c <httpd_init+0x3c>)
 800ba2e:	f00b f89b 	bl	8016b68 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800ba32:	2150      	movs	r1, #80	; 0x50
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff ffa7 	bl	800b988 <httpd_init_pcb>
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	08018e58 	.word	0x08018e58
 800ba48:	080190a0 	.word	0x080190a0
 800ba4c:	08018ea0 	.word	0x08018ea0

0800ba50 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <http_set_ssi_handler+0x20>
 800ba62:	4b14      	ldr	r3, [pc, #80]	; (800bab4 <http_set_ssi_handler+0x64>)
 800ba64:	f640 2297 	movw	r2, #2711	; 0xa97
 800ba68:	4913      	ldr	r1, [pc, #76]	; (800bab8 <http_set_ssi_handler+0x68>)
 800ba6a:	4814      	ldr	r0, [pc, #80]	; (800babc <http_set_ssi_handler+0x6c>)
 800ba6c:	f00b f87c 	bl	8016b68 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800ba70:	4a13      	ldr	r2, [pc, #76]	; (800bac0 <http_set_ssi_handler+0x70>)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <http_set_ssi_handler+0x3a>
 800ba7c:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <http_set_ssi_handler+0x64>)
 800ba7e:	f640 229e 	movw	r2, #2718	; 0xa9e
 800ba82:	4910      	ldr	r1, [pc, #64]	; (800bac4 <http_set_ssi_handler+0x74>)
 800ba84:	480d      	ldr	r0, [pc, #52]	; (800babc <http_set_ssi_handler+0x6c>)
 800ba86:	f00b f86f 	bl	8016b68 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dc06      	bgt.n	800ba9e <http_set_ssi_handler+0x4e>
 800ba90:	4b08      	ldr	r3, [pc, #32]	; (800bab4 <http_set_ssi_handler+0x64>)
 800ba92:	f640 229f 	movw	r2, #2719	; 0xa9f
 800ba96:	490c      	ldr	r1, [pc, #48]	; (800bac8 <http_set_ssi_handler+0x78>)
 800ba98:	4808      	ldr	r0, [pc, #32]	; (800babc <http_set_ssi_handler+0x6c>)
 800ba9a:	f00b f865 	bl	8016b68 <iprintf>

  httpd_tags = tags;
 800ba9e:	4a0b      	ldr	r2, [pc, #44]	; (800bacc <http_set_ssi_handler+0x7c>)
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800baa4:	4a0a      	ldr	r2, [pc, #40]	; (800bad0 <http_set_ssi_handler+0x80>)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	08018e58 	.word	0x08018e58
 800bab8:	080190bc 	.word	0x080190bc
 800babc:	08018ea0 	.word	0x08018ea0
 800bac0:	2000834c 	.word	0x2000834c
 800bac4:	080190d4 	.word	0x080190d4
 800bac8:	080190e4 	.word	0x080190e4
 800bacc:	20008354 	.word	0x20008354
 800bad0:	20008350 	.word	0x20008350

0800bad4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <http_set_cgi_handlers+0x1e>
 800bae4:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <http_set_cgi_handlers+0x48>)
 800bae6:	f640 22b2 	movw	r2, #2738	; 0xab2
 800baea:	490d      	ldr	r1, [pc, #52]	; (800bb20 <http_set_cgi_handlers+0x4c>)
 800baec:	480d      	ldr	r0, [pc, #52]	; (800bb24 <http_set_cgi_handlers+0x50>)
 800baee:	f00b f83b 	bl	8016b68 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dc06      	bgt.n	800bb06 <http_set_cgi_handlers+0x32>
 800baf8:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <http_set_cgi_handlers+0x48>)
 800bafa:	f640 22b3 	movw	r2, #2739	; 0xab3
 800bafe:	490a      	ldr	r1, [pc, #40]	; (800bb28 <http_set_cgi_handlers+0x54>)
 800bb00:	4808      	ldr	r0, [pc, #32]	; (800bb24 <http_set_cgi_handlers+0x50>)
 800bb02:	f00b f831 	bl	8016b68 <iprintf>

  httpd_cgis = cgis;
 800bb06:	4a09      	ldr	r2, [pc, #36]	; (800bb2c <http_set_cgi_handlers+0x58>)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800bb0c:	4a08      	ldr	r2, [pc, #32]	; (800bb30 <http_set_cgi_handlers+0x5c>)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	6013      	str	r3, [r2, #0]
}
 800bb12:	bf00      	nop
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	08018e58 	.word	0x08018e58
 800bb20:	080190fc 	.word	0x080190fc
 800bb24:	08018ea0 	.word	0x08018ea0
 800bb28:	0801910c 	.word	0x0801910c
 800bb2c:	20008358 	.word	0x20008358
 800bb30:	2000835c 	.word	0x2000835c

0800bb34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bb3e:	88fb      	ldrh	r3, [r7, #6]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	b21a      	sxth	r2, r3
 800bb44:	88fb      	ldrh	r3, [r7, #6]
 800bb46:	0a1b      	lsrs	r3, r3, #8
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	b21b      	sxth	r3, r3
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	b21b      	sxth	r3, r3
 800bb50:	b29b      	uxth	r3, r3
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b083      	sub	sp, #12
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	061a      	lsls	r2, r3, #24
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	0a1b      	lsrs	r3, r3, #8
 800bb78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	0e1b      	lsrs	r3, r3, #24
 800bb82:	4313      	orrs	r3, r2
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800bb9c:	68b8      	ldr	r0, [r7, #8]
 800bb9e:	f7f4 fb21 	bl	80001e4 <strlen>
 800bba2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	e022      	b.n	800bbf4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e012      	b.n	800bbda <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d109      	bne.n	800bbd4 <lwip_strnstr+0x44>
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	6978      	ldr	r0, [r7, #20]
 800bbc6:	f00b f9d2 	bl	8016f6e <strncmp>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	e00f      	b.n	800bbf4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <lwip_strnstr+0x62>
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	441a      	add	r2, r3
 800bbe8:	68f9      	ldr	r1, [r7, #12]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	440b      	add	r3, r1
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d9e0      	bls.n	800bbb4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	603a      	str	r2, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800bc1a:	7bfa      	ldrb	r2, [r7, #15]
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d016      	beq.n	800bc50 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	f043 0320 	orr.w	r3, r3, #32
 800bc28:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800bc2a:	7b7b      	ldrb	r3, [r7, #13]
 800bc2c:	2b60      	cmp	r3, #96	; 0x60
 800bc2e:	d90c      	bls.n	800bc4a <lwip_stricmp+0x4e>
 800bc30:	7b7b      	ldrb	r3, [r7, #13]
 800bc32:	2b7a      	cmp	r3, #122	; 0x7a
 800bc34:	d809      	bhi.n	800bc4a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	f043 0320 	orr.w	r3, r3, #32
 800bc3c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800bc3e:	7b7a      	ldrb	r2, [r7, #13]
 800bc40:	7b3b      	ldrb	r3, [r7, #12]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d003      	beq.n	800bc4e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e006      	b.n	800bc58 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e004      	b.n	800bc58 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800bc4e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1d7      	bne.n	800bc06 <lwip_stricmp+0xa>
  return 0;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
  char *res = result;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfb8      	it	lt
 800bc84:	425b      	neglt	r3, r3
 800bc86:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d806      	bhi.n	800bc9c <lwip_itoa+0x38>
    if (bufsize == 1) {
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d154      	bne.n	800bd3e <lwip_itoa+0xda>
      *result = 0;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
    }
    return;
 800bc9a:	e050      	b.n	800bd3e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da04      	bge.n	800bcac <lwip_itoa+0x48>
    *res++ = '-';
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	61fa      	str	r2, [r7, #28]
 800bca8:	222d      	movs	r2, #45	; 0x2d
 800bcaa:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800bcb2:	e01c      	b.n	800bcee <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	4b24      	ldr	r3, [pc, #144]	; (800bd48 <lwip_itoa+0xe4>)
 800bcb8:	fb83 1302 	smull	r1, r3, r3, r2
 800bcbc:	1099      	asrs	r1, r3, #2
 800bcbe:	17d3      	asrs	r3, r2, #31
 800bcc0:	1ac9      	subs	r1, r1, r3
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	440b      	add	r3, r1
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	1ad1      	subs	r1, r2, r3
 800bccc:	b2cb      	uxtb	r3, r1
 800bcce:	3330      	adds	r3, #48	; 0x30
 800bcd0:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	7cfa      	ldrb	r2, [r7, #19]
 800bcdc:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	4a19      	ldr	r2, [pc, #100]	; (800bd48 <lwip_itoa+0xe4>)
 800bce2:	fb82 1203 	smull	r1, r2, r2, r3
 800bce6:	1092      	asrs	r2, r2, #2
 800bce8:	17db      	asrs	r3, r3, #31
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <lwip_itoa+0x98>
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d8db      	bhi.n	800bcb4 <lwip_itoa+0x50>
  }
  if (n) {
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
    return;
 800bd08:	e01a      	b.n	800bd40 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	61fa      	str	r2, [r7, #28]
 800bd18:	2230      	movs	r2, #48	; 0x30
 800bd1a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	61fa      	str	r2, [r7, #28]
 800bd22:	2200      	movs	r2, #0
 800bd24:	701a      	strb	r2, [r3, #0]
    return;
 800bd26:	e00b      	b.n	800bd40 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	441a      	add	r2, r3
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	461a      	mov	r2, r3
 800bd34:	69b9      	ldr	r1, [r7, #24]
 800bd36:	69f8      	ldr	r0, [r7, #28]
 800bd38:	f00a fe99 	bl	8016a6e <memmove>
 800bd3c:	e000      	b.n	800bd40 <lwip_itoa+0xdc>
    return;
 800bd3e:	bf00      	nop
}
 800bd40:	3720      	adds	r7, #32
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	66666667 	.word	0x66666667

0800bd4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bd56:	f00a fcd1 	bl	80166fc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bd5a:	f000 f8d5 	bl	800bf08 <mem_init>
  memp_init();
 800bd5e:	f000 fc31 	bl	800c5c4 <memp_init>
  pbuf_init();
  netif_init();
 800bd62:	f000 fcf7 	bl	800c754 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bd66:	f007 ffd9 	bl	8013d1c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bd6a:	f001 fe07 	bl	800d97c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bd6e:	f007 ff1b 	bl	8013ba8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bd86:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <ptr_to_mem+0x20>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	4413      	add	r3, r2
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	20008364 	.word	0x20008364

0800bda0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bda8:	4b05      	ldr	r3, [pc, #20]	; (800bdc0 <mem_to_ptr+0x20>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	b29b      	uxth	r3, r3
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20008364 	.word	0x20008364

0800bdc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bdc4:	b590      	push	{r4, r7, lr}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bdcc:	4b45      	ldr	r3, [pc, #276]	; (800bee4 <plug_holes+0x120>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d206      	bcs.n	800bde4 <plug_holes+0x20>
 800bdd6:	4b44      	ldr	r3, [pc, #272]	; (800bee8 <plug_holes+0x124>)
 800bdd8:	f240 12df 	movw	r2, #479	; 0x1df
 800bddc:	4943      	ldr	r1, [pc, #268]	; (800beec <plug_holes+0x128>)
 800bdde:	4844      	ldr	r0, [pc, #272]	; (800bef0 <plug_holes+0x12c>)
 800bde0:	f00a fec2 	bl	8016b68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bde4:	4b43      	ldr	r3, [pc, #268]	; (800bef4 <plug_holes+0x130>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d306      	bcc.n	800bdfc <plug_holes+0x38>
 800bdee:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <plug_holes+0x124>)
 800bdf0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bdf4:	4940      	ldr	r1, [pc, #256]	; (800bef8 <plug_holes+0x134>)
 800bdf6:	483e      	ldr	r0, [pc, #248]	; (800bef0 <plug_holes+0x12c>)
 800bdf8:	f00a feb6 	bl	8016b68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	791b      	ldrb	r3, [r3, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <plug_holes+0x4e>
 800be04:	4b38      	ldr	r3, [pc, #224]	; (800bee8 <plug_holes+0x124>)
 800be06:	f240 12e1 	movw	r2, #481	; 0x1e1
 800be0a:	493c      	ldr	r1, [pc, #240]	; (800befc <plug_holes+0x138>)
 800be0c:	4838      	ldr	r0, [pc, #224]	; (800bef0 <plug_holes+0x12c>)
 800be0e:	f00a feab 	bl	8016b68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be1a:	d906      	bls.n	800be2a <plug_holes+0x66>
 800be1c:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <plug_holes+0x124>)
 800be1e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800be22:	4937      	ldr	r1, [pc, #220]	; (800bf00 <plug_holes+0x13c>)
 800be24:	4832      	ldr	r0, [pc, #200]	; (800bef0 <plug_holes+0x12c>)
 800be26:	f00a fe9f 	bl	8016b68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	4618      	mov	r0, r3
 800be30:	f7ff ffa4 	bl	800bd7c <ptr_to_mem>
 800be34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d024      	beq.n	800be88 <plug_holes+0xc4>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	791b      	ldrb	r3, [r3, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d120      	bne.n	800be88 <plug_holes+0xc4>
 800be46:	4b2b      	ldr	r3, [pc, #172]	; (800bef4 <plug_holes+0x130>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d01b      	beq.n	800be88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800be50:	4b2c      	ldr	r3, [pc, #176]	; (800bf04 <plug_holes+0x140>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	429a      	cmp	r2, r3
 800be58:	d102      	bne.n	800be60 <plug_holes+0x9c>
      lfree = mem;
 800be5a:	4a2a      	ldr	r2, [pc, #168]	; (800bf04 <plug_holes+0x140>)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	881a      	ldrh	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be70:	d00a      	beq.n	800be88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff ff80 	bl	800bd7c <ptr_to_mem>
 800be7c:	4604      	mov	r4, r0
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff ff8e 	bl	800bda0 <mem_to_ptr>
 800be84:	4603      	mov	r3, r0
 800be86:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	885b      	ldrh	r3, [r3, #2]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff ff75 	bl	800bd7c <ptr_to_mem>
 800be92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d01f      	beq.n	800bedc <plug_holes+0x118>
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	791b      	ldrb	r3, [r3, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d11b      	bne.n	800bedc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bea4:	4b17      	ldr	r3, [pc, #92]	; (800bf04 <plug_holes+0x140>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d102      	bne.n	800beb4 <plug_holes+0xf0>
      lfree = pmem;
 800beae:	4a15      	ldr	r2, [pc, #84]	; (800bf04 <plug_holes+0x140>)
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	881a      	ldrh	r2, [r3, #0]
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bec4:	d00a      	beq.n	800bedc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	4618      	mov	r0, r3
 800becc:	f7ff ff56 	bl	800bd7c <ptr_to_mem>
 800bed0:	4604      	mov	r4, r0
 800bed2:	68b8      	ldr	r0, [r7, #8]
 800bed4:	f7ff ff64 	bl	800bda0 <mem_to_ptr>
 800bed8:	4603      	mov	r3, r0
 800beda:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bedc:	bf00      	nop
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd90      	pop	{r4, r7, pc}
 800bee4:	20008364 	.word	0x20008364
 800bee8:	08019128 	.word	0x08019128
 800beec:	08019158 	.word	0x08019158
 800bef0:	08019170 	.word	0x08019170
 800bef4:	20008368 	.word	0x20008368
 800bef8:	08019198 	.word	0x08019198
 800befc:	080191b4 	.word	0x080191b4
 800bf00:	080191d0 	.word	0x080191d0
 800bf04:	20008370 	.word	0x20008370

0800bf08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bf0e:	4b1f      	ldr	r3, [pc, #124]	; (800bf8c <mem_init+0x84>)
 800bf10:	3303      	adds	r3, #3
 800bf12:	f023 0303 	bic.w	r3, r3, #3
 800bf16:	461a      	mov	r2, r3
 800bf18:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <mem_init+0x88>)
 800bf1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bf1c:	4b1c      	ldr	r3, [pc, #112]	; (800bf90 <mem_init+0x88>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bf36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bf3a:	f7ff ff1f 	bl	800bd7c <ptr_to_mem>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	4a14      	ldr	r2, [pc, #80]	; (800bf94 <mem_init+0x8c>)
 800bf42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bf44:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <mem_init+0x8c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bf4c:	4b11      	ldr	r3, [pc, #68]	; (800bf94 <mem_init+0x8c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bf56:	4b0f      	ldr	r3, [pc, #60]	; (800bf94 <mem_init+0x8c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bf60:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <mem_init+0x88>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a0c      	ldr	r2, [pc, #48]	; (800bf98 <mem_init+0x90>)
 800bf66:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bf68:	480c      	ldr	r0, [pc, #48]	; (800bf9c <mem_init+0x94>)
 800bf6a:	f00a fbd3 	bl	8016714 <sys_mutex_new>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d006      	beq.n	800bf82 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bf74:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <mem_init+0x98>)
 800bf76:	f240 221f 	movw	r2, #543	; 0x21f
 800bf7a:	490a      	ldr	r1, [pc, #40]	; (800bfa4 <mem_init+0x9c>)
 800bf7c:	480a      	ldr	r0, [pc, #40]	; (800bfa8 <mem_init+0xa0>)
 800bf7e:	f00a fdf3 	bl	8016b68 <iprintf>
  }
}
 800bf82:	bf00      	nop
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200112ec 	.word	0x200112ec
 800bf90:	20008364 	.word	0x20008364
 800bf94:	20008368 	.word	0x20008368
 800bf98:	20008370 	.word	0x20008370
 800bf9c:	2000836c 	.word	0x2000836c
 800bfa0:	08019128 	.word	0x08019128
 800bfa4:	080191fc 	.word	0x080191fc
 800bfa8:	08019170 	.word	0x08019170

0800bfac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fef3 	bl	800bda0 <mem_to_ptr>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff feda 	bl	800bd7c <ptr_to_mem>
 800bfc8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fed4 	bl	800bd7c <ptr_to_mem>
 800bfd4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfde:	d818      	bhi.n	800c012 <mem_link_valid+0x66>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	885b      	ldrh	r3, [r3, #2]
 800bfe4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfe8:	d813      	bhi.n	800c012 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bfee:	8afa      	ldrh	r2, [r7, #22]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d004      	beq.n	800bffe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	8afa      	ldrh	r2, [r7, #22]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d109      	bne.n	800c012 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bffe:	4b08      	ldr	r3, [pc, #32]	; (800c020 <mem_link_valid+0x74>)
 800c000:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	429a      	cmp	r2, r3
 800c006:	d006      	beq.n	800c016 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	885b      	ldrh	r3, [r3, #2]
 800c00c:	8afa      	ldrh	r2, [r7, #22]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d001      	beq.n	800c016 <mem_link_valid+0x6a>
    return 0;
 800c012:	2300      	movs	r3, #0
 800c014:	e000      	b.n	800c018 <mem_link_valid+0x6c>
  }
  return 1;
 800c016:	2301      	movs	r3, #1
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20008368 	.word	0x20008368

0800c024 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d070      	beq.n	800c114 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f003 0303 	and.w	r3, r3, #3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00d      	beq.n	800c058 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c03c:	4b37      	ldr	r3, [pc, #220]	; (800c11c <mem_free+0xf8>)
 800c03e:	f240 2273 	movw	r2, #627	; 0x273
 800c042:	4937      	ldr	r1, [pc, #220]	; (800c120 <mem_free+0xfc>)
 800c044:	4837      	ldr	r0, [pc, #220]	; (800c124 <mem_free+0x100>)
 800c046:	f00a fd8f 	bl	8016b68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c04a:	f00a fbb5 	bl	80167b8 <sys_arch_protect>
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f00a fbbf 	bl	80167d4 <sys_arch_unprotect>
    return;
 800c056:	e05e      	b.n	800c116 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3b08      	subs	r3, #8
 800c05c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c05e:	4b32      	ldr	r3, [pc, #200]	; (800c128 <mem_free+0x104>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	429a      	cmp	r2, r3
 800c066:	d306      	bcc.n	800c076 <mem_free+0x52>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f103 020c 	add.w	r2, r3, #12
 800c06e:	4b2f      	ldr	r3, [pc, #188]	; (800c12c <mem_free+0x108>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d90d      	bls.n	800c092 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c076:	4b29      	ldr	r3, [pc, #164]	; (800c11c <mem_free+0xf8>)
 800c078:	f240 227f 	movw	r2, #639	; 0x27f
 800c07c:	492c      	ldr	r1, [pc, #176]	; (800c130 <mem_free+0x10c>)
 800c07e:	4829      	ldr	r0, [pc, #164]	; (800c124 <mem_free+0x100>)
 800c080:	f00a fd72 	bl	8016b68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c084:	f00a fb98 	bl	80167b8 <sys_arch_protect>
 800c088:	6138      	str	r0, [r7, #16]
 800c08a:	6938      	ldr	r0, [r7, #16]
 800c08c:	f00a fba2 	bl	80167d4 <sys_arch_unprotect>
    return;
 800c090:	e041      	b.n	800c116 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c092:	4828      	ldr	r0, [pc, #160]	; (800c134 <mem_free+0x110>)
 800c094:	f00a fb54 	bl	8016740 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	791b      	ldrb	r3, [r3, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d110      	bne.n	800c0c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c0a0:	4b1e      	ldr	r3, [pc, #120]	; (800c11c <mem_free+0xf8>)
 800c0a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c0a6:	4924      	ldr	r1, [pc, #144]	; (800c138 <mem_free+0x114>)
 800c0a8:	481e      	ldr	r0, [pc, #120]	; (800c124 <mem_free+0x100>)
 800c0aa:	f00a fd5d 	bl	8016b68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c0ae:	4821      	ldr	r0, [pc, #132]	; (800c134 <mem_free+0x110>)
 800c0b0:	f00a fb55 	bl	801675e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0b4:	f00a fb80 	bl	80167b8 <sys_arch_protect>
 800c0b8:	6178      	str	r0, [r7, #20]
 800c0ba:	6978      	ldr	r0, [r7, #20]
 800c0bc:	f00a fb8a 	bl	80167d4 <sys_arch_unprotect>
    return;
 800c0c0:	e029      	b.n	800c116 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c0c2:	69f8      	ldr	r0, [r7, #28]
 800c0c4:	f7ff ff72 	bl	800bfac <mem_link_valid>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d110      	bne.n	800c0f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <mem_free+0xf8>)
 800c0d0:	f240 2295 	movw	r2, #661	; 0x295
 800c0d4:	4919      	ldr	r1, [pc, #100]	; (800c13c <mem_free+0x118>)
 800c0d6:	4813      	ldr	r0, [pc, #76]	; (800c124 <mem_free+0x100>)
 800c0d8:	f00a fd46 	bl	8016b68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c0dc:	4815      	ldr	r0, [pc, #84]	; (800c134 <mem_free+0x110>)
 800c0de:	f00a fb3e 	bl	801675e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0e2:	f00a fb69 	bl	80167b8 <sys_arch_protect>
 800c0e6:	61b8      	str	r0, [r7, #24]
 800c0e8:	69b8      	ldr	r0, [r7, #24]
 800c0ea:	f00a fb73 	bl	80167d4 <sys_arch_unprotect>
    return;
 800c0ee:	e012      	b.n	800c116 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c0f6:	4b12      	ldr	r3, [pc, #72]	; (800c140 <mem_free+0x11c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d202      	bcs.n	800c106 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c100:	4a0f      	ldr	r2, [pc, #60]	; (800c140 <mem_free+0x11c>)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c106:	69f8      	ldr	r0, [r7, #28]
 800c108:	f7ff fe5c 	bl	800bdc4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c10c:	4809      	ldr	r0, [pc, #36]	; (800c134 <mem_free+0x110>)
 800c10e:	f00a fb26 	bl	801675e <sys_mutex_unlock>
 800c112:	e000      	b.n	800c116 <mem_free+0xf2>
    return;
 800c114:	bf00      	nop
}
 800c116:	3720      	adds	r7, #32
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	08019128 	.word	0x08019128
 800c120:	08019218 	.word	0x08019218
 800c124:	08019170 	.word	0x08019170
 800c128:	20008364 	.word	0x20008364
 800c12c:	20008368 	.word	0x20008368
 800c130:	0801923c 	.word	0x0801923c
 800c134:	2000836c 	.word	0x2000836c
 800c138:	08019258 	.word	0x08019258
 800c13c:	08019280 	.word	0x08019280
 800c140:	20008370 	.word	0x20008370

0800c144 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c150:	887b      	ldrh	r3, [r7, #2]
 800c152:	3303      	adds	r3, #3
 800c154:	b29b      	uxth	r3, r3
 800c156:	f023 0303 	bic.w	r3, r3, #3
 800c15a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c15c:	8bfb      	ldrh	r3, [r7, #30]
 800c15e:	2b0b      	cmp	r3, #11
 800c160:	d801      	bhi.n	800c166 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c162:	230c      	movs	r3, #12
 800c164:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c166:	8bfb      	ldrh	r3, [r7, #30]
 800c168:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c16c:	d803      	bhi.n	800c176 <mem_trim+0x32>
 800c16e:	8bfa      	ldrh	r2, [r7, #30]
 800c170:	887b      	ldrh	r3, [r7, #2]
 800c172:	429a      	cmp	r2, r3
 800c174:	d201      	bcs.n	800c17a <mem_trim+0x36>
    return NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	e0d8      	b.n	800c32c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c17a:	4b6e      	ldr	r3, [pc, #440]	; (800c334 <mem_trim+0x1f0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	429a      	cmp	r2, r3
 800c182:	d304      	bcc.n	800c18e <mem_trim+0x4a>
 800c184:	4b6c      	ldr	r3, [pc, #432]	; (800c338 <mem_trim+0x1f4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d306      	bcc.n	800c19c <mem_trim+0x58>
 800c18e:	4b6b      	ldr	r3, [pc, #428]	; (800c33c <mem_trim+0x1f8>)
 800c190:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c194:	496a      	ldr	r1, [pc, #424]	; (800c340 <mem_trim+0x1fc>)
 800c196:	486b      	ldr	r0, [pc, #428]	; (800c344 <mem_trim+0x200>)
 800c198:	f00a fce6 	bl	8016b68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c19c:	4b65      	ldr	r3, [pc, #404]	; (800c334 <mem_trim+0x1f0>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d304      	bcc.n	800c1b0 <mem_trim+0x6c>
 800c1a6:	4b64      	ldr	r3, [pc, #400]	; (800c338 <mem_trim+0x1f4>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d307      	bcc.n	800c1c0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1b0:	f00a fb02 	bl	80167b8 <sys_arch_protect>
 800c1b4:	60b8      	str	r0, [r7, #8]
 800c1b6:	68b8      	ldr	r0, [r7, #8]
 800c1b8:	f00a fb0c 	bl	80167d4 <sys_arch_unprotect>
    return rmem;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	e0b5      	b.n	800c32c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3b08      	subs	r3, #8
 800c1c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c1c6:	69b8      	ldr	r0, [r7, #24]
 800c1c8:	f7ff fdea 	bl	800bda0 <mem_to_ptr>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	881a      	ldrh	r2, [r3, #0]
 800c1d4:	8afb      	ldrh	r3, [r7, #22]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	3b08      	subs	r3, #8
 800c1dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c1de:	8bfa      	ldrh	r2, [r7, #30]
 800c1e0:	8abb      	ldrh	r3, [r7, #20]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d906      	bls.n	800c1f4 <mem_trim+0xb0>
 800c1e6:	4b55      	ldr	r3, [pc, #340]	; (800c33c <mem_trim+0x1f8>)
 800c1e8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c1ec:	4956      	ldr	r1, [pc, #344]	; (800c348 <mem_trim+0x204>)
 800c1ee:	4855      	ldr	r0, [pc, #340]	; (800c344 <mem_trim+0x200>)
 800c1f0:	f00a fcba 	bl	8016b68 <iprintf>
  if (newsize > size) {
 800c1f4:	8bfa      	ldrh	r2, [r7, #30]
 800c1f6:	8abb      	ldrh	r3, [r7, #20]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d901      	bls.n	800c200 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e095      	b.n	800c32c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c200:	8bfa      	ldrh	r2, [r7, #30]
 800c202:	8abb      	ldrh	r3, [r7, #20]
 800c204:	429a      	cmp	r2, r3
 800c206:	d101      	bne.n	800c20c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	e08f      	b.n	800c32c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c20c:	484f      	ldr	r0, [pc, #316]	; (800c34c <mem_trim+0x208>)
 800c20e:	f00a fa97 	bl	8016740 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fdb0 	bl	800bd7c <ptr_to_mem>
 800c21c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	791b      	ldrb	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d13f      	bne.n	800c2a6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c22e:	d106      	bne.n	800c23e <mem_trim+0xfa>
 800c230:	4b42      	ldr	r3, [pc, #264]	; (800c33c <mem_trim+0x1f8>)
 800c232:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c236:	4946      	ldr	r1, [pc, #280]	; (800c350 <mem_trim+0x20c>)
 800c238:	4842      	ldr	r0, [pc, #264]	; (800c344 <mem_trim+0x200>)
 800c23a:	f00a fc95 	bl	8016b68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c244:	8afa      	ldrh	r2, [r7, #22]
 800c246:	8bfb      	ldrh	r3, [r7, #30]
 800c248:	4413      	add	r3, r2
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	3308      	adds	r3, #8
 800c24e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c250:	4b40      	ldr	r3, [pc, #256]	; (800c354 <mem_trim+0x210>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	d106      	bne.n	800c268 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c25a:	89fb      	ldrh	r3, [r7, #14]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff fd8d 	bl	800bd7c <ptr_to_mem>
 800c262:	4603      	mov	r3, r0
 800c264:	4a3b      	ldr	r2, [pc, #236]	; (800c354 <mem_trim+0x210>)
 800c266:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c268:	89fb      	ldrh	r3, [r7, #14]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fd86 	bl	800bd7c <ptr_to_mem>
 800c270:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2200      	movs	r2, #0
 800c276:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	89ba      	ldrh	r2, [r7, #12]
 800c27c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	8afa      	ldrh	r2, [r7, #22]
 800c282:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	89fa      	ldrh	r2, [r7, #14]
 800c288:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c292:	d047      	beq.n	800c324 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff fd6f 	bl	800bd7c <ptr_to_mem>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	89fb      	ldrh	r3, [r7, #14]
 800c2a2:	8053      	strh	r3, [r2, #2]
 800c2a4:	e03e      	b.n	800c324 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c2a6:	8bfb      	ldrh	r3, [r7, #30]
 800c2a8:	f103 0214 	add.w	r2, r3, #20
 800c2ac:	8abb      	ldrh	r3, [r7, #20]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d838      	bhi.n	800c324 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c2b2:	8afa      	ldrh	r2, [r7, #22]
 800c2b4:	8bfb      	ldrh	r3, [r7, #30]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2c6:	d106      	bne.n	800c2d6 <mem_trim+0x192>
 800c2c8:	4b1c      	ldr	r3, [pc, #112]	; (800c33c <mem_trim+0x1f8>)
 800c2ca:	f240 3216 	movw	r2, #790	; 0x316
 800c2ce:	4920      	ldr	r1, [pc, #128]	; (800c350 <mem_trim+0x20c>)
 800c2d0:	481c      	ldr	r0, [pc, #112]	; (800c344 <mem_trim+0x200>)
 800c2d2:	f00a fc49 	bl	8016b68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c2d6:	89fb      	ldrh	r3, [r7, #14]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7ff fd4f 	bl	800bd7c <ptr_to_mem>
 800c2de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c2e0:	4b1c      	ldr	r3, [pc, #112]	; (800c354 <mem_trim+0x210>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d202      	bcs.n	800c2f0 <mem_trim+0x1ac>
      lfree = mem2;
 800c2ea:	4a1a      	ldr	r2, [pc, #104]	; (800c354 <mem_trim+0x210>)
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	8afa      	ldrh	r2, [r7, #22]
 800c302:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	89fa      	ldrh	r2, [r7, #14]
 800c308:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c312:	d007      	beq.n	800c324 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f7ff fd2f 	bl	800bd7c <ptr_to_mem>
 800c31e:	4602      	mov	r2, r0
 800c320:	89fb      	ldrh	r3, [r7, #14]
 800c322:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c324:	4809      	ldr	r0, [pc, #36]	; (800c34c <mem_trim+0x208>)
 800c326:	f00a fa1a 	bl	801675e <sys_mutex_unlock>
  return rmem;
 800c32a:	687b      	ldr	r3, [r7, #4]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20008364 	.word	0x20008364
 800c338:	20008368 	.word	0x20008368
 800c33c:	08019128 	.word	0x08019128
 800c340:	080192b4 	.word	0x080192b4
 800c344:	08019170 	.word	0x08019170
 800c348:	080192cc 	.word	0x080192cc
 800c34c:	2000836c 	.word	0x2000836c
 800c350:	080192ec 	.word	0x080192ec
 800c354:	20008370 	.word	0x20008370

0800c358 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	4603      	mov	r3, r0
 800c360:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <mem_malloc+0x14>
    return NULL;
 800c368:	2300      	movs	r3, #0
 800c36a:	e0e2      	b.n	800c532 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c36c:	88fb      	ldrh	r3, [r7, #6]
 800c36e:	3303      	adds	r3, #3
 800c370:	b29b      	uxth	r3, r3
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c378:	8bbb      	ldrh	r3, [r7, #28]
 800c37a:	2b0b      	cmp	r3, #11
 800c37c:	d801      	bhi.n	800c382 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c37e:	230c      	movs	r3, #12
 800c380:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c382:	8bbb      	ldrh	r3, [r7, #28]
 800c384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c388:	d803      	bhi.n	800c392 <mem_malloc+0x3a>
 800c38a:	8bba      	ldrh	r2, [r7, #28]
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d201      	bcs.n	800c396 <mem_malloc+0x3e>
    return NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	e0cd      	b.n	800c532 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c396:	4869      	ldr	r0, [pc, #420]	; (800c53c <mem_malloc+0x1e4>)
 800c398:	f00a f9d2 	bl	8016740 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c39c:	4b68      	ldr	r3, [pc, #416]	; (800c540 <mem_malloc+0x1e8>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fcfd 	bl	800bda0 <mem_to_ptr>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	83fb      	strh	r3, [r7, #30]
 800c3aa:	e0b7      	b.n	800c51c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c3ac:	8bfb      	ldrh	r3, [r7, #30]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff fce4 	bl	800bd7c <ptr_to_mem>
 800c3b4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	791b      	ldrb	r3, [r3, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f040 80a7 	bne.w	800c50e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	8bfb      	ldrh	r3, [r7, #30]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	f1a3 0208 	sub.w	r2, r3, #8
 800c3ce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	f0c0 809c 	bcc.w	800c50e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	8bfb      	ldrh	r3, [r7, #30]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	f1a3 0208 	sub.w	r2, r3, #8
 800c3e4:	8bbb      	ldrh	r3, [r7, #28]
 800c3e6:	3314      	adds	r3, #20
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d333      	bcc.n	800c454 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c3ec:	8bfa      	ldrh	r2, [r7, #30]
 800c3ee:	8bbb      	ldrh	r3, [r7, #28]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c3f8:	8a7b      	ldrh	r3, [r7, #18]
 800c3fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3fe:	d106      	bne.n	800c40e <mem_malloc+0xb6>
 800c400:	4b50      	ldr	r3, [pc, #320]	; (800c544 <mem_malloc+0x1ec>)
 800c402:	f240 3287 	movw	r2, #903	; 0x387
 800c406:	4950      	ldr	r1, [pc, #320]	; (800c548 <mem_malloc+0x1f0>)
 800c408:	4850      	ldr	r0, [pc, #320]	; (800c54c <mem_malloc+0x1f4>)
 800c40a:	f00a fbad 	bl	8016b68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c40e:	8a7b      	ldrh	r3, [r7, #18]
 800c410:	4618      	mov	r0, r3
 800c412:	f7ff fcb3 	bl	800bd7c <ptr_to_mem>
 800c416:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	881a      	ldrh	r2, [r3, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	8bfa      	ldrh	r2, [r7, #30]
 800c42a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	8a7a      	ldrh	r2, [r7, #18]
 800c430:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2201      	movs	r2, #1
 800c436:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c440:	d00b      	beq.n	800c45a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fc98 	bl	800bd7c <ptr_to_mem>
 800c44c:	4602      	mov	r2, r0
 800c44e:	8a7b      	ldrh	r3, [r7, #18]
 800c450:	8053      	strh	r3, [r2, #2]
 800c452:	e002      	b.n	800c45a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2201      	movs	r2, #1
 800c458:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c45a:	4b39      	ldr	r3, [pc, #228]	; (800c540 <mem_malloc+0x1e8>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	429a      	cmp	r2, r3
 800c462:	d127      	bne.n	800c4b4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c464:	4b36      	ldr	r3, [pc, #216]	; (800c540 <mem_malloc+0x1e8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c46a:	e005      	b.n	800c478 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fc83 	bl	800bd7c <ptr_to_mem>
 800c476:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	791b      	ldrb	r3, [r3, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d004      	beq.n	800c48a <mem_malloc+0x132>
 800c480:	4b33      	ldr	r3, [pc, #204]	; (800c550 <mem_malloc+0x1f8>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	429a      	cmp	r2, r3
 800c488:	d1f0      	bne.n	800c46c <mem_malloc+0x114>
          }
          lfree = cur;
 800c48a:	4a2d      	ldr	r2, [pc, #180]	; (800c540 <mem_malloc+0x1e8>)
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c490:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <mem_malloc+0x1e8>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <mem_malloc+0x1f8>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d00b      	beq.n	800c4b4 <mem_malloc+0x15c>
 800c49c:	4b28      	ldr	r3, [pc, #160]	; (800c540 <mem_malloc+0x1e8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	791b      	ldrb	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d006      	beq.n	800c4b4 <mem_malloc+0x15c>
 800c4a6:	4b27      	ldr	r3, [pc, #156]	; (800c544 <mem_malloc+0x1ec>)
 800c4a8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c4ac:	4929      	ldr	r1, [pc, #164]	; (800c554 <mem_malloc+0x1fc>)
 800c4ae:	4827      	ldr	r0, [pc, #156]	; (800c54c <mem_malloc+0x1f4>)
 800c4b0:	f00a fb5a 	bl	8016b68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c4b4:	4821      	ldr	r0, [pc, #132]	; (800c53c <mem_malloc+0x1e4>)
 800c4b6:	f00a f952 	bl	801675e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c4ba:	8bba      	ldrh	r2, [r7, #28]
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	4413      	add	r3, r2
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	4a23      	ldr	r2, [pc, #140]	; (800c550 <mem_malloc+0x1f8>)
 800c4c4:	6812      	ldr	r2, [r2, #0]
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d906      	bls.n	800c4d8 <mem_malloc+0x180>
 800c4ca:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <mem_malloc+0x1ec>)
 800c4cc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c4d0:	4921      	ldr	r1, [pc, #132]	; (800c558 <mem_malloc+0x200>)
 800c4d2:	481e      	ldr	r0, [pc, #120]	; (800c54c <mem_malloc+0x1f4>)
 800c4d4:	f00a fb48 	bl	8016b68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f003 0303 	and.w	r3, r3, #3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <mem_malloc+0x198>
 800c4e2:	4b18      	ldr	r3, [pc, #96]	; (800c544 <mem_malloc+0x1ec>)
 800c4e4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c4e8:	491c      	ldr	r1, [pc, #112]	; (800c55c <mem_malloc+0x204>)
 800c4ea:	4818      	ldr	r0, [pc, #96]	; (800c54c <mem_malloc+0x1f4>)
 800c4ec:	f00a fb3c 	bl	8016b68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d006      	beq.n	800c508 <mem_malloc+0x1b0>
 800c4fa:	4b12      	ldr	r3, [pc, #72]	; (800c544 <mem_malloc+0x1ec>)
 800c4fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c500:	4917      	ldr	r1, [pc, #92]	; (800c560 <mem_malloc+0x208>)
 800c502:	4812      	ldr	r0, [pc, #72]	; (800c54c <mem_malloc+0x1f4>)
 800c504:	f00a fb30 	bl	8016b68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	3308      	adds	r3, #8
 800c50c:	e011      	b.n	800c532 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c50e:	8bfb      	ldrh	r3, [r7, #30]
 800c510:	4618      	mov	r0, r3
 800c512:	f7ff fc33 	bl	800bd7c <ptr_to_mem>
 800c516:	4603      	mov	r3, r0
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c51c:	8bfa      	ldrh	r2, [r7, #30]
 800c51e:	8bbb      	ldrh	r3, [r7, #28]
 800c520:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c524:	429a      	cmp	r2, r3
 800c526:	f4ff af41 	bcc.w	800c3ac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c52a:	4804      	ldr	r0, [pc, #16]	; (800c53c <mem_malloc+0x1e4>)
 800c52c:	f00a f917 	bl	801675e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3720      	adds	r7, #32
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	2000836c 	.word	0x2000836c
 800c540:	20008370 	.word	0x20008370
 800c544:	08019128 	.word	0x08019128
 800c548:	080192ec 	.word	0x080192ec
 800c54c:	08019170 	.word	0x08019170
 800c550:	20008368 	.word	0x20008368
 800c554:	08019300 	.word	0x08019300
 800c558:	0801931c 	.word	0x0801931c
 800c55c:	0801934c 	.word	0x0801934c
 800c560:	0801937c 	.word	0x0801937c

0800c564 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	2200      	movs	r2, #0
 800c572:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	3303      	adds	r3, #3
 800c57a:	f023 0303 	bic.w	r3, r3, #3
 800c57e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	e011      	b.n	800c5aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	60fb      	str	r3, [r7, #12]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	885b      	ldrh	r3, [r3, #2]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	dbe7      	blt.n	800c586 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c5b6:	bf00      	nop
 800c5b8:	bf00      	nop
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	80fb      	strh	r3, [r7, #6]
 800c5ce:	e009      	b.n	800c5e4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c5d0:	88fb      	ldrh	r3, [r7, #6]
 800c5d2:	4a08      	ldr	r2, [pc, #32]	; (800c5f4 <memp_init+0x30>)
 800c5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff ffc3 	bl	800c564 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5de:	88fb      	ldrh	r3, [r7, #6]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	80fb      	strh	r3, [r7, #6]
 800c5e4:	88fb      	ldrh	r3, [r7, #6]
 800c5e6:	2b0c      	cmp	r3, #12
 800c5e8:	d9f2      	bls.n	800c5d0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c5ea:	bf00      	nop
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	08022b04 	.word	0x08022b04

0800c5f8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c600:	f00a f8da 	bl	80167b8 <sys_arch_protect>
 800c604:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d015      	beq.n	800c640 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	6812      	ldr	r2, [r2, #0]
 800c61c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f003 0303 	and.w	r3, r3, #3
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <do_memp_malloc_pool+0x3e>
 800c628:	4b09      	ldr	r3, [pc, #36]	; (800c650 <do_memp_malloc_pool+0x58>)
 800c62a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c62e:	4909      	ldr	r1, [pc, #36]	; (800c654 <do_memp_malloc_pool+0x5c>)
 800c630:	4809      	ldr	r0, [pc, #36]	; (800c658 <do_memp_malloc_pool+0x60>)
 800c632:	f00a fa99 	bl	8016b68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f00a f8cc 	bl	80167d4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	e003      	b.n	800c648 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f00a f8c7 	bl	80167d4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	080193a0 	.word	0x080193a0
 800c654:	080193d0 	.word	0x080193d0
 800c658:	080193f4 	.word	0x080193f4

0800c65c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	2b0c      	cmp	r3, #12
 800c66a:	d908      	bls.n	800c67e <memp_malloc+0x22>
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <memp_malloc+0x3c>)
 800c66e:	f240 1257 	movw	r2, #343	; 0x157
 800c672:	490a      	ldr	r1, [pc, #40]	; (800c69c <memp_malloc+0x40>)
 800c674:	480a      	ldr	r0, [pc, #40]	; (800c6a0 <memp_malloc+0x44>)
 800c676:	f00a fa77 	bl	8016b68 <iprintf>
 800c67a:	2300      	movs	r3, #0
 800c67c:	e008      	b.n	800c690 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	4a08      	ldr	r2, [pc, #32]	; (800c6a4 <memp_malloc+0x48>)
 800c682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff ffb6 	bl	800c5f8 <do_memp_malloc_pool>
 800c68c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c68e:	68fb      	ldr	r3, [r7, #12]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	080193a0 	.word	0x080193a0
 800c69c:	08019430 	.word	0x08019430
 800c6a0:	080193f4 	.word	0x080193f4
 800c6a4:	08022b04 	.word	0x08022b04

0800c6a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	f003 0303 	and.w	r3, r3, #3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <do_memp_free_pool+0x22>
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <do_memp_free_pool+0x4c>)
 800c6be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c6c2:	490d      	ldr	r1, [pc, #52]	; (800c6f8 <do_memp_free_pool+0x50>)
 800c6c4:	480d      	ldr	r0, [pc, #52]	; (800c6fc <do_memp_free_pool+0x54>)
 800c6c6:	f00a fa4f 	bl	8016b68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c6ce:	f00a f873 	bl	80167b8 <sys_arch_protect>
 800c6d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c6e6:	68b8      	ldr	r0, [r7, #8]
 800c6e8:	f00a f874 	bl	80167d4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	080193a0 	.word	0x080193a0
 800c6f8:	08019450 	.word	0x08019450
 800c6fc:	080193f4 	.word	0x080193f4

0800c700 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	6039      	str	r1, [r7, #0]
 800c70a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b0c      	cmp	r3, #12
 800c710:	d907      	bls.n	800c722 <memp_free+0x22>
 800c712:	4b0c      	ldr	r3, [pc, #48]	; (800c744 <memp_free+0x44>)
 800c714:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c718:	490b      	ldr	r1, [pc, #44]	; (800c748 <memp_free+0x48>)
 800c71a:	480c      	ldr	r0, [pc, #48]	; (800c74c <memp_free+0x4c>)
 800c71c:	f00a fa24 	bl	8016b68 <iprintf>
 800c720:	e00c      	b.n	800c73c <memp_free+0x3c>

  if (mem == NULL) {
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c728:	79fb      	ldrb	r3, [r7, #7]
 800c72a:	4a09      	ldr	r2, [pc, #36]	; (800c750 <memp_free+0x50>)
 800c72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff ffb8 	bl	800c6a8 <do_memp_free_pool>
 800c738:	e000      	b.n	800c73c <memp_free+0x3c>
    return;
 800c73a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	080193a0 	.word	0x080193a0
 800c748:	08019470 	.word	0x08019470
 800c74c:	080193f4 	.word	0x080193f4
 800c750:	08022b04 	.word	0x08022b04

0800c754 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c754:	b480      	push	{r7}
 800c756:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
	...

0800c764 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d108      	bne.n	800c78a <netif_add+0x26>
 800c778:	4b57      	ldr	r3, [pc, #348]	; (800c8d8 <netif_add+0x174>)
 800c77a:	f240 1227 	movw	r2, #295	; 0x127
 800c77e:	4957      	ldr	r1, [pc, #348]	; (800c8dc <netif_add+0x178>)
 800c780:	4857      	ldr	r0, [pc, #348]	; (800c8e0 <netif_add+0x17c>)
 800c782:	f00a f9f1 	bl	8016b68 <iprintf>
 800c786:	2300      	movs	r3, #0
 800c788:	e0a2      	b.n	800c8d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d108      	bne.n	800c7a2 <netif_add+0x3e>
 800c790:	4b51      	ldr	r3, [pc, #324]	; (800c8d8 <netif_add+0x174>)
 800c792:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c796:	4953      	ldr	r1, [pc, #332]	; (800c8e4 <netif_add+0x180>)
 800c798:	4851      	ldr	r0, [pc, #324]	; (800c8e0 <netif_add+0x17c>)
 800c79a:	f00a f9e5 	bl	8016b68 <iprintf>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e096      	b.n	800c8d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d101      	bne.n	800c7ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c7a8:	4b4f      	ldr	r3, [pc, #316]	; (800c8e8 <netif_add+0x184>)
 800c7aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c7b2:	4b4d      	ldr	r3, [pc, #308]	; (800c8e8 <netif_add+0x184>)
 800c7b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c7bc:	4b4a      	ldr	r3, [pc, #296]	; (800c8e8 <netif_add+0x184>)
 800c7be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	4a45      	ldr	r2, [pc, #276]	; (800c8ec <netif_add+0x188>)
 800c7d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a3a      	ldr	r2, [r7, #32]
 800c7f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c7f2:	4b3f      	ldr	r3, [pc, #252]	; (800c8f0 <netif_add+0x18c>)
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c800:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 f913 	bl	800ca34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	4798      	blx	r3
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <netif_add+0xba>
    return NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	e058      	b.n	800c8d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c824:	2bff      	cmp	r3, #255	; 0xff
 800c826:	d103      	bne.n	800c830 <netif_add+0xcc>
        netif->num = 0;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c834:	4b2f      	ldr	r3, [pc, #188]	; (800c8f4 <netif_add+0x190>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	e02b      	b.n	800c894 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	429a      	cmp	r2, r3
 800c842:	d106      	bne.n	800c852 <netif_add+0xee>
 800c844:	4b24      	ldr	r3, [pc, #144]	; (800c8d8 <netif_add+0x174>)
 800c846:	f240 128b 	movw	r2, #395	; 0x18b
 800c84a:	492b      	ldr	r1, [pc, #172]	; (800c8f8 <netif_add+0x194>)
 800c84c:	4824      	ldr	r0, [pc, #144]	; (800c8e0 <netif_add+0x17c>)
 800c84e:	f00a f98b 	bl	8016b68 <iprintf>
        num_netifs++;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3301      	adds	r3, #1
 800c856:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2bff      	cmp	r3, #255	; 0xff
 800c85c:	dd06      	ble.n	800c86c <netif_add+0x108>
 800c85e:	4b1e      	ldr	r3, [pc, #120]	; (800c8d8 <netif_add+0x174>)
 800c860:	f240 128d 	movw	r2, #397	; 0x18d
 800c864:	4925      	ldr	r1, [pc, #148]	; (800c8fc <netif_add+0x198>)
 800c866:	481e      	ldr	r0, [pc, #120]	; (800c8e0 <netif_add+0x17c>)
 800c868:	f00a f97e 	bl	8016b68 <iprintf>
        if (netif2->num == netif->num) {
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c878:	429a      	cmp	r2, r3
 800c87a:	d108      	bne.n	800c88e <netif_add+0x12a>
          netif->num++;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c882:	3301      	adds	r3, #1
 800c884:	b2da      	uxtb	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c88c:	e005      	b.n	800c89a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1d0      	bne.n	800c83c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1be      	bne.n	800c81e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8a6:	2bfe      	cmp	r3, #254	; 0xfe
 800c8a8:	d103      	bne.n	800c8b2 <netif_add+0x14e>
    netif_num = 0;
 800c8aa:	4b11      	ldr	r3, [pc, #68]	; (800c8f0 <netif_add+0x18c>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
 800c8b0:	e006      	b.n	800c8c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <netif_add+0x18c>)
 800c8be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	; (800c8f4 <netif_add+0x190>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c8c8:	4a0a      	ldr	r2, [pc, #40]	; (800c8f4 <netif_add+0x190>)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	0801948c 	.word	0x0801948c
 800c8dc:	08019520 	.word	0x08019520
 800c8e0:	080194dc 	.word	0x080194dc
 800c8e4:	0801953c 	.word	0x0801953c
 800c8e8:	08022b78 	.word	0x08022b78
 800c8ec:	0800cd0f 	.word	0x0800cd0f
 800c8f0:	200083a8 	.word	0x200083a8
 800c8f4:	20014a94 	.word	0x20014a94
 800c8f8:	08019560 	.word	0x08019560
 800c8fc:	08019574 	.word	0x08019574

0800c900 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f002 fe23 	bl	800f558 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f007 fb8b 	bl	8014030 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d106      	bne.n	800c944 <netif_do_set_ipaddr+0x20>
 800c936:	4b1d      	ldr	r3, [pc, #116]	; (800c9ac <netif_do_set_ipaddr+0x88>)
 800c938:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c93c:	491c      	ldr	r1, [pc, #112]	; (800c9b0 <netif_do_set_ipaddr+0x8c>)
 800c93e:	481d      	ldr	r0, [pc, #116]	; (800c9b4 <netif_do_set_ipaddr+0x90>)
 800c940:	f00a f912 	bl	8016b68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <netif_do_set_ipaddr+0x34>
 800c94a:	4b18      	ldr	r3, [pc, #96]	; (800c9ac <netif_do_set_ipaddr+0x88>)
 800c94c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c950:	4917      	ldr	r1, [pc, #92]	; (800c9b0 <netif_do_set_ipaddr+0x8c>)
 800c952:	4818      	ldr	r0, [pc, #96]	; (800c9b4 <netif_do_set_ipaddr+0x90>)
 800c954:	f00a f908 	bl	8016b68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3304      	adds	r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d01c      	beq.n	800c9a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3304      	adds	r3, #4
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c976:	f107 0314 	add.w	r3, r7, #20
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7ff ffbf 	bl	800c900 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <netif_do_set_ipaddr+0x6a>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	e000      	b.n	800c990 <netif_do_set_ipaddr+0x6c>
 800c98e:	2300      	movs	r3, #0
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c994:	2101      	movs	r1, #1
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f8d2 	bl	800cb40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c99c:	2301      	movs	r3, #1
 800c99e:	e000      	b.n	800c9a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	0801948c 	.word	0x0801948c
 800c9b0:	080195a4 	.word	0x080195a4
 800c9b4:	080194dc 	.word	0x080194dc

0800c9b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3308      	adds	r3, #8
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d00a      	beq.n	800c9e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <netif_do_set_netmask+0x26>
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	e000      	b.n	800c9e0 <netif_do_set_netmask+0x28>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	330c      	adds	r3, #12
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d00a      	beq.n	800ca26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <netif_do_set_gw+0x26>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	e000      	b.n	800ca1e <netif_do_set_gw+0x28>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ca50:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <netif_set_addr+0x90>)
 800ca52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ca5a:	4b1a      	ldr	r3, [pc, #104]	; (800cac4 <netif_set_addr+0x90>)
 800ca5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ca64:	4b17      	ldr	r3, [pc, #92]	; (800cac4 <netif_set_addr+0x90>)
 800ca66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <netif_set_addr+0x42>
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <netif_set_addr+0x46>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e000      	b.n	800ca7c <netif_set_addr+0x48>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca84:	f107 0310 	add.w	r3, r7, #16
 800ca88:	461a      	mov	r2, r3
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff ff49 	bl	800c924 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff ff8e 	bl	800c9b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ca9c:	69ba      	ldr	r2, [r7, #24]
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff ffa8 	bl	800c9f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d106      	bne.n	800caba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800caac:	f107 0310 	add.w	r3, r7, #16
 800cab0:	461a      	mov	r2, r3
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff ff35 	bl	800c924 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800caba:	bf00      	nop
 800cabc:	3720      	adds	r7, #32
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	08022b78 	.word	0x08022b78

0800cac8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cad0:	4a04      	ldr	r2, [pc, #16]	; (800cae4 <netif_set_default+0x1c>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20014a98 	.word	0x20014a98

0800cae8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d107      	bne.n	800cb06 <netif_set_up+0x1e>
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <netif_set_up+0x4c>)
 800caf8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cafc:	490e      	ldr	r1, [pc, #56]	; (800cb38 <netif_set_up+0x50>)
 800cafe:	480f      	ldr	r0, [pc, #60]	; (800cb3c <netif_set_up+0x54>)
 800cb00:	f00a f832 	bl	8016b68 <iprintf>
 800cb04:	e013      	b.n	800cb2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10c      	bne.n	800cb2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb1a:	f043 0301 	orr.w	r3, r3, #1
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cb26:	2103      	movs	r1, #3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f809 	bl	800cb40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	0801948c 	.word	0x0801948c
 800cb38:	08019614 	.word	0x08019614
 800cb3c:	080194dc 	.word	0x080194dc

0800cb40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <netif_issue_reports+0x20>
 800cb52:	4b18      	ldr	r3, [pc, #96]	; (800cbb4 <netif_issue_reports+0x74>)
 800cb54:	f240 326d 	movw	r2, #877	; 0x36d
 800cb58:	4917      	ldr	r1, [pc, #92]	; (800cbb8 <netif_issue_reports+0x78>)
 800cb5a:	4818      	ldr	r0, [pc, #96]	; (800cbbc <netif_issue_reports+0x7c>)
 800cb5c:	f00a f804 	bl	8016b68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb66:	f003 0304 	and.w	r3, r3, #4
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d01e      	beq.n	800cbac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d017      	beq.n	800cbac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d013      	beq.n	800cbae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3304      	adds	r3, #4
 800cb8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb96:	f003 0308 	and.w	r3, r3, #8
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f008 f9ad 	bl	8014f04 <etharp_request>
 800cbaa:	e000      	b.n	800cbae <netif_issue_reports+0x6e>
    return;
 800cbac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	0801948c 	.word	0x0801948c
 800cbb8:	08019630 	.word	0x08019630
 800cbbc:	080194dc 	.word	0x080194dc

0800cbc0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d107      	bne.n	800cbde <netif_set_down+0x1e>
 800cbce:	4b12      	ldr	r3, [pc, #72]	; (800cc18 <netif_set_down+0x58>)
 800cbd0:	f240 329b 	movw	r2, #923	; 0x39b
 800cbd4:	4911      	ldr	r1, [pc, #68]	; (800cc1c <netif_set_down+0x5c>)
 800cbd6:	4812      	ldr	r0, [pc, #72]	; (800cc20 <netif_set_down+0x60>)
 800cbd8:	f009 ffc6 	bl	8016b68 <iprintf>
 800cbdc:	e019      	b.n	800cc12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d012      	beq.n	800cc12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbf2:	f023 0301 	bic.w	r3, r3, #1
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc04:	f003 0308 	and.w	r3, r3, #8
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f007 fd37 	bl	8014680 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	0801948c 	.word	0x0801948c
 800cc1c:	08019654 	.word	0x08019654
 800cc20:	080194dc 	.word	0x080194dc

0800cc24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d107      	bne.n	800cc42 <netif_set_link_up+0x1e>
 800cc32:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <netif_set_link_up+0x5c>)
 800cc34:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cc38:	4912      	ldr	r1, [pc, #72]	; (800cc84 <netif_set_link_up+0x60>)
 800cc3a:	4813      	ldr	r0, [pc, #76]	; (800cc88 <netif_set_link_up+0x64>)
 800cc3c:	f009 ff94 	bl	8016b68 <iprintf>
 800cc40:	e01b      	b.n	800cc7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc48:	f003 0304 	and.w	r3, r3, #4
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d114      	bne.n	800cc7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc56:	f043 0304 	orr.w	r3, r3, #4
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cc62:	2103      	movs	r1, #3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ff6b 	bl	800cb40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <netif_set_link_up+0x56>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0801948c 	.word	0x0801948c
 800cc84:	08019674 	.word	0x08019674
 800cc88:	080194dc 	.word	0x080194dc

0800cc8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d107      	bne.n	800ccaa <netif_set_link_down+0x1e>
 800cc9a:	4b11      	ldr	r3, [pc, #68]	; (800cce0 <netif_set_link_down+0x54>)
 800cc9c:	f240 4206 	movw	r2, #1030	; 0x406
 800cca0:	4910      	ldr	r1, [pc, #64]	; (800cce4 <netif_set_link_down+0x58>)
 800cca2:	4811      	ldr	r0, [pc, #68]	; (800cce8 <netif_set_link_down+0x5c>)
 800cca4:	f009 ff60 	bl	8016b68 <iprintf>
 800cca8:	e017      	b.n	800ccda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d010      	beq.n	800ccda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccbe:	f023 0304 	bic.w	r3, r3, #4
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <netif_set_link_down+0x4e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	69db      	ldr	r3, [r3, #28]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0801948c 	.word	0x0801948c
 800cce4:	08019698 	.word	0x08019698
 800cce8:	080194dc 	.word	0x080194dc

0800ccec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	61da      	str	r2, [r3, #28]
  }
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b085      	sub	sp, #20
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cd1a:	f06f 030b 	mvn.w	r3, #11
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
	...

0800cd2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d013      	beq.n	800cd64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <netif_get_by_index+0x48>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e00c      	b.n	800cd5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	79fa      	ldrb	r2, [r7, #7]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d101      	bne.n	800cd58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	e006      	b.n	800cd66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1ef      	bne.n	800cd44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	20014a94 	.word	0x20014a94

0800cd78 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cd7e:	f009 fd1b 	bl	80167b8 <sys_arch_protect>
 800cd82:	6038      	str	r0, [r7, #0]
 800cd84:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <pbuf_free_ooseq+0x44>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	6838      	ldr	r0, [r7, #0]
 800cd8c:	f009 fd22 	bl	80167d4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd90:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <pbuf_free_ooseq+0x48>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	e00a      	b.n	800cdae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d003      	beq.n	800cda8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f002 fc17 	bl	800f5d4 <tcp_free_ooseq>
      return;
 800cda6:	e005      	b.n	800cdb4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	607b      	str	r3, [r7, #4]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d1f1      	bne.n	800cd98 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20014a9c 	.word	0x20014a9c
 800cdc0:	20014aa4 	.word	0x20014aa4

0800cdc4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cdcc:	f7ff ffd4 	bl	800cd78 <pbuf_free_ooseq>
}
 800cdd0:	bf00      	nop
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cdde:	f009 fceb 	bl	80167b8 <sys_arch_protect>
 800cde2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cde4:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <pbuf_pool_is_empty+0x4c>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cdea:	4b0e      	ldr	r3, [pc, #56]	; (800ce24 <pbuf_pool_is_empty+0x4c>)
 800cdec:	2201      	movs	r2, #1
 800cdee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f009 fcef 	bl	80167d4 <sys_arch_unprotect>

  if (!queued) {
 800cdf6:	78fb      	ldrb	r3, [r7, #3]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10f      	bne.n	800ce1c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	480a      	ldr	r0, [pc, #40]	; (800ce28 <pbuf_pool_is_empty+0x50>)
 800ce00:	f7fc fe44 	bl	8009a8c <tcpip_try_callback>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <pbuf_pool_is_empty+0x44>
 800ce0a:	f009 fcd5 	bl	80167b8 <sys_arch_protect>
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <pbuf_pool_is_empty+0x4c>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f009 fcdc 	bl	80167d4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ce1c:	bf00      	nop
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20014a9c 	.word	0x20014a9c
 800ce28:	0800cdc5 	.word	0x0800cdc5

0800ce2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	4611      	mov	r1, r2
 800ce38:	461a      	mov	r2, r3
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	80fb      	strh	r3, [r7, #6]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	88fa      	ldrh	r2, [r7, #6]
 800ce52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	88ba      	ldrh	r2, [r7, #4]
 800ce58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ce5a:	8b3b      	ldrh	r3, [r7, #24]
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	7f3a      	ldrb	r2, [r7, #28]
 800ce66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	73da      	strb	r2, [r3, #15]
}
 800ce74:	bf00      	nop
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08c      	sub	sp, #48	; 0x30
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	4603      	mov	r3, r0
 800ce88:	71fb      	strb	r3, [r7, #7]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	80bb      	strh	r3, [r7, #4]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ce92:	79fb      	ldrb	r3, [r7, #7]
 800ce94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ce96:	887b      	ldrh	r3, [r7, #2]
 800ce98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ce9c:	d07f      	beq.n	800cf9e <pbuf_alloc+0x11e>
 800ce9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cea2:	f300 80c8 	bgt.w	800d036 <pbuf_alloc+0x1b6>
 800cea6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ceaa:	d010      	beq.n	800cece <pbuf_alloc+0x4e>
 800ceac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ceb0:	f300 80c1 	bgt.w	800d036 <pbuf_alloc+0x1b6>
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d002      	beq.n	800cebe <pbuf_alloc+0x3e>
 800ceb8:	2b41      	cmp	r3, #65	; 0x41
 800ceba:	f040 80bc 	bne.w	800d036 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cebe:	887a      	ldrh	r2, [r7, #2]
 800cec0:	88bb      	ldrh	r3, [r7, #4]
 800cec2:	4619      	mov	r1, r3
 800cec4:	2000      	movs	r0, #0
 800cec6:	f000 f8d1 	bl	800d06c <pbuf_alloc_reference>
 800ceca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cecc:	e0bd      	b.n	800d04a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ced6:	88bb      	ldrh	r3, [r7, #4]
 800ced8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ceda:	200c      	movs	r0, #12
 800cedc:	f7ff fbbe 	bl	800c65c <memp_malloc>
 800cee0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d109      	bne.n	800cefc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cee8:	f7ff ff76 	bl	800cdd8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cef4:	f000 faa8 	bl	800d448 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	e0a7      	b.n	800d04c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cefc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cefe:	3303      	adds	r3, #3
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	8b7a      	ldrh	r2, [r7, #26]
 800cf10:	4293      	cmp	r3, r2
 800cf12:	bf28      	it	cs
 800cf14:	4613      	movcs	r3, r2
 800cf16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cf18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf1a:	3310      	adds	r3, #16
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	4413      	add	r3, r2
 800cf20:	3303      	adds	r3, #3
 800cf22:	f023 0303 	bic.w	r3, r3, #3
 800cf26:	4618      	mov	r0, r3
 800cf28:	89f9      	ldrh	r1, [r7, #14]
 800cf2a:	8b7a      	ldrh	r2, [r7, #26]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	887b      	ldrh	r3, [r7, #2]
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	460b      	mov	r3, r1
 800cf36:	4601      	mov	r1, r0
 800cf38:	6938      	ldr	r0, [r7, #16]
 800cf3a:	f7ff ff77 	bl	800ce2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f003 0303 	and.w	r3, r3, #3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d006      	beq.n	800cf58 <pbuf_alloc+0xd8>
 800cf4a:	4b42      	ldr	r3, [pc, #264]	; (800d054 <pbuf_alloc+0x1d4>)
 800cf4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf50:	4941      	ldr	r1, [pc, #260]	; (800d058 <pbuf_alloc+0x1d8>)
 800cf52:	4842      	ldr	r0, [pc, #264]	; (800d05c <pbuf_alloc+0x1dc>)
 800cf54:	f009 fe08 	bl	8016b68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cf58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf5a:	3303      	adds	r3, #3
 800cf5c:	f023 0303 	bic.w	r3, r3, #3
 800cf60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cf64:	d106      	bne.n	800cf74 <pbuf_alloc+0xf4>
 800cf66:	4b3b      	ldr	r3, [pc, #236]	; (800d054 <pbuf_alloc+0x1d4>)
 800cf68:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cf6c:	493c      	ldr	r1, [pc, #240]	; (800d060 <pbuf_alloc+0x1e0>)
 800cf6e:	483b      	ldr	r0, [pc, #236]	; (800d05c <pbuf_alloc+0x1dc>)
 800cf70:	f009 fdfa 	bl	8016b68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d102      	bne.n	800cf80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7e:	e002      	b.n	800cf86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cf8a:	8b7a      	ldrh	r2, [r7, #26]
 800cf8c:	89fb      	ldrh	r3, [r7, #14]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cf96:	8b7b      	ldrh	r3, [r7, #26]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d19e      	bne.n	800ceda <pbuf_alloc+0x5a>
      break;
 800cf9c:	e055      	b.n	800d04a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cf9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfa0:	3303      	adds	r3, #3
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f023 0303 	bic.w	r3, r3, #3
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	88bb      	ldrh	r3, [r7, #4]
 800cfac:	3303      	adds	r3, #3
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	f023 0303 	bic.w	r3, r3, #3
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	4413      	add	r3, r2
 800cfb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cfba:	8b3b      	ldrh	r3, [r7, #24]
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cfc0:	8b3a      	ldrh	r2, [r7, #24]
 800cfc2:	88bb      	ldrh	r3, [r7, #4]
 800cfc4:	3303      	adds	r3, #3
 800cfc6:	f023 0303 	bic.w	r3, r3, #3
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d306      	bcc.n	800cfdc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cfce:	8afa      	ldrh	r2, [r7, #22]
 800cfd0:	88bb      	ldrh	r3, [r7, #4]
 800cfd2:	3303      	adds	r3, #3
 800cfd4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d201      	bcs.n	800cfe0 <pbuf_alloc+0x160>
        return NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	e035      	b.n	800d04c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cfe0:	8afb      	ldrh	r3, [r7, #22]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7ff f9b8 	bl	800c358 <mem_malloc>
 800cfe8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <pbuf_alloc+0x174>
        return NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e02b      	b.n	800d04c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cff6:	3310      	adds	r3, #16
 800cff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cffa:	4413      	add	r3, r2
 800cffc:	3303      	adds	r3, #3
 800cffe:	f023 0303 	bic.w	r3, r3, #3
 800d002:	4618      	mov	r0, r3
 800d004:	88b9      	ldrh	r1, [r7, #4]
 800d006:	88ba      	ldrh	r2, [r7, #4]
 800d008:	2300      	movs	r3, #0
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	887b      	ldrh	r3, [r7, #2]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	460b      	mov	r3, r1
 800d012:	4601      	mov	r1, r0
 800d014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d016:	f7ff ff09 	bl	800ce2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d010      	beq.n	800d048 <pbuf_alloc+0x1c8>
 800d026:	4b0b      	ldr	r3, [pc, #44]	; (800d054 <pbuf_alloc+0x1d4>)
 800d028:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d02c:	490d      	ldr	r1, [pc, #52]	; (800d064 <pbuf_alloc+0x1e4>)
 800d02e:	480b      	ldr	r0, [pc, #44]	; (800d05c <pbuf_alloc+0x1dc>)
 800d030:	f009 fd9a 	bl	8016b68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d034:	e008      	b.n	800d048 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <pbuf_alloc+0x1d4>)
 800d038:	f240 1227 	movw	r2, #295	; 0x127
 800d03c:	490a      	ldr	r1, [pc, #40]	; (800d068 <pbuf_alloc+0x1e8>)
 800d03e:	4807      	ldr	r0, [pc, #28]	; (800d05c <pbuf_alloc+0x1dc>)
 800d040:	f009 fd92 	bl	8016b68 <iprintf>
      return NULL;
 800d044:	2300      	movs	r3, #0
 800d046:	e001      	b.n	800d04c <pbuf_alloc+0x1cc>
      break;
 800d048:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3728      	adds	r7, #40	; 0x28
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	080196bc 	.word	0x080196bc
 800d058:	080196ec 	.word	0x080196ec
 800d05c:	0801971c 	.word	0x0801971c
 800d060:	08019744 	.word	0x08019744
 800d064:	08019778 	.word	0x08019778
 800d068:	080197a4 	.word	0x080197a4

0800d06c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af02      	add	r7, sp, #8
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
 800d078:	4613      	mov	r3, r2
 800d07a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d07c:	883b      	ldrh	r3, [r7, #0]
 800d07e:	2b41      	cmp	r3, #65	; 0x41
 800d080:	d009      	beq.n	800d096 <pbuf_alloc_reference+0x2a>
 800d082:	883b      	ldrh	r3, [r7, #0]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d006      	beq.n	800d096 <pbuf_alloc_reference+0x2a>
 800d088:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <pbuf_alloc_reference+0x5c>)
 800d08a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d08e:	490f      	ldr	r1, [pc, #60]	; (800d0cc <pbuf_alloc_reference+0x60>)
 800d090:	480f      	ldr	r0, [pc, #60]	; (800d0d0 <pbuf_alloc_reference+0x64>)
 800d092:	f009 fd69 	bl	8016b68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d096:	200b      	movs	r0, #11
 800d098:	f7ff fae0 	bl	800c65c <memp_malloc>
 800d09c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e00b      	b.n	800d0c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d0a8:	8879      	ldrh	r1, [r7, #2]
 800d0aa:	887a      	ldrh	r2, [r7, #2]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	883b      	ldrh	r3, [r7, #0]
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7ff feb7 	bl	800ce2c <pbuf_init_alloced_pbuf>
  return p;
 800d0be:	68fb      	ldr	r3, [r7, #12]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	080196bc 	.word	0x080196bc
 800d0cc:	080197c0 	.word	0x080197c0
 800d0d0:	0801971c 	.word	0x0801971c

0800d0d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b088      	sub	sp, #32
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	607b      	str	r3, [r7, #4]
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	81bb      	strh	r3, [r7, #12]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d0ec:	8a7b      	ldrh	r3, [r7, #18]
 800d0ee:	3303      	adds	r3, #3
 800d0f0:	f023 0203 	bic.w	r2, r3, #3
 800d0f4:	89bb      	ldrh	r3, [r7, #12]
 800d0f6:	441a      	add	r2, r3
 800d0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d901      	bls.n	800d102 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	e018      	b.n	800d134 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d007      	beq.n	800d118 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d108:	8a7b      	ldrh	r3, [r7, #18]
 800d10a:	3303      	adds	r3, #3
 800d10c:	f023 0303 	bic.w	r3, r3, #3
 800d110:	6a3a      	ldr	r2, [r7, #32]
 800d112:	4413      	add	r3, r2
 800d114:	617b      	str	r3, [r7, #20]
 800d116:	e001      	b.n	800d11c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d118:	2300      	movs	r3, #0
 800d11a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	89b9      	ldrh	r1, [r7, #12]
 800d120:	89ba      	ldrh	r2, [r7, #12]
 800d122:	2302      	movs	r3, #2
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	897b      	ldrh	r3, [r7, #10]
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	460b      	mov	r3, r1
 800d12c:	6979      	ldr	r1, [r7, #20]
 800d12e:	f7ff fe7d 	bl	800ce2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d132:	687b      	ldr	r3, [r7, #4]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d106      	bne.n	800d15c <pbuf_realloc+0x20>
 800d14e:	4b3a      	ldr	r3, [pc, #232]	; (800d238 <pbuf_realloc+0xfc>)
 800d150:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d154:	4939      	ldr	r1, [pc, #228]	; (800d23c <pbuf_realloc+0x100>)
 800d156:	483a      	ldr	r0, [pc, #232]	; (800d240 <pbuf_realloc+0x104>)
 800d158:	f009 fd06 	bl	8016b68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	891b      	ldrh	r3, [r3, #8]
 800d160:	887a      	ldrh	r2, [r7, #2]
 800d162:	429a      	cmp	r2, r3
 800d164:	d263      	bcs.n	800d22e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	891a      	ldrh	r2, [r3, #8]
 800d16a:	887b      	ldrh	r3, [r7, #2]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d170:	887b      	ldrh	r3, [r7, #2]
 800d172:	817b      	strh	r3, [r7, #10]
  q = p;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d178:	e018      	b.n	800d1ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	895b      	ldrh	r3, [r3, #10]
 800d17e:	897a      	ldrh	r2, [r7, #10]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	891a      	ldrh	r2, [r3, #8]
 800d188:	893b      	ldrh	r3, [r7, #8]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <pbuf_realloc+0x70>
 800d19e:	4b26      	ldr	r3, [pc, #152]	; (800d238 <pbuf_realloc+0xfc>)
 800d1a0:	f240 12af 	movw	r2, #431	; 0x1af
 800d1a4:	4927      	ldr	r1, [pc, #156]	; (800d244 <pbuf_realloc+0x108>)
 800d1a6:	4826      	ldr	r0, [pc, #152]	; (800d240 <pbuf_realloc+0x104>)
 800d1a8:	f009 fcde 	bl	8016b68 <iprintf>
  while (rem_len > q->len) {
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	895b      	ldrh	r3, [r3, #10]
 800d1b0:	897a      	ldrh	r2, [r7, #10]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d8e1      	bhi.n	800d17a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	7b1b      	ldrb	r3, [r3, #12]
 800d1ba:	f003 030f 	and.w	r3, r3, #15
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d121      	bne.n	800d206 <pbuf_realloc+0xca>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	895b      	ldrh	r3, [r3, #10]
 800d1c6:	897a      	ldrh	r2, [r7, #10]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d01c      	beq.n	800d206 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	7b5b      	ldrb	r3, [r3, #13]
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d116      	bne.n	800d206 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	897b      	ldrh	r3, [r7, #10]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7fe ffaa 	bl	800c144 <mem_trim>
 800d1f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <pbuf_realloc+0xca>
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <pbuf_realloc+0xfc>)
 800d1fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d1fe:	4912      	ldr	r1, [pc, #72]	; (800d248 <pbuf_realloc+0x10c>)
 800d200:	480f      	ldr	r0, [pc, #60]	; (800d240 <pbuf_realloc+0x104>)
 800d202:	f009 fcb1 	bl	8016b68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	897a      	ldrh	r2, [r7, #10]
 800d20a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	895a      	ldrh	r2, [r3, #10]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d004      	beq.n	800d226 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f000 f911 	bl	800d448 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	e000      	b.n	800d230 <pbuf_realloc+0xf4>
    return;
 800d22e:	bf00      	nop

}
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	080196bc 	.word	0x080196bc
 800d23c:	080197d4 	.word	0x080197d4
 800d240:	0801971c 	.word	0x0801971c
 800d244:	080197ec 	.word	0x080197ec
 800d248:	08019804 	.word	0x08019804

0800d24c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d106      	bne.n	800d26e <pbuf_add_header_impl+0x22>
 800d260:	4b2b      	ldr	r3, [pc, #172]	; (800d310 <pbuf_add_header_impl+0xc4>)
 800d262:	f240 12df 	movw	r2, #479	; 0x1df
 800d266:	492b      	ldr	r1, [pc, #172]	; (800d314 <pbuf_add_header_impl+0xc8>)
 800d268:	482b      	ldr	r0, [pc, #172]	; (800d318 <pbuf_add_header_impl+0xcc>)
 800d26a:	f009 fc7d 	bl	8016b68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <pbuf_add_header_impl+0x30>
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d27a:	d301      	bcc.n	800d280 <pbuf_add_header_impl+0x34>
    return 1;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e043      	b.n	800d308 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <pbuf_add_header_impl+0x3e>
    return 0;
 800d286:	2300      	movs	r3, #0
 800d288:	e03e      	b.n	800d308 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	891a      	ldrh	r2, [r3, #8]
 800d292:	8a7b      	ldrh	r3, [r7, #18]
 800d294:	4413      	add	r3, r2
 800d296:	b29b      	uxth	r3, r3
 800d298:	8a7a      	ldrh	r2, [r7, #18]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d901      	bls.n	800d2a2 <pbuf_add_header_impl+0x56>
    return 1;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e032      	b.n	800d308 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	7b1b      	ldrb	r3, [r3, #12]
 800d2a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d2a8:	8a3b      	ldrh	r3, [r7, #16]
 800d2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00c      	beq.n	800d2cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	425b      	negs	r3, r3
 800d2ba:	4413      	add	r3, r2
 800d2bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3310      	adds	r3, #16
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d20d      	bcs.n	800d2e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e01d      	b.n	800d308 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d006      	beq.n	800d2e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	425b      	negs	r3, r3
 800d2da:	4413      	add	r3, r2
 800d2dc:	617b      	str	r3, [r7, #20]
 800d2de:	e001      	b.n	800d2e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e011      	b.n	800d308 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	895a      	ldrh	r2, [r3, #10]
 800d2ee:	8a7b      	ldrh	r3, [r7, #18]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	891a      	ldrh	r2, [r3, #8]
 800d2fc:	8a7b      	ldrh	r3, [r7, #18]
 800d2fe:	4413      	add	r3, r2
 800d300:	b29a      	uxth	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	811a      	strh	r2, [r3, #8]


  return 0;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	080196bc 	.word	0x080196bc
 800d314:	08019820 	.word	0x08019820
 800d318:	0801971c 	.word	0x0801971c

0800d31c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d326:	2200      	movs	r2, #0
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff ff8e 	bl	800d24c <pbuf_add_header_impl>
 800d330:	4603      	mov	r3, r0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d106      	bne.n	800d35a <pbuf_remove_header+0x1e>
 800d34c:	4b20      	ldr	r3, [pc, #128]	; (800d3d0 <pbuf_remove_header+0x94>)
 800d34e:	f240 224b 	movw	r2, #587	; 0x24b
 800d352:	4920      	ldr	r1, [pc, #128]	; (800d3d4 <pbuf_remove_header+0x98>)
 800d354:	4820      	ldr	r0, [pc, #128]	; (800d3d8 <pbuf_remove_header+0x9c>)
 800d356:	f009 fc07 	bl	8016b68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <pbuf_remove_header+0x2c>
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d366:	d301      	bcc.n	800d36c <pbuf_remove_header+0x30>
    return 1;
 800d368:	2301      	movs	r3, #1
 800d36a:	e02c      	b.n	800d3c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d101      	bne.n	800d376 <pbuf_remove_header+0x3a>
    return 0;
 800d372:	2300      	movs	r3, #0
 800d374:	e027      	b.n	800d3c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	895b      	ldrh	r3, [r3, #10]
 800d37e:	89fa      	ldrh	r2, [r7, #14]
 800d380:	429a      	cmp	r2, r3
 800d382:	d908      	bls.n	800d396 <pbuf_remove_header+0x5a>
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <pbuf_remove_header+0x94>)
 800d386:	f240 2255 	movw	r2, #597	; 0x255
 800d38a:	4914      	ldr	r1, [pc, #80]	; (800d3dc <pbuf_remove_header+0xa0>)
 800d38c:	4812      	ldr	r0, [pc, #72]	; (800d3d8 <pbuf_remove_header+0x9c>)
 800d38e:	f009 fbeb 	bl	8016b68 <iprintf>
 800d392:	2301      	movs	r3, #1
 800d394:	e017      	b.n	800d3c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685a      	ldr	r2, [r3, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	441a      	add	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	895a      	ldrh	r2, [r3, #10]
 800d3ac:	89fb      	ldrh	r3, [r7, #14]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	891a      	ldrh	r2, [r3, #8]
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	080196bc 	.word	0x080196bc
 800d3d4:	08019820 	.word	0x08019820
 800d3d8:	0801971c 	.word	0x0801971c
 800d3dc:	0801982c 	.word	0x0801982c

0800d3e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	807b      	strh	r3, [r7, #2]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d3f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	da08      	bge.n	800d40a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d3f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3fc:	425b      	negs	r3, r3
 800d3fe:	4619      	mov	r1, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff ff9b 	bl	800d33c <pbuf_remove_header>
 800d406:	4603      	mov	r3, r0
 800d408:	e007      	b.n	800d41a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d40a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d40e:	787a      	ldrb	r2, [r7, #1]
 800d410:	4619      	mov	r1, r3
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff ff1a 	bl	800d24c <pbuf_add_header_impl>
 800d418:	4603      	mov	r3, r0
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	460b      	mov	r3, r1
 800d42c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d42e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d432:	2201      	movs	r2, #1
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff ffd2 	bl	800d3e0 <pbuf_header_impl>
 800d43c:	4603      	mov	r3, r0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
	...

0800d448 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10b      	bne.n	800d46e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d106      	bne.n	800d46a <pbuf_free+0x22>
 800d45c:	4b3b      	ldr	r3, [pc, #236]	; (800d54c <pbuf_free+0x104>)
 800d45e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d462:	493b      	ldr	r1, [pc, #236]	; (800d550 <pbuf_free+0x108>)
 800d464:	483b      	ldr	r0, [pc, #236]	; (800d554 <pbuf_free+0x10c>)
 800d466:	f009 fb7f 	bl	8016b68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e069      	b.n	800d542 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d472:	e062      	b.n	800d53a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d474:	f009 f9a0 	bl	80167b8 <sys_arch_protect>
 800d478:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7b9b      	ldrb	r3, [r3, #14]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <pbuf_free+0x48>
 800d482:	4b32      	ldr	r3, [pc, #200]	; (800d54c <pbuf_free+0x104>)
 800d484:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d488:	4933      	ldr	r1, [pc, #204]	; (800d558 <pbuf_free+0x110>)
 800d48a:	4832      	ldr	r0, [pc, #200]	; (800d554 <pbuf_free+0x10c>)
 800d48c:	f009 fb6c 	bl	8016b68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	7b9b      	ldrb	r3, [r3, #14]
 800d494:	3b01      	subs	r3, #1
 800d496:	b2da      	uxtb	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	739a      	strb	r2, [r3, #14]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7b9b      	ldrb	r3, [r3, #14]
 800d4a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d4a2:	69b8      	ldr	r0, [r7, #24]
 800d4a4:	f009 f996 	bl	80167d4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d143      	bne.n	800d536 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	7b1b      	ldrb	r3, [r3, #12]
 800d4b8:	f003 030f 	and.w	r3, r3, #15
 800d4bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7b5b      	ldrb	r3, [r3, #13]
 800d4c2:	f003 0302 	and.w	r3, r3, #2
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d011      	beq.n	800d4ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <pbuf_free+0x9c>
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <pbuf_free+0x104>)
 800d4d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d4dc:	491f      	ldr	r1, [pc, #124]	; (800d55c <pbuf_free+0x114>)
 800d4de:	481d      	ldr	r0, [pc, #116]	; (800d554 <pbuf_free+0x10c>)
 800d4e0:	f009 fb42 	bl	8016b68 <iprintf>
        pc->custom_free_function(p);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	4798      	blx	r3
 800d4ec:	e01d      	b.n	800d52a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d104      	bne.n	800d4fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	200c      	movs	r0, #12
 800d4f8:	f7ff f902 	bl	800c700 <memp_free>
 800d4fc:	e015      	b.n	800d52a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d104      	bne.n	800d50e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d504:	6879      	ldr	r1, [r7, #4]
 800d506:	200b      	movs	r0, #11
 800d508:	f7ff f8fa 	bl	800c700 <memp_free>
 800d50c:	e00d      	b.n	800d52a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d103      	bne.n	800d51c <pbuf_free+0xd4>
          mem_free(p);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7fe fd85 	bl	800c024 <mem_free>
 800d51a:	e006      	b.n	800d52a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d51c:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <pbuf_free+0x104>)
 800d51e:	f240 320f 	movw	r2, #783	; 0x30f
 800d522:	490f      	ldr	r1, [pc, #60]	; (800d560 <pbuf_free+0x118>)
 800d524:	480b      	ldr	r0, [pc, #44]	; (800d554 <pbuf_free+0x10c>)
 800d526:	f009 fb1f 	bl	8016b68 <iprintf>
        }
      }
      count++;
 800d52a:	7ffb      	ldrb	r3, [r7, #31]
 800d52c:	3301      	adds	r3, #1
 800d52e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	607b      	str	r3, [r7, #4]
 800d534:	e001      	b.n	800d53a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d199      	bne.n	800d474 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d540:	7ffb      	ldrb	r3, [r7, #31]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	080196bc 	.word	0x080196bc
 800d550:	08019820 	.word	0x08019820
 800d554:	0801971c 	.word	0x0801971c
 800d558:	0801984c 	.word	0x0801984c
 800d55c:	08019864 	.word	0x08019864
 800d560:	08019888 	.word	0x08019888

0800d564 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d570:	e005      	b.n	800d57e <pbuf_clen+0x1a>
    ++len;
 800d572:	89fb      	ldrh	r3, [r7, #14]
 800d574:	3301      	adds	r3, #1
 800d576:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1f6      	bne.n	800d572 <pbuf_clen+0xe>
  }
  return len;
 800d584:	89fb      	ldrh	r3, [r7, #14]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
	...

0800d594 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d016      	beq.n	800d5d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d5a2:	f009 f909 	bl	80167b8 <sys_arch_protect>
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7b9b      	ldrb	r3, [r3, #14]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	739a      	strb	r2, [r3, #14]
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f009 f90d 	bl	80167d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	7b9b      	ldrb	r3, [r3, #14]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <pbuf_ref+0x3c>
 800d5c2:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <pbuf_ref+0x44>)
 800d5c4:	f240 3242 	movw	r2, #834	; 0x342
 800d5c8:	4904      	ldr	r1, [pc, #16]	; (800d5dc <pbuf_ref+0x48>)
 800d5ca:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <pbuf_ref+0x4c>)
 800d5cc:	f009 facc 	bl	8016b68 <iprintf>
  }
}
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	080196bc 	.word	0x080196bc
 800d5dc:	0801989c 	.word	0x0801989c
 800d5e0:	0801971c 	.word	0x0801971c

0800d5e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <pbuf_cat+0x16>
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d107      	bne.n	800d60a <pbuf_cat+0x26>
 800d5fa:	4b20      	ldr	r3, [pc, #128]	; (800d67c <pbuf_cat+0x98>)
 800d5fc:	f240 3259 	movw	r2, #857	; 0x359
 800d600:	491f      	ldr	r1, [pc, #124]	; (800d680 <pbuf_cat+0x9c>)
 800d602:	4820      	ldr	r0, [pc, #128]	; (800d684 <pbuf_cat+0xa0>)
 800d604:	f009 fab0 	bl	8016b68 <iprintf>
 800d608:	e034      	b.n	800d674 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	e00a      	b.n	800d626 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	891a      	ldrh	r2, [r3, #8]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	4413      	add	r3, r2
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1f0      	bne.n	800d610 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	891a      	ldrh	r2, [r3, #8]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	895b      	ldrh	r3, [r3, #10]
 800d636:	429a      	cmp	r2, r3
 800d638:	d006      	beq.n	800d648 <pbuf_cat+0x64>
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <pbuf_cat+0x98>)
 800d63c:	f240 3262 	movw	r2, #866	; 0x362
 800d640:	4911      	ldr	r1, [pc, #68]	; (800d688 <pbuf_cat+0xa4>)
 800d642:	4810      	ldr	r0, [pc, #64]	; (800d684 <pbuf_cat+0xa0>)
 800d644:	f009 fa90 	bl	8016b68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <pbuf_cat+0x7a>
 800d650:	4b0a      	ldr	r3, [pc, #40]	; (800d67c <pbuf_cat+0x98>)
 800d652:	f240 3263 	movw	r2, #867	; 0x363
 800d656:	490d      	ldr	r1, [pc, #52]	; (800d68c <pbuf_cat+0xa8>)
 800d658:	480a      	ldr	r0, [pc, #40]	; (800d684 <pbuf_cat+0xa0>)
 800d65a:	f009 fa85 	bl	8016b68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	891a      	ldrh	r2, [r3, #8]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	891b      	ldrh	r3, [r3, #8]
 800d666:	4413      	add	r3, r2
 800d668:	b29a      	uxth	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	080196bc 	.word	0x080196bc
 800d680:	080198b0 	.word	0x080198b0
 800d684:	0801971c 	.word	0x0801971c
 800d688:	080198e8 	.word	0x080198e8
 800d68c:	08019918 	.word	0x08019918

0800d690 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d69a:	2300      	movs	r3, #0
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d008      	beq.n	800d6ba <pbuf_copy+0x2a>
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d005      	beq.n	800d6ba <pbuf_copy+0x2a>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	891a      	ldrh	r2, [r3, #8]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	891b      	ldrh	r3, [r3, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d209      	bcs.n	800d6ce <pbuf_copy+0x3e>
 800d6ba:	4b57      	ldr	r3, [pc, #348]	; (800d818 <pbuf_copy+0x188>)
 800d6bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d6c0:	4956      	ldr	r1, [pc, #344]	; (800d81c <pbuf_copy+0x18c>)
 800d6c2:	4857      	ldr	r0, [pc, #348]	; (800d820 <pbuf_copy+0x190>)
 800d6c4:	f009 fa50 	bl	8016b68 <iprintf>
 800d6c8:	f06f 030f 	mvn.w	r3, #15
 800d6cc:	e09f      	b.n	800d80e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	895b      	ldrh	r3, [r3, #10]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	1ad2      	subs	r2, r2, r3
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	895b      	ldrh	r3, [r3, #10]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	1acb      	subs	r3, r1, r3
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d306      	bcc.n	800d6f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	895b      	ldrh	r3, [r3, #10]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e005      	b.n	800d700 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	18d0      	adds	r0, r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	4413      	add	r3, r2
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	4619      	mov	r1, r3
 800d714:	f009 f99d 	bl	8016a52 <memcpy>
    offset_to += len;
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	4413      	add	r3, r2
 800d71e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	895b      	ldrh	r3, [r3, #10]
 800d72c:	461a      	mov	r2, r3
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	4293      	cmp	r3, r2
 800d732:	d906      	bls.n	800d742 <pbuf_copy+0xb2>
 800d734:	4b38      	ldr	r3, [pc, #224]	; (800d818 <pbuf_copy+0x188>)
 800d736:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d73a:	493a      	ldr	r1, [pc, #232]	; (800d824 <pbuf_copy+0x194>)
 800d73c:	4838      	ldr	r0, [pc, #224]	; (800d820 <pbuf_copy+0x190>)
 800d73e:	f009 fa13 	bl	8016b68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	895b      	ldrh	r3, [r3, #10]
 800d746:	461a      	mov	r2, r3
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d906      	bls.n	800d75c <pbuf_copy+0xcc>
 800d74e:	4b32      	ldr	r3, [pc, #200]	; (800d818 <pbuf_copy+0x188>)
 800d750:	f240 32da 	movw	r2, #986	; 0x3da
 800d754:	4934      	ldr	r1, [pc, #208]	; (800d828 <pbuf_copy+0x198>)
 800d756:	4832      	ldr	r0, [pc, #200]	; (800d820 <pbuf_copy+0x190>)
 800d758:	f009 fa06 	bl	8016b68 <iprintf>
    if (offset_from >= p_from->len) {
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	895b      	ldrh	r3, [r3, #10]
 800d760:	461a      	mov	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	4293      	cmp	r3, r2
 800d766:	d304      	bcc.n	800d772 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	895b      	ldrh	r3, [r3, #10]
 800d776:	461a      	mov	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d114      	bne.n	800d7a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10c      	bne.n	800d7a8 <pbuf_copy+0x118>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d009      	beq.n	800d7a8 <pbuf_copy+0x118>
 800d794:	4b20      	ldr	r3, [pc, #128]	; (800d818 <pbuf_copy+0x188>)
 800d796:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d79a:	4924      	ldr	r1, [pc, #144]	; (800d82c <pbuf_copy+0x19c>)
 800d79c:	4820      	ldr	r0, [pc, #128]	; (800d820 <pbuf_copy+0x190>)
 800d79e:	f009 f9e3 	bl	8016b68 <iprintf>
 800d7a2:	f06f 030f 	mvn.w	r3, #15
 800d7a6:	e032      	b.n	800d80e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d013      	beq.n	800d7d6 <pbuf_copy+0x146>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	895a      	ldrh	r2, [r3, #10]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d10d      	bne.n	800d7d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <pbuf_copy+0x146>
 800d7c2:	4b15      	ldr	r3, [pc, #84]	; (800d818 <pbuf_copy+0x188>)
 800d7c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d7c8:	4919      	ldr	r1, [pc, #100]	; (800d830 <pbuf_copy+0x1a0>)
 800d7ca:	4815      	ldr	r0, [pc, #84]	; (800d820 <pbuf_copy+0x190>)
 800d7cc:	f009 f9cc 	bl	8016b68 <iprintf>
 800d7d0:	f06f 0305 	mvn.w	r3, #5
 800d7d4:	e01b      	b.n	800d80e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d013      	beq.n	800d804 <pbuf_copy+0x174>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	895a      	ldrh	r2, [r3, #10]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	891b      	ldrh	r3, [r3, #8]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d10d      	bne.n	800d804 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d009      	beq.n	800d804 <pbuf_copy+0x174>
 800d7f0:	4b09      	ldr	r3, [pc, #36]	; (800d818 <pbuf_copy+0x188>)
 800d7f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d7f6:	490e      	ldr	r1, [pc, #56]	; (800d830 <pbuf_copy+0x1a0>)
 800d7f8:	4809      	ldr	r0, [pc, #36]	; (800d820 <pbuf_copy+0x190>)
 800d7fa:	f009 f9b5 	bl	8016b68 <iprintf>
 800d7fe:	f06f 0305 	mvn.w	r3, #5
 800d802:	e004      	b.n	800d80e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f47f af61 	bne.w	800d6ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	080196bc 	.word	0x080196bc
 800d81c:	08019964 	.word	0x08019964
 800d820:	0801971c 	.word	0x0801971c
 800d824:	08019994 	.word	0x08019994
 800d828:	080199ac 	.word	0x080199ac
 800d82c:	080199c8 	.word	0x080199c8
 800d830:	080199d8 	.word	0x080199d8

0800d834 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	4611      	mov	r1, r2
 800d840:	461a      	mov	r2, r3
 800d842:	460b      	mov	r3, r1
 800d844:	80fb      	strh	r3, [r7, #6]
 800d846:	4613      	mov	r3, r2
 800d848:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d108      	bne.n	800d86a <pbuf_copy_partial+0x36>
 800d858:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <pbuf_copy_partial+0xd4>)
 800d85a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d85e:	492b      	ldr	r1, [pc, #172]	; (800d90c <pbuf_copy_partial+0xd8>)
 800d860:	482b      	ldr	r0, [pc, #172]	; (800d910 <pbuf_copy_partial+0xdc>)
 800d862:	f009 f981 	bl	8016b68 <iprintf>
 800d866:	2300      	movs	r3, #0
 800d868:	e04a      	b.n	800d900 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d108      	bne.n	800d882 <pbuf_copy_partial+0x4e>
 800d870:	4b25      	ldr	r3, [pc, #148]	; (800d908 <pbuf_copy_partial+0xd4>)
 800d872:	f240 420b 	movw	r2, #1035	; 0x40b
 800d876:	4927      	ldr	r1, [pc, #156]	; (800d914 <pbuf_copy_partial+0xe0>)
 800d878:	4825      	ldr	r0, [pc, #148]	; (800d910 <pbuf_copy_partial+0xdc>)
 800d87a:	f009 f975 	bl	8016b68 <iprintf>
 800d87e:	2300      	movs	r3, #0
 800d880:	e03e      	b.n	800d900 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	e034      	b.n	800d8f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d888:	88bb      	ldrh	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00a      	beq.n	800d8a4 <pbuf_copy_partial+0x70>
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	895b      	ldrh	r3, [r3, #10]
 800d892:	88ba      	ldrh	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d305      	bcc.n	800d8a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	895b      	ldrh	r3, [r3, #10]
 800d89c:	88ba      	ldrh	r2, [r7, #4]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	80bb      	strh	r3, [r7, #4]
 800d8a2:	e023      	b.n	800d8ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	895a      	ldrh	r2, [r3, #10]
 800d8a8:	88bb      	ldrh	r3, [r7, #4]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d8ae:	8b3a      	ldrh	r2, [r7, #24]
 800d8b0:	88fb      	ldrh	r3, [r7, #6]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d901      	bls.n	800d8ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d8ba:	8b7b      	ldrh	r3, [r7, #26]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	18d0      	adds	r0, r2, r3
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	88bb      	ldrh	r3, [r7, #4]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	8b3a      	ldrh	r2, [r7, #24]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f009 f8c1 	bl	8016a52 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d8d0:	8afa      	ldrh	r2, [r7, #22]
 800d8d2:	8b3b      	ldrh	r3, [r7, #24]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d8d8:	8b7a      	ldrh	r2, [r7, #26]
 800d8da:	8b3b      	ldrh	r3, [r7, #24]
 800d8dc:	4413      	add	r3, r2
 800d8de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d8e0:	88fa      	ldrh	r2, [r7, #6]
 800d8e2:	8b3b      	ldrh	r3, [r7, #24]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <pbuf_copy_partial+0xca>
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1c4      	bne.n	800d888 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d8fe:	8afb      	ldrh	r3, [r7, #22]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	080196bc 	.word	0x080196bc
 800d90c:	08019a04 	.word	0x08019a04
 800d910:	0801971c 	.word	0x0801971c
 800d914:	08019a24 	.word	0x08019a24

0800d918 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	603a      	str	r2, [r7, #0]
 800d922:	71fb      	strb	r3, [r7, #7]
 800d924:	460b      	mov	r3, r1
 800d926:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	8919      	ldrh	r1, [r3, #8]
 800d92c:	88ba      	ldrh	r2, [r7, #4]
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff faa5 	bl	800ce80 <pbuf_alloc>
 800d936:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <pbuf_clone+0x2a>
    return NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	e011      	b.n	800d966 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f7ff fea3 	bl	800d690 <pbuf_copy>
 800d94a:	4603      	mov	r3, r0
 800d94c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d94e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d006      	beq.n	800d964 <pbuf_clone+0x4c>
 800d956:	4b06      	ldr	r3, [pc, #24]	; (800d970 <pbuf_clone+0x58>)
 800d958:	f240 5224 	movw	r2, #1316	; 0x524
 800d95c:	4905      	ldr	r1, [pc, #20]	; (800d974 <pbuf_clone+0x5c>)
 800d95e:	4806      	ldr	r0, [pc, #24]	; (800d978 <pbuf_clone+0x60>)
 800d960:	f009 f902 	bl	8016b68 <iprintf>
  return q;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	080196bc 	.word	0x080196bc
 800d974:	08019b30 	.word	0x08019b30
 800d978:	0801971c 	.word	0x0801971c

0800d97c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d980:	f009 f980 	bl	8016c84 <rand>
 800d984:	4603      	mov	r3, r0
 800d986:	b29b      	uxth	r3, r3
 800d988:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d992:	b29a      	uxth	r2, r3
 800d994:	4b01      	ldr	r3, [pc, #4]	; (800d99c <tcp_init+0x20>)
 800d996:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d998:	bf00      	nop
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	200004a8 	.word	0x200004a8

0800d9a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7d1b      	ldrb	r3, [r3, #20]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d105      	bne.n	800d9bc <tcp_free+0x1c>
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <tcp_free+0x2c>)
 800d9b2:	22d4      	movs	r2, #212	; 0xd4
 800d9b4:	4906      	ldr	r1, [pc, #24]	; (800d9d0 <tcp_free+0x30>)
 800d9b6:	4807      	ldr	r0, [pc, #28]	; (800d9d4 <tcp_free+0x34>)
 800d9b8:	f009 f8d6 	bl	8016b68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	2001      	movs	r0, #1
 800d9c0:	f7fe fe9e 	bl	800c700 <memp_free>
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	08019bbc 	.word	0x08019bbc
 800d9d0:	08019bec 	.word	0x08019bec
 800d9d4:	08019c00 	.word	0x08019c00

0800d9d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d105      	bne.n	800d9f4 <tcp_free_listen+0x1c>
 800d9e8:	4b06      	ldr	r3, [pc, #24]	; (800da04 <tcp_free_listen+0x2c>)
 800d9ea:	22df      	movs	r2, #223	; 0xdf
 800d9ec:	4906      	ldr	r1, [pc, #24]	; (800da08 <tcp_free_listen+0x30>)
 800d9ee:	4807      	ldr	r0, [pc, #28]	; (800da0c <tcp_free_listen+0x34>)
 800d9f0:	f009 f8ba 	bl	8016b68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d9f4:	6879      	ldr	r1, [r7, #4]
 800d9f6:	2002      	movs	r0, #2
 800d9f8:	f7fe fe82 	bl	800c700 <memp_free>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	08019bbc 	.word	0x08019bbc
 800da08:	08019c28 	.word	0x08019c28
 800da0c:	08019c00 	.word	0x08019c00

0800da10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800da14:	f001 f85c 	bl	800ead0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800da18:	4b07      	ldr	r3, [pc, #28]	; (800da38 <tcp_tmr+0x28>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <tcp_tmr+0x28>)
 800da22:	701a      	strb	r2, [r3, #0]
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <tcp_tmr+0x28>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da30:	f000 fd0e 	bl	800e450 <tcp_slowtmr>
  }
}
 800da34:	bf00      	nop
 800da36:	bd80      	pop	{r7, pc}
 800da38:	200083a9 	.word	0x200083a9

0800da3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d105      	bne.n	800da58 <tcp_remove_listener+0x1c>
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <tcp_remove_listener+0x48>)
 800da4e:	22ff      	movs	r2, #255	; 0xff
 800da50:	490d      	ldr	r1, [pc, #52]	; (800da88 <tcp_remove_listener+0x4c>)
 800da52:	480e      	ldr	r0, [pc, #56]	; (800da8c <tcp_remove_listener+0x50>)
 800da54:	f009 f888 	bl	8016b68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e00a      	b.n	800da74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	429a      	cmp	r2, r3
 800da66:	d102      	bne.n	800da6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1f1      	bne.n	800da5e <tcp_remove_listener+0x22>
    }
  }
}
 800da7a:	bf00      	nop
 800da7c:	bf00      	nop
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	08019bbc 	.word	0x08019bbc
 800da88:	08019c44 	.word	0x08019c44
 800da8c:	08019c00 	.word	0x08019c00

0800da90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <tcp_listen_closed+0x1c>
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <tcp_listen_closed+0x60>)
 800daa0:	f240 1211 	movw	r2, #273	; 0x111
 800daa4:	4913      	ldr	r1, [pc, #76]	; (800daf4 <tcp_listen_closed+0x64>)
 800daa6:	4814      	ldr	r0, [pc, #80]	; (800daf8 <tcp_listen_closed+0x68>)
 800daa8:	f009 f85e 	bl	8016b68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7d1b      	ldrb	r3, [r3, #20]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d006      	beq.n	800dac2 <tcp_listen_closed+0x32>
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <tcp_listen_closed+0x60>)
 800dab6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800daba:	4910      	ldr	r1, [pc, #64]	; (800dafc <tcp_listen_closed+0x6c>)
 800dabc:	480e      	ldr	r0, [pc, #56]	; (800daf8 <tcp_listen_closed+0x68>)
 800dabe:	f009 f853 	bl	8016b68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dac2:	2301      	movs	r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e00b      	b.n	800dae0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dac8:	4a0d      	ldr	r2, [pc, #52]	; (800db00 <tcp_listen_closed+0x70>)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6879      	ldr	r1, [r7, #4]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff ffb1 	bl	800da3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d9f0      	bls.n	800dac8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dae6:	bf00      	nop
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	08019bbc 	.word	0x08019bbc
 800daf4:	08019c6c 	.word	0x08019c6c
 800daf8:	08019c00 	.word	0x08019c00
 800dafc:	08019c78 	.word	0x08019c78
 800db00:	08022b50 	.word	0x08022b50

0800db04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800db04:	b5b0      	push	{r4, r5, r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af04      	add	r7, sp, #16
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <tcp_close_shutdown+0x20>
 800db16:	4b63      	ldr	r3, [pc, #396]	; (800dca4 <tcp_close_shutdown+0x1a0>)
 800db18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800db1c:	4962      	ldr	r1, [pc, #392]	; (800dca8 <tcp_close_shutdown+0x1a4>)
 800db1e:	4863      	ldr	r0, [pc, #396]	; (800dcac <tcp_close_shutdown+0x1a8>)
 800db20:	f009 f822 	bl	8016b68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d066      	beq.n	800dbf8 <tcp_close_shutdown+0xf4>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
 800db2e:	2b04      	cmp	r3, #4
 800db30:	d003      	beq.n	800db3a <tcp_close_shutdown+0x36>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	7d1b      	ldrb	r3, [r3, #20]
 800db36:	2b07      	cmp	r3, #7
 800db38:	d15e      	bne.n	800dbf8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d104      	bne.n	800db4c <tcp_close_shutdown+0x48>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db4a:	d055      	beq.n	800dbf8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	8b5b      	ldrh	r3, [r3, #26]
 800db50:	f003 0310 	and.w	r3, r3, #16
 800db54:	2b00      	cmp	r3, #0
 800db56:	d106      	bne.n	800db66 <tcp_close_shutdown+0x62>
 800db58:	4b52      	ldr	r3, [pc, #328]	; (800dca4 <tcp_close_shutdown+0x1a0>)
 800db5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800db5e:	4954      	ldr	r1, [pc, #336]	; (800dcb0 <tcp_close_shutdown+0x1ac>)
 800db60:	4852      	ldr	r0, [pc, #328]	; (800dcac <tcp_close_shutdown+0x1a8>)
 800db62:	f009 f801 	bl	8016b68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800db6e:	687d      	ldr	r5, [r7, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	8ad2      	ldrh	r2, [r2, #22]
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	8b09      	ldrh	r1, [r1, #24]
 800db7c:	9102      	str	r1, [sp, #8]
 800db7e:	9201      	str	r2, [sp, #4]
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	462b      	mov	r3, r5
 800db84:	4622      	mov	r2, r4
 800db86:	4601      	mov	r1, r0
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f005 fd8b 	bl	80136a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f001 fb6c 	bl	800f26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800db94:	4b47      	ldr	r3, [pc, #284]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d105      	bne.n	800dbaa <tcp_close_shutdown+0xa6>
 800db9e:	4b45      	ldr	r3, [pc, #276]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	4a43      	ldr	r2, [pc, #268]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	e013      	b.n	800dbd2 <tcp_close_shutdown+0xce>
 800dbaa:	4b42      	ldr	r3, [pc, #264]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	e00c      	b.n	800dbcc <tcp_close_shutdown+0xc8>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d104      	bne.n	800dbc6 <tcp_close_shutdown+0xc2>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	60da      	str	r2, [r3, #12]
 800dbc4:	e005      	b.n	800dbd2 <tcp_close_shutdown+0xce>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1ef      	bne.n	800dbb2 <tcp_close_shutdown+0xae>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	60da      	str	r2, [r3, #12]
 800dbd8:	4b37      	ldr	r3, [pc, #220]	; (800dcb8 <tcp_close_shutdown+0x1b4>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dbde:	4b37      	ldr	r3, [pc, #220]	; (800dcbc <tcp_close_shutdown+0x1b8>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d102      	bne.n	800dbee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dbe8:	f004 f800 	bl	8011bec <tcp_trigger_input_pcb_close>
 800dbec:	e002      	b.n	800dbf4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff fed6 	bl	800d9a0 <tcp_free>
      }
      return ERR_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e050      	b.n	800dc9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d03b      	beq.n	800dc78 <tcp_close_shutdown+0x174>
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	dc44      	bgt.n	800dc8e <tcp_close_shutdown+0x18a>
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <tcp_close_shutdown+0x10a>
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d02a      	beq.n	800dc62 <tcp_close_shutdown+0x15e>
 800dc0c:	e03f      	b.n	800dc8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	8adb      	ldrh	r3, [r3, #22]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d021      	beq.n	800dc5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc16:	4b2a      	ldr	r3, [pc, #168]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d105      	bne.n	800dc2c <tcp_close_shutdown+0x128>
 800dc20:	4b27      	ldr	r3, [pc, #156]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	4a26      	ldr	r2, [pc, #152]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	e013      	b.n	800dc54 <tcp_close_shutdown+0x150>
 800dc2c:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	60bb      	str	r3, [r7, #8]
 800dc32:	e00c      	b.n	800dc4e <tcp_close_shutdown+0x14a>
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d104      	bne.n	800dc48 <tcp_close_shutdown+0x144>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	60da      	str	r2, [r3, #12]
 800dc46:	e005      	b.n	800dc54 <tcp_close_shutdown+0x150>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	60bb      	str	r3, [r7, #8]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1ef      	bne.n	800dc34 <tcp_close_shutdown+0x130>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fea0 	bl	800d9a0 <tcp_free>
      break;
 800dc60:	e01a      	b.n	800dc98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff ff14 	bl	800da90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	4816      	ldr	r0, [pc, #88]	; (800dcc4 <tcp_close_shutdown+0x1c0>)
 800dc6c:	f001 fb4e 	bl	800f30c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff feb1 	bl	800d9d8 <tcp_free_listen>
      break;
 800dc76:	e00f      	b.n	800dc98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	480e      	ldr	r0, [pc, #56]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dc7c:	f001 fb46 	bl	800f30c <tcp_pcb_remove>
 800dc80:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <tcp_close_shutdown+0x1b4>)
 800dc82:	2201      	movs	r2, #1
 800dc84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff fe8a 	bl	800d9a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dc8c:	e004      	b.n	800dc98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f81a 	bl	800dcc8 <tcp_close_shutdown_fin>
 800dc94:	4603      	mov	r3, r0
 800dc96:	e000      	b.n	800dc9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dc98:	2300      	movs	r3, #0
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bdb0      	pop	{r4, r5, r7, pc}
 800dca2:	bf00      	nop
 800dca4:	08019bbc 	.word	0x08019bbc
 800dca8:	08019c90 	.word	0x08019c90
 800dcac:	08019c00 	.word	0x08019c00
 800dcb0:	08019cb0 	.word	0x08019cb0
 800dcb4:	20014aa4 	.word	0x20014aa4
 800dcb8:	20014aa0 	.word	0x20014aa0
 800dcbc:	20014ab8 	.word	0x20014ab8
 800dcc0:	20014ab0 	.word	0x20014ab0
 800dcc4:	20014aac 	.word	0x20014aac

0800dcc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <tcp_close_shutdown_fin+0x1c>
 800dcd6:	4b2e      	ldr	r3, [pc, #184]	; (800dd90 <tcp_close_shutdown_fin+0xc8>)
 800dcd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dcdc:	492d      	ldr	r1, [pc, #180]	; (800dd94 <tcp_close_shutdown_fin+0xcc>)
 800dcde:	482e      	ldr	r0, [pc, #184]	; (800dd98 <tcp_close_shutdown_fin+0xd0>)
 800dce0:	f008 ff42 	bl	8016b68 <iprintf>

  switch (pcb->state) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	d020      	beq.n	800dd2e <tcp_close_shutdown_fin+0x66>
 800dcec:	2b07      	cmp	r3, #7
 800dcee:	dc2b      	bgt.n	800dd48 <tcp_close_shutdown_fin+0x80>
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d002      	beq.n	800dcfa <tcp_close_shutdown_fin+0x32>
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d00d      	beq.n	800dd14 <tcp_close_shutdown_fin+0x4c>
 800dcf8:	e026      	b.n	800dd48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f004 fde0 	bl	80128c0 <tcp_send_fin>
 800dd00:	4603      	mov	r3, r0
 800dd02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11f      	bne.n	800dd4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2205      	movs	r2, #5
 800dd10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd12:	e01b      	b.n	800dd4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f004 fdd3 	bl	80128c0 <tcp_send_fin>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d114      	bne.n	800dd50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2205      	movs	r2, #5
 800dd2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd2c:	e010      	b.n	800dd50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f004 fdc6 	bl	80128c0 <tcp_send_fin>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d109      	bne.n	800dd54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2209      	movs	r2, #9
 800dd44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd46:	e005      	b.n	800dd54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e01c      	b.n	800dd86 <tcp_close_shutdown_fin+0xbe>
      break;
 800dd4c:	bf00      	nop
 800dd4e:	e002      	b.n	800dd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd50:	bf00      	nop
 800dd52:	e000      	b.n	800dd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd54:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d103      	bne.n	800dd66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f004 feec 	bl	8012b3c <tcp_output>
 800dd64:	e00d      	b.n	800dd82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd6e:	d108      	bne.n	800dd82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	8b5b      	ldrh	r3, [r3, #26]
 800dd74:	f043 0308 	orr.w	r3, r3, #8
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e001      	b.n	800dd86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	08019bbc 	.word	0x08019bbc
 800dd94:	08019c6c 	.word	0x08019c6c
 800dd98:	08019c00 	.word	0x08019c00

0800dd9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d109      	bne.n	800ddbe <tcp_close+0x22>
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <tcp_close+0x4c>)
 800ddac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ddb0:	490e      	ldr	r1, [pc, #56]	; (800ddec <tcp_close+0x50>)
 800ddb2:	480f      	ldr	r0, [pc, #60]	; (800ddf0 <tcp_close+0x54>)
 800ddb4:	f008 fed8 	bl	8016b68 <iprintf>
 800ddb8:	f06f 030f 	mvn.w	r3, #15
 800ddbc:	e00f      	b.n	800ddde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7d1b      	ldrb	r3, [r3, #20]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d006      	beq.n	800ddd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8b5b      	ldrh	r3, [r3, #26]
 800ddca:	f043 0310 	orr.w	r3, r3, #16
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fe94 	bl	800db04 <tcp_close_shutdown>
 800dddc:	4603      	mov	r3, r0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	08019bbc 	.word	0x08019bbc
 800ddec:	08019ccc 	.word	0x08019ccc
 800ddf0:	08019c00 	.word	0x08019c00

0800ddf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af04      	add	r7, sp, #16
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d107      	bne.n	800de14 <tcp_abandon+0x20>
 800de04:	4b52      	ldr	r3, [pc, #328]	; (800df50 <tcp_abandon+0x15c>)
 800de06:	f240 223d 	movw	r2, #573	; 0x23d
 800de0a:	4952      	ldr	r1, [pc, #328]	; (800df54 <tcp_abandon+0x160>)
 800de0c:	4852      	ldr	r0, [pc, #328]	; (800df58 <tcp_abandon+0x164>)
 800de0e:	f008 feab 	bl	8016b68 <iprintf>
 800de12:	e099      	b.n	800df48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d106      	bne.n	800de2a <tcp_abandon+0x36>
 800de1c:	4b4c      	ldr	r3, [pc, #304]	; (800df50 <tcp_abandon+0x15c>)
 800de1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800de22:	494e      	ldr	r1, [pc, #312]	; (800df5c <tcp_abandon+0x168>)
 800de24:	484c      	ldr	r0, [pc, #304]	; (800df58 <tcp_abandon+0x164>)
 800de26:	f008 fe9f 	bl	8016b68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7d1b      	ldrb	r3, [r3, #20]
 800de2e:	2b0a      	cmp	r3, #10
 800de30:	d107      	bne.n	800de42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	484a      	ldr	r0, [pc, #296]	; (800df60 <tcp_abandon+0x16c>)
 800de36:	f001 fa69 	bl	800f30c <tcp_pcb_remove>
    tcp_free(pcb);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fdb0 	bl	800d9a0 <tcp_free>
 800de40:	e082      	b.n	800df48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7d1b      	ldrb	r3, [r3, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d126      	bne.n	800deba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8adb      	ldrh	r3, [r3, #22]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d02e      	beq.n	800ded2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800de74:	4b3b      	ldr	r3, [pc, #236]	; (800df64 <tcp_abandon+0x170>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d105      	bne.n	800de8a <tcp_abandon+0x96>
 800de7e:	4b39      	ldr	r3, [pc, #228]	; (800df64 <tcp_abandon+0x170>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a37      	ldr	r2, [pc, #220]	; (800df64 <tcp_abandon+0x170>)
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	e013      	b.n	800deb2 <tcp_abandon+0xbe>
 800de8a:	4b36      	ldr	r3, [pc, #216]	; (800df64 <tcp_abandon+0x170>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	61fb      	str	r3, [r7, #28]
 800de90:	e00c      	b.n	800deac <tcp_abandon+0xb8>
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d104      	bne.n	800dea6 <tcp_abandon+0xb2>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68da      	ldr	r2, [r3, #12]
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	60da      	str	r2, [r3, #12]
 800dea4:	e005      	b.n	800deb2 <tcp_abandon+0xbe>
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	61fb      	str	r3, [r7, #28]
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1ef      	bne.n	800de92 <tcp_abandon+0x9e>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	60da      	str	r2, [r3, #12]
 800deb8:	e00b      	b.n	800ded2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8adb      	ldrh	r3, [r3, #22]
 800dec2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dec4:	6879      	ldr	r1, [r7, #4]
 800dec6:	4828      	ldr	r0, [pc, #160]	; (800df68 <tcp_abandon+0x174>)
 800dec8:	f001 fa20 	bl	800f30c <tcp_pcb_remove>
 800decc:	4b27      	ldr	r3, [pc, #156]	; (800df6c <tcp_abandon+0x178>)
 800dece:	2201      	movs	r2, #1
 800ded0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d004      	beq.n	800dee4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 fed6 	bl	800ec90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def0:	4618      	mov	r0, r3
 800def2:	f000 fecd 	bl	800ec90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fec4 	bl	800ec90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3304      	adds	r3, #4
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	8b12      	ldrh	r2, [r2, #24]
 800df18:	9202      	str	r2, [sp, #8]
 800df1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df1c:	9201      	str	r2, [sp, #4]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	460b      	mov	r3, r1
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	69b9      	ldr	r1, [r7, #24]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f005 fbbc 	bl	80136a4 <tcp_rst>
    }
    last_state = pcb->state;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	7d1b      	ldrb	r3, [r3, #20]
 800df30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7ff fd34 	bl	800d9a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <tcp_abandon+0x154>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	f06f 010c 	mvn.w	r1, #12
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	4798      	blx	r3
  }
}
 800df48:	3728      	adds	r7, #40	; 0x28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	08019bbc 	.word	0x08019bbc
 800df54:	08019d00 	.word	0x08019d00
 800df58:	08019c00 	.word	0x08019c00
 800df5c:	08019d1c 	.word	0x08019d1c
 800df60:	20014ab4 	.word	0x20014ab4
 800df64:	20014ab0 	.word	0x20014ab0
 800df68:	20014aa4 	.word	0x20014aa4
 800df6c:	20014aa0 	.word	0x20014aa0

0800df70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800df78:	2101      	movs	r1, #1
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff ff3a 	bl	800ddf4 <tcp_abandon>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	4613      	mov	r3, r2
 800df94:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800df96:	2304      	movs	r3, #4
 800df98:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dfa0:	4b3e      	ldr	r3, [pc, #248]	; (800e09c <tcp_bind+0x114>)
 800dfa2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <tcp_bind+0x36>
 800dfaa:	4b3d      	ldr	r3, [pc, #244]	; (800e0a0 <tcp_bind+0x118>)
 800dfac:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dfb0:	493c      	ldr	r1, [pc, #240]	; (800e0a4 <tcp_bind+0x11c>)
 800dfb2:	483d      	ldr	r0, [pc, #244]	; (800e0a8 <tcp_bind+0x120>)
 800dfb4:	f008 fdd8 	bl	8016b68 <iprintf>
 800dfb8:	f06f 030f 	mvn.w	r3, #15
 800dfbc:	e06a      	b.n	800e094 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	7d1b      	ldrb	r3, [r3, #20]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d009      	beq.n	800dfda <tcp_bind+0x52>
 800dfc6:	4b36      	ldr	r3, [pc, #216]	; (800e0a0 <tcp_bind+0x118>)
 800dfc8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dfcc:	4937      	ldr	r1, [pc, #220]	; (800e0ac <tcp_bind+0x124>)
 800dfce:	4836      	ldr	r0, [pc, #216]	; (800e0a8 <tcp_bind+0x120>)
 800dfd0:	f008 fdca 	bl	8016b68 <iprintf>
 800dfd4:	f06f 0305 	mvn.w	r3, #5
 800dfd8:	e05c      	b.n	800e094 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dfda:	88fb      	ldrh	r3, [r7, #6]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d109      	bne.n	800dff4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dfe0:	f000 f9f0 	bl	800e3c4 <tcp_new_port>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d135      	bne.n	800e05a <tcp_bind+0xd2>
      return ERR_BUF;
 800dfee:	f06f 0301 	mvn.w	r3, #1
 800dff2:	e04f      	b.n	800e094 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dff4:	2300      	movs	r3, #0
 800dff6:	61fb      	str	r3, [r7, #28]
 800dff8:	e02b      	b.n	800e052 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dffa:	4a2d      	ldr	r2, [pc, #180]	; (800e0b0 <tcp_bind+0x128>)
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	e01e      	b.n	800e046 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	8adb      	ldrh	r3, [r3, #22]
 800e00c:	88fa      	ldrh	r2, [r7, #6]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d116      	bne.n	800e040 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e012:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e014:	2b00      	cmp	r3, #0
 800e016:	d010      	beq.n	800e03a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00c      	beq.n	800e03a <tcp_bind+0xb2>
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d009      	beq.n	800e03a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d005      	beq.n	800e03a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e036:	429a      	cmp	r2, r3
 800e038:	d102      	bne.n	800e040 <tcp_bind+0xb8>
              return ERR_USE;
 800e03a:	f06f 0307 	mvn.w	r3, #7
 800e03e:	e029      	b.n	800e094 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	61bb      	str	r3, [r7, #24]
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1dd      	bne.n	800e008 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	3301      	adds	r3, #1
 800e050:	61fb      	str	r3, [r7, #28]
 800e052:	69fa      	ldr	r2, [r7, #28]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	429a      	cmp	r2, r3
 800e058:	dbcf      	blt.n	800dffa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00c      	beq.n	800e07a <tcp_bind+0xf2>
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d008      	beq.n	800e07a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <tcp_bind+0xec>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	e000      	b.n	800e076 <tcp_bind+0xee>
 800e074:	2300      	movs	r3, #0
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	88fa      	ldrh	r2, [r7, #6]
 800e07e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e080:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <tcp_bind+0x12c>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	60da      	str	r2, [r3, #12]
 800e088:	4a0a      	ldr	r2, [pc, #40]	; (800e0b4 <tcp_bind+0x12c>)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	f005 fccb 	bl	8013a28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	08022b78 	.word	0x08022b78
 800e0a0:	08019bbc 	.word	0x08019bbc
 800e0a4:	08019d50 	.word	0x08019d50
 800e0a8:	08019c00 	.word	0x08019c00
 800e0ac:	08019d68 	.word	0x08019d68
 800e0b0:	08022b50 	.word	0x08022b50
 800e0b4:	20014ab0 	.word	0x20014ab0

0800e0b8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <tcp_accept_null+0x22>
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <tcp_accept_null+0x34>)
 800e0ce:	f240 320f 	movw	r2, #783	; 0x30f
 800e0d2:	4907      	ldr	r1, [pc, #28]	; (800e0f0 <tcp_accept_null+0x38>)
 800e0d4:	4807      	ldr	r0, [pc, #28]	; (800e0f4 <tcp_accept_null+0x3c>)
 800e0d6:	f008 fd47 	bl	8016b68 <iprintf>

  tcp_abort(pcb);
 800e0da:	68b8      	ldr	r0, [r7, #8]
 800e0dc:	f7ff ff48 	bl	800df70 <tcp_abort>

  return ERR_ABRT;
 800e0e0:	f06f 030c 	mvn.w	r3, #12
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	08019bbc 	.word	0x08019bbc
 800e0f0:	08019d90 	.word	0x08019d90
 800e0f4:	08019c00 	.word	0x08019c00

0800e0f8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	2200      	movs	r2, #0
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f806 	bl	800e11c <tcp_listen_with_backlog_and_err>
 800e110:	4603      	mov	r3, r0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	460b      	mov	r3, r1
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e12a:	2300      	movs	r3, #0
 800e12c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d109      	bne.n	800e148 <tcp_listen_with_backlog_and_err+0x2c>
 800e134:	4b47      	ldr	r3, [pc, #284]	; (800e254 <tcp_listen_with_backlog_and_err+0x138>)
 800e136:	f240 3259 	movw	r2, #857	; 0x359
 800e13a:	4947      	ldr	r1, [pc, #284]	; (800e258 <tcp_listen_with_backlog_and_err+0x13c>)
 800e13c:	4847      	ldr	r0, [pc, #284]	; (800e25c <tcp_listen_with_backlog_and_err+0x140>)
 800e13e:	f008 fd13 	bl	8016b68 <iprintf>
 800e142:	23f0      	movs	r3, #240	; 0xf0
 800e144:	76fb      	strb	r3, [r7, #27]
 800e146:	e079      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	7d1b      	ldrb	r3, [r3, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d009      	beq.n	800e164 <tcp_listen_with_backlog_and_err+0x48>
 800e150:	4b40      	ldr	r3, [pc, #256]	; (800e254 <tcp_listen_with_backlog_and_err+0x138>)
 800e152:	f240 325a 	movw	r2, #858	; 0x35a
 800e156:	4942      	ldr	r1, [pc, #264]	; (800e260 <tcp_listen_with_backlog_and_err+0x144>)
 800e158:	4840      	ldr	r0, [pc, #256]	; (800e25c <tcp_listen_with_backlog_and_err+0x140>)
 800e15a:	f008 fd05 	bl	8016b68 <iprintf>
 800e15e:	23f1      	movs	r3, #241	; 0xf1
 800e160:	76fb      	strb	r3, [r7, #27]
 800e162:	e06b      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d104      	bne.n	800e176 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e170:	23f7      	movs	r3, #247	; 0xf7
 800e172:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e174:	e062      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e176:	2002      	movs	r0, #2
 800e178:	f7fe fa70 	bl	800c65c <memp_malloc>
 800e17c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d102      	bne.n	800e18a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e184:	23ff      	movs	r3, #255	; 0xff
 800e186:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e188:	e058      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	691a      	ldr	r2, [r3, #16]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8ada      	ldrh	r2, [r3, #22]
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	2201      	movs	r2, #1
 800e19e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	7d5a      	ldrb	r2, [r3, #21]
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7a5a      	ldrb	r2, [r3, #9]
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	7ada      	ldrb	r2, [r3, #11]
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	7a9a      	ldrb	r2, [r3, #10]
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	8adb      	ldrh	r3, [r3, #22]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d021      	beq.n	800e21a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1d6:	4b23      	ldr	r3, [pc, #140]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d105      	bne.n	800e1ec <tcp_listen_with_backlog_and_err+0xd0>
 800e1e0:	4b20      	ldr	r3, [pc, #128]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	4a1f      	ldr	r2, [pc, #124]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	e013      	b.n	800e214 <tcp_listen_with_backlog_and_err+0xf8>
 800e1ec:	4b1d      	ldr	r3, [pc, #116]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	e00c      	b.n	800e20e <tcp_listen_with_backlog_and_err+0xf2>
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d104      	bne.n	800e208 <tcp_listen_with_backlog_and_err+0xec>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68da      	ldr	r2, [r3, #12]
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	60da      	str	r2, [r3, #12]
 800e206:	e005      	b.n	800e214 <tcp_listen_with_backlog_and_err+0xf8>
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	617b      	str	r3, [r7, #20]
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1ef      	bne.n	800e1f4 <tcp_listen_with_backlog_and_err+0xd8>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff fbc0 	bl	800d9a0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	4a11      	ldr	r2, [pc, #68]	; (800e268 <tcp_listen_with_backlog_and_err+0x14c>)
 800e224:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e226:	4b11      	ldr	r3, [pc, #68]	; (800e26c <tcp_listen_with_backlog_and_err+0x150>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	60da      	str	r2, [r3, #12]
 800e22e:	4a0f      	ldr	r2, [pc, #60]	; (800e26c <tcp_listen_with_backlog_and_err+0x150>)
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	f005 fbf8 	bl	8013a28 <tcp_timer_needed>
  res = ERR_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7efa      	ldrb	r2, [r7, #27]
 800e246:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e248:	69fb      	ldr	r3, [r7, #28]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	08019bbc 	.word	0x08019bbc
 800e258:	08019db0 	.word	0x08019db0
 800e25c:	08019c00 	.word	0x08019c00
 800e260:	08019de0 	.word	0x08019de0
 800e264:	20014ab0 	.word	0x20014ab0
 800e268:	0800e0b9 	.word	0x0800e0b9
 800e26c:	20014aac 	.word	0x20014aac

0800e270 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <tcp_update_rcv_ann_wnd+0x1c>
 800e27e:	4b25      	ldr	r3, [pc, #148]	; (800e314 <tcp_update_rcv_ann_wnd+0xa4>)
 800e280:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e284:	4924      	ldr	r1, [pc, #144]	; (800e318 <tcp_update_rcv_ann_wnd+0xa8>)
 800e286:	4825      	ldr	r0, [pc, #148]	; (800e31c <tcp_update_rcv_ann_wnd+0xac>)
 800e288:	f008 fc6e 	bl	8016b68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e294:	4413      	add	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e2a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e2a4:	bf28      	it	cs
 800e2a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e2aa:	b292      	uxth	r2, r2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	db08      	blt.n	800e2c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	e020      	b.n	800e30a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dd03      	ble.n	800e2de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2dc:	e014      	b.n	800e308 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f0:	d306      	bcc.n	800e300 <tcp_update_rcv_ann_wnd+0x90>
 800e2f2:	4b08      	ldr	r3, [pc, #32]	; (800e314 <tcp_update_rcv_ann_wnd+0xa4>)
 800e2f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e2f8:	4909      	ldr	r1, [pc, #36]	; (800e320 <tcp_update_rcv_ann_wnd+0xb0>)
 800e2fa:	4808      	ldr	r0, [pc, #32]	; (800e31c <tcp_update_rcv_ann_wnd+0xac>)
 800e2fc:	f008 fc34 	bl	8016b68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e308:	2300      	movs	r3, #0
  }
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	08019bbc 	.word	0x08019bbc
 800e318:	08019e18 	.word	0x08019e18
 800e31c:	08019c00 	.word	0x08019c00
 800e320:	08019e3c 	.word	0x08019e3c

0800e324 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d107      	bne.n	800e346 <tcp_recved+0x22>
 800e336:	4b1f      	ldr	r3, [pc, #124]	; (800e3b4 <tcp_recved+0x90>)
 800e338:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e33c:	491e      	ldr	r1, [pc, #120]	; (800e3b8 <tcp_recved+0x94>)
 800e33e:	481f      	ldr	r0, [pc, #124]	; (800e3bc <tcp_recved+0x98>)
 800e340:	f008 fc12 	bl	8016b68 <iprintf>
 800e344:	e032      	b.n	800e3ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	7d1b      	ldrb	r3, [r3, #20]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d106      	bne.n	800e35c <tcp_recved+0x38>
 800e34e:	4b19      	ldr	r3, [pc, #100]	; (800e3b4 <tcp_recved+0x90>)
 800e350:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e354:	491a      	ldr	r1, [pc, #104]	; (800e3c0 <tcp_recved+0x9c>)
 800e356:	4819      	ldr	r0, [pc, #100]	; (800e3bc <tcp_recved+0x98>)
 800e358:	f008 fc06 	bl	8016b68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e360:	887b      	ldrh	r3, [r7, #2]
 800e362:	4413      	add	r3, r2
 800e364:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e366:	89fb      	ldrh	r3, [r7, #14]
 800e368:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e36c:	d804      	bhi.n	800e378 <tcp_recved+0x54>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e372:	89fa      	ldrh	r2, [r7, #14]
 800e374:	429a      	cmp	r2, r3
 800e376:	d204      	bcs.n	800e382 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e37e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e380:	e002      	b.n	800e388 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	89fa      	ldrh	r2, [r7, #14]
 800e386:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff ff71 	bl	800e270 <tcp_update_rcv_ann_wnd>
 800e38e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e396:	d309      	bcc.n	800e3ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	8b5b      	ldrh	r3, [r3, #26]
 800e39c:	f043 0302 	orr.w	r3, r3, #2
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f004 fbc8 	bl	8012b3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	08019bbc 	.word	0x08019bbc
 800e3b8:	08019e58 	.word	0x08019e58
 800e3bc:	08019c00 	.word	0x08019c00
 800e3c0:	08019e70 	.word	0x08019e70

0800e3c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e3ce:	4b1e      	ldr	r3, [pc, #120]	; (800e448 <tcp_new_port+0x84>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	4b1c      	ldr	r3, [pc, #112]	; (800e448 <tcp_new_port+0x84>)
 800e3d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e3da:	4b1b      	ldr	r3, [pc, #108]	; (800e448 <tcp_new_port+0x84>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d103      	bne.n	800e3ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e3e6:	4b18      	ldr	r3, [pc, #96]	; (800e448 <tcp_new_port+0x84>)
 800e3e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e3ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	71fb      	strb	r3, [r7, #7]
 800e3f2:	e01e      	b.n	800e432 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	4a15      	ldr	r2, [pc, #84]	; (800e44c <tcp_new_port+0x88>)
 800e3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	e011      	b.n	800e426 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	8ada      	ldrh	r2, [r3, #22]
 800e406:	4b10      	ldr	r3, [pc, #64]	; (800e448 <tcp_new_port+0x84>)
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d108      	bne.n	800e420 <tcp_new_port+0x5c>
        n++;
 800e40e:	88bb      	ldrh	r3, [r7, #4]
 800e410:	3301      	adds	r3, #1
 800e412:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e414:	88bb      	ldrh	r3, [r7, #4]
 800e416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e41a:	d3d8      	bcc.n	800e3ce <tcp_new_port+0xa>
          return 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e00d      	b.n	800e43c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	603b      	str	r3, [r7, #0]
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1ea      	bne.n	800e402 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	3301      	adds	r3, #1
 800e430:	71fb      	strb	r3, [r7, #7]
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	2b03      	cmp	r3, #3
 800e436:	d9dd      	bls.n	800e3f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e438:	4b03      	ldr	r3, [pc, #12]	; (800e448 <tcp_new_port+0x84>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	200004a8 	.word	0x200004a8
 800e44c:	08022b50 	.word	0x08022b50

0800e450 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e450:	b5b0      	push	{r4, r5, r7, lr}
 800e452:	b090      	sub	sp, #64	; 0x40
 800e454:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e45c:	4b94      	ldr	r3, [pc, #592]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3301      	adds	r3, #1
 800e462:	4a93      	ldr	r2, [pc, #588]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e464:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e466:	4b93      	ldr	r3, [pc, #588]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	3301      	adds	r3, #1
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	4b91      	ldr	r3, [pc, #580]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e470:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e476:	4b90      	ldr	r3, [pc, #576]	; (800e6b8 <tcp_slowtmr+0x268>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e47c:	e29f      	b.n	800e9be <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d106      	bne.n	800e494 <tcp_slowtmr+0x44>
 800e486:	4b8d      	ldr	r3, [pc, #564]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e488:	f240 42be 	movw	r2, #1214	; 0x4be
 800e48c:	498c      	ldr	r1, [pc, #560]	; (800e6c0 <tcp_slowtmr+0x270>)
 800e48e:	488d      	ldr	r0, [pc, #564]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e490:	f008 fb6a 	bl	8016b68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	7d1b      	ldrb	r3, [r3, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d106      	bne.n	800e4aa <tcp_slowtmr+0x5a>
 800e49c:	4b87      	ldr	r3, [pc, #540]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e49e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e4a2:	4989      	ldr	r1, [pc, #548]	; (800e6c8 <tcp_slowtmr+0x278>)
 800e4a4:	4887      	ldr	r0, [pc, #540]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4a6:	f008 fb5f 	bl	8016b68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	7d1b      	ldrb	r3, [r3, #20]
 800e4ae:	2b0a      	cmp	r3, #10
 800e4b0:	d106      	bne.n	800e4c0 <tcp_slowtmr+0x70>
 800e4b2:	4b82      	ldr	r3, [pc, #520]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e4b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e4b8:	4984      	ldr	r1, [pc, #528]	; (800e6cc <tcp_slowtmr+0x27c>)
 800e4ba:	4882      	ldr	r0, [pc, #520]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4bc:	f008 fb54 	bl	8016b68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	7f9a      	ldrb	r2, [r3, #30]
 800e4c4:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d105      	bne.n	800e4d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e4d6:	e272      	b.n	800e9be <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e4d8:	4b76      	ldr	r3, [pc, #472]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	d10a      	bne.n	800e50a <tcp_slowtmr+0xba>
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4fa:	2b05      	cmp	r3, #5
 800e4fc:	d905      	bls.n	800e50a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e502:	3301      	adds	r3, #1
 800e504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e508:	e11e      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e510:	2b0b      	cmp	r3, #11
 800e512:	d905      	bls.n	800e520 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e518:	3301      	adds	r3, #1
 800e51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e51e:	e113      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e526:	2b00      	cmp	r3, #0
 800e528:	d075      	beq.n	800e616 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d006      	beq.n	800e540 <tcp_slowtmr+0xf0>
 800e532:	4b62      	ldr	r3, [pc, #392]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e534:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e538:	4965      	ldr	r1, [pc, #404]	; (800e6d0 <tcp_slowtmr+0x280>)
 800e53a:	4862      	ldr	r0, [pc, #392]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e53c:	f008 fb14 	bl	8016b68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_slowtmr+0x106>
 800e548:	4b5c      	ldr	r3, [pc, #368]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e54a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e54e:	4961      	ldr	r1, [pc, #388]	; (800e6d4 <tcp_slowtmr+0x284>)
 800e550:	485c      	ldr	r0, [pc, #368]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e552:	f008 fb09 	bl	8016b68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e55c:	2b0b      	cmp	r3, #11
 800e55e:	d905      	bls.n	800e56c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	3301      	adds	r3, #1
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e56a:	e0ed      	b.n	800e748 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e572:	3b01      	subs	r3, #1
 800e574:	4a58      	ldr	r2, [pc, #352]	; (800e6d8 <tcp_slowtmr+0x288>)
 800e576:	5cd3      	ldrb	r3, [r2, r3]
 800e578:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e580:	7c7a      	ldrb	r2, [r7, #17]
 800e582:	429a      	cmp	r2, r3
 800e584:	d907      	bls.n	800e596 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e58c:	3301      	adds	r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e59c:	7c7a      	ldrb	r2, [r7, #17]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	f200 80d2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d108      	bne.n	800e5c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b4:	f005 f96a 	bl	801388c <tcp_zero_window_probe>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d014      	beq.n	800e5e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
 800e5c2:	e011      	b.n	800e5e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ce:	f004 f82f 	bl	8012630 <tcp_split_unsent_seg>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d107      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5da:	f004 faaf 	bl	8012b3c <tcp_output>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 80ac 	beq.w	800e748 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5fe:	2b06      	cmp	r3, #6
 800e600:	f200 80a2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e60a:	3301      	adds	r3, #1
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e614:	e098      	b.n	800e748 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	db0f      	blt.n	800e640 <tcp_slowtmr+0x1f0>
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e626:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d008      	beq.n	800e640 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e634:	b29b      	uxth	r3, r3
 800e636:	3301      	adds	r3, #1
 800e638:	b29b      	uxth	r3, r3
 800e63a:	b21a      	sxth	r2, r3
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e64c:	429a      	cmp	r2, r3
 800e64e:	db7b      	blt.n	800e748 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e652:	f004 fd65 	bl	8013120 <tcp_rexmit_rto_prepare>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d007      	beq.n	800e66c <tcp_slowtmr+0x21c>
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e660:	2b00      	cmp	r3, #0
 800e662:	d171      	bne.n	800e748 <tcp_slowtmr+0x2f8>
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d06d      	beq.n	800e748 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	7d1b      	ldrb	r3, [r3, #20]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d03a      	beq.n	800e6ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e67a:	2b0c      	cmp	r3, #12
 800e67c:	bf28      	it	cs
 800e67e:	230c      	movcs	r3, #12
 800e680:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e688:	10db      	asrs	r3, r3, #3
 800e68a:	b21b      	sxth	r3, r3
 800e68c:	461a      	mov	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e694:	4413      	add	r3, r2
 800e696:	7efa      	ldrb	r2, [r7, #27]
 800e698:	4910      	ldr	r1, [pc, #64]	; (800e6dc <tcp_slowtmr+0x28c>)
 800e69a:	5c8a      	ldrb	r2, [r1, r2]
 800e69c:	4093      	lsls	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	dc1a      	bgt.n	800e6e0 <tcp_slowtmr+0x290>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	e019      	b.n	800e6e4 <tcp_slowtmr+0x294>
 800e6b0:	20014aa8 	.word	0x20014aa8
 800e6b4:	200083aa 	.word	0x200083aa
 800e6b8:	20014aa4 	.word	0x20014aa4
 800e6bc:	08019bbc 	.word	0x08019bbc
 800e6c0:	08019f00 	.word	0x08019f00
 800e6c4:	08019c00 	.word	0x08019c00
 800e6c8:	08019f2c 	.word	0x08019f2c
 800e6cc:	08019f58 	.word	0x08019f58
 800e6d0:	08019f88 	.word	0x08019f88
 800e6d4:	08019fbc 	.word	0x08019fbc
 800e6d8:	08022b48 	.word	0x08022b48
 800e6dc:	08022b38 	.word	0x08022b38
 800e6e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	bf28      	it	cs
 800e700:	4613      	movcs	r3, r2
 800e702:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e704:	8a7b      	ldrh	r3, [r7, #18]
 800e706:	085b      	lsrs	r3, r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	429a      	cmp	r2, r3
 800e720:	d206      	bcs.n	800e730 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	b29a      	uxth	r2, r3
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e744:	f004 fd5c 	bl	8013200 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	7d1b      	ldrb	r3, [r3, #20]
 800e74c:	2b06      	cmp	r3, #6
 800e74e:	d111      	bne.n	800e774 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	8b5b      	ldrh	r3, [r3, #26]
 800e754:	f003 0310 	and.w	r3, r3, #16
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e75c:	4b9d      	ldr	r3, [pc, #628]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b28      	cmp	r3, #40	; 0x28
 800e768:	d904      	bls.n	800e774 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e76e:	3301      	adds	r3, #1
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	7a5b      	ldrb	r3, [r3, #9]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d04c      	beq.n	800e81a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e784:	2b04      	cmp	r3, #4
 800e786:	d003      	beq.n	800e790 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e78c:	2b07      	cmp	r3, #7
 800e78e:	d144      	bne.n	800e81a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e790:	4b90      	ldr	r3, [pc, #576]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e7a0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e7a4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e7a8:	498b      	ldr	r1, [pc, #556]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7aa:	fba1 1303 	umull	r1, r3, r1, r3
 800e7ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d90a      	bls.n	800e7ca <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e7be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7c8:	e027      	b.n	800e81a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ca:	4b82      	ldr	r3, [pc, #520]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	4b7e      	ldr	r3, [pc, #504]	; (800e9dc <tcp_slowtmr+0x58c>)
 800e7e4:	fb03 f300 	mul.w	r3, r3, r0
 800e7e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e7ea:	497b      	ldr	r1, [pc, #492]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7ec:	fba1 1303 	umull	r1, r3, r1, r3
 800e7f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d911      	bls.n	800e81a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f8:	f005 f808 	bl	801380c <tcp_keepalive>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e802:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e806:	2b00      	cmp	r3, #0
 800e808:	d107      	bne.n	800e81a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e810:	3301      	adds	r3, #1
 800e812:	b2da      	uxtb	r2, r3
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d011      	beq.n	800e846 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e822:	4b6c      	ldr	r3, [pc, #432]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e832:	4619      	mov	r1, r3
 800e834:	460b      	mov	r3, r1
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	440b      	add	r3, r1
 800e83a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d302      	bcc.n	800e846 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e842:	f000 fec7 	bl	800f5d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	d10b      	bne.n	800e866 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e84e:	4b61      	ldr	r3, [pc, #388]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	2b28      	cmp	r3, #40	; 0x28
 800e85a:	d904      	bls.n	800e866 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e860:	3301      	adds	r3, #1
 800e862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	7d1b      	ldrb	r3, [r3, #20]
 800e86a:	2b09      	cmp	r3, #9
 800e86c:	d10b      	bne.n	800e886 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e86e:	4b59      	ldr	r3, [pc, #356]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	2bf0      	cmp	r3, #240	; 0xf0
 800e87a:	d904      	bls.n	800e886 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e880:	3301      	adds	r3, #1
 800e882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d060      	beq.n	800e950 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e894:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e898:	f000 fce8 	bl	800f26c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d010      	beq.n	800e8c4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e8a2:	4b4f      	ldr	r3, [pc, #316]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d106      	bne.n	800e8ba <tcp_slowtmr+0x46a>
 800e8ac:	4b4d      	ldr	r3, [pc, #308]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8ae:	f240 526d 	movw	r2, #1389	; 0x56d
 800e8b2:	494d      	ldr	r1, [pc, #308]	; (800e9e8 <tcp_slowtmr+0x598>)
 800e8b4:	484d      	ldr	r0, [pc, #308]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8b6:	f008 f957 	bl	8016b68 <iprintf>
        prev->next = pcb->next;
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	60da      	str	r2, [r3, #12]
 800e8c2:	e00f      	b.n	800e8e4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e8c4:	4b46      	ldr	r3, [pc, #280]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d006      	beq.n	800e8dc <tcp_slowtmr+0x48c>
 800e8ce:	4b45      	ldr	r3, [pc, #276]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8d0:	f240 5271 	movw	r2, #1393	; 0x571
 800e8d4:	4946      	ldr	r1, [pc, #280]	; (800e9f0 <tcp_slowtmr+0x5a0>)
 800e8d6:	4845      	ldr	r0, [pc, #276]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8d8:	f008 f946 	bl	8016b68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	4a3f      	ldr	r2, [pc, #252]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8e2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e8e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d013      	beq.n	800e914 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8f4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8fc:	8ad2      	ldrh	r2, [r2, #22]
 800e8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e900:	8b09      	ldrh	r1, [r1, #24]
 800e902:	9102      	str	r1, [sp, #8]
 800e904:	9201      	str	r2, [sp, #4]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	462b      	mov	r3, r5
 800e90a:	4622      	mov	r2, r4
 800e90c:	4601      	mov	r1, r0
 800e90e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e910:	f004 fec8 	bl	80136a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	7d1b      	ldrb	r3, [r3, #20]
 800e91e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e92a:	6838      	ldr	r0, [r7, #0]
 800e92c:	f7ff f838 	bl	800d9a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e930:	4b30      	ldr	r3, [pc, #192]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e932:	2200      	movs	r2, #0
 800e934:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <tcp_slowtmr+0x4f6>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f06f 010c 	mvn.w	r1, #12
 800e942:	68b8      	ldr	r0, [r7, #8]
 800e944:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e946:	4b2b      	ldr	r3, [pc, #172]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d037      	beq.n	800e9be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e94e:	e590      	b.n	800e472 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	7f1b      	ldrb	r3, [r3, #28]
 800e95e:	3301      	adds	r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	7f1a      	ldrb	r2, [r3, #28]
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	7f5b      	ldrb	r3, [r3, #29]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d325      	bcc.n	800e9be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e978:	4b1e      	ldr	r3, [pc, #120]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00b      	beq.n	800e9a0 <tcp_slowtmr+0x550>
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e98e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e990:	6912      	ldr	r2, [r2, #16]
 800e992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e994:	4610      	mov	r0, r2
 800e996:	4798      	blx	r3
 800e998:	4603      	mov	r3, r0
 800e99a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e99e:	e002      	b.n	800e9a6 <tcp_slowtmr+0x556>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e9a6:	4b13      	ldr	r3, [pc, #76]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d000      	beq.n	800e9b0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e9ae:	e560      	b.n	800e472 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ba:	f004 f8bf 	bl	8012b3c <tcp_output>
  while (pcb != NULL) {
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f47f ad5c 	bne.w	800e47e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e9ca:	4b0b      	ldr	r3, [pc, #44]	; (800e9f8 <tcp_slowtmr+0x5a8>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e9d0:	e067      	b.n	800eaa2 <tcp_slowtmr+0x652>
 800e9d2:	bf00      	nop
 800e9d4:	20014aa8 	.word	0x20014aa8
 800e9d8:	10624dd3 	.word	0x10624dd3
 800e9dc:	000124f8 	.word	0x000124f8
 800e9e0:	20014aa4 	.word	0x20014aa4
 800e9e4:	08019bbc 	.word	0x08019bbc
 800e9e8:	08019ff4 	.word	0x08019ff4
 800e9ec:	08019c00 	.word	0x08019c00
 800e9f0:	0801a020 	.word	0x0801a020
 800e9f4:	20014aa0 	.word	0x20014aa0
 800e9f8:	20014ab4 	.word	0x20014ab4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ea00:	2b0a      	cmp	r3, #10
 800ea02:	d006      	beq.n	800ea12 <tcp_slowtmr+0x5c2>
 800ea04:	4b2b      	ldr	r3, [pc, #172]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ea0a:	492b      	ldr	r1, [pc, #172]	; (800eab8 <tcp_slowtmr+0x668>)
 800ea0c:	482b      	ldr	r0, [pc, #172]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea0e:	f008 f8ab 	bl	8016b68 <iprintf>
    pcb_remove = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea18:	4b29      	ldr	r3, [pc, #164]	; (800eac0 <tcp_slowtmr+0x670>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	2bf0      	cmp	r3, #240	; 0xf0
 800ea24:	d904      	bls.n	800ea30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ea26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d02f      	beq.n	800ea98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea3a:	f000 fc17 	bl	800f26c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d010      	beq.n	800ea66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea44:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d106      	bne.n	800ea5c <tcp_slowtmr+0x60c>
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea50:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea54:	491c      	ldr	r1, [pc, #112]	; (800eac8 <tcp_slowtmr+0x678>)
 800ea56:	4819      	ldr	r0, [pc, #100]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea58:	f008 f886 	bl	8016b68 <iprintf>
        prev->next = pcb->next;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	60da      	str	r2, [r3, #12]
 800ea64:	e00f      	b.n	800ea86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea66:	4b17      	ldr	r3, [pc, #92]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d006      	beq.n	800ea7e <tcp_slowtmr+0x62e>
 800ea70:	4b10      	ldr	r3, [pc, #64]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea76:	4915      	ldr	r1, [pc, #84]	; (800eacc <tcp_slowtmr+0x67c>)
 800ea78:	4810      	ldr	r0, [pc, #64]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea7a:	f008 f875 	bl	8016b68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	4a10      	ldr	r2, [pc, #64]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea90:	69f8      	ldr	r0, [r7, #28]
 800ea92:	f7fe ff85 	bl	800d9a0 <tcp_free>
 800ea96:	e004      	b.n	800eaa2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1a9      	bne.n	800e9fc <tcp_slowtmr+0x5ac>
    }
  }
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3730      	adds	r7, #48	; 0x30
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bdb0      	pop	{r4, r5, r7, pc}
 800eab2:	bf00      	nop
 800eab4:	08019bbc 	.word	0x08019bbc
 800eab8:	0801a04c 	.word	0x0801a04c
 800eabc:	08019c00 	.word	0x08019c00
 800eac0:	20014aa8 	.word	0x20014aa8
 800eac4:	20014ab4 	.word	0x20014ab4
 800eac8:	0801a07c 	.word	0x0801a07c
 800eacc:	0801a0a4 	.word	0x0801a0a4

0800ead0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ead6:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <tcp_fasttmr+0xbc>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	4b2b      	ldr	r3, [pc, #172]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eae0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eae2:	4b2b      	ldr	r3, [pc, #172]	; (800eb90 <tcp_fasttmr+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eae8:	e048      	b.n	800eb7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f9a      	ldrb	r2, [r3, #30]
 800eaee:	4b27      	ldr	r3, [pc, #156]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d03f      	beq.n	800eb76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eaf6:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf8:	781a      	ldrb	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d010      	beq.n	800eb2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8b5b      	ldrh	r3, [r3, #26]
 800eb0e:	f043 0302 	orr.w	r3, r3, #2
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f004 f80f 	bl	8012b3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	8b5b      	ldrh	r3, [r3, #26]
 800eb30:	f003 0308 	and.w	r3, r3, #8
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d009      	beq.n	800eb4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8b5b      	ldrh	r3, [r3, #26]
 800eb3c:	f023 0308 	bic.w	r3, r3, #8
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff f8be 	bl	800dcc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00a      	beq.n	800eb70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f819 	bl	800eb98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d000      	beq.n	800eb70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb6e:	e7b8      	b.n	800eae2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	607b      	str	r3, [r7, #4]
 800eb74:	e002      	b.n	800eb7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1b3      	bne.n	800eaea <tcp_fasttmr+0x1a>
    }
  }
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	200083aa 	.word	0x200083aa
 800eb90:	20014aa4 	.word	0x20014aa4
 800eb94:	20014aa0 	.word	0x20014aa0

0800eb98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d109      	bne.n	800ebba <tcp_process_refused_data+0x22>
 800eba6:	4b37      	ldr	r3, [pc, #220]	; (800ec84 <tcp_process_refused_data+0xec>)
 800eba8:	f240 6209 	movw	r2, #1545	; 0x609
 800ebac:	4936      	ldr	r1, [pc, #216]	; (800ec88 <tcp_process_refused_data+0xf0>)
 800ebae:	4837      	ldr	r0, [pc, #220]	; (800ec8c <tcp_process_refused_data+0xf4>)
 800ebb0:	f007 ffda 	bl	8016b68 <iprintf>
 800ebb4:	f06f 030f 	mvn.w	r3, #15
 800ebb8:	e060      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebbe:	7b5b      	ldrb	r3, [r3, #13]
 800ebc0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <tcp_process_refused_data+0x58>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6918      	ldr	r0, [r3, #16]
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	47a0      	blx	r4
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
 800ebee:	e007      	b.n	800ec00 <tcp_process_refused_data+0x68>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f000 f8c2 	bl	800ed80 <tcp_recv_null>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d12a      	bne.n	800ec5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d033      	beq.n	800ec7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec1a:	d005      	beq.n	800ec28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec20:	3301      	adds	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <tcp_process_refused_data+0xb2>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6918      	ldr	r0, [r3, #16]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2200      	movs	r2, #0
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	47a0      	blx	r4
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	e001      	b.n	800ec4e <tcp_process_refused_data+0xb6>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec52:	f113 0f0d 	cmn.w	r3, #13
 800ec56:	d110      	bne.n	800ec7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec58:	f06f 030c 	mvn.w	r3, #12
 800ec5c:	e00e      	b.n	800ec7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec62:	f113 0f0d 	cmn.w	r3, #13
 800ec66:	d102      	bne.n	800ec6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec68:	f06f 030c 	mvn.w	r3, #12
 800ec6c:	e006      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec74:	f06f 0304 	mvn.w	r3, #4
 800ec78:	e000      	b.n	800ec7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd90      	pop	{r4, r7, pc}
 800ec84:	08019bbc 	.word	0x08019bbc
 800ec88:	0801a0cc 	.word	0x0801a0cc
 800ec8c:	08019c00 	.word	0x08019c00

0800ec90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec98:	e007      	b.n	800ecaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f80a 	bl	800ecba <tcp_seg_free>
    seg = next;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f4      	bne.n	800ec9a <tcp_segs_free+0xa>
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00c      	beq.n	800ece2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fe fbb7 	bl	800d448 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	2003      	movs	r0, #3
 800ecde:	f7fd fd0f 	bl	800c700 <memp_free>
  }
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d107      	bne.n	800ed0e <tcp_setprio+0x22>
 800ecfe:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <tcp_setprio+0x30>)
 800ed00:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ed04:	4906      	ldr	r1, [pc, #24]	; (800ed20 <tcp_setprio+0x34>)
 800ed06:	4807      	ldr	r0, [pc, #28]	; (800ed24 <tcp_setprio+0x38>)
 800ed08:	f007 ff2e 	bl	8016b68 <iprintf>
 800ed0c:	e002      	b.n	800ed14 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	755a      	strb	r2, [r3, #21]
}
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	08019bbc 	.word	0x08019bbc
 800ed20:	0801a0f4 	.word	0x0801a0f4
 800ed24:	08019c00 	.word	0x08019c00

0800ed28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d106      	bne.n	800ed44 <tcp_seg_copy+0x1c>
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <tcp_seg_copy+0x4c>)
 800ed38:	f240 6282 	movw	r2, #1666	; 0x682
 800ed3c:	490e      	ldr	r1, [pc, #56]	; (800ed78 <tcp_seg_copy+0x50>)
 800ed3e:	480f      	ldr	r0, [pc, #60]	; (800ed7c <tcp_seg_copy+0x54>)
 800ed40:	f007 ff12 	bl	8016b68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed44:	2003      	movs	r0, #3
 800ed46:	f7fd fc89 	bl	800c65c <memp_malloc>
 800ed4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <tcp_seg_copy+0x2e>
    return NULL;
 800ed52:	2300      	movs	r3, #0
 800ed54:	e00a      	b.n	800ed6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed56:	2210      	movs	r2, #16
 800ed58:	6879      	ldr	r1, [r7, #4]
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f007 fe79 	bl	8016a52 <memcpy>
  pbuf_ref(cseg->p);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fe fc15 	bl	800d594 <pbuf_ref>
  return cseg;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	08019bbc 	.word	0x08019bbc
 800ed78:	0801a110 	.word	0x0801a110
 800ed7c:	08019c00 	.word	0x08019c00

0800ed80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d109      	bne.n	800eda8 <tcp_recv_null+0x28>
 800ed94:	4b12      	ldr	r3, [pc, #72]	; (800ede0 <tcp_recv_null+0x60>)
 800ed96:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed9a:	4912      	ldr	r1, [pc, #72]	; (800ede4 <tcp_recv_null+0x64>)
 800ed9c:	4812      	ldr	r0, [pc, #72]	; (800ede8 <tcp_recv_null+0x68>)
 800ed9e:	f007 fee3 	bl	8016b68 <iprintf>
 800eda2:	f06f 030f 	mvn.w	r3, #15
 800eda6:	e016      	b.n	800edd6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d009      	beq.n	800edc2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	891b      	ldrh	r3, [r3, #8]
 800edb2:	4619      	mov	r1, r3
 800edb4:	68b8      	ldr	r0, [r7, #8]
 800edb6:	f7ff fab5 	bl	800e324 <tcp_recved>
    pbuf_free(p);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7fe fb44 	bl	800d448 <pbuf_free>
 800edc0:	e008      	b.n	800edd4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800edc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d104      	bne.n	800edd4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800edca:	68b8      	ldr	r0, [r7, #8]
 800edcc:	f7fe ffe6 	bl	800dd9c <tcp_close>
 800edd0:	4603      	mov	r3, r0
 800edd2:	e000      	b.n	800edd6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	08019bbc 	.word	0x08019bbc
 800ede4:	0801a12c 	.word	0x0801a12c
 800ede8:	08019c00 	.word	0x08019c00

0800edec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800edf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	db01      	blt.n	800ee02 <tcp_kill_prio+0x16>
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	e000      	b.n	800ee04 <tcp_kill_prio+0x18>
 800ee02:	237f      	movs	r3, #127	; 0x7f
 800ee04:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d034      	beq.n	800ee76 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ee0c:	7afb      	ldrb	r3, [r7, #11]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee1a:	4b19      	ldr	r3, [pc, #100]	; (800ee80 <tcp_kill_prio+0x94>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	e01f      	b.n	800ee62 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	7d5b      	ldrb	r3, [r3, #21]
 800ee26:	7afa      	ldrb	r2, [r7, #11]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d80c      	bhi.n	800ee46 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ee30:	7afa      	ldrb	r2, [r7, #11]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d112      	bne.n	800ee5c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee36:	4b13      	ldr	r3, [pc, #76]	; (800ee84 <tcp_kill_prio+0x98>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d80a      	bhi.n	800ee5c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee46:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <tcp_kill_prio+0x98>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	7d5b      	ldrb	r3, [r3, #21]
 800ee5a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1dc      	bne.n	800ee22 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee6e:	6938      	ldr	r0, [r7, #16]
 800ee70:	f7ff f87e 	bl	800df70 <tcp_abort>
 800ee74:	e000      	b.n	800ee78 <tcp_kill_prio+0x8c>
    return;
 800ee76:	bf00      	nop
  }
}
 800ee78:	3718      	adds	r7, #24
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20014aa4 	.word	0x20014aa4
 800ee84:	20014aa8 	.word	0x20014aa8

0800ee88 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	2b08      	cmp	r3, #8
 800ee96:	d009      	beq.n	800eeac <tcp_kill_state+0x24>
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	2b09      	cmp	r3, #9
 800ee9c:	d006      	beq.n	800eeac <tcp_kill_state+0x24>
 800ee9e:	4b1a      	ldr	r3, [pc, #104]	; (800ef08 <tcp_kill_state+0x80>)
 800eea0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eea4:	4919      	ldr	r1, [pc, #100]	; (800ef0c <tcp_kill_state+0x84>)
 800eea6:	481a      	ldr	r0, [pc, #104]	; (800ef10 <tcp_kill_state+0x88>)
 800eea8:	f007 fe5e 	bl	8016b68 <iprintf>

  inactivity = 0;
 800eeac:	2300      	movs	r3, #0
 800eeae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeb4:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <tcp_kill_state+0x8c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	e017      	b.n	800eeec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	79fa      	ldrb	r2, [r7, #7]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d10f      	bne.n	800eee6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <tcp_kill_state+0x90>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	1ad3      	subs	r3, r2, r3
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d807      	bhi.n	800eee6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eed6:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <tcp_kill_state+0x90>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e4      	bne.n	800eebc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d003      	beq.n	800ef00 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eef8:	2100      	movs	r1, #0
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f7fe ff7a 	bl	800ddf4 <tcp_abandon>
  }
}
 800ef00:	bf00      	nop
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	08019bbc 	.word	0x08019bbc
 800ef0c:	0801a148 	.word	0x0801a148
 800ef10:	08019c00 	.word	0x08019c00
 800ef14:	20014aa4 	.word	0x20014aa4
 800ef18:	20014aa8 	.word	0x20014aa8

0800ef1c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ef22:	2300      	movs	r3, #0
 800ef24:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef2a:	4b12      	ldr	r3, [pc, #72]	; (800ef74 <tcp_kill_timewait+0x58>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e012      	b.n	800ef58 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef32:	4b11      	ldr	r3, [pc, #68]	; (800ef78 <tcp_kill_timewait+0x5c>)
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6a1b      	ldr	r3, [r3, #32]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d807      	bhi.n	800ef52 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef42:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <tcp_kill_timewait+0x5c>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e9      	bne.n	800ef32 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d002      	beq.n	800ef6a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef64:	68b8      	ldr	r0, [r7, #8]
 800ef66:	f7ff f803 	bl	800df70 <tcp_abort>
  }
}
 800ef6a:	bf00      	nop
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20014ab4 	.word	0x20014ab4
 800ef78:	20014aa8 	.word	0x20014aa8

0800ef7c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef82:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <tcp_handle_closepend+0x48>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef88:	e014      	b.n	800efb4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8b5b      	ldrh	r3, [r3, #26]
 800ef94:	f003 0308 	and.w	r3, r3, #8
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d009      	beq.n	800efb0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	8b5b      	ldrh	r3, [r3, #26]
 800efa0:	f023 0308 	bic.w	r3, r3, #8
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe fe8c 	bl	800dcc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e7      	bne.n	800ef8a <tcp_handle_closepend+0xe>
  }
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20014aa4 	.word	0x20014aa4

0800efc8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efd2:	2001      	movs	r0, #1
 800efd4:	f7fd fb42 	bl	800c65c <memp_malloc>
 800efd8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d126      	bne.n	800f02e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800efe0:	f7ff ffcc 	bl	800ef7c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800efe4:	f7ff ff9a 	bl	800ef1c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efe8:	2001      	movs	r0, #1
 800efea:	f7fd fb37 	bl	800c65c <memp_malloc>
 800efee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d11b      	bne.n	800f02e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eff6:	2009      	movs	r0, #9
 800eff8:	f7ff ff46 	bl	800ee88 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800effc:	2001      	movs	r0, #1
 800effe:	f7fd fb2d 	bl	800c65c <memp_malloc>
 800f002:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d111      	bne.n	800f02e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f00a:	2008      	movs	r0, #8
 800f00c:	f7ff ff3c 	bl	800ee88 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f010:	2001      	movs	r0, #1
 800f012:	f7fd fb23 	bl	800c65c <memp_malloc>
 800f016:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d107      	bne.n	800f02e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff fee3 	bl	800edec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f026:	2001      	movs	r0, #1
 800f028:	f7fd fb18 	bl	800c65c <memp_malloc>
 800f02c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d03f      	beq.n	800f0b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f034:	229c      	movs	r2, #156	; 0x9c
 800f036:	2100      	movs	r1, #0
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f007 fd32 	bl	8016aa2 <memset>
    pcb->prio = prio;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	79fa      	ldrb	r2, [r7, #7]
 800f042:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f04a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f054:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	22ff      	movs	r2, #255	; 0xff
 800f062:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f06a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2206      	movs	r2, #6
 800f070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2206      	movs	r2, #6
 800f078:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f080:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2201      	movs	r2, #1
 800f086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f08a:	4b0d      	ldr	r3, [pc, #52]	; (800f0c0 <tcp_alloc+0xf8>)
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f092:	4b0c      	ldr	r3, [pc, #48]	; (800f0c4 <tcp_alloc+0xfc>)
 800f094:	781a      	ldrb	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4a08      	ldr	r2, [pc, #32]	; (800f0c8 <tcp_alloc+0x100>)
 800f0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	4a07      	ldr	r2, [pc, #28]	; (800f0cc <tcp_alloc+0x104>)
 800f0b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20014aa8 	.word	0x20014aa8
 800f0c4:	200083aa 	.word	0x200083aa
 800f0c8:	0800ed81 	.word	0x0800ed81
 800f0cc:	006ddd00 	.word	0x006ddd00

0800f0d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f0da:	2040      	movs	r0, #64	; 0x40
 800f0dc:	f7ff ff74 	bl	800efc8 <tcp_alloc>
 800f0e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	611a      	str	r2, [r3, #16]
  }
}
 800f102:	bf00      	nop
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00e      	beq.n	800f13e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d106      	bne.n	800f136 <tcp_recv+0x26>
 800f128:	4b07      	ldr	r3, [pc, #28]	; (800f148 <tcp_recv+0x38>)
 800f12a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f12e:	4907      	ldr	r1, [pc, #28]	; (800f14c <tcp_recv+0x3c>)
 800f130:	4807      	ldr	r0, [pc, #28]	; (800f150 <tcp_recv+0x40>)
 800f132:	f007 fd19 	bl	8016b68 <iprintf>
    pcb->recv = recv;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f13e:	bf00      	nop
 800f140:	3708      	adds	r7, #8
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	08019bbc 	.word	0x08019bbc
 800f14c:	0801a158 	.word	0x0801a158
 800f150:	08019c00 	.word	0x08019c00

0800f154 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00e      	beq.n	800f182 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d106      	bne.n	800f17a <tcp_sent+0x26>
 800f16c:	4b07      	ldr	r3, [pc, #28]	; (800f18c <tcp_sent+0x38>)
 800f16e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f172:	4907      	ldr	r1, [pc, #28]	; (800f190 <tcp_sent+0x3c>)
 800f174:	4807      	ldr	r0, [pc, #28]	; (800f194 <tcp_sent+0x40>)
 800f176:	f007 fcf7 	bl	8016b68 <iprintf>
    pcb->sent = sent;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	08019bbc 	.word	0x08019bbc
 800f190:	0801a180 	.word	0x0801a180
 800f194:	08019c00 	.word	0x08019c00

0800f198 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	7d1b      	ldrb	r3, [r3, #20]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d106      	bne.n	800f1be <tcp_err+0x26>
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <tcp_err+0x38>)
 800f1b2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f1b6:	4907      	ldr	r1, [pc, #28]	; (800f1d4 <tcp_err+0x3c>)
 800f1b8:	4807      	ldr	r0, [pc, #28]	; (800f1d8 <tcp_err+0x40>)
 800f1ba:	f007 fcd5 	bl	8016b68 <iprintf>
    pcb->errf = err;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	08019bbc 	.word	0x08019bbc
 800f1d4:	0801a1a8 	.word	0x0801a1a8
 800f1d8:	08019c00 	.word	0x08019c00

0800f1dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d008      	beq.n	800f1fe <tcp_accept+0x22>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7d1b      	ldrb	r3, [r3, #20]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d104      	bne.n	800f1fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	619a      	str	r2, [r3, #24]
  }
}
 800f1fe:	bf00      	nop
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
	...

0800f20c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	4613      	mov	r3, r2
 800f218:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d107      	bne.n	800f230 <tcp_poll+0x24>
 800f220:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <tcp_poll+0x50>)
 800f222:	f640 023d 	movw	r2, #2109	; 0x83d
 800f226:	490e      	ldr	r1, [pc, #56]	; (800f260 <tcp_poll+0x54>)
 800f228:	480e      	ldr	r0, [pc, #56]	; (800f264 <tcp_poll+0x58>)
 800f22a:	f007 fc9d 	bl	8016b68 <iprintf>
 800f22e:	e011      	b.n	800f254 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	7d1b      	ldrb	r3, [r3, #20]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d106      	bne.n	800f246 <tcp_poll+0x3a>
 800f238:	4b08      	ldr	r3, [pc, #32]	; (800f25c <tcp_poll+0x50>)
 800f23a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f23e:	490a      	ldr	r1, [pc, #40]	; (800f268 <tcp_poll+0x5c>)
 800f240:	4808      	ldr	r0, [pc, #32]	; (800f264 <tcp_poll+0x58>)
 800f242:	f007 fc91 	bl	8016b68 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	79fa      	ldrb	r2, [r7, #7]
 800f252:	775a      	strb	r2, [r3, #29]
}
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	08019bbc 	.word	0x08019bbc
 800f260:	0801a1d0 	.word	0x0801a1d0
 800f264:	08019c00 	.word	0x08019c00
 800f268:	0801a1e8 	.word	0x0801a1e8

0800f26c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d107      	bne.n	800f28a <tcp_pcb_purge+0x1e>
 800f27a:	4b21      	ldr	r3, [pc, #132]	; (800f300 <tcp_pcb_purge+0x94>)
 800f27c:	f640 0251 	movw	r2, #2129	; 0x851
 800f280:	4920      	ldr	r1, [pc, #128]	; (800f304 <tcp_pcb_purge+0x98>)
 800f282:	4821      	ldr	r0, [pc, #132]	; (800f308 <tcp_pcb_purge+0x9c>)
 800f284:	f007 fc70 	bl	8016b68 <iprintf>
 800f288:	e037      	b.n	800f2fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	7d1b      	ldrb	r3, [r3, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d033      	beq.n	800f2fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f296:	2b0a      	cmp	r3, #10
 800f298:	d02f      	beq.n	800f2fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d02b      	beq.n	800f2fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d007      	beq.n	800f2ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe f8ca 	bl	800d448 <pbuf_free>
      pcb->refused_data = NULL;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d002      	beq.n	800f2c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f986 	bl	800f5d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7ff fcdb 	bl	800ec90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7ff fcd6 	bl	800ec90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08019bbc 	.word	0x08019bbc
 800f304:	0801a208 	.word	0x0801a208
 800f308:	08019c00 	.word	0x08019c00

0800f30c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <tcp_pcb_remove+0x1e>
 800f31c:	4b3e      	ldr	r3, [pc, #248]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f31e:	f640 0283 	movw	r2, #2179	; 0x883
 800f322:	493e      	ldr	r1, [pc, #248]	; (800f41c <tcp_pcb_remove+0x110>)
 800f324:	483e      	ldr	r0, [pc, #248]	; (800f420 <tcp_pcb_remove+0x114>)
 800f326:	f007 fc1f 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d106      	bne.n	800f33e <tcp_pcb_remove+0x32>
 800f330:	4b39      	ldr	r3, [pc, #228]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f332:	f640 0284 	movw	r2, #2180	; 0x884
 800f336:	493b      	ldr	r1, [pc, #236]	; (800f424 <tcp_pcb_remove+0x118>)
 800f338:	4839      	ldr	r0, [pc, #228]	; (800f420 <tcp_pcb_remove+0x114>)
 800f33a:	f007 fc15 	bl	8016b68 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d105      	bne.n	800f354 <tcp_pcb_remove+0x48>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68da      	ldr	r2, [r3, #12]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	601a      	str	r2, [r3, #0]
 800f352:	e013      	b.n	800f37c <tcp_pcb_remove+0x70>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	e00c      	b.n	800f376 <tcp_pcb_remove+0x6a>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d104      	bne.n	800f370 <tcp_pcb_remove+0x64>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	68da      	ldr	r2, [r3, #12]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	60da      	str	r2, [r3, #12]
 800f36e:	e005      	b.n	800f37c <tcp_pcb_remove+0x70>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	60fb      	str	r3, [r7, #12]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1ef      	bne.n	800f35c <tcp_pcb_remove+0x50>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2200      	movs	r2, #0
 800f380:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f382:	6838      	ldr	r0, [r7, #0]
 800f384:	f7ff ff72 	bl	800f26c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	7d1b      	ldrb	r3, [r3, #20]
 800f38c:	2b0a      	cmp	r3, #10
 800f38e:	d013      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f394:	2b01      	cmp	r3, #1
 800f396:	d00f      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	8b5b      	ldrh	r3, [r3, #26]
 800f39c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	8b5b      	ldrh	r3, [r3, #26]
 800f3a8:	f043 0302 	orr.w	r3, r3, #2
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f3b2:	6838      	ldr	r0, [r7, #0]
 800f3b4:	f003 fbc2 	bl	8012b3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	7d1b      	ldrb	r3, [r3, #20]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d020      	beq.n	800f402 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d006      	beq.n	800f3d6 <tcp_pcb_remove+0xca>
 800f3c8:	4b13      	ldr	r3, [pc, #76]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3ca:	f640 0293 	movw	r2, #2195	; 0x893
 800f3ce:	4916      	ldr	r1, [pc, #88]	; (800f428 <tcp_pcb_remove+0x11c>)
 800f3d0:	4813      	ldr	r0, [pc, #76]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3d2:	f007 fbc9 	bl	8016b68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d006      	beq.n	800f3ec <tcp_pcb_remove+0xe0>
 800f3de:	4b0e      	ldr	r3, [pc, #56]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3e0:	f640 0294 	movw	r2, #2196	; 0x894
 800f3e4:	4911      	ldr	r1, [pc, #68]	; (800f42c <tcp_pcb_remove+0x120>)
 800f3e6:	480e      	ldr	r0, [pc, #56]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3e8:	f007 fbbe 	bl	8016b68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d006      	beq.n	800f402 <tcp_pcb_remove+0xf6>
 800f3f4:	4b08      	ldr	r3, [pc, #32]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3f6:	f640 0296 	movw	r2, #2198	; 0x896
 800f3fa:	490d      	ldr	r1, [pc, #52]	; (800f430 <tcp_pcb_remove+0x124>)
 800f3fc:	4808      	ldr	r0, [pc, #32]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3fe:	f007 fbb3 	bl	8016b68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	2200      	movs	r2, #0
 800f406:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2200      	movs	r2, #0
 800f40c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f40e:	bf00      	nop
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	08019bbc 	.word	0x08019bbc
 800f41c:	0801a224 	.word	0x0801a224
 800f420:	08019c00 	.word	0x08019c00
 800f424:	0801a240 	.word	0x0801a240
 800f428:	0801a260 	.word	0x0801a260
 800f42c:	0801a278 	.word	0x0801a278
 800f430:	0801a294 	.word	0x0801a294

0800f434 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_next_iss+0x1c>
 800f442:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <tcp_next_iss+0x38>)
 800f444:	f640 02af 	movw	r2, #2223	; 0x8af
 800f448:	4909      	ldr	r1, [pc, #36]	; (800f470 <tcp_next_iss+0x3c>)
 800f44a:	480a      	ldr	r0, [pc, #40]	; (800f474 <tcp_next_iss+0x40>)
 800f44c:	f007 fb8c 	bl	8016b68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f450:	4b09      	ldr	r3, [pc, #36]	; (800f478 <tcp_next_iss+0x44>)
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	4b09      	ldr	r3, [pc, #36]	; (800f47c <tcp_next_iss+0x48>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4413      	add	r3, r2
 800f45a:	4a07      	ldr	r2, [pc, #28]	; (800f478 <tcp_next_iss+0x44>)
 800f45c:	6013      	str	r3, [r2, #0]
  return iss;
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <tcp_next_iss+0x44>)
 800f460:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f462:	4618      	mov	r0, r3
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	08019bbc 	.word	0x08019bbc
 800f470:	0801a2ac 	.word	0x0801a2ac
 800f474:	08019c00 	.word	0x08019c00
 800f478:	200004ac 	.word	0x200004ac
 800f47c:	20014aa8 	.word	0x20014aa8

0800f480 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
 800f48c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d106      	bne.n	800f4a2 <tcp_eff_send_mss_netif+0x22>
 800f494:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <tcp_eff_send_mss_netif+0x68>)
 800f496:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f49a:	4914      	ldr	r1, [pc, #80]	; (800f4ec <tcp_eff_send_mss_netif+0x6c>)
 800f49c:	4814      	ldr	r0, [pc, #80]	; (800f4f0 <tcp_eff_send_mss_netif+0x70>)
 800f49e:	f007 fb63 	bl	8016b68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f4a8:	89fb      	ldrh	r3, [r7, #14]
 800f4aa:	e019      	b.n	800f4e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f4b2:	8afb      	ldrh	r3, [r7, #22]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d012      	beq.n	800f4de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f4b8:	2328      	movs	r3, #40	; 0x28
 800f4ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f4bc:	8afa      	ldrh	r2, [r7, #22]
 800f4be:	8abb      	ldrh	r3, [r7, #20]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d904      	bls.n	800f4ce <tcp_eff_send_mss_netif+0x4e>
 800f4c4:	8afa      	ldrh	r2, [r7, #22]
 800f4c6:	8abb      	ldrh	r3, [r7, #20]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	e000      	b.n	800f4d0 <tcp_eff_send_mss_netif+0x50>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f4d2:	8a7a      	ldrh	r2, [r7, #18]
 800f4d4:	89fb      	ldrh	r3, [r7, #14]
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	bf28      	it	cs
 800f4da:	4613      	movcs	r3, r2
 800f4dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f4de:	89fb      	ldrh	r3, [r7, #14]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	08019bbc 	.word	0x08019bbc
 800f4ec:	0801a2c8 	.word	0x0801a2c8
 800f4f0:	08019c00 	.word	0x08019c00

0800f4f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d119      	bne.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f508:	4b10      	ldr	r3, [pc, #64]	; (800f54c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f50a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f50e:	4910      	ldr	r1, [pc, #64]	; (800f550 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f510:	4810      	ldr	r0, [pc, #64]	; (800f554 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f512:	f007 fb29 	bl	8016b68 <iprintf>

  while (pcb != NULL) {
 800f516:	e011      	b.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	429a      	cmp	r2, r3
 800f522:	d108      	bne.n	800f536 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f7fe fd20 	bl	800df70 <tcp_abort>
      pcb = next;
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e002      	b.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1ea      	bne.n	800f518 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f542:	bf00      	nop
 800f544:	bf00      	nop
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	08019bbc 	.word	0x08019bbc
 800f550:	0801a2f0 	.word	0x0801a2f0
 800f554:	08019c00 	.word	0x08019c00

0800f558 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d02a      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d026      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f570:	4b15      	ldr	r3, [pc, #84]	; (800f5c8 <tcp_netif_ip_addr_changed+0x70>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4619      	mov	r1, r3
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7ff ffbc 	bl	800f4f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f57c:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <tcp_netif_ip_addr_changed+0x74>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff ffb6 	bl	800f4f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d017      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d013      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f596:	4b0e      	ldr	r3, [pc, #56]	; (800f5d0 <tcp_netif_ip_addr_changed+0x78>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	60fb      	str	r3, [r7, #12]
 800f59c:	e00c      	b.n	800f5b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d103      	bne.n	800f5b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1ef      	bne.n	800f59e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f5be:	bf00      	nop
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20014aa4 	.word	0x20014aa4
 800f5cc:	20014ab0 	.word	0x20014ab0
 800f5d0:	20014aac 	.word	0x20014aac

0800f5d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fb51 	bl	800ec90 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f5fc:	b590      	push	{r4, r7, lr}
 800f5fe:	b08d      	sub	sp, #52	; 0x34
 800f600:	af04      	add	r7, sp, #16
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d105      	bne.n	800f618 <tcp_input+0x1c>
 800f60c:	4b9b      	ldr	r3, [pc, #620]	; (800f87c <tcp_input+0x280>)
 800f60e:	2283      	movs	r2, #131	; 0x83
 800f610:	499b      	ldr	r1, [pc, #620]	; (800f880 <tcp_input+0x284>)
 800f612:	489c      	ldr	r0, [pc, #624]	; (800f884 <tcp_input+0x288>)
 800f614:	f007 faa8 	bl	8016b68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4a9a      	ldr	r2, [pc, #616]	; (800f888 <tcp_input+0x28c>)
 800f61e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	895b      	ldrh	r3, [r3, #10]
 800f624:	2b13      	cmp	r3, #19
 800f626:	f240 83c4 	bls.w	800fdb2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f62a:	4b98      	ldr	r3, [pc, #608]	; (800f88c <tcp_input+0x290>)
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	4a97      	ldr	r2, [pc, #604]	; (800f88c <tcp_input+0x290>)
 800f630:	6812      	ldr	r2, [r2, #0]
 800f632:	4611      	mov	r1, r2
 800f634:	4618      	mov	r0, r3
 800f636:	f006 f89b 	bl	8015770 <ip4_addr_isbroadcast_u32>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f040 83ba 	bne.w	800fdb6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f642:	4b92      	ldr	r3, [pc, #584]	; (800f88c <tcp_input+0x290>)
 800f644:	695b      	ldr	r3, [r3, #20]
 800f646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f64a:	2be0      	cmp	r3, #224	; 0xe0
 800f64c:	f000 83b3 	beq.w	800fdb6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f650:	4b8d      	ldr	r3, [pc, #564]	; (800f888 <tcp_input+0x28c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fc fa6b 	bl	800bb34 <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	0b1b      	lsrs	r3, r3, #12
 800f662:	b29b      	uxth	r3, r3
 800f664:	b2db      	uxtb	r3, r3
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f66a:	7cbb      	ldrb	r3, [r7, #18]
 800f66c:	2b13      	cmp	r3, #19
 800f66e:	f240 83a4 	bls.w	800fdba <tcp_input+0x7be>
 800f672:	7cbb      	ldrb	r3, [r7, #18]
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	891b      	ldrh	r3, [r3, #8]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	f200 839d 	bhi.w	800fdba <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f680:	7cbb      	ldrb	r3, [r7, #18]
 800f682:	b29b      	uxth	r3, r3
 800f684:	3b14      	subs	r3, #20
 800f686:	b29a      	uxth	r2, r3
 800f688:	4b81      	ldr	r3, [pc, #516]	; (800f890 <tcp_input+0x294>)
 800f68a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f68c:	4b81      	ldr	r3, [pc, #516]	; (800f894 <tcp_input+0x298>)
 800f68e:	2200      	movs	r2, #0
 800f690:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	895a      	ldrh	r2, [r3, #10]
 800f696:	7cbb      	ldrb	r3, [r7, #18]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d309      	bcc.n	800f6b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f69e:	4b7c      	ldr	r3, [pc, #496]	; (800f890 <tcp_input+0x294>)
 800f6a0:	881a      	ldrh	r2, [r3, #0]
 800f6a2:	4b7d      	ldr	r3, [pc, #500]	; (800f898 <tcp_input+0x29c>)
 800f6a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f6a6:	7cbb      	ldrb	r3, [r7, #18]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7fd fe46 	bl	800d33c <pbuf_remove_header>
 800f6b0:	e04e      	b.n	800f750 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d105      	bne.n	800f6c6 <tcp_input+0xca>
 800f6ba:	4b70      	ldr	r3, [pc, #448]	; (800f87c <tcp_input+0x280>)
 800f6bc:	22c2      	movs	r2, #194	; 0xc2
 800f6be:	4977      	ldr	r1, [pc, #476]	; (800f89c <tcp_input+0x2a0>)
 800f6c0:	4870      	ldr	r0, [pc, #448]	; (800f884 <tcp_input+0x288>)
 800f6c2:	f007 fa51 	bl	8016b68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f6c6:	2114      	movs	r1, #20
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7fd fe37 	bl	800d33c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	895a      	ldrh	r2, [r3, #10]
 800f6d2:	4b71      	ldr	r3, [pc, #452]	; (800f898 <tcp_input+0x29c>)
 800f6d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f6d6:	4b6e      	ldr	r3, [pc, #440]	; (800f890 <tcp_input+0x294>)
 800f6d8:	881a      	ldrh	r2, [r3, #0]
 800f6da:	4b6f      	ldr	r3, [pc, #444]	; (800f898 <tcp_input+0x29c>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f6e2:	4b6d      	ldr	r3, [pc, #436]	; (800f898 <tcp_input+0x29c>)
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fd fe27 	bl	800d33c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	895b      	ldrh	r3, [r3, #10]
 800f6f4:	8a3a      	ldrh	r2, [r7, #16]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	f200 8361 	bhi.w	800fdbe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	4a64      	ldr	r2, [pc, #400]	; (800f894 <tcp_input+0x298>)
 800f704:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	8a3a      	ldrh	r2, [r7, #16]
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd fe14 	bl	800d33c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	891a      	ldrh	r2, [r3, #8]
 800f718:	8a3b      	ldrh	r3, [r7, #16]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	895b      	ldrh	r3, [r3, #10]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <tcp_input+0x13a>
 800f72a:	4b54      	ldr	r3, [pc, #336]	; (800f87c <tcp_input+0x280>)
 800f72c:	22df      	movs	r2, #223	; 0xdf
 800f72e:	495c      	ldr	r1, [pc, #368]	; (800f8a0 <tcp_input+0x2a4>)
 800f730:	4854      	ldr	r0, [pc, #336]	; (800f884 <tcp_input+0x288>)
 800f732:	f007 fa19 	bl	8016b68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	891a      	ldrh	r2, [r3, #8]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	891b      	ldrh	r3, [r3, #8]
 800f740:	429a      	cmp	r2, r3
 800f742:	d005      	beq.n	800f750 <tcp_input+0x154>
 800f744:	4b4d      	ldr	r3, [pc, #308]	; (800f87c <tcp_input+0x280>)
 800f746:	22e0      	movs	r2, #224	; 0xe0
 800f748:	4956      	ldr	r1, [pc, #344]	; (800f8a4 <tcp_input+0x2a8>)
 800f74a:	484e      	ldr	r0, [pc, #312]	; (800f884 <tcp_input+0x288>)
 800f74c:	f007 fa0c 	bl	8016b68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f750:	4b4d      	ldr	r3, [pc, #308]	; (800f888 <tcp_input+0x28c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	b29b      	uxth	r3, r3
 800f758:	4a4b      	ldr	r2, [pc, #300]	; (800f888 <tcp_input+0x28c>)
 800f75a:	6814      	ldr	r4, [r2, #0]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fc f9e9 	bl	800bb34 <lwip_htons>
 800f762:	4603      	mov	r3, r0
 800f764:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f766:	4b48      	ldr	r3, [pc, #288]	; (800f888 <tcp_input+0x28c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	885b      	ldrh	r3, [r3, #2]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4a46      	ldr	r2, [pc, #280]	; (800f888 <tcp_input+0x28c>)
 800f770:	6814      	ldr	r4, [r2, #0]
 800f772:	4618      	mov	r0, r3
 800f774:	f7fc f9de 	bl	800bb34 <lwip_htons>
 800f778:	4603      	mov	r3, r0
 800f77a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f77c:	4b42      	ldr	r3, [pc, #264]	; (800f888 <tcp_input+0x28c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	4a41      	ldr	r2, [pc, #260]	; (800f888 <tcp_input+0x28c>)
 800f784:	6814      	ldr	r4, [r2, #0]
 800f786:	4618      	mov	r0, r3
 800f788:	f7fc f9e9 	bl	800bb5e <lwip_htonl>
 800f78c:	4603      	mov	r3, r0
 800f78e:	6063      	str	r3, [r4, #4]
 800f790:	6863      	ldr	r3, [r4, #4]
 800f792:	4a45      	ldr	r2, [pc, #276]	; (800f8a8 <tcp_input+0x2ac>)
 800f794:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f796:	4b3c      	ldr	r3, [pc, #240]	; (800f888 <tcp_input+0x28c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	4a3a      	ldr	r2, [pc, #232]	; (800f888 <tcp_input+0x28c>)
 800f79e:	6814      	ldr	r4, [r2, #0]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fc f9dc 	bl	800bb5e <lwip_htonl>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	60a3      	str	r3, [r4, #8]
 800f7aa:	68a3      	ldr	r3, [r4, #8]
 800f7ac:	4a3f      	ldr	r2, [pc, #252]	; (800f8ac <tcp_input+0x2b0>)
 800f7ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f7b0:	4b35      	ldr	r3, [pc, #212]	; (800f888 <tcp_input+0x28c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	89db      	ldrh	r3, [r3, #14]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4a33      	ldr	r2, [pc, #204]	; (800f888 <tcp_input+0x28c>)
 800f7ba:	6814      	ldr	r4, [r2, #0]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fc f9b9 	bl	800bb34 <lwip_htons>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f7c6:	4b30      	ldr	r3, [pc, #192]	; (800f888 <tcp_input+0x28c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	899b      	ldrh	r3, [r3, #12]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fc f9b0 	bl	800bb34 <lwip_htons>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7dc:	b2da      	uxtb	r2, r3
 800f7de:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <tcp_input+0x2b4>)
 800f7e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	891a      	ldrh	r2, [r3, #8]
 800f7e6:	4b33      	ldr	r3, [pc, #204]	; (800f8b4 <tcp_input+0x2b8>)
 800f7e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f7ea:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <tcp_input+0x2b4>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 0303 	and.w	r3, r3, #3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00c      	beq.n	800f810 <tcp_input+0x214>
    tcplen++;
 800f7f6:	4b2f      	ldr	r3, [pc, #188]	; (800f8b4 <tcp_input+0x2b8>)
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	4b2d      	ldr	r3, [pc, #180]	; (800f8b4 <tcp_input+0x2b8>)
 800f800:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	891a      	ldrh	r2, [r3, #8]
 800f806:	4b2b      	ldr	r3, [pc, #172]	; (800f8b4 <tcp_input+0x2b8>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	f200 82d9 	bhi.w	800fdc2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f810:	2300      	movs	r3, #0
 800f812:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f814:	4b28      	ldr	r3, [pc, #160]	; (800f8b8 <tcp_input+0x2bc>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	61fb      	str	r3, [r7, #28]
 800f81a:	e09d      	b.n	800f958 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	7d1b      	ldrb	r3, [r3, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d105      	bne.n	800f830 <tcp_input+0x234>
 800f824:	4b15      	ldr	r3, [pc, #84]	; (800f87c <tcp_input+0x280>)
 800f826:	22fb      	movs	r2, #251	; 0xfb
 800f828:	4924      	ldr	r1, [pc, #144]	; (800f8bc <tcp_input+0x2c0>)
 800f82a:	4816      	ldr	r0, [pc, #88]	; (800f884 <tcp_input+0x288>)
 800f82c:	f007 f99c 	bl	8016b68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b0a      	cmp	r3, #10
 800f836:	d105      	bne.n	800f844 <tcp_input+0x248>
 800f838:	4b10      	ldr	r3, [pc, #64]	; (800f87c <tcp_input+0x280>)
 800f83a:	22fc      	movs	r2, #252	; 0xfc
 800f83c:	4920      	ldr	r1, [pc, #128]	; (800f8c0 <tcp_input+0x2c4>)
 800f83e:	4811      	ldr	r0, [pc, #68]	; (800f884 <tcp_input+0x288>)
 800f840:	f007 f992 	bl	8016b68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	7d1b      	ldrb	r3, [r3, #20]
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d105      	bne.n	800f858 <tcp_input+0x25c>
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <tcp_input+0x280>)
 800f84e:	22fd      	movs	r2, #253	; 0xfd
 800f850:	491c      	ldr	r1, [pc, #112]	; (800f8c4 <tcp_input+0x2c8>)
 800f852:	480c      	ldr	r0, [pc, #48]	; (800f884 <tcp_input+0x288>)
 800f854:	f007 f988 	bl	8016b68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	7a1b      	ldrb	r3, [r3, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d033      	beq.n	800f8c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	7a1a      	ldrb	r2, [r3, #8]
 800f864:	4b09      	ldr	r3, [pc, #36]	; (800f88c <tcp_input+0x290>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f86c:	3301      	adds	r3, #1
 800f86e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f870:	429a      	cmp	r2, r3
 800f872:	d029      	beq.n	800f8c8 <tcp_input+0x2cc>
      prev = pcb;
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	61bb      	str	r3, [r7, #24]
      continue;
 800f878:	e06b      	b.n	800f952 <tcp_input+0x356>
 800f87a:	bf00      	nop
 800f87c:	0801a324 	.word	0x0801a324
 800f880:	0801a358 	.word	0x0801a358
 800f884:	0801a370 	.word	0x0801a370
 800f888:	200083bc 	.word	0x200083bc
 800f88c:	200112d4 	.word	0x200112d4
 800f890:	200083c0 	.word	0x200083c0
 800f894:	200083c4 	.word	0x200083c4
 800f898:	200083c2 	.word	0x200083c2
 800f89c:	0801a398 	.word	0x0801a398
 800f8a0:	0801a3a8 	.word	0x0801a3a8
 800f8a4:	0801a3b4 	.word	0x0801a3b4
 800f8a8:	200083cc 	.word	0x200083cc
 800f8ac:	200083d0 	.word	0x200083d0
 800f8b0:	200083d8 	.word	0x200083d8
 800f8b4:	200083d6 	.word	0x200083d6
 800f8b8:	20014aa4 	.word	0x20014aa4
 800f8bc:	0801a3d4 	.word	0x0801a3d4
 800f8c0:	0801a3fc 	.word	0x0801a3fc
 800f8c4:	0801a428 	.word	0x0801a428
    }

    if (pcb->remote_port == tcphdr->src &&
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	8b1a      	ldrh	r2, [r3, #24]
 800f8cc:	4b94      	ldr	r3, [pc, #592]	; (800fb20 <tcp_input+0x524>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d13a      	bne.n	800f94e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	8ada      	ldrh	r2, [r3, #22]
 800f8dc:	4b90      	ldr	r3, [pc, #576]	; (800fb20 <tcp_input+0x524>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	885b      	ldrh	r3, [r3, #2]
 800f8e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d132      	bne.n	800f94e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	4b8d      	ldr	r3, [pc, #564]	; (800fb24 <tcp_input+0x528>)
 800f8ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d12c      	bne.n	800f94e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	4b8a      	ldr	r3, [pc, #552]	; (800fb24 <tcp_input+0x528>)
 800f8fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d126      	bne.n	800f94e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	69fa      	ldr	r2, [r7, #28]
 800f906:	429a      	cmp	r2, r3
 800f908:	d106      	bne.n	800f918 <tcp_input+0x31c>
 800f90a:	4b87      	ldr	r3, [pc, #540]	; (800fb28 <tcp_input+0x52c>)
 800f90c:	f240 120d 	movw	r2, #269	; 0x10d
 800f910:	4986      	ldr	r1, [pc, #536]	; (800fb2c <tcp_input+0x530>)
 800f912:	4887      	ldr	r0, [pc, #540]	; (800fb30 <tcp_input+0x534>)
 800f914:	f007 f928 	bl	8016b68 <iprintf>
      if (prev != NULL) {
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00a      	beq.n	800f934 <tcp_input+0x338>
        prev->next = pcb->next;
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	68da      	ldr	r2, [r3, #12]
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f926:	4b83      	ldr	r3, [pc, #524]	; (800fb34 <tcp_input+0x538>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f92e:	4a81      	ldr	r2, [pc, #516]	; (800fb34 <tcp_input+0x538>)
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	69fa      	ldr	r2, [r7, #28]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d111      	bne.n	800f962 <tcp_input+0x366>
 800f93e:	4b7a      	ldr	r3, [pc, #488]	; (800fb28 <tcp_input+0x52c>)
 800f940:	f240 1215 	movw	r2, #277	; 0x115
 800f944:	497c      	ldr	r1, [pc, #496]	; (800fb38 <tcp_input+0x53c>)
 800f946:	487a      	ldr	r0, [pc, #488]	; (800fb30 <tcp_input+0x534>)
 800f948:	f007 f90e 	bl	8016b68 <iprintf>
      break;
 800f94c:	e009      	b.n	800f962 <tcp_input+0x366>
    }
    prev = pcb;
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	61fb      	str	r3, [r7, #28]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f47f af5e 	bne.w	800f81c <tcp_input+0x220>
 800f960:	e000      	b.n	800f964 <tcp_input+0x368>
      break;
 800f962:	bf00      	nop
  }

  if (pcb == NULL) {
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	2b00      	cmp	r3, #0
 800f968:	f040 8095 	bne.w	800fa96 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f96c:	4b73      	ldr	r3, [pc, #460]	; (800fb3c <tcp_input+0x540>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	61fb      	str	r3, [r7, #28]
 800f972:	e03f      	b.n	800f9f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	7d1b      	ldrb	r3, [r3, #20]
 800f978:	2b0a      	cmp	r3, #10
 800f97a:	d006      	beq.n	800f98a <tcp_input+0x38e>
 800f97c:	4b6a      	ldr	r3, [pc, #424]	; (800fb28 <tcp_input+0x52c>)
 800f97e:	f240 121f 	movw	r2, #287	; 0x11f
 800f982:	496f      	ldr	r1, [pc, #444]	; (800fb40 <tcp_input+0x544>)
 800f984:	486a      	ldr	r0, [pc, #424]	; (800fb30 <tcp_input+0x534>)
 800f986:	f007 f8ef 	bl	8016b68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	7a1b      	ldrb	r3, [r3, #8]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d009      	beq.n	800f9a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	7a1a      	ldrb	r2, [r3, #8]
 800f996:	4b63      	ldr	r3, [pc, #396]	; (800fb24 <tcp_input+0x528>)
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f99e:	3301      	adds	r3, #1
 800f9a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d122      	bne.n	800f9ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	8b1a      	ldrh	r2, [r3, #24]
 800f9aa:	4b5d      	ldr	r3, [pc, #372]	; (800fb20 <tcp_input+0x524>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	881b      	ldrh	r3, [r3, #0]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d11b      	bne.n	800f9ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	8ada      	ldrh	r2, [r3, #22]
 800f9ba:	4b59      	ldr	r3, [pc, #356]	; (800fb20 <tcp_input+0x524>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	885b      	ldrh	r3, [r3, #2]
 800f9c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d113      	bne.n	800f9ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	4b56      	ldr	r3, [pc, #344]	; (800fb24 <tcp_input+0x528>)
 800f9cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d10d      	bne.n	800f9ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	4b53      	ldr	r3, [pc, #332]	; (800fb24 <tcp_input+0x528>)
 800f9d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d107      	bne.n	800f9ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f9de:	69f8      	ldr	r0, [r7, #28]
 800f9e0:	f000 fb54 	bl	801008c <tcp_timewait_input>
        }
        pbuf_free(p);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fd fd2f 	bl	800d448 <pbuf_free>
        return;
 800f9ea:	e1f0      	b.n	800fdce <tcp_input+0x7d2>
        continue;
 800f9ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	61fb      	str	r3, [r7, #28]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1bc      	bne.n	800f974 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9fe:	4b51      	ldr	r3, [pc, #324]	; (800fb44 <tcp_input+0x548>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	e02a      	b.n	800fa5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	7a1b      	ldrb	r3, [r3, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00c      	beq.n	800fa28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	7a1a      	ldrb	r2, [r3, #8]
 800fa12:	4b44      	ldr	r3, [pc, #272]	; (800fb24 <tcp_input+0x528>)
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d002      	beq.n	800fa28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	61bb      	str	r3, [r7, #24]
        continue;
 800fa26:	e016      	b.n	800fa56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	8ada      	ldrh	r2, [r3, #22]
 800fa2c:	4b3c      	ldr	r3, [pc, #240]	; (800fb20 <tcp_input+0x524>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	885b      	ldrh	r3, [r3, #2]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d10c      	bne.n	800fa52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	4b39      	ldr	r3, [pc, #228]	; (800fb24 <tcp_input+0x528>)
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d00f      	beq.n	800fa64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00d      	beq.n	800fa66 <tcp_input+0x46a>
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d009      	beq.n	800fa66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	617b      	str	r3, [r7, #20]
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1d1      	bne.n	800fa06 <tcp_input+0x40a>
 800fa62:	e000      	b.n	800fa66 <tcp_input+0x46a>
            break;
 800fa64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d014      	beq.n	800fa96 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fa6c:	69bb      	ldr	r3, [r7, #24]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00a      	beq.n	800fa88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	68da      	ldr	r2, [r3, #12]
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fa7a:	4b32      	ldr	r3, [pc, #200]	; (800fb44 <tcp_input+0x548>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fa82:	4a30      	ldr	r2, [pc, #192]	; (800fb44 <tcp_input+0x548>)
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fa88:	6978      	ldr	r0, [r7, #20]
 800fa8a:	f000 fa01 	bl	800fe90 <tcp_listen_input>
      }
      pbuf_free(p);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7fd fcda 	bl	800d448 <pbuf_free>
      return;
 800fa94:	e19b      	b.n	800fdce <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 8160 	beq.w	800fd5e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa9e:	4b2a      	ldr	r3, [pc, #168]	; (800fb48 <tcp_input+0x54c>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	891a      	ldrh	r2, [r3, #8]
 800faa8:	4b27      	ldr	r3, [pc, #156]	; (800fb48 <tcp_input+0x54c>)
 800faaa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800faac:	4a26      	ldr	r2, [pc, #152]	; (800fb48 <tcp_input+0x54c>)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fab2:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <tcp_input+0x524>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a24      	ldr	r2, [pc, #144]	; (800fb48 <tcp_input+0x54c>)
 800fab8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800faba:	4b24      	ldr	r3, [pc, #144]	; (800fb4c <tcp_input+0x550>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fac0:	4b23      	ldr	r3, [pc, #140]	; (800fb50 <tcp_input+0x554>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fac6:	4b23      	ldr	r3, [pc, #140]	; (800fb54 <tcp_input+0x558>)
 800fac8:	2200      	movs	r2, #0
 800faca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800facc:	4b22      	ldr	r3, [pc, #136]	; (800fb58 <tcp_input+0x55c>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	f003 0308 	and.w	r3, r3, #8
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	7b5b      	ldrb	r3, [r3, #13]
 800fadc:	f043 0301 	orr.w	r3, r3, #1
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faea:	2b00      	cmp	r3, #0
 800faec:	d038      	beq.n	800fb60 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800faee:	69f8      	ldr	r0, [r7, #28]
 800faf0:	f7ff f852 	bl	800eb98 <tcp_process_refused_data>
 800faf4:	4603      	mov	r3, r0
 800faf6:	f113 0f0d 	cmn.w	r3, #13
 800fafa:	d007      	beq.n	800fb0c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d02d      	beq.n	800fb60 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb04:	4b15      	ldr	r3, [pc, #84]	; (800fb5c <tcp_input+0x560>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d029      	beq.n	800fb60 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f040 8104 	bne.w	800fd1e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fb16:	69f8      	ldr	r0, [r7, #28]
 800fb18:	f003 fe16 	bl	8013748 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fb1c:	e0ff      	b.n	800fd1e <tcp_input+0x722>
 800fb1e:	bf00      	nop
 800fb20:	200083bc 	.word	0x200083bc
 800fb24:	200112d4 	.word	0x200112d4
 800fb28:	0801a324 	.word	0x0801a324
 800fb2c:	0801a450 	.word	0x0801a450
 800fb30:	0801a370 	.word	0x0801a370
 800fb34:	20014aa4 	.word	0x20014aa4
 800fb38:	0801a47c 	.word	0x0801a47c
 800fb3c:	20014ab4 	.word	0x20014ab4
 800fb40:	0801a4a8 	.word	0x0801a4a8
 800fb44:	20014aac 	.word	0x20014aac
 800fb48:	200083ac 	.word	0x200083ac
 800fb4c:	200083dc 	.word	0x200083dc
 800fb50:	200083d9 	.word	0x200083d9
 800fb54:	200083d4 	.word	0x200083d4
 800fb58:	200083d8 	.word	0x200083d8
 800fb5c:	200083d6 	.word	0x200083d6
      }
    }
    tcp_input_pcb = pcb;
 800fb60:	4a9c      	ldr	r2, [pc, #624]	; (800fdd4 <tcp_input+0x7d8>)
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fb66:	69f8      	ldr	r0, [r7, #28]
 800fb68:	f000 fb0a 	bl	8010180 <tcp_process>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fb70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb74:	f113 0f0d 	cmn.w	r3, #13
 800fb78:	f000 80d3 	beq.w	800fd22 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fb7c:	4b96      	ldr	r3, [pc, #600]	; (800fdd8 <tcp_input+0x7dc>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 0308 	and.w	r3, r3, #8
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d015      	beq.n	800fbb4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d008      	beq.n	800fba4 <tcp_input+0x5a8>
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb98:	69fa      	ldr	r2, [r7, #28]
 800fb9a:	6912      	ldr	r2, [r2, #16]
 800fb9c:	f06f 010d 	mvn.w	r1, #13
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fba4:	69f9      	ldr	r1, [r7, #28]
 800fba6:	488d      	ldr	r0, [pc, #564]	; (800fddc <tcp_input+0x7e0>)
 800fba8:	f7ff fbb0 	bl	800f30c <tcp_pcb_remove>
        tcp_free(pcb);
 800fbac:	69f8      	ldr	r0, [r7, #28]
 800fbae:	f7fd fef7 	bl	800d9a0 <tcp_free>
 800fbb2:	e0c1      	b.n	800fd38 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fbb8:	4b89      	ldr	r3, [pc, #548]	; (800fde0 <tcp_input+0x7e4>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01d      	beq.n	800fbfc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fbc0:	4b87      	ldr	r3, [pc, #540]	; (800fde0 <tcp_input+0x7e4>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00a      	beq.n	800fbe6 <tcp_input+0x5ea>
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbd6:	69fa      	ldr	r2, [r7, #28]
 800fbd8:	6910      	ldr	r0, [r2, #16]
 800fbda:	89fa      	ldrh	r2, [r7, #14]
 800fbdc:	69f9      	ldr	r1, [r7, #28]
 800fbde:	4798      	blx	r3
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	74fb      	strb	r3, [r7, #19]
 800fbe4:	e001      	b.n	800fbea <tcp_input+0x5ee>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbee:	f113 0f0d 	cmn.w	r3, #13
 800fbf2:	f000 8098 	beq.w	800fd26 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fbf6:	4b7a      	ldr	r3, [pc, #488]	; (800fde0 <tcp_input+0x7e4>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fbfc:	69f8      	ldr	r0, [r7, #28]
 800fbfe:	f000 f907 	bl	800fe10 <tcp_input_delayed_close>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f040 8090 	bne.w	800fd2a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fc0a:	4b76      	ldr	r3, [pc, #472]	; (800fde4 <tcp_input+0x7e8>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d041      	beq.n	800fc96 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d006      	beq.n	800fc28 <tcp_input+0x62c>
 800fc1a:	4b73      	ldr	r3, [pc, #460]	; (800fde8 <tcp_input+0x7ec>)
 800fc1c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fc20:	4972      	ldr	r1, [pc, #456]	; (800fdec <tcp_input+0x7f0>)
 800fc22:	4873      	ldr	r0, [pc, #460]	; (800fdf0 <tcp_input+0x7f4>)
 800fc24:	f006 ffa0 	bl	8016b68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	8b5b      	ldrh	r3, [r3, #26]
 800fc2c:	f003 0310 	and.w	r3, r3, #16
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fc34:	4b6b      	ldr	r3, [pc, #428]	; (800fde4 <tcp_input+0x7e8>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fd fc05 	bl	800d448 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fc3e:	69f8      	ldr	r0, [r7, #28]
 800fc40:	f7fe f996 	bl	800df70 <tcp_abort>
            goto aborted;
 800fc44:	e078      	b.n	800fd38 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00c      	beq.n	800fc6a <tcp_input+0x66e>
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	6918      	ldr	r0, [r3, #16]
 800fc5a:	4b62      	ldr	r3, [pc, #392]	; (800fde4 <tcp_input+0x7e8>)
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	69f9      	ldr	r1, [r7, #28]
 800fc62:	47a0      	blx	r4
 800fc64:	4603      	mov	r3, r0
 800fc66:	74fb      	strb	r3, [r7, #19]
 800fc68:	e008      	b.n	800fc7c <tcp_input+0x680>
 800fc6a:	4b5e      	ldr	r3, [pc, #376]	; (800fde4 <tcp_input+0x7e8>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	69f9      	ldr	r1, [r7, #28]
 800fc72:	2000      	movs	r0, #0
 800fc74:	f7ff f884 	bl	800ed80 <tcp_recv_null>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fc7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc80:	f113 0f0d 	cmn.w	r3, #13
 800fc84:	d053      	beq.n	800fd2e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fc86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d003      	beq.n	800fc96 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fc8e:	4b55      	ldr	r3, [pc, #340]	; (800fde4 <tcp_input+0x7e8>)
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc96:	4b50      	ldr	r3, [pc, #320]	; (800fdd8 <tcp_input+0x7dc>)
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d030      	beq.n	800fd04 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d009      	beq.n	800fcbe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcae:	7b5a      	ldrb	r2, [r3, #13]
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcb4:	f042 0220 	orr.w	r2, r2, #32
 800fcb8:	b2d2      	uxtb	r2, r2
 800fcba:	735a      	strb	r2, [r3, #13]
 800fcbc:	e022      	b.n	800fd04 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fcc6:	d005      	beq.n	800fcd4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fccc:	3301      	adds	r3, #1
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <tcp_input+0x6fa>
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	6918      	ldr	r0, [r3, #16]
 800fce8:	2300      	movs	r3, #0
 800fcea:	2200      	movs	r2, #0
 800fcec:	69f9      	ldr	r1, [r7, #28]
 800fcee:	47a0      	blx	r4
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	74fb      	strb	r3, [r7, #19]
 800fcf4:	e001      	b.n	800fcfa <tcp_input+0x6fe>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcfe:	f113 0f0d 	cmn.w	r3, #13
 800fd02:	d016      	beq.n	800fd32 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fd04:	4b33      	ldr	r3, [pc, #204]	; (800fdd4 <tcp_input+0x7d8>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fd0a:	69f8      	ldr	r0, [r7, #28]
 800fd0c:	f000 f880 	bl	800fe10 <tcp_input_delayed_close>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d10f      	bne.n	800fd36 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fd16:	69f8      	ldr	r0, [r7, #28]
 800fd18:	f002 ff10 	bl	8012b3c <tcp_output>
 800fd1c:	e00c      	b.n	800fd38 <tcp_input+0x73c>
        goto aborted;
 800fd1e:	bf00      	nop
 800fd20:	e00a      	b.n	800fd38 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fd22:	bf00      	nop
 800fd24:	e008      	b.n	800fd38 <tcp_input+0x73c>
              goto aborted;
 800fd26:	bf00      	nop
 800fd28:	e006      	b.n	800fd38 <tcp_input+0x73c>
          goto aborted;
 800fd2a:	bf00      	nop
 800fd2c:	e004      	b.n	800fd38 <tcp_input+0x73c>
            goto aborted;
 800fd2e:	bf00      	nop
 800fd30:	e002      	b.n	800fd38 <tcp_input+0x73c>
              goto aborted;
 800fd32:	bf00      	nop
 800fd34:	e000      	b.n	800fd38 <tcp_input+0x73c>
          goto aborted;
 800fd36:	bf00      	nop
    tcp_input_pcb = NULL;
 800fd38:	4b26      	ldr	r3, [pc, #152]	; (800fdd4 <tcp_input+0x7d8>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fd3e:	4b29      	ldr	r3, [pc, #164]	; (800fde4 <tcp_input+0x7e8>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fd44:	4b2b      	ldr	r3, [pc, #172]	; (800fdf4 <tcp_input+0x7f8>)
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d03f      	beq.n	800fdcc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fd4c:	4b29      	ldr	r3, [pc, #164]	; (800fdf4 <tcp_input+0x7f8>)
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fd fb79 	bl	800d448 <pbuf_free>
      inseg.p = NULL;
 800fd56:	4b27      	ldr	r3, [pc, #156]	; (800fdf4 <tcp_input+0x7f8>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fd5c:	e036      	b.n	800fdcc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd5e:	4b26      	ldr	r3, [pc, #152]	; (800fdf8 <tcp_input+0x7fc>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fb fee4 	bl	800bb34 <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0304 	and.w	r3, r3, #4
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d118      	bne.n	800fdaa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd78:	4b20      	ldr	r3, [pc, #128]	; (800fdfc <tcp_input+0x800>)
 800fd7a:	6819      	ldr	r1, [r3, #0]
 800fd7c:	4b20      	ldr	r3, [pc, #128]	; (800fe00 <tcp_input+0x804>)
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	461a      	mov	r2, r3
 800fd82:	4b20      	ldr	r3, [pc, #128]	; (800fe04 <tcp_input+0x808>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd88:	4b1b      	ldr	r3, [pc, #108]	; (800fdf8 <tcp_input+0x7fc>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd8c:	885b      	ldrh	r3, [r3, #2]
 800fd8e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd90:	4a19      	ldr	r2, [pc, #100]	; (800fdf8 <tcp_input+0x7fc>)
 800fd92:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd94:	8812      	ldrh	r2, [r2, #0]
 800fd96:	b292      	uxth	r2, r2
 800fd98:	9202      	str	r2, [sp, #8]
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	; (800fe08 <tcp_input+0x80c>)
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	4b1a      	ldr	r3, [pc, #104]	; (800fe0c <tcp_input+0x810>)
 800fda2:	4602      	mov	r2, r0
 800fda4:	2000      	movs	r0, #0
 800fda6:	f003 fc7d 	bl	80136a4 <tcp_rst>
    pbuf_free(p);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7fd fb4c 	bl	800d448 <pbuf_free>
  return;
 800fdb0:	e00c      	b.n	800fdcc <tcp_input+0x7d0>
    goto dropped;
 800fdb2:	bf00      	nop
 800fdb4:	e006      	b.n	800fdc4 <tcp_input+0x7c8>
    goto dropped;
 800fdb6:	bf00      	nop
 800fdb8:	e004      	b.n	800fdc4 <tcp_input+0x7c8>
    goto dropped;
 800fdba:	bf00      	nop
 800fdbc:	e002      	b.n	800fdc4 <tcp_input+0x7c8>
      goto dropped;
 800fdbe:	bf00      	nop
 800fdc0:	e000      	b.n	800fdc4 <tcp_input+0x7c8>
      goto dropped;
 800fdc2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7fd fb3f 	bl	800d448 <pbuf_free>
 800fdca:	e000      	b.n	800fdce <tcp_input+0x7d2>
  return;
 800fdcc:	bf00      	nop
}
 800fdce:	3724      	adds	r7, #36	; 0x24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd90      	pop	{r4, r7, pc}
 800fdd4:	20014ab8 	.word	0x20014ab8
 800fdd8:	200083d9 	.word	0x200083d9
 800fddc:	20014aa4 	.word	0x20014aa4
 800fde0:	200083d4 	.word	0x200083d4
 800fde4:	200083dc 	.word	0x200083dc
 800fde8:	0801a324 	.word	0x0801a324
 800fdec:	0801a4d8 	.word	0x0801a4d8
 800fdf0:	0801a370 	.word	0x0801a370
 800fdf4:	200083ac 	.word	0x200083ac
 800fdf8:	200083bc 	.word	0x200083bc
 800fdfc:	200083d0 	.word	0x200083d0
 800fe00:	200083d6 	.word	0x200083d6
 800fe04:	200083cc 	.word	0x200083cc
 800fe08:	200112e4 	.word	0x200112e4
 800fe0c:	200112e8 	.word	0x200112e8

0800fe10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <tcp_input_delayed_close+0x1c>
 800fe1e:	4b17      	ldr	r3, [pc, #92]	; (800fe7c <tcp_input_delayed_close+0x6c>)
 800fe20:	f240 225a 	movw	r2, #602	; 0x25a
 800fe24:	4916      	ldr	r1, [pc, #88]	; (800fe80 <tcp_input_delayed_close+0x70>)
 800fe26:	4817      	ldr	r0, [pc, #92]	; (800fe84 <tcp_input_delayed_close+0x74>)
 800fe28:	f006 fe9e 	bl	8016b68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fe2c:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <tcp_input_delayed_close+0x78>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0310 	and.w	r3, r3, #16
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d01c      	beq.n	800fe72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	8b5b      	ldrh	r3, [r3, #26]
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10d      	bne.n	800fe60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d008      	beq.n	800fe60 <tcp_input_delayed_close+0x50>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	6912      	ldr	r2, [r2, #16]
 800fe58:	f06f 010e 	mvn.w	r1, #14
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe60:	6879      	ldr	r1, [r7, #4]
 800fe62:	480a      	ldr	r0, [pc, #40]	; (800fe8c <tcp_input_delayed_close+0x7c>)
 800fe64:	f7ff fa52 	bl	800f30c <tcp_pcb_remove>
    tcp_free(pcb);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fd fd99 	bl	800d9a0 <tcp_free>
    return 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	0801a324 	.word	0x0801a324
 800fe80:	0801a4f4 	.word	0x0801a4f4
 800fe84:	0801a370 	.word	0x0801a370
 800fe88:	200083d9 	.word	0x200083d9
 800fe8c:	20014aa4 	.word	0x20014aa4

0800fe90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	b08b      	sub	sp, #44	; 0x2c
 800fe94:	af04      	add	r7, sp, #16
 800fe96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe98:	4b6f      	ldr	r3, [pc, #444]	; (8010058 <tcp_listen_input+0x1c8>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 80d2 	bne.w	801004a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <tcp_listen_input+0x2a>
 800feac:	4b6b      	ldr	r3, [pc, #428]	; (801005c <tcp_listen_input+0x1cc>)
 800feae:	f240 2281 	movw	r2, #641	; 0x281
 800feb2:	496b      	ldr	r1, [pc, #428]	; (8010060 <tcp_listen_input+0x1d0>)
 800feb4:	486b      	ldr	r0, [pc, #428]	; (8010064 <tcp_listen_input+0x1d4>)
 800feb6:	f006 fe57 	bl	8016b68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800feba:	4b67      	ldr	r3, [pc, #412]	; (8010058 <tcp_listen_input+0x1c8>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	f003 0310 	and.w	r3, r3, #16
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d019      	beq.n	800fefa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec6:	4b68      	ldr	r3, [pc, #416]	; (8010068 <tcp_listen_input+0x1d8>)
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	4b68      	ldr	r3, [pc, #416]	; (801006c <tcp_listen_input+0x1dc>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	4b67      	ldr	r3, [pc, #412]	; (8010070 <tcp_listen_input+0x1e0>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fed6:	4b67      	ldr	r3, [pc, #412]	; (8010074 <tcp_listen_input+0x1e4>)
 800fed8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feda:	885b      	ldrh	r3, [r3, #2]
 800fedc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fede:	4a65      	ldr	r2, [pc, #404]	; (8010074 <tcp_listen_input+0x1e4>)
 800fee0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee2:	8812      	ldrh	r2, [r2, #0]
 800fee4:	b292      	uxth	r2, r2
 800fee6:	9202      	str	r2, [sp, #8]
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	4b63      	ldr	r3, [pc, #396]	; (8010078 <tcp_listen_input+0x1e8>)
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4b63      	ldr	r3, [pc, #396]	; (801007c <tcp_listen_input+0x1ec>)
 800fef0:	4602      	mov	r2, r0
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f003 fbd6 	bl	80136a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fef8:	e0a9      	b.n	801004e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fefa:	4b57      	ldr	r3, [pc, #348]	; (8010058 <tcp_listen_input+0x1c8>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	f003 0302 	and.w	r3, r3, #2
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 80a3 	beq.w	801004e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	7d5b      	ldrb	r3, [r3, #21]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7ff f85b 	bl	800efc8 <tcp_alloc>
 800ff12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d111      	bne.n	800ff3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00a      	beq.n	800ff38 <tcp_listen_input+0xa8>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	6910      	ldr	r0, [r2, #16]
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff2e:	2100      	movs	r1, #0
 800ff30:	4798      	blx	r3
 800ff32:	4603      	mov	r3, r0
 800ff34:	73bb      	strb	r3, [r7, #14]
      return;
 800ff36:	e08b      	b.n	8010050 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff38:	23f0      	movs	r3, #240	; 0xf0
 800ff3a:	73bb      	strb	r3, [r7, #14]
      return;
 800ff3c:	e088      	b.n	8010050 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ff3e:	4b50      	ldr	r3, [pc, #320]	; (8010080 <tcp_listen_input+0x1f0>)
 800ff40:	695a      	ldr	r2, [r3, #20]
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ff46:	4b4e      	ldr	r3, [pc, #312]	; (8010080 <tcp_listen_input+0x1f0>)
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8ada      	ldrh	r2, [r3, #22]
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ff56:	4b47      	ldr	r3, [pc, #284]	; (8010074 <tcp_listen_input+0x1e4>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2203      	movs	r2, #3
 800ff66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ff68:	4b41      	ldr	r3, [pc, #260]	; (8010070 <tcp_listen_input+0x1e0>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ff7a:	6978      	ldr	r0, [r7, #20]
 800ff7c:	f7ff fa5a 	bl	800f434 <tcp_next_iss>
 800ff80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	693a      	ldr	r2, [r7, #16]
 800ff86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	693a      	ldr	r2, [r7, #16]
 800ff8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	693a      	ldr	r2, [r7, #16]
 800ff98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ff9a:	4b35      	ldr	r3, [pc, #212]	; (8010070 <tcp_listen_input+0x1e0>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	1e5a      	subs	r2, r3, #1
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	691a      	ldr	r2, [r3, #16]
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	7a5b      	ldrb	r3, [r3, #9]
 800ffb6:	f003 030c 	and.w	r3, r3, #12
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	7a1a      	ldrb	r2, [r3, #8]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ffc8:	4b2e      	ldr	r3, [pc, #184]	; (8010084 <tcp_listen_input+0x1f4>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	4a2c      	ldr	r2, [pc, #176]	; (8010084 <tcp_listen_input+0x1f4>)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	6013      	str	r3, [r2, #0]
 800ffd6:	f003 fd27 	bl	8013a28 <tcp_timer_needed>
 800ffda:	4b2b      	ldr	r3, [pc, #172]	; (8010088 <tcp_listen_input+0x1f8>)
 800ffdc:	2201      	movs	r2, #1
 800ffde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ffe0:	6978      	ldr	r0, [r7, #20]
 800ffe2:	f001 fd8d 	bl	8011b00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ffe6:	4b23      	ldr	r3, [pc, #140]	; (8010074 <tcp_listen_input+0x1e4>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	89db      	ldrh	r3, [r3, #14]
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	3304      	adds	r3, #4
 8010008:	4618      	mov	r0, r3
 801000a:	f005 f91b 	bl	8015244 <ip4_route>
 801000e:	4601      	mov	r1, r0
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	3304      	adds	r3, #4
 8010014:	461a      	mov	r2, r3
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff fa32 	bl	800f480 <tcp_eff_send_mss_netif>
 801001c:	4603      	mov	r3, r0
 801001e:	461a      	mov	r2, r3
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010024:	2112      	movs	r1, #18
 8010026:	6978      	ldr	r0, [r7, #20]
 8010028:	f002 fc9a 	bl	8012960 <tcp_enqueue_flags>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d004      	beq.n	8010042 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010038:	2100      	movs	r1, #0
 801003a:	6978      	ldr	r0, [r7, #20]
 801003c:	f7fd feda 	bl	800ddf4 <tcp_abandon>
      return;
 8010040:	e006      	b.n	8010050 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010042:	6978      	ldr	r0, [r7, #20]
 8010044:	f002 fd7a 	bl	8012b3c <tcp_output>
  return;
 8010048:	e001      	b.n	801004e <tcp_listen_input+0x1be>
    return;
 801004a:	bf00      	nop
 801004c:	e000      	b.n	8010050 <tcp_listen_input+0x1c0>
  return;
 801004e:	bf00      	nop
}
 8010050:	371c      	adds	r7, #28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd90      	pop	{r4, r7, pc}
 8010056:	bf00      	nop
 8010058:	200083d8 	.word	0x200083d8
 801005c:	0801a324 	.word	0x0801a324
 8010060:	0801a51c 	.word	0x0801a51c
 8010064:	0801a370 	.word	0x0801a370
 8010068:	200083d0 	.word	0x200083d0
 801006c:	200083d6 	.word	0x200083d6
 8010070:	200083cc 	.word	0x200083cc
 8010074:	200083bc 	.word	0x200083bc
 8010078:	200112e4 	.word	0x200112e4
 801007c:	200112e8 	.word	0x200112e8
 8010080:	200112d4 	.word	0x200112d4
 8010084:	20014aa4 	.word	0x20014aa4
 8010088:	20014aa0 	.word	0x20014aa0

0801008c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af04      	add	r7, sp, #16
 8010092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010094:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <tcp_timewait_input+0xc8>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f003 0304 	and.w	r3, r3, #4
 801009c:	2b00      	cmp	r3, #0
 801009e:	d153      	bne.n	8010148 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d106      	bne.n	80100b4 <tcp_timewait_input+0x28>
 80100a6:	4b2c      	ldr	r3, [pc, #176]	; (8010158 <tcp_timewait_input+0xcc>)
 80100a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80100ac:	492b      	ldr	r1, [pc, #172]	; (801015c <tcp_timewait_input+0xd0>)
 80100ae:	482c      	ldr	r0, [pc, #176]	; (8010160 <tcp_timewait_input+0xd4>)
 80100b0:	f006 fd5a 	bl	8016b68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80100b4:	4b27      	ldr	r3, [pc, #156]	; (8010154 <tcp_timewait_input+0xc8>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d02a      	beq.n	8010116 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80100c0:	4b28      	ldr	r3, [pc, #160]	; (8010164 <tcp_timewait_input+0xd8>)
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	db2d      	blt.n	801012a <tcp_timewait_input+0x9e>
 80100ce:	4b25      	ldr	r3, [pc, #148]	; (8010164 <tcp_timewait_input+0xd8>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100da:	440b      	add	r3, r1
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	dc23      	bgt.n	801012a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e2:	4b21      	ldr	r3, [pc, #132]	; (8010168 <tcp_timewait_input+0xdc>)
 80100e4:	6819      	ldr	r1, [r3, #0]
 80100e6:	4b21      	ldr	r3, [pc, #132]	; (801016c <tcp_timewait_input+0xe0>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	461a      	mov	r2, r3
 80100ec:	4b1d      	ldr	r3, [pc, #116]	; (8010164 <tcp_timewait_input+0xd8>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100f2:	4b1f      	ldr	r3, [pc, #124]	; (8010170 <tcp_timewait_input+0xe4>)
 80100f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f6:	885b      	ldrh	r3, [r3, #2]
 80100f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100fa:	4a1d      	ldr	r2, [pc, #116]	; (8010170 <tcp_timewait_input+0xe4>)
 80100fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100fe:	8812      	ldrh	r2, [r2, #0]
 8010100:	b292      	uxth	r2, r2
 8010102:	9202      	str	r2, [sp, #8]
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <tcp_timewait_input+0xe8>)
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	4b1b      	ldr	r3, [pc, #108]	; (8010178 <tcp_timewait_input+0xec>)
 801010c:	4602      	mov	r2, r0
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f003 fac8 	bl	80136a4 <tcp_rst>
      return;
 8010114:	e01b      	b.n	801014e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <tcp_timewait_input+0xc8>)
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	2b00      	cmp	r3, #0
 8010120:	d003      	beq.n	801012a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010122:	4b16      	ldr	r3, [pc, #88]	; (801017c <tcp_timewait_input+0xf0>)
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <tcp_timewait_input+0xe0>)
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00c      	beq.n	801014c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	8b5b      	ldrh	r3, [r3, #26]
 8010136:	f043 0302 	orr.w	r3, r3, #2
 801013a:	b29a      	uxth	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f002 fcfb 	bl	8012b3c <tcp_output>
  }
  return;
 8010146:	e001      	b.n	801014c <tcp_timewait_input+0xc0>
    return;
 8010148:	bf00      	nop
 801014a:	e000      	b.n	801014e <tcp_timewait_input+0xc2>
  return;
 801014c:	bf00      	nop
}
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	200083d8 	.word	0x200083d8
 8010158:	0801a324 	.word	0x0801a324
 801015c:	0801a53c 	.word	0x0801a53c
 8010160:	0801a370 	.word	0x0801a370
 8010164:	200083cc 	.word	0x200083cc
 8010168:	200083d0 	.word	0x200083d0
 801016c:	200083d6 	.word	0x200083d6
 8010170:	200083bc 	.word	0x200083bc
 8010174:	200112e4 	.word	0x200112e4
 8010178:	200112e8 	.word	0x200112e8
 801017c:	20014aa8 	.word	0x20014aa8

08010180 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b08d      	sub	sp, #52	; 0x34
 8010184:	af04      	add	r7, sp, #16
 8010186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <tcp_process+0x24>
 8010196:	4ba5      	ldr	r3, [pc, #660]	; (801042c <tcp_process+0x2ac>)
 8010198:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801019c:	49a4      	ldr	r1, [pc, #656]	; (8010430 <tcp_process+0x2b0>)
 801019e:	48a5      	ldr	r0, [pc, #660]	; (8010434 <tcp_process+0x2b4>)
 80101a0:	f006 fce2 	bl	8016b68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80101a4:	4ba4      	ldr	r3, [pc, #656]	; (8010438 <tcp_process+0x2b8>)
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d04e      	beq.n	801024e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	7d1b      	ldrb	r3, [r3, #20]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d108      	bne.n	80101ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101bc:	4b9f      	ldr	r3, [pc, #636]	; (801043c <tcp_process+0x2bc>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d123      	bne.n	801020c <tcp_process+0x8c>
        acceptable = 1;
 80101c4:	2301      	movs	r3, #1
 80101c6:	76fb      	strb	r3, [r7, #27]
 80101c8:	e020      	b.n	801020c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ce:	4b9c      	ldr	r3, [pc, #624]	; (8010440 <tcp_process+0x2c0>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d102      	bne.n	80101dc <tcp_process+0x5c>
        acceptable = 1;
 80101d6:	2301      	movs	r3, #1
 80101d8:	76fb      	strb	r3, [r7, #27]
 80101da:	e017      	b.n	801020c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101dc:	4b98      	ldr	r3, [pc, #608]	; (8010440 <tcp_process+0x2c0>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db10      	blt.n	801020c <tcp_process+0x8c>
 80101ea:	4b95      	ldr	r3, [pc, #596]	; (8010440 <tcp_process+0x2c0>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101f6:	440b      	add	r3, r1
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dc06      	bgt.n	801020c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	8b5b      	ldrh	r3, [r3, #26]
 8010202:	f043 0302 	orr.w	r3, r3, #2
 8010206:	b29a      	uxth	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801020c:	7efb      	ldrb	r3, [r7, #27]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01b      	beq.n	801024a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	7d1b      	ldrb	r3, [r3, #20]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d106      	bne.n	8010228 <tcp_process+0xa8>
 801021a:	4b84      	ldr	r3, [pc, #528]	; (801042c <tcp_process+0x2ac>)
 801021c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010220:	4988      	ldr	r1, [pc, #544]	; (8010444 <tcp_process+0x2c4>)
 8010222:	4884      	ldr	r0, [pc, #528]	; (8010434 <tcp_process+0x2b4>)
 8010224:	f006 fca0 	bl	8016b68 <iprintf>
      recv_flags |= TF_RESET;
 8010228:	4b87      	ldr	r3, [pc, #540]	; (8010448 <tcp_process+0x2c8>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f043 0308 	orr.w	r3, r3, #8
 8010230:	b2da      	uxtb	r2, r3
 8010232:	4b85      	ldr	r3, [pc, #532]	; (8010448 <tcp_process+0x2c8>)
 8010234:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8b5b      	ldrh	r3, [r3, #26]
 801023a:	f023 0301 	bic.w	r3, r3, #1
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010244:	f06f 030d 	mvn.w	r3, #13
 8010248:	e37a      	b.n	8010940 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	e378      	b.n	8010940 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801024e:	4b7a      	ldr	r3, [pc, #488]	; (8010438 <tcp_process+0x2b8>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	f003 0302 	and.w	r3, r3, #2
 8010256:	2b00      	cmp	r3, #0
 8010258:	d010      	beq.n	801027c <tcp_process+0xfc>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	7d1b      	ldrb	r3, [r3, #20]
 801025e:	2b02      	cmp	r3, #2
 8010260:	d00c      	beq.n	801027c <tcp_process+0xfc>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	7d1b      	ldrb	r3, [r3, #20]
 8010266:	2b03      	cmp	r3, #3
 8010268:	d008      	beq.n	801027c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	8b5b      	ldrh	r3, [r3, #26]
 801026e:	f043 0302 	orr.w	r3, r3, #2
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	e361      	b.n	8010940 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f003 0310 	and.w	r3, r3, #16
 8010284:	2b00      	cmp	r3, #0
 8010286:	d103      	bne.n	8010290 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010288:	4b70      	ldr	r3, [pc, #448]	; (801044c <tcp_process+0x2cc>)
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f001 fc2d 	bl	8011b00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7d1b      	ldrb	r3, [r3, #20]
 80102aa:	3b02      	subs	r3, #2
 80102ac:	2b07      	cmp	r3, #7
 80102ae:	f200 8337 	bhi.w	8010920 <tcp_process+0x7a0>
 80102b2:	a201      	add	r2, pc, #4	; (adr r2, 80102b8 <tcp_process+0x138>)
 80102b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b8:	080102d9 	.word	0x080102d9
 80102bc:	08010509 	.word	0x08010509
 80102c0:	08010681 	.word	0x08010681
 80102c4:	080106ab 	.word	0x080106ab
 80102c8:	080107cf 	.word	0x080107cf
 80102cc:	08010681 	.word	0x08010681
 80102d0:	0801085b 	.word	0x0801085b
 80102d4:	080108eb 	.word	0x080108eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80102d8:	4b57      	ldr	r3, [pc, #348]	; (8010438 <tcp_process+0x2b8>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f003 0310 	and.w	r3, r3, #16
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 80e4 	beq.w	80104ae <tcp_process+0x32e>
 80102e6:	4b54      	ldr	r3, [pc, #336]	; (8010438 <tcp_process+0x2b8>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f000 80dd 	beq.w	80104ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	4b50      	ldr	r3, [pc, #320]	; (801043c <tcp_process+0x2bc>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	f040 80d5 	bne.w	80104ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010304:	4b4e      	ldr	r3, [pc, #312]	; (8010440 <tcp_process+0x2c0>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	1c5a      	adds	r2, r3, #1
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010316:	4b49      	ldr	r3, [pc, #292]	; (801043c <tcp_process+0x2bc>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801031e:	4b4c      	ldr	r3, [pc, #304]	; (8010450 <tcp_process+0x2d0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	89db      	ldrh	r3, [r3, #14]
 8010324:	b29a      	uxth	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010338:	4b41      	ldr	r3, [pc, #260]	; (8010440 <tcp_process+0x2c0>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	1e5a      	subs	r2, r3, #1
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2204      	movs	r2, #4
 8010346:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3304      	adds	r3, #4
 8010350:	4618      	mov	r0, r3
 8010352:	f004 ff77 	bl	8015244 <ip4_route>
 8010356:	4601      	mov	r1, r0
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3304      	adds	r3, #4
 801035c:	461a      	mov	r2, r3
 801035e:	4620      	mov	r0, r4
 8010360:	f7ff f88e 	bl	800f480 <tcp_eff_send_mss_netif>
 8010364:	4603      	mov	r3, r0
 8010366:	461a      	mov	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010370:	009a      	lsls	r2, r3, #2
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	f241 111c 	movw	r1, #4380	; 0x111c
 801037c:	428b      	cmp	r3, r1
 801037e:	bf38      	it	cc
 8010380:	460b      	movcc	r3, r1
 8010382:	429a      	cmp	r2, r3
 8010384:	d204      	bcs.n	8010390 <tcp_process+0x210>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	b29b      	uxth	r3, r3
 801038e:	e00d      	b.n	80103ac <tcp_process+0x22c>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	f241 121c 	movw	r2, #4380	; 0x111c
 801039a:	4293      	cmp	r3, r2
 801039c:	d904      	bls.n	80103a8 <tcp_process+0x228>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a2:	005b      	lsls	r3, r3, #1
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	e001      	b.n	80103ac <tcp_process+0x22c>
 80103a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <tcp_process+0x24a>
 80103bc:	4b1b      	ldr	r3, [pc, #108]	; (801042c <tcp_process+0x2ac>)
 80103be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80103c2:	4924      	ldr	r1, [pc, #144]	; (8010454 <tcp_process+0x2d4>)
 80103c4:	481b      	ldr	r0, [pc, #108]	; (8010434 <tcp_process+0x2b4>)
 80103c6:	f006 fbcf 	bl	8016b68 <iprintf>
        --pcb->snd_queuelen;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103d0:	3b01      	subs	r3, #1
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d111      	bne.n	801040a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <tcp_process+0x280>
 80103f2:	4b0e      	ldr	r3, [pc, #56]	; (801042c <tcp_process+0x2ac>)
 80103f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80103f8:	4917      	ldr	r1, [pc, #92]	; (8010458 <tcp_process+0x2d8>)
 80103fa:	480e      	ldr	r0, [pc, #56]	; (8010434 <tcp_process+0x2b4>)
 80103fc:	f006 fbb4 	bl	8016b68 <iprintf>
          pcb->unsent = rseg->next;
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	66da      	str	r2, [r3, #108]	; 0x6c
 8010408:	e003      	b.n	8010412 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010412:	69f8      	ldr	r0, [r7, #28]
 8010414:	f7fe fc51 	bl	800ecba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041c:	2b00      	cmp	r3, #0
 801041e:	d11d      	bne.n	801045c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010426:	861a      	strh	r2, [r3, #48]	; 0x30
 8010428:	e01f      	b.n	801046a <tcp_process+0x2ea>
 801042a:	bf00      	nop
 801042c:	0801a324 	.word	0x0801a324
 8010430:	0801a55c 	.word	0x0801a55c
 8010434:	0801a370 	.word	0x0801a370
 8010438:	200083d8 	.word	0x200083d8
 801043c:	200083d0 	.word	0x200083d0
 8010440:	200083cc 	.word	0x200083cc
 8010444:	0801a578 	.word	0x0801a578
 8010448:	200083d9 	.word	0x200083d9
 801044c:	20014aa8 	.word	0x20014aa8
 8010450:	200083bc 	.word	0x200083bc
 8010454:	0801a598 	.word	0x0801a598
 8010458:	0801a5b0 	.word	0x0801a5b0
        } else {
          pcb->rtime = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00a      	beq.n	801048a <tcp_process+0x30a>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	6910      	ldr	r0, [r2, #16]
 801047e:	2200      	movs	r2, #0
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	4798      	blx	r3
 8010484:	4603      	mov	r3, r0
 8010486:	76bb      	strb	r3, [r7, #26]
 8010488:	e001      	b.n	801048e <tcp_process+0x30e>
 801048a:	2300      	movs	r3, #0
 801048c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801048e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010492:	f113 0f0d 	cmn.w	r3, #13
 8010496:	d102      	bne.n	801049e <tcp_process+0x31e>
          return ERR_ABRT;
 8010498:	f06f 030c 	mvn.w	r3, #12
 801049c:	e250      	b.n	8010940 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8b5b      	ldrh	r3, [r3, #26]
 80104a2:	f043 0302 	orr.w	r3, r3, #2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80104ac:	e23a      	b.n	8010924 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80104ae:	4b9d      	ldr	r3, [pc, #628]	; (8010724 <tcp_process+0x5a4>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f003 0310 	and.w	r3, r3, #16
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 8234 	beq.w	8010924 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104bc:	4b9a      	ldr	r3, [pc, #616]	; (8010728 <tcp_process+0x5a8>)
 80104be:	6819      	ldr	r1, [r3, #0]
 80104c0:	4b9a      	ldr	r3, [pc, #616]	; (801072c <tcp_process+0x5ac>)
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	4b9a      	ldr	r3, [pc, #616]	; (8010730 <tcp_process+0x5b0>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104cc:	4b99      	ldr	r3, [pc, #612]	; (8010734 <tcp_process+0x5b4>)
 80104ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d0:	885b      	ldrh	r3, [r3, #2]
 80104d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104d4:	4a97      	ldr	r2, [pc, #604]	; (8010734 <tcp_process+0x5b4>)
 80104d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d8:	8812      	ldrh	r2, [r2, #0]
 80104da:	b292      	uxth	r2, r2
 80104dc:	9202      	str	r2, [sp, #8]
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	4b95      	ldr	r3, [pc, #596]	; (8010738 <tcp_process+0x5b8>)
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4b95      	ldr	r3, [pc, #596]	; (801073c <tcp_process+0x5bc>)
 80104e6:	4602      	mov	r2, r0
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f003 f8db 	bl	80136a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104f4:	2b05      	cmp	r3, #5
 80104f6:	f200 8215 	bhi.w	8010924 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f002 fea5 	bl	8013250 <tcp_rexmit_rto>
      break;
 8010506:	e20d      	b.n	8010924 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010508:	4b86      	ldr	r3, [pc, #536]	; (8010724 <tcp_process+0x5a4>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0310 	and.w	r3, r3, #16
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80a1 	beq.w	8010658 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010516:	4b84      	ldr	r3, [pc, #528]	; (8010728 <tcp_process+0x5a8>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	3b01      	subs	r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	db7e      	blt.n	8010624 <tcp_process+0x4a4>
 8010526:	4b80      	ldr	r3, [pc, #512]	; (8010728 <tcp_process+0x5a8>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	dc77      	bgt.n	8010624 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2204      	movs	r2, #4
 8010538:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d102      	bne.n	8010548 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010542:	23fa      	movs	r3, #250	; 0xfa
 8010544:	76bb      	strb	r3, [r7, #26]
 8010546:	e01d      	b.n	8010584 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801054c:	699b      	ldr	r3, [r3, #24]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_process+0x3e0>
 8010552:	4b7b      	ldr	r3, [pc, #492]	; (8010740 <tcp_process+0x5c0>)
 8010554:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010558:	497a      	ldr	r1, [pc, #488]	; (8010744 <tcp_process+0x5c4>)
 801055a:	487b      	ldr	r0, [pc, #492]	; (8010748 <tcp_process+0x5c8>)
 801055c:	f006 fb04 	bl	8016b68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010564:	699b      	ldr	r3, [r3, #24]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <tcp_process+0x400>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	6910      	ldr	r0, [r2, #16]
 8010574:	2200      	movs	r2, #0
 8010576:	6879      	ldr	r1, [r7, #4]
 8010578:	4798      	blx	r3
 801057a:	4603      	mov	r3, r0
 801057c:	76bb      	strb	r3, [r7, #26]
 801057e:	e001      	b.n	8010584 <tcp_process+0x404>
 8010580:	23f0      	movs	r3, #240	; 0xf0
 8010582:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010584:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801058c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010590:	f113 0f0d 	cmn.w	r3, #13
 8010594:	d002      	beq.n	801059c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7fd fcea 	bl	800df70 <tcp_abort>
            }
            return ERR_ABRT;
 801059c:	f06f 030c 	mvn.w	r3, #12
 80105a0:	e1ce      	b.n	8010940 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fae0 	bl	8010b68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80105a8:	4b68      	ldr	r3, [pc, #416]	; (801074c <tcp_process+0x5cc>)
 80105aa:	881b      	ldrh	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <tcp_process+0x43c>
            recv_acked--;
 80105b0:	4b66      	ldr	r3, [pc, #408]	; (801074c <tcp_process+0x5cc>)
 80105b2:	881b      	ldrh	r3, [r3, #0]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	4b64      	ldr	r3, [pc, #400]	; (801074c <tcp_process+0x5cc>)
 80105ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105c0:	009a      	lsls	r2, r3, #2
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80105cc:	428b      	cmp	r3, r1
 80105ce:	bf38      	it	cc
 80105d0:	460b      	movcc	r3, r1
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d204      	bcs.n	80105e0 <tcp_process+0x460>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	b29b      	uxth	r3, r3
 80105de:	e00d      	b.n	80105fc <tcp_process+0x47c>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d904      	bls.n	80105f8 <tcp_process+0x478>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	e001      	b.n	80105fc <tcp_process+0x47c>
 80105f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010602:	4b53      	ldr	r3, [pc, #332]	; (8010750 <tcp_process+0x5d0>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	f003 0320 	and.w	r3, r3, #32
 801060a:	2b00      	cmp	r3, #0
 801060c:	d037      	beq.n	801067e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	8b5b      	ldrh	r3, [r3, #26]
 8010612:	f043 0302 	orr.w	r3, r3, #2
 8010616:	b29a      	uxth	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2207      	movs	r2, #7
 8010620:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010622:	e02c      	b.n	801067e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010624:	4b40      	ldr	r3, [pc, #256]	; (8010728 <tcp_process+0x5a8>)
 8010626:	6819      	ldr	r1, [r3, #0]
 8010628:	4b40      	ldr	r3, [pc, #256]	; (801072c <tcp_process+0x5ac>)
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	461a      	mov	r2, r3
 801062e:	4b40      	ldr	r3, [pc, #256]	; (8010730 <tcp_process+0x5b0>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010634:	4b3f      	ldr	r3, [pc, #252]	; (8010734 <tcp_process+0x5b4>)
 8010636:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010638:	885b      	ldrh	r3, [r3, #2]
 801063a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801063c:	4a3d      	ldr	r2, [pc, #244]	; (8010734 <tcp_process+0x5b4>)
 801063e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010640:	8812      	ldrh	r2, [r2, #0]
 8010642:	b292      	uxth	r2, r2
 8010644:	9202      	str	r2, [sp, #8]
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	4b3b      	ldr	r3, [pc, #236]	; (8010738 <tcp_process+0x5b8>)
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	4b3b      	ldr	r3, [pc, #236]	; (801073c <tcp_process+0x5bc>)
 801064e:	4602      	mov	r2, r0
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f003 f827 	bl	80136a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010656:	e167      	b.n	8010928 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010658:	4b32      	ldr	r3, [pc, #200]	; (8010724 <tcp_process+0x5a4>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	f003 0302 	and.w	r3, r3, #2
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 8161 	beq.w	8010928 <tcp_process+0x7a8>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066a:	1e5a      	subs	r2, r3, #1
 801066c:	4b30      	ldr	r3, [pc, #192]	; (8010730 <tcp_process+0x5b0>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	429a      	cmp	r2, r3
 8010672:	f040 8159 	bne.w	8010928 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f002 fe0c 	bl	8013294 <tcp_rexmit>
      break;
 801067c:	e154      	b.n	8010928 <tcp_process+0x7a8>
 801067e:	e153      	b.n	8010928 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fa71 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010686:	4b32      	ldr	r3, [pc, #200]	; (8010750 <tcp_process+0x5d0>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	f003 0320 	and.w	r3, r3, #32
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 814c 	beq.w	801092c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8b5b      	ldrh	r3, [r3, #26]
 8010698:	f043 0302 	orr.w	r3, r3, #2
 801069c:	b29a      	uxth	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2207      	movs	r2, #7
 80106a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80106a8:	e140      	b.n	801092c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 fa5c 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106b0:	4b27      	ldr	r3, [pc, #156]	; (8010750 <tcp_process+0x5d0>)
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	f003 0320 	and.w	r3, r3, #32
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d071      	beq.n	80107a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106bc:	4b19      	ldr	r3, [pc, #100]	; (8010724 <tcp_process+0x5a4>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	f003 0310 	and.w	r3, r3, #16
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d060      	beq.n	801078a <tcp_process+0x60a>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106cc:	4b16      	ldr	r3, [pc, #88]	; (8010728 <tcp_process+0x5a8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d15a      	bne.n	801078a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d156      	bne.n	801078a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8b5b      	ldrh	r3, [r3, #26]
 80106e0:	f043 0302 	orr.w	r3, r3, #2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7fe fdbe 	bl	800f26c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80106f0:	4b18      	ldr	r3, [pc, #96]	; (8010754 <tcp_process+0x5d4>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d105      	bne.n	8010706 <tcp_process+0x586>
 80106fa:	4b16      	ldr	r3, [pc, #88]	; (8010754 <tcp_process+0x5d4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	4a14      	ldr	r2, [pc, #80]	; (8010754 <tcp_process+0x5d4>)
 8010702:	6013      	str	r3, [r2, #0]
 8010704:	e02e      	b.n	8010764 <tcp_process+0x5e4>
 8010706:	4b13      	ldr	r3, [pc, #76]	; (8010754 <tcp_process+0x5d4>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	617b      	str	r3, [r7, #20]
 801070c:	e027      	b.n	801075e <tcp_process+0x5de>
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d11f      	bne.n	8010758 <tcp_process+0x5d8>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	68da      	ldr	r2, [r3, #12]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	60da      	str	r2, [r3, #12]
 8010720:	e020      	b.n	8010764 <tcp_process+0x5e4>
 8010722:	bf00      	nop
 8010724:	200083d8 	.word	0x200083d8
 8010728:	200083d0 	.word	0x200083d0
 801072c:	200083d6 	.word	0x200083d6
 8010730:	200083cc 	.word	0x200083cc
 8010734:	200083bc 	.word	0x200083bc
 8010738:	200112e4 	.word	0x200112e4
 801073c:	200112e8 	.word	0x200112e8
 8010740:	0801a324 	.word	0x0801a324
 8010744:	0801a5c4 	.word	0x0801a5c4
 8010748:	0801a370 	.word	0x0801a370
 801074c:	200083d4 	.word	0x200083d4
 8010750:	200083d9 	.word	0x200083d9
 8010754:	20014aa4 	.word	0x20014aa4
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1d4      	bne.n	801070e <tcp_process+0x58e>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	60da      	str	r2, [r3, #12]
 801076a:	4b77      	ldr	r3, [pc, #476]	; (8010948 <tcp_process+0x7c8>)
 801076c:	2201      	movs	r2, #1
 801076e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	220a      	movs	r2, #10
 8010774:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010776:	4b75      	ldr	r3, [pc, #468]	; (801094c <tcp_process+0x7cc>)
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	60da      	str	r2, [r3, #12]
 801077e:	4a73      	ldr	r2, [pc, #460]	; (801094c <tcp_process+0x7cc>)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	f003 f950 	bl	8013a28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010788:	e0d2      	b.n	8010930 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8b5b      	ldrh	r3, [r3, #26]
 801078e:	f043 0302 	orr.w	r3, r3, #2
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2208      	movs	r2, #8
 801079c:	751a      	strb	r2, [r3, #20]
      break;
 801079e:	e0c7      	b.n	8010930 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107a0:	4b6b      	ldr	r3, [pc, #428]	; (8010950 <tcp_process+0x7d0>)
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	f003 0310 	and.w	r3, r3, #16
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 80c1 	beq.w	8010930 <tcp_process+0x7b0>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107b2:	4b68      	ldr	r3, [pc, #416]	; (8010954 <tcp_process+0x7d4>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	f040 80ba 	bne.w	8010930 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f040 80b5 	bne.w	8010930 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2206      	movs	r2, #6
 80107ca:	751a      	strb	r2, [r3, #20]
      break;
 80107cc:	e0b0      	b.n	8010930 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9ca 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107d4:	4b60      	ldr	r3, [pc, #384]	; (8010958 <tcp_process+0x7d8>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 80a9 	beq.w	8010934 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8b5b      	ldrh	r3, [r3, #26]
 80107e6:	f043 0302 	orr.w	r3, r3, #2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7fe fd3b 	bl	800f26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107f6:	4b59      	ldr	r3, [pc, #356]	; (801095c <tcp_process+0x7dc>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d105      	bne.n	801080c <tcp_process+0x68c>
 8010800:	4b56      	ldr	r3, [pc, #344]	; (801095c <tcp_process+0x7dc>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	4a55      	ldr	r2, [pc, #340]	; (801095c <tcp_process+0x7dc>)
 8010808:	6013      	str	r3, [r2, #0]
 801080a:	e013      	b.n	8010834 <tcp_process+0x6b4>
 801080c:	4b53      	ldr	r3, [pc, #332]	; (801095c <tcp_process+0x7dc>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	613b      	str	r3, [r7, #16]
 8010812:	e00c      	b.n	801082e <tcp_process+0x6ae>
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	429a      	cmp	r2, r3
 801081c:	d104      	bne.n	8010828 <tcp_process+0x6a8>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	68da      	ldr	r2, [r3, #12]
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	60da      	str	r2, [r3, #12]
 8010826:	e005      	b.n	8010834 <tcp_process+0x6b4>
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	613b      	str	r3, [r7, #16]
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1ef      	bne.n	8010814 <tcp_process+0x694>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	4b43      	ldr	r3, [pc, #268]	; (8010948 <tcp_process+0x7c8>)
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	220a      	movs	r2, #10
 8010844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010846:	4b41      	ldr	r3, [pc, #260]	; (801094c <tcp_process+0x7cc>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	60da      	str	r2, [r3, #12]
 801084e:	4a3f      	ldr	r2, [pc, #252]	; (801094c <tcp_process+0x7cc>)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6013      	str	r3, [r2, #0]
 8010854:	f003 f8e8 	bl	8013a28 <tcp_timer_needed>
      }
      break;
 8010858:	e06c      	b.n	8010934 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 f984 	bl	8010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010860:	4b3b      	ldr	r3, [pc, #236]	; (8010950 <tcp_process+0x7d0>)
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f003 0310 	and.w	r3, r3, #16
 8010868:	2b00      	cmp	r3, #0
 801086a:	d065      	beq.n	8010938 <tcp_process+0x7b8>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010870:	4b38      	ldr	r3, [pc, #224]	; (8010954 <tcp_process+0x7d4>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	429a      	cmp	r2, r3
 8010876:	d15f      	bne.n	8010938 <tcp_process+0x7b8>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d15b      	bne.n	8010938 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7fe fcf3 	bl	800f26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010886:	4b35      	ldr	r3, [pc, #212]	; (801095c <tcp_process+0x7dc>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	429a      	cmp	r2, r3
 801088e:	d105      	bne.n	801089c <tcp_process+0x71c>
 8010890:	4b32      	ldr	r3, [pc, #200]	; (801095c <tcp_process+0x7dc>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	4a31      	ldr	r2, [pc, #196]	; (801095c <tcp_process+0x7dc>)
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	e013      	b.n	80108c4 <tcp_process+0x744>
 801089c:	4b2f      	ldr	r3, [pc, #188]	; (801095c <tcp_process+0x7dc>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60fb      	str	r3, [r7, #12]
 80108a2:	e00c      	b.n	80108be <tcp_process+0x73e>
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d104      	bne.n	80108b8 <tcp_process+0x738>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68da      	ldr	r2, [r3, #12]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	e005      	b.n	80108c4 <tcp_process+0x744>
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1ef      	bne.n	80108a4 <tcp_process+0x724>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	60da      	str	r2, [r3, #12]
 80108ca:	4b1f      	ldr	r3, [pc, #124]	; (8010948 <tcp_process+0x7c8>)
 80108cc:	2201      	movs	r2, #1
 80108ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	220a      	movs	r2, #10
 80108d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80108d6:	4b1d      	ldr	r3, [pc, #116]	; (801094c <tcp_process+0x7cc>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	60da      	str	r2, [r3, #12]
 80108de:	4a1b      	ldr	r2, [pc, #108]	; (801094c <tcp_process+0x7cc>)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6013      	str	r3, [r2, #0]
 80108e4:	f003 f8a0 	bl	8013a28 <tcp_timer_needed>
      }
      break;
 80108e8:	e026      	b.n	8010938 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f93c 	bl	8010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80108f0:	4b17      	ldr	r3, [pc, #92]	; (8010950 <tcp_process+0x7d0>)
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	f003 0310 	and.w	r3, r3, #16
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d01f      	beq.n	801093c <tcp_process+0x7bc>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010900:	4b14      	ldr	r3, [pc, #80]	; (8010954 <tcp_process+0x7d4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	429a      	cmp	r2, r3
 8010906:	d119      	bne.n	801093c <tcp_process+0x7bc>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801090c:	2b00      	cmp	r3, #0
 801090e:	d115      	bne.n	801093c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010910:	4b11      	ldr	r3, [pc, #68]	; (8010958 <tcp_process+0x7d8>)
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	f043 0310 	orr.w	r3, r3, #16
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <tcp_process+0x7d8>)
 801091c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801091e:	e00d      	b.n	801093c <tcp_process+0x7bc>
    default:
      break;
 8010920:	bf00      	nop
 8010922:	e00c      	b.n	801093e <tcp_process+0x7be>
      break;
 8010924:	bf00      	nop
 8010926:	e00a      	b.n	801093e <tcp_process+0x7be>
      break;
 8010928:	bf00      	nop
 801092a:	e008      	b.n	801093e <tcp_process+0x7be>
      break;
 801092c:	bf00      	nop
 801092e:	e006      	b.n	801093e <tcp_process+0x7be>
      break;
 8010930:	bf00      	nop
 8010932:	e004      	b.n	801093e <tcp_process+0x7be>
      break;
 8010934:	bf00      	nop
 8010936:	e002      	b.n	801093e <tcp_process+0x7be>
      break;
 8010938:	bf00      	nop
 801093a:	e000      	b.n	801093e <tcp_process+0x7be>
      break;
 801093c:	bf00      	nop
  }
  return ERR_OK;
 801093e:	2300      	movs	r3, #0
}
 8010940:	4618      	mov	r0, r3
 8010942:	3724      	adds	r7, #36	; 0x24
 8010944:	46bd      	mov	sp, r7
 8010946:	bd90      	pop	{r4, r7, pc}
 8010948:	20014aa0 	.word	0x20014aa0
 801094c:	20014ab4 	.word	0x20014ab4
 8010950:	200083d8 	.word	0x200083d8
 8010954:	200083d0 	.word	0x200083d0
 8010958:	200083d9 	.word	0x200083d9
 801095c:	20014aa4 	.word	0x20014aa4

08010960 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010960:	b590      	push	{r4, r7, lr}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d106      	bne.n	801097e <tcp_oos_insert_segment+0x1e>
 8010970:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <tcp_oos_insert_segment+0x100>)
 8010972:	f240 421f 	movw	r2, #1055	; 0x41f
 8010976:	493b      	ldr	r1, [pc, #236]	; (8010a64 <tcp_oos_insert_segment+0x104>)
 8010978:	483b      	ldr	r0, [pc, #236]	; (8010a68 <tcp_oos_insert_segment+0x108>)
 801097a:	f006 f8f5 	bl	8016b68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	899b      	ldrh	r3, [r3, #12]
 8010984:	b29b      	uxth	r3, r3
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb f8d4 	bl	800bb34 <lwip_htons>
 801098c:	4603      	mov	r3, r0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d028      	beq.n	80109ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010998:	6838      	ldr	r0, [r7, #0]
 801099a:	f7fe f979 	bl	800ec90 <tcp_segs_free>
    next = NULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	603b      	str	r3, [r7, #0]
 80109a2:	e056      	b.n	8010a52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	899b      	ldrh	r3, [r3, #12]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fb f8c1 	bl	800bb34 <lwip_htons>
 80109b2:	4603      	mov	r3, r0
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	f003 0301 	and.w	r3, r3, #1
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00d      	beq.n	80109da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	899b      	ldrh	r3, [r3, #12]
 80109c4:	b29c      	uxth	r4, r3
 80109c6:	2001      	movs	r0, #1
 80109c8:	f7fb f8b4 	bl	800bb34 <lwip_htons>
 80109cc:	4603      	mov	r3, r0
 80109ce:	461a      	mov	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	4322      	orrs	r2, r4
 80109d6:	b292      	uxth	r2, r2
 80109d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7fe f968 	bl	800ecba <tcp_seg_free>
    while (next &&
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00e      	beq.n	8010a0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	891b      	ldrh	r3, [r3, #8]
 80109f4:	461a      	mov	r2, r3
 80109f6:	4b1d      	ldr	r3, [pc, #116]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	441a      	add	r2, r3
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	8909      	ldrh	r1, [r1, #8]
 8010a06:	440b      	add	r3, r1
 8010a08:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	daca      	bge.n	80109a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01e      	beq.n	8010a52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	891b      	ldrh	r3, [r3, #8]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4b14      	ldr	r3, [pc, #80]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	441a      	add	r2, r3
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	dd12      	ble.n	8010a52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	4b0d      	ldr	r3, [pc, #52]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	891b      	ldrh	r3, [r3, #8]
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	f7fc fb75 	bl	800d13c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	601a      	str	r2, [r3, #0]
}
 8010a58:	bf00      	nop
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd90      	pop	{r4, r7, pc}
 8010a60:	0801a324 	.word	0x0801a324
 8010a64:	0801a5e4 	.word	0x0801a5e4
 8010a68:	0801a370 	.word	0x0801a370
 8010a6c:	200083cc 	.word	0x200083cc

08010a70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010a70:	b5b0      	push	{r4, r5, r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010a7e:	e03e      	b.n	8010afe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fc fd68 	bl	800d564 <pbuf_clen>
 8010a94:	4603      	mov	r3, r0
 8010a96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a9e:	8a7a      	ldrh	r2, [r7, #18]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d906      	bls.n	8010ab2 <tcp_free_acked_segments+0x42>
 8010aa4:	4b2a      	ldr	r3, [pc, #168]	; (8010b50 <tcp_free_acked_segments+0xe0>)
 8010aa6:	f240 4257 	movw	r2, #1111	; 0x457
 8010aaa:	492a      	ldr	r1, [pc, #168]	; (8010b54 <tcp_free_acked_segments+0xe4>)
 8010aac:	482a      	ldr	r0, [pc, #168]	; (8010b58 <tcp_free_acked_segments+0xe8>)
 8010aae:	f006 f85b 	bl	8016b68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010ab8:	8a7b      	ldrh	r3, [r7, #18]
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	891a      	ldrh	r2, [r3, #8]
 8010ac8:	4b24      	ldr	r3, [pc, #144]	; (8010b5c <tcp_free_acked_segments+0xec>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	4413      	add	r3, r2
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	4b22      	ldr	r3, [pc, #136]	; (8010b5c <tcp_free_acked_segments+0xec>)
 8010ad2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ad4:	6978      	ldr	r0, [r7, #20]
 8010ad6:	f7fe f8f0 	bl	800ecba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00c      	beq.n	8010afe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d109      	bne.n	8010afe <tcp_free_acked_segments+0x8e>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <tcp_free_acked_segments+0x8e>
 8010af0:	4b17      	ldr	r3, [pc, #92]	; (8010b50 <tcp_free_acked_segments+0xe0>)
 8010af2:	f240 4261 	movw	r2, #1121	; 0x461
 8010af6:	491a      	ldr	r1, [pc, #104]	; (8010b60 <tcp_free_acked_segments+0xf0>)
 8010af8:	4817      	ldr	r0, [pc, #92]	; (8010b58 <tcp_free_acked_segments+0xe8>)
 8010afa:	f006 f835 	bl	8016b68 <iprintf>
  while (seg_list != NULL &&
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d020      	beq.n	8010b46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fb f827 	bl	800bb5e <lwip_htonl>
 8010b10:	4604      	mov	r4, r0
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	891b      	ldrh	r3, [r3, #8]
 8010b16:	461d      	mov	r5, r3
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fb f807 	bl	800bb34 <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	f003 0303 	and.w	r3, r3, #3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <tcp_free_acked_segments+0xc6>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <tcp_free_acked_segments+0xc8>
 8010b36:	2300      	movs	r3, #0
 8010b38:	442b      	add	r3, r5
 8010b3a:	18e2      	adds	r2, r4, r3
 8010b3c:	4b09      	ldr	r3, [pc, #36]	; (8010b64 <tcp_free_acked_segments+0xf4>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dd9c      	ble.n	8010a80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010b46:	68bb      	ldr	r3, [r7, #8]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3718      	adds	r7, #24
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b50:	0801a324 	.word	0x0801a324
 8010b54:	0801a60c 	.word	0x0801a60c
 8010b58:	0801a370 	.word	0x0801a370
 8010b5c:	200083d4 	.word	0x200083d4
 8010b60:	0801a634 	.word	0x0801a634
 8010b64:	200083d0 	.word	0x200083d0

08010b68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010b68:	b5b0      	push	{r4, r5, r7, lr}
 8010b6a:	b094      	sub	sp, #80	; 0x50
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_receive+0x20>
 8010b7a:	4ba6      	ldr	r3, [pc, #664]	; (8010e14 <tcp_receive+0x2ac>)
 8010b7c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010b80:	49a5      	ldr	r1, [pc, #660]	; (8010e18 <tcp_receive+0x2b0>)
 8010b82:	48a6      	ldr	r0, [pc, #664]	; (8010e1c <tcp_receive+0x2b4>)
 8010b84:	f005 fff0 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7d1b      	ldrb	r3, [r3, #20]
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d806      	bhi.n	8010b9e <tcp_receive+0x36>
 8010b90:	4ba0      	ldr	r3, [pc, #640]	; (8010e14 <tcp_receive+0x2ac>)
 8010b92:	f240 427c 	movw	r2, #1148	; 0x47c
 8010b96:	49a2      	ldr	r1, [pc, #648]	; (8010e20 <tcp_receive+0x2b8>)
 8010b98:	48a0      	ldr	r0, [pc, #640]	; (8010e1c <tcp_receive+0x2b4>)
 8010b9a:	f005 ffe5 	bl	8016b68 <iprintf>

  if (flags & TCP_ACK) {
 8010b9e:	4ba1      	ldr	r3, [pc, #644]	; (8010e24 <tcp_receive+0x2bc>)
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	f003 0310 	and.w	r3, r3, #16
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 8263 	beq.w	8011072 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb8:	4413      	add	r3, r2
 8010bba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bc0:	4b99      	ldr	r3, [pc, #612]	; (8010e28 <tcp_receive+0x2c0>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	db1b      	blt.n	8010c02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bce:	4b96      	ldr	r3, [pc, #600]	; (8010e28 <tcp_receive+0x2c0>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d106      	bne.n	8010be4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010bda:	4b94      	ldr	r3, [pc, #592]	; (8010e2c <tcp_receive+0x2c4>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	1ad3      	subs	r3, r2, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	db0e      	blt.n	8010c02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010be8:	4b90      	ldr	r3, [pc, #576]	; (8010e2c <tcp_receive+0x2c4>)
 8010bea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d125      	bne.n	8010c3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010bf0:	4b8f      	ldr	r3, [pc, #572]	; (8010e30 <tcp_receive+0x2c8>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	89db      	ldrh	r3, [r3, #14]
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d91c      	bls.n	8010c3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010c02:	4b8b      	ldr	r3, [pc, #556]	; (8010e30 <tcp_receive+0x2c8>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	89db      	ldrh	r3, [r3, #14]
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d205      	bcs.n	8010c2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010c2c:	4b7e      	ldr	r3, [pc, #504]	; (8010e28 <tcp_receive+0x2c0>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010c34:	4b7d      	ldr	r3, [pc, #500]	; (8010e2c <tcp_receive+0x2c4>)
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010c3c:	4b7b      	ldr	r3, [pc, #492]	; (8010e2c <tcp_receive+0x2c4>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc58      	bgt.n	8010cfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010c4a:	4b7a      	ldr	r3, [pc, #488]	; (8010e34 <tcp_receive+0x2cc>)
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d14b      	bne.n	8010cea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010c5c:	4413      	add	r3, r2
 8010c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d142      	bne.n	8010cea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	db3d      	blt.n	8010cea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c72:	4b6e      	ldr	r3, [pc, #440]	; (8010e2c <tcp_receive+0x2c4>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d137      	bne.n	8010cea <tcp_receive+0x182>
              found_dupack = 1;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c84:	2bff      	cmp	r3, #255	; 0xff
 8010c86:	d007      	beq.n	8010c98 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c8e:	3301      	adds	r3, #1
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c9e:	2b03      	cmp	r3, #3
 8010ca0:	d91b      	bls.n	8010cda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cac:	4413      	add	r3, r2
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d30a      	bcc.n	8010cd0 <tcp_receive+0x168>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cc4:	4413      	add	r3, r2
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cce:	e004      	b.n	8010cda <tcp_receive+0x172>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ce0:	2b02      	cmp	r3, #2
 8010ce2:	d902      	bls.n	8010cea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f002 fb41 	bl	801336c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f040 8160 	bne.w	8010fb2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010cfa:	e15a      	b.n	8010fb2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010cfc:	4b4b      	ldr	r3, [pc, #300]	; (8010e2c <tcp_receive+0x2c4>)
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d04:	1ad3      	subs	r3, r2, r3
 8010d06:	3b01      	subs	r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f2c0 814d 	blt.w	8010fa8 <tcp_receive+0x440>
 8010d0e:	4b47      	ldr	r3, [pc, #284]	; (8010e2c <tcp_receive+0x2c4>)
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f300 8145 	bgt.w	8010fa8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f003 0304 	and.w	r3, r3, #4
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d010      	beq.n	8010d4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8b5b      	ldrh	r3, [r3, #26]
 8010d2e:	f023 0304 	bic.w	r3, r3, #4
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d5a:	10db      	asrs	r3, r3, #3
 8010d5c:	b21b      	sxth	r3, r3
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	4413      	add	r3, r2
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	b21a      	sxth	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010d74:	4b2d      	ldr	r3, [pc, #180]	; (8010e2c <tcp_receive+0x2c4>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010d8c:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <tcp_receive+0x2c4>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	7d1b      	ldrb	r3, [r3, #20]
 8010d98:	2b03      	cmp	r3, #3
 8010d9a:	f240 8096 	bls.w	8010eca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d244      	bcs.n	8010e38 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	8b5b      	ldrh	r3, [r3, #26]
 8010db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <tcp_receive+0x256>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <tcp_receive+0x258>
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dce:	fb12 f303 	smulbb	r3, r2, r3
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	bf28      	it	cs
 8010dda:	4613      	movcs	r3, r2
 8010ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010de4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010de6:	4413      	add	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d309      	bcc.n	8010e08 <tcp_receive+0x2a0>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dfc:	4413      	add	r3, r2
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e06:	e060      	b.n	8010eca <tcp_receive+0x362>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e12:	e05a      	b.n	8010eca <tcp_receive+0x362>
 8010e14:	0801a324 	.word	0x0801a324
 8010e18:	0801a654 	.word	0x0801a654
 8010e1c:	0801a370 	.word	0x0801a370
 8010e20:	0801a670 	.word	0x0801a670
 8010e24:	200083d8 	.word	0x200083d8
 8010e28:	200083cc 	.word	0x200083cc
 8010e2c:	200083d0 	.word	0x200083d0
 8010e30:	200083bc 	.word	0x200083bc
 8010e34:	200083d6 	.word	0x200083d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e40:	4413      	add	r3, r2
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d309      	bcc.n	8010e62 <tcp_receive+0x2fa>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e56:	4413      	add	r3, r2
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e60:	e004      	b.n	8010e6c <tcp_receive+0x304>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d326      	bcc.n	8010eca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e9c:	4413      	add	r3, r2
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d30a      	bcc.n	8010ec0 <tcp_receive+0x358>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eb4:	4413      	add	r3, r2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ebe:	e004      	b.n	8010eca <tcp_receive+0x362>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ec6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ed2:	4a98      	ldr	r2, [pc, #608]	; (8011134 <tcp_receive+0x5cc>)
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7ff fdcb 	bl	8010a70 <tcp_free_acked_segments>
 8010eda:	4602      	mov	r2, r0
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ee8:	4a93      	ldr	r2, [pc, #588]	; (8011138 <tcp_receive+0x5d0>)
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ff fdc0 	bl	8010a70 <tcp_free_acked_segments>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d104      	bne.n	8010f08 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f04:	861a      	strh	r2, [r3, #48]	; 0x30
 8010f06:	e002      	b.n	8010f0e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d103      	bne.n	8010f24 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010f2a:	4b84      	ldr	r3, [pc, #528]	; (801113c <tcp_receive+0x5d4>)
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	4413      	add	r3, r2
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	8b5b      	ldrh	r3, [r3, #26]
 8010f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d035      	beq.n	8010fb0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d118      	bne.n	8010f7e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00c      	beq.n	8010f6e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fa fdfc 	bl	800bb5e <lwip_htonl>
 8010f66:	4603      	mov	r3, r0
 8010f68:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dc20      	bgt.n	8010fb0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	8b5b      	ldrh	r3, [r3, #26]
 8010f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f7c:	e018      	b.n	8010fb0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fa fde7 	bl	800bb5e <lwip_htonl>
 8010f90:	4603      	mov	r3, r0
 8010f92:	1ae3      	subs	r3, r4, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dc0b      	bgt.n	8010fb0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	8b5b      	ldrh	r3, [r3, #26]
 8010f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fa6:	e003      	b.n	8010fb0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f002 fbcd 	bl	8013748 <tcp_send_empty_ack>
 8010fae:	e000      	b.n	8010fb2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fb0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d05b      	beq.n	8011072 <tcp_receive+0x50a>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fbe:	4b60      	ldr	r3, [pc, #384]	; (8011140 <tcp_receive+0x5d8>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da54      	bge.n	8011072 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010fc8:	4b5e      	ldr	r3, [pc, #376]	; (8011144 <tcp_receive+0x5dc>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010fdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010fe6:	10db      	asrs	r3, r3, #3
 8010fe8:	b21b      	sxth	r3, r3
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011000:	4413      	add	r3, r2
 8011002:	b29b      	uxth	r3, r3
 8011004:	b21a      	sxth	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801100a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801100e:	2b00      	cmp	r3, #0
 8011010:	da05      	bge.n	801101e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011012:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011016:	425b      	negs	r3, r3
 8011018:	b29b      	uxth	r3, r3
 801101a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801101e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011028:	109b      	asrs	r3, r3, #2
 801102a:	b21b      	sxth	r3, r3
 801102c:	b29b      	uxth	r3, r3
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	b29b      	uxth	r3, r3
 8011032:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801103c:	b29a      	uxth	r2, r3
 801103e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011042:	4413      	add	r3, r2
 8011044:	b29b      	uxth	r3, r3
 8011046:	b21a      	sxth	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011052:	10db      	asrs	r3, r3, #3
 8011054:	b21b      	sxth	r3, r3
 8011056:	b29a      	uxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801105e:	b29b      	uxth	r3, r3
 8011060:	4413      	add	r3, r2
 8011062:	b29b      	uxth	r3, r3
 8011064:	b21a      	sxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011072:	4b35      	ldr	r3, [pc, #212]	; (8011148 <tcp_receive+0x5e0>)
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 84e1 	beq.w	8011a3e <tcp_receive+0xed6>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b06      	cmp	r3, #6
 8011082:	f200 84dc 	bhi.w	8011a3e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801108a:	4b30      	ldr	r3, [pc, #192]	; (801114c <tcp_receive+0x5e4>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	3b01      	subs	r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	f2c0 808e 	blt.w	80111b4 <tcp_receive+0x64c>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801109c:	4b2a      	ldr	r3, [pc, #168]	; (8011148 <tcp_receive+0x5e0>)
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	4619      	mov	r1, r3
 80110a2:	4b2a      	ldr	r3, [pc, #168]	; (801114c <tcp_receive+0x5e4>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	440b      	add	r3, r1
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	3301      	adds	r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f300 8081 	bgt.w	80111b4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80110b2:	4b27      	ldr	r3, [pc, #156]	; (8011150 <tcp_receive+0x5e8>)
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110bc:	4b23      	ldr	r3, [pc, #140]	; (801114c <tcp_receive+0x5e4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80110c4:	4b22      	ldr	r3, [pc, #136]	; (8011150 <tcp_receive+0x5e8>)
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d106      	bne.n	80110da <tcp_receive+0x572>
 80110cc:	4b21      	ldr	r3, [pc, #132]	; (8011154 <tcp_receive+0x5ec>)
 80110ce:	f240 5294 	movw	r2, #1428	; 0x594
 80110d2:	4921      	ldr	r1, [pc, #132]	; (8011158 <tcp_receive+0x5f0>)
 80110d4:	4821      	ldr	r0, [pc, #132]	; (801115c <tcp_receive+0x5f4>)
 80110d6:	f005 fd47 	bl	8016b68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d906      	bls.n	80110f2 <tcp_receive+0x58a>
 80110e4:	4b1b      	ldr	r3, [pc, #108]	; (8011154 <tcp_receive+0x5ec>)
 80110e6:	f240 5295 	movw	r2, #1429	; 0x595
 80110ea:	491d      	ldr	r1, [pc, #116]	; (8011160 <tcp_receive+0x5f8>)
 80110ec:	481b      	ldr	r0, [pc, #108]	; (801115c <tcp_receive+0x5f4>)
 80110ee:	f005 fd3b 	bl	8016b68 <iprintf>
      off = (u16_t)off32;
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80110f8:	4b15      	ldr	r3, [pc, #84]	; (8011150 <tcp_receive+0x5e8>)
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	891b      	ldrh	r3, [r3, #8]
 80110fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011102:	429a      	cmp	r2, r3
 8011104:	d906      	bls.n	8011114 <tcp_receive+0x5ac>
 8011106:	4b13      	ldr	r3, [pc, #76]	; (8011154 <tcp_receive+0x5ec>)
 8011108:	f240 5297 	movw	r2, #1431	; 0x597
 801110c:	4915      	ldr	r1, [pc, #84]	; (8011164 <tcp_receive+0x5fc>)
 801110e:	4813      	ldr	r0, [pc, #76]	; (801115c <tcp_receive+0x5f4>)
 8011110:	f005 fd2a 	bl	8016b68 <iprintf>
      inseg.len -= off;
 8011114:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <tcp_receive+0x5e8>)
 8011116:	891a      	ldrh	r2, [r3, #8]
 8011118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	b29a      	uxth	r2, r3
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <tcp_receive+0x5e8>)
 8011122:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011124:	4b0a      	ldr	r3, [pc, #40]	; (8011150 <tcp_receive+0x5e8>)
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	891a      	ldrh	r2, [r3, #8]
 801112a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011132:	e029      	b.n	8011188 <tcp_receive+0x620>
 8011134:	0801a68c 	.word	0x0801a68c
 8011138:	0801a694 	.word	0x0801a694
 801113c:	200083d4 	.word	0x200083d4
 8011140:	200083d0 	.word	0x200083d0
 8011144:	20014aa8 	.word	0x20014aa8
 8011148:	200083d6 	.word	0x200083d6
 801114c:	200083cc 	.word	0x200083cc
 8011150:	200083ac 	.word	0x200083ac
 8011154:	0801a324 	.word	0x0801a324
 8011158:	0801a69c 	.word	0x0801a69c
 801115c:	0801a370 	.word	0x0801a370
 8011160:	0801a6ac 	.word	0x0801a6ac
 8011164:	0801a6bc 	.word	0x0801a6bc
        off -= p->len;
 8011168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011178:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801117a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801117c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801117e:	2200      	movs	r2, #0
 8011180:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801118a:	895b      	ldrh	r3, [r3, #10]
 801118c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011190:	429a      	cmp	r2, r3
 8011192:	d8e9      	bhi.n	8011168 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011198:	4619      	mov	r1, r3
 801119a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801119c:	f7fc f8ce 	bl	800d33c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a4:	4a91      	ldr	r2, [pc, #580]	; (80113ec <tcp_receive+0x884>)
 80111a6:	6013      	str	r3, [r2, #0]
 80111a8:	4b91      	ldr	r3, [pc, #580]	; (80113f0 <tcp_receive+0x888>)
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	4a8f      	ldr	r2, [pc, #572]	; (80113ec <tcp_receive+0x884>)
 80111ae:	6812      	ldr	r2, [r2, #0]
 80111b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111b2:	e00d      	b.n	80111d0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80111b4:	4b8d      	ldr	r3, [pc, #564]	; (80113ec <tcp_receive+0x884>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	da06      	bge.n	80111d0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8b5b      	ldrh	r3, [r3, #26]
 80111c6:	f043 0302 	orr.w	r3, r3, #2
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111d0:	4b86      	ldr	r3, [pc, #536]	; (80113ec <tcp_receive+0x884>)
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f2c0 842a 	blt.w	8011a34 <tcp_receive+0xecc>
 80111e0:	4b82      	ldr	r3, [pc, #520]	; (80113ec <tcp_receive+0x884>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111ec:	440b      	add	r3, r1
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	3301      	adds	r3, #1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f300 841e 	bgt.w	8011a34 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111fc:	4b7b      	ldr	r3, [pc, #492]	; (80113ec <tcp_receive+0x884>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	f040 829a 	bne.w	801173a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011206:	4b7a      	ldr	r3, [pc, #488]	; (80113f0 <tcp_receive+0x888>)
 8011208:	891c      	ldrh	r4, [r3, #8]
 801120a:	4b79      	ldr	r3, [pc, #484]	; (80113f0 <tcp_receive+0x888>)
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fc8e 	bl	800bb34 <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <tcp_receive+0x6c0>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <tcp_receive+0x6c2>
 8011228:	2300      	movs	r3, #0
 801122a:	4423      	add	r3, r4
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b71      	ldr	r3, [pc, #452]	; (80113f4 <tcp_receive+0x88c>)
 8011230:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011236:	4b6f      	ldr	r3, [pc, #444]	; (80113f4 <tcp_receive+0x88c>)
 8011238:	881b      	ldrh	r3, [r3, #0]
 801123a:	429a      	cmp	r2, r3
 801123c:	d275      	bcs.n	801132a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801123e:	4b6c      	ldr	r3, [pc, #432]	; (80113f0 <tcp_receive+0x888>)
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	899b      	ldrh	r3, [r3, #12]
 8011244:	b29b      	uxth	r3, r3
 8011246:	4618      	mov	r0, r3
 8011248:	f7fa fc74 	bl	800bb34 <lwip_htons>
 801124c:	4603      	mov	r3, r0
 801124e:	b2db      	uxtb	r3, r3
 8011250:	f003 0301 	and.w	r3, r3, #1
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01f      	beq.n	8011298 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011258:	4b65      	ldr	r3, [pc, #404]	; (80113f0 <tcp_receive+0x888>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	899b      	ldrh	r3, [r3, #12]
 801125e:	b29b      	uxth	r3, r3
 8011260:	b21b      	sxth	r3, r3
 8011262:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011266:	b21c      	sxth	r4, r3
 8011268:	4b61      	ldr	r3, [pc, #388]	; (80113f0 <tcp_receive+0x888>)
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	b29b      	uxth	r3, r3
 8011270:	4618      	mov	r0, r3
 8011272:	f7fa fc5f 	bl	800bb34 <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	b29b      	uxth	r3, r3
 801127c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011280:	b29b      	uxth	r3, r3
 8011282:	4618      	mov	r0, r3
 8011284:	f7fa fc56 	bl	800bb34 <lwip_htons>
 8011288:	4603      	mov	r3, r0
 801128a:	b21b      	sxth	r3, r3
 801128c:	4323      	orrs	r3, r4
 801128e:	b21a      	sxth	r2, r3
 8011290:	4b57      	ldr	r3, [pc, #348]	; (80113f0 <tcp_receive+0x888>)
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	b292      	uxth	r2, r2
 8011296:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801129c:	4b54      	ldr	r3, [pc, #336]	; (80113f0 <tcp_receive+0x888>)
 801129e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112a0:	4b53      	ldr	r3, [pc, #332]	; (80113f0 <tcp_receive+0x888>)
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fa fc43 	bl	800bb34 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0302 	and.w	r3, r3, #2
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d005      	beq.n	80112c6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80112ba:	4b4d      	ldr	r3, [pc, #308]	; (80113f0 <tcp_receive+0x888>)
 80112bc:	891b      	ldrh	r3, [r3, #8]
 80112be:	3b01      	subs	r3, #1
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	4b4b      	ldr	r3, [pc, #300]	; (80113f0 <tcp_receive+0x888>)
 80112c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80112c6:	4b4a      	ldr	r3, [pc, #296]	; (80113f0 <tcp_receive+0x888>)
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4a49      	ldr	r2, [pc, #292]	; (80113f0 <tcp_receive+0x888>)
 80112cc:	8912      	ldrh	r2, [r2, #8]
 80112ce:	4611      	mov	r1, r2
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fb ff33 	bl	800d13c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80112d6:	4b46      	ldr	r3, [pc, #280]	; (80113f0 <tcp_receive+0x888>)
 80112d8:	891c      	ldrh	r4, [r3, #8]
 80112da:	4b45      	ldr	r3, [pc, #276]	; (80113f0 <tcp_receive+0x888>)
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	899b      	ldrh	r3, [r3, #12]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fa fc26 	bl	800bb34 <lwip_htons>
 80112e8:	4603      	mov	r3, r0
 80112ea:	b2db      	uxtb	r3, r3
 80112ec:	f003 0303 	and.w	r3, r3, #3
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <tcp_receive+0x790>
 80112f4:	2301      	movs	r3, #1
 80112f6:	e000      	b.n	80112fa <tcp_receive+0x792>
 80112f8:	2300      	movs	r3, #0
 80112fa:	4423      	add	r3, r4
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	4b3d      	ldr	r3, [pc, #244]	; (80113f4 <tcp_receive+0x88c>)
 8011300:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011302:	4b3c      	ldr	r3, [pc, #240]	; (80113f4 <tcp_receive+0x88c>)
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	4b38      	ldr	r3, [pc, #224]	; (80113ec <tcp_receive+0x884>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	441a      	add	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011316:	440b      	add	r3, r1
 8011318:	429a      	cmp	r2, r3
 801131a:	d006      	beq.n	801132a <tcp_receive+0x7c2>
 801131c:	4b36      	ldr	r3, [pc, #216]	; (80113f8 <tcp_receive+0x890>)
 801131e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011322:	4936      	ldr	r1, [pc, #216]	; (80113fc <tcp_receive+0x894>)
 8011324:	4836      	ldr	r0, [pc, #216]	; (8011400 <tcp_receive+0x898>)
 8011326:	f005 fc1f 	bl	8016b68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801132e:	2b00      	cmp	r3, #0
 8011330:	f000 80e7 	beq.w	8011502 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011334:	4b2e      	ldr	r3, [pc, #184]	; (80113f0 <tcp_receive+0x888>)
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	b29b      	uxth	r3, r3
 801133c:	4618      	mov	r0, r3
 801133e:	f7fa fbf9 	bl	800bb34 <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	b2db      	uxtb	r3, r3
 8011346:	f003 0301 	and.w	r3, r3, #1
 801134a:	2b00      	cmp	r3, #0
 801134c:	d010      	beq.n	8011370 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801134e:	e00a      	b.n	8011366 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011354:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f7fd fcaa 	bl	800ecba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1f0      	bne.n	8011350 <tcp_receive+0x7e8>
 801136e:	e0c8      	b.n	8011502 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011374:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011376:	e052      	b.n	801141e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	899b      	ldrh	r3, [r3, #12]
 801137e:	b29b      	uxth	r3, r3
 8011380:	4618      	mov	r0, r3
 8011382:	f7fa fbd7 	bl	800bb34 <lwip_htons>
 8011386:	4603      	mov	r3, r0
 8011388:	b2db      	uxtb	r3, r3
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	d03d      	beq.n	801140e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011392:	4b17      	ldr	r3, [pc, #92]	; (80113f0 <tcp_receive+0x888>)
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	899b      	ldrh	r3, [r3, #12]
 8011398:	b29b      	uxth	r3, r3
 801139a:	4618      	mov	r0, r3
 801139c:	f7fa fbca 	bl	800bb34 <lwip_htons>
 80113a0:	4603      	mov	r3, r0
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d130      	bne.n	801140e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80113ac:	4b10      	ldr	r3, [pc, #64]	; (80113f0 <tcp_receive+0x888>)
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	899b      	ldrh	r3, [r3, #12]
 80113b2:	b29c      	uxth	r4, r3
 80113b4:	2001      	movs	r0, #1
 80113b6:	f7fa fbbd 	bl	800bb34 <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	461a      	mov	r2, r3
 80113be:	4b0c      	ldr	r3, [pc, #48]	; (80113f0 <tcp_receive+0x888>)
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	4322      	orrs	r2, r4
 80113c4:	b292      	uxth	r2, r2
 80113c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80113c8:	4b09      	ldr	r3, [pc, #36]	; (80113f0 <tcp_receive+0x888>)
 80113ca:	891c      	ldrh	r4, [r3, #8]
 80113cc:	4b08      	ldr	r3, [pc, #32]	; (80113f0 <tcp_receive+0x888>)
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fa fbad 	bl	800bb34 <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0303 	and.w	r3, r3, #3
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00e      	beq.n	8011404 <tcp_receive+0x89c>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e00d      	b.n	8011406 <tcp_receive+0x89e>
 80113ea:	bf00      	nop
 80113ec:	200083cc 	.word	0x200083cc
 80113f0:	200083ac 	.word	0x200083ac
 80113f4:	200083d6 	.word	0x200083d6
 80113f8:	0801a324 	.word	0x0801a324
 80113fc:	0801a6cc 	.word	0x0801a6cc
 8011400:	0801a370 	.word	0x0801a370
 8011404:	2300      	movs	r3, #0
 8011406:	4423      	add	r3, r4
 8011408:	b29a      	uxth	r2, r3
 801140a:	4b98      	ldr	r3, [pc, #608]	; (801166c <tcp_receive+0xb04>)
 801140c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801140e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011410:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011418:	6938      	ldr	r0, [r7, #16]
 801141a:	f7fd fc4e 	bl	800ecba <tcp_seg_free>
            while (next &&
 801141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00e      	beq.n	8011442 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011424:	4b91      	ldr	r3, [pc, #580]	; (801166c <tcp_receive+0xb04>)
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	461a      	mov	r2, r3
 801142a:	4b91      	ldr	r3, [pc, #580]	; (8011670 <tcp_receive+0xb08>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	441a      	add	r2, r3
 8011430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011438:	8909      	ldrh	r1, [r1, #8]
 801143a:	440b      	add	r3, r1
 801143c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801143e:	2b00      	cmp	r3, #0
 8011440:	da9a      	bge.n	8011378 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011444:	2b00      	cmp	r3, #0
 8011446:	d059      	beq.n	80114fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011448:	4b88      	ldr	r3, [pc, #544]	; (801166c <tcp_receive+0xb04>)
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	461a      	mov	r2, r3
 801144e:	4b88      	ldr	r3, [pc, #544]	; (8011670 <tcp_receive+0xb08>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	441a      	add	r2, r3
 8011454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801145c:	2b00      	cmp	r3, #0
 801145e:	dd4d      	ble.n	80114fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	b29a      	uxth	r2, r3
 8011468:	4b81      	ldr	r3, [pc, #516]	; (8011670 <tcp_receive+0xb08>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	b29b      	uxth	r3, r3
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	b29a      	uxth	r2, r3
 8011472:	4b80      	ldr	r3, [pc, #512]	; (8011674 <tcp_receive+0xb0c>)
 8011474:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011476:	4b7f      	ldr	r3, [pc, #508]	; (8011674 <tcp_receive+0xb0c>)
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	899b      	ldrh	r3, [r3, #12]
 801147c:	b29b      	uxth	r3, r3
 801147e:	4618      	mov	r0, r3
 8011480:	f7fa fb58 	bl	800bb34 <lwip_htons>
 8011484:	4603      	mov	r3, r0
 8011486:	b2db      	uxtb	r3, r3
 8011488:	f003 0302 	and.w	r3, r3, #2
 801148c:	2b00      	cmp	r3, #0
 801148e:	d005      	beq.n	801149c <tcp_receive+0x934>
                inseg.len -= 1;
 8011490:	4b78      	ldr	r3, [pc, #480]	; (8011674 <tcp_receive+0xb0c>)
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	3b01      	subs	r3, #1
 8011496:	b29a      	uxth	r2, r3
 8011498:	4b76      	ldr	r3, [pc, #472]	; (8011674 <tcp_receive+0xb0c>)
 801149a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801149c:	4b75      	ldr	r3, [pc, #468]	; (8011674 <tcp_receive+0xb0c>)
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4a74      	ldr	r2, [pc, #464]	; (8011674 <tcp_receive+0xb0c>)
 80114a2:	8912      	ldrh	r2, [r2, #8]
 80114a4:	4611      	mov	r1, r2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fb fe48 	bl	800d13c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80114ac:	4b71      	ldr	r3, [pc, #452]	; (8011674 <tcp_receive+0xb0c>)
 80114ae:	891c      	ldrh	r4, [r3, #8]
 80114b0:	4b70      	ldr	r3, [pc, #448]	; (8011674 <tcp_receive+0xb0c>)
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	899b      	ldrh	r3, [r3, #12]
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fa fb3b 	bl	800bb34 <lwip_htons>
 80114be:	4603      	mov	r3, r0
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	f003 0303 	and.w	r3, r3, #3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <tcp_receive+0x966>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e000      	b.n	80114d0 <tcp_receive+0x968>
 80114ce:	2300      	movs	r3, #0
 80114d0:	4423      	add	r3, r4
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	4b65      	ldr	r3, [pc, #404]	; (801166c <tcp_receive+0xb04>)
 80114d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80114d8:	4b64      	ldr	r3, [pc, #400]	; (801166c <tcp_receive+0xb04>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	461a      	mov	r2, r3
 80114de:	4b64      	ldr	r3, [pc, #400]	; (8011670 <tcp_receive+0xb08>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	441a      	add	r2, r3
 80114e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d006      	beq.n	80114fc <tcp_receive+0x994>
 80114ee:	4b62      	ldr	r3, [pc, #392]	; (8011678 <tcp_receive+0xb10>)
 80114f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80114f4:	4961      	ldr	r1, [pc, #388]	; (801167c <tcp_receive+0xb14>)
 80114f6:	4862      	ldr	r0, [pc, #392]	; (8011680 <tcp_receive+0xb18>)
 80114f8:	f005 fb36 	bl	8016b68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011500:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011502:	4b5a      	ldr	r3, [pc, #360]	; (801166c <tcp_receive+0xb04>)
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	4b59      	ldr	r3, [pc, #356]	; (8011670 <tcp_receive+0xb08>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	441a      	add	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011516:	4b55      	ldr	r3, [pc, #340]	; (801166c <tcp_receive+0xb04>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	429a      	cmp	r2, r3
 801151c:	d206      	bcs.n	801152c <tcp_receive+0x9c4>
 801151e:	4b56      	ldr	r3, [pc, #344]	; (8011678 <tcp_receive+0xb10>)
 8011520:	f240 6207 	movw	r2, #1543	; 0x607
 8011524:	4957      	ldr	r1, [pc, #348]	; (8011684 <tcp_receive+0xb1c>)
 8011526:	4856      	ldr	r0, [pc, #344]	; (8011680 <tcp_receive+0xb18>)
 8011528:	f005 fb1e 	bl	8016b68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011530:	4b4e      	ldr	r3, [pc, #312]	; (801166c <tcp_receive+0xb04>)
 8011532:	881b      	ldrh	r3, [r3, #0]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7fc fe97 	bl	800e270 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011542:	4b4c      	ldr	r3, [pc, #304]	; (8011674 <tcp_receive+0xb0c>)
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	891b      	ldrh	r3, [r3, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d006      	beq.n	801155a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801154c:	4b49      	ldr	r3, [pc, #292]	; (8011674 <tcp_receive+0xb0c>)
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	4a4d      	ldr	r2, [pc, #308]	; (8011688 <tcp_receive+0xb20>)
 8011552:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011554:	4b47      	ldr	r3, [pc, #284]	; (8011674 <tcp_receive+0xb0c>)
 8011556:	2200      	movs	r2, #0
 8011558:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801155a:	4b46      	ldr	r3, [pc, #280]	; (8011674 <tcp_receive+0xb0c>)
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	899b      	ldrh	r3, [r3, #12]
 8011560:	b29b      	uxth	r3, r3
 8011562:	4618      	mov	r0, r3
 8011564:	f7fa fae6 	bl	800bb34 <lwip_htons>
 8011568:	4603      	mov	r3, r0
 801156a:	b2db      	uxtb	r3, r3
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	f000 80b8 	beq.w	80116e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011576:	4b45      	ldr	r3, [pc, #276]	; (801168c <tcp_receive+0xb24>)
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	f043 0320 	orr.w	r3, r3, #32
 801157e:	b2da      	uxtb	r2, r3
 8011580:	4b42      	ldr	r3, [pc, #264]	; (801168c <tcp_receive+0xb24>)
 8011582:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011584:	e0af      	b.n	80116e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801158a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	4a36      	ldr	r2, [pc, #216]	; (8011670 <tcp_receive+0xb08>)
 8011596:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	461c      	mov	r4, r3
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	899b      	ldrh	r3, [r3, #12]
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fa fac4 	bl	800bb34 <lwip_htons>
 80115ac:	4603      	mov	r3, r0
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	f003 0303 	and.w	r3, r3, #3
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <tcp_receive+0xa54>
 80115b8:	2301      	movs	r3, #1
 80115ba:	e000      	b.n	80115be <tcp_receive+0xa56>
 80115bc:	2300      	movs	r3, #0
 80115be:	191a      	adds	r2, r3, r4
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	441a      	add	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115ce:	461c      	mov	r4, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	891b      	ldrh	r3, [r3, #8]
 80115d4:	461d      	mov	r5, r3
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	899b      	ldrh	r3, [r3, #12]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fa faa8 	bl	800bb34 <lwip_htons>
 80115e4:	4603      	mov	r3, r0
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	f003 0303 	and.w	r3, r3, #3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <tcp_receive+0xa8c>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e000      	b.n	80115f6 <tcp_receive+0xa8e>
 80115f4:	2300      	movs	r3, #0
 80115f6:	442b      	add	r3, r5
 80115f8:	429c      	cmp	r4, r3
 80115fa:	d206      	bcs.n	801160a <tcp_receive+0xaa2>
 80115fc:	4b1e      	ldr	r3, [pc, #120]	; (8011678 <tcp_receive+0xb10>)
 80115fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8011602:	4923      	ldr	r1, [pc, #140]	; (8011690 <tcp_receive+0xb28>)
 8011604:	481e      	ldr	r0, [pc, #120]	; (8011680 <tcp_receive+0xb18>)
 8011606:	f005 faaf 	bl	8016b68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	891b      	ldrh	r3, [r3, #8]
 801160e:	461c      	mov	r4, r3
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	899b      	ldrh	r3, [r3, #12]
 8011616:	b29b      	uxth	r3, r3
 8011618:	4618      	mov	r0, r3
 801161a:	f7fa fa8b 	bl	800bb34 <lwip_htons>
 801161e:	4603      	mov	r3, r0
 8011620:	b2db      	uxtb	r3, r3
 8011622:	f003 0303 	and.w	r3, r3, #3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d001      	beq.n	801162e <tcp_receive+0xac6>
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <tcp_receive+0xac8>
 801162e:	2300      	movs	r3, #0
 8011630:	1919      	adds	r1, r3, r4
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011636:	b28b      	uxth	r3, r1
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7fc fe15 	bl	800e270 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	891b      	ldrh	r3, [r3, #8]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d028      	beq.n	80116a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011650:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <tcp_receive+0xb20>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d01d      	beq.n	8011694 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <tcp_receive+0xb20>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fb ffbe 	bl	800d5e4 <pbuf_cat>
 8011668:	e018      	b.n	801169c <tcp_receive+0xb34>
 801166a:	bf00      	nop
 801166c:	200083d6 	.word	0x200083d6
 8011670:	200083cc 	.word	0x200083cc
 8011674:	200083ac 	.word	0x200083ac
 8011678:	0801a324 	.word	0x0801a324
 801167c:	0801a704 	.word	0x0801a704
 8011680:	0801a370 	.word	0x0801a370
 8011684:	0801a740 	.word	0x0801a740
 8011688:	200083dc 	.word	0x200083dc
 801168c:	200083d9 	.word	0x200083d9
 8011690:	0801a760 	.word	0x0801a760
            } else {
              recv_data = cseg->p;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	4a70      	ldr	r2, [pc, #448]	; (801185c <tcp_receive+0xcf4>)
 801169a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2200      	movs	r2, #0
 80116a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	899b      	ldrh	r3, [r3, #12]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fa fa42 	bl	800bb34 <lwip_htons>
 80116b0:	4603      	mov	r3, r0
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00d      	beq.n	80116d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80116bc:	4b68      	ldr	r3, [pc, #416]	; (8011860 <tcp_receive+0xcf8>)
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	f043 0320 	orr.w	r3, r3, #32
 80116c4:	b2da      	uxtb	r2, r3
 80116c6:	4b66      	ldr	r3, [pc, #408]	; (8011860 <tcp_receive+0xcf8>)
 80116c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	7d1b      	ldrb	r3, [r3, #20]
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	d102      	bne.n	80116d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2207      	movs	r2, #7
 80116d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7fd faea 	bl	800ecba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d008      	beq.n	8011700 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80116fa:	429a      	cmp	r2, r3
 80116fc:	f43f af43 	beq.w	8011586 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8b5b      	ldrh	r3, [r3, #26]
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00e      	beq.n	801172a <tcp_receive+0xbc2>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8b5b      	ldrh	r3, [r3, #26]
 8011710:	f023 0301 	bic.w	r3, r3, #1
 8011714:	b29a      	uxth	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	835a      	strh	r2, [r3, #26]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	8b5b      	ldrh	r3, [r3, #26]
 801171e:	f043 0302 	orr.w	r3, r3, #2
 8011722:	b29a      	uxth	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011728:	e188      	b.n	8011a3c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	8b5b      	ldrh	r3, [r3, #26]
 801172e:	f043 0301 	orr.w	r3, r3, #1
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011738:	e180      	b.n	8011a3c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011742:	4848      	ldr	r0, [pc, #288]	; (8011864 <tcp_receive+0xcfc>)
 8011744:	f7fd faf0 	bl	800ed28 <tcp_seg_copy>
 8011748:	4602      	mov	r2, r0
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	675a      	str	r2, [r3, #116]	; 0x74
 801174e:	e16d      	b.n	8011a2c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011750:	2300      	movs	r3, #0
 8011752:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011758:	63bb      	str	r3, [r7, #56]	; 0x38
 801175a:	e157      	b.n	8011a0c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	4b41      	ldr	r3, [pc, #260]	; (8011868 <tcp_receive+0xd00>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d11d      	bne.n	80117a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801176a:	4b3e      	ldr	r3, [pc, #248]	; (8011864 <tcp_receive+0xcfc>)
 801176c:	891a      	ldrh	r2, [r3, #8]
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	891b      	ldrh	r3, [r3, #8]
 8011772:	429a      	cmp	r2, r3
 8011774:	f240 814f 	bls.w	8011a16 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011778:	483a      	ldr	r0, [pc, #232]	; (8011864 <tcp_receive+0xcfc>)
 801177a:	f7fd fad5 	bl	800ed28 <tcp_seg_copy>
 801177e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 8149 	beq.w	8011a1a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178a:	2b00      	cmp	r3, #0
 801178c:	d003      	beq.n	8011796 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011790:	697a      	ldr	r2, [r7, #20]
 8011792:	601a      	str	r2, [r3, #0]
 8011794:	e002      	b.n	801179c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801179c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801179e:	6978      	ldr	r0, [r7, #20]
 80117a0:	f7ff f8de 	bl	8010960 <tcp_oos_insert_segment>
                }
                break;
 80117a4:	e139      	b.n	8011a1a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80117a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d117      	bne.n	80117dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80117ac:	4b2e      	ldr	r3, [pc, #184]	; (8011868 <tcp_receive+0xd00>)
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da57      	bge.n	801186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80117bc:	4829      	ldr	r0, [pc, #164]	; (8011864 <tcp_receive+0xcfc>)
 80117be:	f7fd fab3 	bl	800ed28 <tcp_seg_copy>
 80117c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 8129 	beq.w	8011a1e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	69ba      	ldr	r2, [r7, #24]
 80117d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80117d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117d4:	69b8      	ldr	r0, [r7, #24]
 80117d6:	f7ff f8c3 	bl	8010960 <tcp_oos_insert_segment>
                  }
                  break;
 80117da:	e120      	b.n	8011a1e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80117dc:	4b22      	ldr	r3, [pc, #136]	; (8011868 <tcp_receive+0xd00>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	3b01      	subs	r3, #1
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	db3e      	blt.n	801186c <tcp_receive+0xd04>
 80117ee:	4b1e      	ldr	r3, [pc, #120]	; (8011868 <tcp_receive+0xd00>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	3301      	adds	r3, #1
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	dc35      	bgt.n	801186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011800:	4818      	ldr	r0, [pc, #96]	; (8011864 <tcp_receive+0xcfc>)
 8011802:	f7fd fa91 	bl	800ed28 <tcp_seg_copy>
 8011806:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 8109 	beq.w	8011a22 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011818:	8912      	ldrh	r2, [r2, #8]
 801181a:	441a      	add	r2, r3
 801181c:	4b12      	ldr	r3, [pc, #72]	; (8011868 <tcp_receive+0xd00>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	dd12      	ble.n	801184c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011826:	4b10      	ldr	r3, [pc, #64]	; (8011868 <tcp_receive+0xd00>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	b29a      	uxth	r2, r3
 801182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	b29b      	uxth	r3, r3
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	b29a      	uxth	r2, r3
 8011838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183e:	685a      	ldr	r2, [r3, #4]
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	891b      	ldrh	r3, [r3, #8]
 8011844:	4619      	mov	r1, r3
 8011846:	4610      	mov	r0, r2
 8011848:	f7fb fc78 	bl	800d13c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184e:	69fa      	ldr	r2, [r7, #28]
 8011850:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011854:	69f8      	ldr	r0, [r7, #28]
 8011856:	f7ff f883 	bl	8010960 <tcp_oos_insert_segment>
                  }
                  break;
 801185a:	e0e2      	b.n	8011a22 <tcp_receive+0xeba>
 801185c:	200083dc 	.word	0x200083dc
 8011860:	200083d9 	.word	0x200083d9
 8011864:	200083ac 	.word	0x200083ac
 8011868:	200083cc 	.word	0x200083cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801186c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f040 80c6 	bne.w	8011a06 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801187a:	4b80      	ldr	r3, [pc, #512]	; (8011a7c <tcp_receive+0xf14>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011886:	2b00      	cmp	r3, #0
 8011888:	f340 80bd 	ble.w	8011a06 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	899b      	ldrh	r3, [r3, #12]
 8011892:	b29b      	uxth	r3, r3
 8011894:	4618      	mov	r0, r3
 8011896:	f7fa f94d 	bl	800bb34 <lwip_htons>
 801189a:	4603      	mov	r3, r0
 801189c:	b2db      	uxtb	r3, r3
 801189e:	f003 0301 	and.w	r3, r3, #1
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f040 80bf 	bne.w	8011a26 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80118a8:	4875      	ldr	r0, [pc, #468]	; (8011a80 <tcp_receive+0xf18>)
 80118aa:	f7fd fa3d 	bl	800ed28 <tcp_seg_copy>
 80118ae:	4602      	mov	r2, r0
 80118b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 80b6 	beq.w	8011a2a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80118be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118c6:	8912      	ldrh	r2, [r2, #8]
 80118c8:	441a      	add	r2, r3
 80118ca:	4b6c      	ldr	r3, [pc, #432]	; (8011a7c <tcp_receive+0xf14>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dd12      	ble.n	80118fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80118d4:	4b69      	ldr	r3, [pc, #420]	; (8011a7c <tcp_receive+0xf14>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	b29a      	uxth	r2, r3
 80118da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	685a      	ldr	r2, [r3, #4]
 80118ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f0:	891b      	ldrh	r3, [r3, #8]
 80118f2:	4619      	mov	r1, r3
 80118f4:	4610      	mov	r0, r2
 80118f6:	f7fb fc21 	bl	800d13c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80118fa:	4b62      	ldr	r3, [pc, #392]	; (8011a84 <tcp_receive+0xf1c>)
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	4b5e      	ldr	r3, [pc, #376]	; (8011a7c <tcp_receive+0xf14>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	441a      	add	r2, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801190e:	440b      	add	r3, r1
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	f340 8089 	ble.w	8011a2a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	899b      	ldrh	r3, [r3, #12]
 8011920:	b29b      	uxth	r3, r3
 8011922:	4618      	mov	r0, r3
 8011924:	f7fa f906 	bl	800bb34 <lwip_htons>
 8011928:	4603      	mov	r3, r0
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d022      	beq.n	801197a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	899b      	ldrh	r3, [r3, #12]
 801193c:	b29b      	uxth	r3, r3
 801193e:	b21b      	sxth	r3, r3
 8011940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011944:	b21c      	sxth	r4, r3
 8011946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	899b      	ldrh	r3, [r3, #12]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	f7fa f8ef 	bl	800bb34 <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	b2db      	uxtb	r3, r3
 801195a:	b29b      	uxth	r3, r3
 801195c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011960:	b29b      	uxth	r3, r3
 8011962:	4618      	mov	r0, r3
 8011964:	f7fa f8e6 	bl	800bb34 <lwip_htons>
 8011968:	4603      	mov	r3, r0
 801196a:	b21b      	sxth	r3, r3
 801196c:	4323      	orrs	r3, r4
 801196e:	b21a      	sxth	r2, r3
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	b292      	uxth	r2, r2
 8011978:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011984:	4413      	add	r3, r2
 8011986:	b299      	uxth	r1, r3
 8011988:	4b3c      	ldr	r3, [pc, #240]	; (8011a7c <tcp_receive+0xf14>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	b29a      	uxth	r2, r3
 801198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	1a8a      	subs	r2, r1, r2
 8011994:	b292      	uxth	r2, r2
 8011996:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	891b      	ldrh	r3, [r3, #8]
 80119a4:	4619      	mov	r1, r3
 80119a6:	4610      	mov	r0, r2
 80119a8:	f7fb fbc8 	bl	800d13c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80119ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	891c      	ldrh	r4, [r3, #8]
 80119b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	899b      	ldrh	r3, [r3, #12]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fa f8b9 	bl	800bb34 <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	f003 0303 	and.w	r3, r3, #3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d001      	beq.n	80119d2 <tcp_receive+0xe6a>
 80119ce:	2301      	movs	r3, #1
 80119d0:	e000      	b.n	80119d4 <tcp_receive+0xe6c>
 80119d2:	2300      	movs	r3, #0
 80119d4:	4423      	add	r3, r4
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	4b2a      	ldr	r3, [pc, #168]	; (8011a84 <tcp_receive+0xf1c>)
 80119da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80119dc:	4b29      	ldr	r3, [pc, #164]	; (8011a84 <tcp_receive+0xf1c>)
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	461a      	mov	r2, r3
 80119e2:	4b26      	ldr	r3, [pc, #152]	; (8011a7c <tcp_receive+0xf14>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	441a      	add	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119f0:	440b      	add	r3, r1
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d019      	beq.n	8011a2a <tcp_receive+0xec2>
 80119f6:	4b24      	ldr	r3, [pc, #144]	; (8011a88 <tcp_receive+0xf20>)
 80119f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80119fc:	4923      	ldr	r1, [pc, #140]	; (8011a8c <tcp_receive+0xf24>)
 80119fe:	4824      	ldr	r0, [pc, #144]	; (8011a90 <tcp_receive+0xf28>)
 8011a00:	f005 f8b2 	bl	8016b68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011a04:	e011      	b.n	8011a2a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f47f aea4 	bne.w	801175c <tcp_receive+0xbf4>
 8011a14:	e00a      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a16:	bf00      	nop
 8011a18:	e008      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a1a:	bf00      	nop
 8011a1c:	e006      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a1e:	bf00      	nop
 8011a20:	e004      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a22:	bf00      	nop
 8011a24:	e002      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a26:	bf00      	nop
 8011a28:	e000      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f001 fe8b 	bl	8013748 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011a32:	e003      	b.n	8011a3c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f001 fe87 	bl	8013748 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a3a:	e01a      	b.n	8011a72 <tcp_receive+0xf0a>
 8011a3c:	e019      	b.n	8011a72 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	; (8011a7c <tcp_receive+0xf14>)
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	db0a      	blt.n	8011a62 <tcp_receive+0xefa>
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <tcp_receive+0xf14>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a54:	6879      	ldr	r1, [r7, #4]
 8011a56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a58:	440b      	add	r3, r1
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dd07      	ble.n	8011a72 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	8b5b      	ldrh	r3, [r3, #26]
 8011a66:	f043 0302 	orr.w	r3, r3, #2
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011a70:	e7ff      	b.n	8011a72 <tcp_receive+0xf0a>
 8011a72:	bf00      	nop
 8011a74:	3750      	adds	r7, #80	; 0x50
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bdb0      	pop	{r4, r5, r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	200083cc 	.word	0x200083cc
 8011a80:	200083ac 	.word	0x200083ac
 8011a84:	200083d6 	.word	0x200083d6
 8011a88:	0801a324 	.word	0x0801a324
 8011a8c:	0801a6cc 	.word	0x0801a6cc
 8011a90:	0801a370 	.word	0x0801a370

08011a94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011a9a:	4b15      	ldr	r3, [pc, #84]	; (8011af0 <tcp_get_next_optbyte+0x5c>)
 8011a9c:	881b      	ldrh	r3, [r3, #0]
 8011a9e:	1c5a      	adds	r2, r3, #1
 8011aa0:	b291      	uxth	r1, r2
 8011aa2:	4a13      	ldr	r2, [pc, #76]	; (8011af0 <tcp_get_next_optbyte+0x5c>)
 8011aa4:	8011      	strh	r1, [r2, #0]
 8011aa6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011aa8:	4b12      	ldr	r3, [pc, #72]	; (8011af4 <tcp_get_next_optbyte+0x60>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d004      	beq.n	8011aba <tcp_get_next_optbyte+0x26>
 8011ab0:	4b11      	ldr	r3, [pc, #68]	; (8011af8 <tcp_get_next_optbyte+0x64>)
 8011ab2:	881b      	ldrh	r3, [r3, #0]
 8011ab4:	88fa      	ldrh	r2, [r7, #6]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d208      	bcs.n	8011acc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011aba:	4b10      	ldr	r3, [pc, #64]	; (8011afc <tcp_get_next_optbyte+0x68>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3314      	adds	r3, #20
 8011ac0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011ac2:	88fb      	ldrh	r3, [r7, #6]
 8011ac4:	683a      	ldr	r2, [r7, #0]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	e00b      	b.n	8011ae4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011acc:	88fb      	ldrh	r3, [r7, #6]
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	4b09      	ldr	r3, [pc, #36]	; (8011af8 <tcp_get_next_optbyte+0x64>)
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ada:	4b06      	ldr	r3, [pc, #24]	; (8011af4 <tcp_get_next_optbyte+0x60>)
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	797b      	ldrb	r3, [r7, #5]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	200083c8 	.word	0x200083c8
 8011af4:	200083c4 	.word	0x200083c4
 8011af8:	200083c2 	.word	0x200083c2
 8011afc:	200083bc 	.word	0x200083bc

08011b00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d106      	bne.n	8011b1c <tcp_parseopt+0x1c>
 8011b0e:	4b32      	ldr	r3, [pc, #200]	; (8011bd8 <tcp_parseopt+0xd8>)
 8011b10:	f240 727d 	movw	r2, #1917	; 0x77d
 8011b14:	4931      	ldr	r1, [pc, #196]	; (8011bdc <tcp_parseopt+0xdc>)
 8011b16:	4832      	ldr	r0, [pc, #200]	; (8011be0 <tcp_parseopt+0xe0>)
 8011b18:	f005 f826 	bl	8016b68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011b1c:	4b31      	ldr	r3, [pc, #196]	; (8011be4 <tcp_parseopt+0xe4>)
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d055      	beq.n	8011bd0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b24:	4b30      	ldr	r3, [pc, #192]	; (8011be8 <tcp_parseopt+0xe8>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	801a      	strh	r2, [r3, #0]
 8011b2a:	e045      	b.n	8011bb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011b2c:	f7ff ffb2 	bl	8011a94 <tcp_get_next_optbyte>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d006      	beq.n	8011b48 <tcp_parseopt+0x48>
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	dc2b      	bgt.n	8011b96 <tcp_parseopt+0x96>
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d041      	beq.n	8011bc6 <tcp_parseopt+0xc6>
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d127      	bne.n	8011b96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011b46:	e037      	b.n	8011bb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011b48:	f7ff ffa4 	bl	8011a94 <tcp_get_next_optbyte>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b04      	cmp	r3, #4
 8011b50:	d13b      	bne.n	8011bca <tcp_parseopt+0xca>
 8011b52:	4b25      	ldr	r3, [pc, #148]	; (8011be8 <tcp_parseopt+0xe8>)
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	4a22      	ldr	r2, [pc, #136]	; (8011be4 <tcp_parseopt+0xe4>)
 8011b5a:	8812      	ldrh	r2, [r2, #0]
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	da34      	bge.n	8011bca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011b60:	f7ff ff98 	bl	8011a94 <tcp_get_next_optbyte>
 8011b64:	4603      	mov	r3, r0
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	021b      	lsls	r3, r3, #8
 8011b6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011b6c:	f7ff ff92 	bl	8011a94 <tcp_get_next_optbyte>
 8011b70:	4603      	mov	r3, r0
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	89bb      	ldrh	r3, [r7, #12]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011b7a:	89bb      	ldrh	r3, [r7, #12]
 8011b7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011b80:	d804      	bhi.n	8011b8c <tcp_parseopt+0x8c>
 8011b82:	89bb      	ldrh	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d001      	beq.n	8011b8c <tcp_parseopt+0x8c>
 8011b88:	89ba      	ldrh	r2, [r7, #12]
 8011b8a:	e001      	b.n	8011b90 <tcp_parseopt+0x90>
 8011b8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011b94:	e010      	b.n	8011bb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011b96:	f7ff ff7d 	bl	8011a94 <tcp_get_next_optbyte>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011b9e:	7afb      	ldrb	r3, [r7, #11]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d914      	bls.n	8011bce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ba4:	7afb      	ldrb	r3, [r7, #11]
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	4b0f      	ldr	r3, [pc, #60]	; (8011be8 <tcp_parseopt+0xe8>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	4413      	add	r3, r2
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	3b02      	subs	r3, #2
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	4b0c      	ldr	r3, [pc, #48]	; (8011be8 <tcp_parseopt+0xe8>)
 8011bb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011bb8:	4b0b      	ldr	r3, [pc, #44]	; (8011be8 <tcp_parseopt+0xe8>)
 8011bba:	881a      	ldrh	r2, [r3, #0]
 8011bbc:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <tcp_parseopt+0xe4>)
 8011bbe:	881b      	ldrh	r3, [r3, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d3b3      	bcc.n	8011b2c <tcp_parseopt+0x2c>
 8011bc4:	e004      	b.n	8011bd0 <tcp_parseopt+0xd0>
          return;
 8011bc6:	bf00      	nop
 8011bc8:	e002      	b.n	8011bd0 <tcp_parseopt+0xd0>
            return;
 8011bca:	bf00      	nop
 8011bcc:	e000      	b.n	8011bd0 <tcp_parseopt+0xd0>
            return;
 8011bce:	bf00      	nop
      }
    }
  }
}
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	0801a324 	.word	0x0801a324
 8011bdc:	0801a788 	.word	0x0801a788
 8011be0:	0801a370 	.word	0x0801a370
 8011be4:	200083c0 	.word	0x200083c0
 8011be8:	200083c8 	.word	0x200083c8

08011bec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011bf0:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <tcp_trigger_input_pcb_close+0x1c>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f043 0310 	orr.w	r3, r3, #16
 8011bf8:	b2da      	uxtb	r2, r3
 8011bfa:	4b03      	ldr	r3, [pc, #12]	; (8011c08 <tcp_trigger_input_pcb_close+0x1c>)
 8011bfc:	701a      	strb	r2, [r3, #0]
}
 8011bfe:	bf00      	nop
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr
 8011c08:	200083d9 	.word	0x200083d9

08011c0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00a      	beq.n	8011c34 <tcp_route+0x28>
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	7a1b      	ldrb	r3, [r3, #8]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	7a1b      	ldrb	r3, [r3, #8]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fb f87e 	bl	800cd2c <netif_get_by_index>
 8011c30:	4603      	mov	r3, r0
 8011c32:	e003      	b.n	8011c3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f003 fb05 	bl	8015244 <ip4_route>
 8011c3a:	4603      	mov	r3, r0
  }
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011c44:	b590      	push	{r4, r7, lr}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	603b      	str	r3, [r7, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d105      	bne.n	8011c66 <tcp_create_segment+0x22>
 8011c5a:	4b44      	ldr	r3, [pc, #272]	; (8011d6c <tcp_create_segment+0x128>)
 8011c5c:	22a3      	movs	r2, #163	; 0xa3
 8011c5e:	4944      	ldr	r1, [pc, #272]	; (8011d70 <tcp_create_segment+0x12c>)
 8011c60:	4844      	ldr	r0, [pc, #272]	; (8011d74 <tcp_create_segment+0x130>)
 8011c62:	f004 ff81 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d105      	bne.n	8011c78 <tcp_create_segment+0x34>
 8011c6c:	4b3f      	ldr	r3, [pc, #252]	; (8011d6c <tcp_create_segment+0x128>)
 8011c6e:	22a4      	movs	r2, #164	; 0xa4
 8011c70:	4941      	ldr	r1, [pc, #260]	; (8011d78 <tcp_create_segment+0x134>)
 8011c72:	4840      	ldr	r0, [pc, #256]	; (8011d74 <tcp_create_segment+0x130>)
 8011c74:	f004 ff78 	bl	8016b68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	f003 0304 	and.w	r3, r3, #4
 8011c84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011c86:	2003      	movs	r0, #3
 8011c88:	f7fa fce8 	bl	800c65c <memp_malloc>
 8011c8c:	6138      	str	r0, [r7, #16]
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d104      	bne.n	8011c9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011c94:	68b8      	ldr	r0, [r7, #8]
 8011c96:	f7fb fbd7 	bl	800d448 <pbuf_free>
    return NULL;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	e061      	b.n	8011d62 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ca4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	891a      	ldrh	r2, [r3, #8]
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d205      	bcs.n	8011cca <tcp_create_segment+0x86>
 8011cbe:	4b2b      	ldr	r3, [pc, #172]	; (8011d6c <tcp_create_segment+0x128>)
 8011cc0:	22b0      	movs	r2, #176	; 0xb0
 8011cc2:	492e      	ldr	r1, [pc, #184]	; (8011d7c <tcp_create_segment+0x138>)
 8011cc4:	482b      	ldr	r0, [pc, #172]	; (8011d74 <tcp_create_segment+0x130>)
 8011cc6:	f004 ff4f 	bl	8016b68 <iprintf>
  seg->len = p->tot_len - optlen;
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	891a      	ldrh	r2, [r3, #8]
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011cda:	2114      	movs	r1, #20
 8011cdc:	68b8      	ldr	r0, [r7, #8]
 8011cde:	f7fb fb1d 	bl	800d31c <pbuf_add_header>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d004      	beq.n	8011cf2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011ce8:	6938      	ldr	r0, [r7, #16]
 8011cea:	f7fc ffe6 	bl	800ecba <tcp_seg_free>
    return NULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	e037      	b.n	8011d62 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8ada      	ldrh	r2, [r3, #22]
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	68dc      	ldr	r4, [r3, #12]
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7f9 ff15 	bl	800bb34 <lwip_htons>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	8b1a      	ldrh	r2, [r3, #24]
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	68dc      	ldr	r4, [r3, #12]
 8011d16:	4610      	mov	r0, r2
 8011d18:	f7f9 ff0c 	bl	800bb34 <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	68dc      	ldr	r4, [r3, #12]
 8011d24:	6838      	ldr	r0, [r7, #0]
 8011d26:	f7f9 ff1a 	bl	800bb5e <lwip_htonl>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011d2e:	7dfb      	ldrb	r3, [r7, #23]
 8011d30:	089b      	lsrs	r3, r3, #2
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	3305      	adds	r3, #5
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	031b      	lsls	r3, r3, #12
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	4313      	orrs	r3, r2
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	68dc      	ldr	r4, [r3, #12]
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	f7f9 fef2 	bl	800bb34 <lwip_htons>
 8011d50:	4603      	mov	r3, r0
 8011d52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	749a      	strb	r2, [r3, #18]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011d60:	693b      	ldr	r3, [r7, #16]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd90      	pop	{r4, r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801a7a4 	.word	0x0801a7a4
 8011d70:	0801a7d8 	.word	0x0801a7d8
 8011d74:	0801a7f8 	.word	0x0801a7f8
 8011d78:	0801a820 	.word	0x0801a820
 8011d7c:	0801a844 	.word	0x0801a844

08011d80 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	607b      	str	r3, [r7, #4]
 8011d88:	4603      	mov	r3, r0
 8011d8a:	73fb      	strb	r3, [r7, #15]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	81bb      	strh	r3, [r7, #12]
 8011d90:	4613      	mov	r3, r2
 8011d92:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011d94:	89bb      	ldrh	r3, [r7, #12]
 8011d96:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d105      	bne.n	8011daa <tcp_pbuf_prealloc+0x2a>
 8011d9e:	4b30      	ldr	r3, [pc, #192]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011da0:	22e8      	movs	r2, #232	; 0xe8
 8011da2:	4930      	ldr	r1, [pc, #192]	; (8011e64 <tcp_pbuf_prealloc+0xe4>)
 8011da4:	4830      	ldr	r0, [pc, #192]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011da6:	f004 fedf 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d105      	bne.n	8011dbc <tcp_pbuf_prealloc+0x3c>
 8011db0:	4b2b      	ldr	r3, [pc, #172]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011db2:	22e9      	movs	r2, #233	; 0xe9
 8011db4:	492d      	ldr	r1, [pc, #180]	; (8011e6c <tcp_pbuf_prealloc+0xec>)
 8011db6:	482c      	ldr	r0, [pc, #176]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011db8:	f004 fed6 	bl	8016b68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011dbc:	89ba      	ldrh	r2, [r7, #12]
 8011dbe:	897b      	ldrh	r3, [r7, #10]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d221      	bcs.n	8011e08 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011dc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011dc8:	f003 0302 	and.w	r3, r3, #2
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d111      	bne.n	8011df4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011dd0:	6a3b      	ldr	r3, [r7, #32]
 8011dd2:	8b5b      	ldrh	r3, [r3, #26]
 8011dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d115      	bne.n	8011e08 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d007      	beq.n	8011df4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011dec:	6a3b      	ldr	r3, [r7, #32]
 8011dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d009      	beq.n	8011e08 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011df4:	89bb      	ldrh	r3, [r7, #12]
 8011df6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011dfa:	f023 0203 	bic.w	r2, r3, #3
 8011dfe:	897b      	ldrh	r3, [r7, #10]
 8011e00:	4293      	cmp	r3, r2
 8011e02:	bf28      	it	cs
 8011e04:	4613      	movcs	r3, r2
 8011e06:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011e08:	8af9      	ldrh	r1, [r7, #22]
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
 8011e0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fb f835 	bl	800ce80 <pbuf_alloc>
 8011e16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e019      	b.n	8011e56 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d006      	beq.n	8011e38 <tcp_pbuf_prealloc+0xb8>
 8011e2a:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011e2c:	f240 120b 	movw	r2, #267	; 0x10b
 8011e30:	490f      	ldr	r1, [pc, #60]	; (8011e70 <tcp_pbuf_prealloc+0xf0>)
 8011e32:	480d      	ldr	r0, [pc, #52]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011e34:	f004 fe98 	bl	8016b68 <iprintf>
  *oversize = p->len - length;
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	895a      	ldrh	r2, [r3, #10]
 8011e3c:	89bb      	ldrh	r3, [r7, #12]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	89ba      	ldrh	r2, [r7, #12]
 8011e4a:	811a      	strh	r2, [r3, #8]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	891a      	ldrh	r2, [r3, #8]
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	815a      	strh	r2, [r3, #10]
  return p;
 8011e54:	693b      	ldr	r3, [r7, #16]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	0801a7a4 	.word	0x0801a7a4
 8011e64:	0801a85c 	.word	0x0801a85c
 8011e68:	0801a7f8 	.word	0x0801a7f8
 8011e6c:	0801a880 	.word	0x0801a880
 8011e70:	0801a8a0 	.word	0x0801a8a0

08011e74 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d106      	bne.n	8011e94 <tcp_write_checks+0x20>
 8011e86:	4b33      	ldr	r3, [pc, #204]	; (8011f54 <tcp_write_checks+0xe0>)
 8011e88:	f240 1233 	movw	r2, #307	; 0x133
 8011e8c:	4932      	ldr	r1, [pc, #200]	; (8011f58 <tcp_write_checks+0xe4>)
 8011e8e:	4833      	ldr	r0, [pc, #204]	; (8011f5c <tcp_write_checks+0xe8>)
 8011e90:	f004 fe6a 	bl	8016b68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	7d1b      	ldrb	r3, [r3, #20]
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	d00e      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011ea0:	2b07      	cmp	r3, #7
 8011ea2:	d00a      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d006      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011eb0:	2b03      	cmp	r3, #3
 8011eb2:	d002      	beq.n	8011eba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011eb4:	f06f 030a 	mvn.w	r3, #10
 8011eb8:	e048      	b.n	8011f4c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011eba:	887b      	ldrh	r3, [r7, #2]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <tcp_write_checks+0x50>
    return ERR_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e043      	b.n	8011f4c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011eca:	887a      	ldrh	r2, [r7, #2]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d909      	bls.n	8011ee4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8b5b      	ldrh	r3, [r3, #26]
 8011ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee2:	e033      	b.n	8011f4c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011eea:	2b08      	cmp	r3, #8
 8011eec:	d909      	bls.n	8011f02 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8b5b      	ldrh	r3, [r3, #26]
 8011ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f00:	e024      	b.n	8011f4c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00f      	beq.n	8011f2c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d11a      	bne.n	8011f4a <tcp_write_checks+0xd6>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d116      	bne.n	8011f4a <tcp_write_checks+0xd6>
 8011f1c:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <tcp_write_checks+0xe0>)
 8011f1e:	f240 1255 	movw	r2, #341	; 0x155
 8011f22:	490f      	ldr	r1, [pc, #60]	; (8011f60 <tcp_write_checks+0xec>)
 8011f24:	480d      	ldr	r0, [pc, #52]	; (8011f5c <tcp_write_checks+0xe8>)
 8011f26:	f004 fe1f 	bl	8016b68 <iprintf>
 8011f2a:	e00e      	b.n	8011f4a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d103      	bne.n	8011f3c <tcp_write_checks+0xc8>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d006      	beq.n	8011f4a <tcp_write_checks+0xd6>
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <tcp_write_checks+0xe0>)
 8011f3e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011f42:	4908      	ldr	r1, [pc, #32]	; (8011f64 <tcp_write_checks+0xf0>)
 8011f44:	4805      	ldr	r0, [pc, #20]	; (8011f5c <tcp_write_checks+0xe8>)
 8011f46:	f004 fe0f 	bl	8016b68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0801a7a4 	.word	0x0801a7a4
 8011f58:	0801a8b4 	.word	0x0801a8b4
 8011f5c:	0801a7f8 	.word	0x0801a7f8
 8011f60:	0801a8d4 	.word	0x0801a8d4
 8011f64:	0801a910 	.word	0x0801a910

08011f68 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011f68:	b590      	push	{r4, r7, lr}
 8011f6a:	b09b      	sub	sp, #108	; 0x6c
 8011f6c:	af04      	add	r7, sp, #16
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4611      	mov	r1, r2
 8011f74:	461a      	mov	r2, r3
 8011f76:	460b      	mov	r3, r1
 8011f78:	80fb      	strh	r3, [r7, #6]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011f82:	2300      	movs	r3, #0
 8011f84:	653b      	str	r3, [r7, #80]	; 0x50
 8011f86:	2300      	movs	r3, #0
 8011f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f8e:	2300      	movs	r3, #0
 8011f90:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011f92:	2300      	movs	r3, #0
 8011f94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d109      	bne.n	8011fc4 <tcp_write+0x5c>
 8011fb0:	4ba4      	ldr	r3, [pc, #656]	; (8012244 <tcp_write+0x2dc>)
 8011fb2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011fb6:	49a4      	ldr	r1, [pc, #656]	; (8012248 <tcp_write+0x2e0>)
 8011fb8:	48a4      	ldr	r0, [pc, #656]	; (801224c <tcp_write+0x2e4>)
 8011fba:	f004 fdd5 	bl	8016b68 <iprintf>
 8011fbe:	f06f 030f 	mvn.w	r3, #15
 8011fc2:	e32a      	b.n	801261a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fca:	085b      	lsrs	r3, r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	bf28      	it	cs
 8011fd6:	4613      	movcs	r3, r2
 8011fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d102      	bne.n	8011fe6 <tcp_write+0x7e>
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fe4:	e000      	b.n	8011fe8 <tcp_write+0x80>
 8011fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d109      	bne.n	8012004 <tcp_write+0x9c>
 8011ff0:	4b94      	ldr	r3, [pc, #592]	; (8012244 <tcp_write+0x2dc>)
 8011ff2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011ff6:	4996      	ldr	r1, [pc, #600]	; (8012250 <tcp_write+0x2e8>)
 8011ff8:	4894      	ldr	r0, [pc, #592]	; (801224c <tcp_write+0x2e4>)
 8011ffa:	f004 fdb5 	bl	8016b68 <iprintf>
 8011ffe:	f06f 030f 	mvn.w	r3, #15
 8012002:	e30a      	b.n	801261a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012004:	88fb      	ldrh	r3, [r7, #6]
 8012006:	4619      	mov	r1, r3
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f7ff ff33 	bl	8011e74 <tcp_write_checks>
 801200e:	4603      	mov	r3, r0
 8012010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012014:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <tcp_write+0xba>
    return err;
 801201c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012020:	e2fb      	b.n	801261a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012028:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801202c:	2300      	movs	r3, #0
 801202e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 80f6 	beq.w	8012228 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	653b      	str	r3, [r7, #80]	; 0x50
 8012042:	e002      	b.n	801204a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1f8      	bne.n	8012044 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012054:	7a9b      	ldrb	r3, [r3, #10]
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	b29b      	uxth	r3, r3
 801205a:	f003 0304 	and.w	r3, r3, #4
 801205e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012064:	891b      	ldrh	r3, [r3, #8]
 8012066:	4619      	mov	r1, r3
 8012068:	8c3b      	ldrh	r3, [r7, #32]
 801206a:	440b      	add	r3, r1
 801206c:	429a      	cmp	r2, r3
 801206e:	da06      	bge.n	801207e <tcp_write+0x116>
 8012070:	4b74      	ldr	r3, [pc, #464]	; (8012244 <tcp_write+0x2dc>)
 8012072:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012076:	4977      	ldr	r1, [pc, #476]	; (8012254 <tcp_write+0x2ec>)
 8012078:	4874      	ldr	r0, [pc, #464]	; (801224c <tcp_write+0x2e4>)
 801207a:	f004 fd75 	bl	8016b68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012080:	891a      	ldrh	r2, [r3, #8]
 8012082:	8c3b      	ldrh	r3, [r7, #32]
 8012084:	4413      	add	r3, r2
 8012086:	b29b      	uxth	r3, r3
 8012088:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012094:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012096:	8a7b      	ldrh	r3, [r7, #18]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d026      	beq.n	80120ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801209c:	8a7b      	ldrh	r3, [r7, #18]
 801209e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d206      	bcs.n	80120b2 <tcp_write+0x14a>
 80120a4:	4b67      	ldr	r3, [pc, #412]	; (8012244 <tcp_write+0x2dc>)
 80120a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80120aa:	496b      	ldr	r1, [pc, #428]	; (8012258 <tcp_write+0x2f0>)
 80120ac:	4867      	ldr	r0, [pc, #412]	; (801224c <tcp_write+0x2e4>)
 80120ae:	f004 fd5b 	bl	8016b68 <iprintf>
      seg = last_unsent;
 80120b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80120b6:	8a7b      	ldrh	r3, [r7, #18]
 80120b8:	88fa      	ldrh	r2, [r7, #6]
 80120ba:	4293      	cmp	r3, r2
 80120bc:	bf28      	it	cs
 80120be:	4613      	movcs	r3, r2
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120c4:	4293      	cmp	r3, r2
 80120c6:	bf28      	it	cs
 80120c8:	4613      	movcs	r3, r2
 80120ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80120cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120d2:	4413      	add	r3, r2
 80120d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80120d8:	8a7a      	ldrh	r2, [r7, #18]
 80120da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	b29b      	uxth	r3, r3
 80120e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80120e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80120ea:	8a7b      	ldrh	r3, [r7, #18]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <tcp_write+0x1a0>
 80120f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120f4:	88fb      	ldrh	r3, [r7, #6]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d006      	beq.n	8012108 <tcp_write+0x1a0>
 80120fa:	4b52      	ldr	r3, [pc, #328]	; (8012244 <tcp_write+0x2dc>)
 80120fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012100:	4956      	ldr	r1, [pc, #344]	; (801225c <tcp_write+0x2f4>)
 8012102:	4852      	ldr	r0, [pc, #328]	; (801224c <tcp_write+0x2e4>)
 8012104:	f004 fd30 	bl	8016b68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012108:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	429a      	cmp	r2, r3
 8012110:	f080 8167 	bcs.w	80123e2 <tcp_write+0x47a>
 8012114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012116:	2b00      	cmp	r3, #0
 8012118:	f000 8163 	beq.w	80123e2 <tcp_write+0x47a>
 801211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211e:	891b      	ldrh	r3, [r3, #8]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 815e 	beq.w	80123e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012126:	88fa      	ldrh	r2, [r7, #6]
 8012128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801212c:	1ad2      	subs	r2, r2, r3
 801212e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012130:	4293      	cmp	r3, r2
 8012132:	bfa8      	it	ge
 8012134:	4613      	movge	r3, r2
 8012136:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801213c:	797b      	ldrb	r3, [r7, #5]
 801213e:	f003 0301 	and.w	r3, r3, #1
 8012142:	2b00      	cmp	r3, #0
 8012144:	d027      	beq.n	8012196 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012146:	f107 0012 	add.w	r0, r7, #18
 801214a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801214c:	8bf9      	ldrh	r1, [r7, #30]
 801214e:	2301      	movs	r3, #1
 8012150:	9302      	str	r3, [sp, #8]
 8012152:	797b      	ldrb	r3, [r7, #5]
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	4603      	mov	r3, r0
 801215c:	2000      	movs	r0, #0
 801215e:	f7ff fe0f 	bl	8011d80 <tcp_pbuf_prealloc>
 8012162:	6578      	str	r0, [r7, #84]	; 0x54
 8012164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012166:	2b00      	cmp	r3, #0
 8012168:	f000 8225 	beq.w	80125b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801216c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801216e:	6858      	ldr	r0, [r3, #4]
 8012170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	4413      	add	r3, r2
 8012178:	8bfa      	ldrh	r2, [r7, #30]
 801217a:	4619      	mov	r1, r3
 801217c:	f004 fc69 	bl	8016a52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012182:	f7fb f9ef 	bl	800d564 <pbuf_clen>
 8012186:	4603      	mov	r3, r0
 8012188:	461a      	mov	r2, r3
 801218a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801218e:	4413      	add	r3, r2
 8012190:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012194:	e041      	b.n	801221a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	637b      	str	r3, [r7, #52]	; 0x34
 801219c:	e002      	b.n	80121a4 <tcp_write+0x23c>
 801219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	637b      	str	r3, [r7, #52]	; 0x34
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1f8      	bne.n	801219e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ae:	7b1b      	ldrb	r3, [r3, #12]
 80121b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d115      	bne.n	80121e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80121b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121be:	8952      	ldrh	r2, [r2, #10]
 80121c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d10d      	bne.n	80121e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80121c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d006      	beq.n	80121de <tcp_write+0x276>
 80121d0:	4b1c      	ldr	r3, [pc, #112]	; (8012244 <tcp_write+0x2dc>)
 80121d2:	f240 2231 	movw	r2, #561	; 0x231
 80121d6:	4922      	ldr	r1, [pc, #136]	; (8012260 <tcp_write+0x2f8>)
 80121d8:	481c      	ldr	r0, [pc, #112]	; (801224c <tcp_write+0x2e4>)
 80121da:	f004 fcc5 	bl	8016b68 <iprintf>
          extendlen = seglen;
 80121de:	8bfb      	ldrh	r3, [r7, #30]
 80121e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80121e2:	e01a      	b.n	801221a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80121e4:	8bfb      	ldrh	r3, [r7, #30]
 80121e6:	2201      	movs	r2, #1
 80121e8:	4619      	mov	r1, r3
 80121ea:	2000      	movs	r0, #0
 80121ec:	f7fa fe48 	bl	800ce80 <pbuf_alloc>
 80121f0:	6578      	str	r0, [r7, #84]	; 0x54
 80121f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f000 81e0 	beq.w	80125ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80121fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	441a      	add	r2, r3
 8012202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012204:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012206:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012208:	f7fb f9ac 	bl	800d564 <pbuf_clen>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012214:	4413      	add	r3, r2
 8012216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801221a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801221e:	8bfb      	ldrh	r3, [r7, #30]
 8012220:	4413      	add	r3, r2
 8012222:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012226:	e0dc      	b.n	80123e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801222e:	2b00      	cmp	r3, #0
 8012230:	f000 80d7 	beq.w	80123e2 <tcp_write+0x47a>
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <tcp_write+0x2dc>)
 8012236:	f240 224a 	movw	r2, #586	; 0x24a
 801223a:	490a      	ldr	r1, [pc, #40]	; (8012264 <tcp_write+0x2fc>)
 801223c:	4803      	ldr	r0, [pc, #12]	; (801224c <tcp_write+0x2e4>)
 801223e:	f004 fc93 	bl	8016b68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012242:	e0ce      	b.n	80123e2 <tcp_write+0x47a>
 8012244:	0801a7a4 	.word	0x0801a7a4
 8012248:	0801a944 	.word	0x0801a944
 801224c:	0801a7f8 	.word	0x0801a7f8
 8012250:	0801a95c 	.word	0x0801a95c
 8012254:	0801a990 	.word	0x0801a990
 8012258:	0801a9a8 	.word	0x0801a9a8
 801225c:	0801a9c8 	.word	0x0801a9c8
 8012260:	0801a9e8 	.word	0x0801a9e8
 8012264:	0801aa14 	.word	0x0801aa14
    struct pbuf *p;
    u16_t left = len - pos;
 8012268:	88fa      	ldrh	r2, [r7, #6]
 801226a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012272:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012276:	b29b      	uxth	r3, r3
 8012278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801227e:	8b7a      	ldrh	r2, [r7, #26]
 8012280:	8bbb      	ldrh	r3, [r7, #28]
 8012282:	4293      	cmp	r3, r2
 8012284:	bf28      	it	cs
 8012286:	4613      	movcs	r3, r2
 8012288:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801228a:	797b      	ldrb	r3, [r7, #5]
 801228c:	f003 0301 	and.w	r3, r3, #1
 8012290:	2b00      	cmp	r3, #0
 8012292:	d036      	beq.n	8012302 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012298:	b29a      	uxth	r2, r3
 801229a:	8b3b      	ldrh	r3, [r7, #24]
 801229c:	4413      	add	r3, r2
 801229e:	b299      	uxth	r1, r3
 80122a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	bf0c      	ite	eq
 80122a6:	2301      	moveq	r3, #1
 80122a8:	2300      	movne	r3, #0
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	f107 0012 	add.w	r0, r7, #18
 80122b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80122b2:	9302      	str	r3, [sp, #8]
 80122b4:	797b      	ldrb	r3, [r7, #5]
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	4603      	mov	r3, r0
 80122be:	2036      	movs	r0, #54	; 0x36
 80122c0:	f7ff fd5e 	bl	8011d80 <tcp_pbuf_prealloc>
 80122c4:	6338      	str	r0, [r7, #48]	; 0x30
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8178 	beq.w	80125be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80122ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d0:	895b      	ldrh	r3, [r3, #10]
 80122d2:	8b3a      	ldrh	r2, [r7, #24]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d906      	bls.n	80122e6 <tcp_write+0x37e>
 80122d8:	4b8c      	ldr	r3, [pc, #560]	; (801250c <tcp_write+0x5a4>)
 80122da:	f240 2266 	movw	r2, #614	; 0x266
 80122de:	498c      	ldr	r1, [pc, #560]	; (8012510 <tcp_write+0x5a8>)
 80122e0:	488c      	ldr	r0, [pc, #560]	; (8012514 <tcp_write+0x5ac>)
 80122e2:	f004 fc41 	bl	8016b68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80122e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80122ee:	18d0      	adds	r0, r2, r3
 80122f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	8b3a      	ldrh	r2, [r7, #24]
 80122fa:	4619      	mov	r1, r3
 80122fc:	f004 fba9 	bl	8016a52 <memcpy>
 8012300:	e02f      	b.n	8012362 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012302:	8a7b      	ldrh	r3, [r7, #18]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d006      	beq.n	8012316 <tcp_write+0x3ae>
 8012308:	4b80      	ldr	r3, [pc, #512]	; (801250c <tcp_write+0x5a4>)
 801230a:	f240 2271 	movw	r2, #625	; 0x271
 801230e:	4982      	ldr	r1, [pc, #520]	; (8012518 <tcp_write+0x5b0>)
 8012310:	4880      	ldr	r0, [pc, #512]	; (8012514 <tcp_write+0x5ac>)
 8012312:	f004 fc29 	bl	8016b68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012316:	8b3b      	ldrh	r3, [r7, #24]
 8012318:	2201      	movs	r2, #1
 801231a:	4619      	mov	r1, r3
 801231c:	2036      	movs	r0, #54	; 0x36
 801231e:	f7fa fdaf 	bl	800ce80 <pbuf_alloc>
 8012322:	6178      	str	r0, [r7, #20]
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2b00      	cmp	r3, #0
 8012328:	f000 814b 	beq.w	80125c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801232c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012330:	68ba      	ldr	r2, [r7, #8]
 8012332:	441a      	add	r2, r3
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012338:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801233c:	b29b      	uxth	r3, r3
 801233e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012342:	4619      	mov	r1, r3
 8012344:	2036      	movs	r0, #54	; 0x36
 8012346:	f7fa fd9b 	bl	800ce80 <pbuf_alloc>
 801234a:	6338      	str	r0, [r7, #48]	; 0x30
 801234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234e:	2b00      	cmp	r3, #0
 8012350:	d103      	bne.n	801235a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012352:	6978      	ldr	r0, [r7, #20]
 8012354:	f7fb f878 	bl	800d448 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012358:	e136      	b.n	80125c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801235a:	6979      	ldr	r1, [r7, #20]
 801235c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801235e:	f7fb f941 	bl	800d5e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012364:	f7fb f8fe 	bl	800d564 <pbuf_clen>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012370:	4413      	add	r3, r2
 8012372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801237a:	2b09      	cmp	r3, #9
 801237c:	d903      	bls.n	8012386 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801237e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012380:	f7fb f862 	bl	800d448 <pbuf_free>
      goto memerr;
 8012384:	e120      	b.n	80125c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801238a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801238e:	441a      	add	r2, r3
 8012390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012394:	9300      	str	r3, [sp, #0]
 8012396:	4613      	mov	r3, r2
 8012398:	2200      	movs	r2, #0
 801239a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f7ff fc51 	bl	8011c44 <tcp_create_segment>
 80123a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80123a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 810d 	beq.w	80125c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80123ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d102      	bne.n	80123b8 <tcp_write+0x450>
      queue = seg;
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	647b      	str	r3, [r7, #68]	; 0x44
 80123b6:	e00c      	b.n	80123d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80123b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d106      	bne.n	80123cc <tcp_write+0x464>
 80123be:	4b53      	ldr	r3, [pc, #332]	; (801250c <tcp_write+0x5a4>)
 80123c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80123c4:	4955      	ldr	r1, [pc, #340]	; (801251c <tcp_write+0x5b4>)
 80123c6:	4853      	ldr	r0, [pc, #332]	; (8012514 <tcp_write+0x5ac>)
 80123c8:	f004 fbce 	bl	8016b68 <iprintf>
      prev_seg->next = seg;
 80123cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80123d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80123d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123da:	8b3b      	ldrh	r3, [r7, #24]
 80123dc:	4413      	add	r3, r2
 80123de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80123e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123e6:	88fb      	ldrh	r3, [r7, #6]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	f4ff af3d 	bcc.w	8012268 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80123ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d02c      	beq.n	801244e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80123f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123fa:	e01e      	b.n	801243a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80123fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fe:	891a      	ldrh	r2, [r3, #8]
 8012400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012402:	4413      	add	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d110      	bne.n	8012434 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012418:	8952      	ldrh	r2, [r2, #10]
 801241a:	4413      	add	r3, r2
 801241c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801241e:	68b9      	ldr	r1, [r7, #8]
 8012420:	4618      	mov	r0, r3
 8012422:	f004 fb16 	bl	8016a52 <memcpy>
        p->len += oversize_used;
 8012426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012428:	895a      	ldrh	r2, [r3, #10]
 801242a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801242c:	4413      	add	r3, r2
 801242e:	b29a      	uxth	r2, r3
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	62fb      	str	r3, [r7, #44]	; 0x2c
 801243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1dd      	bne.n	80123fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012442:	891a      	ldrh	r2, [r3, #8]
 8012444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012446:	4413      	add	r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801244c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801244e:	8a7a      	ldrh	r2, [r7, #18]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012458:	2b00      	cmp	r3, #0
 801245a:	d018      	beq.n	801248e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801245c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801245e:	2b00      	cmp	r3, #0
 8012460:	d106      	bne.n	8012470 <tcp_write+0x508>
 8012462:	4b2a      	ldr	r3, [pc, #168]	; (801250c <tcp_write+0x5a4>)
 8012464:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012468:	492d      	ldr	r1, [pc, #180]	; (8012520 <tcp_write+0x5b8>)
 801246a:	482a      	ldr	r0, [pc, #168]	; (8012514 <tcp_write+0x5ac>)
 801246c:	f004 fb7c 	bl	8016b68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012476:	4618      	mov	r0, r3
 8012478:	f7fb f8b4 	bl	800d5e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801247c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801247e:	891a      	ldrh	r2, [r3, #8]
 8012480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012482:	891b      	ldrh	r3, [r3, #8]
 8012484:	4413      	add	r3, r2
 8012486:	b29a      	uxth	r2, r3
 8012488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801248a:	811a      	strh	r2, [r3, #8]
 801248c:	e037      	b.n	80124fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 801248e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d034      	beq.n	80124fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012496:	2b00      	cmp	r3, #0
 8012498:	d003      	beq.n	80124a2 <tcp_write+0x53a>
 801249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <tcp_write+0x548>
 80124a2:	4b1a      	ldr	r3, [pc, #104]	; (801250c <tcp_write+0x5a4>)
 80124a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80124a8:	491e      	ldr	r1, [pc, #120]	; (8012524 <tcp_write+0x5bc>)
 80124aa:	481a      	ldr	r0, [pc, #104]	; (8012514 <tcp_write+0x5ac>)
 80124ac:	f004 fb5c 	bl	8016b68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80124b6:	e009      	b.n	80124cc <tcp_write+0x564>
      p->tot_len += extendlen;
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	891a      	ldrh	r2, [r3, #8]
 80124bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124be:	4413      	add	r3, r2
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d1f1      	bne.n	80124b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80124d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d6:	891a      	ldrh	r2, [r3, #8]
 80124d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124da:	4413      	add	r3, r2
 80124dc:	b29a      	uxth	r2, r3
 80124de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80124e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e4:	895a      	ldrh	r2, [r3, #10]
 80124e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124e8:	4413      	add	r3, r2
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80124f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124f2:	891a      	ldrh	r2, [r3, #8]
 80124f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124f6:	4413      	add	r3, r2
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80124fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012500:	2b00      	cmp	r3, #0
 8012502:	d111      	bne.n	8012528 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012508:	66da      	str	r2, [r3, #108]	; 0x6c
 801250a:	e010      	b.n	801252e <tcp_write+0x5c6>
 801250c:	0801a7a4 	.word	0x0801a7a4
 8012510:	0801aa44 	.word	0x0801aa44
 8012514:	0801a7f8 	.word	0x0801a7f8
 8012518:	0801aa84 	.word	0x0801aa84
 801251c:	0801aa94 	.word	0x0801aa94
 8012520:	0801aaa8 	.word	0x0801aaa8
 8012524:	0801aae0 	.word	0x0801aae0
  } else {
    last_unsent->next = queue;
 8012528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801252c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012532:	88fb      	ldrh	r3, [r7, #6]
 8012534:	441a      	add	r2, r3
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	b29a      	uxth	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012552:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00e      	beq.n	801257e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10a      	bne.n	801257e <tcp_write+0x616>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801256c:	2b00      	cmp	r3, #0
 801256e:	d106      	bne.n	801257e <tcp_write+0x616>
 8012570:	4b2c      	ldr	r3, [pc, #176]	; (8012624 <tcp_write+0x6bc>)
 8012572:	f240 3212 	movw	r2, #786	; 0x312
 8012576:	492c      	ldr	r1, [pc, #176]	; (8012628 <tcp_write+0x6c0>)
 8012578:	482c      	ldr	r0, [pc, #176]	; (801262c <tcp_write+0x6c4>)
 801257a:	f004 faf5 	bl	8016b68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012580:	2b00      	cmp	r3, #0
 8012582:	d016      	beq.n	80125b2 <tcp_write+0x64a>
 8012584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d012      	beq.n	80125b2 <tcp_write+0x64a>
 801258c:	797b      	ldrb	r3, [r7, #5]
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10d      	bne.n	80125b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29c      	uxth	r4, r3
 801259e:	2008      	movs	r0, #8
 80125a0:	f7f9 fac8 	bl	800bb34 <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	461a      	mov	r2, r3
 80125a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	4322      	orrs	r2, r4
 80125ae:	b292      	uxth	r2, r2
 80125b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	e031      	b.n	801261a <tcp_write+0x6b2>
          goto memerr;
 80125b6:	bf00      	nop
 80125b8:	e006      	b.n	80125c8 <tcp_write+0x660>
            goto memerr;
 80125ba:	bf00      	nop
 80125bc:	e004      	b.n	80125c8 <tcp_write+0x660>
        goto memerr;
 80125be:	bf00      	nop
 80125c0:	e002      	b.n	80125c8 <tcp_write+0x660>
        goto memerr;
 80125c2:	bf00      	nop
 80125c4:	e000      	b.n	80125c8 <tcp_write+0x660>
      goto memerr;
 80125c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	8b5b      	ldrh	r3, [r3, #26]
 80125cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80125d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80125dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80125de:	f7fa ff33 	bl	800d448 <pbuf_free>
  }
  if (queue != NULL) {
 80125e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <tcp_write+0x686>
    tcp_segs_free(queue);
 80125e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80125ea:	f7fc fb51 	bl	800ec90 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d00e      	beq.n	8012616 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10a      	bne.n	8012616 <tcp_write+0x6ae>
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012604:	2b00      	cmp	r3, #0
 8012606:	d106      	bne.n	8012616 <tcp_write+0x6ae>
 8012608:	4b06      	ldr	r3, [pc, #24]	; (8012624 <tcp_write+0x6bc>)
 801260a:	f240 3227 	movw	r2, #807	; 0x327
 801260e:	4906      	ldr	r1, [pc, #24]	; (8012628 <tcp_write+0x6c0>)
 8012610:	4806      	ldr	r0, [pc, #24]	; (801262c <tcp_write+0x6c4>)
 8012612:	f004 faa9 	bl	8016b68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801261a:	4618      	mov	r0, r3
 801261c:	375c      	adds	r7, #92	; 0x5c
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}
 8012622:	bf00      	nop
 8012624:	0801a7a4 	.word	0x0801a7a4
 8012628:	0801ab18 	.word	0x0801ab18
 801262c:	0801a7f8 	.word	0x0801a7f8

08012630 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012630:	b590      	push	{r4, r7, lr}
 8012632:	b08b      	sub	sp, #44	; 0x2c
 8012634:	af02      	add	r7, sp, #8
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	460b      	mov	r3, r1
 801263a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801263c:	2300      	movs	r3, #0
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	2300      	movs	r3, #0
 8012642:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012644:	2300      	movs	r3, #0
 8012646:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <tcp_split_unsent_seg+0x2c>
 801264e:	4b95      	ldr	r3, [pc, #596]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012650:	f240 324b 	movw	r2, #843	; 0x34b
 8012654:	4994      	ldr	r1, [pc, #592]	; (80128a8 <tcp_split_unsent_seg+0x278>)
 8012656:	4895      	ldr	r0, [pc, #596]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 8012658:	f004 fa86 	bl	8016b68 <iprintf>

  useg = pcb->unsent;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801266c:	e116      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801266e:	887b      	ldrh	r3, [r7, #2]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d109      	bne.n	8012688 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012674:	4b8b      	ldr	r3, [pc, #556]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012676:	f240 3253 	movw	r2, #851	; 0x353
 801267a:	498d      	ldr	r1, [pc, #564]	; (80128b0 <tcp_split_unsent_seg+0x280>)
 801267c:	488b      	ldr	r0, [pc, #556]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 801267e:	f004 fa73 	bl	8016b68 <iprintf>
    return ERR_VAL;
 8012682:	f06f 0305 	mvn.w	r3, #5
 8012686:	e109      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	887a      	ldrh	r2, [r7, #2]
 801268e:	429a      	cmp	r2, r3
 8012690:	d301      	bcc.n	8012696 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012692:	2300      	movs	r3, #0
 8012694:	e102      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801269a:	887a      	ldrh	r2, [r7, #2]
 801269c:	429a      	cmp	r2, r3
 801269e:	d906      	bls.n	80126ae <tcp_split_unsent_seg+0x7e>
 80126a0:	4b80      	ldr	r3, [pc, #512]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 80126a2:	f240 325b 	movw	r2, #859	; 0x35b
 80126a6:	4983      	ldr	r1, [pc, #524]	; (80128b4 <tcp_split_unsent_seg+0x284>)
 80126a8:	4880      	ldr	r0, [pc, #512]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 80126aa:	f004 fa5d 	bl	8016b68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	891b      	ldrh	r3, [r3, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_split_unsent_seg+0x94>
 80126b6:	4b7b      	ldr	r3, [pc, #492]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 80126b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80126bc:	497e      	ldr	r1, [pc, #504]	; (80128b8 <tcp_split_unsent_seg+0x288>)
 80126be:	487b      	ldr	r0, [pc, #492]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 80126c0:	f004 fa52 	bl	8016b68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	7a9b      	ldrb	r3, [r3, #10]
 80126c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0304 	and.w	r3, r3, #4
 80126d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	891a      	ldrh	r2, [r3, #8]
 80126da:	887b      	ldrh	r3, [r7, #2]
 80126dc:	1ad3      	subs	r3, r2, r3
 80126de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80126e0:	7bbb      	ldrb	r3, [r7, #14]
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	89bb      	ldrh	r3, [r7, #12]
 80126e6:	4413      	add	r3, r2
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126ee:	4619      	mov	r1, r3
 80126f0:	2036      	movs	r0, #54	; 0x36
 80126f2:	f7fa fbc5 	bl	800ce80 <pbuf_alloc>
 80126f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f000 80b7 	beq.w	801286e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	891a      	ldrh	r2, [r3, #8]
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	891b      	ldrh	r3, [r3, #8]
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	b29a      	uxth	r2, r3
 801270e:	887b      	ldrh	r3, [r7, #2]
 8012710:	4413      	add	r3, r2
 8012712:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	6858      	ldr	r0, [r3, #4]
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	685a      	ldr	r2, [r3, #4]
 801271c:	7bbb      	ldrb	r3, [r7, #14]
 801271e:	18d1      	adds	r1, r2, r3
 8012720:	897b      	ldrh	r3, [r7, #10]
 8012722:	89ba      	ldrh	r2, [r7, #12]
 8012724:	f7fb f886 	bl	800d834 <pbuf_copy_partial>
 8012728:	4603      	mov	r3, r0
 801272a:	461a      	mov	r2, r3
 801272c:	89bb      	ldrh	r3, [r7, #12]
 801272e:	4293      	cmp	r3, r2
 8012730:	f040 809f 	bne.w	8012872 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	b29b      	uxth	r3, r3
 801273c:	4618      	mov	r0, r3
 801273e:	f7f9 f9f9 	bl	800bb34 <lwip_htons>
 8012742:	4603      	mov	r3, r0
 8012744:	b2db      	uxtb	r3, r3
 8012746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801274a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801274c:	2300      	movs	r3, #0
 801274e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012750:	7efb      	ldrb	r3, [r7, #27]
 8012752:	f003 0308 	and.w	r3, r3, #8
 8012756:	2b00      	cmp	r3, #0
 8012758:	d007      	beq.n	801276a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801275a:	7efb      	ldrb	r3, [r7, #27]
 801275c:	f023 0308 	bic.w	r3, r3, #8
 8012760:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012762:	7ebb      	ldrb	r3, [r7, #26]
 8012764:	f043 0308 	orr.w	r3, r3, #8
 8012768:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801276a:	7efb      	ldrb	r3, [r7, #27]
 801276c:	f003 0301 	and.w	r3, r3, #1
 8012770:	2b00      	cmp	r3, #0
 8012772:	d007      	beq.n	8012784 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012774:	7efb      	ldrb	r3, [r7, #27]
 8012776:	f023 0301 	bic.w	r3, r3, #1
 801277a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801277c:	7ebb      	ldrb	r3, [r7, #26]
 801277e:	f043 0301 	orr.w	r3, r3, #1
 8012782:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f7f9 f9e7 	bl	800bb5e <lwip_htonl>
 8012790:	4602      	mov	r2, r0
 8012792:	887b      	ldrh	r3, [r7, #2]
 8012794:	18d1      	adds	r1, r2, r3
 8012796:	7eba      	ldrb	r2, [r7, #26]
 8012798:	7bfb      	ldrb	r3, [r7, #15]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	460b      	mov	r3, r1
 801279e:	6939      	ldr	r1, [r7, #16]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fa4f 	bl	8011c44 <tcp_create_segment>
 80127a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d063      	beq.n	8012876 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fa fed6 	bl	800d564 <pbuf_clen>
 80127b8:	4603      	mov	r3, r0
 80127ba:	461a      	mov	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	6858      	ldr	r0, [r3, #4]
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	891a      	ldrh	r2, [r3, #8]
 80127d6:	89bb      	ldrh	r3, [r7, #12]
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	b29b      	uxth	r3, r3
 80127dc:	4619      	mov	r1, r3
 80127de:	f7fa fcad 	bl	800d13c <pbuf_realloc>
  useg->len -= remainder;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	891a      	ldrh	r2, [r3, #8]
 80127e6:	89bb      	ldrh	r3, [r7, #12]
 80127e8:	1ad3      	subs	r3, r2, r3
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	b29c      	uxth	r4, r3
 80127f8:	7efb      	ldrb	r3, [r7, #27]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f9 f999 	bl	800bb34 <lwip_htons>
 8012802:	4603      	mov	r3, r0
 8012804:	461a      	mov	r2, r3
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	4322      	orrs	r2, r4
 801280c:	b292      	uxth	r2, r2
 801280e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	f7fa fea5 	bl	800d564 <pbuf_clen>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012824:	4413      	add	r3, r2
 8012826:	b29a      	uxth	r2, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7fa fe96 	bl	800d564 <pbuf_clen>
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012842:	4413      	add	r3, r2
 8012844:	b29a      	uxth	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	69fa      	ldr	r2, [r7, #28]
 8012858:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d103      	bne.n	801286a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	e016      	b.n	801289c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801286e:	bf00      	nop
 8012870:	e002      	b.n	8012878 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012872:	bf00      	nop
 8012874:	e000      	b.n	8012878 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012876:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d006      	beq.n	801288c <tcp_split_unsent_seg+0x25c>
 801287e:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012880:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012884:	490d      	ldr	r1, [pc, #52]	; (80128bc <tcp_split_unsent_seg+0x28c>)
 8012886:	4809      	ldr	r0, [pc, #36]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 8012888:	f004 f96e 	bl	8016b68 <iprintf>
  if (p != NULL) {
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012892:	6938      	ldr	r0, [r7, #16]
 8012894:	f7fa fdd8 	bl	800d448 <pbuf_free>
  }

  return ERR_MEM;
 8012898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801289c:	4618      	mov	r0, r3
 801289e:	3724      	adds	r7, #36	; 0x24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd90      	pop	{r4, r7, pc}
 80128a4:	0801a7a4 	.word	0x0801a7a4
 80128a8:	0801ab38 	.word	0x0801ab38
 80128ac:	0801a7f8 	.word	0x0801a7f8
 80128b0:	0801ab5c 	.word	0x0801ab5c
 80128b4:	0801ab80 	.word	0x0801ab80
 80128b8:	0801ab90 	.word	0x0801ab90
 80128bc:	0801aba0 	.word	0x0801aba0

080128c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80128c0:	b590      	push	{r4, r7, lr}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <tcp_send_fin+0x1c>
 80128ce:	4b21      	ldr	r3, [pc, #132]	; (8012954 <tcp_send_fin+0x94>)
 80128d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80128d4:	4920      	ldr	r1, [pc, #128]	; (8012958 <tcp_send_fin+0x98>)
 80128d6:	4821      	ldr	r0, [pc, #132]	; (801295c <tcp_send_fin+0x9c>)
 80128d8:	f004 f946 	bl	8016b68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d02e      	beq.n	8012942 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e8:	60fb      	str	r3, [r7, #12]
 80128ea:	e002      	b.n	80128f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f8      	bne.n	80128ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	899b      	ldrh	r3, [r3, #12]
 8012900:	b29b      	uxth	r3, r3
 8012902:	4618      	mov	r0, r3
 8012904:	f7f9 f916 	bl	800bb34 <lwip_htons>
 8012908:	4603      	mov	r3, r0
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0307 	and.w	r3, r3, #7
 8012910:	2b00      	cmp	r3, #0
 8012912:	d116      	bne.n	8012942 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	899b      	ldrh	r3, [r3, #12]
 801291a:	b29c      	uxth	r4, r3
 801291c:	2001      	movs	r0, #1
 801291e:	f7f9 f909 	bl	800bb34 <lwip_htons>
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4322      	orrs	r2, r4
 801292c:	b292      	uxth	r2, r2
 801292e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	8b5b      	ldrh	r3, [r3, #26]
 8012934:	f043 0320 	orr.w	r3, r3, #32
 8012938:	b29a      	uxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801293e:	2300      	movs	r3, #0
 8012940:	e004      	b.n	801294c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012942:	2101      	movs	r1, #1
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f000 f80b 	bl	8012960 <tcp_enqueue_flags>
 801294a:	4603      	mov	r3, r0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3714      	adds	r7, #20
 8012950:	46bd      	mov	sp, r7
 8012952:	bd90      	pop	{r4, r7, pc}
 8012954:	0801a7a4 	.word	0x0801a7a4
 8012958:	0801abac 	.word	0x0801abac
 801295c:	0801a7f8 	.word	0x0801a7f8

08012960 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08a      	sub	sp, #40	; 0x28
 8012964:	af02      	add	r7, sp, #8
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801296c:	2300      	movs	r3, #0
 801296e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012974:	78fb      	ldrb	r3, [r7, #3]
 8012976:	f003 0303 	and.w	r3, r3, #3
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <tcp_enqueue_flags+0x2c>
 801297e:	4b67      	ldr	r3, [pc, #412]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012980:	f240 4211 	movw	r2, #1041	; 0x411
 8012984:	4966      	ldr	r1, [pc, #408]	; (8012b20 <tcp_enqueue_flags+0x1c0>)
 8012986:	4867      	ldr	r0, [pc, #412]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012988:	f004 f8ee 	bl	8016b68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <tcp_enqueue_flags+0x40>
 8012992:	4b62      	ldr	r3, [pc, #392]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012994:	f240 4213 	movw	r2, #1043	; 0x413
 8012998:	4963      	ldr	r1, [pc, #396]	; (8012b28 <tcp_enqueue_flags+0x1c8>)
 801299a:	4862      	ldr	r0, [pc, #392]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 801299c:	f004 f8e4 	bl	8016b68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80129a0:	78fb      	ldrb	r3, [r7, #3]
 80129a2:	f003 0302 	and.w	r3, r3, #2
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80129aa:	2301      	movs	r3, #1
 80129ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80129ae:	7ffb      	ldrb	r3, [r7, #31]
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	f003 0304 	and.w	r3, r3, #4
 80129b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
 80129bc:	b29b      	uxth	r3, r3
 80129be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129c2:	4619      	mov	r1, r3
 80129c4:	2036      	movs	r0, #54	; 0x36
 80129c6:	f7fa fa5b 	bl	800ce80 <pbuf_alloc>
 80129ca:	6138      	str	r0, [r7, #16]
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d109      	bne.n	80129e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	8b5b      	ldrh	r3, [r3, #26]
 80129d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129da:	b29a      	uxth	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129e4:	e095      	b.n	8012b12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	895a      	ldrh	r2, [r3, #10]
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d206      	bcs.n	8012a00 <tcp_enqueue_flags+0xa0>
 80129f2:	4b4a      	ldr	r3, [pc, #296]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 80129f4:	f240 4239 	movw	r2, #1081	; 0x439
 80129f8:	494c      	ldr	r1, [pc, #304]	; (8012b2c <tcp_enqueue_flags+0x1cc>)
 80129fa:	484a      	ldr	r0, [pc, #296]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 80129fc:	f004 f8b4 	bl	8016b68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012a04:	78fa      	ldrb	r2, [r7, #3]
 8012a06:	7ffb      	ldrb	r3, [r7, #31]
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	6939      	ldr	r1, [r7, #16]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7ff f918 	bl	8011c44 <tcp_create_segment>
 8012a14:	60f8      	str	r0, [r7, #12]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d109      	bne.n	8012a30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	8b5b      	ldrh	r3, [r3, #26]
 8012a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a2e:	e070      	b.n	8012b12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	f003 0303 	and.w	r3, r3, #3
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <tcp_enqueue_flags+0xea>
 8012a3c:	4b37      	ldr	r3, [pc, #220]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012a3e:	f240 4242 	movw	r2, #1090	; 0x442
 8012a42:	493b      	ldr	r1, [pc, #236]	; (8012b30 <tcp_enqueue_flags+0x1d0>)
 8012a44:	4837      	ldr	r0, [pc, #220]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012a46:	f004 f88f 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	891b      	ldrh	r3, [r3, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d006      	beq.n	8012a60 <tcp_enqueue_flags+0x100>
 8012a52:	4b32      	ldr	r3, [pc, #200]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012a54:	f240 4243 	movw	r2, #1091	; 0x443
 8012a58:	4936      	ldr	r1, [pc, #216]	; (8012b34 <tcp_enqueue_flags+0x1d4>)
 8012a5a:	4832      	ldr	r0, [pc, #200]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012a5c:	f004 f884 	bl	8016b68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d103      	bne.n	8012a70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	68fa      	ldr	r2, [r7, #12]
 8012a6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a6e:	e00d      	b.n	8012a8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a74:	61bb      	str	r3, [r7, #24]
 8012a76:	e002      	b.n	8012a7e <tcp_enqueue_flags+0x11e>
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	61bb      	str	r3, [r7, #24]
 8012a7e:	69bb      	ldr	r3, [r7, #24]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1f8      	bne.n	8012a78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	f003 0302 	and.w	r3, r3, #2
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d104      	bne.n	8012aa8 <tcp_enqueue_flags+0x148>
 8012a9e:	78fb      	ldrb	r3, [r7, #3]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012ab2:	78fb      	ldrb	r3, [r7, #3]
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d006      	beq.n	8012aca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	8b5b      	ldrh	r3, [r3, #26]
 8012ac0:	f043 0320 	orr.w	r3, r3, #32
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7fa fd48 	bl	800d564 <pbuf_clen>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ade:	4413      	add	r3, r2
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00e      	beq.n	8012b10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10a      	bne.n	8012b10 <tcp_enqueue_flags+0x1b0>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d106      	bne.n	8012b10 <tcp_enqueue_flags+0x1b0>
 8012b02:	4b06      	ldr	r3, [pc, #24]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012b04:	f240 4265 	movw	r2, #1125	; 0x465
 8012b08:	490b      	ldr	r1, [pc, #44]	; (8012b38 <tcp_enqueue_flags+0x1d8>)
 8012b0a:	4806      	ldr	r0, [pc, #24]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012b0c:	f004 f82c 	bl	8016b68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3720      	adds	r7, #32
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	0801a7a4 	.word	0x0801a7a4
 8012b20:	0801abc8 	.word	0x0801abc8
 8012b24:	0801a7f8 	.word	0x0801a7f8
 8012b28:	0801ac20 	.word	0x0801ac20
 8012b2c:	0801ac40 	.word	0x0801ac40
 8012b30:	0801ac7c 	.word	0x0801ac7c
 8012b34:	0801ac94 	.word	0x0801ac94
 8012b38:	0801acc0 	.word	0x0801acc0

08012b3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012b3c:	b5b0      	push	{r4, r5, r7, lr}
 8012b3e:	b08a      	sub	sp, #40	; 0x28
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <tcp_output+0x1c>
 8012b4a:	4b9e      	ldr	r3, [pc, #632]	; (8012dc4 <tcp_output+0x288>)
 8012b4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012b50:	499d      	ldr	r1, [pc, #628]	; (8012dc8 <tcp_output+0x28c>)
 8012b52:	489e      	ldr	r0, [pc, #632]	; (8012dcc <tcp_output+0x290>)
 8012b54:	f004 f808 	bl	8016b68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	7d1b      	ldrb	r3, [r3, #20]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d106      	bne.n	8012b6e <tcp_output+0x32>
 8012b60:	4b98      	ldr	r3, [pc, #608]	; (8012dc4 <tcp_output+0x288>)
 8012b62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012b66:	499a      	ldr	r1, [pc, #616]	; (8012dd0 <tcp_output+0x294>)
 8012b68:	4898      	ldr	r0, [pc, #608]	; (8012dcc <tcp_output+0x290>)
 8012b6a:	f003 fffd 	bl	8016b68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012b6e:	4b99      	ldr	r3, [pc, #612]	; (8012dd4 <tcp_output+0x298>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d101      	bne.n	8012b7c <tcp_output+0x40>
    return ERR_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e1ce      	b.n	8012f1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	bf28      	it	cs
 8012b8c:	4613      	movcs	r3, r2
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10b      	bne.n	8012bb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	8b5b      	ldrh	r3, [r3, #26]
 8012ba2:	f003 0302 	and.w	r3, r3, #2
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 81aa 	beq.w	8012f00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 fdcb 	bl	8013748 <tcp_send_empty_ack>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	e1b1      	b.n	8012f1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012bb6:	6879      	ldr	r1, [r7, #4]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	3304      	adds	r3, #4
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff f824 	bl	8011c0c <tcp_route>
 8012bc4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d102      	bne.n	8012bd2 <tcp_output+0x96>
    return ERR_RTE;
 8012bcc:	f06f 0303 	mvn.w	r3, #3
 8012bd0:	e1a3      	b.n	8012f1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d003      	beq.n	8012be0 <tcp_output+0xa4>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d111      	bne.n	8012c04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d002      	beq.n	8012bec <tcp_output+0xb0>
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	3304      	adds	r3, #4
 8012bea:	e000      	b.n	8012bee <tcp_output+0xb2>
 8012bec:	2300      	movs	r3, #0
 8012bee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d102      	bne.n	8012bfc <tcp_output+0xc0>
      return ERR_RTE;
 8012bf6:	f06f 0303 	mvn.w	r3, #3
 8012bfa:	e18e      	b.n	8012f1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7f8 ffa7 	bl	800bb5e <lwip_htonl>
 8012c10:	4602      	mov	r2, r0
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c16:	1ad3      	subs	r3, r2, r3
 8012c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c1a:	8912      	ldrh	r2, [r2, #8]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d227      	bcs.n	8012c74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	4293      	cmp	r3, r2
 8012c30:	d114      	bne.n	8012c5c <tcp_output+0x120>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d110      	bne.n	8012c5c <tcp_output+0x120>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10b      	bne.n	8012c5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	8b5b      	ldrh	r3, [r3, #26]
 8012c60:	f003 0302 	and.w	r3, r3, #2
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f000 814d 	beq.w	8012f04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fd6c 	bl	8013748 <tcp_send_empty_ack>
 8012c70:	4603      	mov	r3, r0
 8012c72:	e152      	b.n	8012f1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2200      	movs	r2, #0
 8012c78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012c82:	6a3b      	ldr	r3, [r7, #32]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 811c 	beq.w	8012ec2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012c8a:	e002      	b.n	8012c92 <tcp_output+0x156>
 8012c8c:	6a3b      	ldr	r3, [r7, #32]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	623b      	str	r3, [r7, #32]
 8012c92:	6a3b      	ldr	r3, [r7, #32]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1f8      	bne.n	8012c8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c9a:	e112      	b.n	8012ec2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	899b      	ldrh	r3, [r3, #12]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f8 ff45 	bl	800bb34 <lwip_htons>
 8012caa:	4603      	mov	r3, r0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f003 0304 	and.w	r3, r3, #4
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d006      	beq.n	8012cc4 <tcp_output+0x188>
 8012cb6:	4b43      	ldr	r3, [pc, #268]	; (8012dc4 <tcp_output+0x288>)
 8012cb8:	f240 5236 	movw	r2, #1334	; 0x536
 8012cbc:	4946      	ldr	r1, [pc, #280]	; (8012dd8 <tcp_output+0x29c>)
 8012cbe:	4843      	ldr	r0, [pc, #268]	; (8012dcc <tcp_output+0x290>)
 8012cc0:	f003 ff52 	bl	8016b68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d01f      	beq.n	8012d0c <tcp_output+0x1d0>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	8b5b      	ldrh	r3, [r3, #26]
 8012cd0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d119      	bne.n	8012d0c <tcp_output+0x1d0>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00b      	beq.n	8012cf8 <tcp_output+0x1bc>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d110      	bne.n	8012d0c <tcp_output+0x1d0>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cee:	891a      	ldrh	r2, [r3, #8]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d209      	bcs.n	8012d0c <tcp_output+0x1d0>
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d004      	beq.n	8012d0c <tcp_output+0x1d0>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d08:	2b08      	cmp	r3, #8
 8012d0a:	d901      	bls.n	8012d10 <tcp_output+0x1d4>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e000      	b.n	8012d12 <tcp_output+0x1d6>
 8012d10:	2300      	movs	r3, #0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	8b5b      	ldrh	r3, [r3, #26]
 8012d1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 80e4 	beq.w	8012eec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	7d1b      	ldrb	r3, [r3, #20]
 8012d28:	2b02      	cmp	r3, #2
 8012d2a:	d00d      	beq.n	8012d48 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29c      	uxth	r4, r3
 8012d34:	2010      	movs	r0, #16
 8012d36:	f7f8 fefd 	bl	800bb34 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	4322      	orrs	r2, r4
 8012d44:	b292      	uxth	r2, r2
 8012d46:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012d48:	697a      	ldr	r2, [r7, #20]
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d4e:	f000 f909 	bl	8012f64 <tcp_output_segment>
 8012d52:	4603      	mov	r3, r0
 8012d54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d009      	beq.n	8012d72 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8b5b      	ldrh	r3, [r3, #26]
 8012d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	835a      	strh	r2, [r3, #26]
      return err;
 8012d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d70:	e0d3      	b.n	8012f1a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7d1b      	ldrb	r3, [r3, #20]
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d006      	beq.n	8012d90 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	8b5b      	ldrh	r3, [r3, #26]
 8012d86:	f023 0303 	bic.w	r3, r3, #3
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f8 fee1 	bl	800bb5e <lwip_htonl>
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	891b      	ldrh	r3, [r3, #8]
 8012da2:	461d      	mov	r5, r3
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	899b      	ldrh	r3, [r3, #12]
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 fec1 	bl	800bb34 <lwip_htons>
 8012db2:	4603      	mov	r3, r0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	f003 0303 	and.w	r3, r3, #3
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00e      	beq.n	8012ddc <tcp_output+0x2a0>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	e00d      	b.n	8012dde <tcp_output+0x2a2>
 8012dc2:	bf00      	nop
 8012dc4:	0801a7a4 	.word	0x0801a7a4
 8012dc8:	0801ace8 	.word	0x0801ace8
 8012dcc:	0801a7f8 	.word	0x0801a7f8
 8012dd0:	0801ad00 	.word	0x0801ad00
 8012dd4:	20014ab8 	.word	0x20014ab8
 8012dd8:	0801ad28 	.word	0x0801ad28
 8012ddc:	2300      	movs	r3, #0
 8012dde:	442b      	add	r3, r5
 8012de0:	4423      	add	r3, r4
 8012de2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	da02      	bge.n	8012df6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	68ba      	ldr	r2, [r7, #8]
 8012df4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	891b      	ldrh	r3, [r3, #8]
 8012dfa:	461c      	mov	r4, r3
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	899b      	ldrh	r3, [r3, #12]
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f8 fe95 	bl	800bb34 <lwip_htons>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 0303 	and.w	r3, r3, #3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d001      	beq.n	8012e1a <tcp_output+0x2de>
 8012e16:	2301      	movs	r3, #1
 8012e18:	e000      	b.n	8012e1c <tcp_output+0x2e0>
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	4423      	add	r3, r4
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d049      	beq.n	8012eb6 <tcp_output+0x37a>
      seg->next = NULL;
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	2200      	movs	r2, #0
 8012e26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d105      	bne.n	8012e3c <tcp_output+0x300>
        pcb->unacked = seg;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e34:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	623b      	str	r3, [r7, #32]
 8012e3a:	e03f      	b.n	8012ebc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	68db      	ldr	r3, [r3, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f8 fe8b 	bl	800bb5e <lwip_htonl>
 8012e48:	4604      	mov	r4, r0
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7f8 fe84 	bl	800bb5e <lwip_htonl>
 8012e56:	4603      	mov	r3, r0
 8012e58:	1ae3      	subs	r3, r4, r3
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	da24      	bge.n	8012ea8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3370      	adds	r3, #112	; 0x70
 8012e62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e64:	e002      	b.n	8012e6c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d011      	beq.n	8012e98 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7f8 fe6e 	bl	800bb5e <lwip_htonl>
 8012e82:	4604      	mov	r4, r0
 8012e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7f8 fe67 	bl	800bb5e <lwip_htonl>
 8012e90:	4603      	mov	r3, r0
 8012e92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	dbe6      	blt.n	8012e66 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	e009      	b.n	8012ebc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012ea8:	6a3b      	ldr	r3, [r7, #32]
 8012eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	623b      	str	r3, [r7, #32]
 8012eb4:	e002      	b.n	8012ebc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eb8:	f7fb feff 	bl	800ecba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ec0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d012      	beq.n	8012eee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f8 fe45 	bl	800bb5e <lwip_htonl>
 8012ed4:	4602      	mov	r2, r0
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ede:	8912      	ldrh	r2, [r2, #8]
 8012ee0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ee2:	69ba      	ldr	r2, [r7, #24]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	f4bf aed9 	bcs.w	8012c9c <tcp_output+0x160>
 8012eea:	e000      	b.n	8012eee <tcp_output+0x3b2>
      break;
 8012eec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d108      	bne.n	8012f08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012efe:	e004      	b.n	8012f0a <tcp_output+0x3ce>
    goto output_done;
 8012f00:	bf00      	nop
 8012f02:	e002      	b.n	8012f0a <tcp_output+0x3ce>
    goto output_done;
 8012f04:	bf00      	nop
 8012f06:	e000      	b.n	8012f0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012f08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	8b5b      	ldrh	r3, [r3, #26]
 8012f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3728      	adds	r7, #40	; 0x28
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bdb0      	pop	{r4, r5, r7, pc}
 8012f22:	bf00      	nop

08012f24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d106      	bne.n	8012f40 <tcp_output_segment_busy+0x1c>
 8012f32:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <tcp_output_segment_busy+0x34>)
 8012f34:	f240 529a 	movw	r2, #1434	; 0x59a
 8012f38:	4908      	ldr	r1, [pc, #32]	; (8012f5c <tcp_output_segment_busy+0x38>)
 8012f3a:	4809      	ldr	r0, [pc, #36]	; (8012f60 <tcp_output_segment_busy+0x3c>)
 8012f3c:	f003 fe14 	bl	8016b68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	7b9b      	ldrb	r3, [r3, #14]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d001      	beq.n	8012f4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e000      	b.n	8012f50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012f4e:	2300      	movs	r3, #0
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	0801a7a4 	.word	0x0801a7a4
 8012f5c:	0801ad40 	.word	0x0801ad40
 8012f60:	0801a7f8 	.word	0x0801a7f8

08012f64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012f64:	b5b0      	push	{r4, r5, r7, lr}
 8012f66:	b08c      	sub	sp, #48	; 0x30
 8012f68:	af04      	add	r7, sp, #16
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d106      	bne.n	8012f84 <tcp_output_segment+0x20>
 8012f76:	4b63      	ldr	r3, [pc, #396]	; (8013104 <tcp_output_segment+0x1a0>)
 8012f78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012f7c:	4962      	ldr	r1, [pc, #392]	; (8013108 <tcp_output_segment+0x1a4>)
 8012f7e:	4863      	ldr	r0, [pc, #396]	; (801310c <tcp_output_segment+0x1a8>)
 8012f80:	f003 fdf2 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d106      	bne.n	8012f98 <tcp_output_segment+0x34>
 8012f8a:	4b5e      	ldr	r3, [pc, #376]	; (8013104 <tcp_output_segment+0x1a0>)
 8012f8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012f90:	495f      	ldr	r1, [pc, #380]	; (8013110 <tcp_output_segment+0x1ac>)
 8012f92:	485e      	ldr	r0, [pc, #376]	; (801310c <tcp_output_segment+0x1a8>)
 8012f94:	f003 fde8 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <tcp_output_segment+0x48>
 8012f9e:	4b59      	ldr	r3, [pc, #356]	; (8013104 <tcp_output_segment+0x1a0>)
 8012fa0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012fa4:	495b      	ldr	r1, [pc, #364]	; (8013114 <tcp_output_segment+0x1b0>)
 8012fa6:	4859      	ldr	r0, [pc, #356]	; (801310c <tcp_output_segment+0x1a8>)
 8012fa8:	f003 fdde 	bl	8016b68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f7ff ffb9 	bl	8012f24 <tcp_output_segment_busy>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	e09f      	b.n	80130fc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	68dc      	ldr	r4, [r3, #12]
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	f7f8 fdca 	bl	800bb5e <lwip_htonl>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	68dc      	ldr	r4, [r3, #12]
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	f7f8 fdac 	bl	800bb34 <lwip_htons>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe4:	68ba      	ldr	r2, [r7, #8]
 8012fe6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012fe8:	441a      	add	r2, r3
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	68db      	ldr	r3, [r3, #12]
 8012ff2:	3314      	adds	r3, #20
 8012ff4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	7a9b      	ldrb	r3, [r3, #10]
 8012ffa:	f003 0301 	and.w	r3, r3, #1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d015      	beq.n	801302e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3304      	adds	r3, #4
 8013006:	461a      	mov	r2, r3
 8013008:	6879      	ldr	r1, [r7, #4]
 801300a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801300e:	f7fc fa37 	bl	800f480 <tcp_eff_send_mss_netif>
 8013012:	4603      	mov	r3, r0
 8013014:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013016:	8b7b      	ldrh	r3, [r7, #26]
 8013018:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801301c:	4618      	mov	r0, r3
 801301e:	f7f8 fd9e 	bl	800bb5e <lwip_htonl>
 8013022:	4602      	mov	r2, r0
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013028:	69fb      	ldr	r3, [r7, #28]
 801302a:	3304      	adds	r3, #4
 801302c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013034:	2b00      	cmp	r3, #0
 8013036:	da02      	bge.n	801303e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	2200      	movs	r2, #0
 801303c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10c      	bne.n	8013060 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013046:	4b34      	ldr	r3, [pc, #208]	; (8013118 <tcp_output_segment+0x1b4>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	4618      	mov	r0, r3
 8013056:	f7f8 fd82 	bl	800bb5e <lwip_htonl>
 801305a:	4602      	mov	r2, r0
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	68da      	ldr	r2, [r3, #12]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	8959      	ldrh	r1, [r3, #10]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	8b3a      	ldrh	r2, [r7, #24]
 801307a:	1a8a      	subs	r2, r1, r2
 801307c:	b292      	uxth	r2, r2
 801307e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	8919      	ldrh	r1, [r3, #8]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	8b3a      	ldrh	r2, [r7, #24]
 801308c:	1a8a      	subs	r2, r1, r2
 801308e:	b292      	uxth	r2, r2
 8013090:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	68d2      	ldr	r2, [r2, #12]
 801309a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	2200      	movs	r2, #0
 80130a2:	741a      	strb	r2, [r3, #16]
 80130a4:	2200      	movs	r2, #0
 80130a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	f103 0214 	add.w	r2, r3, #20
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	7a9b      	ldrb	r3, [r3, #10]
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	f003 0304 	and.w	r3, r3, #4
 80130ba:	4413      	add	r3, r2
 80130bc:	69fa      	ldr	r2, [r7, #28]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d006      	beq.n	80130d0 <tcp_output_segment+0x16c>
 80130c2:	4b10      	ldr	r3, [pc, #64]	; (8013104 <tcp_output_segment+0x1a0>)
 80130c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80130c8:	4914      	ldr	r1, [pc, #80]	; (801311c <tcp_output_segment+0x1b8>)
 80130ca:	4810      	ldr	r0, [pc, #64]	; (801310c <tcp_output_segment+0x1a8>)
 80130cc:	f003 fd4c 	bl	8016b68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	6858      	ldr	r0, [r3, #4]
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	1d1c      	adds	r4, r3, #4
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	7add      	ldrb	r5, [r3, #11]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	7a9b      	ldrb	r3, [r3, #10]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	9202      	str	r2, [sp, #8]
 80130e6:	2206      	movs	r2, #6
 80130e8:	9201      	str	r2, [sp, #4]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	462b      	mov	r3, r5
 80130ee:	4622      	mov	r2, r4
 80130f0:	f002 fa66 	bl	80155c0 <ip4_output_if>
 80130f4:	4603      	mov	r3, r0
 80130f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80130f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3720      	adds	r7, #32
 8013100:	46bd      	mov	sp, r7
 8013102:	bdb0      	pop	{r4, r5, r7, pc}
 8013104:	0801a7a4 	.word	0x0801a7a4
 8013108:	0801ad68 	.word	0x0801ad68
 801310c:	0801a7f8 	.word	0x0801a7f8
 8013110:	0801ad88 	.word	0x0801ad88
 8013114:	0801ada8 	.word	0x0801ada8
 8013118:	20014aa8 	.word	0x20014aa8
 801311c:	0801adcc 	.word	0x0801adcc

08013120 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013120:	b5b0      	push	{r4, r5, r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d106      	bne.n	801313c <tcp_rexmit_rto_prepare+0x1c>
 801312e:	4b31      	ldr	r3, [pc, #196]	; (80131f4 <tcp_rexmit_rto_prepare+0xd4>)
 8013130:	f240 6263 	movw	r2, #1635	; 0x663
 8013134:	4930      	ldr	r1, [pc, #192]	; (80131f8 <tcp_rexmit_rto_prepare+0xd8>)
 8013136:	4831      	ldr	r0, [pc, #196]	; (80131fc <tcp_rexmit_rto_prepare+0xdc>)
 8013138:	f003 fd16 	bl	8016b68 <iprintf>

  if (pcb->unacked == NULL) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013140:	2b00      	cmp	r3, #0
 8013142:	d102      	bne.n	801314a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013144:	f06f 0305 	mvn.w	r3, #5
 8013148:	e050      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801314e:	60fb      	str	r3, [r7, #12]
 8013150:	e00b      	b.n	801316a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013152:	68f8      	ldr	r0, [r7, #12]
 8013154:	f7ff fee6 	bl	8012f24 <tcp_output_segment_busy>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d002      	beq.n	8013164 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801315e:	f06f 0305 	mvn.w	r3, #5
 8013162:	e043      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60fb      	str	r3, [r7, #12]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d1ef      	bne.n	8013152 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f7ff fed6 	bl	8012f24 <tcp_output_segment_busy>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d002      	beq.n	8013184 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801317e:	f06f 0305 	mvn.w	r3, #5
 8013182:	e033      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2200      	movs	r2, #0
 8013198:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8b5b      	ldrh	r3, [r3, #26]
 801319e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68db      	ldr	r3, [r3, #12]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7f8 fcd5 	bl	800bb5e <lwip_htonl>
 80131b4:	4604      	mov	r4, r0
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	891b      	ldrh	r3, [r3, #8]
 80131ba:	461d      	mov	r5, r3
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f8 fcb5 	bl	800bb34 <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0303 	and.w	r3, r3, #3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <tcp_rexmit_rto_prepare+0xba>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <tcp_rexmit_rto_prepare+0xbc>
 80131da:	2300      	movs	r3, #0
 80131dc:	442b      	add	r3, r5
 80131de:	18e2      	adds	r2, r4, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3710      	adds	r7, #16
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bdb0      	pop	{r4, r5, r7, pc}
 80131f4:	0801a7a4 	.word	0x0801a7a4
 80131f8:	0801ade0 	.word	0x0801ade0
 80131fc:	0801a7f8 	.word	0x0801a7f8

08013200 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <tcp_rexmit_rto_commit+0x1c>
 801320e:	4b0d      	ldr	r3, [pc, #52]	; (8013244 <tcp_rexmit_rto_commit+0x44>)
 8013210:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013214:	490c      	ldr	r1, [pc, #48]	; (8013248 <tcp_rexmit_rto_commit+0x48>)
 8013216:	480d      	ldr	r0, [pc, #52]	; (801324c <tcp_rexmit_rto_commit+0x4c>)
 8013218:	f003 fca6 	bl	8016b68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013222:	2bff      	cmp	r3, #255	; 0xff
 8013224:	d007      	beq.n	8013236 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801322c:	3301      	adds	r3, #1
 801322e:	b2da      	uxtb	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7ff fc80 	bl	8012b3c <tcp_output>
}
 801323c:	bf00      	nop
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	0801a7a4 	.word	0x0801a7a4
 8013248:	0801ae04 	.word	0x0801ae04
 801324c:	0801a7f8 	.word	0x0801a7f8

08013250 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_rexmit_rto+0x1c>
 801325e:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <tcp_rexmit_rto+0x38>)
 8013260:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013264:	4909      	ldr	r1, [pc, #36]	; (801328c <tcp_rexmit_rto+0x3c>)
 8013266:	480a      	ldr	r0, [pc, #40]	; (8013290 <tcp_rexmit_rto+0x40>)
 8013268:	f003 fc7e 	bl	8016b68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ff57 	bl	8013120 <tcp_rexmit_rto_prepare>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff ffc1 	bl	8013200 <tcp_rexmit_rto_commit>
  }
}
 801327e:	bf00      	nop
 8013280:	3708      	adds	r7, #8
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	0801a7a4 	.word	0x0801a7a4
 801328c:	0801ae28 	.word	0x0801ae28
 8013290:	0801a7f8 	.word	0x0801a7f8

08013294 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013294:	b590      	push	{r4, r7, lr}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_rexmit+0x1c>
 80132a2:	4b2f      	ldr	r3, [pc, #188]	; (8013360 <tcp_rexmit+0xcc>)
 80132a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80132a8:	492e      	ldr	r1, [pc, #184]	; (8013364 <tcp_rexmit+0xd0>)
 80132aa:	482f      	ldr	r0, [pc, #188]	; (8013368 <tcp_rexmit+0xd4>)
 80132ac:	f003 fc5c 	bl	8016b68 <iprintf>

  if (pcb->unacked == NULL) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80132b8:	f06f 0305 	mvn.w	r3, #5
 80132bc:	e04c      	b.n	8013358 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80132c4:	68b8      	ldr	r0, [r7, #8]
 80132c6:	f7ff fe2d 	bl	8012f24 <tcp_output_segment_busy>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80132d0:	f06f 0305 	mvn.w	r3, #5
 80132d4:	e040      	b.n	8013358 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	336c      	adds	r3, #108	; 0x6c
 80132e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132e4:	e002      	b.n	80132ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d011      	beq.n	8013318 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7f8 fc2e 	bl	800bb5e <lwip_htonl>
 8013302:	4604      	mov	r4, r0
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	4618      	mov	r0, r3
 801330c:	f7f8 fc27 	bl	800bb5e <lwip_htonl>
 8013310:	4603      	mov	r3, r0
 8013312:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013314:	2b00      	cmp	r3, #0
 8013316:	dbe6      	blt.n	80132e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801333c:	2bff      	cmp	r3, #255	; 0xff
 801333e:	d007      	beq.n	8013350 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013346:	3301      	adds	r3, #1
 8013348:	b2da      	uxtb	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3714      	adds	r7, #20
 801335c:	46bd      	mov	sp, r7
 801335e:	bd90      	pop	{r4, r7, pc}
 8013360:	0801a7a4 	.word	0x0801a7a4
 8013364:	0801ae44 	.word	0x0801ae44
 8013368:	0801a7f8 	.word	0x0801a7f8

0801336c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <tcp_rexmit_fast+0x1c>
 801337a:	4b2a      	ldr	r3, [pc, #168]	; (8013424 <tcp_rexmit_fast+0xb8>)
 801337c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013380:	4929      	ldr	r1, [pc, #164]	; (8013428 <tcp_rexmit_fast+0xbc>)
 8013382:	482a      	ldr	r0, [pc, #168]	; (801342c <tcp_rexmit_fast+0xc0>)
 8013384:	f003 fbf0 	bl	8016b68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801338c:	2b00      	cmp	r3, #0
 801338e:	d044      	beq.n	801341a <tcp_rexmit_fast+0xae>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8b5b      	ldrh	r3, [r3, #26]
 8013394:	f003 0304 	and.w	r3, r3, #4
 8013398:	2b00      	cmp	r3, #0
 801339a:	d13e      	bne.n	801341a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f7ff ff79 	bl	8013294 <tcp_rexmit>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d138      	bne.n	801341a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80133b4:	4293      	cmp	r3, r2
 80133b6:	bf28      	it	cs
 80133b8:	4613      	movcs	r3, r2
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	0fda      	lsrs	r2, r3, #31
 80133be:	4413      	add	r3, r2
 80133c0:	105b      	asrs	r3, r3, #1
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80133d0:	461a      	mov	r2, r3
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	429a      	cmp	r2, r3
 80133da:	d206      	bcs.n	80133ea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133f4:	4619      	mov	r1, r3
 80133f6:	0049      	lsls	r1, r1, #1
 80133f8:	440b      	add	r3, r1
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	4413      	add	r3, r2
 80133fe:	b29a      	uxth	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8b5b      	ldrh	r3, [r3, #26]
 801340a:	f043 0304 	orr.w	r3, r3, #4
 801340e:	b29a      	uxth	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801341a:	bf00      	nop
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	0801a7a4 	.word	0x0801a7a4
 8013428:	0801ae5c 	.word	0x0801ae5c
 801342c:	0801a7f8 	.word	0x0801a7f8

08013430 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	607b      	str	r3, [r7, #4]
 801343a:	460b      	mov	r3, r1
 801343c:	817b      	strh	r3, [r7, #10]
 801343e:	4613      	mov	r3, r2
 8013440:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013442:	897a      	ldrh	r2, [r7, #10]
 8013444:	893b      	ldrh	r3, [r7, #8]
 8013446:	4413      	add	r3, r2
 8013448:	b29b      	uxth	r3, r3
 801344a:	3314      	adds	r3, #20
 801344c:	b29b      	uxth	r3, r3
 801344e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013452:	4619      	mov	r1, r3
 8013454:	2022      	movs	r0, #34	; 0x22
 8013456:	f7f9 fd13 	bl	800ce80 <pbuf_alloc>
 801345a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d04d      	beq.n	80134fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013462:	897b      	ldrh	r3, [r7, #10]
 8013464:	3313      	adds	r3, #19
 8013466:	697a      	ldr	r2, [r7, #20]
 8013468:	8952      	ldrh	r2, [r2, #10]
 801346a:	4293      	cmp	r3, r2
 801346c:	db06      	blt.n	801347c <tcp_output_alloc_header_common+0x4c>
 801346e:	4b26      	ldr	r3, [pc, #152]	; (8013508 <tcp_output_alloc_header_common+0xd8>)
 8013470:	f240 7223 	movw	r2, #1827	; 0x723
 8013474:	4925      	ldr	r1, [pc, #148]	; (801350c <tcp_output_alloc_header_common+0xdc>)
 8013476:	4826      	ldr	r0, [pc, #152]	; (8013510 <tcp_output_alloc_header_common+0xe0>)
 8013478:	f003 fb76 	bl	8016b68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	685b      	ldr	r3, [r3, #4]
 8013480:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013482:	8c3b      	ldrh	r3, [r7, #32]
 8013484:	4618      	mov	r0, r3
 8013486:	f7f8 fb55 	bl	800bb34 <lwip_htons>
 801348a:	4603      	mov	r3, r0
 801348c:	461a      	mov	r2, r3
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013494:	4618      	mov	r0, r3
 8013496:	f7f8 fb4d 	bl	800bb34 <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	461a      	mov	r2, r3
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	f7f8 fb58 	bl	800bb5e <lwip_htonl>
 80134ae:	4602      	mov	r2, r0
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80134b4:	897b      	ldrh	r3, [r7, #10]
 80134b6:	089b      	lsrs	r3, r3, #2
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	3305      	adds	r3, #5
 80134bc:	b29b      	uxth	r3, r3
 80134be:	031b      	lsls	r3, r3, #12
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f8 fb31 	bl	800bb34 <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	461a      	mov	r2, r3
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80134da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f8 fb29 	bl	800bb34 <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	461a      	mov	r2, r3
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2200      	movs	r2, #0
 80134ee:	741a      	strb	r2, [r3, #16]
 80134f0:	2200      	movs	r2, #0
 80134f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2200      	movs	r2, #0
 80134f8:	749a      	strb	r2, [r3, #18]
 80134fa:	2200      	movs	r2, #0
 80134fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80134fe:	697b      	ldr	r3, [r7, #20]
}
 8013500:	4618      	mov	r0, r3
 8013502:	3718      	adds	r7, #24
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	0801a7a4 	.word	0x0801a7a4
 801350c:	0801ae7c 	.word	0x0801ae7c
 8013510:	0801a7f8 	.word	0x0801a7f8

08013514 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013514:	b5b0      	push	{r4, r5, r7, lr}
 8013516:	b08a      	sub	sp, #40	; 0x28
 8013518:	af04      	add	r7, sp, #16
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	607b      	str	r3, [r7, #4]
 801351e:	460b      	mov	r3, r1
 8013520:	817b      	strh	r3, [r7, #10]
 8013522:	4613      	mov	r3, r2
 8013524:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d106      	bne.n	801353a <tcp_output_alloc_header+0x26>
 801352c:	4b15      	ldr	r3, [pc, #84]	; (8013584 <tcp_output_alloc_header+0x70>)
 801352e:	f240 7242 	movw	r2, #1858	; 0x742
 8013532:	4915      	ldr	r1, [pc, #84]	; (8013588 <tcp_output_alloc_header+0x74>)
 8013534:	4815      	ldr	r0, [pc, #84]	; (801358c <tcp_output_alloc_header+0x78>)
 8013536:	f003 fb17 	bl	8016b68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	8adb      	ldrh	r3, [r3, #22]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	8b12      	ldrh	r2, [r2, #24]
 8013546:	68f9      	ldr	r1, [r7, #12]
 8013548:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801354a:	893d      	ldrh	r5, [r7, #8]
 801354c:	897c      	ldrh	r4, [r7, #10]
 801354e:	9103      	str	r1, [sp, #12]
 8013550:	2110      	movs	r1, #16
 8013552:	9102      	str	r1, [sp, #8]
 8013554:	9201      	str	r2, [sp, #4]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	462a      	mov	r2, r5
 801355c:	4621      	mov	r1, r4
 801355e:	f7ff ff67 	bl	8013430 <tcp_output_alloc_header_common>
 8013562:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d006      	beq.n	8013578 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013572:	441a      	add	r2, r3
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013578:	697b      	ldr	r3, [r7, #20]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3718      	adds	r7, #24
 801357e:	46bd      	mov	sp, r7
 8013580:	bdb0      	pop	{r4, r5, r7, pc}
 8013582:	bf00      	nop
 8013584:	0801a7a4 	.word	0x0801a7a4
 8013588:	0801aeac 	.word	0x0801aeac
 801358c:	0801a7f8 	.word	0x0801a7f8

08013590 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b088      	sub	sp, #32
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	4611      	mov	r1, r2
 801359c:	461a      	mov	r2, r3
 801359e:	460b      	mov	r3, r1
 80135a0:	71fb      	strb	r3, [r7, #7]
 80135a2:	4613      	mov	r3, r2
 80135a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <tcp_output_fill_options+0x2e>
 80135b0:	4b13      	ldr	r3, [pc, #76]	; (8013600 <tcp_output_fill_options+0x70>)
 80135b2:	f240 7256 	movw	r2, #1878	; 0x756
 80135b6:	4913      	ldr	r1, [pc, #76]	; (8013604 <tcp_output_fill_options+0x74>)
 80135b8:	4813      	ldr	r0, [pc, #76]	; (8013608 <tcp_output_fill_options+0x78>)
 80135ba:	f003 fad5 	bl	8016b68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	3314      	adds	r3, #20
 80135c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	f103 0214 	add.w	r2, r3, #20
 80135d0:	8bfb      	ldrh	r3, [r7, #30]
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	4619      	mov	r1, r3
 80135d6:	79fb      	ldrb	r3, [r7, #7]
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	f003 0304 	and.w	r3, r3, #4
 80135de:	440b      	add	r3, r1
 80135e0:	4413      	add	r3, r2
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d006      	beq.n	80135f6 <tcp_output_fill_options+0x66>
 80135e8:	4b05      	ldr	r3, [pc, #20]	; (8013600 <tcp_output_fill_options+0x70>)
 80135ea:	f240 7275 	movw	r2, #1909	; 0x775
 80135ee:	4907      	ldr	r1, [pc, #28]	; (801360c <tcp_output_fill_options+0x7c>)
 80135f0:	4805      	ldr	r0, [pc, #20]	; (8013608 <tcp_output_fill_options+0x78>)
 80135f2:	f003 fab9 	bl	8016b68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80135f6:	bf00      	nop
 80135f8:	3720      	adds	r7, #32
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801a7a4 	.word	0x0801a7a4
 8013604:	0801aed4 	.word	0x0801aed4
 8013608:	0801a7f8 	.word	0x0801a7f8
 801360c:	0801adcc 	.word	0x0801adcc

08013610 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b08a      	sub	sp, #40	; 0x28
 8013614:	af04      	add	r7, sp, #16
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d106      	bne.n	8013632 <tcp_output_control_segment+0x22>
 8013624:	4b1c      	ldr	r3, [pc, #112]	; (8013698 <tcp_output_control_segment+0x88>)
 8013626:	f240 7287 	movw	r2, #1927	; 0x787
 801362a:	491c      	ldr	r1, [pc, #112]	; (801369c <tcp_output_control_segment+0x8c>)
 801362c:	481c      	ldr	r0, [pc, #112]	; (80136a0 <tcp_output_control_segment+0x90>)
 801362e:	f003 fa9b 	bl	8016b68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013632:	683a      	ldr	r2, [r7, #0]
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7fe fae8 	bl	8011c0c <tcp_route>
 801363c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d102      	bne.n	801364a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013644:	23fc      	movs	r3, #252	; 0xfc
 8013646:	75fb      	strb	r3, [r7, #23]
 8013648:	e01c      	b.n	8013684 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d006      	beq.n	801365e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	7adb      	ldrb	r3, [r3, #11]
 8013654:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	7a9b      	ldrb	r3, [r3, #10]
 801365a:	757b      	strb	r3, [r7, #21]
 801365c:	e003      	b.n	8013666 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801365e:	23ff      	movs	r3, #255	; 0xff
 8013660:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013666:	7dba      	ldrb	r2, [r7, #22]
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	9302      	str	r3, [sp, #8]
 801366c:	2306      	movs	r3, #6
 801366e:	9301      	str	r3, [sp, #4]
 8013670:	7d7b      	ldrb	r3, [r7, #21]
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	4613      	mov	r3, r2
 8013676:	683a      	ldr	r2, [r7, #0]
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	68b8      	ldr	r0, [r7, #8]
 801367c:	f001 ffa0 	bl	80155c0 <ip4_output_if>
 8013680:	4603      	mov	r3, r0
 8013682:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f7f9 fedf 	bl	800d448 <pbuf_free>
  return err;
 801368a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3718      	adds	r7, #24
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	0801a7a4 	.word	0x0801a7a4
 801369c:	0801aefc 	.word	0x0801aefc
 80136a0:	0801a7f8 	.word	0x0801a7f8

080136a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b08b      	sub	sp, #44	; 0x2c
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
 80136b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d106      	bne.n	80136c6 <tcp_rst+0x22>
 80136b8:	4b1f      	ldr	r3, [pc, #124]	; (8013738 <tcp_rst+0x94>)
 80136ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80136be:	491f      	ldr	r1, [pc, #124]	; (801373c <tcp_rst+0x98>)
 80136c0:	481f      	ldr	r0, [pc, #124]	; (8013740 <tcp_rst+0x9c>)
 80136c2:	f003 fa51 	bl	8016b68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80136c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d106      	bne.n	80136da <tcp_rst+0x36>
 80136cc:	4b1a      	ldr	r3, [pc, #104]	; (8013738 <tcp_rst+0x94>)
 80136ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80136d2:	491c      	ldr	r1, [pc, #112]	; (8013744 <tcp_rst+0xa0>)
 80136d4:	481a      	ldr	r0, [pc, #104]	; (8013740 <tcp_rst+0x9c>)
 80136d6:	f003 fa47 	bl	8016b68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136da:	2300      	movs	r3, #0
 80136dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80136de:	f246 0308 	movw	r3, #24584	; 0x6008
 80136e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80136e4:	7dfb      	ldrb	r3, [r7, #23]
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	68b8      	ldr	r0, [r7, #8]
 80136ea:	f7f8 fa38 	bl	800bb5e <lwip_htonl>
 80136ee:	4602      	mov	r2, r0
 80136f0:	8abb      	ldrh	r3, [r7, #20]
 80136f2:	9303      	str	r3, [sp, #12]
 80136f4:	2314      	movs	r3, #20
 80136f6:	9302      	str	r3, [sp, #8]
 80136f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80136fa:	9301      	str	r3, [sp, #4]
 80136fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	2200      	movs	r2, #0
 8013704:	4621      	mov	r1, r4
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff fe92 	bl	8013430 <tcp_output_alloc_header_common>
 801370c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00c      	beq.n	801372e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013714:	7dfb      	ldrb	r3, [r7, #23]
 8013716:	2200      	movs	r2, #0
 8013718:	6939      	ldr	r1, [r7, #16]
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f7ff ff38 	bl	8013590 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	6939      	ldr	r1, [r7, #16]
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff ff72 	bl	8013610 <tcp_output_control_segment>
 801372c:	e000      	b.n	8013730 <tcp_rst+0x8c>
    return;
 801372e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	bd90      	pop	{r4, r7, pc}
 8013736:	bf00      	nop
 8013738:	0801a7a4 	.word	0x0801a7a4
 801373c:	0801af28 	.word	0x0801af28
 8013740:	0801a7f8 	.word	0x0801a7f8
 8013744:	0801af44 	.word	0x0801af44

08013748 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013748:	b590      	push	{r4, r7, lr}
 801374a:	b087      	sub	sp, #28
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013750:	2300      	movs	r3, #0
 8013752:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013754:	2300      	movs	r3, #0
 8013756:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d106      	bne.n	801376c <tcp_send_empty_ack+0x24>
 801375e:	4b28      	ldr	r3, [pc, #160]	; (8013800 <tcp_send_empty_ack+0xb8>)
 8013760:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013764:	4927      	ldr	r1, [pc, #156]	; (8013804 <tcp_send_empty_ack+0xbc>)
 8013766:	4828      	ldr	r0, [pc, #160]	; (8013808 <tcp_send_empty_ack+0xc0>)
 8013768:	f003 f9fe 	bl	8016b68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801376c:	7dfb      	ldrb	r3, [r7, #23]
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	b2db      	uxtb	r3, r3
 8013772:	f003 0304 	and.w	r3, r3, #4
 8013776:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013778:	7d7b      	ldrb	r3, [r7, #21]
 801377a:	b29c      	uxth	r4, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013780:	4618      	mov	r0, r3
 8013782:	f7f8 f9ec 	bl	800bb5e <lwip_htonl>
 8013786:	4603      	mov	r3, r0
 8013788:	2200      	movs	r2, #0
 801378a:	4621      	mov	r1, r4
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7ff fec1 	bl	8013514 <tcp_output_alloc_header>
 8013792:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d109      	bne.n	80137ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8b5b      	ldrh	r3, [r3, #26]
 801379e:	f043 0303 	orr.w	r3, r3, #3
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80137a8:	f06f 0301 	mvn.w	r3, #1
 80137ac:	e023      	b.n	80137f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80137ae:	7dbb      	ldrb	r3, [r7, #22]
 80137b0:	7dfa      	ldrb	r2, [r7, #23]
 80137b2:	6939      	ldr	r1, [r7, #16]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff feeb 	bl	8013590 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3304      	adds	r3, #4
 80137c0:	6939      	ldr	r1, [r7, #16]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff ff24 	bl	8013610 <tcp_output_control_segment>
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80137cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d007      	beq.n	80137e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	8b5b      	ldrh	r3, [r3, #26]
 80137d8:	f043 0303 	orr.w	r3, r3, #3
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	835a      	strh	r2, [r3, #26]
 80137e2:	e006      	b.n	80137f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	8b5b      	ldrh	r3, [r3, #26]
 80137e8:	f023 0303 	bic.w	r3, r3, #3
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80137f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	371c      	adds	r7, #28
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd90      	pop	{r4, r7, pc}
 80137fe:	bf00      	nop
 8013800:	0801a7a4 	.word	0x0801a7a4
 8013804:	0801af60 	.word	0x0801af60
 8013808:	0801a7f8 	.word	0x0801a7f8

0801380c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801380c:	b590      	push	{r4, r7, lr}
 801380e:	b087      	sub	sp, #28
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013814:	2300      	movs	r3, #0
 8013816:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <tcp_keepalive+0x20>
 801381e:	4b18      	ldr	r3, [pc, #96]	; (8013880 <tcp_keepalive+0x74>)
 8013820:	f640 0224 	movw	r2, #2084	; 0x824
 8013824:	4917      	ldr	r1, [pc, #92]	; (8013884 <tcp_keepalive+0x78>)
 8013826:	4818      	ldr	r0, [pc, #96]	; (8013888 <tcp_keepalive+0x7c>)
 8013828:	f003 f99e 	bl	8016b68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	b29c      	uxth	r4, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013834:	3b01      	subs	r3, #1
 8013836:	4618      	mov	r0, r3
 8013838:	f7f8 f991 	bl	800bb5e <lwip_htonl>
 801383c:	4603      	mov	r3, r0
 801383e:	2200      	movs	r2, #0
 8013840:	4621      	mov	r1, r4
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff fe66 	bl	8013514 <tcp_output_alloc_header>
 8013848:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d102      	bne.n	8013856 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013854:	e010      	b.n	8013878 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	2200      	movs	r2, #0
 801385a:	6939      	ldr	r1, [r7, #16]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7ff fe97 	bl	8013590 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3304      	adds	r3, #4
 8013868:	6939      	ldr	r1, [r7, #16]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f7ff fed0 	bl	8013610 <tcp_output_control_segment>
 8013870:	4603      	mov	r3, r0
 8013872:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013878:	4618      	mov	r0, r3
 801387a:	371c      	adds	r7, #28
 801387c:	46bd      	mov	sp, r7
 801387e:	bd90      	pop	{r4, r7, pc}
 8013880:	0801a7a4 	.word	0x0801a7a4
 8013884:	0801af80 	.word	0x0801af80
 8013888:	0801a7f8 	.word	0x0801a7f8

0801388c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801388c:	b590      	push	{r4, r7, lr}
 801388e:	b08b      	sub	sp, #44	; 0x2c
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013894:	2300      	movs	r3, #0
 8013896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d106      	bne.n	80138ae <tcp_zero_window_probe+0x22>
 80138a0:	4b4c      	ldr	r3, [pc, #304]	; (80139d4 <tcp_zero_window_probe+0x148>)
 80138a2:	f640 024f 	movw	r2, #2127	; 0x84f
 80138a6:	494c      	ldr	r1, [pc, #304]	; (80139d8 <tcp_zero_window_probe+0x14c>)
 80138a8:	484c      	ldr	r0, [pc, #304]	; (80139dc <tcp_zero_window_probe+0x150>)
 80138aa:	f003 f95d 	bl	8016b68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80138b4:	6a3b      	ldr	r3, [r7, #32]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d101      	bne.n	80138be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e086      	b.n	80139cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138c4:	2bff      	cmp	r3, #255	; 0xff
 80138c6:	d007      	beq.n	80138d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138ce:	3301      	adds	r3, #1
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	899b      	ldrh	r3, [r3, #12]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 f927 	bl	800bb34 <lwip_htons>
 80138e6:	4603      	mov	r3, r0
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	f003 0301 	and.w	r3, r3, #1
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d005      	beq.n	80138fe <tcp_zero_window_probe+0x72>
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	891b      	ldrh	r3, [r3, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <tcp_zero_window_probe+0x72>
 80138fa:	2301      	movs	r3, #1
 80138fc:	e000      	b.n	8013900 <tcp_zero_window_probe+0x74>
 80138fe:	2300      	movs	r3, #0
 8013900:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013902:	7ffb      	ldrb	r3, [r7, #31]
 8013904:	2b00      	cmp	r3, #0
 8013906:	bf0c      	ite	eq
 8013908:	2301      	moveq	r3, #1
 801390a:	2300      	movne	r3, #0
 801390c:	b2db      	uxtb	r3, r3
 801390e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013914:	b299      	uxth	r1, r3
 8013916:	6a3b      	ldr	r3, [r7, #32]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	8bba      	ldrh	r2, [r7, #28]
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff fdf8 	bl	8013514 <tcp_output_alloc_header>
 8013924:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d102      	bne.n	8013932 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801392c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013930:	e04c      	b.n	80139cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013938:	7ffb      	ldrb	r3, [r7, #31]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d011      	beq.n	8013962 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	b29b      	uxth	r3, r3
 8013944:	b21b      	sxth	r3, r3
 8013946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801394a:	b21c      	sxth	r4, r3
 801394c:	2011      	movs	r0, #17
 801394e:	f7f8 f8f1 	bl	800bb34 <lwip_htons>
 8013952:	4603      	mov	r3, r0
 8013954:	b21b      	sxth	r3, r3
 8013956:	4323      	orrs	r3, r4
 8013958:	b21b      	sxth	r3, r3
 801395a:	b29a      	uxth	r2, r3
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	819a      	strh	r2, [r3, #12]
 8013960:	e010      	b.n	8013984 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	3314      	adds	r3, #20
 8013968:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801396a:	6a3b      	ldr	r3, [r7, #32]
 801396c:	6858      	ldr	r0, [r3, #4]
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	891a      	ldrh	r2, [r3, #8]
 8013974:	6a3b      	ldr	r3, [r7, #32]
 8013976:	891b      	ldrh	r3, [r3, #8]
 8013978:	1ad3      	subs	r3, r2, r3
 801397a:	b29b      	uxth	r3, r3
 801397c:	2201      	movs	r2, #1
 801397e:	6939      	ldr	r1, [r7, #16]
 8013980:	f7f9 ff58 	bl	800d834 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	4618      	mov	r0, r3
 801398c:	f7f8 f8e7 	bl	800bb5e <lwip_htonl>
 8013990:	4603      	mov	r3, r0
 8013992:	3301      	adds	r3, #1
 8013994:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	2b00      	cmp	r3, #0
 80139a0:	da02      	bge.n	80139a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	68fa      	ldr	r2, [r7, #12]
 80139a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139ac:	2200      	movs	r2, #0
 80139ae:	69b9      	ldr	r1, [r7, #24]
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7ff fded 	bl	8013590 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3304      	adds	r3, #4
 80139bc:	69b9      	ldr	r1, [r7, #24]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f7ff fe26 	bl	8013610 <tcp_output_control_segment>
 80139c4:	4603      	mov	r3, r0
 80139c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80139c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	372c      	adds	r7, #44	; 0x2c
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	0801a7a4 	.word	0x0801a7a4
 80139d8:	0801af9c 	.word	0x0801af9c
 80139dc:	0801a7f8 	.word	0x0801a7f8

080139e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80139e8:	f7fa f812 	bl	800da10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80139ec:	4b0a      	ldr	r3, [pc, #40]	; (8013a18 <tcpip_tcp_timer+0x38>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d103      	bne.n	80139fc <tcpip_tcp_timer+0x1c>
 80139f4:	4b09      	ldr	r3, [pc, #36]	; (8013a1c <tcpip_tcp_timer+0x3c>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d005      	beq.n	8013a08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139fc:	2200      	movs	r2, #0
 80139fe:	4908      	ldr	r1, [pc, #32]	; (8013a20 <tcpip_tcp_timer+0x40>)
 8013a00:	20fa      	movs	r0, #250	; 0xfa
 8013a02:	f000 f8f3 	bl	8013bec <sys_timeout>
 8013a06:	e003      	b.n	8013a10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013a08:	4b06      	ldr	r3, [pc, #24]	; (8013a24 <tcpip_tcp_timer+0x44>)
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	601a      	str	r2, [r3, #0]
  }
}
 8013a0e:	bf00      	nop
 8013a10:	bf00      	nop
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	20014aa4 	.word	0x20014aa4
 8013a1c:	20014ab4 	.word	0x20014ab4
 8013a20:	080139e1 	.word	0x080139e1
 8013a24:	200083e8 	.word	0x200083e8

08013a28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013a2c:	4b0a      	ldr	r3, [pc, #40]	; (8013a58 <tcp_timer_needed+0x30>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d10f      	bne.n	8013a54 <tcp_timer_needed+0x2c>
 8013a34:	4b09      	ldr	r3, [pc, #36]	; (8013a5c <tcp_timer_needed+0x34>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d103      	bne.n	8013a44 <tcp_timer_needed+0x1c>
 8013a3c:	4b08      	ldr	r3, [pc, #32]	; (8013a60 <tcp_timer_needed+0x38>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d007      	beq.n	8013a54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013a44:	4b04      	ldr	r3, [pc, #16]	; (8013a58 <tcp_timer_needed+0x30>)
 8013a46:	2201      	movs	r2, #1
 8013a48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	4905      	ldr	r1, [pc, #20]	; (8013a64 <tcp_timer_needed+0x3c>)
 8013a4e:	20fa      	movs	r0, #250	; 0xfa
 8013a50:	f000 f8cc 	bl	8013bec <sys_timeout>
  }
}
 8013a54:	bf00      	nop
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	200083e8 	.word	0x200083e8
 8013a5c:	20014aa4 	.word	0x20014aa4
 8013a60:	20014ab4 	.word	0x20014ab4
 8013a64:	080139e1 	.word	0x080139e1

08013a68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a74:	200a      	movs	r0, #10
 8013a76:	f7f8 fdf1 	bl	800c65c <memp_malloc>
 8013a7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d109      	bne.n	8013a96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d151      	bne.n	8013b2c <sys_timeout_abs+0xc4>
 8013a88:	4b2a      	ldr	r3, [pc, #168]	; (8013b34 <sys_timeout_abs+0xcc>)
 8013a8a:	22be      	movs	r2, #190	; 0xbe
 8013a8c:	492a      	ldr	r1, [pc, #168]	; (8013b38 <sys_timeout_abs+0xd0>)
 8013a8e:	482b      	ldr	r0, [pc, #172]	; (8013b3c <sys_timeout_abs+0xd4>)
 8013a90:	f003 f86a 	bl	8016b68 <iprintf>
    return;
 8013a94:	e04a      	b.n	8013b2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013aae:	4b24      	ldr	r3, [pc, #144]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d103      	bne.n	8013abe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013ab6:	4a22      	ldr	r2, [pc, #136]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	6013      	str	r3, [r2, #0]
    return;
 8013abc:	e037      	b.n	8013b2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	685a      	ldr	r2, [r3, #4]
 8013ac2:	4b1f      	ldr	r3, [pc, #124]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	1ad3      	subs	r3, r2, r3
 8013aca:	0fdb      	lsrs	r3, r3, #31
 8013acc:	f003 0301 	and.w	r3, r3, #1
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d007      	beq.n	8013ae6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013ad6:	4b1a      	ldr	r3, [pc, #104]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013ade:	4a18      	ldr	r2, [pc, #96]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	e023      	b.n	8013b2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ae6:	4b16      	ldr	r3, [pc, #88]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	617b      	str	r3, [r7, #20]
 8013aec:	e01a      	b.n	8013b24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d00b      	beq.n	8013b0e <sys_timeout_abs+0xa6>
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	685a      	ldr	r2, [r3, #4]
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	0fdb      	lsrs	r3, r3, #31
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d007      	beq.n	8013b1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	693a      	ldr	r2, [r7, #16]
 8013b1a:	601a      	str	r2, [r3, #0]
        break;
 8013b1c:	e007      	b.n	8013b2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	617b      	str	r3, [r7, #20]
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1e1      	bne.n	8013aee <sys_timeout_abs+0x86>
 8013b2a:	e000      	b.n	8013b2e <sys_timeout_abs+0xc6>
    return;
 8013b2c:	bf00      	nop
      }
    }
  }
}
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	0801afc0 	.word	0x0801afc0
 8013b38:	0801aff4 	.word	0x0801aff4
 8013b3c:	0801b034 	.word	0x0801b034
 8013b40:	200083e0 	.word	0x200083e0

08013b44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b086      	sub	sp, #24
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	4798      	blx	r3

  now = sys_now();
 8013b56:	f7f1 ff8b 	bl	8005a70 <sys_now>
 8013b5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	4b0f      	ldr	r3, [pc, #60]	; (8013ba0 <lwip_cyclic_timer+0x5c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4413      	add	r3, r2
 8013b66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	0fdb      	lsrs	r3, r3, #31
 8013b70:	f003 0301 	and.w	r3, r3, #1
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d009      	beq.n	8013b8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	4413      	add	r3, r2
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	4907      	ldr	r1, [pc, #28]	; (8013ba4 <lwip_cyclic_timer+0x60>)
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7ff ff6e 	bl	8013a68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b8c:	e004      	b.n	8013b98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	4904      	ldr	r1, [pc, #16]	; (8013ba4 <lwip_cyclic_timer+0x60>)
 8013b92:	68f8      	ldr	r0, [r7, #12]
 8013b94:	f7ff ff68 	bl	8013a68 <sys_timeout_abs>
}
 8013b98:	bf00      	nop
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	200083e4 	.word	0x200083e4
 8013ba4:	08013b45 	.word	0x08013b45

08013ba8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bae:	2301      	movs	r3, #1
 8013bb0:	607b      	str	r3, [r7, #4]
 8013bb2:	e00e      	b.n	8013bd2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013bb4:	4a0b      	ldr	r2, [pc, #44]	; (8013be4 <sys_timeouts_init+0x3c>)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	4a08      	ldr	r2, [pc, #32]	; (8013be4 <sys_timeouts_init+0x3c>)
 8013bc2:	4413      	add	r3, r2
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	4908      	ldr	r1, [pc, #32]	; (8013be8 <sys_timeouts_init+0x40>)
 8013bc8:	f000 f810 	bl	8013bec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3301      	adds	r3, #1
 8013bd0:	607b      	str	r3, [r7, #4]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2b02      	cmp	r3, #2
 8013bd6:	d9ed      	bls.n	8013bb4 <sys_timeouts_init+0xc>
  }
}
 8013bd8:	bf00      	nop
 8013bda:	bf00      	nop
 8013bdc:	3708      	adds	r7, #8
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	08022b60 	.word	0x08022b60
 8013be8:	08013b45 	.word	0x08013b45

08013bec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bfe:	d306      	bcc.n	8013c0e <sys_timeout+0x22>
 8013c00:	4b0a      	ldr	r3, [pc, #40]	; (8013c2c <sys_timeout+0x40>)
 8013c02:	f240 1229 	movw	r2, #297	; 0x129
 8013c06:	490a      	ldr	r1, [pc, #40]	; (8013c30 <sys_timeout+0x44>)
 8013c08:	480a      	ldr	r0, [pc, #40]	; (8013c34 <sys_timeout+0x48>)
 8013c0a:	f002 ffad 	bl	8016b68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013c0e:	f7f1 ff2f 	bl	8005a70 <sys_now>
 8013c12:	4602      	mov	r2, r0
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4413      	add	r3, r2
 8013c18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	68b9      	ldr	r1, [r7, #8]
 8013c1e:	6978      	ldr	r0, [r7, #20]
 8013c20:	f7ff ff22 	bl	8013a68 <sys_timeout_abs>
#endif
}
 8013c24:	bf00      	nop
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	0801afc0 	.word	0x0801afc0
 8013c30:	0801b05c 	.word	0x0801b05c
 8013c34:	0801b034 	.word	0x0801b034

08013c38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013c3e:	f7f1 ff17 	bl	8005a70 <sys_now>
 8013c42:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013c44:	4b17      	ldr	r3, [pc, #92]	; (8013ca4 <sys_check_timeouts+0x6c>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d022      	beq.n	8013c96 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	0fdb      	lsrs	r3, r3, #31
 8013c5a:	f003 0301 	and.w	r3, r3, #1
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d11a      	bne.n	8013c9a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	4a0e      	ldr	r2, [pc, #56]	; (8013ca4 <sys_check_timeouts+0x6c>)
 8013c6a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	689b      	ldr	r3, [r3, #8]
 8013c70:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	4a0a      	ldr	r2, [pc, #40]	; (8013ca8 <sys_check_timeouts+0x70>)
 8013c7e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c80:	68b9      	ldr	r1, [r7, #8]
 8013c82:	200a      	movs	r0, #10
 8013c84:	f7f8 fd3c 	bl	800c700 <memp_free>
    if (handler != NULL) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d0da      	beq.n	8013c44 <sys_check_timeouts+0xc>
      handler(arg);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6838      	ldr	r0, [r7, #0]
 8013c92:	4798      	blx	r3
  do {
 8013c94:	e7d6      	b.n	8013c44 <sys_check_timeouts+0xc>
      return;
 8013c96:	bf00      	nop
 8013c98:	e000      	b.n	8013c9c <sys_check_timeouts+0x64>
      return;
 8013c9a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	200083e0 	.word	0x200083e0
 8013ca8:	200083e4 	.word	0x200083e4

08013cac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013cb2:	4b16      	ldr	r3, [pc, #88]	; (8013d0c <sys_timeouts_sleeptime+0x60>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d102      	bne.n	8013cc0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cbe:	e020      	b.n	8013d02 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013cc0:	f7f1 fed6 	bl	8005a70 <sys_now>
 8013cc4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013cc6:	4b11      	ldr	r3, [pc, #68]	; (8013d0c <sys_timeouts_sleeptime+0x60>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	685a      	ldr	r2, [r3, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	0fdb      	lsrs	r3, r3, #31
 8013cd2:	f003 0301 	and.w	r3, r3, #1
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d001      	beq.n	8013ce0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e010      	b.n	8013d02 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013ce0:	4b0a      	ldr	r3, [pc, #40]	; (8013d0c <sys_timeouts_sleeptime+0x60>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	685a      	ldr	r2, [r3, #4]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	1ad3      	subs	r3, r2, r3
 8013cea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da06      	bge.n	8013d00 <sys_timeouts_sleeptime+0x54>
 8013cf2:	4b07      	ldr	r3, [pc, #28]	; (8013d10 <sys_timeouts_sleeptime+0x64>)
 8013cf4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013cf8:	4906      	ldr	r1, [pc, #24]	; (8013d14 <sys_timeouts_sleeptime+0x68>)
 8013cfa:	4807      	ldr	r0, [pc, #28]	; (8013d18 <sys_timeouts_sleeptime+0x6c>)
 8013cfc:	f002 ff34 	bl	8016b68 <iprintf>
    return ret;
 8013d00:	683b      	ldr	r3, [r7, #0]
  }
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3708      	adds	r7, #8
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	200083e0 	.word	0x200083e0
 8013d10:	0801afc0 	.word	0x0801afc0
 8013d14:	0801b094 	.word	0x0801b094
 8013d18:	0801b034 	.word	0x0801b034

08013d1c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013d20:	f002 ffb0 	bl	8016c84 <rand>
 8013d24:	4603      	mov	r3, r0
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	4b01      	ldr	r3, [pc, #4]	; (8013d3c <udp_init+0x20>)
 8013d36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013d38:	bf00      	nop
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	200004b0 	.word	0x200004b0

08013d40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d105      	bne.n	8013d60 <udp_input_local_match+0x20>
 8013d54:	4b27      	ldr	r3, [pc, #156]	; (8013df4 <udp_input_local_match+0xb4>)
 8013d56:	2287      	movs	r2, #135	; 0x87
 8013d58:	4927      	ldr	r1, [pc, #156]	; (8013df8 <udp_input_local_match+0xb8>)
 8013d5a:	4828      	ldr	r0, [pc, #160]	; (8013dfc <udp_input_local_match+0xbc>)
 8013d5c:	f002 ff04 	bl	8016b68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d105      	bne.n	8013d72 <udp_input_local_match+0x32>
 8013d66:	4b23      	ldr	r3, [pc, #140]	; (8013df4 <udp_input_local_match+0xb4>)
 8013d68:	2288      	movs	r2, #136	; 0x88
 8013d6a:	4925      	ldr	r1, [pc, #148]	; (8013e00 <udp_input_local_match+0xc0>)
 8013d6c:	4823      	ldr	r0, [pc, #140]	; (8013dfc <udp_input_local_match+0xbc>)
 8013d6e:	f002 fefb 	bl	8016b68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	7a1b      	ldrb	r3, [r3, #8]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d00b      	beq.n	8013d92 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	7a1a      	ldrb	r2, [r3, #8]
 8013d7e:	4b21      	ldr	r3, [pc, #132]	; (8013e04 <udp_input_local_match+0xc4>)
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d86:	3301      	adds	r3, #1
 8013d88:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d001      	beq.n	8013d92 <udp_input_local_match+0x52>
    return 0;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	e02b      	b.n	8013dea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d92:	79fb      	ldrb	r3, [r7, #7]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d018      	beq.n	8013dca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d013      	beq.n	8013dc6 <udp_input_local_match+0x86>
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d00f      	beq.n	8013dc6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013da6:	4b17      	ldr	r3, [pc, #92]	; (8013e04 <udp_input_local_match+0xc4>)
 8013da8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dae:	d00a      	beq.n	8013dc6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	4b13      	ldr	r3, [pc, #76]	; (8013e04 <udp_input_local_match+0xc4>)
 8013db6:	695b      	ldr	r3, [r3, #20]
 8013db8:	405a      	eors	r2, r3
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	3308      	adds	r3, #8
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d110      	bne.n	8013de8 <udp_input_local_match+0xa8>
          return 1;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	e00f      	b.n	8013dea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d009      	beq.n	8013de4 <udp_input_local_match+0xa4>
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <udp_input_local_match+0xa4>
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <udp_input_local_match+0xc4>)
 8013dde:	695b      	ldr	r3, [r3, #20]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d101      	bne.n	8013de8 <udp_input_local_match+0xa8>
        return 1;
 8013de4:	2301      	movs	r3, #1
 8013de6:	e000      	b.n	8013dea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3710      	adds	r7, #16
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	0801b0a8 	.word	0x0801b0a8
 8013df8:	0801b0d8 	.word	0x0801b0d8
 8013dfc:	0801b0fc 	.word	0x0801b0fc
 8013e00:	0801b124 	.word	0x0801b124
 8013e04:	200112d4 	.word	0x200112d4

08013e08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013e08:	b590      	push	{r4, r7, lr}
 8013e0a:	b08d      	sub	sp, #52	; 0x34
 8013e0c:	af02      	add	r7, sp, #8
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d105      	bne.n	8013e28 <udp_input+0x20>
 8013e1c:	4b7c      	ldr	r3, [pc, #496]	; (8014010 <udp_input+0x208>)
 8013e1e:	22cf      	movs	r2, #207	; 0xcf
 8013e20:	497c      	ldr	r1, [pc, #496]	; (8014014 <udp_input+0x20c>)
 8013e22:	487d      	ldr	r0, [pc, #500]	; (8014018 <udp_input+0x210>)
 8013e24:	f002 fea0 	bl	8016b68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d105      	bne.n	8013e3a <udp_input+0x32>
 8013e2e:	4b78      	ldr	r3, [pc, #480]	; (8014010 <udp_input+0x208>)
 8013e30:	22d0      	movs	r2, #208	; 0xd0
 8013e32:	497a      	ldr	r1, [pc, #488]	; (801401c <udp_input+0x214>)
 8013e34:	4878      	ldr	r0, [pc, #480]	; (8014018 <udp_input+0x210>)
 8013e36:	f002 fe97 	bl	8016b68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	895b      	ldrh	r3, [r3, #10]
 8013e3e:	2b07      	cmp	r3, #7
 8013e40:	d803      	bhi.n	8013e4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f7f9 fb00 	bl	800d448 <pbuf_free>
    goto end;
 8013e48:	e0de      	b.n	8014008 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e50:	4b73      	ldr	r3, [pc, #460]	; (8014020 <udp_input+0x218>)
 8013e52:	695b      	ldr	r3, [r3, #20]
 8013e54:	4a72      	ldr	r2, [pc, #456]	; (8014020 <udp_input+0x218>)
 8013e56:	6812      	ldr	r2, [r2, #0]
 8013e58:	4611      	mov	r1, r2
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f001 fc88 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8013e60:	4603      	mov	r3, r0
 8013e62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f7 fe62 	bl	800bb34 <lwip_htons>
 8013e70:	4603      	mov	r3, r0
 8013e72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	885b      	ldrh	r3, [r3, #2]
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f7 fe5a 	bl	800bb34 <lwip_htons>
 8013e80:	4603      	mov	r3, r0
 8013e82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e84:	2300      	movs	r3, #0
 8013e86:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e90:	4b64      	ldr	r3, [pc, #400]	; (8014024 <udp_input+0x21c>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	627b      	str	r3, [r7, #36]	; 0x24
 8013e96:	e054      	b.n	8013f42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	8a5b      	ldrh	r3, [r3, #18]
 8013e9c:	89fa      	ldrh	r2, [r7, #14]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d14a      	bne.n	8013f38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ea2:	7cfb      	ldrb	r3, [r7, #19]
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013eaa:	f7ff ff49 	bl	8013d40 <udp_input_local_match>
 8013eae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d041      	beq.n	8013f38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	7c1b      	ldrb	r3, [r3, #16]
 8013eb8:	f003 0304 	and.w	r3, r3, #4
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d11d      	bne.n	8013efc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d102      	bne.n	8013ecc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	61fb      	str	r3, [r7, #28]
 8013eca:	e017      	b.n	8013efc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ecc:	7cfb      	ldrb	r3, [r7, #19]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d014      	beq.n	8013efc <udp_input+0xf4>
 8013ed2:	4b53      	ldr	r3, [pc, #332]	; (8014020 <udp_input+0x218>)
 8013ed4:	695b      	ldr	r3, [r3, #20]
 8013ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eda:	d10f      	bne.n	8013efc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	3304      	adds	r3, #4
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d008      	beq.n	8013efc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d101      	bne.n	8013efc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	8a9b      	ldrh	r3, [r3, #20]
 8013f00:	8a3a      	ldrh	r2, [r7, #16]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d118      	bne.n	8013f38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d005      	beq.n	8013f1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	685a      	ldr	r2, [r3, #4]
 8013f12:	4b43      	ldr	r3, [pc, #268]	; (8014020 <udp_input+0x218>)
 8013f14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d10e      	bne.n	8013f38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013f1a:	6a3b      	ldr	r3, [r7, #32]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d014      	beq.n	8013f4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	68da      	ldr	r2, [r3, #12]
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013f28:	4b3e      	ldr	r3, [pc, #248]	; (8014024 <udp_input+0x21c>)
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013f30:	4a3c      	ldr	r2, [pc, #240]	; (8014024 <udp_input+0x21c>)
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013f36:	e008      	b.n	8013f4a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	627b      	str	r3, [r7, #36]	; 0x24
 8013f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d1a7      	bne.n	8013e98 <udp_input+0x90>
 8013f48:	e000      	b.n	8013f4c <udp_input+0x144>
        break;
 8013f4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d002      	beq.n	8013f62 <udp_input+0x15a>
    for_us = 1;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	76fb      	strb	r3, [r7, #27]
 8013f60:	e00a      	b.n	8013f78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	3304      	adds	r3, #4
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	4b2d      	ldr	r3, [pc, #180]	; (8014020 <udp_input+0x218>)
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	bf0c      	ite	eq
 8013f70:	2301      	moveq	r3, #1
 8013f72:	2300      	movne	r3, #0
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f78:	7efb      	ldrb	r3, [r7, #27]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d041      	beq.n	8014002 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f7e:	2108      	movs	r1, #8
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f7f9 f9db 	bl	800d33c <pbuf_remove_header>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d00a      	beq.n	8013fa2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f8c:	4b20      	ldr	r3, [pc, #128]	; (8014010 <udp_input+0x208>)
 8013f8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f92:	4925      	ldr	r1, [pc, #148]	; (8014028 <udp_input+0x220>)
 8013f94:	4820      	ldr	r0, [pc, #128]	; (8014018 <udp_input+0x210>)
 8013f96:	f002 fde7 	bl	8016b68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7f9 fa54 	bl	800d448 <pbuf_free>
      goto end;
 8013fa0:	e032      	b.n	8014008 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d012      	beq.n	8013fce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013faa:	699b      	ldr	r3, [r3, #24]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d00a      	beq.n	8013fc6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb2:	699c      	ldr	r4, [r3, #24]
 8013fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb6:	69d8      	ldr	r0, [r3, #28]
 8013fb8:	8a3b      	ldrh	r3, [r7, #16]
 8013fba:	9300      	str	r3, [sp, #0]
 8013fbc:	4b1b      	ldr	r3, [pc, #108]	; (801402c <udp_input+0x224>)
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fc2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013fc4:	e021      	b.n	801400a <udp_input+0x202>
        pbuf_free(p);
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7f9 fa3e 	bl	800d448 <pbuf_free>
        goto end;
 8013fcc:	e01c      	b.n	8014008 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013fce:	7cfb      	ldrb	r3, [r7, #19]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d112      	bne.n	8013ffa <udp_input+0x1f2>
 8013fd4:	4b12      	ldr	r3, [pc, #72]	; (8014020 <udp_input+0x218>)
 8013fd6:	695b      	ldr	r3, [r3, #20]
 8013fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fdc:	2be0      	cmp	r3, #224	; 0xe0
 8013fde:	d00c      	beq.n	8013ffa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013fe0:	4b0f      	ldr	r3, [pc, #60]	; (8014020 <udp_input+0x218>)
 8013fe2:	899b      	ldrh	r3, [r3, #12]
 8013fe4:	3308      	adds	r3, #8
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	b21b      	sxth	r3, r3
 8013fea:	4619      	mov	r1, r3
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7f9 fa18 	bl	800d422 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ff2:	2103      	movs	r1, #3
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f001 f89b 	bl	8015130 <icmp_dest_unreach>
      pbuf_free(p);
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f7f9 fa24 	bl	800d448 <pbuf_free>
  return;
 8014000:	e003      	b.n	801400a <udp_input+0x202>
    pbuf_free(p);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f7f9 fa20 	bl	800d448 <pbuf_free>
  return;
 8014008:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801400a:	372c      	adds	r7, #44	; 0x2c
 801400c:	46bd      	mov	sp, r7
 801400e:	bd90      	pop	{r4, r7, pc}
 8014010:	0801b0a8 	.word	0x0801b0a8
 8014014:	0801b14c 	.word	0x0801b14c
 8014018:	0801b0fc 	.word	0x0801b0fc
 801401c:	0801b164 	.word	0x0801b164
 8014020:	200112d4 	.word	0x200112d4
 8014024:	20014abc 	.word	0x20014abc
 8014028:	0801b180 	.word	0x0801b180
 801402c:	200112e4 	.word	0x200112e4

08014030 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014030:	b480      	push	{r7}
 8014032:	b085      	sub	sp, #20
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d01e      	beq.n	801407e <udp_netif_ip_addr_changed+0x4e>
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d01a      	beq.n	801407e <udp_netif_ip_addr_changed+0x4e>
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d017      	beq.n	801407e <udp_netif_ip_addr_changed+0x4e>
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d013      	beq.n	801407e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014056:	4b0d      	ldr	r3, [pc, #52]	; (801408c <udp_netif_ip_addr_changed+0x5c>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	60fb      	str	r3, [r7, #12]
 801405c:	e00c      	b.n	8014078 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	429a      	cmp	r2, r3
 8014068:	d103      	bne.n	8014072 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	60fb      	str	r3, [r7, #12]
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1ef      	bne.n	801405e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801407e:	bf00      	nop
 8014080:	3714      	adds	r7, #20
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop
 801408c:	20014abc 	.word	0x20014abc

08014090 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014098:	4915      	ldr	r1, [pc, #84]	; (80140f0 <etharp_free_entry+0x60>)
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	4613      	mov	r3, r2
 801409e:	005b      	lsls	r3, r3, #1
 80140a0:	4413      	add	r3, r2
 80140a2:	00db      	lsls	r3, r3, #3
 80140a4:	440b      	add	r3, r1
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d013      	beq.n	80140d4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80140ac:	4910      	ldr	r1, [pc, #64]	; (80140f0 <etharp_free_entry+0x60>)
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	440b      	add	r3, r1
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7f9 f9c3 	bl	800d448 <pbuf_free>
    arp_table[i].q = NULL;
 80140c2:	490b      	ldr	r1, [pc, #44]	; (80140f0 <etharp_free_entry+0x60>)
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	4613      	mov	r3, r2
 80140c8:	005b      	lsls	r3, r3, #1
 80140ca:	4413      	add	r3, r2
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	440b      	add	r3, r1
 80140d0:	2200      	movs	r2, #0
 80140d2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80140d4:	4906      	ldr	r1, [pc, #24]	; (80140f0 <etharp_free_entry+0x60>)
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	4613      	mov	r3, r2
 80140da:	005b      	lsls	r3, r3, #1
 80140dc:	4413      	add	r3, r2
 80140de:	00db      	lsls	r3, r3, #3
 80140e0:	440b      	add	r3, r1
 80140e2:	3314      	adds	r3, #20
 80140e4:	2200      	movs	r2, #0
 80140e6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	200083ec 	.word	0x200083ec

080140f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140fa:	2300      	movs	r3, #0
 80140fc:	607b      	str	r3, [r7, #4]
 80140fe:	e096      	b.n	801422e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014100:	494f      	ldr	r1, [pc, #316]	; (8014240 <etharp_tmr+0x14c>)
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	4613      	mov	r3, r2
 8014106:	005b      	lsls	r3, r3, #1
 8014108:	4413      	add	r3, r2
 801410a:	00db      	lsls	r3, r3, #3
 801410c:	440b      	add	r3, r1
 801410e:	3314      	adds	r3, #20
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014114:	78fb      	ldrb	r3, [r7, #3]
 8014116:	2b00      	cmp	r3, #0
 8014118:	f000 8086 	beq.w	8014228 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801411c:	4948      	ldr	r1, [pc, #288]	; (8014240 <etharp_tmr+0x14c>)
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	440b      	add	r3, r1
 801412a:	3312      	adds	r3, #18
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	3301      	adds	r3, #1
 8014130:	b298      	uxth	r0, r3
 8014132:	4943      	ldr	r1, [pc, #268]	; (8014240 <etharp_tmr+0x14c>)
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	3312      	adds	r3, #18
 8014142:	4602      	mov	r2, r0
 8014144:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014146:	493e      	ldr	r1, [pc, #248]	; (8014240 <etharp_tmr+0x14c>)
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	3312      	adds	r3, #18
 8014156:	881b      	ldrh	r3, [r3, #0]
 8014158:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801415c:	d215      	bcs.n	801418a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801415e:	4938      	ldr	r1, [pc, #224]	; (8014240 <etharp_tmr+0x14c>)
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	3314      	adds	r3, #20
 801416e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014170:	2b01      	cmp	r3, #1
 8014172:	d10e      	bne.n	8014192 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014174:	4932      	ldr	r1, [pc, #200]	; (8014240 <etharp_tmr+0x14c>)
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	3312      	adds	r3, #18
 8014184:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014186:	2b04      	cmp	r3, #4
 8014188:	d903      	bls.n	8014192 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7ff ff80 	bl	8014090 <etharp_free_entry>
 8014190:	e04a      	b.n	8014228 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014192:	492b      	ldr	r1, [pc, #172]	; (8014240 <etharp_tmr+0x14c>)
 8014194:	687a      	ldr	r2, [r7, #4]
 8014196:	4613      	mov	r3, r2
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	4413      	add	r3, r2
 801419c:	00db      	lsls	r3, r3, #3
 801419e:	440b      	add	r3, r1
 80141a0:	3314      	adds	r3, #20
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d10a      	bne.n	80141be <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80141a8:	4925      	ldr	r1, [pc, #148]	; (8014240 <etharp_tmr+0x14c>)
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	4613      	mov	r3, r2
 80141ae:	005b      	lsls	r3, r3, #1
 80141b0:	4413      	add	r3, r2
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	440b      	add	r3, r1
 80141b6:	3314      	adds	r3, #20
 80141b8:	2204      	movs	r2, #4
 80141ba:	701a      	strb	r2, [r3, #0]
 80141bc:	e034      	b.n	8014228 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80141be:	4920      	ldr	r1, [pc, #128]	; (8014240 <etharp_tmr+0x14c>)
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	4613      	mov	r3, r2
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	4413      	add	r3, r2
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	440b      	add	r3, r1
 80141cc:	3314      	adds	r3, #20
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b04      	cmp	r3, #4
 80141d2:	d10a      	bne.n	80141ea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80141d4:	491a      	ldr	r1, [pc, #104]	; (8014240 <etharp_tmr+0x14c>)
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	4613      	mov	r3, r2
 80141da:	005b      	lsls	r3, r3, #1
 80141dc:	4413      	add	r3, r2
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	440b      	add	r3, r1
 80141e2:	3314      	adds	r3, #20
 80141e4:	2202      	movs	r2, #2
 80141e6:	701a      	strb	r2, [r3, #0]
 80141e8:	e01e      	b.n	8014228 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80141ea:	4915      	ldr	r1, [pc, #84]	; (8014240 <etharp_tmr+0x14c>)
 80141ec:	687a      	ldr	r2, [r7, #4]
 80141ee:	4613      	mov	r3, r2
 80141f0:	005b      	lsls	r3, r3, #1
 80141f2:	4413      	add	r3, r2
 80141f4:	00db      	lsls	r3, r3, #3
 80141f6:	440b      	add	r3, r1
 80141f8:	3314      	adds	r3, #20
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d113      	bne.n	8014228 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014200:	490f      	ldr	r1, [pc, #60]	; (8014240 <etharp_tmr+0x14c>)
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	440b      	add	r3, r1
 801420e:	3308      	adds	r3, #8
 8014210:	6818      	ldr	r0, [r3, #0]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	00db      	lsls	r3, r3, #3
 801421c:	4a08      	ldr	r2, [pc, #32]	; (8014240 <etharp_tmr+0x14c>)
 801421e:	4413      	add	r3, r2
 8014220:	3304      	adds	r3, #4
 8014222:	4619      	mov	r1, r3
 8014224:	f000 fe6e 	bl	8014f04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	3301      	adds	r3, #1
 801422c:	607b      	str	r3, [r7, #4]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2b09      	cmp	r3, #9
 8014232:	f77f af65 	ble.w	8014100 <etharp_tmr+0xc>
      }
    }
  }
}
 8014236:	bf00      	nop
 8014238:	bf00      	nop
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	200083ec 	.word	0x200083ec

08014244 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b08a      	sub	sp, #40	; 0x28
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	460b      	mov	r3, r1
 801424e:	607a      	str	r2, [r7, #4]
 8014250:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014252:	230a      	movs	r3, #10
 8014254:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014256:	230a      	movs	r3, #10
 8014258:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801425a:	230a      	movs	r3, #10
 801425c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801425e:	2300      	movs	r3, #0
 8014260:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014262:	230a      	movs	r3, #10
 8014264:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014266:	2300      	movs	r3, #0
 8014268:	83bb      	strh	r3, [r7, #28]
 801426a:	2300      	movs	r3, #0
 801426c:	837b      	strh	r3, [r7, #26]
 801426e:	2300      	movs	r3, #0
 8014270:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014272:	2300      	movs	r3, #0
 8014274:	843b      	strh	r3, [r7, #32]
 8014276:	e0ae      	b.n	80143d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014278:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427c:	49a6      	ldr	r1, [pc, #664]	; (8014518 <etharp_find_entry+0x2d4>)
 801427e:	4613      	mov	r3, r2
 8014280:	005b      	lsls	r3, r3, #1
 8014282:	4413      	add	r3, r2
 8014284:	00db      	lsls	r3, r3, #3
 8014286:	440b      	add	r3, r1
 8014288:	3314      	adds	r3, #20
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801428e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014292:	2b0a      	cmp	r3, #10
 8014294:	d105      	bne.n	80142a2 <etharp_find_entry+0x5e>
 8014296:	7dfb      	ldrb	r3, [r7, #23]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d102      	bne.n	80142a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801429c:	8c3b      	ldrh	r3, [r7, #32]
 801429e:	847b      	strh	r3, [r7, #34]	; 0x22
 80142a0:	e095      	b.n	80143ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80142a2:	7dfb      	ldrb	r3, [r7, #23]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	f000 8092 	beq.w	80143ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80142aa:	7dfb      	ldrb	r3, [r7, #23]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d009      	beq.n	80142c4 <etharp_find_entry+0x80>
 80142b0:	7dfb      	ldrb	r3, [r7, #23]
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d806      	bhi.n	80142c4 <etharp_find_entry+0x80>
 80142b6:	4b99      	ldr	r3, [pc, #612]	; (801451c <etharp_find_entry+0x2d8>)
 80142b8:	f240 1223 	movw	r2, #291	; 0x123
 80142bc:	4998      	ldr	r1, [pc, #608]	; (8014520 <etharp_find_entry+0x2dc>)
 80142be:	4899      	ldr	r0, [pc, #612]	; (8014524 <etharp_find_entry+0x2e0>)
 80142c0:	f002 fc52 	bl	8016b68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d020      	beq.n	801430c <etharp_find_entry+0xc8>
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	6819      	ldr	r1, [r3, #0]
 80142ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d2:	4891      	ldr	r0, [pc, #580]	; (8014518 <etharp_find_entry+0x2d4>)
 80142d4:	4613      	mov	r3, r2
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	4413      	add	r3, r2
 80142da:	00db      	lsls	r3, r3, #3
 80142dc:	4403      	add	r3, r0
 80142de:	3304      	adds	r3, #4
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	4299      	cmp	r1, r3
 80142e4:	d112      	bne.n	801430c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00c      	beq.n	8014306 <etharp_find_entry+0xc2>
 80142ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142f0:	4989      	ldr	r1, [pc, #548]	; (8014518 <etharp_find_entry+0x2d4>)
 80142f2:	4613      	mov	r3, r2
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	4413      	add	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	440b      	add	r3, r1
 80142fc:	3308      	adds	r3, #8
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	429a      	cmp	r2, r3
 8014304:	d102      	bne.n	801430c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014306:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801430a:	e100      	b.n	801450e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801430c:	7dfb      	ldrb	r3, [r7, #23]
 801430e:	2b01      	cmp	r3, #1
 8014310:	d140      	bne.n	8014394 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014316:	4980      	ldr	r1, [pc, #512]	; (8014518 <etharp_find_entry+0x2d4>)
 8014318:	4613      	mov	r3, r2
 801431a:	005b      	lsls	r3, r3, #1
 801431c:	4413      	add	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	440b      	add	r3, r1
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d01a      	beq.n	801435e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014328:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801432c:	497a      	ldr	r1, [pc, #488]	; (8014518 <etharp_find_entry+0x2d4>)
 801432e:	4613      	mov	r3, r2
 8014330:	005b      	lsls	r3, r3, #1
 8014332:	4413      	add	r3, r2
 8014334:	00db      	lsls	r3, r3, #3
 8014336:	440b      	add	r3, r1
 8014338:	3312      	adds	r3, #18
 801433a:	881b      	ldrh	r3, [r3, #0]
 801433c:	8bba      	ldrh	r2, [r7, #28]
 801433e:	429a      	cmp	r2, r3
 8014340:	d845      	bhi.n	80143ce <etharp_find_entry+0x18a>
            old_queue = i;
 8014342:	8c3b      	ldrh	r3, [r7, #32]
 8014344:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801434a:	4973      	ldr	r1, [pc, #460]	; (8014518 <etharp_find_entry+0x2d4>)
 801434c:	4613      	mov	r3, r2
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	4413      	add	r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	440b      	add	r3, r1
 8014356:	3312      	adds	r3, #18
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	83bb      	strh	r3, [r7, #28]
 801435c:	e037      	b.n	80143ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801435e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014362:	496d      	ldr	r1, [pc, #436]	; (8014518 <etharp_find_entry+0x2d4>)
 8014364:	4613      	mov	r3, r2
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	440b      	add	r3, r1
 801436e:	3312      	adds	r3, #18
 8014370:	881b      	ldrh	r3, [r3, #0]
 8014372:	8b7a      	ldrh	r2, [r7, #26]
 8014374:	429a      	cmp	r2, r3
 8014376:	d82a      	bhi.n	80143ce <etharp_find_entry+0x18a>
            old_pending = i;
 8014378:	8c3b      	ldrh	r3, [r7, #32]
 801437a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801437c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014380:	4965      	ldr	r1, [pc, #404]	; (8014518 <etharp_find_entry+0x2d4>)
 8014382:	4613      	mov	r3, r2
 8014384:	005b      	lsls	r3, r3, #1
 8014386:	4413      	add	r3, r2
 8014388:	00db      	lsls	r3, r3, #3
 801438a:	440b      	add	r3, r1
 801438c:	3312      	adds	r3, #18
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	837b      	strh	r3, [r7, #26]
 8014392:	e01c      	b.n	80143ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014394:	7dfb      	ldrb	r3, [r7, #23]
 8014396:	2b01      	cmp	r3, #1
 8014398:	d919      	bls.n	80143ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801439a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801439e:	495e      	ldr	r1, [pc, #376]	; (8014518 <etharp_find_entry+0x2d4>)
 80143a0:	4613      	mov	r3, r2
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	4413      	add	r3, r2
 80143a6:	00db      	lsls	r3, r3, #3
 80143a8:	440b      	add	r3, r1
 80143aa:	3312      	adds	r3, #18
 80143ac:	881b      	ldrh	r3, [r3, #0]
 80143ae:	8b3a      	ldrh	r2, [r7, #24]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d80c      	bhi.n	80143ce <etharp_find_entry+0x18a>
            old_stable = i;
 80143b4:	8c3b      	ldrh	r3, [r7, #32]
 80143b6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80143b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143bc:	4956      	ldr	r1, [pc, #344]	; (8014518 <etharp_find_entry+0x2d4>)
 80143be:	4613      	mov	r3, r2
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4413      	add	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	440b      	add	r3, r1
 80143c8:	3312      	adds	r3, #18
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143ce:	8c3b      	ldrh	r3, [r7, #32]
 80143d0:	3301      	adds	r3, #1
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	843b      	strh	r3, [r7, #32]
 80143d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143da:	2b09      	cmp	r3, #9
 80143dc:	f77f af4c 	ble.w	8014278 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80143e0:	7afb      	ldrb	r3, [r7, #11]
 80143e2:	f003 0302 	and.w	r3, r3, #2
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d108      	bne.n	80143fc <etharp_find_entry+0x1b8>
 80143ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143ee:	2b0a      	cmp	r3, #10
 80143f0:	d107      	bne.n	8014402 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80143f2:	7afb      	ldrb	r3, [r7, #11]
 80143f4:	f003 0301 	and.w	r3, r3, #1
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d102      	bne.n	8014402 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80143fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014400:	e085      	b.n	801450e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014402:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014406:	2b09      	cmp	r3, #9
 8014408:	dc02      	bgt.n	8014410 <etharp_find_entry+0x1cc>
    i = empty;
 801440a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801440c:	843b      	strh	r3, [r7, #32]
 801440e:	e039      	b.n	8014484 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014410:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014414:	2b09      	cmp	r3, #9
 8014416:	dc14      	bgt.n	8014442 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801441a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801441c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014420:	493d      	ldr	r1, [pc, #244]	; (8014518 <etharp_find_entry+0x2d4>)
 8014422:	4613      	mov	r3, r2
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4413      	add	r3, r2
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	440b      	add	r3, r1
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d018      	beq.n	8014464 <etharp_find_entry+0x220>
 8014432:	4b3a      	ldr	r3, [pc, #232]	; (801451c <etharp_find_entry+0x2d8>)
 8014434:	f240 126d 	movw	r2, #365	; 0x16d
 8014438:	493b      	ldr	r1, [pc, #236]	; (8014528 <etharp_find_entry+0x2e4>)
 801443a:	483a      	ldr	r0, [pc, #232]	; (8014524 <etharp_find_entry+0x2e0>)
 801443c:	f002 fb94 	bl	8016b68 <iprintf>
 8014440:	e010      	b.n	8014464 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014442:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014446:	2b09      	cmp	r3, #9
 8014448:	dc02      	bgt.n	8014450 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801444a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801444c:	843b      	strh	r3, [r7, #32]
 801444e:	e009      	b.n	8014464 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014450:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014454:	2b09      	cmp	r3, #9
 8014456:	dc02      	bgt.n	801445e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014458:	8bfb      	ldrh	r3, [r7, #30]
 801445a:	843b      	strh	r3, [r7, #32]
 801445c:	e002      	b.n	8014464 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801445e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014462:	e054      	b.n	801450e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014464:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014468:	2b09      	cmp	r3, #9
 801446a:	dd06      	ble.n	801447a <etharp_find_entry+0x236>
 801446c:	4b2b      	ldr	r3, [pc, #172]	; (801451c <etharp_find_entry+0x2d8>)
 801446e:	f240 127f 	movw	r2, #383	; 0x17f
 8014472:	492e      	ldr	r1, [pc, #184]	; (801452c <etharp_find_entry+0x2e8>)
 8014474:	482b      	ldr	r0, [pc, #172]	; (8014524 <etharp_find_entry+0x2e0>)
 8014476:	f002 fb77 	bl	8016b68 <iprintf>
    etharp_free_entry(i);
 801447a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801447e:	4618      	mov	r0, r3
 8014480:	f7ff fe06 	bl	8014090 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014484:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014488:	2b09      	cmp	r3, #9
 801448a:	dd06      	ble.n	801449a <etharp_find_entry+0x256>
 801448c:	4b23      	ldr	r3, [pc, #140]	; (801451c <etharp_find_entry+0x2d8>)
 801448e:	f240 1283 	movw	r2, #387	; 0x183
 8014492:	4926      	ldr	r1, [pc, #152]	; (801452c <etharp_find_entry+0x2e8>)
 8014494:	4823      	ldr	r0, [pc, #140]	; (8014524 <etharp_find_entry+0x2e0>)
 8014496:	f002 fb67 	bl	8016b68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801449a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801449e:	491e      	ldr	r1, [pc, #120]	; (8014518 <etharp_find_entry+0x2d4>)
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	3314      	adds	r3, #20
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d006      	beq.n	80144c0 <etharp_find_entry+0x27c>
 80144b2:	4b1a      	ldr	r3, [pc, #104]	; (801451c <etharp_find_entry+0x2d8>)
 80144b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80144b8:	491d      	ldr	r1, [pc, #116]	; (8014530 <etharp_find_entry+0x2ec>)
 80144ba:	481a      	ldr	r0, [pc, #104]	; (8014524 <etharp_find_entry+0x2e0>)
 80144bc:	f002 fb54 	bl	8016b68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00b      	beq.n	80144de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80144c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	6819      	ldr	r1, [r3, #0]
 80144ce:	4812      	ldr	r0, [pc, #72]	; (8014518 <etharp_find_entry+0x2d4>)
 80144d0:	4613      	mov	r3, r2
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	4413      	add	r3, r2
 80144d6:	00db      	lsls	r3, r3, #3
 80144d8:	4403      	add	r3, r0
 80144da:	3304      	adds	r3, #4
 80144dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80144de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144e2:	490d      	ldr	r1, [pc, #52]	; (8014518 <etharp_find_entry+0x2d4>)
 80144e4:	4613      	mov	r3, r2
 80144e6:	005b      	lsls	r3, r3, #1
 80144e8:	4413      	add	r3, r2
 80144ea:	00db      	lsls	r3, r3, #3
 80144ec:	440b      	add	r3, r1
 80144ee:	3312      	adds	r3, #18
 80144f0:	2200      	movs	r2, #0
 80144f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80144f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144f8:	4907      	ldr	r1, [pc, #28]	; (8014518 <etharp_find_entry+0x2d4>)
 80144fa:	4613      	mov	r3, r2
 80144fc:	005b      	lsls	r3, r3, #1
 80144fe:	4413      	add	r3, r2
 8014500:	00db      	lsls	r3, r3, #3
 8014502:	440b      	add	r3, r1
 8014504:	3308      	adds	r3, #8
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801450a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3728      	adds	r7, #40	; 0x28
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	200083ec 	.word	0x200083ec
 801451c:	0801b40c 	.word	0x0801b40c
 8014520:	0801b444 	.word	0x0801b444
 8014524:	0801b484 	.word	0x0801b484
 8014528:	0801b4ac 	.word	0x0801b4ac
 801452c:	0801b4c4 	.word	0x0801b4c4
 8014530:	0801b4d8 	.word	0x0801b4d8

08014534 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b088      	sub	sp, #32
 8014538:	af02      	add	r7, sp, #8
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	607a      	str	r2, [r7, #4]
 8014540:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014548:	2b06      	cmp	r3, #6
 801454a:	d006      	beq.n	801455a <etharp_update_arp_entry+0x26>
 801454c:	4b48      	ldr	r3, [pc, #288]	; (8014670 <etharp_update_arp_entry+0x13c>)
 801454e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014552:	4948      	ldr	r1, [pc, #288]	; (8014674 <etharp_update_arp_entry+0x140>)
 8014554:	4848      	ldr	r0, [pc, #288]	; (8014678 <etharp_update_arp_entry+0x144>)
 8014556:	f002 fb07 	bl	8016b68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d012      	beq.n	8014586 <etharp_update_arp_entry+0x52>
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d00e      	beq.n	8014586 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	68f9      	ldr	r1, [r7, #12]
 801456e:	4618      	mov	r0, r3
 8014570:	f001 f8fe 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8014574:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014576:	2b00      	cmp	r3, #0
 8014578:	d105      	bne.n	8014586 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014582:	2be0      	cmp	r3, #224	; 0xe0
 8014584:	d102      	bne.n	801458c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014586:	f06f 030f 	mvn.w	r3, #15
 801458a:	e06c      	b.n	8014666 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801458c:	78fb      	ldrb	r3, [r7, #3]
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	4619      	mov	r1, r3
 8014592:	68b8      	ldr	r0, [r7, #8]
 8014594:	f7ff fe56 	bl	8014244 <etharp_find_entry>
 8014598:	4603      	mov	r3, r0
 801459a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801459c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	da02      	bge.n	80145aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80145a4:	8afb      	ldrh	r3, [r7, #22]
 80145a6:	b25b      	sxtb	r3, r3
 80145a8:	e05d      	b.n	8014666 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80145aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145ae:	4933      	ldr	r1, [pc, #204]	; (801467c <etharp_update_arp_entry+0x148>)
 80145b0:	4613      	mov	r3, r2
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	4413      	add	r3, r2
 80145b6:	00db      	lsls	r3, r3, #3
 80145b8:	440b      	add	r3, r1
 80145ba:	3314      	adds	r3, #20
 80145bc:	2202      	movs	r2, #2
 80145be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80145c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145c4:	492d      	ldr	r1, [pc, #180]	; (801467c <etharp_update_arp_entry+0x148>)
 80145c6:	4613      	mov	r3, r2
 80145c8:	005b      	lsls	r3, r3, #1
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	440b      	add	r3, r1
 80145d0:	3308      	adds	r3, #8
 80145d2:	68fa      	ldr	r2, [r7, #12]
 80145d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80145d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	3308      	adds	r3, #8
 80145e4:	4a25      	ldr	r2, [pc, #148]	; (801467c <etharp_update_arp_entry+0x148>)
 80145e6:	4413      	add	r3, r2
 80145e8:	3304      	adds	r3, #4
 80145ea:	2206      	movs	r2, #6
 80145ec:	6879      	ldr	r1, [r7, #4]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f002 fa2f 	bl	8016a52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80145f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145f8:	4920      	ldr	r1, [pc, #128]	; (801467c <etharp_update_arp_entry+0x148>)
 80145fa:	4613      	mov	r3, r2
 80145fc:	005b      	lsls	r3, r3, #1
 80145fe:	4413      	add	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	440b      	add	r3, r1
 8014604:	3312      	adds	r3, #18
 8014606:	2200      	movs	r2, #0
 8014608:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801460a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801460e:	491b      	ldr	r1, [pc, #108]	; (801467c <etharp_update_arp_entry+0x148>)
 8014610:	4613      	mov	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	440b      	add	r3, r1
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d021      	beq.n	8014664 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014620:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014624:	4915      	ldr	r1, [pc, #84]	; (801467c <etharp_update_arp_entry+0x148>)
 8014626:	4613      	mov	r3, r2
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	4413      	add	r3, r2
 801462c:	00db      	lsls	r3, r3, #3
 801462e:	440b      	add	r3, r1
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014638:	4910      	ldr	r1, [pc, #64]	; (801467c <etharp_update_arp_entry+0x148>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	2200      	movs	r2, #0
 8014646:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801464e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6939      	ldr	r1, [r7, #16]
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f001 ff91 	bl	8016580 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801465e:	6938      	ldr	r0, [r7, #16]
 8014660:	f7f8 fef2 	bl	800d448 <pbuf_free>
  }
  return ERR_OK;
 8014664:	2300      	movs	r3, #0
}
 8014666:	4618      	mov	r0, r3
 8014668:	3718      	adds	r7, #24
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	0801b40c 	.word	0x0801b40c
 8014674:	0801b504 	.word	0x0801b504
 8014678:	0801b484 	.word	0x0801b484
 801467c:	200083ec 	.word	0x200083ec

08014680 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014688:	2300      	movs	r3, #0
 801468a:	60fb      	str	r3, [r7, #12]
 801468c:	e01e      	b.n	80146cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801468e:	4913      	ldr	r1, [pc, #76]	; (80146dc <etharp_cleanup_netif+0x5c>)
 8014690:	68fa      	ldr	r2, [r7, #12]
 8014692:	4613      	mov	r3, r2
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	440b      	add	r3, r1
 801469c:	3314      	adds	r3, #20
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80146a2:	7afb      	ldrb	r3, [r7, #11]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d00e      	beq.n	80146c6 <etharp_cleanup_netif+0x46>
 80146a8:	490c      	ldr	r1, [pc, #48]	; (80146dc <etharp_cleanup_netif+0x5c>)
 80146aa:	68fa      	ldr	r2, [r7, #12]
 80146ac:	4613      	mov	r3, r2
 80146ae:	005b      	lsls	r3, r3, #1
 80146b0:	4413      	add	r3, r2
 80146b2:	00db      	lsls	r3, r3, #3
 80146b4:	440b      	add	r3, r1
 80146b6:	3308      	adds	r3, #8
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d102      	bne.n	80146c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80146c0:	68f8      	ldr	r0, [r7, #12]
 80146c2:	f7ff fce5 	bl	8014090 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	3301      	adds	r3, #1
 80146ca:	60fb      	str	r3, [r7, #12]
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2b09      	cmp	r3, #9
 80146d0:	dddd      	ble.n	801468e <etharp_cleanup_netif+0xe>
    }
  }
}
 80146d2:	bf00      	nop
 80146d4:	bf00      	nop
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}
 80146dc:	200083ec 	.word	0x200083ec

080146e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80146e0:	b5b0      	push	{r4, r5, r7, lr}
 80146e2:	b08a      	sub	sp, #40	; 0x28
 80146e4:	af04      	add	r7, sp, #16
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d107      	bne.n	8014700 <etharp_input+0x20>
 80146f0:	4b3d      	ldr	r3, [pc, #244]	; (80147e8 <etharp_input+0x108>)
 80146f2:	f240 228a 	movw	r2, #650	; 0x28a
 80146f6:	493d      	ldr	r1, [pc, #244]	; (80147ec <etharp_input+0x10c>)
 80146f8:	483d      	ldr	r0, [pc, #244]	; (80147f0 <etharp_input+0x110>)
 80146fa:	f002 fa35 	bl	8016b68 <iprintf>
 80146fe:	e06f      	b.n	80147e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	881b      	ldrh	r3, [r3, #0]
 801470a:	b29b      	uxth	r3, r3
 801470c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014710:	d10c      	bne.n	801472c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014716:	2b06      	cmp	r3, #6
 8014718:	d108      	bne.n	801472c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801471e:	2b04      	cmp	r3, #4
 8014720:	d104      	bne.n	801472c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	885b      	ldrh	r3, [r3, #2]
 8014726:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014728:	2b08      	cmp	r3, #8
 801472a:	d003      	beq.n	8014734 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7f8 fe8b 	bl	800d448 <pbuf_free>
    return;
 8014732:	e055      	b.n	80147e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	330e      	adds	r3, #14
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	3318      	adds	r3, #24
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	3304      	adds	r3, #4
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d102      	bne.n	8014754 <etharp_input+0x74>
    for_us = 0;
 801474e:	2300      	movs	r3, #0
 8014750:	75fb      	strb	r3, [r7, #23]
 8014752:	e009      	b.n	8014768 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014754:	68ba      	ldr	r2, [r7, #8]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	3304      	adds	r3, #4
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	429a      	cmp	r2, r3
 801475e:	bf0c      	ite	eq
 8014760:	2301      	moveq	r3, #1
 8014762:	2300      	movne	r3, #0
 8014764:	b2db      	uxtb	r3, r3
 8014766:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	f103 0208 	add.w	r2, r3, #8
 801476e:	7dfb      	ldrb	r3, [r7, #23]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d001      	beq.n	8014778 <etharp_input+0x98>
 8014774:	2301      	movs	r3, #1
 8014776:	e000      	b.n	801477a <etharp_input+0x9a>
 8014778:	2302      	movs	r3, #2
 801477a:	f107 010c 	add.w	r1, r7, #12
 801477e:	6838      	ldr	r0, [r7, #0]
 8014780:	f7ff fed8 	bl	8014534 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	88db      	ldrh	r3, [r3, #6]
 8014788:	b29b      	uxth	r3, r3
 801478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801478e:	d003      	beq.n	8014798 <etharp_input+0xb8>
 8014790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014794:	d01e      	beq.n	80147d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014796:	e020      	b.n	80147da <etharp_input+0xfa>
      if (for_us) {
 8014798:	7dfb      	ldrb	r3, [r7, #23]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d01c      	beq.n	80147d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80147b4:	693a      	ldr	r2, [r7, #16]
 80147b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80147b8:	2102      	movs	r1, #2
 80147ba:	9103      	str	r1, [sp, #12]
 80147bc:	f107 010c 	add.w	r1, r7, #12
 80147c0:	9102      	str	r1, [sp, #8]
 80147c2:	9201      	str	r2, [sp, #4]
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	462b      	mov	r3, r5
 80147c8:	4622      	mov	r2, r4
 80147ca:	4601      	mov	r1, r0
 80147cc:	6838      	ldr	r0, [r7, #0]
 80147ce:	f000 faeb 	bl	8014da8 <etharp_raw>
      break;
 80147d2:	e001      	b.n	80147d8 <etharp_input+0xf8>
      break;
 80147d4:	bf00      	nop
 80147d6:	e000      	b.n	80147da <etharp_input+0xfa>
      break;
 80147d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7f8 fe34 	bl	800d448 <pbuf_free>
}
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bdb0      	pop	{r4, r5, r7, pc}
 80147e6:	bf00      	nop
 80147e8:	0801b40c 	.word	0x0801b40c
 80147ec:	0801b55c 	.word	0x0801b55c
 80147f0:	0801b484 	.word	0x0801b484

080147f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b086      	sub	sp, #24
 80147f8:	af02      	add	r7, sp, #8
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	4613      	mov	r3, r2
 8014800:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014802:	79fa      	ldrb	r2, [r7, #7]
 8014804:	4944      	ldr	r1, [pc, #272]	; (8014918 <etharp_output_to_arp_index+0x124>)
 8014806:	4613      	mov	r3, r2
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4413      	add	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	440b      	add	r3, r1
 8014810:	3314      	adds	r3, #20
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b01      	cmp	r3, #1
 8014816:	d806      	bhi.n	8014826 <etharp_output_to_arp_index+0x32>
 8014818:	4b40      	ldr	r3, [pc, #256]	; (801491c <etharp_output_to_arp_index+0x128>)
 801481a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801481e:	4940      	ldr	r1, [pc, #256]	; (8014920 <etharp_output_to_arp_index+0x12c>)
 8014820:	4840      	ldr	r0, [pc, #256]	; (8014924 <etharp_output_to_arp_index+0x130>)
 8014822:	f002 f9a1 	bl	8016b68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014826:	79fa      	ldrb	r2, [r7, #7]
 8014828:	493b      	ldr	r1, [pc, #236]	; (8014918 <etharp_output_to_arp_index+0x124>)
 801482a:	4613      	mov	r3, r2
 801482c:	005b      	lsls	r3, r3, #1
 801482e:	4413      	add	r3, r2
 8014830:	00db      	lsls	r3, r3, #3
 8014832:	440b      	add	r3, r1
 8014834:	3314      	adds	r3, #20
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	2b02      	cmp	r3, #2
 801483a:	d153      	bne.n	80148e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801483c:	79fa      	ldrb	r2, [r7, #7]
 801483e:	4936      	ldr	r1, [pc, #216]	; (8014918 <etharp_output_to_arp_index+0x124>)
 8014840:	4613      	mov	r3, r2
 8014842:	005b      	lsls	r3, r3, #1
 8014844:	4413      	add	r3, r2
 8014846:	00db      	lsls	r3, r3, #3
 8014848:	440b      	add	r3, r1
 801484a:	3312      	adds	r3, #18
 801484c:	881b      	ldrh	r3, [r3, #0]
 801484e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014852:	d919      	bls.n	8014888 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014854:	79fa      	ldrb	r2, [r7, #7]
 8014856:	4613      	mov	r3, r2
 8014858:	005b      	lsls	r3, r3, #1
 801485a:	4413      	add	r3, r2
 801485c:	00db      	lsls	r3, r3, #3
 801485e:	4a2e      	ldr	r2, [pc, #184]	; (8014918 <etharp_output_to_arp_index+0x124>)
 8014860:	4413      	add	r3, r2
 8014862:	3304      	adds	r3, #4
 8014864:	4619      	mov	r1, r3
 8014866:	68f8      	ldr	r0, [r7, #12]
 8014868:	f000 fb4c 	bl	8014f04 <etharp_request>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d138      	bne.n	80148e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014872:	79fa      	ldrb	r2, [r7, #7]
 8014874:	4928      	ldr	r1, [pc, #160]	; (8014918 <etharp_output_to_arp_index+0x124>)
 8014876:	4613      	mov	r3, r2
 8014878:	005b      	lsls	r3, r3, #1
 801487a:	4413      	add	r3, r2
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	440b      	add	r3, r1
 8014880:	3314      	adds	r3, #20
 8014882:	2203      	movs	r2, #3
 8014884:	701a      	strb	r2, [r3, #0]
 8014886:	e02d      	b.n	80148e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014888:	79fa      	ldrb	r2, [r7, #7]
 801488a:	4923      	ldr	r1, [pc, #140]	; (8014918 <etharp_output_to_arp_index+0x124>)
 801488c:	4613      	mov	r3, r2
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	4413      	add	r3, r2
 8014892:	00db      	lsls	r3, r3, #3
 8014894:	440b      	add	r3, r1
 8014896:	3312      	adds	r3, #18
 8014898:	881b      	ldrh	r3, [r3, #0]
 801489a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801489e:	d321      	bcc.n	80148e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80148a0:	79fa      	ldrb	r2, [r7, #7]
 80148a2:	4613      	mov	r3, r2
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4413      	add	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	4a1b      	ldr	r2, [pc, #108]	; (8014918 <etharp_output_to_arp_index+0x124>)
 80148ac:	4413      	add	r3, r2
 80148ae:	1d19      	adds	r1, r3, #4
 80148b0:	79fa      	ldrb	r2, [r7, #7]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	3308      	adds	r3, #8
 80148bc:	4a16      	ldr	r2, [pc, #88]	; (8014918 <etharp_output_to_arp_index+0x124>)
 80148be:	4413      	add	r3, r2
 80148c0:	3304      	adds	r3, #4
 80148c2:	461a      	mov	r2, r3
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	f000 fafb 	bl	8014ec0 <etharp_request_dst>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d109      	bne.n	80148e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80148d0:	79fa      	ldrb	r2, [r7, #7]
 80148d2:	4911      	ldr	r1, [pc, #68]	; (8014918 <etharp_output_to_arp_index+0x124>)
 80148d4:	4613      	mov	r3, r2
 80148d6:	005b      	lsls	r3, r3, #1
 80148d8:	4413      	add	r3, r2
 80148da:	00db      	lsls	r3, r3, #3
 80148dc:	440b      	add	r3, r1
 80148de:	3314      	adds	r3, #20
 80148e0:	2203      	movs	r2, #3
 80148e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80148ea:	79fa      	ldrb	r2, [r7, #7]
 80148ec:	4613      	mov	r3, r2
 80148ee:	005b      	lsls	r3, r3, #1
 80148f0:	4413      	add	r3, r2
 80148f2:	00db      	lsls	r3, r3, #3
 80148f4:	3308      	adds	r3, #8
 80148f6:	4a08      	ldr	r2, [pc, #32]	; (8014918 <etharp_output_to_arp_index+0x124>)
 80148f8:	4413      	add	r3, r2
 80148fa:	3304      	adds	r3, #4
 80148fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014900:	9200      	str	r2, [sp, #0]
 8014902:	460a      	mov	r2, r1
 8014904:	68b9      	ldr	r1, [r7, #8]
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f001 fe3a 	bl	8016580 <ethernet_output>
 801490c:	4603      	mov	r3, r0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	200083ec 	.word	0x200083ec
 801491c:	0801b40c 	.word	0x0801b40c
 8014920:	0801b57c 	.word	0x0801b57c
 8014924:	0801b484 	.word	0x0801b484

08014928 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b08a      	sub	sp, #40	; 0x28
 801492c:	af02      	add	r7, sp, #8
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d106      	bne.n	801494c <etharp_output+0x24>
 801493e:	4b73      	ldr	r3, [pc, #460]	; (8014b0c <etharp_output+0x1e4>)
 8014940:	f240 321e 	movw	r2, #798	; 0x31e
 8014944:	4972      	ldr	r1, [pc, #456]	; (8014b10 <etharp_output+0x1e8>)
 8014946:	4873      	ldr	r0, [pc, #460]	; (8014b14 <etharp_output+0x1ec>)
 8014948:	f002 f90e 	bl	8016b68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <etharp_output+0x38>
 8014952:	4b6e      	ldr	r3, [pc, #440]	; (8014b0c <etharp_output+0x1e4>)
 8014954:	f240 321f 	movw	r2, #799	; 0x31f
 8014958:	496f      	ldr	r1, [pc, #444]	; (8014b18 <etharp_output+0x1f0>)
 801495a:	486e      	ldr	r0, [pc, #440]	; (8014b14 <etharp_output+0x1ec>)
 801495c:	f002 f904 	bl	8016b68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d106      	bne.n	8014974 <etharp_output+0x4c>
 8014966:	4b69      	ldr	r3, [pc, #420]	; (8014b0c <etharp_output+0x1e4>)
 8014968:	f44f 7248 	mov.w	r2, #800	; 0x320
 801496c:	496b      	ldr	r1, [pc, #428]	; (8014b1c <etharp_output+0x1f4>)
 801496e:	4869      	ldr	r0, [pc, #420]	; (8014b14 <etharp_output+0x1ec>)
 8014970:	f002 f8fa 	bl	8016b68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	68f9      	ldr	r1, [r7, #12]
 801497a:	4618      	mov	r0, r3
 801497c:	f000 fef8 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d002      	beq.n	801498c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014986:	4b66      	ldr	r3, [pc, #408]	; (8014b20 <etharp_output+0x1f8>)
 8014988:	61fb      	str	r3, [r7, #28]
 801498a:	e0af      	b.n	8014aec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014994:	2be0      	cmp	r3, #224	; 0xe0
 8014996:	d118      	bne.n	80149ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014998:	2301      	movs	r3, #1
 801499a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801499c:	2300      	movs	r3, #0
 801499e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80149a0:	235e      	movs	r3, #94	; 0x5e
 80149a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	3301      	adds	r3, #1
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149ae:	b2db      	uxtb	r3, r3
 80149b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	3302      	adds	r3, #2
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	3303      	adds	r3, #3
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80149c2:	f107 0310 	add.w	r3, r7, #16
 80149c6:	61fb      	str	r3, [r7, #28]
 80149c8:	e090      	b.n	8014aec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	3304      	adds	r3, #4
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	405a      	eors	r2, r3
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	3308      	adds	r3, #8
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4013      	ands	r3, r2
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d012      	beq.n	8014a08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80149ec:	4293      	cmp	r3, r2
 80149ee:	d00b      	beq.n	8014a08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	330c      	adds	r3, #12
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d003      	beq.n	8014a02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	330c      	adds	r3, #12
 80149fe:	61bb      	str	r3, [r7, #24]
 8014a00:	e002      	b.n	8014a08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014a02:	f06f 0303 	mvn.w	r3, #3
 8014a06:	e07d      	b.n	8014b04 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a08:	4b46      	ldr	r3, [pc, #280]	; (8014b24 <etharp_output+0x1fc>)
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	4a46      	ldr	r2, [pc, #280]	; (8014b28 <etharp_output+0x200>)
 8014a10:	460b      	mov	r3, r1
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	440b      	add	r3, r1
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	4413      	add	r3, r2
 8014a1a:	3314      	adds	r3, #20
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d925      	bls.n	8014a6e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a22:	4b40      	ldr	r3, [pc, #256]	; (8014b24 <etharp_output+0x1fc>)
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	4619      	mov	r1, r3
 8014a28:	4a3f      	ldr	r2, [pc, #252]	; (8014b28 <etharp_output+0x200>)
 8014a2a:	460b      	mov	r3, r1
 8014a2c:	005b      	lsls	r3, r3, #1
 8014a2e:	440b      	add	r3, r1
 8014a30:	00db      	lsls	r3, r3, #3
 8014a32:	4413      	add	r3, r2
 8014a34:	3308      	adds	r3, #8
 8014a36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d117      	bne.n	8014a6e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	4b38      	ldr	r3, [pc, #224]	; (8014b24 <etharp_output+0x1fc>)
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	4618      	mov	r0, r3
 8014a48:	4937      	ldr	r1, [pc, #220]	; (8014b28 <etharp_output+0x200>)
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4403      	add	r3, r0
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	3304      	adds	r3, #4
 8014a56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	d108      	bne.n	8014a6e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014a5c:	4b31      	ldr	r3, [pc, #196]	; (8014b24 <etharp_output+0x1fc>)
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	461a      	mov	r2, r3
 8014a62:	68b9      	ldr	r1, [r7, #8]
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f7ff fec5 	bl	80147f4 <etharp_output_to_arp_index>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	e04a      	b.n	8014b04 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a6e:	2300      	movs	r3, #0
 8014a70:	75fb      	strb	r3, [r7, #23]
 8014a72:	e031      	b.n	8014ad8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a74:	7dfa      	ldrb	r2, [r7, #23]
 8014a76:	492c      	ldr	r1, [pc, #176]	; (8014b28 <etharp_output+0x200>)
 8014a78:	4613      	mov	r3, r2
 8014a7a:	005b      	lsls	r3, r3, #1
 8014a7c:	4413      	add	r3, r2
 8014a7e:	00db      	lsls	r3, r3, #3
 8014a80:	440b      	add	r3, r1
 8014a82:	3314      	adds	r3, #20
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d923      	bls.n	8014ad2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a8a:	7dfa      	ldrb	r2, [r7, #23]
 8014a8c:	4926      	ldr	r1, [pc, #152]	; (8014b28 <etharp_output+0x200>)
 8014a8e:	4613      	mov	r3, r2
 8014a90:	005b      	lsls	r3, r3, #1
 8014a92:	4413      	add	r3, r2
 8014a94:	00db      	lsls	r3, r3, #3
 8014a96:	440b      	add	r3, r1
 8014a98:	3308      	adds	r3, #8
 8014a9a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a9c:	68fa      	ldr	r2, [r7, #12]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d117      	bne.n	8014ad2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	6819      	ldr	r1, [r3, #0]
 8014aa6:	7dfa      	ldrb	r2, [r7, #23]
 8014aa8:	481f      	ldr	r0, [pc, #124]	; (8014b28 <etharp_output+0x200>)
 8014aaa:	4613      	mov	r3, r2
 8014aac:	005b      	lsls	r3, r3, #1
 8014aae:	4413      	add	r3, r2
 8014ab0:	00db      	lsls	r3, r3, #3
 8014ab2:	4403      	add	r3, r0
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014ab8:	4299      	cmp	r1, r3
 8014aba:	d10a      	bne.n	8014ad2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014abc:	4a19      	ldr	r2, [pc, #100]	; (8014b24 <etharp_output+0x1fc>)
 8014abe:	7dfb      	ldrb	r3, [r7, #23]
 8014ac0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	68f8      	ldr	r0, [r7, #12]
 8014aca:	f7ff fe93 	bl	80147f4 <etharp_output_to_arp_index>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	e018      	b.n	8014b04 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014ad2:	7dfb      	ldrb	r3, [r7, #23]
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	75fb      	strb	r3, [r7, #23]
 8014ad8:	7dfb      	ldrb	r3, [r7, #23]
 8014ada:	2b09      	cmp	r3, #9
 8014adc:	d9ca      	bls.n	8014a74 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014ade:	68ba      	ldr	r2, [r7, #8]
 8014ae0:	69b9      	ldr	r1, [r7, #24]
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f000 f822 	bl	8014b2c <etharp_query>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	e00b      	b.n	8014b04 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014af6:	9300      	str	r3, [sp, #0]
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	68b9      	ldr	r1, [r7, #8]
 8014afc:	68f8      	ldr	r0, [r7, #12]
 8014afe:	f001 fd3f 	bl	8016580 <ethernet_output>
 8014b02:	4603      	mov	r3, r0
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3720      	adds	r7, #32
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	0801b40c 	.word	0x0801b40c
 8014b10:	0801b55c 	.word	0x0801b55c
 8014b14:	0801b484 	.word	0x0801b484
 8014b18:	0801b5ac 	.word	0x0801b5ac
 8014b1c:	0801b54c 	.word	0x0801b54c
 8014b20:	08022b7c 	.word	0x08022b7c
 8014b24:	200084dc 	.word	0x200084dc
 8014b28:	200083ec 	.word	0x200083ec

08014b2c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08c      	sub	sp, #48	; 0x30
 8014b30:	af02      	add	r7, sp, #8
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3326      	adds	r3, #38	; 0x26
 8014b3c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014b3e:	23ff      	movs	r3, #255	; 0xff
 8014b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014b44:	2300      	movs	r3, #0
 8014b46:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68f9      	ldr	r1, [r7, #12]
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f000 fe0e 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10c      	bne.n	8014b74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b62:	2be0      	cmp	r3, #224	; 0xe0
 8014b64:	d006      	beq.n	8014b74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d003      	beq.n	8014b74 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d102      	bne.n	8014b7a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b74:	f06f 030f 	mvn.w	r3, #15
 8014b78:	e101      	b.n	8014d7e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	2101      	movs	r1, #1
 8014b7e:	68b8      	ldr	r0, [r7, #8]
 8014b80:	f7ff fb60 	bl	8014244 <etharp_find_entry>
 8014b84:	4603      	mov	r3, r0
 8014b86:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	da02      	bge.n	8014b96 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014b90:	8a7b      	ldrh	r3, [r7, #18]
 8014b92:	b25b      	sxtb	r3, r3
 8014b94:	e0f3      	b.n	8014d7e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014b96:	8a7b      	ldrh	r3, [r7, #18]
 8014b98:	2b7e      	cmp	r3, #126	; 0x7e
 8014b9a:	d906      	bls.n	8014baa <etharp_query+0x7e>
 8014b9c:	4b7a      	ldr	r3, [pc, #488]	; (8014d88 <etharp_query+0x25c>)
 8014b9e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014ba2:	497a      	ldr	r1, [pc, #488]	; (8014d8c <etharp_query+0x260>)
 8014ba4:	487a      	ldr	r0, [pc, #488]	; (8014d90 <etharp_query+0x264>)
 8014ba6:	f001 ffdf 	bl	8016b68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014baa:	8a7b      	ldrh	r3, [r7, #18]
 8014bac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014bae:	7c7a      	ldrb	r2, [r7, #17]
 8014bb0:	4978      	ldr	r1, [pc, #480]	; (8014d94 <etharp_query+0x268>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	3314      	adds	r3, #20
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d115      	bne.n	8014bf0 <etharp_query+0xc4>
    is_new_entry = 1;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014bc8:	7c7a      	ldrb	r2, [r7, #17]
 8014bca:	4972      	ldr	r1, [pc, #456]	; (8014d94 <etharp_query+0x268>)
 8014bcc:	4613      	mov	r3, r2
 8014bce:	005b      	lsls	r3, r3, #1
 8014bd0:	4413      	add	r3, r2
 8014bd2:	00db      	lsls	r3, r3, #3
 8014bd4:	440b      	add	r3, r1
 8014bd6:	3314      	adds	r3, #20
 8014bd8:	2201      	movs	r2, #1
 8014bda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014bdc:	7c7a      	ldrb	r2, [r7, #17]
 8014bde:	496d      	ldr	r1, [pc, #436]	; (8014d94 <etharp_query+0x268>)
 8014be0:	4613      	mov	r3, r2
 8014be2:	005b      	lsls	r3, r3, #1
 8014be4:	4413      	add	r3, r2
 8014be6:	00db      	lsls	r3, r3, #3
 8014be8:	440b      	add	r3, r1
 8014bea:	3308      	adds	r3, #8
 8014bec:	68fa      	ldr	r2, [r7, #12]
 8014bee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014bf0:	7c7a      	ldrb	r2, [r7, #17]
 8014bf2:	4968      	ldr	r1, [pc, #416]	; (8014d94 <etharp_query+0x268>)
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	4413      	add	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	440b      	add	r3, r1
 8014bfe:	3314      	adds	r3, #20
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d011      	beq.n	8014c2a <etharp_query+0xfe>
 8014c06:	7c7a      	ldrb	r2, [r7, #17]
 8014c08:	4962      	ldr	r1, [pc, #392]	; (8014d94 <etharp_query+0x268>)
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	005b      	lsls	r3, r3, #1
 8014c0e:	4413      	add	r3, r2
 8014c10:	00db      	lsls	r3, r3, #3
 8014c12:	440b      	add	r3, r1
 8014c14:	3314      	adds	r3, #20
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d806      	bhi.n	8014c2a <etharp_query+0xfe>
 8014c1c:	4b5a      	ldr	r3, [pc, #360]	; (8014d88 <etharp_query+0x25c>)
 8014c1e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014c22:	495d      	ldr	r1, [pc, #372]	; (8014d98 <etharp_query+0x26c>)
 8014c24:	485a      	ldr	r0, [pc, #360]	; (8014d90 <etharp_query+0x264>)
 8014c26:	f001 ff9f 	bl	8016b68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d102      	bne.n	8014c36 <etharp_query+0x10a>
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d10c      	bne.n	8014c50 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014c36:	68b9      	ldr	r1, [r7, #8]
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f000 f963 	bl	8014f04 <etharp_request>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d102      	bne.n	8014c50 <etharp_query+0x124>
      return result;
 8014c4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014c4e:	e096      	b.n	8014d7e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d106      	bne.n	8014c64 <etharp_query+0x138>
 8014c56:	4b4c      	ldr	r3, [pc, #304]	; (8014d88 <etharp_query+0x25c>)
 8014c58:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014c5c:	494f      	ldr	r1, [pc, #316]	; (8014d9c <etharp_query+0x270>)
 8014c5e:	484c      	ldr	r0, [pc, #304]	; (8014d90 <etharp_query+0x264>)
 8014c60:	f001 ff82 	bl	8016b68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c64:	7c7a      	ldrb	r2, [r7, #17]
 8014c66:	494b      	ldr	r1, [pc, #300]	; (8014d94 <etharp_query+0x268>)
 8014c68:	4613      	mov	r3, r2
 8014c6a:	005b      	lsls	r3, r3, #1
 8014c6c:	4413      	add	r3, r2
 8014c6e:	00db      	lsls	r3, r3, #3
 8014c70:	440b      	add	r3, r1
 8014c72:	3314      	adds	r3, #20
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	2b01      	cmp	r3, #1
 8014c78:	d917      	bls.n	8014caa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c7a:	4a49      	ldr	r2, [pc, #292]	; (8014da0 <etharp_query+0x274>)
 8014c7c:	7c7b      	ldrb	r3, [r7, #17]
 8014c7e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c80:	7c7a      	ldrb	r2, [r7, #17]
 8014c82:	4613      	mov	r3, r2
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	4413      	add	r3, r2
 8014c88:	00db      	lsls	r3, r3, #3
 8014c8a:	3308      	adds	r3, #8
 8014c8c:	4a41      	ldr	r2, [pc, #260]	; (8014d94 <etharp_query+0x268>)
 8014c8e:	4413      	add	r3, r2
 8014c90:	3304      	adds	r3, #4
 8014c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c96:	9200      	str	r2, [sp, #0]
 8014c98:	697a      	ldr	r2, [r7, #20]
 8014c9a:	6879      	ldr	r1, [r7, #4]
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	f001 fc6f 	bl	8016580 <ethernet_output>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ca8:	e067      	b.n	8014d7a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014caa:	7c7a      	ldrb	r2, [r7, #17]
 8014cac:	4939      	ldr	r1, [pc, #228]	; (8014d94 <etharp_query+0x268>)
 8014cae:	4613      	mov	r3, r2
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	440b      	add	r3, r1
 8014cb8:	3314      	adds	r3, #20
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d15c      	bne.n	8014d7a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014cc8:	e01c      	b.n	8014d04 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	895a      	ldrh	r2, [r3, #10]
 8014cce:	69fb      	ldr	r3, [r7, #28]
 8014cd0:	891b      	ldrh	r3, [r3, #8]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d10a      	bne.n	8014cec <etharp_query+0x1c0>
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d006      	beq.n	8014cec <etharp_query+0x1c0>
 8014cde:	4b2a      	ldr	r3, [pc, #168]	; (8014d88 <etharp_query+0x25c>)
 8014ce0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014ce4:	492f      	ldr	r1, [pc, #188]	; (8014da4 <etharp_query+0x278>)
 8014ce6:	482a      	ldr	r0, [pc, #168]	; (8014d90 <etharp_query+0x264>)
 8014ce8:	f001 ff3e 	bl	8016b68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	7b1b      	ldrb	r3, [r3, #12]
 8014cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d002      	beq.n	8014cfe <etharp_query+0x1d2>
        copy_needed = 1;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	61bb      	str	r3, [r7, #24]
        break;
 8014cfc:	e005      	b.n	8014d0a <etharp_query+0x1de>
      }
      p = p->next;
 8014cfe:	69fb      	ldr	r3, [r7, #28]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1df      	bne.n	8014cca <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d007      	beq.n	8014d20 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014d16:	200e      	movs	r0, #14
 8014d18:	f7f8 fdfe 	bl	800d918 <pbuf_clone>
 8014d1c:	61f8      	str	r0, [r7, #28]
 8014d1e:	e004      	b.n	8014d2a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014d24:	69f8      	ldr	r0, [r7, #28]
 8014d26:	f7f8 fc35 	bl	800d594 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d021      	beq.n	8014d74 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014d30:	7c7a      	ldrb	r2, [r7, #17]
 8014d32:	4918      	ldr	r1, [pc, #96]	; (8014d94 <etharp_query+0x268>)
 8014d34:	4613      	mov	r3, r2
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	4413      	add	r3, r2
 8014d3a:	00db      	lsls	r3, r3, #3
 8014d3c:	440b      	add	r3, r1
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d00a      	beq.n	8014d5a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014d44:	7c7a      	ldrb	r2, [r7, #17]
 8014d46:	4913      	ldr	r1, [pc, #76]	; (8014d94 <etharp_query+0x268>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f8 fb77 	bl	800d448 <pbuf_free>
      }
      arp_table[i].q = p;
 8014d5a:	7c7a      	ldrb	r2, [r7, #17]
 8014d5c:	490d      	ldr	r1, [pc, #52]	; (8014d94 <etharp_query+0x268>)
 8014d5e:	4613      	mov	r3, r2
 8014d60:	005b      	lsls	r3, r3, #1
 8014d62:	4413      	add	r3, r2
 8014d64:	00db      	lsls	r3, r3, #3
 8014d66:	440b      	add	r3, r1
 8014d68:	69fa      	ldr	r2, [r7, #28]
 8014d6a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d72:	e002      	b.n	8014d7a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d74:	23ff      	movs	r3, #255	; 0xff
 8014d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3728      	adds	r7, #40	; 0x28
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	0801b40c 	.word	0x0801b40c
 8014d8c:	0801b5b8 	.word	0x0801b5b8
 8014d90:	0801b484 	.word	0x0801b484
 8014d94:	200083ec 	.word	0x200083ec
 8014d98:	0801b5c8 	.word	0x0801b5c8
 8014d9c:	0801b5ac 	.word	0x0801b5ac
 8014da0:	200084dc 	.word	0x200084dc
 8014da4:	0801b5f0 	.word	0x0801b5f0

08014da8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08a      	sub	sp, #40	; 0x28
 8014dac:	af02      	add	r7, sp, #8
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
 8014db4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014db6:	2300      	movs	r3, #0
 8014db8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d106      	bne.n	8014dce <etharp_raw+0x26>
 8014dc0:	4b3a      	ldr	r3, [pc, #232]	; (8014eac <etharp_raw+0x104>)
 8014dc2:	f240 4257 	movw	r2, #1111	; 0x457
 8014dc6:	493a      	ldr	r1, [pc, #232]	; (8014eb0 <etharp_raw+0x108>)
 8014dc8:	483a      	ldr	r0, [pc, #232]	; (8014eb4 <etharp_raw+0x10c>)
 8014dca:	f001 fecd 	bl	8016b68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014dce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014dd2:	211c      	movs	r1, #28
 8014dd4:	200e      	movs	r0, #14
 8014dd6:	f7f8 f853 	bl	800ce80 <pbuf_alloc>
 8014dda:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d102      	bne.n	8014de8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014de6:	e05d      	b.n	8014ea4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	895b      	ldrh	r3, [r3, #10]
 8014dec:	2b1b      	cmp	r3, #27
 8014dee:	d806      	bhi.n	8014dfe <etharp_raw+0x56>
 8014df0:	4b2e      	ldr	r3, [pc, #184]	; (8014eac <etharp_raw+0x104>)
 8014df2:	f240 4262 	movw	r2, #1122	; 0x462
 8014df6:	4930      	ldr	r1, [pc, #192]	; (8014eb8 <etharp_raw+0x110>)
 8014df8:	482e      	ldr	r0, [pc, #184]	; (8014eb4 <etharp_raw+0x10c>)
 8014dfa:	f001 feb5 	bl	8016b68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014e04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7f6 fe94 	bl	800bb34 <lwip_htons>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	461a      	mov	r2, r3
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e1a:	2b06      	cmp	r3, #6
 8014e1c:	d006      	beq.n	8014e2c <etharp_raw+0x84>
 8014e1e:	4b23      	ldr	r3, [pc, #140]	; (8014eac <etharp_raw+0x104>)
 8014e20:	f240 4269 	movw	r2, #1129	; 0x469
 8014e24:	4925      	ldr	r1, [pc, #148]	; (8014ebc <etharp_raw+0x114>)
 8014e26:	4823      	ldr	r0, [pc, #140]	; (8014eb4 <etharp_raw+0x10c>)
 8014e28:	f001 fe9e 	bl	8016b68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	3308      	adds	r3, #8
 8014e30:	2206      	movs	r2, #6
 8014e32:	6839      	ldr	r1, [r7, #0]
 8014e34:	4618      	mov	r0, r3
 8014e36:	f001 fe0c 	bl	8016a52 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	3312      	adds	r3, #18
 8014e3e:	2206      	movs	r2, #6
 8014e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e42:	4618      	mov	r0, r3
 8014e44:	f001 fe05 	bl	8016a52 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	330e      	adds	r3, #14
 8014e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e4e:	6812      	ldr	r2, [r2, #0]
 8014e50:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	3318      	adds	r3, #24
 8014e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e58:	6812      	ldr	r2, [r2, #0]
 8014e5a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	701a      	strb	r2, [r3, #0]
 8014e62:	2200      	movs	r2, #0
 8014e64:	f042 0201 	orr.w	r2, r2, #1
 8014e68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	f042 0208 	orr.w	r2, r2, #8
 8014e72:	709a      	strb	r2, [r3, #2]
 8014e74:	2200      	movs	r2, #0
 8014e76:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	2206      	movs	r2, #6
 8014e7c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2204      	movs	r2, #4
 8014e82:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e84:	f640 0306 	movw	r3, #2054	; 0x806
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	68ba      	ldr	r2, [r7, #8]
 8014e8e:	69b9      	ldr	r1, [r7, #24]
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	f001 fb75 	bl	8016580 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014e96:	69b8      	ldr	r0, [r7, #24]
 8014e98:	f7f8 fad6 	bl	800d448 <pbuf_free>
  p = NULL;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ea0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3720      	adds	r7, #32
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	0801b40c 	.word	0x0801b40c
 8014eb0:	0801b55c 	.word	0x0801b55c
 8014eb4:	0801b484 	.word	0x0801b484
 8014eb8:	0801b60c 	.word	0x0801b60c
 8014ebc:	0801b640 	.word	0x0801b640

08014ec0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b088      	sub	sp, #32
 8014ec4:	af04      	add	r7, sp, #16
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014edc:	2201      	movs	r2, #1
 8014ede:	9203      	str	r2, [sp, #12]
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	9202      	str	r2, [sp, #8]
 8014ee4:	4a06      	ldr	r2, [pc, #24]	; (8014f00 <etharp_request_dst+0x40>)
 8014ee6:	9201      	str	r2, [sp, #4]
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	4603      	mov	r3, r0
 8014eec:	687a      	ldr	r2, [r7, #4]
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f7ff ff5a 	bl	8014da8 <etharp_raw>
 8014ef4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3710      	adds	r7, #16
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	08022b84 	.word	0x08022b84

08014f04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014f0e:	4a05      	ldr	r2, [pc, #20]	; (8014f24 <etharp_request+0x20>)
 8014f10:	6839      	ldr	r1, [r7, #0]
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff ffd4 	bl	8014ec0 <etharp_request_dst>
 8014f18:	4603      	mov	r3, r0
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3708      	adds	r7, #8
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	08022b7c 	.word	0x08022b7c

08014f28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b08e      	sub	sp, #56	; 0x38
 8014f2c:	af04      	add	r7, sp, #16
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014f32:	4b79      	ldr	r3, [pc, #484]	; (8015118 <icmp_input+0x1f0>)
 8014f34:	689b      	ldr	r3, [r3, #8]
 8014f36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	f003 030f 	and.w	r3, r3, #15
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f4a:	2b13      	cmp	r3, #19
 8014f4c:	f240 80cd 	bls.w	80150ea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	895b      	ldrh	r3, [r3, #10]
 8014f54:	2b03      	cmp	r3, #3
 8014f56:	f240 80ca 	bls.w	80150ee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f000 80b7 	beq.w	80150dc <icmp_input+0x1b4>
 8014f6e:	2b08      	cmp	r3, #8
 8014f70:	f040 80b7 	bne.w	80150e2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f74:	4b69      	ldr	r3, [pc, #420]	; (801511c <icmp_input+0x1f4>)
 8014f76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f78:	4b67      	ldr	r3, [pc, #412]	; (8015118 <icmp_input+0x1f0>)
 8014f7a:	695b      	ldr	r3, [r3, #20]
 8014f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f80:	2be0      	cmp	r3, #224	; 0xe0
 8014f82:	f000 80bb 	beq.w	80150fc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f86:	4b64      	ldr	r3, [pc, #400]	; (8015118 <icmp_input+0x1f0>)
 8014f88:	695b      	ldr	r3, [r3, #20]
 8014f8a:	4a63      	ldr	r2, [pc, #396]	; (8015118 <icmp_input+0x1f0>)
 8014f8c:	6812      	ldr	r2, [r2, #0]
 8014f8e:	4611      	mov	r1, r2
 8014f90:	4618      	mov	r0, r3
 8014f92:	f000 fbed 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8014f96:	4603      	mov	r3, r0
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	f040 80b1 	bne.w	8015100 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	891b      	ldrh	r3, [r3, #8]
 8014fa2:	2b07      	cmp	r3, #7
 8014fa4:	f240 80a5 	bls.w	80150f2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014faa:	330e      	adds	r3, #14
 8014fac:	4619      	mov	r1, r3
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f7f8 f9b4 	bl	800d31c <pbuf_add_header>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d04b      	beq.n	8015052 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	891a      	ldrh	r2, [r3, #8]
 8014fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fc0:	4413      	add	r3, r2
 8014fc2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	891b      	ldrh	r3, [r3, #8]
 8014fc8:	8b7a      	ldrh	r2, [r7, #26]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	f0c0 809a 	bcc.w	8015104 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014fd0:	8b7b      	ldrh	r3, [r7, #26]
 8014fd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	200e      	movs	r0, #14
 8014fda:	f7f7 ff51 	bl	800ce80 <pbuf_alloc>
 8014fde:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	f000 8090 	beq.w	8015108 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	895b      	ldrh	r3, [r3, #10]
 8014fec:	461a      	mov	r2, r3
 8014fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d203      	bcs.n	8014ffe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014ff6:	6978      	ldr	r0, [r7, #20]
 8014ff8:	f7f8 fa26 	bl	800d448 <pbuf_free>
          goto icmperr;
 8014ffc:	e085      	b.n	801510a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015006:	4618      	mov	r0, r3
 8015008:	f001 fd23 	bl	8016a52 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801500c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801500e:	4619      	mov	r1, r3
 8015010:	6978      	ldr	r0, [r7, #20]
 8015012:	f7f8 f993 	bl	800d33c <pbuf_remove_header>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d009      	beq.n	8015030 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801501c:	4b40      	ldr	r3, [pc, #256]	; (8015120 <icmp_input+0x1f8>)
 801501e:	22b6      	movs	r2, #182	; 0xb6
 8015020:	4940      	ldr	r1, [pc, #256]	; (8015124 <icmp_input+0x1fc>)
 8015022:	4841      	ldr	r0, [pc, #260]	; (8015128 <icmp_input+0x200>)
 8015024:	f001 fda0 	bl	8016b68 <iprintf>
          pbuf_free(r);
 8015028:	6978      	ldr	r0, [r7, #20]
 801502a:	f7f8 fa0d 	bl	800d448 <pbuf_free>
          goto icmperr;
 801502e:	e06c      	b.n	801510a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	6978      	ldr	r0, [r7, #20]
 8015034:	f7f8 fb2c 	bl	800d690 <pbuf_copy>
 8015038:	4603      	mov	r3, r0
 801503a:	2b00      	cmp	r3, #0
 801503c:	d003      	beq.n	8015046 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801503e:	6978      	ldr	r0, [r7, #20]
 8015040:	f7f8 fa02 	bl	800d448 <pbuf_free>
          goto icmperr;
 8015044:	e061      	b.n	801510a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7f8 f9fe 	bl	800d448 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	607b      	str	r3, [r7, #4]
 8015050:	e00f      	b.n	8015072 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015054:	330e      	adds	r3, #14
 8015056:	4619      	mov	r1, r3
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7f8 f96f 	bl	800d33c <pbuf_remove_header>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d006      	beq.n	8015072 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015064:	4b2e      	ldr	r3, [pc, #184]	; (8015120 <icmp_input+0x1f8>)
 8015066:	22c7      	movs	r2, #199	; 0xc7
 8015068:	4930      	ldr	r1, [pc, #192]	; (801512c <icmp_input+0x204>)
 801506a:	482f      	ldr	r0, [pc, #188]	; (8015128 <icmp_input+0x200>)
 801506c:	f001 fd7c 	bl	8016b68 <iprintf>
          goto icmperr;
 8015070:	e04b      	b.n	801510a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801507a:	4619      	mov	r1, r3
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7f8 f94d 	bl	800d31c <pbuf_add_header>
 8015082:	4603      	mov	r3, r0
 8015084:	2b00      	cmp	r3, #0
 8015086:	d12b      	bne.n	80150e0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015096:	4b20      	ldr	r3, [pc, #128]	; (8015118 <icmp_input+0x1f0>)
 8015098:	691a      	ldr	r2, [r3, #16]
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	2200      	movs	r2, #0
 80150a2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	2200      	movs	r2, #0
 80150a8:	709a      	strb	r2, [r3, #2]
 80150aa:	2200      	movs	r2, #0
 80150ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	22ff      	movs	r2, #255	; 0xff
 80150b2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2200      	movs	r2, #0
 80150b8:	729a      	strb	r2, [r3, #10]
 80150ba:	2200      	movs	r2, #0
 80150bc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	9302      	str	r3, [sp, #8]
 80150c2:	2301      	movs	r3, #1
 80150c4:	9301      	str	r3, [sp, #4]
 80150c6:	2300      	movs	r3, #0
 80150c8:	9300      	str	r3, [sp, #0]
 80150ca:	23ff      	movs	r3, #255	; 0xff
 80150cc:	2200      	movs	r2, #0
 80150ce:	69f9      	ldr	r1, [r7, #28]
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f000 fa75 	bl	80155c0 <ip4_output_if>
 80150d6:	4603      	mov	r3, r0
 80150d8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80150da:	e001      	b.n	80150e0 <icmp_input+0x1b8>
      break;
 80150dc:	bf00      	nop
 80150de:	e000      	b.n	80150e2 <icmp_input+0x1ba>
      break;
 80150e0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7f8 f9b0 	bl	800d448 <pbuf_free>
  return;
 80150e8:	e013      	b.n	8015112 <icmp_input+0x1ea>
    goto lenerr;
 80150ea:	bf00      	nop
 80150ec:	e002      	b.n	80150f4 <icmp_input+0x1cc>
    goto lenerr;
 80150ee:	bf00      	nop
 80150f0:	e000      	b.n	80150f4 <icmp_input+0x1cc>
        goto lenerr;
 80150f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7f8 f9a7 	bl	800d448 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150fa:	e00a      	b.n	8015112 <icmp_input+0x1ea>
        goto icmperr;
 80150fc:	bf00      	nop
 80150fe:	e004      	b.n	801510a <icmp_input+0x1e2>
        goto icmperr;
 8015100:	bf00      	nop
 8015102:	e002      	b.n	801510a <icmp_input+0x1e2>
          goto icmperr;
 8015104:	bf00      	nop
 8015106:	e000      	b.n	801510a <icmp_input+0x1e2>
          goto icmperr;
 8015108:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7f8 f99c 	bl	800d448 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015110:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015112:	3728      	adds	r7, #40	; 0x28
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	200112d4 	.word	0x200112d4
 801511c:	200112e8 	.word	0x200112e8
 8015120:	0801b684 	.word	0x0801b684
 8015124:	0801b6bc 	.word	0x0801b6bc
 8015128:	0801b6f4 	.word	0x0801b6f4
 801512c:	0801b71c 	.word	0x0801b71c

08015130 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	460b      	mov	r3, r1
 801513a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801513c:	78fb      	ldrb	r3, [r7, #3]
 801513e:	461a      	mov	r2, r3
 8015140:	2103      	movs	r1, #3
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f000 f814 	bl	8015170 <icmp_send_response>
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	460b      	mov	r3, r1
 801515a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801515c:	78fb      	ldrb	r3, [r7, #3]
 801515e:	461a      	mov	r2, r3
 8015160:	210b      	movs	r1, #11
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f000 f804 	bl	8015170 <icmp_send_response>
}
 8015168:	bf00      	nop
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b08c      	sub	sp, #48	; 0x30
 8015174:	af04      	add	r7, sp, #16
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	460b      	mov	r3, r1
 801517a:	70fb      	strb	r3, [r7, #3]
 801517c:	4613      	mov	r3, r2
 801517e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015180:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015184:	2124      	movs	r1, #36	; 0x24
 8015186:	2022      	movs	r0, #34	; 0x22
 8015188:	f7f7 fe7a 	bl	800ce80 <pbuf_alloc>
 801518c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801518e:	69fb      	ldr	r3, [r7, #28]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d04c      	beq.n	801522e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	895b      	ldrh	r3, [r3, #10]
 8015198:	2b23      	cmp	r3, #35	; 0x23
 801519a:	d806      	bhi.n	80151aa <icmp_send_response+0x3a>
 801519c:	4b26      	ldr	r3, [pc, #152]	; (8015238 <icmp_send_response+0xc8>)
 801519e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80151a2:	4926      	ldr	r1, [pc, #152]	; (801523c <icmp_send_response+0xcc>)
 80151a4:	4826      	ldr	r0, [pc, #152]	; (8015240 <icmp_send_response+0xd0>)
 80151a6:	f001 fcdf 	bl	8016b68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	78fa      	ldrb	r2, [r7, #3]
 80151ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	78ba      	ldrb	r2, [r7, #2]
 80151c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	2200      	movs	r2, #0
 80151c6:	711a      	strb	r2, [r3, #4]
 80151c8:	2200      	movs	r2, #0
 80151ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	2200      	movs	r2, #0
 80151d0:	719a      	strb	r2, [r3, #6]
 80151d2:	2200      	movs	r2, #0
 80151d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	f103 0008 	add.w	r0, r3, #8
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	221c      	movs	r2, #28
 80151e4:	4619      	mov	r1, r3
 80151e6:	f001 fc34 	bl	8016a52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80151f0:	f107 030c 	add.w	r3, r7, #12
 80151f4:	4618      	mov	r0, r3
 80151f6:	f000 f825 	bl	8015244 <ip4_route>
 80151fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d011      	beq.n	8015226 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	2200      	movs	r2, #0
 8015206:	709a      	strb	r2, [r3, #2]
 8015208:	2200      	movs	r2, #0
 801520a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801520c:	f107 020c 	add.w	r2, r7, #12
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	9302      	str	r3, [sp, #8]
 8015214:	2301      	movs	r3, #1
 8015216:	9301      	str	r3, [sp, #4]
 8015218:	2300      	movs	r3, #0
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	23ff      	movs	r3, #255	; 0xff
 801521e:	2100      	movs	r1, #0
 8015220:	69f8      	ldr	r0, [r7, #28]
 8015222:	f000 f9cd 	bl	80155c0 <ip4_output_if>
  }
  pbuf_free(q);
 8015226:	69f8      	ldr	r0, [r7, #28]
 8015228:	f7f8 f90e 	bl	800d448 <pbuf_free>
 801522c:	e000      	b.n	8015230 <icmp_send_response+0xc0>
    return;
 801522e:	bf00      	nop
}
 8015230:	3720      	adds	r7, #32
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	0801b684 	.word	0x0801b684
 801523c:	0801b750 	.word	0x0801b750
 8015240:	0801b6f4 	.word	0x0801b6f4

08015244 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015244:	b480      	push	{r7}
 8015246:	b085      	sub	sp, #20
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801524c:	4b33      	ldr	r3, [pc, #204]	; (801531c <ip4_route+0xd8>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	60fb      	str	r3, [r7, #12]
 8015252:	e036      	b.n	80152c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d02b      	beq.n	80152bc <ip4_route+0x78>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801526a:	089b      	lsrs	r3, r3, #2
 801526c:	f003 0301 	and.w	r3, r3, #1
 8015270:	b2db      	uxtb	r3, r3
 8015272:	2b00      	cmp	r3, #0
 8015274:	d022      	beq.n	80152bc <ip4_route+0x78>
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	3304      	adds	r3, #4
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d01d      	beq.n	80152bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	3304      	adds	r3, #4
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	405a      	eors	r2, r3
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	3308      	adds	r3, #8
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	4013      	ands	r3, r2
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	e038      	b.n	801530e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152a2:	f003 0302 	and.w	r3, r3, #2
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d108      	bne.n	80152bc <ip4_route+0x78>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	681a      	ldr	r2, [r3, #0]
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	330c      	adds	r3, #12
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d101      	bne.n	80152bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	e028      	b.n	801530e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	60fb      	str	r3, [r7, #12]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1c5      	bne.n	8015254 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152c8:	4b15      	ldr	r3, [pc, #84]	; (8015320 <ip4_route+0xdc>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d01a      	beq.n	8015306 <ip4_route+0xc2>
 80152d0:	4b13      	ldr	r3, [pc, #76]	; (8015320 <ip4_route+0xdc>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152d8:	f003 0301 	and.w	r3, r3, #1
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d012      	beq.n	8015306 <ip4_route+0xc2>
 80152e0:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <ip4_route+0xdc>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152e8:	f003 0304 	and.w	r3, r3, #4
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00a      	beq.n	8015306 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152f0:	4b0b      	ldr	r3, [pc, #44]	; (8015320 <ip4_route+0xdc>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	3304      	adds	r3, #4
 80152f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d004      	beq.n	8015306 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	b2db      	uxtb	r3, r3
 8015302:	2b7f      	cmp	r3, #127	; 0x7f
 8015304:	d101      	bne.n	801530a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015306:	2300      	movs	r3, #0
 8015308:	e001      	b.n	801530e <ip4_route+0xca>
  }

  return netif_default;
 801530a:	4b05      	ldr	r3, [pc, #20]	; (8015320 <ip4_route+0xdc>)
 801530c:	681b      	ldr	r3, [r3, #0]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3714      	adds	r7, #20
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	20014a94 	.word	0x20014a94
 8015320:	20014a98 	.word	0x20014a98

08015324 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015332:	f003 0301 	and.w	r3, r3, #1
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b00      	cmp	r3, #0
 801533a:	d016      	beq.n	801536a <ip4_input_accept+0x46>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	3304      	adds	r3, #4
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d011      	beq.n	801536a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015346:	4b0b      	ldr	r3, [pc, #44]	; (8015374 <ip4_input_accept+0x50>)
 8015348:	695a      	ldr	r2, [r3, #20]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	3304      	adds	r3, #4
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	429a      	cmp	r2, r3
 8015352:	d008      	beq.n	8015366 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015354:	4b07      	ldr	r3, [pc, #28]	; (8015374 <ip4_input_accept+0x50>)
 8015356:	695b      	ldr	r3, [r3, #20]
 8015358:	6879      	ldr	r1, [r7, #4]
 801535a:	4618      	mov	r0, r3
 801535c:	f000 fa08 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8015360:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015362:	2b00      	cmp	r3, #0
 8015364:	d001      	beq.n	801536a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015366:	2301      	movs	r3, #1
 8015368:	e000      	b.n	801536c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801536a:	2300      	movs	r3, #0
}
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	200112d4 	.word	0x200112d4

08015378 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b086      	sub	sp, #24
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	091b      	lsrs	r3, r3, #4
 801538e:	b2db      	uxtb	r3, r3
 8015390:	2b04      	cmp	r3, #4
 8015392:	d004      	beq.n	801539e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7f8 f857 	bl	800d448 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801539a:	2300      	movs	r3, #0
 801539c:	e107      	b.n	80155ae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	f003 030f 	and.w	r3, r3, #15
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	009b      	lsls	r3, r3, #2
 80153aa:	b2db      	uxtb	r3, r3
 80153ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	885b      	ldrh	r3, [r3, #2]
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7f6 fbbd 	bl	800bb34 <lwip_htons>
 80153ba:	4603      	mov	r3, r0
 80153bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	891b      	ldrh	r3, [r3, #8]
 80153c2:	89ba      	ldrh	r2, [r7, #12]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d204      	bcs.n	80153d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80153c8:	89bb      	ldrh	r3, [r7, #12]
 80153ca:	4619      	mov	r1, r3
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7f7 feb5 	bl	800d13c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	895b      	ldrh	r3, [r3, #10]
 80153d6:	89fa      	ldrh	r2, [r7, #14]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d807      	bhi.n	80153ec <ip4_input+0x74>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	891b      	ldrh	r3, [r3, #8]
 80153e0:	89ba      	ldrh	r2, [r7, #12]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d802      	bhi.n	80153ec <ip4_input+0x74>
 80153e6:	89fb      	ldrh	r3, [r7, #14]
 80153e8:	2b13      	cmp	r3, #19
 80153ea:	d804      	bhi.n	80153f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7f8 f82b 	bl	800d448 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80153f2:	2300      	movs	r3, #0
 80153f4:	e0db      	b.n	80155ae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	691b      	ldr	r3, [r3, #16]
 80153fa:	4a6f      	ldr	r2, [pc, #444]	; (80155b8 <ip4_input+0x240>)
 80153fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	4a6d      	ldr	r2, [pc, #436]	; (80155b8 <ip4_input+0x240>)
 8015404:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015406:	4b6c      	ldr	r3, [pc, #432]	; (80155b8 <ip4_input+0x240>)
 8015408:	695b      	ldr	r3, [r3, #20]
 801540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801540e:	2be0      	cmp	r3, #224	; 0xe0
 8015410:	d112      	bne.n	8015438 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015418:	f003 0301 	and.w	r3, r3, #1
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b00      	cmp	r3, #0
 8015420:	d007      	beq.n	8015432 <ip4_input+0xba>
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	3304      	adds	r3, #4
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d002      	beq.n	8015432 <ip4_input+0xba>
      netif = inp;
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	613b      	str	r3, [r7, #16]
 8015430:	e02a      	b.n	8015488 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015432:	2300      	movs	r3, #0
 8015434:	613b      	str	r3, [r7, #16]
 8015436:	e027      	b.n	8015488 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015438:	6838      	ldr	r0, [r7, #0]
 801543a:	f7ff ff73 	bl	8015324 <ip4_input_accept>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d002      	beq.n	801544a <ip4_input+0xd2>
      netif = inp;
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	613b      	str	r3, [r7, #16]
 8015448:	e01e      	b.n	8015488 <ip4_input+0x110>
    } else {
      netif = NULL;
 801544a:	2300      	movs	r3, #0
 801544c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801544e:	4b5a      	ldr	r3, [pc, #360]	; (80155b8 <ip4_input+0x240>)
 8015450:	695b      	ldr	r3, [r3, #20]
 8015452:	b2db      	uxtb	r3, r3
 8015454:	2b7f      	cmp	r3, #127	; 0x7f
 8015456:	d017      	beq.n	8015488 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015458:	4b58      	ldr	r3, [pc, #352]	; (80155bc <ip4_input+0x244>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	613b      	str	r3, [r7, #16]
 801545e:	e00e      	b.n	801547e <ip4_input+0x106>
          if (netif == inp) {
 8015460:	693a      	ldr	r2, [r7, #16]
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	429a      	cmp	r2, r3
 8015466:	d006      	beq.n	8015476 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015468:	6938      	ldr	r0, [r7, #16]
 801546a:	f7ff ff5b 	bl	8015324 <ip4_input_accept>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d108      	bne.n	8015486 <ip4_input+0x10e>
 8015474:	e000      	b.n	8015478 <ip4_input+0x100>
            continue;
 8015476:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	613b      	str	r3, [r7, #16]
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d1ed      	bne.n	8015460 <ip4_input+0xe8>
 8015484:	e000      	b.n	8015488 <ip4_input+0x110>
            break;
 8015486:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015488:	4b4b      	ldr	r3, [pc, #300]	; (80155b8 <ip4_input+0x240>)
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	6839      	ldr	r1, [r7, #0]
 801548e:	4618      	mov	r0, r3
 8015490:	f000 f96e 	bl	8015770 <ip4_addr_isbroadcast_u32>
 8015494:	4603      	mov	r3, r0
 8015496:	2b00      	cmp	r3, #0
 8015498:	d105      	bne.n	80154a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801549a:	4b47      	ldr	r3, [pc, #284]	; (80155b8 <ip4_input+0x240>)
 801549c:	691b      	ldr	r3, [r3, #16]
 801549e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80154a2:	2be0      	cmp	r3, #224	; 0xe0
 80154a4:	d104      	bne.n	80154b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7f7 ffce 	bl	800d448 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80154ac:	2300      	movs	r3, #0
 80154ae:	e07e      	b.n	80155ae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d104      	bne.n	80154c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f7f7 ffc6 	bl	800d448 <pbuf_free>
    return ERR_OK;
 80154bc:	2300      	movs	r3, #0
 80154be:	e076      	b.n	80155ae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	88db      	ldrh	r3, [r3, #6]
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	461a      	mov	r2, r3
 80154c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80154cc:	4013      	ands	r3, r2
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d00b      	beq.n	80154ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 fc92 	bl	8015dfc <ip4_reass>
 80154d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d101      	bne.n	80154e4 <ip4_input+0x16c>
      return ERR_OK;
 80154e0:	2300      	movs	r3, #0
 80154e2:	e064      	b.n	80155ae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	685b      	ldr	r3, [r3, #4]
 80154e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80154ea:	4a33      	ldr	r2, [pc, #204]	; (80155b8 <ip4_input+0x240>)
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80154f0:	4a31      	ldr	r2, [pc, #196]	; (80155b8 <ip4_input+0x240>)
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80154f6:	4a30      	ldr	r2, [pc, #192]	; (80155b8 <ip4_input+0x240>)
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	f003 030f 	and.w	r3, r3, #15
 8015504:	b2db      	uxtb	r3, r3
 8015506:	009b      	lsls	r3, r3, #2
 8015508:	b2db      	uxtb	r3, r3
 801550a:	b29a      	uxth	r2, r3
 801550c:	4b2a      	ldr	r3, [pc, #168]	; (80155b8 <ip4_input+0x240>)
 801550e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015510:	89fb      	ldrh	r3, [r7, #14]
 8015512:	4619      	mov	r1, r3
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f7f7 ff11 	bl	800d33c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	7a5b      	ldrb	r3, [r3, #9]
 801551e:	2b11      	cmp	r3, #17
 8015520:	d006      	beq.n	8015530 <ip4_input+0x1b8>
 8015522:	2b11      	cmp	r3, #17
 8015524:	dc13      	bgt.n	801554e <ip4_input+0x1d6>
 8015526:	2b01      	cmp	r3, #1
 8015528:	d00c      	beq.n	8015544 <ip4_input+0x1cc>
 801552a:	2b06      	cmp	r3, #6
 801552c:	d005      	beq.n	801553a <ip4_input+0x1c2>
 801552e:	e00e      	b.n	801554e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015530:	6839      	ldr	r1, [r7, #0]
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f7fe fc68 	bl	8013e08 <udp_input>
        break;
 8015538:	e026      	b.n	8015588 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7fa f85d 	bl	800f5fc <tcp_input>
        break;
 8015542:	e021      	b.n	8015588 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015544:	6839      	ldr	r1, [r7, #0]
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7ff fcee 	bl	8014f28 <icmp_input>
        break;
 801554c:	e01c      	b.n	8015588 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801554e:	4b1a      	ldr	r3, [pc, #104]	; (80155b8 <ip4_input+0x240>)
 8015550:	695b      	ldr	r3, [r3, #20]
 8015552:	6939      	ldr	r1, [r7, #16]
 8015554:	4618      	mov	r0, r3
 8015556:	f000 f90b 	bl	8015770 <ip4_addr_isbroadcast_u32>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d10f      	bne.n	8015580 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015560:	4b15      	ldr	r3, [pc, #84]	; (80155b8 <ip4_input+0x240>)
 8015562:	695b      	ldr	r3, [r3, #20]
 8015564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015568:	2be0      	cmp	r3, #224	; 0xe0
 801556a:	d009      	beq.n	8015580 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801556c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015570:	4619      	mov	r1, r3
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f7f7 ff55 	bl	800d422 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015578:	2102      	movs	r1, #2
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f7ff fdd8 	bl	8015130 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7f7 ff61 	bl	800d448 <pbuf_free>
        break;
 8015586:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015588:	4b0b      	ldr	r3, [pc, #44]	; (80155b8 <ip4_input+0x240>)
 801558a:	2200      	movs	r2, #0
 801558c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801558e:	4b0a      	ldr	r3, [pc, #40]	; (80155b8 <ip4_input+0x240>)
 8015590:	2200      	movs	r2, #0
 8015592:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015594:	4b08      	ldr	r3, [pc, #32]	; (80155b8 <ip4_input+0x240>)
 8015596:	2200      	movs	r2, #0
 8015598:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801559a:	4b07      	ldr	r3, [pc, #28]	; (80155b8 <ip4_input+0x240>)
 801559c:	2200      	movs	r2, #0
 801559e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80155a0:	4b05      	ldr	r3, [pc, #20]	; (80155b8 <ip4_input+0x240>)
 80155a2:	2200      	movs	r2, #0
 80155a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80155a6:	4b04      	ldr	r3, [pc, #16]	; (80155b8 <ip4_input+0x240>)
 80155a8:	2200      	movs	r2, #0
 80155aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80155ac:	2300      	movs	r3, #0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	200112d4 	.word	0x200112d4
 80155bc:	20014a94 	.word	0x20014a94

080155c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b08a      	sub	sp, #40	; 0x28
 80155c4:	af04      	add	r7, sp, #16
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d009      	beq.n	80155ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d003      	beq.n	80155e6 <ip4_output_if+0x26>
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d102      	bne.n	80155ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80155e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e8:	3304      	adds	r3, #4
 80155ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80155ec:	78fa      	ldrb	r2, [r7, #3]
 80155ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f0:	9302      	str	r3, [sp, #8]
 80155f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80155f6:	9301      	str	r3, [sp, #4]
 80155f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	4613      	mov	r3, r2
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	6979      	ldr	r1, [r7, #20]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f000 f805 	bl	8015614 <ip4_output_if_src>
 801560a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801560c:	4618      	mov	r0, r3
 801560e:	3718      	adds	r7, #24
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}

08015614 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b088      	sub	sp, #32
 8015618:	af00      	add	r7, sp, #0
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	60b9      	str	r1, [r7, #8]
 801561e:	607a      	str	r2, [r7, #4]
 8015620:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	7b9b      	ldrb	r3, [r3, #14]
 8015626:	2b01      	cmp	r3, #1
 8015628:	d006      	beq.n	8015638 <ip4_output_if_src+0x24>
 801562a:	4b4b      	ldr	r3, [pc, #300]	; (8015758 <ip4_output_if_src+0x144>)
 801562c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015630:	494a      	ldr	r1, [pc, #296]	; (801575c <ip4_output_if_src+0x148>)
 8015632:	484b      	ldr	r0, [pc, #300]	; (8015760 <ip4_output_if_src+0x14c>)
 8015634:	f001 fa98 	bl	8016b68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d060      	beq.n	8015700 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801563e:	2314      	movs	r3, #20
 8015640:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015642:	2114      	movs	r1, #20
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f7f7 fe69 	bl	800d31c <pbuf_add_header>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d002      	beq.n	8015656 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015650:	f06f 0301 	mvn.w	r3, #1
 8015654:	e07c      	b.n	8015750 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	895b      	ldrh	r3, [r3, #10]
 8015660:	2b13      	cmp	r3, #19
 8015662:	d806      	bhi.n	8015672 <ip4_output_if_src+0x5e>
 8015664:	4b3c      	ldr	r3, [pc, #240]	; (8015758 <ip4_output_if_src+0x144>)
 8015666:	f44f 7262 	mov.w	r2, #904	; 0x388
 801566a:	493e      	ldr	r1, [pc, #248]	; (8015764 <ip4_output_if_src+0x150>)
 801566c:	483c      	ldr	r0, [pc, #240]	; (8015760 <ip4_output_if_src+0x14c>)
 801566e:	f001 fa7b 	bl	8016b68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	78fa      	ldrb	r2, [r7, #3]
 8015676:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801567e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015688:	8b7b      	ldrh	r3, [r7, #26]
 801568a:	089b      	lsrs	r3, r3, #2
 801568c:	b29b      	uxth	r3, r3
 801568e:	b2db      	uxtb	r3, r3
 8015690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015694:	b2da      	uxtb	r2, r3
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801569a:	69fb      	ldr	r3, [r7, #28]
 801569c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80156a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	891b      	ldrh	r3, [r3, #8]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7f6 fa44 	bl	800bb34 <lwip_htons>
 80156ac:	4603      	mov	r3, r0
 80156ae:	461a      	mov	r2, r3
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	2200      	movs	r2, #0
 80156b8:	719a      	strb	r2, [r3, #6]
 80156ba:	2200      	movs	r2, #0
 80156bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80156be:	4b2a      	ldr	r3, [pc, #168]	; (8015768 <ip4_output_if_src+0x154>)
 80156c0:	881b      	ldrh	r3, [r3, #0]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7f6 fa36 	bl	800bb34 <lwip_htons>
 80156c8:	4603      	mov	r3, r0
 80156ca:	461a      	mov	r2, r3
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80156d0:	4b25      	ldr	r3, [pc, #148]	; (8015768 <ip4_output_if_src+0x154>)
 80156d2:	881b      	ldrh	r3, [r3, #0]
 80156d4:	3301      	adds	r3, #1
 80156d6:	b29a      	uxth	r2, r3
 80156d8:	4b23      	ldr	r3, [pc, #140]	; (8015768 <ip4_output_if_src+0x154>)
 80156da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d104      	bne.n	80156ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80156e2:	4b22      	ldr	r3, [pc, #136]	; (801576c <ip4_output_if_src+0x158>)
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	60da      	str	r2, [r3, #12]
 80156ea:	e003      	b.n	80156f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	2200      	movs	r2, #0
 80156f8:	729a      	strb	r2, [r3, #10]
 80156fa:	2200      	movs	r2, #0
 80156fc:	72da      	strb	r2, [r3, #11]
 80156fe:	e00f      	b.n	8015720 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	895b      	ldrh	r3, [r3, #10]
 8015704:	2b13      	cmp	r3, #19
 8015706:	d802      	bhi.n	801570e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015708:	f06f 0301 	mvn.w	r3, #1
 801570c:	e020      	b.n	8015750 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	691b      	ldr	r3, [r3, #16]
 8015718:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801571a:	f107 0314 	add.w	r3, r7, #20
 801571e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015722:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015724:	2b00      	cmp	r3, #0
 8015726:	d00c      	beq.n	8015742 <ip4_output_if_src+0x12e>
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	891a      	ldrh	r2, [r3, #8]
 801572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015730:	429a      	cmp	r2, r3
 8015732:	d906      	bls.n	8015742 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015738:	68f8      	ldr	r0, [r7, #12]
 801573a:	f000 fd4d 	bl	80161d8 <ip4_frag>
 801573e:	4603      	mov	r3, r0
 8015740:	e006      	b.n	8015750 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015744:	695b      	ldr	r3, [r3, #20]
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	68f9      	ldr	r1, [r7, #12]
 801574a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801574c:	4798      	blx	r3
 801574e:	4603      	mov	r3, r0
}
 8015750:	4618      	mov	r0, r3
 8015752:	3720      	adds	r7, #32
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	0801b77c 	.word	0x0801b77c
 801575c:	0801b7b0 	.word	0x0801b7b0
 8015760:	0801b7bc 	.word	0x0801b7bc
 8015764:	0801b7e4 	.word	0x0801b7e4
 8015768:	200084de 	.word	0x200084de
 801576c:	08022b78 	.word	0x08022b78

08015770 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015770:	b480      	push	{r7}
 8015772:	b085      	sub	sp, #20
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015784:	d002      	beq.n	801578c <ip4_addr_isbroadcast_u32+0x1c>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d101      	bne.n	8015790 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801578c:	2301      	movs	r3, #1
 801578e:	e02a      	b.n	80157e6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015796:	f003 0302 	and.w	r3, r3, #2
 801579a:	2b00      	cmp	r3, #0
 801579c:	d101      	bne.n	80157a2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801579e:	2300      	movs	r3, #0
 80157a0:	e021      	b.n	80157e6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	3304      	adds	r3, #4
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d101      	bne.n	80157b2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	e019      	b.n	80157e6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80157b2:	68fa      	ldr	r2, [r7, #12]
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	3304      	adds	r3, #4
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	405a      	eors	r2, r3
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	3308      	adds	r3, #8
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4013      	ands	r3, r2
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d10d      	bne.n	80157e4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	3308      	adds	r3, #8
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	43da      	mvns	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	3308      	adds	r3, #8
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80157dc:	429a      	cmp	r2, r3
 80157de:	d101      	bne.n	80157e4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80157e0:	2301      	movs	r3, #1
 80157e2:	e000      	b.n	80157e6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80157e4:	2300      	movs	r3, #0
  }
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3714      	adds	r7, #20
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr
	...

080157f4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80157fa:	2300      	movs	r3, #0
 80157fc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80157fe:	4b12      	ldr	r3, [pc, #72]	; (8015848 <ip_reass_tmr+0x54>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015804:	e018      	b.n	8015838 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	7fdb      	ldrb	r3, [r3, #31]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d00b      	beq.n	8015826 <ip_reass_tmr+0x32>
      r->timer--;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	7fdb      	ldrb	r3, [r3, #31]
 8015812:	3b01      	subs	r3, #1
 8015814:	b2da      	uxtb	r2, r3
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	60fb      	str	r3, [r7, #12]
 8015824:	e008      	b.n	8015838 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015830:	68b9      	ldr	r1, [r7, #8]
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f000 f80a 	bl	801584c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d1e3      	bne.n	8015806 <ip_reass_tmr+0x12>
    }
  }
}
 801583e:	bf00      	nop
 8015840:	bf00      	nop
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	200084e0 	.word	0x200084e0

0801584c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b088      	sub	sp, #32
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015856:	2300      	movs	r3, #0
 8015858:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801585a:	683a      	ldr	r2, [r7, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	429a      	cmp	r2, r3
 8015860:	d105      	bne.n	801586e <ip_reass_free_complete_datagram+0x22>
 8015862:	4b45      	ldr	r3, [pc, #276]	; (8015978 <ip_reass_free_complete_datagram+0x12c>)
 8015864:	22ab      	movs	r2, #171	; 0xab
 8015866:	4945      	ldr	r1, [pc, #276]	; (801597c <ip_reass_free_complete_datagram+0x130>)
 8015868:	4845      	ldr	r0, [pc, #276]	; (8015980 <ip_reass_free_complete_datagram+0x134>)
 801586a:	f001 f97d 	bl	8016b68 <iprintf>
  if (prev != NULL) {
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d00a      	beq.n	801588a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	429a      	cmp	r2, r3
 801587c:	d005      	beq.n	801588a <ip_reass_free_complete_datagram+0x3e>
 801587e:	4b3e      	ldr	r3, [pc, #248]	; (8015978 <ip_reass_free_complete_datagram+0x12c>)
 8015880:	22ad      	movs	r2, #173	; 0xad
 8015882:	4940      	ldr	r1, [pc, #256]	; (8015984 <ip_reass_free_complete_datagram+0x138>)
 8015884:	483e      	ldr	r0, [pc, #248]	; (8015980 <ip_reass_free_complete_datagram+0x134>)
 8015886:	f001 f96f 	bl	8016b68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	889b      	ldrh	r3, [r3, #4]
 8015896:	b29b      	uxth	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	d12a      	bne.n	80158f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	6858      	ldr	r0, [r3, #4]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	3308      	adds	r3, #8
 80158b2:	2214      	movs	r2, #20
 80158b4:	4619      	mov	r1, r3
 80158b6:	f001 f8cc 	bl	8016a52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80158ba:	2101      	movs	r1, #1
 80158bc:	69b8      	ldr	r0, [r7, #24]
 80158be:	f7ff fc47 	bl	8015150 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80158c2:	69b8      	ldr	r0, [r7, #24]
 80158c4:	f7f7 fe4e 	bl	800d564 <pbuf_clen>
 80158c8:	4603      	mov	r3, r0
 80158ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80158cc:	8bfa      	ldrh	r2, [r7, #30]
 80158ce:	8a7b      	ldrh	r3, [r7, #18]
 80158d0:	4413      	add	r3, r2
 80158d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158d6:	db05      	blt.n	80158e4 <ip_reass_free_complete_datagram+0x98>
 80158d8:	4b27      	ldr	r3, [pc, #156]	; (8015978 <ip_reass_free_complete_datagram+0x12c>)
 80158da:	22bc      	movs	r2, #188	; 0xbc
 80158dc:	492a      	ldr	r1, [pc, #168]	; (8015988 <ip_reass_free_complete_datagram+0x13c>)
 80158de:	4828      	ldr	r0, [pc, #160]	; (8015980 <ip_reass_free_complete_datagram+0x134>)
 80158e0:	f001 f942 	bl	8016b68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80158e4:	8bfa      	ldrh	r2, [r7, #30]
 80158e6:	8a7b      	ldrh	r3, [r7, #18]
 80158e8:	4413      	add	r3, r2
 80158ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80158ec:	69b8      	ldr	r0, [r7, #24]
 80158ee:	f7f7 fdab 	bl	800d448 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80158f8:	e01f      	b.n	801593a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015900:	69bb      	ldr	r3, [r7, #24]
 8015902:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801590a:	68f8      	ldr	r0, [r7, #12]
 801590c:	f7f7 fe2a 	bl	800d564 <pbuf_clen>
 8015910:	4603      	mov	r3, r0
 8015912:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015914:	8bfa      	ldrh	r2, [r7, #30]
 8015916:	8a7b      	ldrh	r3, [r7, #18]
 8015918:	4413      	add	r3, r2
 801591a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801591e:	db05      	blt.n	801592c <ip_reass_free_complete_datagram+0xe0>
 8015920:	4b15      	ldr	r3, [pc, #84]	; (8015978 <ip_reass_free_complete_datagram+0x12c>)
 8015922:	22cc      	movs	r2, #204	; 0xcc
 8015924:	4918      	ldr	r1, [pc, #96]	; (8015988 <ip_reass_free_complete_datagram+0x13c>)
 8015926:	4816      	ldr	r0, [pc, #88]	; (8015980 <ip_reass_free_complete_datagram+0x134>)
 8015928:	f001 f91e 	bl	8016b68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801592c:	8bfa      	ldrh	r2, [r7, #30]
 801592e:	8a7b      	ldrh	r3, [r7, #18]
 8015930:	4413      	add	r3, r2
 8015932:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015934:	68f8      	ldr	r0, [r7, #12]
 8015936:	f7f7 fd87 	bl	800d448 <pbuf_free>
  while (p != NULL) {
 801593a:	69bb      	ldr	r3, [r7, #24]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d1dc      	bne.n	80158fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f000 f8c2 	bl	8015acc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015948:	4b10      	ldr	r3, [pc, #64]	; (801598c <ip_reass_free_complete_datagram+0x140>)
 801594a:	881b      	ldrh	r3, [r3, #0]
 801594c:	8bfa      	ldrh	r2, [r7, #30]
 801594e:	429a      	cmp	r2, r3
 8015950:	d905      	bls.n	801595e <ip_reass_free_complete_datagram+0x112>
 8015952:	4b09      	ldr	r3, [pc, #36]	; (8015978 <ip_reass_free_complete_datagram+0x12c>)
 8015954:	22d2      	movs	r2, #210	; 0xd2
 8015956:	490e      	ldr	r1, [pc, #56]	; (8015990 <ip_reass_free_complete_datagram+0x144>)
 8015958:	4809      	ldr	r0, [pc, #36]	; (8015980 <ip_reass_free_complete_datagram+0x134>)
 801595a:	f001 f905 	bl	8016b68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801595e:	4b0b      	ldr	r3, [pc, #44]	; (801598c <ip_reass_free_complete_datagram+0x140>)
 8015960:	881a      	ldrh	r2, [r3, #0]
 8015962:	8bfb      	ldrh	r3, [r7, #30]
 8015964:	1ad3      	subs	r3, r2, r3
 8015966:	b29a      	uxth	r2, r3
 8015968:	4b08      	ldr	r3, [pc, #32]	; (801598c <ip_reass_free_complete_datagram+0x140>)
 801596a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801596c:	8bfb      	ldrh	r3, [r7, #30]
}
 801596e:	4618      	mov	r0, r3
 8015970:	3720      	adds	r7, #32
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	0801b814 	.word	0x0801b814
 801597c:	0801b850 	.word	0x0801b850
 8015980:	0801b85c 	.word	0x0801b85c
 8015984:	0801b884 	.word	0x0801b884
 8015988:	0801b898 	.word	0x0801b898
 801598c:	200084e4 	.word	0x200084e4
 8015990:	0801b8b8 	.word	0x0801b8b8

08015994 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b08a      	sub	sp, #40	; 0x28
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801599e:	2300      	movs	r3, #0
 80159a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80159a2:	2300      	movs	r3, #0
 80159a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80159a6:	2300      	movs	r3, #0
 80159a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80159aa:	2300      	movs	r3, #0
 80159ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80159b2:	4b28      	ldr	r3, [pc, #160]	; (8015a54 <ip_reass_remove_oldest_datagram+0xc0>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159b8:	e030      	b.n	8015a1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80159ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159bc:	695a      	ldr	r2, [r3, #20]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d10c      	bne.n	80159e0 <ip_reass_remove_oldest_datagram+0x4c>
 80159c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c8:	699a      	ldr	r2, [r3, #24]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d106      	bne.n	80159e0 <ip_reass_remove_oldest_datagram+0x4c>
 80159d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d4:	899a      	ldrh	r2, [r3, #12]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	889b      	ldrh	r3, [r3, #4]
 80159da:	b29b      	uxth	r3, r3
 80159dc:	429a      	cmp	r2, r3
 80159de:	d014      	beq.n	8015a0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	3301      	adds	r3, #1
 80159e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80159e6:	6a3b      	ldr	r3, [r7, #32]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d104      	bne.n	80159f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80159ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	61bb      	str	r3, [r7, #24]
 80159f4:	e009      	b.n	8015a0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80159f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f8:	7fda      	ldrb	r2, [r3, #31]
 80159fa:	6a3b      	ldr	r3, [r7, #32]
 80159fc:	7fdb      	ldrb	r3, [r3, #31]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d803      	bhi.n	8015a0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d1cb      	bne.n	80159ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d008      	beq.n	8015a3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015a28:	69b9      	ldr	r1, [r7, #24]
 8015a2a:	6a38      	ldr	r0, [r7, #32]
 8015a2c:	f7ff ff0e 	bl	801584c <ip_reass_free_complete_datagram>
 8015a30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015a32:	697a      	ldr	r2, [r7, #20]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	4413      	add	r3, r2
 8015a38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015a3a:	697a      	ldr	r2, [r7, #20]
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	da02      	bge.n	8015a48 <ip_reass_remove_oldest_datagram+0xb4>
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	dcac      	bgt.n	80159a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015a48:	697b      	ldr	r3, [r7, #20]
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3728      	adds	r7, #40	; 0x28
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	200084e0 	.word	0x200084e0

08015a58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a62:	2004      	movs	r0, #4
 8015a64:	f7f6 fdfa 	bl	800c65c <memp_malloc>
 8015a68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d110      	bne.n	8015a92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015a70:	6839      	ldr	r1, [r7, #0]
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f7ff ff8e 	bl	8015994 <ip_reass_remove_oldest_datagram>
 8015a78:	4602      	mov	r2, r0
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	dc03      	bgt.n	8015a88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a80:	2004      	movs	r0, #4
 8015a82:	f7f6 fdeb 	bl	800c65c <memp_malloc>
 8015a86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d101      	bne.n	8015a92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e016      	b.n	8015ac0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015a92:	2220      	movs	r2, #32
 8015a94:	2100      	movs	r1, #0
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	f001 f803 	bl	8016aa2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	220f      	movs	r2, #15
 8015aa0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015aa2:	4b09      	ldr	r3, [pc, #36]	; (8015ac8 <ip_reass_enqueue_new_datagram+0x70>)
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015aaa:	4a07      	ldr	r2, [pc, #28]	; (8015ac8 <ip_reass_enqueue_new_datagram+0x70>)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3308      	adds	r3, #8
 8015ab4:	2214      	movs	r2, #20
 8015ab6:	6879      	ldr	r1, [r7, #4]
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f000 ffca 	bl	8016a52 <memcpy>
  return ipr;
 8015abe:	68fb      	ldr	r3, [r7, #12]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3710      	adds	r7, #16
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	200084e0 	.word	0x200084e0

08015acc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ad6:	4b10      	ldr	r3, [pc, #64]	; (8015b18 <ip_reass_dequeue_datagram+0x4c>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d104      	bne.n	8015aea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	4a0c      	ldr	r2, [pc, #48]	; (8015b18 <ip_reass_dequeue_datagram+0x4c>)
 8015ae6:	6013      	str	r3, [r2, #0]
 8015ae8:	e00d      	b.n	8015b06 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d106      	bne.n	8015afe <ip_reass_dequeue_datagram+0x32>
 8015af0:	4b0a      	ldr	r3, [pc, #40]	; (8015b1c <ip_reass_dequeue_datagram+0x50>)
 8015af2:	f240 1245 	movw	r2, #325	; 0x145
 8015af6:	490a      	ldr	r1, [pc, #40]	; (8015b20 <ip_reass_dequeue_datagram+0x54>)
 8015af8:	480a      	ldr	r0, [pc, #40]	; (8015b24 <ip_reass_dequeue_datagram+0x58>)
 8015afa:	f001 f835 	bl	8016b68 <iprintf>
    prev->next = ipr->next;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b06:	6879      	ldr	r1, [r7, #4]
 8015b08:	2004      	movs	r0, #4
 8015b0a:	f7f6 fdf9 	bl	800c700 <memp_free>
}
 8015b0e:	bf00      	nop
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	200084e0 	.word	0x200084e0
 8015b1c:	0801b814 	.word	0x0801b814
 8015b20:	0801b8dc 	.word	0x0801b8dc
 8015b24:	0801b85c 	.word	0x0801b85c

08015b28 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b08c      	sub	sp, #48	; 0x30
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015b34:	2300      	movs	r3, #0
 8015b36:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015b38:	2301      	movs	r3, #1
 8015b3a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	885b      	ldrh	r3, [r3, #2]
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7f5 fff3 	bl	800bb34 <lwip_htons>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	f003 030f 	and.w	r3, r3, #15
 8015b5a:	b2db      	uxtb	r3, r3
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b60:	7e7b      	ldrb	r3, [r7, #25]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	8b7a      	ldrh	r2, [r7, #26]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d202      	bcs.n	8015b70 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b6e:	e135      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015b70:	7e7b      	ldrb	r3, [r7, #25]
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	8b7a      	ldrh	r2, [r7, #26]
 8015b76:	1ad3      	subs	r3, r2, r3
 8015b78:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	88db      	ldrh	r3, [r3, #6]
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7f5 ffd7 	bl	800bb34 <lwip_htons>
 8015b86:	4603      	mov	r3, r0
 8015b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	00db      	lsls	r3, r3, #3
 8015b90:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	701a      	strb	r2, [r3, #0]
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	705a      	strb	r2, [r3, #1]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	709a      	strb	r2, [r3, #2]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bac:	8afa      	ldrh	r2, [r7, #22]
 8015bae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015bb0:	8afa      	ldrh	r2, [r7, #22]
 8015bb2:	8b7b      	ldrh	r3, [r7, #26]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bbe:	88db      	ldrh	r3, [r3, #6]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	8afa      	ldrh	r2, [r7, #22]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d902      	bls.n	8015bce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bcc:	e106      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8015bd4:	e068      	b.n	8015ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bde:	889b      	ldrh	r3, [r3, #4]
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	889b      	ldrh	r3, [r3, #4]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d235      	bcs.n	8015c58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bf0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d020      	beq.n	8015c3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfa:	889b      	ldrh	r3, [r3, #4]
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c00:	88db      	ldrh	r3, [r3, #6]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d307      	bcc.n	8015c18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0a:	88db      	ldrh	r3, [r3, #6]
 8015c0c:	b29a      	uxth	r2, r3
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	889b      	ldrh	r3, [r3, #4]
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d902      	bls.n	8015c1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c1c:	e0de      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c20:	68ba      	ldr	r2, [r7, #8]
 8015c22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c26:	88db      	ldrh	r3, [r3, #6]
 8015c28:	b29a      	uxth	r2, r3
 8015c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2c:	889b      	ldrh	r3, [r3, #4]
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d03d      	beq.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c34:	2300      	movs	r3, #0
 8015c36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015c38:	e03a      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3c:	88db      	ldrh	r3, [r3, #6]
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	889b      	ldrh	r3, [r3, #4]
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d902      	bls.n	8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c4e:	e0c5      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	68ba      	ldr	r2, [r7, #8]
 8015c54:	605a      	str	r2, [r3, #4]
      break;
 8015c56:	e02b      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5a:	889b      	ldrh	r3, [r3, #4]
 8015c5c:	b29a      	uxth	r2, r3
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	889b      	ldrh	r3, [r3, #4]
 8015c62:	b29b      	uxth	r3, r3
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d102      	bne.n	8015c6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c6c:	e0b6      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c70:	889b      	ldrh	r3, [r3, #4]
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	88db      	ldrh	r3, [r3, #6]
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d202      	bcs.n	8015c84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c82:	e0ab      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d009      	beq.n	8015c9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8c:	88db      	ldrh	r3, [r3, #6]
 8015c8e:	b29a      	uxth	r2, r3
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	889b      	ldrh	r3, [r3, #4]
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d001      	beq.n	8015c9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d193      	bne.n	8015bd6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015cae:	e000      	b.n	8015cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015cb0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d12d      	bne.n	8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d01c      	beq.n	8015cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	88db      	ldrh	r3, [r3, #6]
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc6:	889b      	ldrh	r3, [r3, #4]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d906      	bls.n	8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015cce:	4b45      	ldr	r3, [pc, #276]	; (8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015cd4:	4944      	ldr	r1, [pc, #272]	; (8015de8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015cd6:	4845      	ldr	r0, [pc, #276]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cd8:	f000 ff46 	bl	8016b68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cde:	68ba      	ldr	r2, [r7, #8]
 8015ce0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	88db      	ldrh	r3, [r3, #6]
 8015ce6:	b29a      	uxth	r2, r3
 8015ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cea:	889b      	ldrh	r3, [r3, #4]
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d010      	beq.n	8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	623b      	str	r3, [r7, #32]
 8015cf6:	e00d      	b.n	8015d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d006      	beq.n	8015d0e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d00:	4b38      	ldr	r3, [pc, #224]	; (8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d02:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015d06:	493a      	ldr	r1, [pc, #232]	; (8015df0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d08:	4838      	ldr	r0, [pc, #224]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d0a:	f000 ff2d 	bl	8016b68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	68ba      	ldr	r2, [r7, #8]
 8015d12:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d105      	bne.n	8015d26 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	7f9b      	ldrb	r3, [r3, #30]
 8015d1e:	f003 0301 	and.w	r3, r3, #1
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d059      	beq.n	8015dda <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d04f      	beq.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d006      	beq.n	8015d42 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	889b      	ldrh	r3, [r3, #4]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d002      	beq.n	8015d48 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015d42:	2300      	movs	r3, #0
 8015d44:	623b      	str	r3, [r7, #32]
 8015d46:	e041      	b.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d52:	e012      	b.n	8015d7a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5c:	88db      	ldrh	r3, [r3, #6]
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d62:	889b      	ldrh	r3, [r3, #4]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d002      	beq.n	8015d70 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	623b      	str	r3, [r7, #32]
            break;
 8015d6e:	e007      	b.n	8015d80 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1e9      	bne.n	8015d54 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015d80:	6a3b      	ldr	r3, [r7, #32]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d022      	beq.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d106      	bne.n	8015d9c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015d8e:	4b15      	ldr	r3, [pc, #84]	; (8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d90:	f240 12df 	movw	r2, #479	; 0x1df
 8015d94:	4917      	ldr	r1, [pc, #92]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d96:	4815      	ldr	r0, [pc, #84]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d98:	f000 fee6 	bl	8016b68 <iprintf>
          LWIP_ASSERT("sanity check",
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d106      	bne.n	8015db6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015da8:	4b0e      	ldr	r3, [pc, #56]	; (8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015daa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015dae:	4911      	ldr	r1, [pc, #68]	; (8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015db0:	480e      	ldr	r0, [pc, #56]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015db2:	f000 fed9 	bl	8016b68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d006      	beq.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015dbe:	4b09      	ldr	r3, [pc, #36]	; (8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dc0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015dc4:	490c      	ldr	r1, [pc, #48]	; (8015df8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015dc6:	4809      	ldr	r0, [pc, #36]	; (8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dc8:	f000 fece 	bl	8016b68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015dcc:	6a3b      	ldr	r3, [r7, #32]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	bf14      	ite	ne
 8015dd2:	2301      	movne	r3, #1
 8015dd4:	2300      	moveq	r3, #0
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	e000      	b.n	8015ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3730      	adds	r7, #48	; 0x30
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	0801b814 	.word	0x0801b814
 8015de8:	0801b8f8 	.word	0x0801b8f8
 8015dec:	0801b85c 	.word	0x0801b85c
 8015df0:	0801b918 	.word	0x0801b918
 8015df4:	0801b950 	.word	0x0801b950
 8015df8:	0801b960 	.word	0x0801b960

08015dfc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b08e      	sub	sp, #56	; 0x38
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	f003 030f 	and.w	r3, r3, #15
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	009b      	lsls	r3, r3, #2
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2b14      	cmp	r3, #20
 8015e1a:	f040 8167 	bne.w	80160ec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7f5 fe85 	bl	800bb34 <lwip_htons>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	00db      	lsls	r3, r3, #3
 8015e34:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e38:	885b      	ldrh	r3, [r3, #2]
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7f5 fe79 	bl	800bb34 <lwip_htons>
 8015e42:	4603      	mov	r3, r0
 8015e44:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f003 030f 	and.w	r3, r3, #15
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	f0c0 8146 	bcc.w	80160f0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e6c:	1ad3      	subs	r3, r2, r3
 8015e6e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f7f7 fb77 	bl	800d564 <pbuf_clen>
 8015e76:	4603      	mov	r3, r0
 8015e78:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015e7a:	4b9f      	ldr	r3, [pc, #636]	; (80160f8 <ip4_reass+0x2fc>)
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	461a      	mov	r2, r3
 8015e80:	8c3b      	ldrh	r3, [r7, #32]
 8015e82:	4413      	add	r3, r2
 8015e84:	2b0a      	cmp	r3, #10
 8015e86:	dd10      	ble.n	8015eaa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e88:	8c3b      	ldrh	r3, [r7, #32]
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e8e:	f7ff fd81 	bl	8015994 <ip_reass_remove_oldest_datagram>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f000 812d 	beq.w	80160f4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015e9a:	4b97      	ldr	r3, [pc, #604]	; (80160f8 <ip4_reass+0x2fc>)
 8015e9c:	881b      	ldrh	r3, [r3, #0]
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	8c3b      	ldrh	r3, [r7, #32]
 8015ea2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ea4:	2b0a      	cmp	r3, #10
 8015ea6:	f300 8125 	bgt.w	80160f4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015eaa:	4b94      	ldr	r3, [pc, #592]	; (80160fc <ip4_reass+0x300>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	633b      	str	r3, [r7, #48]	; 0x30
 8015eb0:	e015      	b.n	8015ede <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb4:	695a      	ldr	r2, [r3, #20]
 8015eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb8:	68db      	ldr	r3, [r3, #12]
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d10c      	bne.n	8015ed8 <ip4_reass+0xdc>
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	699a      	ldr	r2, [r3, #24]
 8015ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec4:	691b      	ldr	r3, [r3, #16]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d106      	bne.n	8015ed8 <ip4_reass+0xdc>
 8015eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ecc:	899a      	ldrh	r2, [r3, #12]
 8015ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed0:	889b      	ldrh	r3, [r3, #4]
 8015ed2:	b29b      	uxth	r3, r3
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d006      	beq.n	8015ee6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	633b      	str	r3, [r7, #48]	; 0x30
 8015ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d1e6      	bne.n	8015eb2 <ip4_reass+0xb6>
 8015ee4:	e000      	b.n	8015ee8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015ee6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d109      	bne.n	8015f02 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015eee:	8c3b      	ldrh	r3, [r7, #32]
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ef4:	f7ff fdb0 	bl	8015a58 <ip_reass_enqueue_new_datagram>
 8015ef8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d11c      	bne.n	8015f3a <ip4_reass+0x13e>
      goto nullreturn;
 8015f00:	e109      	b.n	8016116 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f04:	88db      	ldrh	r3, [r3, #6]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7f5 fe13 	bl	800bb34 <lwip_htons>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d110      	bne.n	8015f3a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f1a:	89db      	ldrh	r3, [r3, #14]
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7f5 fe09 	bl	800bb34 <lwip_htons>
 8015f22:	4603      	mov	r3, r0
 8015f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d006      	beq.n	8015f3a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f2e:	3308      	adds	r3, #8
 8015f30:	2214      	movs	r2, #20
 8015f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f34:	4618      	mov	r0, r3
 8015f36:	f000 fd8c 	bl	8016a52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3c:	88db      	ldrh	r3, [r3, #6]
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	f003 0320 	and.w	r3, r3, #32
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	bf0c      	ite	eq
 8015f48:	2301      	moveq	r3, #1
 8015f4a:	2300      	movne	r3, #0
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015f50:	69fb      	ldr	r3, [r7, #28]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00e      	beq.n	8015f74 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f5a:	4413      	add	r3, r2
 8015f5c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015f5e:	8b7a      	ldrh	r2, [r7, #26]
 8015f60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f62:	429a      	cmp	r2, r3
 8015f64:	f0c0 80a0 	bcc.w	80160a8 <ip4_reass+0x2ac>
 8015f68:	8b7b      	ldrh	r3, [r7, #26]
 8015f6a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015f6e:	4293      	cmp	r3, r2
 8015f70:	f200 809a 	bhi.w	80160a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015f74:	69fa      	ldr	r2, [r7, #28]
 8015f76:	6879      	ldr	r1, [r7, #4]
 8015f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f7a:	f7ff fdd5 	bl	8015b28 <ip_reass_chain_frag_into_datagram_and_validate>
 8015f7e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f86:	f000 8091 	beq.w	80160ac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015f8a:	4b5b      	ldr	r3, [pc, #364]	; (80160f8 <ip4_reass+0x2fc>)
 8015f8c:	881a      	ldrh	r2, [r3, #0]
 8015f8e:	8c3b      	ldrh	r3, [r7, #32]
 8015f90:	4413      	add	r3, r2
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	4b58      	ldr	r3, [pc, #352]	; (80160f8 <ip4_reass+0x2fc>)
 8015f96:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015f98:	69fb      	ldr	r3, [r7, #28]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00d      	beq.n	8015fba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fa2:	4413      	add	r3, r2
 8015fa4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa8:	8a7a      	ldrh	r2, [r7, #18]
 8015faa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fae:	7f9b      	ldrb	r3, [r3, #30]
 8015fb0:	f043 0301 	orr.w	r3, r3, #1
 8015fb4:	b2da      	uxtb	r2, r3
 8015fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d171      	bne.n	80160a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc2:	8b9b      	ldrh	r3, [r3, #28]
 8015fc4:	3314      	adds	r3, #20
 8015fc6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd4:	685b      	ldr	r3, [r3, #4]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fdc:	3308      	adds	r3, #8
 8015fde:	2214      	movs	r2, #20
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fe4:	f000 fd35 	bl	8016a52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015fe8:	8a3b      	ldrh	r3, [r7, #16]
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f5 fda2 	bl	800bb34 <lwip_htons>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	719a      	strb	r2, [r3, #6]
 8015ffe:	2200      	movs	r2, #0
 8016000:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016004:	2200      	movs	r2, #0
 8016006:	729a      	strb	r2, [r3, #10]
 8016008:	2200      	movs	r2, #0
 801600a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016012:	e00d      	b.n	8016030 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801601a:	2114      	movs	r1, #20
 801601c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801601e:	f7f7 f98d 	bl	800d33c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016022:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f7f7 fadd 	bl	800d5e4 <pbuf_cat>
      r = iprh->next_pbuf;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016032:	2b00      	cmp	r3, #0
 8016034:	d1ee      	bne.n	8016014 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016036:	4b31      	ldr	r3, [pc, #196]	; (80160fc <ip4_reass+0x300>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801603c:	429a      	cmp	r2, r3
 801603e:	d102      	bne.n	8016046 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016040:	2300      	movs	r3, #0
 8016042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016044:	e010      	b.n	8016068 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016046:	4b2d      	ldr	r3, [pc, #180]	; (80160fc <ip4_reass+0x300>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801604c:	e007      	b.n	801605e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016054:	429a      	cmp	r2, r3
 8016056:	d006      	beq.n	8016066 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016060:	2b00      	cmp	r3, #0
 8016062:	d1f4      	bne.n	801604e <ip4_reass+0x252>
 8016064:	e000      	b.n	8016068 <ip4_reass+0x26c>
          break;
 8016066:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801606a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801606c:	f7ff fd2e 	bl	8015acc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f7f7 fa77 	bl	800d564 <pbuf_clen>
 8016076:	4603      	mov	r3, r0
 8016078:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801607a:	4b1f      	ldr	r3, [pc, #124]	; (80160f8 <ip4_reass+0x2fc>)
 801607c:	881b      	ldrh	r3, [r3, #0]
 801607e:	8c3a      	ldrh	r2, [r7, #32]
 8016080:	429a      	cmp	r2, r3
 8016082:	d906      	bls.n	8016092 <ip4_reass+0x296>
 8016084:	4b1e      	ldr	r3, [pc, #120]	; (8016100 <ip4_reass+0x304>)
 8016086:	f240 229b 	movw	r2, #667	; 0x29b
 801608a:	491e      	ldr	r1, [pc, #120]	; (8016104 <ip4_reass+0x308>)
 801608c:	481e      	ldr	r0, [pc, #120]	; (8016108 <ip4_reass+0x30c>)
 801608e:	f000 fd6b 	bl	8016b68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016092:	4b19      	ldr	r3, [pc, #100]	; (80160f8 <ip4_reass+0x2fc>)
 8016094:	881a      	ldrh	r2, [r3, #0]
 8016096:	8c3b      	ldrh	r3, [r7, #32]
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	b29a      	uxth	r2, r3
 801609c:	4b16      	ldr	r3, [pc, #88]	; (80160f8 <ip4_reass+0x2fc>)
 801609e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	e03c      	b.n	801611e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80160a4:	2300      	movs	r3, #0
 80160a6:	e03a      	b.n	801611e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80160a8:	bf00      	nop
 80160aa:	e000      	b.n	80160ae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80160ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80160ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d106      	bne.n	80160c2 <ip4_reass+0x2c6>
 80160b4:	4b12      	ldr	r3, [pc, #72]	; (8016100 <ip4_reass+0x304>)
 80160b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80160ba:	4914      	ldr	r1, [pc, #80]	; (801610c <ip4_reass+0x310>)
 80160bc:	4812      	ldr	r0, [pc, #72]	; (8016108 <ip4_reass+0x30c>)
 80160be:	f000 fd53 	bl	8016b68 <iprintf>
  if (ipr->p == NULL) {
 80160c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d124      	bne.n	8016114 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80160ca:	4b0c      	ldr	r3, [pc, #48]	; (80160fc <ip4_reass+0x300>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d006      	beq.n	80160e2 <ip4_reass+0x2e6>
 80160d4:	4b0a      	ldr	r3, [pc, #40]	; (8016100 <ip4_reass+0x304>)
 80160d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80160da:	490d      	ldr	r1, [pc, #52]	; (8016110 <ip4_reass+0x314>)
 80160dc:	480a      	ldr	r0, [pc, #40]	; (8016108 <ip4_reass+0x30c>)
 80160de:	f000 fd43 	bl	8016b68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80160e2:	2100      	movs	r1, #0
 80160e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160e6:	f7ff fcf1 	bl	8015acc <ip_reass_dequeue_datagram>
 80160ea:	e014      	b.n	8016116 <ip4_reass+0x31a>
    goto nullreturn;
 80160ec:	bf00      	nop
 80160ee:	e012      	b.n	8016116 <ip4_reass+0x31a>
    goto nullreturn;
 80160f0:	bf00      	nop
 80160f2:	e010      	b.n	8016116 <ip4_reass+0x31a>
      goto nullreturn;
 80160f4:	bf00      	nop
 80160f6:	e00e      	b.n	8016116 <ip4_reass+0x31a>
 80160f8:	200084e4 	.word	0x200084e4
 80160fc:	200084e0 	.word	0x200084e0
 8016100:	0801b814 	.word	0x0801b814
 8016104:	0801b984 	.word	0x0801b984
 8016108:	0801b85c 	.word	0x0801b85c
 801610c:	0801b9a0 	.word	0x0801b9a0
 8016110:	0801b9ac 	.word	0x0801b9ac
  }

nullreturn:
 8016114:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7f7 f996 	bl	800d448 <pbuf_free>
  return NULL;
 801611c:	2300      	movs	r3, #0
}
 801611e:	4618      	mov	r0, r3
 8016120:	3738      	adds	r7, #56	; 0x38
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop

08016128 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801612c:	2005      	movs	r0, #5
 801612e:	f7f6 fa95 	bl	800c65c <memp_malloc>
 8016132:	4603      	mov	r3, r0
}
 8016134:	4618      	mov	r0, r3
 8016136:	bd80      	pop	{r7, pc}

08016138 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b082      	sub	sp, #8
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d106      	bne.n	8016154 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016146:	4b07      	ldr	r3, [pc, #28]	; (8016164 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016148:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801614c:	4906      	ldr	r1, [pc, #24]	; (8016168 <ip_frag_free_pbuf_custom_ref+0x30>)
 801614e:	4807      	ldr	r0, [pc, #28]	; (801616c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016150:	f000 fd0a 	bl	8016b68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016154:	6879      	ldr	r1, [r7, #4]
 8016156:	2005      	movs	r0, #5
 8016158:	f7f6 fad2 	bl	800c700 <memp_free>
}
 801615c:	bf00      	nop
 801615e:	3708      	adds	r7, #8
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	0801b814 	.word	0x0801b814
 8016168:	0801b9cc 	.word	0x0801b9cc
 801616c:	0801b85c 	.word	0x0801b85c

08016170 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d106      	bne.n	8016190 <ipfrag_free_pbuf_custom+0x20>
 8016182:	4b11      	ldr	r3, [pc, #68]	; (80161c8 <ipfrag_free_pbuf_custom+0x58>)
 8016184:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016188:	4910      	ldr	r1, [pc, #64]	; (80161cc <ipfrag_free_pbuf_custom+0x5c>)
 801618a:	4811      	ldr	r0, [pc, #68]	; (80161d0 <ipfrag_free_pbuf_custom+0x60>)
 801618c:	f000 fcec 	bl	8016b68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016190:	68fa      	ldr	r2, [r7, #12]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	429a      	cmp	r2, r3
 8016196:	d006      	beq.n	80161a6 <ipfrag_free_pbuf_custom+0x36>
 8016198:	4b0b      	ldr	r3, [pc, #44]	; (80161c8 <ipfrag_free_pbuf_custom+0x58>)
 801619a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801619e:	490d      	ldr	r1, [pc, #52]	; (80161d4 <ipfrag_free_pbuf_custom+0x64>)
 80161a0:	480b      	ldr	r0, [pc, #44]	; (80161d0 <ipfrag_free_pbuf_custom+0x60>)
 80161a2:	f000 fce1 	bl	8016b68 <iprintf>
  if (pcr->original != NULL) {
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	695b      	ldr	r3, [r3, #20]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d004      	beq.n	80161b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	695b      	ldr	r3, [r3, #20]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7f7 f948 	bl	800d448 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	f7ff ffbd 	bl	8016138 <ip_frag_free_pbuf_custom_ref>
}
 80161be:	bf00      	nop
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	0801b814 	.word	0x0801b814
 80161cc:	0801b9d8 	.word	0x0801b9d8
 80161d0:	0801b85c 	.word	0x0801b85c
 80161d4:	0801b9e4 	.word	0x0801b9e4

080161d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b094      	sub	sp, #80	; 0x50
 80161dc:	af02      	add	r7, sp, #8
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80161e4:	2300      	movs	r3, #0
 80161e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80161ee:	3b14      	subs	r3, #20
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	da00      	bge.n	80161f6 <ip4_frag+0x1e>
 80161f4:	3307      	adds	r3, #7
 80161f6:	10db      	asrs	r3, r3, #3
 80161f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80161fa:	2314      	movs	r3, #20
 80161fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016206:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	f003 030f 	and.w	r3, r3, #15
 8016210:	b2db      	uxtb	r3, r3
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	b2db      	uxtb	r3, r3
 8016216:	2b14      	cmp	r3, #20
 8016218:	d002      	beq.n	8016220 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801621a:	f06f 0305 	mvn.w	r3, #5
 801621e:	e110      	b.n	8016442 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	895b      	ldrh	r3, [r3, #10]
 8016224:	2b13      	cmp	r3, #19
 8016226:	d809      	bhi.n	801623c <ip4_frag+0x64>
 8016228:	4b88      	ldr	r3, [pc, #544]	; (801644c <ip4_frag+0x274>)
 801622a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801622e:	4988      	ldr	r1, [pc, #544]	; (8016450 <ip4_frag+0x278>)
 8016230:	4888      	ldr	r0, [pc, #544]	; (8016454 <ip4_frag+0x27c>)
 8016232:	f000 fc99 	bl	8016b68 <iprintf>
 8016236:	f06f 0305 	mvn.w	r3, #5
 801623a:	e102      	b.n	8016442 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623e:	88db      	ldrh	r3, [r3, #6]
 8016240:	b29b      	uxth	r3, r3
 8016242:	4618      	mov	r0, r3
 8016244:	f7f5 fc76 	bl	800bb34 <lwip_htons>
 8016248:	4603      	mov	r3, r0
 801624a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801624c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801624e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016252:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016256:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801625c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	891b      	ldrh	r3, [r3, #8]
 8016262:	3b14      	subs	r3, #20
 8016264:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016268:	e0e1      	b.n	801642e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801626a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801626c:	00db      	lsls	r3, r3, #3
 801626e:	b29b      	uxth	r3, r3
 8016270:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016274:	4293      	cmp	r3, r2
 8016276:	bf28      	it	cs
 8016278:	4613      	movcs	r3, r2
 801627a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801627c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016280:	2114      	movs	r1, #20
 8016282:	200e      	movs	r0, #14
 8016284:	f7f6 fdfc 	bl	800ce80 <pbuf_alloc>
 8016288:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628c:	2b00      	cmp	r3, #0
 801628e:	f000 80d5 	beq.w	801643c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016294:	895b      	ldrh	r3, [r3, #10]
 8016296:	2b13      	cmp	r3, #19
 8016298:	d806      	bhi.n	80162a8 <ip4_frag+0xd0>
 801629a:	4b6c      	ldr	r3, [pc, #432]	; (801644c <ip4_frag+0x274>)
 801629c:	f44f 7249 	mov.w	r2, #804	; 0x324
 80162a0:	496d      	ldr	r1, [pc, #436]	; (8016458 <ip4_frag+0x280>)
 80162a2:	486c      	ldr	r0, [pc, #432]	; (8016454 <ip4_frag+0x27c>)
 80162a4:	f000 fc60 	bl	8016b68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80162a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	2214      	movs	r2, #20
 80162ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162b0:	4618      	mov	r0, r3
 80162b2:	f000 fbce 	bl	8016a52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80162b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80162bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80162c2:	e064      	b.n	801638e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	895a      	ldrh	r2, [r3, #10]
 80162c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	895b      	ldrh	r3, [r3, #10]
 80162d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d906      	bls.n	80162e6 <ip4_frag+0x10e>
 80162d8:	4b5c      	ldr	r3, [pc, #368]	; (801644c <ip4_frag+0x274>)
 80162da:	f240 322d 	movw	r2, #813	; 0x32d
 80162de:	495f      	ldr	r1, [pc, #380]	; (801645c <ip4_frag+0x284>)
 80162e0:	485c      	ldr	r0, [pc, #368]	; (8016454 <ip4_frag+0x27c>)
 80162e2:	f000 fc41 	bl	8016b68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80162e6:	8bfa      	ldrh	r2, [r7, #30]
 80162e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80162ec:	4293      	cmp	r3, r2
 80162ee:	bf28      	it	cs
 80162f0:	4613      	movcs	r3, r2
 80162f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80162f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d105      	bne.n	801630a <ip4_frag+0x132>
        poff = 0;
 80162fe:	2300      	movs	r3, #0
 8016300:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	60fb      	str	r3, [r7, #12]
        continue;
 8016308:	e041      	b.n	801638e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801630a:	f7ff ff0d 	bl	8016128 <ip_frag_alloc_pbuf_custom_ref>
 801630e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016310:	69bb      	ldr	r3, [r7, #24]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d103      	bne.n	801631e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016318:	f7f7 f896 	bl	800d448 <pbuf_free>
        goto memerr;
 801631c:	e08f      	b.n	801643e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801631e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016326:	4413      	add	r3, r2
 8016328:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801632c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016330:	9201      	str	r2, [sp, #4]
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	4603      	mov	r3, r0
 8016336:	2241      	movs	r2, #65	; 0x41
 8016338:	2000      	movs	r0, #0
 801633a:	f7f6 fecb 	bl	800d0d4 <pbuf_alloced_custom>
 801633e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d106      	bne.n	8016354 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016346:	69b8      	ldr	r0, [r7, #24]
 8016348:	f7ff fef6 	bl	8016138 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801634c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801634e:	f7f7 f87b 	bl	800d448 <pbuf_free>
        goto memerr;
 8016352:	e074      	b.n	801643e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f7f7 f91d 	bl	800d594 <pbuf_ref>
      pcr->original = p;
 801635a:	69bb      	ldr	r3, [r7, #24]
 801635c:	68fa      	ldr	r2, [r7, #12]
 801635e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	4a3f      	ldr	r2, [pc, #252]	; (8016460 <ip4_frag+0x288>)
 8016364:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016366:	6979      	ldr	r1, [r7, #20]
 8016368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801636a:	f7f7 f93b 	bl	800d5e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801636e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016372:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016376:	1ad3      	subs	r3, r2, r3
 8016378:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801637c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016380:	2b00      	cmp	r3, #0
 8016382:	d004      	beq.n	801638e <ip4_frag+0x1b6>
        poff = 0;
 8016384:	2300      	movs	r3, #0
 8016386:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801638e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016392:	2b00      	cmp	r3, #0
 8016394:	d196      	bne.n	80162c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016396:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016398:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801639c:	4413      	add	r3, r2
 801639e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80163a4:	f1a3 0213 	sub.w	r2, r3, #19
 80163a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163ac:	429a      	cmp	r2, r3
 80163ae:	bfcc      	ite	gt
 80163b0:	2301      	movgt	r3, #1
 80163b2:	2300      	movle	r3, #0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80163b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80163c2:	6a3b      	ldr	r3, [r7, #32]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d002      	beq.n	80163ce <ip4_frag+0x1f6>
 80163c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d003      	beq.n	80163d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80163ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80163d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80163d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163d8:	4618      	mov	r0, r3
 80163da:	f7f5 fbab 	bl	800bb34 <lwip_htons>
 80163de:	4603      	mov	r3, r0
 80163e0:	461a      	mov	r2, r3
 80163e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80163e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163e8:	3314      	adds	r3, #20
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7f5 fba1 	bl	800bb34 <lwip_htons>
 80163f2:	4603      	mov	r3, r0
 80163f4:	461a      	mov	r2, r3
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80163fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163fc:	2200      	movs	r2, #0
 80163fe:	729a      	strb	r2, [r3, #10]
 8016400:	2200      	movs	r2, #0
 8016402:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	695b      	ldr	r3, [r3, #20]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801640c:	68b8      	ldr	r0, [r7, #8]
 801640e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016412:	f7f7 f819 	bl	800d448 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016416:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801641a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016422:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016426:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016428:	4413      	add	r3, r2
 801642a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801642e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016432:	2b00      	cmp	r3, #0
 8016434:	f47f af19 	bne.w	801626a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016438:	2300      	movs	r3, #0
 801643a:	e002      	b.n	8016442 <ip4_frag+0x26a>
      goto memerr;
 801643c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016442:	4618      	mov	r0, r3
 8016444:	3748      	adds	r7, #72	; 0x48
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
 801644a:	bf00      	nop
 801644c:	0801b814 	.word	0x0801b814
 8016450:	0801b9f0 	.word	0x0801b9f0
 8016454:	0801b85c 	.word	0x0801b85c
 8016458:	0801ba0c 	.word	0x0801ba0c
 801645c:	0801ba2c 	.word	0x0801ba2c
 8016460:	08016171 	.word	0x08016171

08016464 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801646e:	230e      	movs	r3, #14
 8016470:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	895b      	ldrh	r3, [r3, #10]
 8016476:	2b0e      	cmp	r3, #14
 8016478:	d96e      	bls.n	8016558 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	7bdb      	ldrb	r3, [r3, #15]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d106      	bne.n	8016490 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016488:	3301      	adds	r3, #1
 801648a:	b2da      	uxtb	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	685b      	ldr	r3, [r3, #4]
 8016494:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	7b1a      	ldrb	r2, [r3, #12]
 801649a:	7b5b      	ldrb	r3, [r3, #13]
 801649c:	021b      	lsls	r3, r3, #8
 801649e:	4313      	orrs	r3, r2
 80164a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	f003 0301 	and.w	r3, r3, #1
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d023      	beq.n	80164f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	2b01      	cmp	r3, #1
 80164b4:	d10f      	bne.n	80164d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	785b      	ldrb	r3, [r3, #1]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d11b      	bne.n	80164f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164c2:	2b5e      	cmp	r3, #94	; 0x5e
 80164c4:	d117      	bne.n	80164f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	7b5b      	ldrb	r3, [r3, #13]
 80164ca:	f043 0310 	orr.w	r3, r3, #16
 80164ce:	b2da      	uxtb	r2, r3
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	735a      	strb	r2, [r3, #13]
 80164d4:	e00f      	b.n	80164f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	2206      	movs	r2, #6
 80164da:	4928      	ldr	r1, [pc, #160]	; (801657c <ethernet_input+0x118>)
 80164dc:	4618      	mov	r0, r3
 80164de:	f000 faaa 	bl	8016a36 <memcmp>
 80164e2:	4603      	mov	r3, r0
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d106      	bne.n	80164f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	7b5b      	ldrb	r3, [r3, #13]
 80164ec:	f043 0308 	orr.w	r3, r3, #8
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80164f6:	89fb      	ldrh	r3, [r7, #14]
 80164f8:	2b08      	cmp	r3, #8
 80164fa:	d003      	beq.n	8016504 <ethernet_input+0xa0>
 80164fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016500:	d014      	beq.n	801652c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016502:	e032      	b.n	801656a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801650a:	f003 0308 	and.w	r3, r3, #8
 801650e:	2b00      	cmp	r3, #0
 8016510:	d024      	beq.n	801655c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016512:	8afb      	ldrh	r3, [r7, #22]
 8016514:	4619      	mov	r1, r3
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f7f6 ff10 	bl	800d33c <pbuf_remove_header>
 801651c:	4603      	mov	r3, r0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d11e      	bne.n	8016560 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016522:	6839      	ldr	r1, [r7, #0]
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f7fe ff27 	bl	8015378 <ip4_input>
      break;
 801652a:	e013      	b.n	8016554 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016532:	f003 0308 	and.w	r3, r3, #8
 8016536:	2b00      	cmp	r3, #0
 8016538:	d014      	beq.n	8016564 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801653a:	8afb      	ldrh	r3, [r7, #22]
 801653c:	4619      	mov	r1, r3
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7f6 fefc 	bl	800d33c <pbuf_remove_header>
 8016544:	4603      	mov	r3, r0
 8016546:	2b00      	cmp	r3, #0
 8016548:	d10e      	bne.n	8016568 <ethernet_input+0x104>
        etharp_input(p, netif);
 801654a:	6839      	ldr	r1, [r7, #0]
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7fe f8c7 	bl	80146e0 <etharp_input>
      break;
 8016552:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016554:	2300      	movs	r3, #0
 8016556:	e00c      	b.n	8016572 <ethernet_input+0x10e>
    goto free_and_return;
 8016558:	bf00      	nop
 801655a:	e006      	b.n	801656a <ethernet_input+0x106>
        goto free_and_return;
 801655c:	bf00      	nop
 801655e:	e004      	b.n	801656a <ethernet_input+0x106>
        goto free_and_return;
 8016560:	bf00      	nop
 8016562:	e002      	b.n	801656a <ethernet_input+0x106>
        goto free_and_return;
 8016564:	bf00      	nop
 8016566:	e000      	b.n	801656a <ethernet_input+0x106>
        goto free_and_return;
 8016568:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f7f6 ff6c 	bl	800d448 <pbuf_free>
  return ERR_OK;
 8016570:	2300      	movs	r3, #0
}
 8016572:	4618      	mov	r0, r3
 8016574:	3718      	adds	r7, #24
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	08022b7c 	.word	0x08022b7c

08016580 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801658e:	8c3b      	ldrh	r3, [r7, #32]
 8016590:	4618      	mov	r0, r3
 8016592:	f7f5 facf 	bl	800bb34 <lwip_htons>
 8016596:	4603      	mov	r3, r0
 8016598:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801659a:	210e      	movs	r1, #14
 801659c:	68b8      	ldr	r0, [r7, #8]
 801659e:	f7f6 febd 	bl	800d31c <pbuf_add_header>
 80165a2:	4603      	mov	r3, r0
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d125      	bne.n	80165f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	685b      	ldr	r3, [r3, #4]
 80165ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	8afa      	ldrh	r2, [r7, #22]
 80165b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	2206      	movs	r2, #6
 80165b8:	6839      	ldr	r1, [r7, #0]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f000 fa49 	bl	8016a52 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	3306      	adds	r3, #6
 80165c4:	2206      	movs	r2, #6
 80165c6:	6879      	ldr	r1, [r7, #4]
 80165c8:	4618      	mov	r0, r3
 80165ca:	f000 fa42 	bl	8016a52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80165d4:	2b06      	cmp	r3, #6
 80165d6:	d006      	beq.n	80165e6 <ethernet_output+0x66>
 80165d8:	4b0a      	ldr	r3, [pc, #40]	; (8016604 <ethernet_output+0x84>)
 80165da:	f44f 7299 	mov.w	r2, #306	; 0x132
 80165de:	490a      	ldr	r1, [pc, #40]	; (8016608 <ethernet_output+0x88>)
 80165e0:	480a      	ldr	r0, [pc, #40]	; (801660c <ethernet_output+0x8c>)
 80165e2:	f000 fac1 	bl	8016b68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	699b      	ldr	r3, [r3, #24]
 80165ea:	68b9      	ldr	r1, [r7, #8]
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	4798      	blx	r3
 80165f0:	4603      	mov	r3, r0
 80165f2:	e002      	b.n	80165fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80165f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80165f6:	f06f 0301 	mvn.w	r3, #1
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3718      	adds	r7, #24
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	0801ba3c 	.word	0x0801ba3c
 8016608:	0801ba74 	.word	0x0801ba74
 801660c:	0801baa8 	.word	0x0801baa8

08016610 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2200      	movs	r2, #0
 801661e:	2104      	movs	r1, #4
 8016620:	4618      	mov	r0, r3
 8016622:	f7ef fe6d 	bl	8006300 <osMessageQueueNew>
 8016626:	4602      	mov	r2, r0
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d102      	bne.n	801663a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016638:	e000      	b.n	801663c <sys_mbox_new+0x2c>

  return ERR_OK;
 801663a:	2300      	movs	r3, #0
}
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6818      	ldr	r0, [r3, #0]
 8016652:	4639      	mov	r1, r7
 8016654:	2300      	movs	r3, #0
 8016656:	2200      	movs	r2, #0
 8016658:	f7ef fec6 	bl	80063e8 <osMessageQueuePut>
 801665c:	4603      	mov	r3, r0
 801665e:	2b00      	cmp	r3, #0
 8016660:	d102      	bne.n	8016668 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016662:	2300      	movs	r3, #0
 8016664:	73fb      	strb	r3, [r7, #15]
 8016666:	e001      	b.n	801666c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016668:	23ff      	movs	r3, #255	; 0xff
 801666a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801666c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016670:	4618      	mov	r0, r3
 8016672:	3710      	adds	r7, #16
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b086      	sub	sp, #24
 801667c:	af00      	add	r7, sp, #0
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	60b9      	str	r1, [r7, #8]
 8016682:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016684:	f7ef fb4c 	bl	8005d20 <osKernelGetTickCount>
 8016688:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d013      	beq.n	80166b8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	6818      	ldr	r0, [r3, #0]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2200      	movs	r2, #0
 8016698:	68b9      	ldr	r1, [r7, #8]
 801669a:	f7ef ff05 	bl	80064a8 <osMessageQueueGet>
 801669e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d105      	bne.n	80166b2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80166a6:	f7ef fb3b 	bl	8005d20 <osKernelGetTickCount>
 80166aa:	4602      	mov	r2, r0
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	1ad3      	subs	r3, r2, r3
 80166b0:	e00f      	b.n	80166d2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80166b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166b6:	e00c      	b.n	80166d2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	6818      	ldr	r0, [r3, #0]
 80166bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166c0:	2200      	movs	r2, #0
 80166c2:	68b9      	ldr	r1, [r7, #8]
 80166c4:	f7ef fef0 	bl	80064a8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80166c8:	f7ef fb2a 	bl	8005d20 <osKernelGetTickCount>
 80166cc:	4602      	mov	r2, r0
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	3718      	adds	r7, #24
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}

080166da <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80166da:	b480      	push	{r7}
 80166dc:	b083      	sub	sp, #12
 80166de:	af00      	add	r7, sp, #0
 80166e0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d101      	bne.n	80166ee <sys_mbox_valid+0x14>
    return 0;
 80166ea:	2300      	movs	r3, #0
 80166ec:	e000      	b.n	80166f0 <sys_mbox_valid+0x16>
  else
    return 1;
 80166ee:	2301      	movs	r3, #1
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016700:	2000      	movs	r0, #0
 8016702:	f7ef fbcf 	bl	8005ea4 <osMutexNew>
 8016706:	4603      	mov	r3, r0
 8016708:	4a01      	ldr	r2, [pc, #4]	; (8016710 <sys_init+0x14>)
 801670a:	6013      	str	r3, [r2, #0]
#endif
}
 801670c:	bf00      	nop
 801670e:	bd80      	pop	{r7, pc}
 8016710:	20014ac4 	.word	0x20014ac4

08016714 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801671c:	2000      	movs	r0, #0
 801671e:	f7ef fbc1 	bl	8005ea4 <osMutexNew>
 8016722:	4602      	mov	r2, r0
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016734:	e000      	b.n	8016738 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016736:	2300      	movs	r3, #0
}
 8016738:	4618      	mov	r0, r3
 801673a:	3708      	adds	r7, #8
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016750:	4618      	mov	r0, r3
 8016752:	f7ef fc2d 	bl	8005fb0 <osMutexAcquire>
#endif
}
 8016756:	bf00      	nop
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}

0801675e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801675e:	b580      	push	{r7, lr}
 8016760:	b082      	sub	sp, #8
 8016762:	af00      	add	r7, sp, #0
 8016764:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	4618      	mov	r0, r3
 801676c:	f7ef fc6b 	bl	8006046 <osMutexRelease>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b08e      	sub	sp, #56	; 0x38
 801677c:	af00      	add	r7, sp, #0
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	607a      	str	r2, [r7, #4]
 8016784:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016786:	f107 0314 	add.w	r3, r7, #20
 801678a:	2224      	movs	r2, #36	; 0x24
 801678c:	2100      	movs	r1, #0
 801678e:	4618      	mov	r0, r3
 8016790:	f000 f987 	bl	8016aa2 <memset>
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	617b      	str	r3, [r7, #20]
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	62bb      	str	r3, [r7, #40]	; 0x28
 801679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801679e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80167a0:	f107 0314 	add.w	r3, r7, #20
 80167a4:	461a      	mov	r2, r3
 80167a6:	6879      	ldr	r1, [r7, #4]
 80167a8:	68b8      	ldr	r0, [r7, #8]
 80167aa:	f7ef face 	bl	8005d4a <osThreadNew>
 80167ae:	4603      	mov	r3, r0
#endif
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	3738      	adds	r7, #56	; 0x38
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80167bc:	4b04      	ldr	r3, [pc, #16]	; (80167d0 <sys_arch_protect+0x18>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ef fbf3 	bl	8005fb0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80167ca:	2301      	movs	r3, #1
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	20014ac4 	.word	0x20014ac4

080167d4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80167dc:	4b04      	ldr	r3, [pc, #16]	; (80167f0 <sys_arch_unprotect+0x1c>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7ef fc30 	bl	8006046 <osMutexRelease>
}
 80167e6:	bf00      	nop
 80167e8:	3708      	adds	r7, #8
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
 80167ee:	bf00      	nop
 80167f0:	20014ac4 	.word	0x20014ac4

080167f4 <atoi>:
 80167f4:	220a      	movs	r2, #10
 80167f6:	2100      	movs	r1, #0
 80167f8:	f000 bca4 	b.w	8017144 <strtol>

080167fc <std>:
 80167fc:	2300      	movs	r3, #0
 80167fe:	b510      	push	{r4, lr}
 8016800:	4604      	mov	r4, r0
 8016802:	e9c0 3300 	strd	r3, r3, [r0]
 8016806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801680a:	6083      	str	r3, [r0, #8]
 801680c:	8181      	strh	r1, [r0, #12]
 801680e:	6643      	str	r3, [r0, #100]	; 0x64
 8016810:	81c2      	strh	r2, [r0, #14]
 8016812:	6183      	str	r3, [r0, #24]
 8016814:	4619      	mov	r1, r3
 8016816:	2208      	movs	r2, #8
 8016818:	305c      	adds	r0, #92	; 0x5c
 801681a:	f000 f942 	bl	8016aa2 <memset>
 801681e:	4b05      	ldr	r3, [pc, #20]	; (8016834 <std+0x38>)
 8016820:	6263      	str	r3, [r4, #36]	; 0x24
 8016822:	4b05      	ldr	r3, [pc, #20]	; (8016838 <std+0x3c>)
 8016824:	62a3      	str	r3, [r4, #40]	; 0x28
 8016826:	4b05      	ldr	r3, [pc, #20]	; (801683c <std+0x40>)
 8016828:	62e3      	str	r3, [r4, #44]	; 0x2c
 801682a:	4b05      	ldr	r3, [pc, #20]	; (8016840 <std+0x44>)
 801682c:	6224      	str	r4, [r4, #32]
 801682e:	6323      	str	r3, [r4, #48]	; 0x30
 8016830:	bd10      	pop	{r4, pc}
 8016832:	bf00      	nop
 8016834:	08016ea1 	.word	0x08016ea1
 8016838:	08016ec3 	.word	0x08016ec3
 801683c:	08016efb 	.word	0x08016efb
 8016840:	08016f1f 	.word	0x08016f1f

08016844 <_cleanup_r>:
 8016844:	4901      	ldr	r1, [pc, #4]	; (801684c <_cleanup_r+0x8>)
 8016846:	f000 b8af 	b.w	80169a8 <_fwalk_reent>
 801684a:	bf00      	nop
 801684c:	08017471 	.word	0x08017471

08016850 <__sfmoreglue>:
 8016850:	b570      	push	{r4, r5, r6, lr}
 8016852:	1e4a      	subs	r2, r1, #1
 8016854:	2568      	movs	r5, #104	; 0x68
 8016856:	4355      	muls	r5, r2
 8016858:	460e      	mov	r6, r1
 801685a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801685e:	f000 f929 	bl	8016ab4 <_malloc_r>
 8016862:	4604      	mov	r4, r0
 8016864:	b140      	cbz	r0, 8016878 <__sfmoreglue+0x28>
 8016866:	2100      	movs	r1, #0
 8016868:	e9c0 1600 	strd	r1, r6, [r0]
 801686c:	300c      	adds	r0, #12
 801686e:	60a0      	str	r0, [r4, #8]
 8016870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016874:	f000 f915 	bl	8016aa2 <memset>
 8016878:	4620      	mov	r0, r4
 801687a:	bd70      	pop	{r4, r5, r6, pc}

0801687c <__sfp_lock_acquire>:
 801687c:	4801      	ldr	r0, [pc, #4]	; (8016884 <__sfp_lock_acquire+0x8>)
 801687e:	f000 b8d8 	b.w	8016a32 <__retarget_lock_acquire_recursive>
 8016882:	bf00      	nop
 8016884:	20014ad0 	.word	0x20014ad0

08016888 <__sfp_lock_release>:
 8016888:	4801      	ldr	r0, [pc, #4]	; (8016890 <__sfp_lock_release+0x8>)
 801688a:	f000 b8d3 	b.w	8016a34 <__retarget_lock_release_recursive>
 801688e:	bf00      	nop
 8016890:	20014ad0 	.word	0x20014ad0

08016894 <__sinit_lock_acquire>:
 8016894:	4801      	ldr	r0, [pc, #4]	; (801689c <__sinit_lock_acquire+0x8>)
 8016896:	f000 b8cc 	b.w	8016a32 <__retarget_lock_acquire_recursive>
 801689a:	bf00      	nop
 801689c:	20014acb 	.word	0x20014acb

080168a0 <__sinit_lock_release>:
 80168a0:	4801      	ldr	r0, [pc, #4]	; (80168a8 <__sinit_lock_release+0x8>)
 80168a2:	f000 b8c7 	b.w	8016a34 <__retarget_lock_release_recursive>
 80168a6:	bf00      	nop
 80168a8:	20014acb 	.word	0x20014acb

080168ac <__sinit>:
 80168ac:	b510      	push	{r4, lr}
 80168ae:	4604      	mov	r4, r0
 80168b0:	f7ff fff0 	bl	8016894 <__sinit_lock_acquire>
 80168b4:	69a3      	ldr	r3, [r4, #24]
 80168b6:	b11b      	cbz	r3, 80168c0 <__sinit+0x14>
 80168b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168bc:	f7ff bff0 	b.w	80168a0 <__sinit_lock_release>
 80168c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80168c4:	6523      	str	r3, [r4, #80]	; 0x50
 80168c6:	4b13      	ldr	r3, [pc, #76]	; (8016914 <__sinit+0x68>)
 80168c8:	4a13      	ldr	r2, [pc, #76]	; (8016918 <__sinit+0x6c>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80168ce:	42a3      	cmp	r3, r4
 80168d0:	bf04      	itt	eq
 80168d2:	2301      	moveq	r3, #1
 80168d4:	61a3      	streq	r3, [r4, #24]
 80168d6:	4620      	mov	r0, r4
 80168d8:	f000 f820 	bl	801691c <__sfp>
 80168dc:	6060      	str	r0, [r4, #4]
 80168de:	4620      	mov	r0, r4
 80168e0:	f000 f81c 	bl	801691c <__sfp>
 80168e4:	60a0      	str	r0, [r4, #8]
 80168e6:	4620      	mov	r0, r4
 80168e8:	f000 f818 	bl	801691c <__sfp>
 80168ec:	2200      	movs	r2, #0
 80168ee:	60e0      	str	r0, [r4, #12]
 80168f0:	2104      	movs	r1, #4
 80168f2:	6860      	ldr	r0, [r4, #4]
 80168f4:	f7ff ff82 	bl	80167fc <std>
 80168f8:	68a0      	ldr	r0, [r4, #8]
 80168fa:	2201      	movs	r2, #1
 80168fc:	2109      	movs	r1, #9
 80168fe:	f7ff ff7d 	bl	80167fc <std>
 8016902:	68e0      	ldr	r0, [r4, #12]
 8016904:	2202      	movs	r2, #2
 8016906:	2112      	movs	r1, #18
 8016908:	f7ff ff78 	bl	80167fc <std>
 801690c:	2301      	movs	r3, #1
 801690e:	61a3      	str	r3, [r4, #24]
 8016910:	e7d2      	b.n	80168b8 <__sinit+0xc>
 8016912:	bf00      	nop
 8016914:	08022cec 	.word	0x08022cec
 8016918:	08016845 	.word	0x08016845

0801691c <__sfp>:
 801691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801691e:	4607      	mov	r7, r0
 8016920:	f7ff ffac 	bl	801687c <__sfp_lock_acquire>
 8016924:	4b1e      	ldr	r3, [pc, #120]	; (80169a0 <__sfp+0x84>)
 8016926:	681e      	ldr	r6, [r3, #0]
 8016928:	69b3      	ldr	r3, [r6, #24]
 801692a:	b913      	cbnz	r3, 8016932 <__sfp+0x16>
 801692c:	4630      	mov	r0, r6
 801692e:	f7ff ffbd 	bl	80168ac <__sinit>
 8016932:	3648      	adds	r6, #72	; 0x48
 8016934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016938:	3b01      	subs	r3, #1
 801693a:	d503      	bpl.n	8016944 <__sfp+0x28>
 801693c:	6833      	ldr	r3, [r6, #0]
 801693e:	b30b      	cbz	r3, 8016984 <__sfp+0x68>
 8016940:	6836      	ldr	r6, [r6, #0]
 8016942:	e7f7      	b.n	8016934 <__sfp+0x18>
 8016944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016948:	b9d5      	cbnz	r5, 8016980 <__sfp+0x64>
 801694a:	4b16      	ldr	r3, [pc, #88]	; (80169a4 <__sfp+0x88>)
 801694c:	60e3      	str	r3, [r4, #12]
 801694e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016952:	6665      	str	r5, [r4, #100]	; 0x64
 8016954:	f000 f86c 	bl	8016a30 <__retarget_lock_init_recursive>
 8016958:	f7ff ff96 	bl	8016888 <__sfp_lock_release>
 801695c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016964:	6025      	str	r5, [r4, #0]
 8016966:	61a5      	str	r5, [r4, #24]
 8016968:	2208      	movs	r2, #8
 801696a:	4629      	mov	r1, r5
 801696c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016970:	f000 f897 	bl	8016aa2 <memset>
 8016974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801697c:	4620      	mov	r0, r4
 801697e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016980:	3468      	adds	r4, #104	; 0x68
 8016982:	e7d9      	b.n	8016938 <__sfp+0x1c>
 8016984:	2104      	movs	r1, #4
 8016986:	4638      	mov	r0, r7
 8016988:	f7ff ff62 	bl	8016850 <__sfmoreglue>
 801698c:	4604      	mov	r4, r0
 801698e:	6030      	str	r0, [r6, #0]
 8016990:	2800      	cmp	r0, #0
 8016992:	d1d5      	bne.n	8016940 <__sfp+0x24>
 8016994:	f7ff ff78 	bl	8016888 <__sfp_lock_release>
 8016998:	230c      	movs	r3, #12
 801699a:	603b      	str	r3, [r7, #0]
 801699c:	e7ee      	b.n	801697c <__sfp+0x60>
 801699e:	bf00      	nop
 80169a0:	08022cec 	.word	0x08022cec
 80169a4:	ffff0001 	.word	0xffff0001

080169a8 <_fwalk_reent>:
 80169a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169ac:	4606      	mov	r6, r0
 80169ae:	4688      	mov	r8, r1
 80169b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80169b4:	2700      	movs	r7, #0
 80169b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169ba:	f1b9 0901 	subs.w	r9, r9, #1
 80169be:	d505      	bpl.n	80169cc <_fwalk_reent+0x24>
 80169c0:	6824      	ldr	r4, [r4, #0]
 80169c2:	2c00      	cmp	r4, #0
 80169c4:	d1f7      	bne.n	80169b6 <_fwalk_reent+0xe>
 80169c6:	4638      	mov	r0, r7
 80169c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169cc:	89ab      	ldrh	r3, [r5, #12]
 80169ce:	2b01      	cmp	r3, #1
 80169d0:	d907      	bls.n	80169e2 <_fwalk_reent+0x3a>
 80169d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169d6:	3301      	adds	r3, #1
 80169d8:	d003      	beq.n	80169e2 <_fwalk_reent+0x3a>
 80169da:	4629      	mov	r1, r5
 80169dc:	4630      	mov	r0, r6
 80169de:	47c0      	blx	r8
 80169e0:	4307      	orrs	r7, r0
 80169e2:	3568      	adds	r5, #104	; 0x68
 80169e4:	e7e9      	b.n	80169ba <_fwalk_reent+0x12>
	...

080169e8 <__libc_init_array>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4d0d      	ldr	r5, [pc, #52]	; (8016a20 <__libc_init_array+0x38>)
 80169ec:	4c0d      	ldr	r4, [pc, #52]	; (8016a24 <__libc_init_array+0x3c>)
 80169ee:	1b64      	subs	r4, r4, r5
 80169f0:	10a4      	asrs	r4, r4, #2
 80169f2:	2600      	movs	r6, #0
 80169f4:	42a6      	cmp	r6, r4
 80169f6:	d109      	bne.n	8016a0c <__libc_init_array+0x24>
 80169f8:	4d0b      	ldr	r5, [pc, #44]	; (8016a28 <__libc_init_array+0x40>)
 80169fa:	4c0c      	ldr	r4, [pc, #48]	; (8016a2c <__libc_init_array+0x44>)
 80169fc:	f001 fb58 	bl	80180b0 <_init>
 8016a00:	1b64      	subs	r4, r4, r5
 8016a02:	10a4      	asrs	r4, r4, #2
 8016a04:	2600      	movs	r6, #0
 8016a06:	42a6      	cmp	r6, r4
 8016a08:	d105      	bne.n	8016a16 <__libc_init_array+0x2e>
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a10:	4798      	blx	r3
 8016a12:	3601      	adds	r6, #1
 8016a14:	e7ee      	b.n	80169f4 <__libc_init_array+0xc>
 8016a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a1a:	4798      	blx	r3
 8016a1c:	3601      	adds	r6, #1
 8016a1e:	e7f2      	b.n	8016a06 <__libc_init_array+0x1e>
 8016a20:	08022de0 	.word	0x08022de0
 8016a24:	08022de0 	.word	0x08022de0
 8016a28:	08022de0 	.word	0x08022de0
 8016a2c:	08022de4 	.word	0x08022de4

08016a30 <__retarget_lock_init_recursive>:
 8016a30:	4770      	bx	lr

08016a32 <__retarget_lock_acquire_recursive>:
 8016a32:	4770      	bx	lr

08016a34 <__retarget_lock_release_recursive>:
 8016a34:	4770      	bx	lr

08016a36 <memcmp>:
 8016a36:	b530      	push	{r4, r5, lr}
 8016a38:	3901      	subs	r1, #1
 8016a3a:	2400      	movs	r4, #0
 8016a3c:	42a2      	cmp	r2, r4
 8016a3e:	d101      	bne.n	8016a44 <memcmp+0xe>
 8016a40:	2000      	movs	r0, #0
 8016a42:	e005      	b.n	8016a50 <memcmp+0x1a>
 8016a44:	5d03      	ldrb	r3, [r0, r4]
 8016a46:	3401      	adds	r4, #1
 8016a48:	5d0d      	ldrb	r5, [r1, r4]
 8016a4a:	42ab      	cmp	r3, r5
 8016a4c:	d0f6      	beq.n	8016a3c <memcmp+0x6>
 8016a4e:	1b58      	subs	r0, r3, r5
 8016a50:	bd30      	pop	{r4, r5, pc}

08016a52 <memcpy>:
 8016a52:	440a      	add	r2, r1
 8016a54:	4291      	cmp	r1, r2
 8016a56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016a5a:	d100      	bne.n	8016a5e <memcpy+0xc>
 8016a5c:	4770      	bx	lr
 8016a5e:	b510      	push	{r4, lr}
 8016a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a68:	4291      	cmp	r1, r2
 8016a6a:	d1f9      	bne.n	8016a60 <memcpy+0xe>
 8016a6c:	bd10      	pop	{r4, pc}

08016a6e <memmove>:
 8016a6e:	4288      	cmp	r0, r1
 8016a70:	b510      	push	{r4, lr}
 8016a72:	eb01 0402 	add.w	r4, r1, r2
 8016a76:	d902      	bls.n	8016a7e <memmove+0x10>
 8016a78:	4284      	cmp	r4, r0
 8016a7a:	4623      	mov	r3, r4
 8016a7c:	d807      	bhi.n	8016a8e <memmove+0x20>
 8016a7e:	1e43      	subs	r3, r0, #1
 8016a80:	42a1      	cmp	r1, r4
 8016a82:	d008      	beq.n	8016a96 <memmove+0x28>
 8016a84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a8c:	e7f8      	b.n	8016a80 <memmove+0x12>
 8016a8e:	4402      	add	r2, r0
 8016a90:	4601      	mov	r1, r0
 8016a92:	428a      	cmp	r2, r1
 8016a94:	d100      	bne.n	8016a98 <memmove+0x2a>
 8016a96:	bd10      	pop	{r4, pc}
 8016a98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016aa0:	e7f7      	b.n	8016a92 <memmove+0x24>

08016aa2 <memset>:
 8016aa2:	4402      	add	r2, r0
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	4293      	cmp	r3, r2
 8016aa8:	d100      	bne.n	8016aac <memset+0xa>
 8016aaa:	4770      	bx	lr
 8016aac:	f803 1b01 	strb.w	r1, [r3], #1
 8016ab0:	e7f9      	b.n	8016aa6 <memset+0x4>
	...

08016ab4 <_malloc_r>:
 8016ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ab6:	1ccd      	adds	r5, r1, #3
 8016ab8:	f025 0503 	bic.w	r5, r5, #3
 8016abc:	3508      	adds	r5, #8
 8016abe:	2d0c      	cmp	r5, #12
 8016ac0:	bf38      	it	cc
 8016ac2:	250c      	movcc	r5, #12
 8016ac4:	2d00      	cmp	r5, #0
 8016ac6:	4606      	mov	r6, r0
 8016ac8:	db01      	blt.n	8016ace <_malloc_r+0x1a>
 8016aca:	42a9      	cmp	r1, r5
 8016acc:	d903      	bls.n	8016ad6 <_malloc_r+0x22>
 8016ace:	230c      	movs	r3, #12
 8016ad0:	6033      	str	r3, [r6, #0]
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ad6:	f000 fd97 	bl	8017608 <__malloc_lock>
 8016ada:	4921      	ldr	r1, [pc, #132]	; (8016b60 <_malloc_r+0xac>)
 8016adc:	680a      	ldr	r2, [r1, #0]
 8016ade:	4614      	mov	r4, r2
 8016ae0:	b99c      	cbnz	r4, 8016b0a <_malloc_r+0x56>
 8016ae2:	4f20      	ldr	r7, [pc, #128]	; (8016b64 <_malloc_r+0xb0>)
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	b923      	cbnz	r3, 8016af2 <_malloc_r+0x3e>
 8016ae8:	4621      	mov	r1, r4
 8016aea:	4630      	mov	r0, r6
 8016aec:	f000 f974 	bl	8016dd8 <_sbrk_r>
 8016af0:	6038      	str	r0, [r7, #0]
 8016af2:	4629      	mov	r1, r5
 8016af4:	4630      	mov	r0, r6
 8016af6:	f000 f96f 	bl	8016dd8 <_sbrk_r>
 8016afa:	1c43      	adds	r3, r0, #1
 8016afc:	d123      	bne.n	8016b46 <_malloc_r+0x92>
 8016afe:	230c      	movs	r3, #12
 8016b00:	6033      	str	r3, [r6, #0]
 8016b02:	4630      	mov	r0, r6
 8016b04:	f000 fd86 	bl	8017614 <__malloc_unlock>
 8016b08:	e7e3      	b.n	8016ad2 <_malloc_r+0x1e>
 8016b0a:	6823      	ldr	r3, [r4, #0]
 8016b0c:	1b5b      	subs	r3, r3, r5
 8016b0e:	d417      	bmi.n	8016b40 <_malloc_r+0x8c>
 8016b10:	2b0b      	cmp	r3, #11
 8016b12:	d903      	bls.n	8016b1c <_malloc_r+0x68>
 8016b14:	6023      	str	r3, [r4, #0]
 8016b16:	441c      	add	r4, r3
 8016b18:	6025      	str	r5, [r4, #0]
 8016b1a:	e004      	b.n	8016b26 <_malloc_r+0x72>
 8016b1c:	6863      	ldr	r3, [r4, #4]
 8016b1e:	42a2      	cmp	r2, r4
 8016b20:	bf0c      	ite	eq
 8016b22:	600b      	streq	r3, [r1, #0]
 8016b24:	6053      	strne	r3, [r2, #4]
 8016b26:	4630      	mov	r0, r6
 8016b28:	f000 fd74 	bl	8017614 <__malloc_unlock>
 8016b2c:	f104 000b 	add.w	r0, r4, #11
 8016b30:	1d23      	adds	r3, r4, #4
 8016b32:	f020 0007 	bic.w	r0, r0, #7
 8016b36:	1ac2      	subs	r2, r0, r3
 8016b38:	d0cc      	beq.n	8016ad4 <_malloc_r+0x20>
 8016b3a:	1a1b      	subs	r3, r3, r0
 8016b3c:	50a3      	str	r3, [r4, r2]
 8016b3e:	e7c9      	b.n	8016ad4 <_malloc_r+0x20>
 8016b40:	4622      	mov	r2, r4
 8016b42:	6864      	ldr	r4, [r4, #4]
 8016b44:	e7cc      	b.n	8016ae0 <_malloc_r+0x2c>
 8016b46:	1cc4      	adds	r4, r0, #3
 8016b48:	f024 0403 	bic.w	r4, r4, #3
 8016b4c:	42a0      	cmp	r0, r4
 8016b4e:	d0e3      	beq.n	8016b18 <_malloc_r+0x64>
 8016b50:	1a21      	subs	r1, r4, r0
 8016b52:	4630      	mov	r0, r6
 8016b54:	f000 f940 	bl	8016dd8 <_sbrk_r>
 8016b58:	3001      	adds	r0, #1
 8016b5a:	d1dd      	bne.n	8016b18 <_malloc_r+0x64>
 8016b5c:	e7cf      	b.n	8016afe <_malloc_r+0x4a>
 8016b5e:	bf00      	nop
 8016b60:	200084e8 	.word	0x200084e8
 8016b64:	200084ec 	.word	0x200084ec

08016b68 <iprintf>:
 8016b68:	b40f      	push	{r0, r1, r2, r3}
 8016b6a:	4b0a      	ldr	r3, [pc, #40]	; (8016b94 <iprintf+0x2c>)
 8016b6c:	b513      	push	{r0, r1, r4, lr}
 8016b6e:	681c      	ldr	r4, [r3, #0]
 8016b70:	b124      	cbz	r4, 8016b7c <iprintf+0x14>
 8016b72:	69a3      	ldr	r3, [r4, #24]
 8016b74:	b913      	cbnz	r3, 8016b7c <iprintf+0x14>
 8016b76:	4620      	mov	r0, r4
 8016b78:	f7ff fe98 	bl	80168ac <__sinit>
 8016b7c:	ab05      	add	r3, sp, #20
 8016b7e:	9a04      	ldr	r2, [sp, #16]
 8016b80:	68a1      	ldr	r1, [r4, #8]
 8016b82:	9301      	str	r3, [sp, #4]
 8016b84:	4620      	mov	r0, r4
 8016b86:	f000 ff21 	bl	80179cc <_vfiprintf_r>
 8016b8a:	b002      	add	sp, #8
 8016b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b90:	b004      	add	sp, #16
 8016b92:	4770      	bx	lr
 8016b94:	200004b4 	.word	0x200004b4

08016b98 <_puts_r>:
 8016b98:	b570      	push	{r4, r5, r6, lr}
 8016b9a:	460e      	mov	r6, r1
 8016b9c:	4605      	mov	r5, r0
 8016b9e:	b118      	cbz	r0, 8016ba8 <_puts_r+0x10>
 8016ba0:	6983      	ldr	r3, [r0, #24]
 8016ba2:	b90b      	cbnz	r3, 8016ba8 <_puts_r+0x10>
 8016ba4:	f7ff fe82 	bl	80168ac <__sinit>
 8016ba8:	69ab      	ldr	r3, [r5, #24]
 8016baa:	68ac      	ldr	r4, [r5, #8]
 8016bac:	b913      	cbnz	r3, 8016bb4 <_puts_r+0x1c>
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f7ff fe7c 	bl	80168ac <__sinit>
 8016bb4:	4b2c      	ldr	r3, [pc, #176]	; (8016c68 <_puts_r+0xd0>)
 8016bb6:	429c      	cmp	r4, r3
 8016bb8:	d120      	bne.n	8016bfc <_puts_r+0x64>
 8016bba:	686c      	ldr	r4, [r5, #4]
 8016bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bbe:	07db      	lsls	r3, r3, #31
 8016bc0:	d405      	bmi.n	8016bce <_puts_r+0x36>
 8016bc2:	89a3      	ldrh	r3, [r4, #12]
 8016bc4:	0598      	lsls	r0, r3, #22
 8016bc6:	d402      	bmi.n	8016bce <_puts_r+0x36>
 8016bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bca:	f7ff ff32 	bl	8016a32 <__retarget_lock_acquire_recursive>
 8016bce:	89a3      	ldrh	r3, [r4, #12]
 8016bd0:	0719      	lsls	r1, r3, #28
 8016bd2:	d51d      	bpl.n	8016c10 <_puts_r+0x78>
 8016bd4:	6923      	ldr	r3, [r4, #16]
 8016bd6:	b1db      	cbz	r3, 8016c10 <_puts_r+0x78>
 8016bd8:	3e01      	subs	r6, #1
 8016bda:	68a3      	ldr	r3, [r4, #8]
 8016bdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016be0:	3b01      	subs	r3, #1
 8016be2:	60a3      	str	r3, [r4, #8]
 8016be4:	bb39      	cbnz	r1, 8016c36 <_puts_r+0x9e>
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	da38      	bge.n	8016c5c <_puts_r+0xc4>
 8016bea:	4622      	mov	r2, r4
 8016bec:	210a      	movs	r1, #10
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f000 fab2 	bl	8017158 <__swbuf_r>
 8016bf4:	3001      	adds	r0, #1
 8016bf6:	d011      	beq.n	8016c1c <_puts_r+0x84>
 8016bf8:	250a      	movs	r5, #10
 8016bfa:	e011      	b.n	8016c20 <_puts_r+0x88>
 8016bfc:	4b1b      	ldr	r3, [pc, #108]	; (8016c6c <_puts_r+0xd4>)
 8016bfe:	429c      	cmp	r4, r3
 8016c00:	d101      	bne.n	8016c06 <_puts_r+0x6e>
 8016c02:	68ac      	ldr	r4, [r5, #8]
 8016c04:	e7da      	b.n	8016bbc <_puts_r+0x24>
 8016c06:	4b1a      	ldr	r3, [pc, #104]	; (8016c70 <_puts_r+0xd8>)
 8016c08:	429c      	cmp	r4, r3
 8016c0a:	bf08      	it	eq
 8016c0c:	68ec      	ldreq	r4, [r5, #12]
 8016c0e:	e7d5      	b.n	8016bbc <_puts_r+0x24>
 8016c10:	4621      	mov	r1, r4
 8016c12:	4628      	mov	r0, r5
 8016c14:	f000 fb04 	bl	8017220 <__swsetup_r>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d0dd      	beq.n	8016bd8 <_puts_r+0x40>
 8016c1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c22:	07da      	lsls	r2, r3, #31
 8016c24:	d405      	bmi.n	8016c32 <_puts_r+0x9a>
 8016c26:	89a3      	ldrh	r3, [r4, #12]
 8016c28:	059b      	lsls	r3, r3, #22
 8016c2a:	d402      	bmi.n	8016c32 <_puts_r+0x9a>
 8016c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c2e:	f7ff ff01 	bl	8016a34 <__retarget_lock_release_recursive>
 8016c32:	4628      	mov	r0, r5
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	da04      	bge.n	8016c44 <_puts_r+0xac>
 8016c3a:	69a2      	ldr	r2, [r4, #24]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	dc06      	bgt.n	8016c4e <_puts_r+0xb6>
 8016c40:	290a      	cmp	r1, #10
 8016c42:	d004      	beq.n	8016c4e <_puts_r+0xb6>
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	1c5a      	adds	r2, r3, #1
 8016c48:	6022      	str	r2, [r4, #0]
 8016c4a:	7019      	strb	r1, [r3, #0]
 8016c4c:	e7c5      	b.n	8016bda <_puts_r+0x42>
 8016c4e:	4622      	mov	r2, r4
 8016c50:	4628      	mov	r0, r5
 8016c52:	f000 fa81 	bl	8017158 <__swbuf_r>
 8016c56:	3001      	adds	r0, #1
 8016c58:	d1bf      	bne.n	8016bda <_puts_r+0x42>
 8016c5a:	e7df      	b.n	8016c1c <_puts_r+0x84>
 8016c5c:	6823      	ldr	r3, [r4, #0]
 8016c5e:	250a      	movs	r5, #10
 8016c60:	1c5a      	adds	r2, r3, #1
 8016c62:	6022      	str	r2, [r4, #0]
 8016c64:	701d      	strb	r5, [r3, #0]
 8016c66:	e7db      	b.n	8016c20 <_puts_r+0x88>
 8016c68:	08022cac 	.word	0x08022cac
 8016c6c:	08022ccc 	.word	0x08022ccc
 8016c70:	08022c8c 	.word	0x08022c8c

08016c74 <puts>:
 8016c74:	4b02      	ldr	r3, [pc, #8]	; (8016c80 <puts+0xc>)
 8016c76:	4601      	mov	r1, r0
 8016c78:	6818      	ldr	r0, [r3, #0]
 8016c7a:	f7ff bf8d 	b.w	8016b98 <_puts_r>
 8016c7e:	bf00      	nop
 8016c80:	200004b4 	.word	0x200004b4

08016c84 <rand>:
 8016c84:	4b17      	ldr	r3, [pc, #92]	; (8016ce4 <rand+0x60>)
 8016c86:	b510      	push	{r4, lr}
 8016c88:	681c      	ldr	r4, [r3, #0]
 8016c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016c8c:	b9b3      	cbnz	r3, 8016cbc <rand+0x38>
 8016c8e:	2018      	movs	r0, #24
 8016c90:	f000 fcb2 	bl	80175f8 <malloc>
 8016c94:	63a0      	str	r0, [r4, #56]	; 0x38
 8016c96:	b928      	cbnz	r0, 8016ca4 <rand+0x20>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	4b13      	ldr	r3, [pc, #76]	; (8016ce8 <rand+0x64>)
 8016c9c:	4813      	ldr	r0, [pc, #76]	; (8016cec <rand+0x68>)
 8016c9e:	214e      	movs	r1, #78	; 0x4e
 8016ca0:	f000 fb2c 	bl	80172fc <__assert_func>
 8016ca4:	4a12      	ldr	r2, [pc, #72]	; (8016cf0 <rand+0x6c>)
 8016ca6:	4b13      	ldr	r3, [pc, #76]	; (8016cf4 <rand+0x70>)
 8016ca8:	e9c0 2300 	strd	r2, r3, [r0]
 8016cac:	4b12      	ldr	r3, [pc, #72]	; (8016cf8 <rand+0x74>)
 8016cae:	6083      	str	r3, [r0, #8]
 8016cb0:	230b      	movs	r3, #11
 8016cb2:	8183      	strh	r3, [r0, #12]
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016cbc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016cbe:	480f      	ldr	r0, [pc, #60]	; (8016cfc <rand+0x78>)
 8016cc0:	690a      	ldr	r2, [r1, #16]
 8016cc2:	694b      	ldr	r3, [r1, #20]
 8016cc4:	4c0e      	ldr	r4, [pc, #56]	; (8016d00 <rand+0x7c>)
 8016cc6:	4350      	muls	r0, r2
 8016cc8:	fb04 0003 	mla	r0, r4, r3, r0
 8016ccc:	fba2 3404 	umull	r3, r4, r2, r4
 8016cd0:	1c5a      	adds	r2, r3, #1
 8016cd2:	4404      	add	r4, r0
 8016cd4:	f144 0000 	adc.w	r0, r4, #0
 8016cd8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016cdc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016ce0:	bd10      	pop	{r4, pc}
 8016ce2:	bf00      	nop
 8016ce4:	200004b4 	.word	0x200004b4
 8016ce8:	08022cf0 	.word	0x08022cf0
 8016cec:	08022d07 	.word	0x08022d07
 8016cf0:	abcd330e 	.word	0xabcd330e
 8016cf4:	e66d1234 	.word	0xe66d1234
 8016cf8:	0005deec 	.word	0x0005deec
 8016cfc:	5851f42d 	.word	0x5851f42d
 8016d00:	4c957f2d 	.word	0x4c957f2d

08016d04 <cleanup_glue>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	460c      	mov	r4, r1
 8016d08:	6809      	ldr	r1, [r1, #0]
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	b109      	cbz	r1, 8016d12 <cleanup_glue+0xe>
 8016d0e:	f7ff fff9 	bl	8016d04 <cleanup_glue>
 8016d12:	4621      	mov	r1, r4
 8016d14:	4628      	mov	r0, r5
 8016d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d1a:	f000 bc81 	b.w	8017620 <_free_r>
	...

08016d20 <_reclaim_reent>:
 8016d20:	4b2c      	ldr	r3, [pc, #176]	; (8016dd4 <_reclaim_reent+0xb4>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	4283      	cmp	r3, r0
 8016d26:	b570      	push	{r4, r5, r6, lr}
 8016d28:	4604      	mov	r4, r0
 8016d2a:	d051      	beq.n	8016dd0 <_reclaim_reent+0xb0>
 8016d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016d2e:	b143      	cbz	r3, 8016d42 <_reclaim_reent+0x22>
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d14a      	bne.n	8016dcc <_reclaim_reent+0xac>
 8016d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d38:	6819      	ldr	r1, [r3, #0]
 8016d3a:	b111      	cbz	r1, 8016d42 <_reclaim_reent+0x22>
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f000 fc6f 	bl	8017620 <_free_r>
 8016d42:	6961      	ldr	r1, [r4, #20]
 8016d44:	b111      	cbz	r1, 8016d4c <_reclaim_reent+0x2c>
 8016d46:	4620      	mov	r0, r4
 8016d48:	f000 fc6a 	bl	8017620 <_free_r>
 8016d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d4e:	b111      	cbz	r1, 8016d56 <_reclaim_reent+0x36>
 8016d50:	4620      	mov	r0, r4
 8016d52:	f000 fc65 	bl	8017620 <_free_r>
 8016d56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d58:	b111      	cbz	r1, 8016d60 <_reclaim_reent+0x40>
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f000 fc60 	bl	8017620 <_free_r>
 8016d60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016d62:	b111      	cbz	r1, 8016d6a <_reclaim_reent+0x4a>
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 fc5b 	bl	8017620 <_free_r>
 8016d6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016d6c:	b111      	cbz	r1, 8016d74 <_reclaim_reent+0x54>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f000 fc56 	bl	8017620 <_free_r>
 8016d74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016d76:	b111      	cbz	r1, 8016d7e <_reclaim_reent+0x5e>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 fc51 	bl	8017620 <_free_r>
 8016d7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016d80:	b111      	cbz	r1, 8016d88 <_reclaim_reent+0x68>
 8016d82:	4620      	mov	r0, r4
 8016d84:	f000 fc4c 	bl	8017620 <_free_r>
 8016d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d8a:	b111      	cbz	r1, 8016d92 <_reclaim_reent+0x72>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f000 fc47 	bl	8017620 <_free_r>
 8016d92:	69a3      	ldr	r3, [r4, #24]
 8016d94:	b1e3      	cbz	r3, 8016dd0 <_reclaim_reent+0xb0>
 8016d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d98:	4620      	mov	r0, r4
 8016d9a:	4798      	blx	r3
 8016d9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016d9e:	b1b9      	cbz	r1, 8016dd0 <_reclaim_reent+0xb0>
 8016da0:	4620      	mov	r0, r4
 8016da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016da6:	f7ff bfad 	b.w	8016d04 <cleanup_glue>
 8016daa:	5949      	ldr	r1, [r1, r5]
 8016dac:	b941      	cbnz	r1, 8016dc0 <_reclaim_reent+0xa0>
 8016dae:	3504      	adds	r5, #4
 8016db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016db2:	2d80      	cmp	r5, #128	; 0x80
 8016db4:	68d9      	ldr	r1, [r3, #12]
 8016db6:	d1f8      	bne.n	8016daa <_reclaim_reent+0x8a>
 8016db8:	4620      	mov	r0, r4
 8016dba:	f000 fc31 	bl	8017620 <_free_r>
 8016dbe:	e7ba      	b.n	8016d36 <_reclaim_reent+0x16>
 8016dc0:	680e      	ldr	r6, [r1, #0]
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	f000 fc2c 	bl	8017620 <_free_r>
 8016dc8:	4631      	mov	r1, r6
 8016dca:	e7ef      	b.n	8016dac <_reclaim_reent+0x8c>
 8016dcc:	2500      	movs	r5, #0
 8016dce:	e7ef      	b.n	8016db0 <_reclaim_reent+0x90>
 8016dd0:	bd70      	pop	{r4, r5, r6, pc}
 8016dd2:	bf00      	nop
 8016dd4:	200004b4 	.word	0x200004b4

08016dd8 <_sbrk_r>:
 8016dd8:	b538      	push	{r3, r4, r5, lr}
 8016dda:	4d06      	ldr	r5, [pc, #24]	; (8016df4 <_sbrk_r+0x1c>)
 8016ddc:	2300      	movs	r3, #0
 8016dde:	4604      	mov	r4, r0
 8016de0:	4608      	mov	r0, r1
 8016de2:	602b      	str	r3, [r5, #0]
 8016de4:	f7eb fa1e 	bl	8002224 <_sbrk>
 8016de8:	1c43      	adds	r3, r0, #1
 8016dea:	d102      	bne.n	8016df2 <_sbrk_r+0x1a>
 8016dec:	682b      	ldr	r3, [r5, #0]
 8016dee:	b103      	cbz	r3, 8016df2 <_sbrk_r+0x1a>
 8016df0:	6023      	str	r3, [r4, #0]
 8016df2:	bd38      	pop	{r3, r4, r5, pc}
 8016df4:	20014ac0 	.word	0x20014ac0

08016df8 <sniprintf>:
 8016df8:	b40c      	push	{r2, r3}
 8016dfa:	b530      	push	{r4, r5, lr}
 8016dfc:	4b17      	ldr	r3, [pc, #92]	; (8016e5c <sniprintf+0x64>)
 8016dfe:	1e0c      	subs	r4, r1, #0
 8016e00:	681d      	ldr	r5, [r3, #0]
 8016e02:	b09d      	sub	sp, #116	; 0x74
 8016e04:	da08      	bge.n	8016e18 <sniprintf+0x20>
 8016e06:	238b      	movs	r3, #139	; 0x8b
 8016e08:	602b      	str	r3, [r5, #0]
 8016e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e0e:	b01d      	add	sp, #116	; 0x74
 8016e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e14:	b002      	add	sp, #8
 8016e16:	4770      	bx	lr
 8016e18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e20:	bf14      	ite	ne
 8016e22:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016e26:	4623      	moveq	r3, r4
 8016e28:	9304      	str	r3, [sp, #16]
 8016e2a:	9307      	str	r3, [sp, #28]
 8016e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e30:	9002      	str	r0, [sp, #8]
 8016e32:	9006      	str	r0, [sp, #24]
 8016e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e3a:	ab21      	add	r3, sp, #132	; 0x84
 8016e3c:	a902      	add	r1, sp, #8
 8016e3e:	4628      	mov	r0, r5
 8016e40:	9301      	str	r3, [sp, #4]
 8016e42:	f000 fc99 	bl	8017778 <_svfiprintf_r>
 8016e46:	1c43      	adds	r3, r0, #1
 8016e48:	bfbc      	itt	lt
 8016e4a:	238b      	movlt	r3, #139	; 0x8b
 8016e4c:	602b      	strlt	r3, [r5, #0]
 8016e4e:	2c00      	cmp	r4, #0
 8016e50:	d0dd      	beq.n	8016e0e <sniprintf+0x16>
 8016e52:	9b02      	ldr	r3, [sp, #8]
 8016e54:	2200      	movs	r2, #0
 8016e56:	701a      	strb	r2, [r3, #0]
 8016e58:	e7d9      	b.n	8016e0e <sniprintf+0x16>
 8016e5a:	bf00      	nop
 8016e5c:	200004b4 	.word	0x200004b4

08016e60 <siprintf>:
 8016e60:	b40e      	push	{r1, r2, r3}
 8016e62:	b500      	push	{lr}
 8016e64:	b09c      	sub	sp, #112	; 0x70
 8016e66:	ab1d      	add	r3, sp, #116	; 0x74
 8016e68:	9002      	str	r0, [sp, #8]
 8016e6a:	9006      	str	r0, [sp, #24]
 8016e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e70:	4809      	ldr	r0, [pc, #36]	; (8016e98 <siprintf+0x38>)
 8016e72:	9107      	str	r1, [sp, #28]
 8016e74:	9104      	str	r1, [sp, #16]
 8016e76:	4909      	ldr	r1, [pc, #36]	; (8016e9c <siprintf+0x3c>)
 8016e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e7c:	9105      	str	r1, [sp, #20]
 8016e7e:	6800      	ldr	r0, [r0, #0]
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	a902      	add	r1, sp, #8
 8016e84:	f000 fc78 	bl	8017778 <_svfiprintf_r>
 8016e88:	9b02      	ldr	r3, [sp, #8]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	701a      	strb	r2, [r3, #0]
 8016e8e:	b01c      	add	sp, #112	; 0x70
 8016e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e94:	b003      	add	sp, #12
 8016e96:	4770      	bx	lr
 8016e98:	200004b4 	.word	0x200004b4
 8016e9c:	ffff0208 	.word	0xffff0208

08016ea0 <__sread>:
 8016ea0:	b510      	push	{r4, lr}
 8016ea2:	460c      	mov	r4, r1
 8016ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ea8:	f001 f854 	bl	8017f54 <_read_r>
 8016eac:	2800      	cmp	r0, #0
 8016eae:	bfab      	itete	ge
 8016eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8016eb4:	181b      	addge	r3, r3, r0
 8016eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016eba:	bfac      	ite	ge
 8016ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ebe:	81a3      	strhlt	r3, [r4, #12]
 8016ec0:	bd10      	pop	{r4, pc}

08016ec2 <__swrite>:
 8016ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec6:	461f      	mov	r7, r3
 8016ec8:	898b      	ldrh	r3, [r1, #12]
 8016eca:	05db      	lsls	r3, r3, #23
 8016ecc:	4605      	mov	r5, r0
 8016ece:	460c      	mov	r4, r1
 8016ed0:	4616      	mov	r6, r2
 8016ed2:	d505      	bpl.n	8016ee0 <__swrite+0x1e>
 8016ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ed8:	2302      	movs	r3, #2
 8016eda:	2200      	movs	r2, #0
 8016edc:	f000 fb16 	bl	801750c <_lseek_r>
 8016ee0:	89a3      	ldrh	r3, [r4, #12]
 8016ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016eea:	81a3      	strh	r3, [r4, #12]
 8016eec:	4632      	mov	r2, r6
 8016eee:	463b      	mov	r3, r7
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef6:	f000 b981 	b.w	80171fc <_write_r>

08016efa <__sseek>:
 8016efa:	b510      	push	{r4, lr}
 8016efc:	460c      	mov	r4, r1
 8016efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f02:	f000 fb03 	bl	801750c <_lseek_r>
 8016f06:	1c43      	adds	r3, r0, #1
 8016f08:	89a3      	ldrh	r3, [r4, #12]
 8016f0a:	bf15      	itete	ne
 8016f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f16:	81a3      	strheq	r3, [r4, #12]
 8016f18:	bf18      	it	ne
 8016f1a:	81a3      	strhne	r3, [r4, #12]
 8016f1c:	bd10      	pop	{r4, pc}

08016f1e <__sclose>:
 8016f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f22:	f000 ba09 	b.w	8017338 <_close_r>

08016f26 <strcat>:
 8016f26:	b510      	push	{r4, lr}
 8016f28:	4602      	mov	r2, r0
 8016f2a:	7814      	ldrb	r4, [r2, #0]
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	3201      	adds	r2, #1
 8016f30:	2c00      	cmp	r4, #0
 8016f32:	d1fa      	bne.n	8016f2a <strcat+0x4>
 8016f34:	3b01      	subs	r3, #1
 8016f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f3e:	2a00      	cmp	r2, #0
 8016f40:	d1f9      	bne.n	8016f36 <strcat+0x10>
 8016f42:	bd10      	pop	{r4, pc}

08016f44 <strchr>:
 8016f44:	b2c9      	uxtb	r1, r1
 8016f46:	4603      	mov	r3, r0
 8016f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f4c:	b11a      	cbz	r2, 8016f56 <strchr+0x12>
 8016f4e:	428a      	cmp	r2, r1
 8016f50:	d1f9      	bne.n	8016f46 <strchr+0x2>
 8016f52:	4618      	mov	r0, r3
 8016f54:	4770      	bx	lr
 8016f56:	2900      	cmp	r1, #0
 8016f58:	bf18      	it	ne
 8016f5a:	2300      	movne	r3, #0
 8016f5c:	e7f9      	b.n	8016f52 <strchr+0xe>

08016f5e <strcpy>:
 8016f5e:	4603      	mov	r3, r0
 8016f60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f64:	f803 2b01 	strb.w	r2, [r3], #1
 8016f68:	2a00      	cmp	r2, #0
 8016f6a:	d1f9      	bne.n	8016f60 <strcpy+0x2>
 8016f6c:	4770      	bx	lr

08016f6e <strncmp>:
 8016f6e:	b510      	push	{r4, lr}
 8016f70:	b16a      	cbz	r2, 8016f8e <strncmp+0x20>
 8016f72:	3901      	subs	r1, #1
 8016f74:	1884      	adds	r4, r0, r2
 8016f76:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016f7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016f7e:	4293      	cmp	r3, r2
 8016f80:	d103      	bne.n	8016f8a <strncmp+0x1c>
 8016f82:	42a0      	cmp	r0, r4
 8016f84:	d001      	beq.n	8016f8a <strncmp+0x1c>
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d1f5      	bne.n	8016f76 <strncmp+0x8>
 8016f8a:	1a98      	subs	r0, r3, r2
 8016f8c:	bd10      	pop	{r4, pc}
 8016f8e:	4610      	mov	r0, r2
 8016f90:	e7fc      	b.n	8016f8c <strncmp+0x1e>

08016f92 <strncpy>:
 8016f92:	b510      	push	{r4, lr}
 8016f94:	3901      	subs	r1, #1
 8016f96:	4603      	mov	r3, r0
 8016f98:	b132      	cbz	r2, 8016fa8 <strncpy+0x16>
 8016f9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f9e:	f803 4b01 	strb.w	r4, [r3], #1
 8016fa2:	3a01      	subs	r2, #1
 8016fa4:	2c00      	cmp	r4, #0
 8016fa6:	d1f7      	bne.n	8016f98 <strncpy+0x6>
 8016fa8:	441a      	add	r2, r3
 8016faa:	2100      	movs	r1, #0
 8016fac:	4293      	cmp	r3, r2
 8016fae:	d100      	bne.n	8016fb2 <strncpy+0x20>
 8016fb0:	bd10      	pop	{r4, pc}
 8016fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8016fb6:	e7f9      	b.n	8016fac <strncpy+0x1a>

08016fb8 <strstr>:
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	780c      	ldrb	r4, [r1, #0]
 8016fbc:	b164      	cbz	r4, 8016fd8 <strstr+0x20>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	781a      	ldrb	r2, [r3, #0]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	1c5e      	adds	r6, r3, #1
 8016fc6:	b90a      	cbnz	r2, 8016fcc <strstr+0x14>
 8016fc8:	4610      	mov	r0, r2
 8016fca:	e005      	b.n	8016fd8 <strstr+0x20>
 8016fcc:	4294      	cmp	r4, r2
 8016fce:	d108      	bne.n	8016fe2 <strstr+0x2a>
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8016fd6:	b902      	cbnz	r2, 8016fda <strstr+0x22>
 8016fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fda:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8016fde:	4297      	cmp	r7, r2
 8016fe0:	d0f7      	beq.n	8016fd2 <strstr+0x1a>
 8016fe2:	4633      	mov	r3, r6
 8016fe4:	e7ec      	b.n	8016fc0 <strstr+0x8>

08016fe6 <__strtok_r>:
 8016fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fe8:	b908      	cbnz	r0, 8016fee <__strtok_r+0x8>
 8016fea:	6810      	ldr	r0, [r2, #0]
 8016fec:	b188      	cbz	r0, 8017012 <__strtok_r+0x2c>
 8016fee:	4604      	mov	r4, r0
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016ff6:	460f      	mov	r7, r1
 8016ff8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016ffc:	b91e      	cbnz	r6, 8017006 <__strtok_r+0x20>
 8016ffe:	b965      	cbnz	r5, 801701a <__strtok_r+0x34>
 8017000:	6015      	str	r5, [r2, #0]
 8017002:	4628      	mov	r0, r5
 8017004:	e005      	b.n	8017012 <__strtok_r+0x2c>
 8017006:	42b5      	cmp	r5, r6
 8017008:	d1f6      	bne.n	8016ff8 <__strtok_r+0x12>
 801700a:	2b00      	cmp	r3, #0
 801700c:	d1f0      	bne.n	8016ff0 <__strtok_r+0xa>
 801700e:	6014      	str	r4, [r2, #0]
 8017010:	7003      	strb	r3, [r0, #0]
 8017012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017014:	461c      	mov	r4, r3
 8017016:	e00c      	b.n	8017032 <__strtok_r+0x4c>
 8017018:	b915      	cbnz	r5, 8017020 <__strtok_r+0x3a>
 801701a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801701e:	460e      	mov	r6, r1
 8017020:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017024:	42ab      	cmp	r3, r5
 8017026:	d1f7      	bne.n	8017018 <__strtok_r+0x32>
 8017028:	2b00      	cmp	r3, #0
 801702a:	d0f3      	beq.n	8017014 <__strtok_r+0x2e>
 801702c:	2300      	movs	r3, #0
 801702e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017032:	6014      	str	r4, [r2, #0]
 8017034:	e7ed      	b.n	8017012 <__strtok_r+0x2c>

08017036 <strtok_r>:
 8017036:	2301      	movs	r3, #1
 8017038:	f7ff bfd5 	b.w	8016fe6 <__strtok_r>

0801703c <_strtol_l.isra.0>:
 801703c:	2b01      	cmp	r3, #1
 801703e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017042:	d001      	beq.n	8017048 <_strtol_l.isra.0+0xc>
 8017044:	2b24      	cmp	r3, #36	; 0x24
 8017046:	d906      	bls.n	8017056 <_strtol_l.isra.0+0x1a>
 8017048:	f000 f986 	bl	8017358 <__errno>
 801704c:	2316      	movs	r3, #22
 801704e:	6003      	str	r3, [r0, #0]
 8017050:	2000      	movs	r0, #0
 8017052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017056:	4f3a      	ldr	r7, [pc, #232]	; (8017140 <_strtol_l.isra.0+0x104>)
 8017058:	468e      	mov	lr, r1
 801705a:	4676      	mov	r6, lr
 801705c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017060:	5de5      	ldrb	r5, [r4, r7]
 8017062:	f015 0508 	ands.w	r5, r5, #8
 8017066:	d1f8      	bne.n	801705a <_strtol_l.isra.0+0x1e>
 8017068:	2c2d      	cmp	r4, #45	; 0x2d
 801706a:	d134      	bne.n	80170d6 <_strtol_l.isra.0+0x9a>
 801706c:	f89e 4000 	ldrb.w	r4, [lr]
 8017070:	f04f 0801 	mov.w	r8, #1
 8017074:	f106 0e02 	add.w	lr, r6, #2
 8017078:	2b00      	cmp	r3, #0
 801707a:	d05c      	beq.n	8017136 <_strtol_l.isra.0+0xfa>
 801707c:	2b10      	cmp	r3, #16
 801707e:	d10c      	bne.n	801709a <_strtol_l.isra.0+0x5e>
 8017080:	2c30      	cmp	r4, #48	; 0x30
 8017082:	d10a      	bne.n	801709a <_strtol_l.isra.0+0x5e>
 8017084:	f89e 4000 	ldrb.w	r4, [lr]
 8017088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801708c:	2c58      	cmp	r4, #88	; 0x58
 801708e:	d14d      	bne.n	801712c <_strtol_l.isra.0+0xf0>
 8017090:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017094:	2310      	movs	r3, #16
 8017096:	f10e 0e02 	add.w	lr, lr, #2
 801709a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801709e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80170a2:	2600      	movs	r6, #0
 80170a4:	fbbc f9f3 	udiv	r9, ip, r3
 80170a8:	4635      	mov	r5, r6
 80170aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80170ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80170b2:	2f09      	cmp	r7, #9
 80170b4:	d818      	bhi.n	80170e8 <_strtol_l.isra.0+0xac>
 80170b6:	463c      	mov	r4, r7
 80170b8:	42a3      	cmp	r3, r4
 80170ba:	dd24      	ble.n	8017106 <_strtol_l.isra.0+0xca>
 80170bc:	2e00      	cmp	r6, #0
 80170be:	db1f      	blt.n	8017100 <_strtol_l.isra.0+0xc4>
 80170c0:	45a9      	cmp	r9, r5
 80170c2:	d31d      	bcc.n	8017100 <_strtol_l.isra.0+0xc4>
 80170c4:	d101      	bne.n	80170ca <_strtol_l.isra.0+0x8e>
 80170c6:	45a2      	cmp	sl, r4
 80170c8:	db1a      	blt.n	8017100 <_strtol_l.isra.0+0xc4>
 80170ca:	fb05 4503 	mla	r5, r5, r3, r4
 80170ce:	2601      	movs	r6, #1
 80170d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80170d4:	e7eb      	b.n	80170ae <_strtol_l.isra.0+0x72>
 80170d6:	2c2b      	cmp	r4, #43	; 0x2b
 80170d8:	bf08      	it	eq
 80170da:	f89e 4000 	ldrbeq.w	r4, [lr]
 80170de:	46a8      	mov	r8, r5
 80170e0:	bf08      	it	eq
 80170e2:	f106 0e02 	addeq.w	lr, r6, #2
 80170e6:	e7c7      	b.n	8017078 <_strtol_l.isra.0+0x3c>
 80170e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80170ec:	2f19      	cmp	r7, #25
 80170ee:	d801      	bhi.n	80170f4 <_strtol_l.isra.0+0xb8>
 80170f0:	3c37      	subs	r4, #55	; 0x37
 80170f2:	e7e1      	b.n	80170b8 <_strtol_l.isra.0+0x7c>
 80170f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80170f8:	2f19      	cmp	r7, #25
 80170fa:	d804      	bhi.n	8017106 <_strtol_l.isra.0+0xca>
 80170fc:	3c57      	subs	r4, #87	; 0x57
 80170fe:	e7db      	b.n	80170b8 <_strtol_l.isra.0+0x7c>
 8017100:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017104:	e7e4      	b.n	80170d0 <_strtol_l.isra.0+0x94>
 8017106:	2e00      	cmp	r6, #0
 8017108:	da05      	bge.n	8017116 <_strtol_l.isra.0+0xda>
 801710a:	2322      	movs	r3, #34	; 0x22
 801710c:	6003      	str	r3, [r0, #0]
 801710e:	4665      	mov	r5, ip
 8017110:	b942      	cbnz	r2, 8017124 <_strtol_l.isra.0+0xe8>
 8017112:	4628      	mov	r0, r5
 8017114:	e79d      	b.n	8017052 <_strtol_l.isra.0+0x16>
 8017116:	f1b8 0f00 	cmp.w	r8, #0
 801711a:	d000      	beq.n	801711e <_strtol_l.isra.0+0xe2>
 801711c:	426d      	negs	r5, r5
 801711e:	2a00      	cmp	r2, #0
 8017120:	d0f7      	beq.n	8017112 <_strtol_l.isra.0+0xd6>
 8017122:	b10e      	cbz	r6, 8017128 <_strtol_l.isra.0+0xec>
 8017124:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8017128:	6011      	str	r1, [r2, #0]
 801712a:	e7f2      	b.n	8017112 <_strtol_l.isra.0+0xd6>
 801712c:	2430      	movs	r4, #48	; 0x30
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1b3      	bne.n	801709a <_strtol_l.isra.0+0x5e>
 8017132:	2308      	movs	r3, #8
 8017134:	e7b1      	b.n	801709a <_strtol_l.isra.0+0x5e>
 8017136:	2c30      	cmp	r4, #48	; 0x30
 8017138:	d0a4      	beq.n	8017084 <_strtol_l.isra.0+0x48>
 801713a:	230a      	movs	r3, #10
 801713c:	e7ad      	b.n	801709a <_strtol_l.isra.0+0x5e>
 801713e:	bf00      	nop
 8017140:	08022b8b 	.word	0x08022b8b

08017144 <strtol>:
 8017144:	4613      	mov	r3, r2
 8017146:	460a      	mov	r2, r1
 8017148:	4601      	mov	r1, r0
 801714a:	4802      	ldr	r0, [pc, #8]	; (8017154 <strtol+0x10>)
 801714c:	6800      	ldr	r0, [r0, #0]
 801714e:	f7ff bf75 	b.w	801703c <_strtol_l.isra.0>
 8017152:	bf00      	nop
 8017154:	200004b4 	.word	0x200004b4

08017158 <__swbuf_r>:
 8017158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801715a:	460e      	mov	r6, r1
 801715c:	4614      	mov	r4, r2
 801715e:	4605      	mov	r5, r0
 8017160:	b118      	cbz	r0, 801716a <__swbuf_r+0x12>
 8017162:	6983      	ldr	r3, [r0, #24]
 8017164:	b90b      	cbnz	r3, 801716a <__swbuf_r+0x12>
 8017166:	f7ff fba1 	bl	80168ac <__sinit>
 801716a:	4b21      	ldr	r3, [pc, #132]	; (80171f0 <__swbuf_r+0x98>)
 801716c:	429c      	cmp	r4, r3
 801716e:	d12b      	bne.n	80171c8 <__swbuf_r+0x70>
 8017170:	686c      	ldr	r4, [r5, #4]
 8017172:	69a3      	ldr	r3, [r4, #24]
 8017174:	60a3      	str	r3, [r4, #8]
 8017176:	89a3      	ldrh	r3, [r4, #12]
 8017178:	071a      	lsls	r2, r3, #28
 801717a:	d52f      	bpl.n	80171dc <__swbuf_r+0x84>
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	b36b      	cbz	r3, 80171dc <__swbuf_r+0x84>
 8017180:	6923      	ldr	r3, [r4, #16]
 8017182:	6820      	ldr	r0, [r4, #0]
 8017184:	1ac0      	subs	r0, r0, r3
 8017186:	6963      	ldr	r3, [r4, #20]
 8017188:	b2f6      	uxtb	r6, r6
 801718a:	4283      	cmp	r3, r0
 801718c:	4637      	mov	r7, r6
 801718e:	dc04      	bgt.n	801719a <__swbuf_r+0x42>
 8017190:	4621      	mov	r1, r4
 8017192:	4628      	mov	r0, r5
 8017194:	f000 f96c 	bl	8017470 <_fflush_r>
 8017198:	bb30      	cbnz	r0, 80171e8 <__swbuf_r+0x90>
 801719a:	68a3      	ldr	r3, [r4, #8]
 801719c:	3b01      	subs	r3, #1
 801719e:	60a3      	str	r3, [r4, #8]
 80171a0:	6823      	ldr	r3, [r4, #0]
 80171a2:	1c5a      	adds	r2, r3, #1
 80171a4:	6022      	str	r2, [r4, #0]
 80171a6:	701e      	strb	r6, [r3, #0]
 80171a8:	6963      	ldr	r3, [r4, #20]
 80171aa:	3001      	adds	r0, #1
 80171ac:	4283      	cmp	r3, r0
 80171ae:	d004      	beq.n	80171ba <__swbuf_r+0x62>
 80171b0:	89a3      	ldrh	r3, [r4, #12]
 80171b2:	07db      	lsls	r3, r3, #31
 80171b4:	d506      	bpl.n	80171c4 <__swbuf_r+0x6c>
 80171b6:	2e0a      	cmp	r6, #10
 80171b8:	d104      	bne.n	80171c4 <__swbuf_r+0x6c>
 80171ba:	4621      	mov	r1, r4
 80171bc:	4628      	mov	r0, r5
 80171be:	f000 f957 	bl	8017470 <_fflush_r>
 80171c2:	b988      	cbnz	r0, 80171e8 <__swbuf_r+0x90>
 80171c4:	4638      	mov	r0, r7
 80171c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171c8:	4b0a      	ldr	r3, [pc, #40]	; (80171f4 <__swbuf_r+0x9c>)
 80171ca:	429c      	cmp	r4, r3
 80171cc:	d101      	bne.n	80171d2 <__swbuf_r+0x7a>
 80171ce:	68ac      	ldr	r4, [r5, #8]
 80171d0:	e7cf      	b.n	8017172 <__swbuf_r+0x1a>
 80171d2:	4b09      	ldr	r3, [pc, #36]	; (80171f8 <__swbuf_r+0xa0>)
 80171d4:	429c      	cmp	r4, r3
 80171d6:	bf08      	it	eq
 80171d8:	68ec      	ldreq	r4, [r5, #12]
 80171da:	e7ca      	b.n	8017172 <__swbuf_r+0x1a>
 80171dc:	4621      	mov	r1, r4
 80171de:	4628      	mov	r0, r5
 80171e0:	f000 f81e 	bl	8017220 <__swsetup_r>
 80171e4:	2800      	cmp	r0, #0
 80171e6:	d0cb      	beq.n	8017180 <__swbuf_r+0x28>
 80171e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80171ec:	e7ea      	b.n	80171c4 <__swbuf_r+0x6c>
 80171ee:	bf00      	nop
 80171f0:	08022cac 	.word	0x08022cac
 80171f4:	08022ccc 	.word	0x08022ccc
 80171f8:	08022c8c 	.word	0x08022c8c

080171fc <_write_r>:
 80171fc:	b538      	push	{r3, r4, r5, lr}
 80171fe:	4d07      	ldr	r5, [pc, #28]	; (801721c <_write_r+0x20>)
 8017200:	4604      	mov	r4, r0
 8017202:	4608      	mov	r0, r1
 8017204:	4611      	mov	r1, r2
 8017206:	2200      	movs	r2, #0
 8017208:	602a      	str	r2, [r5, #0]
 801720a:	461a      	mov	r2, r3
 801720c:	f7ea fcbc 	bl	8001b88 <_write>
 8017210:	1c43      	adds	r3, r0, #1
 8017212:	d102      	bne.n	801721a <_write_r+0x1e>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	b103      	cbz	r3, 801721a <_write_r+0x1e>
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	bd38      	pop	{r3, r4, r5, pc}
 801721c:	20014ac0 	.word	0x20014ac0

08017220 <__swsetup_r>:
 8017220:	4b32      	ldr	r3, [pc, #200]	; (80172ec <__swsetup_r+0xcc>)
 8017222:	b570      	push	{r4, r5, r6, lr}
 8017224:	681d      	ldr	r5, [r3, #0]
 8017226:	4606      	mov	r6, r0
 8017228:	460c      	mov	r4, r1
 801722a:	b125      	cbz	r5, 8017236 <__swsetup_r+0x16>
 801722c:	69ab      	ldr	r3, [r5, #24]
 801722e:	b913      	cbnz	r3, 8017236 <__swsetup_r+0x16>
 8017230:	4628      	mov	r0, r5
 8017232:	f7ff fb3b 	bl	80168ac <__sinit>
 8017236:	4b2e      	ldr	r3, [pc, #184]	; (80172f0 <__swsetup_r+0xd0>)
 8017238:	429c      	cmp	r4, r3
 801723a:	d10f      	bne.n	801725c <__swsetup_r+0x3c>
 801723c:	686c      	ldr	r4, [r5, #4]
 801723e:	89a3      	ldrh	r3, [r4, #12]
 8017240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017244:	0719      	lsls	r1, r3, #28
 8017246:	d42c      	bmi.n	80172a2 <__swsetup_r+0x82>
 8017248:	06dd      	lsls	r5, r3, #27
 801724a:	d411      	bmi.n	8017270 <__swsetup_r+0x50>
 801724c:	2309      	movs	r3, #9
 801724e:	6033      	str	r3, [r6, #0]
 8017250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017254:	81a3      	strh	r3, [r4, #12]
 8017256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801725a:	e03e      	b.n	80172da <__swsetup_r+0xba>
 801725c:	4b25      	ldr	r3, [pc, #148]	; (80172f4 <__swsetup_r+0xd4>)
 801725e:	429c      	cmp	r4, r3
 8017260:	d101      	bne.n	8017266 <__swsetup_r+0x46>
 8017262:	68ac      	ldr	r4, [r5, #8]
 8017264:	e7eb      	b.n	801723e <__swsetup_r+0x1e>
 8017266:	4b24      	ldr	r3, [pc, #144]	; (80172f8 <__swsetup_r+0xd8>)
 8017268:	429c      	cmp	r4, r3
 801726a:	bf08      	it	eq
 801726c:	68ec      	ldreq	r4, [r5, #12]
 801726e:	e7e6      	b.n	801723e <__swsetup_r+0x1e>
 8017270:	0758      	lsls	r0, r3, #29
 8017272:	d512      	bpl.n	801729a <__swsetup_r+0x7a>
 8017274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017276:	b141      	cbz	r1, 801728a <__swsetup_r+0x6a>
 8017278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801727c:	4299      	cmp	r1, r3
 801727e:	d002      	beq.n	8017286 <__swsetup_r+0x66>
 8017280:	4630      	mov	r0, r6
 8017282:	f000 f9cd 	bl	8017620 <_free_r>
 8017286:	2300      	movs	r3, #0
 8017288:	6363      	str	r3, [r4, #52]	; 0x34
 801728a:	89a3      	ldrh	r3, [r4, #12]
 801728c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017290:	81a3      	strh	r3, [r4, #12]
 8017292:	2300      	movs	r3, #0
 8017294:	6063      	str	r3, [r4, #4]
 8017296:	6923      	ldr	r3, [r4, #16]
 8017298:	6023      	str	r3, [r4, #0]
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	f043 0308 	orr.w	r3, r3, #8
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	6923      	ldr	r3, [r4, #16]
 80172a4:	b94b      	cbnz	r3, 80172ba <__swsetup_r+0x9a>
 80172a6:	89a3      	ldrh	r3, [r4, #12]
 80172a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172b0:	d003      	beq.n	80172ba <__swsetup_r+0x9a>
 80172b2:	4621      	mov	r1, r4
 80172b4:	4630      	mov	r0, r6
 80172b6:	f000 f95f 	bl	8017578 <__smakebuf_r>
 80172ba:	89a0      	ldrh	r0, [r4, #12]
 80172bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80172c0:	f010 0301 	ands.w	r3, r0, #1
 80172c4:	d00a      	beq.n	80172dc <__swsetup_r+0xbc>
 80172c6:	2300      	movs	r3, #0
 80172c8:	60a3      	str	r3, [r4, #8]
 80172ca:	6963      	ldr	r3, [r4, #20]
 80172cc:	425b      	negs	r3, r3
 80172ce:	61a3      	str	r3, [r4, #24]
 80172d0:	6923      	ldr	r3, [r4, #16]
 80172d2:	b943      	cbnz	r3, 80172e6 <__swsetup_r+0xc6>
 80172d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80172d8:	d1ba      	bne.n	8017250 <__swsetup_r+0x30>
 80172da:	bd70      	pop	{r4, r5, r6, pc}
 80172dc:	0781      	lsls	r1, r0, #30
 80172de:	bf58      	it	pl
 80172e0:	6963      	ldrpl	r3, [r4, #20]
 80172e2:	60a3      	str	r3, [r4, #8]
 80172e4:	e7f4      	b.n	80172d0 <__swsetup_r+0xb0>
 80172e6:	2000      	movs	r0, #0
 80172e8:	e7f7      	b.n	80172da <__swsetup_r+0xba>
 80172ea:	bf00      	nop
 80172ec:	200004b4 	.word	0x200004b4
 80172f0:	08022cac 	.word	0x08022cac
 80172f4:	08022ccc 	.word	0x08022ccc
 80172f8:	08022c8c 	.word	0x08022c8c

080172fc <__assert_func>:
 80172fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172fe:	4614      	mov	r4, r2
 8017300:	461a      	mov	r2, r3
 8017302:	4b09      	ldr	r3, [pc, #36]	; (8017328 <__assert_func+0x2c>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	4605      	mov	r5, r0
 8017308:	68d8      	ldr	r0, [r3, #12]
 801730a:	b14c      	cbz	r4, 8017320 <__assert_func+0x24>
 801730c:	4b07      	ldr	r3, [pc, #28]	; (801732c <__assert_func+0x30>)
 801730e:	9100      	str	r1, [sp, #0]
 8017310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017314:	4906      	ldr	r1, [pc, #24]	; (8017330 <__assert_func+0x34>)
 8017316:	462b      	mov	r3, r5
 8017318:	f000 f8e6 	bl	80174e8 <fiprintf>
 801731c:	f000 fe2c 	bl	8017f78 <abort>
 8017320:	4b04      	ldr	r3, [pc, #16]	; (8017334 <__assert_func+0x38>)
 8017322:	461c      	mov	r4, r3
 8017324:	e7f3      	b.n	801730e <__assert_func+0x12>
 8017326:	bf00      	nop
 8017328:	200004b4 	.word	0x200004b4
 801732c:	08022d66 	.word	0x08022d66
 8017330:	08022d73 	.word	0x08022d73
 8017334:	08022da1 	.word	0x08022da1

08017338 <_close_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	4d06      	ldr	r5, [pc, #24]	; (8017354 <_close_r+0x1c>)
 801733c:	2300      	movs	r3, #0
 801733e:	4604      	mov	r4, r0
 8017340:	4608      	mov	r0, r1
 8017342:	602b      	str	r3, [r5, #0]
 8017344:	f7ea ff39 	bl	80021ba <_close>
 8017348:	1c43      	adds	r3, r0, #1
 801734a:	d102      	bne.n	8017352 <_close_r+0x1a>
 801734c:	682b      	ldr	r3, [r5, #0]
 801734e:	b103      	cbz	r3, 8017352 <_close_r+0x1a>
 8017350:	6023      	str	r3, [r4, #0]
 8017352:	bd38      	pop	{r3, r4, r5, pc}
 8017354:	20014ac0 	.word	0x20014ac0

08017358 <__errno>:
 8017358:	4b01      	ldr	r3, [pc, #4]	; (8017360 <__errno+0x8>)
 801735a:	6818      	ldr	r0, [r3, #0]
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	200004b4 	.word	0x200004b4

08017364 <__sflush_r>:
 8017364:	898a      	ldrh	r2, [r1, #12]
 8017366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801736a:	4605      	mov	r5, r0
 801736c:	0710      	lsls	r0, r2, #28
 801736e:	460c      	mov	r4, r1
 8017370:	d458      	bmi.n	8017424 <__sflush_r+0xc0>
 8017372:	684b      	ldr	r3, [r1, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	dc05      	bgt.n	8017384 <__sflush_r+0x20>
 8017378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801737a:	2b00      	cmp	r3, #0
 801737c:	dc02      	bgt.n	8017384 <__sflush_r+0x20>
 801737e:	2000      	movs	r0, #0
 8017380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017386:	2e00      	cmp	r6, #0
 8017388:	d0f9      	beq.n	801737e <__sflush_r+0x1a>
 801738a:	2300      	movs	r3, #0
 801738c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017390:	682f      	ldr	r7, [r5, #0]
 8017392:	602b      	str	r3, [r5, #0]
 8017394:	d032      	beq.n	80173fc <__sflush_r+0x98>
 8017396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017398:	89a3      	ldrh	r3, [r4, #12]
 801739a:	075a      	lsls	r2, r3, #29
 801739c:	d505      	bpl.n	80173aa <__sflush_r+0x46>
 801739e:	6863      	ldr	r3, [r4, #4]
 80173a0:	1ac0      	subs	r0, r0, r3
 80173a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173a4:	b10b      	cbz	r3, 80173aa <__sflush_r+0x46>
 80173a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173a8:	1ac0      	subs	r0, r0, r3
 80173aa:	2300      	movs	r3, #0
 80173ac:	4602      	mov	r2, r0
 80173ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173b0:	6a21      	ldr	r1, [r4, #32]
 80173b2:	4628      	mov	r0, r5
 80173b4:	47b0      	blx	r6
 80173b6:	1c43      	adds	r3, r0, #1
 80173b8:	89a3      	ldrh	r3, [r4, #12]
 80173ba:	d106      	bne.n	80173ca <__sflush_r+0x66>
 80173bc:	6829      	ldr	r1, [r5, #0]
 80173be:	291d      	cmp	r1, #29
 80173c0:	d82c      	bhi.n	801741c <__sflush_r+0xb8>
 80173c2:	4a2a      	ldr	r2, [pc, #168]	; (801746c <__sflush_r+0x108>)
 80173c4:	40ca      	lsrs	r2, r1
 80173c6:	07d6      	lsls	r6, r2, #31
 80173c8:	d528      	bpl.n	801741c <__sflush_r+0xb8>
 80173ca:	2200      	movs	r2, #0
 80173cc:	6062      	str	r2, [r4, #4]
 80173ce:	04d9      	lsls	r1, r3, #19
 80173d0:	6922      	ldr	r2, [r4, #16]
 80173d2:	6022      	str	r2, [r4, #0]
 80173d4:	d504      	bpl.n	80173e0 <__sflush_r+0x7c>
 80173d6:	1c42      	adds	r2, r0, #1
 80173d8:	d101      	bne.n	80173de <__sflush_r+0x7a>
 80173da:	682b      	ldr	r3, [r5, #0]
 80173dc:	b903      	cbnz	r3, 80173e0 <__sflush_r+0x7c>
 80173de:	6560      	str	r0, [r4, #84]	; 0x54
 80173e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173e2:	602f      	str	r7, [r5, #0]
 80173e4:	2900      	cmp	r1, #0
 80173e6:	d0ca      	beq.n	801737e <__sflush_r+0x1a>
 80173e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173ec:	4299      	cmp	r1, r3
 80173ee:	d002      	beq.n	80173f6 <__sflush_r+0x92>
 80173f0:	4628      	mov	r0, r5
 80173f2:	f000 f915 	bl	8017620 <_free_r>
 80173f6:	2000      	movs	r0, #0
 80173f8:	6360      	str	r0, [r4, #52]	; 0x34
 80173fa:	e7c1      	b.n	8017380 <__sflush_r+0x1c>
 80173fc:	6a21      	ldr	r1, [r4, #32]
 80173fe:	2301      	movs	r3, #1
 8017400:	4628      	mov	r0, r5
 8017402:	47b0      	blx	r6
 8017404:	1c41      	adds	r1, r0, #1
 8017406:	d1c7      	bne.n	8017398 <__sflush_r+0x34>
 8017408:	682b      	ldr	r3, [r5, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d0c4      	beq.n	8017398 <__sflush_r+0x34>
 801740e:	2b1d      	cmp	r3, #29
 8017410:	d001      	beq.n	8017416 <__sflush_r+0xb2>
 8017412:	2b16      	cmp	r3, #22
 8017414:	d101      	bne.n	801741a <__sflush_r+0xb6>
 8017416:	602f      	str	r7, [r5, #0]
 8017418:	e7b1      	b.n	801737e <__sflush_r+0x1a>
 801741a:	89a3      	ldrh	r3, [r4, #12]
 801741c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017420:	81a3      	strh	r3, [r4, #12]
 8017422:	e7ad      	b.n	8017380 <__sflush_r+0x1c>
 8017424:	690f      	ldr	r7, [r1, #16]
 8017426:	2f00      	cmp	r7, #0
 8017428:	d0a9      	beq.n	801737e <__sflush_r+0x1a>
 801742a:	0793      	lsls	r3, r2, #30
 801742c:	680e      	ldr	r6, [r1, #0]
 801742e:	bf08      	it	eq
 8017430:	694b      	ldreq	r3, [r1, #20]
 8017432:	600f      	str	r7, [r1, #0]
 8017434:	bf18      	it	ne
 8017436:	2300      	movne	r3, #0
 8017438:	eba6 0807 	sub.w	r8, r6, r7
 801743c:	608b      	str	r3, [r1, #8]
 801743e:	f1b8 0f00 	cmp.w	r8, #0
 8017442:	dd9c      	ble.n	801737e <__sflush_r+0x1a>
 8017444:	6a21      	ldr	r1, [r4, #32]
 8017446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017448:	4643      	mov	r3, r8
 801744a:	463a      	mov	r2, r7
 801744c:	4628      	mov	r0, r5
 801744e:	47b0      	blx	r6
 8017450:	2800      	cmp	r0, #0
 8017452:	dc06      	bgt.n	8017462 <__sflush_r+0xfe>
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801745a:	81a3      	strh	r3, [r4, #12]
 801745c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017460:	e78e      	b.n	8017380 <__sflush_r+0x1c>
 8017462:	4407      	add	r7, r0
 8017464:	eba8 0800 	sub.w	r8, r8, r0
 8017468:	e7e9      	b.n	801743e <__sflush_r+0xda>
 801746a:	bf00      	nop
 801746c:	20400001 	.word	0x20400001

08017470 <_fflush_r>:
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	690b      	ldr	r3, [r1, #16]
 8017474:	4605      	mov	r5, r0
 8017476:	460c      	mov	r4, r1
 8017478:	b913      	cbnz	r3, 8017480 <_fflush_r+0x10>
 801747a:	2500      	movs	r5, #0
 801747c:	4628      	mov	r0, r5
 801747e:	bd38      	pop	{r3, r4, r5, pc}
 8017480:	b118      	cbz	r0, 801748a <_fflush_r+0x1a>
 8017482:	6983      	ldr	r3, [r0, #24]
 8017484:	b90b      	cbnz	r3, 801748a <_fflush_r+0x1a>
 8017486:	f7ff fa11 	bl	80168ac <__sinit>
 801748a:	4b14      	ldr	r3, [pc, #80]	; (80174dc <_fflush_r+0x6c>)
 801748c:	429c      	cmp	r4, r3
 801748e:	d11b      	bne.n	80174c8 <_fflush_r+0x58>
 8017490:	686c      	ldr	r4, [r5, #4]
 8017492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d0ef      	beq.n	801747a <_fflush_r+0xa>
 801749a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801749c:	07d0      	lsls	r0, r2, #31
 801749e:	d404      	bmi.n	80174aa <_fflush_r+0x3a>
 80174a0:	0599      	lsls	r1, r3, #22
 80174a2:	d402      	bmi.n	80174aa <_fflush_r+0x3a>
 80174a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174a6:	f7ff fac4 	bl	8016a32 <__retarget_lock_acquire_recursive>
 80174aa:	4628      	mov	r0, r5
 80174ac:	4621      	mov	r1, r4
 80174ae:	f7ff ff59 	bl	8017364 <__sflush_r>
 80174b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174b4:	07da      	lsls	r2, r3, #31
 80174b6:	4605      	mov	r5, r0
 80174b8:	d4e0      	bmi.n	801747c <_fflush_r+0xc>
 80174ba:	89a3      	ldrh	r3, [r4, #12]
 80174bc:	059b      	lsls	r3, r3, #22
 80174be:	d4dd      	bmi.n	801747c <_fflush_r+0xc>
 80174c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174c2:	f7ff fab7 	bl	8016a34 <__retarget_lock_release_recursive>
 80174c6:	e7d9      	b.n	801747c <_fflush_r+0xc>
 80174c8:	4b05      	ldr	r3, [pc, #20]	; (80174e0 <_fflush_r+0x70>)
 80174ca:	429c      	cmp	r4, r3
 80174cc:	d101      	bne.n	80174d2 <_fflush_r+0x62>
 80174ce:	68ac      	ldr	r4, [r5, #8]
 80174d0:	e7df      	b.n	8017492 <_fflush_r+0x22>
 80174d2:	4b04      	ldr	r3, [pc, #16]	; (80174e4 <_fflush_r+0x74>)
 80174d4:	429c      	cmp	r4, r3
 80174d6:	bf08      	it	eq
 80174d8:	68ec      	ldreq	r4, [r5, #12]
 80174da:	e7da      	b.n	8017492 <_fflush_r+0x22>
 80174dc:	08022cac 	.word	0x08022cac
 80174e0:	08022ccc 	.word	0x08022ccc
 80174e4:	08022c8c 	.word	0x08022c8c

080174e8 <fiprintf>:
 80174e8:	b40e      	push	{r1, r2, r3}
 80174ea:	b503      	push	{r0, r1, lr}
 80174ec:	4601      	mov	r1, r0
 80174ee:	ab03      	add	r3, sp, #12
 80174f0:	4805      	ldr	r0, [pc, #20]	; (8017508 <fiprintf+0x20>)
 80174f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80174f6:	6800      	ldr	r0, [r0, #0]
 80174f8:	9301      	str	r3, [sp, #4]
 80174fa:	f000 fa67 	bl	80179cc <_vfiprintf_r>
 80174fe:	b002      	add	sp, #8
 8017500:	f85d eb04 	ldr.w	lr, [sp], #4
 8017504:	b003      	add	sp, #12
 8017506:	4770      	bx	lr
 8017508:	200004b4 	.word	0x200004b4

0801750c <_lseek_r>:
 801750c:	b538      	push	{r3, r4, r5, lr}
 801750e:	4d07      	ldr	r5, [pc, #28]	; (801752c <_lseek_r+0x20>)
 8017510:	4604      	mov	r4, r0
 8017512:	4608      	mov	r0, r1
 8017514:	4611      	mov	r1, r2
 8017516:	2200      	movs	r2, #0
 8017518:	602a      	str	r2, [r5, #0]
 801751a:	461a      	mov	r2, r3
 801751c:	f7ea fe74 	bl	8002208 <_lseek>
 8017520:	1c43      	adds	r3, r0, #1
 8017522:	d102      	bne.n	801752a <_lseek_r+0x1e>
 8017524:	682b      	ldr	r3, [r5, #0]
 8017526:	b103      	cbz	r3, 801752a <_lseek_r+0x1e>
 8017528:	6023      	str	r3, [r4, #0]
 801752a:	bd38      	pop	{r3, r4, r5, pc}
 801752c:	20014ac0 	.word	0x20014ac0

08017530 <__swhatbuf_r>:
 8017530:	b570      	push	{r4, r5, r6, lr}
 8017532:	460e      	mov	r6, r1
 8017534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017538:	2900      	cmp	r1, #0
 801753a:	b096      	sub	sp, #88	; 0x58
 801753c:	4614      	mov	r4, r2
 801753e:	461d      	mov	r5, r3
 8017540:	da07      	bge.n	8017552 <__swhatbuf_r+0x22>
 8017542:	2300      	movs	r3, #0
 8017544:	602b      	str	r3, [r5, #0]
 8017546:	89b3      	ldrh	r3, [r6, #12]
 8017548:	061a      	lsls	r2, r3, #24
 801754a:	d410      	bmi.n	801756e <__swhatbuf_r+0x3e>
 801754c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017550:	e00e      	b.n	8017570 <__swhatbuf_r+0x40>
 8017552:	466a      	mov	r2, sp
 8017554:	f000 fd18 	bl	8017f88 <_fstat_r>
 8017558:	2800      	cmp	r0, #0
 801755a:	dbf2      	blt.n	8017542 <__swhatbuf_r+0x12>
 801755c:	9a01      	ldr	r2, [sp, #4]
 801755e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017562:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017566:	425a      	negs	r2, r3
 8017568:	415a      	adcs	r2, r3
 801756a:	602a      	str	r2, [r5, #0]
 801756c:	e7ee      	b.n	801754c <__swhatbuf_r+0x1c>
 801756e:	2340      	movs	r3, #64	; 0x40
 8017570:	2000      	movs	r0, #0
 8017572:	6023      	str	r3, [r4, #0]
 8017574:	b016      	add	sp, #88	; 0x58
 8017576:	bd70      	pop	{r4, r5, r6, pc}

08017578 <__smakebuf_r>:
 8017578:	898b      	ldrh	r3, [r1, #12]
 801757a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801757c:	079d      	lsls	r5, r3, #30
 801757e:	4606      	mov	r6, r0
 8017580:	460c      	mov	r4, r1
 8017582:	d507      	bpl.n	8017594 <__smakebuf_r+0x1c>
 8017584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017588:	6023      	str	r3, [r4, #0]
 801758a:	6123      	str	r3, [r4, #16]
 801758c:	2301      	movs	r3, #1
 801758e:	6163      	str	r3, [r4, #20]
 8017590:	b002      	add	sp, #8
 8017592:	bd70      	pop	{r4, r5, r6, pc}
 8017594:	ab01      	add	r3, sp, #4
 8017596:	466a      	mov	r2, sp
 8017598:	f7ff ffca 	bl	8017530 <__swhatbuf_r>
 801759c:	9900      	ldr	r1, [sp, #0]
 801759e:	4605      	mov	r5, r0
 80175a0:	4630      	mov	r0, r6
 80175a2:	f7ff fa87 	bl	8016ab4 <_malloc_r>
 80175a6:	b948      	cbnz	r0, 80175bc <__smakebuf_r+0x44>
 80175a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ac:	059a      	lsls	r2, r3, #22
 80175ae:	d4ef      	bmi.n	8017590 <__smakebuf_r+0x18>
 80175b0:	f023 0303 	bic.w	r3, r3, #3
 80175b4:	f043 0302 	orr.w	r3, r3, #2
 80175b8:	81a3      	strh	r3, [r4, #12]
 80175ba:	e7e3      	b.n	8017584 <__smakebuf_r+0xc>
 80175bc:	4b0d      	ldr	r3, [pc, #52]	; (80175f4 <__smakebuf_r+0x7c>)
 80175be:	62b3      	str	r3, [r6, #40]	; 0x28
 80175c0:	89a3      	ldrh	r3, [r4, #12]
 80175c2:	6020      	str	r0, [r4, #0]
 80175c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175c8:	81a3      	strh	r3, [r4, #12]
 80175ca:	9b00      	ldr	r3, [sp, #0]
 80175cc:	6163      	str	r3, [r4, #20]
 80175ce:	9b01      	ldr	r3, [sp, #4]
 80175d0:	6120      	str	r0, [r4, #16]
 80175d2:	b15b      	cbz	r3, 80175ec <__smakebuf_r+0x74>
 80175d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175d8:	4630      	mov	r0, r6
 80175da:	f000 fce7 	bl	8017fac <_isatty_r>
 80175de:	b128      	cbz	r0, 80175ec <__smakebuf_r+0x74>
 80175e0:	89a3      	ldrh	r3, [r4, #12]
 80175e2:	f023 0303 	bic.w	r3, r3, #3
 80175e6:	f043 0301 	orr.w	r3, r3, #1
 80175ea:	81a3      	strh	r3, [r4, #12]
 80175ec:	89a0      	ldrh	r0, [r4, #12]
 80175ee:	4305      	orrs	r5, r0
 80175f0:	81a5      	strh	r5, [r4, #12]
 80175f2:	e7cd      	b.n	8017590 <__smakebuf_r+0x18>
 80175f4:	08016845 	.word	0x08016845

080175f8 <malloc>:
 80175f8:	4b02      	ldr	r3, [pc, #8]	; (8017604 <malloc+0xc>)
 80175fa:	4601      	mov	r1, r0
 80175fc:	6818      	ldr	r0, [r3, #0]
 80175fe:	f7ff ba59 	b.w	8016ab4 <_malloc_r>
 8017602:	bf00      	nop
 8017604:	200004b4 	.word	0x200004b4

08017608 <__malloc_lock>:
 8017608:	4801      	ldr	r0, [pc, #4]	; (8017610 <__malloc_lock+0x8>)
 801760a:	f7ff ba12 	b.w	8016a32 <__retarget_lock_acquire_recursive>
 801760e:	bf00      	nop
 8017610:	20014acc 	.word	0x20014acc

08017614 <__malloc_unlock>:
 8017614:	4801      	ldr	r0, [pc, #4]	; (801761c <__malloc_unlock+0x8>)
 8017616:	f7ff ba0d 	b.w	8016a34 <__retarget_lock_release_recursive>
 801761a:	bf00      	nop
 801761c:	20014acc 	.word	0x20014acc

08017620 <_free_r>:
 8017620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017622:	2900      	cmp	r1, #0
 8017624:	d048      	beq.n	80176b8 <_free_r+0x98>
 8017626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801762a:	9001      	str	r0, [sp, #4]
 801762c:	2b00      	cmp	r3, #0
 801762e:	f1a1 0404 	sub.w	r4, r1, #4
 8017632:	bfb8      	it	lt
 8017634:	18e4      	addlt	r4, r4, r3
 8017636:	f7ff ffe7 	bl	8017608 <__malloc_lock>
 801763a:	4a20      	ldr	r2, [pc, #128]	; (80176bc <_free_r+0x9c>)
 801763c:	9801      	ldr	r0, [sp, #4]
 801763e:	6813      	ldr	r3, [r2, #0]
 8017640:	4615      	mov	r5, r2
 8017642:	b933      	cbnz	r3, 8017652 <_free_r+0x32>
 8017644:	6063      	str	r3, [r4, #4]
 8017646:	6014      	str	r4, [r2, #0]
 8017648:	b003      	add	sp, #12
 801764a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801764e:	f7ff bfe1 	b.w	8017614 <__malloc_unlock>
 8017652:	42a3      	cmp	r3, r4
 8017654:	d90b      	bls.n	801766e <_free_r+0x4e>
 8017656:	6821      	ldr	r1, [r4, #0]
 8017658:	1862      	adds	r2, r4, r1
 801765a:	4293      	cmp	r3, r2
 801765c:	bf04      	itt	eq
 801765e:	681a      	ldreq	r2, [r3, #0]
 8017660:	685b      	ldreq	r3, [r3, #4]
 8017662:	6063      	str	r3, [r4, #4]
 8017664:	bf04      	itt	eq
 8017666:	1852      	addeq	r2, r2, r1
 8017668:	6022      	streq	r2, [r4, #0]
 801766a:	602c      	str	r4, [r5, #0]
 801766c:	e7ec      	b.n	8017648 <_free_r+0x28>
 801766e:	461a      	mov	r2, r3
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	b10b      	cbz	r3, 8017678 <_free_r+0x58>
 8017674:	42a3      	cmp	r3, r4
 8017676:	d9fa      	bls.n	801766e <_free_r+0x4e>
 8017678:	6811      	ldr	r1, [r2, #0]
 801767a:	1855      	adds	r5, r2, r1
 801767c:	42a5      	cmp	r5, r4
 801767e:	d10b      	bne.n	8017698 <_free_r+0x78>
 8017680:	6824      	ldr	r4, [r4, #0]
 8017682:	4421      	add	r1, r4
 8017684:	1854      	adds	r4, r2, r1
 8017686:	42a3      	cmp	r3, r4
 8017688:	6011      	str	r1, [r2, #0]
 801768a:	d1dd      	bne.n	8017648 <_free_r+0x28>
 801768c:	681c      	ldr	r4, [r3, #0]
 801768e:	685b      	ldr	r3, [r3, #4]
 8017690:	6053      	str	r3, [r2, #4]
 8017692:	4421      	add	r1, r4
 8017694:	6011      	str	r1, [r2, #0]
 8017696:	e7d7      	b.n	8017648 <_free_r+0x28>
 8017698:	d902      	bls.n	80176a0 <_free_r+0x80>
 801769a:	230c      	movs	r3, #12
 801769c:	6003      	str	r3, [r0, #0]
 801769e:	e7d3      	b.n	8017648 <_free_r+0x28>
 80176a0:	6825      	ldr	r5, [r4, #0]
 80176a2:	1961      	adds	r1, r4, r5
 80176a4:	428b      	cmp	r3, r1
 80176a6:	bf04      	itt	eq
 80176a8:	6819      	ldreq	r1, [r3, #0]
 80176aa:	685b      	ldreq	r3, [r3, #4]
 80176ac:	6063      	str	r3, [r4, #4]
 80176ae:	bf04      	itt	eq
 80176b0:	1949      	addeq	r1, r1, r5
 80176b2:	6021      	streq	r1, [r4, #0]
 80176b4:	6054      	str	r4, [r2, #4]
 80176b6:	e7c7      	b.n	8017648 <_free_r+0x28>
 80176b8:	b003      	add	sp, #12
 80176ba:	bd30      	pop	{r4, r5, pc}
 80176bc:	200084e8 	.word	0x200084e8

080176c0 <__ssputs_r>:
 80176c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176c4:	688e      	ldr	r6, [r1, #8]
 80176c6:	429e      	cmp	r6, r3
 80176c8:	4682      	mov	sl, r0
 80176ca:	460c      	mov	r4, r1
 80176cc:	4690      	mov	r8, r2
 80176ce:	461f      	mov	r7, r3
 80176d0:	d838      	bhi.n	8017744 <__ssputs_r+0x84>
 80176d2:	898a      	ldrh	r2, [r1, #12]
 80176d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176d8:	d032      	beq.n	8017740 <__ssputs_r+0x80>
 80176da:	6825      	ldr	r5, [r4, #0]
 80176dc:	6909      	ldr	r1, [r1, #16]
 80176de:	eba5 0901 	sub.w	r9, r5, r1
 80176e2:	6965      	ldr	r5, [r4, #20]
 80176e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80176ec:	3301      	adds	r3, #1
 80176ee:	444b      	add	r3, r9
 80176f0:	106d      	asrs	r5, r5, #1
 80176f2:	429d      	cmp	r5, r3
 80176f4:	bf38      	it	cc
 80176f6:	461d      	movcc	r5, r3
 80176f8:	0553      	lsls	r3, r2, #21
 80176fa:	d531      	bpl.n	8017760 <__ssputs_r+0xa0>
 80176fc:	4629      	mov	r1, r5
 80176fe:	f7ff f9d9 	bl	8016ab4 <_malloc_r>
 8017702:	4606      	mov	r6, r0
 8017704:	b950      	cbnz	r0, 801771c <__ssputs_r+0x5c>
 8017706:	230c      	movs	r3, #12
 8017708:	f8ca 3000 	str.w	r3, [sl]
 801770c:	89a3      	ldrh	r3, [r4, #12]
 801770e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017712:	81a3      	strh	r3, [r4, #12]
 8017714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801771c:	6921      	ldr	r1, [r4, #16]
 801771e:	464a      	mov	r2, r9
 8017720:	f7ff f997 	bl	8016a52 <memcpy>
 8017724:	89a3      	ldrh	r3, [r4, #12]
 8017726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801772a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801772e:	81a3      	strh	r3, [r4, #12]
 8017730:	6126      	str	r6, [r4, #16]
 8017732:	6165      	str	r5, [r4, #20]
 8017734:	444e      	add	r6, r9
 8017736:	eba5 0509 	sub.w	r5, r5, r9
 801773a:	6026      	str	r6, [r4, #0]
 801773c:	60a5      	str	r5, [r4, #8]
 801773e:	463e      	mov	r6, r7
 8017740:	42be      	cmp	r6, r7
 8017742:	d900      	bls.n	8017746 <__ssputs_r+0x86>
 8017744:	463e      	mov	r6, r7
 8017746:	4632      	mov	r2, r6
 8017748:	6820      	ldr	r0, [r4, #0]
 801774a:	4641      	mov	r1, r8
 801774c:	f7ff f98f 	bl	8016a6e <memmove>
 8017750:	68a3      	ldr	r3, [r4, #8]
 8017752:	6822      	ldr	r2, [r4, #0]
 8017754:	1b9b      	subs	r3, r3, r6
 8017756:	4432      	add	r2, r6
 8017758:	60a3      	str	r3, [r4, #8]
 801775a:	6022      	str	r2, [r4, #0]
 801775c:	2000      	movs	r0, #0
 801775e:	e7db      	b.n	8017718 <__ssputs_r+0x58>
 8017760:	462a      	mov	r2, r5
 8017762:	f000 fc33 	bl	8017fcc <_realloc_r>
 8017766:	4606      	mov	r6, r0
 8017768:	2800      	cmp	r0, #0
 801776a:	d1e1      	bne.n	8017730 <__ssputs_r+0x70>
 801776c:	6921      	ldr	r1, [r4, #16]
 801776e:	4650      	mov	r0, sl
 8017770:	f7ff ff56 	bl	8017620 <_free_r>
 8017774:	e7c7      	b.n	8017706 <__ssputs_r+0x46>
	...

08017778 <_svfiprintf_r>:
 8017778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801777c:	4698      	mov	r8, r3
 801777e:	898b      	ldrh	r3, [r1, #12]
 8017780:	061b      	lsls	r3, r3, #24
 8017782:	b09d      	sub	sp, #116	; 0x74
 8017784:	4607      	mov	r7, r0
 8017786:	460d      	mov	r5, r1
 8017788:	4614      	mov	r4, r2
 801778a:	d50e      	bpl.n	80177aa <_svfiprintf_r+0x32>
 801778c:	690b      	ldr	r3, [r1, #16]
 801778e:	b963      	cbnz	r3, 80177aa <_svfiprintf_r+0x32>
 8017790:	2140      	movs	r1, #64	; 0x40
 8017792:	f7ff f98f 	bl	8016ab4 <_malloc_r>
 8017796:	6028      	str	r0, [r5, #0]
 8017798:	6128      	str	r0, [r5, #16]
 801779a:	b920      	cbnz	r0, 80177a6 <_svfiprintf_r+0x2e>
 801779c:	230c      	movs	r3, #12
 801779e:	603b      	str	r3, [r7, #0]
 80177a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177a4:	e0d1      	b.n	801794a <_svfiprintf_r+0x1d2>
 80177a6:	2340      	movs	r3, #64	; 0x40
 80177a8:	616b      	str	r3, [r5, #20]
 80177aa:	2300      	movs	r3, #0
 80177ac:	9309      	str	r3, [sp, #36]	; 0x24
 80177ae:	2320      	movs	r3, #32
 80177b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80177b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80177b8:	2330      	movs	r3, #48	; 0x30
 80177ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017964 <_svfiprintf_r+0x1ec>
 80177be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177c2:	f04f 0901 	mov.w	r9, #1
 80177c6:	4623      	mov	r3, r4
 80177c8:	469a      	mov	sl, r3
 80177ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177ce:	b10a      	cbz	r2, 80177d4 <_svfiprintf_r+0x5c>
 80177d0:	2a25      	cmp	r2, #37	; 0x25
 80177d2:	d1f9      	bne.n	80177c8 <_svfiprintf_r+0x50>
 80177d4:	ebba 0b04 	subs.w	fp, sl, r4
 80177d8:	d00b      	beq.n	80177f2 <_svfiprintf_r+0x7a>
 80177da:	465b      	mov	r3, fp
 80177dc:	4622      	mov	r2, r4
 80177de:	4629      	mov	r1, r5
 80177e0:	4638      	mov	r0, r7
 80177e2:	f7ff ff6d 	bl	80176c0 <__ssputs_r>
 80177e6:	3001      	adds	r0, #1
 80177e8:	f000 80aa 	beq.w	8017940 <_svfiprintf_r+0x1c8>
 80177ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177ee:	445a      	add	r2, fp
 80177f0:	9209      	str	r2, [sp, #36]	; 0x24
 80177f2:	f89a 3000 	ldrb.w	r3, [sl]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	f000 80a2 	beq.w	8017940 <_svfiprintf_r+0x1c8>
 80177fc:	2300      	movs	r3, #0
 80177fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017806:	f10a 0a01 	add.w	sl, sl, #1
 801780a:	9304      	str	r3, [sp, #16]
 801780c:	9307      	str	r3, [sp, #28]
 801780e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017812:	931a      	str	r3, [sp, #104]	; 0x68
 8017814:	4654      	mov	r4, sl
 8017816:	2205      	movs	r2, #5
 8017818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801781c:	4851      	ldr	r0, [pc, #324]	; (8017964 <_svfiprintf_r+0x1ec>)
 801781e:	f7e8 fcef 	bl	8000200 <memchr>
 8017822:	9a04      	ldr	r2, [sp, #16]
 8017824:	b9d8      	cbnz	r0, 801785e <_svfiprintf_r+0xe6>
 8017826:	06d0      	lsls	r0, r2, #27
 8017828:	bf44      	itt	mi
 801782a:	2320      	movmi	r3, #32
 801782c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017830:	0711      	lsls	r1, r2, #28
 8017832:	bf44      	itt	mi
 8017834:	232b      	movmi	r3, #43	; 0x2b
 8017836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801783a:	f89a 3000 	ldrb.w	r3, [sl]
 801783e:	2b2a      	cmp	r3, #42	; 0x2a
 8017840:	d015      	beq.n	801786e <_svfiprintf_r+0xf6>
 8017842:	9a07      	ldr	r2, [sp, #28]
 8017844:	4654      	mov	r4, sl
 8017846:	2000      	movs	r0, #0
 8017848:	f04f 0c0a 	mov.w	ip, #10
 801784c:	4621      	mov	r1, r4
 801784e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017852:	3b30      	subs	r3, #48	; 0x30
 8017854:	2b09      	cmp	r3, #9
 8017856:	d94e      	bls.n	80178f6 <_svfiprintf_r+0x17e>
 8017858:	b1b0      	cbz	r0, 8017888 <_svfiprintf_r+0x110>
 801785a:	9207      	str	r2, [sp, #28]
 801785c:	e014      	b.n	8017888 <_svfiprintf_r+0x110>
 801785e:	eba0 0308 	sub.w	r3, r0, r8
 8017862:	fa09 f303 	lsl.w	r3, r9, r3
 8017866:	4313      	orrs	r3, r2
 8017868:	9304      	str	r3, [sp, #16]
 801786a:	46a2      	mov	sl, r4
 801786c:	e7d2      	b.n	8017814 <_svfiprintf_r+0x9c>
 801786e:	9b03      	ldr	r3, [sp, #12]
 8017870:	1d19      	adds	r1, r3, #4
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	9103      	str	r1, [sp, #12]
 8017876:	2b00      	cmp	r3, #0
 8017878:	bfbb      	ittet	lt
 801787a:	425b      	neglt	r3, r3
 801787c:	f042 0202 	orrlt.w	r2, r2, #2
 8017880:	9307      	strge	r3, [sp, #28]
 8017882:	9307      	strlt	r3, [sp, #28]
 8017884:	bfb8      	it	lt
 8017886:	9204      	strlt	r2, [sp, #16]
 8017888:	7823      	ldrb	r3, [r4, #0]
 801788a:	2b2e      	cmp	r3, #46	; 0x2e
 801788c:	d10c      	bne.n	80178a8 <_svfiprintf_r+0x130>
 801788e:	7863      	ldrb	r3, [r4, #1]
 8017890:	2b2a      	cmp	r3, #42	; 0x2a
 8017892:	d135      	bne.n	8017900 <_svfiprintf_r+0x188>
 8017894:	9b03      	ldr	r3, [sp, #12]
 8017896:	1d1a      	adds	r2, r3, #4
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	9203      	str	r2, [sp, #12]
 801789c:	2b00      	cmp	r3, #0
 801789e:	bfb8      	it	lt
 80178a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80178a4:	3402      	adds	r4, #2
 80178a6:	9305      	str	r3, [sp, #20]
 80178a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017974 <_svfiprintf_r+0x1fc>
 80178ac:	7821      	ldrb	r1, [r4, #0]
 80178ae:	2203      	movs	r2, #3
 80178b0:	4650      	mov	r0, sl
 80178b2:	f7e8 fca5 	bl	8000200 <memchr>
 80178b6:	b140      	cbz	r0, 80178ca <_svfiprintf_r+0x152>
 80178b8:	2340      	movs	r3, #64	; 0x40
 80178ba:	eba0 000a 	sub.w	r0, r0, sl
 80178be:	fa03 f000 	lsl.w	r0, r3, r0
 80178c2:	9b04      	ldr	r3, [sp, #16]
 80178c4:	4303      	orrs	r3, r0
 80178c6:	3401      	adds	r4, #1
 80178c8:	9304      	str	r3, [sp, #16]
 80178ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178ce:	4826      	ldr	r0, [pc, #152]	; (8017968 <_svfiprintf_r+0x1f0>)
 80178d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178d4:	2206      	movs	r2, #6
 80178d6:	f7e8 fc93 	bl	8000200 <memchr>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d038      	beq.n	8017950 <_svfiprintf_r+0x1d8>
 80178de:	4b23      	ldr	r3, [pc, #140]	; (801796c <_svfiprintf_r+0x1f4>)
 80178e0:	bb1b      	cbnz	r3, 801792a <_svfiprintf_r+0x1b2>
 80178e2:	9b03      	ldr	r3, [sp, #12]
 80178e4:	3307      	adds	r3, #7
 80178e6:	f023 0307 	bic.w	r3, r3, #7
 80178ea:	3308      	adds	r3, #8
 80178ec:	9303      	str	r3, [sp, #12]
 80178ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f0:	4433      	add	r3, r6
 80178f2:	9309      	str	r3, [sp, #36]	; 0x24
 80178f4:	e767      	b.n	80177c6 <_svfiprintf_r+0x4e>
 80178f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80178fa:	460c      	mov	r4, r1
 80178fc:	2001      	movs	r0, #1
 80178fe:	e7a5      	b.n	801784c <_svfiprintf_r+0xd4>
 8017900:	2300      	movs	r3, #0
 8017902:	3401      	adds	r4, #1
 8017904:	9305      	str	r3, [sp, #20]
 8017906:	4619      	mov	r1, r3
 8017908:	f04f 0c0a 	mov.w	ip, #10
 801790c:	4620      	mov	r0, r4
 801790e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017912:	3a30      	subs	r2, #48	; 0x30
 8017914:	2a09      	cmp	r2, #9
 8017916:	d903      	bls.n	8017920 <_svfiprintf_r+0x1a8>
 8017918:	2b00      	cmp	r3, #0
 801791a:	d0c5      	beq.n	80178a8 <_svfiprintf_r+0x130>
 801791c:	9105      	str	r1, [sp, #20]
 801791e:	e7c3      	b.n	80178a8 <_svfiprintf_r+0x130>
 8017920:	fb0c 2101 	mla	r1, ip, r1, r2
 8017924:	4604      	mov	r4, r0
 8017926:	2301      	movs	r3, #1
 8017928:	e7f0      	b.n	801790c <_svfiprintf_r+0x194>
 801792a:	ab03      	add	r3, sp, #12
 801792c:	9300      	str	r3, [sp, #0]
 801792e:	462a      	mov	r2, r5
 8017930:	4b0f      	ldr	r3, [pc, #60]	; (8017970 <_svfiprintf_r+0x1f8>)
 8017932:	a904      	add	r1, sp, #16
 8017934:	4638      	mov	r0, r7
 8017936:	f3af 8000 	nop.w
 801793a:	1c42      	adds	r2, r0, #1
 801793c:	4606      	mov	r6, r0
 801793e:	d1d6      	bne.n	80178ee <_svfiprintf_r+0x176>
 8017940:	89ab      	ldrh	r3, [r5, #12]
 8017942:	065b      	lsls	r3, r3, #25
 8017944:	f53f af2c 	bmi.w	80177a0 <_svfiprintf_r+0x28>
 8017948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801794a:	b01d      	add	sp, #116	; 0x74
 801794c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017950:	ab03      	add	r3, sp, #12
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	462a      	mov	r2, r5
 8017956:	4b06      	ldr	r3, [pc, #24]	; (8017970 <_svfiprintf_r+0x1f8>)
 8017958:	a904      	add	r1, sp, #16
 801795a:	4638      	mov	r0, r7
 801795c:	f000 f9d4 	bl	8017d08 <_printf_i>
 8017960:	e7eb      	b.n	801793a <_svfiprintf_r+0x1c2>
 8017962:	bf00      	nop
 8017964:	08022da2 	.word	0x08022da2
 8017968:	08022dac 	.word	0x08022dac
 801796c:	00000000 	.word	0x00000000
 8017970:	080176c1 	.word	0x080176c1
 8017974:	08022da8 	.word	0x08022da8

08017978 <__sfputc_r>:
 8017978:	6893      	ldr	r3, [r2, #8]
 801797a:	3b01      	subs	r3, #1
 801797c:	2b00      	cmp	r3, #0
 801797e:	b410      	push	{r4}
 8017980:	6093      	str	r3, [r2, #8]
 8017982:	da08      	bge.n	8017996 <__sfputc_r+0x1e>
 8017984:	6994      	ldr	r4, [r2, #24]
 8017986:	42a3      	cmp	r3, r4
 8017988:	db01      	blt.n	801798e <__sfputc_r+0x16>
 801798a:	290a      	cmp	r1, #10
 801798c:	d103      	bne.n	8017996 <__sfputc_r+0x1e>
 801798e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017992:	f7ff bbe1 	b.w	8017158 <__swbuf_r>
 8017996:	6813      	ldr	r3, [r2, #0]
 8017998:	1c58      	adds	r0, r3, #1
 801799a:	6010      	str	r0, [r2, #0]
 801799c:	7019      	strb	r1, [r3, #0]
 801799e:	4608      	mov	r0, r1
 80179a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179a4:	4770      	bx	lr

080179a6 <__sfputs_r>:
 80179a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a8:	4606      	mov	r6, r0
 80179aa:	460f      	mov	r7, r1
 80179ac:	4614      	mov	r4, r2
 80179ae:	18d5      	adds	r5, r2, r3
 80179b0:	42ac      	cmp	r4, r5
 80179b2:	d101      	bne.n	80179b8 <__sfputs_r+0x12>
 80179b4:	2000      	movs	r0, #0
 80179b6:	e007      	b.n	80179c8 <__sfputs_r+0x22>
 80179b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179bc:	463a      	mov	r2, r7
 80179be:	4630      	mov	r0, r6
 80179c0:	f7ff ffda 	bl	8017978 <__sfputc_r>
 80179c4:	1c43      	adds	r3, r0, #1
 80179c6:	d1f3      	bne.n	80179b0 <__sfputs_r+0xa>
 80179c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080179cc <_vfiprintf_r>:
 80179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	460d      	mov	r5, r1
 80179d2:	b09d      	sub	sp, #116	; 0x74
 80179d4:	4614      	mov	r4, r2
 80179d6:	4698      	mov	r8, r3
 80179d8:	4606      	mov	r6, r0
 80179da:	b118      	cbz	r0, 80179e4 <_vfiprintf_r+0x18>
 80179dc:	6983      	ldr	r3, [r0, #24]
 80179de:	b90b      	cbnz	r3, 80179e4 <_vfiprintf_r+0x18>
 80179e0:	f7fe ff64 	bl	80168ac <__sinit>
 80179e4:	4b89      	ldr	r3, [pc, #548]	; (8017c0c <_vfiprintf_r+0x240>)
 80179e6:	429d      	cmp	r5, r3
 80179e8:	d11b      	bne.n	8017a22 <_vfiprintf_r+0x56>
 80179ea:	6875      	ldr	r5, [r6, #4]
 80179ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179ee:	07d9      	lsls	r1, r3, #31
 80179f0:	d405      	bmi.n	80179fe <_vfiprintf_r+0x32>
 80179f2:	89ab      	ldrh	r3, [r5, #12]
 80179f4:	059a      	lsls	r2, r3, #22
 80179f6:	d402      	bmi.n	80179fe <_vfiprintf_r+0x32>
 80179f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179fa:	f7ff f81a 	bl	8016a32 <__retarget_lock_acquire_recursive>
 80179fe:	89ab      	ldrh	r3, [r5, #12]
 8017a00:	071b      	lsls	r3, r3, #28
 8017a02:	d501      	bpl.n	8017a08 <_vfiprintf_r+0x3c>
 8017a04:	692b      	ldr	r3, [r5, #16]
 8017a06:	b9eb      	cbnz	r3, 8017a44 <_vfiprintf_r+0x78>
 8017a08:	4629      	mov	r1, r5
 8017a0a:	4630      	mov	r0, r6
 8017a0c:	f7ff fc08 	bl	8017220 <__swsetup_r>
 8017a10:	b1c0      	cbz	r0, 8017a44 <_vfiprintf_r+0x78>
 8017a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a14:	07dc      	lsls	r4, r3, #31
 8017a16:	d50e      	bpl.n	8017a36 <_vfiprintf_r+0x6a>
 8017a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a1c:	b01d      	add	sp, #116	; 0x74
 8017a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a22:	4b7b      	ldr	r3, [pc, #492]	; (8017c10 <_vfiprintf_r+0x244>)
 8017a24:	429d      	cmp	r5, r3
 8017a26:	d101      	bne.n	8017a2c <_vfiprintf_r+0x60>
 8017a28:	68b5      	ldr	r5, [r6, #8]
 8017a2a:	e7df      	b.n	80179ec <_vfiprintf_r+0x20>
 8017a2c:	4b79      	ldr	r3, [pc, #484]	; (8017c14 <_vfiprintf_r+0x248>)
 8017a2e:	429d      	cmp	r5, r3
 8017a30:	bf08      	it	eq
 8017a32:	68f5      	ldreq	r5, [r6, #12]
 8017a34:	e7da      	b.n	80179ec <_vfiprintf_r+0x20>
 8017a36:	89ab      	ldrh	r3, [r5, #12]
 8017a38:	0598      	lsls	r0, r3, #22
 8017a3a:	d4ed      	bmi.n	8017a18 <_vfiprintf_r+0x4c>
 8017a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a3e:	f7fe fff9 	bl	8016a34 <__retarget_lock_release_recursive>
 8017a42:	e7e9      	b.n	8017a18 <_vfiprintf_r+0x4c>
 8017a44:	2300      	movs	r3, #0
 8017a46:	9309      	str	r3, [sp, #36]	; 0x24
 8017a48:	2320      	movs	r3, #32
 8017a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a52:	2330      	movs	r3, #48	; 0x30
 8017a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017c18 <_vfiprintf_r+0x24c>
 8017a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a5c:	f04f 0901 	mov.w	r9, #1
 8017a60:	4623      	mov	r3, r4
 8017a62:	469a      	mov	sl, r3
 8017a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a68:	b10a      	cbz	r2, 8017a6e <_vfiprintf_r+0xa2>
 8017a6a:	2a25      	cmp	r2, #37	; 0x25
 8017a6c:	d1f9      	bne.n	8017a62 <_vfiprintf_r+0x96>
 8017a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8017a72:	d00b      	beq.n	8017a8c <_vfiprintf_r+0xc0>
 8017a74:	465b      	mov	r3, fp
 8017a76:	4622      	mov	r2, r4
 8017a78:	4629      	mov	r1, r5
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f7ff ff93 	bl	80179a6 <__sfputs_r>
 8017a80:	3001      	adds	r0, #1
 8017a82:	f000 80aa 	beq.w	8017bda <_vfiprintf_r+0x20e>
 8017a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a88:	445a      	add	r2, fp
 8017a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8017a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	f000 80a2 	beq.w	8017bda <_vfiprintf_r+0x20e>
 8017a96:	2300      	movs	r3, #0
 8017a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017aa0:	f10a 0a01 	add.w	sl, sl, #1
 8017aa4:	9304      	str	r3, [sp, #16]
 8017aa6:	9307      	str	r3, [sp, #28]
 8017aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017aac:	931a      	str	r3, [sp, #104]	; 0x68
 8017aae:	4654      	mov	r4, sl
 8017ab0:	2205      	movs	r2, #5
 8017ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ab6:	4858      	ldr	r0, [pc, #352]	; (8017c18 <_vfiprintf_r+0x24c>)
 8017ab8:	f7e8 fba2 	bl	8000200 <memchr>
 8017abc:	9a04      	ldr	r2, [sp, #16]
 8017abe:	b9d8      	cbnz	r0, 8017af8 <_vfiprintf_r+0x12c>
 8017ac0:	06d1      	lsls	r1, r2, #27
 8017ac2:	bf44      	itt	mi
 8017ac4:	2320      	movmi	r3, #32
 8017ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017aca:	0713      	lsls	r3, r2, #28
 8017acc:	bf44      	itt	mi
 8017ace:	232b      	movmi	r3, #43	; 0x2b
 8017ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8017ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8017ada:	d015      	beq.n	8017b08 <_vfiprintf_r+0x13c>
 8017adc:	9a07      	ldr	r2, [sp, #28]
 8017ade:	4654      	mov	r4, sl
 8017ae0:	2000      	movs	r0, #0
 8017ae2:	f04f 0c0a 	mov.w	ip, #10
 8017ae6:	4621      	mov	r1, r4
 8017ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017aec:	3b30      	subs	r3, #48	; 0x30
 8017aee:	2b09      	cmp	r3, #9
 8017af0:	d94e      	bls.n	8017b90 <_vfiprintf_r+0x1c4>
 8017af2:	b1b0      	cbz	r0, 8017b22 <_vfiprintf_r+0x156>
 8017af4:	9207      	str	r2, [sp, #28]
 8017af6:	e014      	b.n	8017b22 <_vfiprintf_r+0x156>
 8017af8:	eba0 0308 	sub.w	r3, r0, r8
 8017afc:	fa09 f303 	lsl.w	r3, r9, r3
 8017b00:	4313      	orrs	r3, r2
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	46a2      	mov	sl, r4
 8017b06:	e7d2      	b.n	8017aae <_vfiprintf_r+0xe2>
 8017b08:	9b03      	ldr	r3, [sp, #12]
 8017b0a:	1d19      	adds	r1, r3, #4
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	9103      	str	r1, [sp, #12]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	bfbb      	ittet	lt
 8017b14:	425b      	neglt	r3, r3
 8017b16:	f042 0202 	orrlt.w	r2, r2, #2
 8017b1a:	9307      	strge	r3, [sp, #28]
 8017b1c:	9307      	strlt	r3, [sp, #28]
 8017b1e:	bfb8      	it	lt
 8017b20:	9204      	strlt	r2, [sp, #16]
 8017b22:	7823      	ldrb	r3, [r4, #0]
 8017b24:	2b2e      	cmp	r3, #46	; 0x2e
 8017b26:	d10c      	bne.n	8017b42 <_vfiprintf_r+0x176>
 8017b28:	7863      	ldrb	r3, [r4, #1]
 8017b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b2c:	d135      	bne.n	8017b9a <_vfiprintf_r+0x1ce>
 8017b2e:	9b03      	ldr	r3, [sp, #12]
 8017b30:	1d1a      	adds	r2, r3, #4
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	9203      	str	r2, [sp, #12]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	bfb8      	it	lt
 8017b3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017b3e:	3402      	adds	r4, #2
 8017b40:	9305      	str	r3, [sp, #20]
 8017b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017c28 <_vfiprintf_r+0x25c>
 8017b46:	7821      	ldrb	r1, [r4, #0]
 8017b48:	2203      	movs	r2, #3
 8017b4a:	4650      	mov	r0, sl
 8017b4c:	f7e8 fb58 	bl	8000200 <memchr>
 8017b50:	b140      	cbz	r0, 8017b64 <_vfiprintf_r+0x198>
 8017b52:	2340      	movs	r3, #64	; 0x40
 8017b54:	eba0 000a 	sub.w	r0, r0, sl
 8017b58:	fa03 f000 	lsl.w	r0, r3, r0
 8017b5c:	9b04      	ldr	r3, [sp, #16]
 8017b5e:	4303      	orrs	r3, r0
 8017b60:	3401      	adds	r4, #1
 8017b62:	9304      	str	r3, [sp, #16]
 8017b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b68:	482c      	ldr	r0, [pc, #176]	; (8017c1c <_vfiprintf_r+0x250>)
 8017b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b6e:	2206      	movs	r2, #6
 8017b70:	f7e8 fb46 	bl	8000200 <memchr>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d03f      	beq.n	8017bf8 <_vfiprintf_r+0x22c>
 8017b78:	4b29      	ldr	r3, [pc, #164]	; (8017c20 <_vfiprintf_r+0x254>)
 8017b7a:	bb1b      	cbnz	r3, 8017bc4 <_vfiprintf_r+0x1f8>
 8017b7c:	9b03      	ldr	r3, [sp, #12]
 8017b7e:	3307      	adds	r3, #7
 8017b80:	f023 0307 	bic.w	r3, r3, #7
 8017b84:	3308      	adds	r3, #8
 8017b86:	9303      	str	r3, [sp, #12]
 8017b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8a:	443b      	add	r3, r7
 8017b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b8e:	e767      	b.n	8017a60 <_vfiprintf_r+0x94>
 8017b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b94:	460c      	mov	r4, r1
 8017b96:	2001      	movs	r0, #1
 8017b98:	e7a5      	b.n	8017ae6 <_vfiprintf_r+0x11a>
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	3401      	adds	r4, #1
 8017b9e:	9305      	str	r3, [sp, #20]
 8017ba0:	4619      	mov	r1, r3
 8017ba2:	f04f 0c0a 	mov.w	ip, #10
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bac:	3a30      	subs	r2, #48	; 0x30
 8017bae:	2a09      	cmp	r2, #9
 8017bb0:	d903      	bls.n	8017bba <_vfiprintf_r+0x1ee>
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d0c5      	beq.n	8017b42 <_vfiprintf_r+0x176>
 8017bb6:	9105      	str	r1, [sp, #20]
 8017bb8:	e7c3      	b.n	8017b42 <_vfiprintf_r+0x176>
 8017bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	e7f0      	b.n	8017ba6 <_vfiprintf_r+0x1da>
 8017bc4:	ab03      	add	r3, sp, #12
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	462a      	mov	r2, r5
 8017bca:	4b16      	ldr	r3, [pc, #88]	; (8017c24 <_vfiprintf_r+0x258>)
 8017bcc:	a904      	add	r1, sp, #16
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f3af 8000 	nop.w
 8017bd4:	4607      	mov	r7, r0
 8017bd6:	1c78      	adds	r0, r7, #1
 8017bd8:	d1d6      	bne.n	8017b88 <_vfiprintf_r+0x1bc>
 8017bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bdc:	07d9      	lsls	r1, r3, #31
 8017bde:	d405      	bmi.n	8017bec <_vfiprintf_r+0x220>
 8017be0:	89ab      	ldrh	r3, [r5, #12]
 8017be2:	059a      	lsls	r2, r3, #22
 8017be4:	d402      	bmi.n	8017bec <_vfiprintf_r+0x220>
 8017be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017be8:	f7fe ff24 	bl	8016a34 <__retarget_lock_release_recursive>
 8017bec:	89ab      	ldrh	r3, [r5, #12]
 8017bee:	065b      	lsls	r3, r3, #25
 8017bf0:	f53f af12 	bmi.w	8017a18 <_vfiprintf_r+0x4c>
 8017bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bf6:	e711      	b.n	8017a1c <_vfiprintf_r+0x50>
 8017bf8:	ab03      	add	r3, sp, #12
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	462a      	mov	r2, r5
 8017bfe:	4b09      	ldr	r3, [pc, #36]	; (8017c24 <_vfiprintf_r+0x258>)
 8017c00:	a904      	add	r1, sp, #16
 8017c02:	4630      	mov	r0, r6
 8017c04:	f000 f880 	bl	8017d08 <_printf_i>
 8017c08:	e7e4      	b.n	8017bd4 <_vfiprintf_r+0x208>
 8017c0a:	bf00      	nop
 8017c0c:	08022cac 	.word	0x08022cac
 8017c10:	08022ccc 	.word	0x08022ccc
 8017c14:	08022c8c 	.word	0x08022c8c
 8017c18:	08022da2 	.word	0x08022da2
 8017c1c:	08022dac 	.word	0x08022dac
 8017c20:	00000000 	.word	0x00000000
 8017c24:	080179a7 	.word	0x080179a7
 8017c28:	08022da8 	.word	0x08022da8

08017c2c <_printf_common>:
 8017c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c30:	4616      	mov	r6, r2
 8017c32:	4699      	mov	r9, r3
 8017c34:	688a      	ldr	r2, [r1, #8]
 8017c36:	690b      	ldr	r3, [r1, #16]
 8017c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c3c:	4293      	cmp	r3, r2
 8017c3e:	bfb8      	it	lt
 8017c40:	4613      	movlt	r3, r2
 8017c42:	6033      	str	r3, [r6, #0]
 8017c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c48:	4607      	mov	r7, r0
 8017c4a:	460c      	mov	r4, r1
 8017c4c:	b10a      	cbz	r2, 8017c52 <_printf_common+0x26>
 8017c4e:	3301      	adds	r3, #1
 8017c50:	6033      	str	r3, [r6, #0]
 8017c52:	6823      	ldr	r3, [r4, #0]
 8017c54:	0699      	lsls	r1, r3, #26
 8017c56:	bf42      	ittt	mi
 8017c58:	6833      	ldrmi	r3, [r6, #0]
 8017c5a:	3302      	addmi	r3, #2
 8017c5c:	6033      	strmi	r3, [r6, #0]
 8017c5e:	6825      	ldr	r5, [r4, #0]
 8017c60:	f015 0506 	ands.w	r5, r5, #6
 8017c64:	d106      	bne.n	8017c74 <_printf_common+0x48>
 8017c66:	f104 0a19 	add.w	sl, r4, #25
 8017c6a:	68e3      	ldr	r3, [r4, #12]
 8017c6c:	6832      	ldr	r2, [r6, #0]
 8017c6e:	1a9b      	subs	r3, r3, r2
 8017c70:	42ab      	cmp	r3, r5
 8017c72:	dc26      	bgt.n	8017cc2 <_printf_common+0x96>
 8017c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017c78:	1e13      	subs	r3, r2, #0
 8017c7a:	6822      	ldr	r2, [r4, #0]
 8017c7c:	bf18      	it	ne
 8017c7e:	2301      	movne	r3, #1
 8017c80:	0692      	lsls	r2, r2, #26
 8017c82:	d42b      	bmi.n	8017cdc <_printf_common+0xb0>
 8017c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c88:	4649      	mov	r1, r9
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	47c0      	blx	r8
 8017c8e:	3001      	adds	r0, #1
 8017c90:	d01e      	beq.n	8017cd0 <_printf_common+0xa4>
 8017c92:	6823      	ldr	r3, [r4, #0]
 8017c94:	68e5      	ldr	r5, [r4, #12]
 8017c96:	6832      	ldr	r2, [r6, #0]
 8017c98:	f003 0306 	and.w	r3, r3, #6
 8017c9c:	2b04      	cmp	r3, #4
 8017c9e:	bf08      	it	eq
 8017ca0:	1aad      	subeq	r5, r5, r2
 8017ca2:	68a3      	ldr	r3, [r4, #8]
 8017ca4:	6922      	ldr	r2, [r4, #16]
 8017ca6:	bf0c      	ite	eq
 8017ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017cac:	2500      	movne	r5, #0
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	bfc4      	itt	gt
 8017cb2:	1a9b      	subgt	r3, r3, r2
 8017cb4:	18ed      	addgt	r5, r5, r3
 8017cb6:	2600      	movs	r6, #0
 8017cb8:	341a      	adds	r4, #26
 8017cba:	42b5      	cmp	r5, r6
 8017cbc:	d11a      	bne.n	8017cf4 <_printf_common+0xc8>
 8017cbe:	2000      	movs	r0, #0
 8017cc0:	e008      	b.n	8017cd4 <_printf_common+0xa8>
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	4652      	mov	r2, sl
 8017cc6:	4649      	mov	r1, r9
 8017cc8:	4638      	mov	r0, r7
 8017cca:	47c0      	blx	r8
 8017ccc:	3001      	adds	r0, #1
 8017cce:	d103      	bne.n	8017cd8 <_printf_common+0xac>
 8017cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cd8:	3501      	adds	r5, #1
 8017cda:	e7c6      	b.n	8017c6a <_printf_common+0x3e>
 8017cdc:	18e1      	adds	r1, r4, r3
 8017cde:	1c5a      	adds	r2, r3, #1
 8017ce0:	2030      	movs	r0, #48	; 0x30
 8017ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ce6:	4422      	add	r2, r4
 8017ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017cf0:	3302      	adds	r3, #2
 8017cf2:	e7c7      	b.n	8017c84 <_printf_common+0x58>
 8017cf4:	2301      	movs	r3, #1
 8017cf6:	4622      	mov	r2, r4
 8017cf8:	4649      	mov	r1, r9
 8017cfa:	4638      	mov	r0, r7
 8017cfc:	47c0      	blx	r8
 8017cfe:	3001      	adds	r0, #1
 8017d00:	d0e6      	beq.n	8017cd0 <_printf_common+0xa4>
 8017d02:	3601      	adds	r6, #1
 8017d04:	e7d9      	b.n	8017cba <_printf_common+0x8e>
	...

08017d08 <_printf_i>:
 8017d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d0c:	460c      	mov	r4, r1
 8017d0e:	4691      	mov	r9, r2
 8017d10:	7e27      	ldrb	r7, [r4, #24]
 8017d12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d14:	2f78      	cmp	r7, #120	; 0x78
 8017d16:	4680      	mov	r8, r0
 8017d18:	469a      	mov	sl, r3
 8017d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d1e:	d807      	bhi.n	8017d30 <_printf_i+0x28>
 8017d20:	2f62      	cmp	r7, #98	; 0x62
 8017d22:	d80a      	bhi.n	8017d3a <_printf_i+0x32>
 8017d24:	2f00      	cmp	r7, #0
 8017d26:	f000 80d8 	beq.w	8017eda <_printf_i+0x1d2>
 8017d2a:	2f58      	cmp	r7, #88	; 0x58
 8017d2c:	f000 80a3 	beq.w	8017e76 <_printf_i+0x16e>
 8017d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017d38:	e03a      	b.n	8017db0 <_printf_i+0xa8>
 8017d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017d3e:	2b15      	cmp	r3, #21
 8017d40:	d8f6      	bhi.n	8017d30 <_printf_i+0x28>
 8017d42:	a001      	add	r0, pc, #4	; (adr r0, 8017d48 <_printf_i+0x40>)
 8017d44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017d48:	08017da1 	.word	0x08017da1
 8017d4c:	08017db5 	.word	0x08017db5
 8017d50:	08017d31 	.word	0x08017d31
 8017d54:	08017d31 	.word	0x08017d31
 8017d58:	08017d31 	.word	0x08017d31
 8017d5c:	08017d31 	.word	0x08017d31
 8017d60:	08017db5 	.word	0x08017db5
 8017d64:	08017d31 	.word	0x08017d31
 8017d68:	08017d31 	.word	0x08017d31
 8017d6c:	08017d31 	.word	0x08017d31
 8017d70:	08017d31 	.word	0x08017d31
 8017d74:	08017ec1 	.word	0x08017ec1
 8017d78:	08017de5 	.word	0x08017de5
 8017d7c:	08017ea3 	.word	0x08017ea3
 8017d80:	08017d31 	.word	0x08017d31
 8017d84:	08017d31 	.word	0x08017d31
 8017d88:	08017ee3 	.word	0x08017ee3
 8017d8c:	08017d31 	.word	0x08017d31
 8017d90:	08017de5 	.word	0x08017de5
 8017d94:	08017d31 	.word	0x08017d31
 8017d98:	08017d31 	.word	0x08017d31
 8017d9c:	08017eab 	.word	0x08017eab
 8017da0:	680b      	ldr	r3, [r1, #0]
 8017da2:	1d1a      	adds	r2, r3, #4
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	600a      	str	r2, [r1, #0]
 8017da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017db0:	2301      	movs	r3, #1
 8017db2:	e0a3      	b.n	8017efc <_printf_i+0x1f4>
 8017db4:	6825      	ldr	r5, [r4, #0]
 8017db6:	6808      	ldr	r0, [r1, #0]
 8017db8:	062e      	lsls	r6, r5, #24
 8017dba:	f100 0304 	add.w	r3, r0, #4
 8017dbe:	d50a      	bpl.n	8017dd6 <_printf_i+0xce>
 8017dc0:	6805      	ldr	r5, [r0, #0]
 8017dc2:	600b      	str	r3, [r1, #0]
 8017dc4:	2d00      	cmp	r5, #0
 8017dc6:	da03      	bge.n	8017dd0 <_printf_i+0xc8>
 8017dc8:	232d      	movs	r3, #45	; 0x2d
 8017dca:	426d      	negs	r5, r5
 8017dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dd0:	485e      	ldr	r0, [pc, #376]	; (8017f4c <_printf_i+0x244>)
 8017dd2:	230a      	movs	r3, #10
 8017dd4:	e019      	b.n	8017e0a <_printf_i+0x102>
 8017dd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017dda:	6805      	ldr	r5, [r0, #0]
 8017ddc:	600b      	str	r3, [r1, #0]
 8017dde:	bf18      	it	ne
 8017de0:	b22d      	sxthne	r5, r5
 8017de2:	e7ef      	b.n	8017dc4 <_printf_i+0xbc>
 8017de4:	680b      	ldr	r3, [r1, #0]
 8017de6:	6825      	ldr	r5, [r4, #0]
 8017de8:	1d18      	adds	r0, r3, #4
 8017dea:	6008      	str	r0, [r1, #0]
 8017dec:	0628      	lsls	r0, r5, #24
 8017dee:	d501      	bpl.n	8017df4 <_printf_i+0xec>
 8017df0:	681d      	ldr	r5, [r3, #0]
 8017df2:	e002      	b.n	8017dfa <_printf_i+0xf2>
 8017df4:	0669      	lsls	r1, r5, #25
 8017df6:	d5fb      	bpl.n	8017df0 <_printf_i+0xe8>
 8017df8:	881d      	ldrh	r5, [r3, #0]
 8017dfa:	4854      	ldr	r0, [pc, #336]	; (8017f4c <_printf_i+0x244>)
 8017dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8017dfe:	bf0c      	ite	eq
 8017e00:	2308      	moveq	r3, #8
 8017e02:	230a      	movne	r3, #10
 8017e04:	2100      	movs	r1, #0
 8017e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017e0a:	6866      	ldr	r6, [r4, #4]
 8017e0c:	60a6      	str	r6, [r4, #8]
 8017e0e:	2e00      	cmp	r6, #0
 8017e10:	bfa2      	ittt	ge
 8017e12:	6821      	ldrge	r1, [r4, #0]
 8017e14:	f021 0104 	bicge.w	r1, r1, #4
 8017e18:	6021      	strge	r1, [r4, #0]
 8017e1a:	b90d      	cbnz	r5, 8017e20 <_printf_i+0x118>
 8017e1c:	2e00      	cmp	r6, #0
 8017e1e:	d04d      	beq.n	8017ebc <_printf_i+0x1b4>
 8017e20:	4616      	mov	r6, r2
 8017e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8017e26:	fb03 5711 	mls	r7, r3, r1, r5
 8017e2a:	5dc7      	ldrb	r7, [r0, r7]
 8017e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017e30:	462f      	mov	r7, r5
 8017e32:	42bb      	cmp	r3, r7
 8017e34:	460d      	mov	r5, r1
 8017e36:	d9f4      	bls.n	8017e22 <_printf_i+0x11a>
 8017e38:	2b08      	cmp	r3, #8
 8017e3a:	d10b      	bne.n	8017e54 <_printf_i+0x14c>
 8017e3c:	6823      	ldr	r3, [r4, #0]
 8017e3e:	07df      	lsls	r7, r3, #31
 8017e40:	d508      	bpl.n	8017e54 <_printf_i+0x14c>
 8017e42:	6923      	ldr	r3, [r4, #16]
 8017e44:	6861      	ldr	r1, [r4, #4]
 8017e46:	4299      	cmp	r1, r3
 8017e48:	bfde      	ittt	le
 8017e4a:	2330      	movle	r3, #48	; 0x30
 8017e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017e50:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017e54:	1b92      	subs	r2, r2, r6
 8017e56:	6122      	str	r2, [r4, #16]
 8017e58:	f8cd a000 	str.w	sl, [sp]
 8017e5c:	464b      	mov	r3, r9
 8017e5e:	aa03      	add	r2, sp, #12
 8017e60:	4621      	mov	r1, r4
 8017e62:	4640      	mov	r0, r8
 8017e64:	f7ff fee2 	bl	8017c2c <_printf_common>
 8017e68:	3001      	adds	r0, #1
 8017e6a:	d14c      	bne.n	8017f06 <_printf_i+0x1fe>
 8017e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e70:	b004      	add	sp, #16
 8017e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e76:	4835      	ldr	r0, [pc, #212]	; (8017f4c <_printf_i+0x244>)
 8017e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017e7c:	6823      	ldr	r3, [r4, #0]
 8017e7e:	680e      	ldr	r6, [r1, #0]
 8017e80:	061f      	lsls	r7, r3, #24
 8017e82:	f856 5b04 	ldr.w	r5, [r6], #4
 8017e86:	600e      	str	r6, [r1, #0]
 8017e88:	d514      	bpl.n	8017eb4 <_printf_i+0x1ac>
 8017e8a:	07d9      	lsls	r1, r3, #31
 8017e8c:	bf44      	itt	mi
 8017e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8017e92:	6023      	strmi	r3, [r4, #0]
 8017e94:	b91d      	cbnz	r5, 8017e9e <_printf_i+0x196>
 8017e96:	6823      	ldr	r3, [r4, #0]
 8017e98:	f023 0320 	bic.w	r3, r3, #32
 8017e9c:	6023      	str	r3, [r4, #0]
 8017e9e:	2310      	movs	r3, #16
 8017ea0:	e7b0      	b.n	8017e04 <_printf_i+0xfc>
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	f043 0320 	orr.w	r3, r3, #32
 8017ea8:	6023      	str	r3, [r4, #0]
 8017eaa:	2378      	movs	r3, #120	; 0x78
 8017eac:	4828      	ldr	r0, [pc, #160]	; (8017f50 <_printf_i+0x248>)
 8017eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017eb2:	e7e3      	b.n	8017e7c <_printf_i+0x174>
 8017eb4:	065e      	lsls	r6, r3, #25
 8017eb6:	bf48      	it	mi
 8017eb8:	b2ad      	uxthmi	r5, r5
 8017eba:	e7e6      	b.n	8017e8a <_printf_i+0x182>
 8017ebc:	4616      	mov	r6, r2
 8017ebe:	e7bb      	b.n	8017e38 <_printf_i+0x130>
 8017ec0:	680b      	ldr	r3, [r1, #0]
 8017ec2:	6826      	ldr	r6, [r4, #0]
 8017ec4:	6960      	ldr	r0, [r4, #20]
 8017ec6:	1d1d      	adds	r5, r3, #4
 8017ec8:	600d      	str	r5, [r1, #0]
 8017eca:	0635      	lsls	r5, r6, #24
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	d501      	bpl.n	8017ed4 <_printf_i+0x1cc>
 8017ed0:	6018      	str	r0, [r3, #0]
 8017ed2:	e002      	b.n	8017eda <_printf_i+0x1d2>
 8017ed4:	0671      	lsls	r1, r6, #25
 8017ed6:	d5fb      	bpl.n	8017ed0 <_printf_i+0x1c8>
 8017ed8:	8018      	strh	r0, [r3, #0]
 8017eda:	2300      	movs	r3, #0
 8017edc:	6123      	str	r3, [r4, #16]
 8017ede:	4616      	mov	r6, r2
 8017ee0:	e7ba      	b.n	8017e58 <_printf_i+0x150>
 8017ee2:	680b      	ldr	r3, [r1, #0]
 8017ee4:	1d1a      	adds	r2, r3, #4
 8017ee6:	600a      	str	r2, [r1, #0]
 8017ee8:	681e      	ldr	r6, [r3, #0]
 8017eea:	6862      	ldr	r2, [r4, #4]
 8017eec:	2100      	movs	r1, #0
 8017eee:	4630      	mov	r0, r6
 8017ef0:	f7e8 f986 	bl	8000200 <memchr>
 8017ef4:	b108      	cbz	r0, 8017efa <_printf_i+0x1f2>
 8017ef6:	1b80      	subs	r0, r0, r6
 8017ef8:	6060      	str	r0, [r4, #4]
 8017efa:	6863      	ldr	r3, [r4, #4]
 8017efc:	6123      	str	r3, [r4, #16]
 8017efe:	2300      	movs	r3, #0
 8017f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f04:	e7a8      	b.n	8017e58 <_printf_i+0x150>
 8017f06:	6923      	ldr	r3, [r4, #16]
 8017f08:	4632      	mov	r2, r6
 8017f0a:	4649      	mov	r1, r9
 8017f0c:	4640      	mov	r0, r8
 8017f0e:	47d0      	blx	sl
 8017f10:	3001      	adds	r0, #1
 8017f12:	d0ab      	beq.n	8017e6c <_printf_i+0x164>
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	079b      	lsls	r3, r3, #30
 8017f18:	d413      	bmi.n	8017f42 <_printf_i+0x23a>
 8017f1a:	68e0      	ldr	r0, [r4, #12]
 8017f1c:	9b03      	ldr	r3, [sp, #12]
 8017f1e:	4298      	cmp	r0, r3
 8017f20:	bfb8      	it	lt
 8017f22:	4618      	movlt	r0, r3
 8017f24:	e7a4      	b.n	8017e70 <_printf_i+0x168>
 8017f26:	2301      	movs	r3, #1
 8017f28:	4632      	mov	r2, r6
 8017f2a:	4649      	mov	r1, r9
 8017f2c:	4640      	mov	r0, r8
 8017f2e:	47d0      	blx	sl
 8017f30:	3001      	adds	r0, #1
 8017f32:	d09b      	beq.n	8017e6c <_printf_i+0x164>
 8017f34:	3501      	adds	r5, #1
 8017f36:	68e3      	ldr	r3, [r4, #12]
 8017f38:	9903      	ldr	r1, [sp, #12]
 8017f3a:	1a5b      	subs	r3, r3, r1
 8017f3c:	42ab      	cmp	r3, r5
 8017f3e:	dcf2      	bgt.n	8017f26 <_printf_i+0x21e>
 8017f40:	e7eb      	b.n	8017f1a <_printf_i+0x212>
 8017f42:	2500      	movs	r5, #0
 8017f44:	f104 0619 	add.w	r6, r4, #25
 8017f48:	e7f5      	b.n	8017f36 <_printf_i+0x22e>
 8017f4a:	bf00      	nop
 8017f4c:	08022db3 	.word	0x08022db3
 8017f50:	08022dc4 	.word	0x08022dc4

08017f54 <_read_r>:
 8017f54:	b538      	push	{r3, r4, r5, lr}
 8017f56:	4d07      	ldr	r5, [pc, #28]	; (8017f74 <_read_r+0x20>)
 8017f58:	4604      	mov	r4, r0
 8017f5a:	4608      	mov	r0, r1
 8017f5c:	4611      	mov	r1, r2
 8017f5e:	2200      	movs	r2, #0
 8017f60:	602a      	str	r2, [r5, #0]
 8017f62:	461a      	mov	r2, r3
 8017f64:	f7ea f90c 	bl	8002180 <_read>
 8017f68:	1c43      	adds	r3, r0, #1
 8017f6a:	d102      	bne.n	8017f72 <_read_r+0x1e>
 8017f6c:	682b      	ldr	r3, [r5, #0]
 8017f6e:	b103      	cbz	r3, 8017f72 <_read_r+0x1e>
 8017f70:	6023      	str	r3, [r4, #0]
 8017f72:	bd38      	pop	{r3, r4, r5, pc}
 8017f74:	20014ac0 	.word	0x20014ac0

08017f78 <abort>:
 8017f78:	b508      	push	{r3, lr}
 8017f7a:	2006      	movs	r0, #6
 8017f7c:	f000 f874 	bl	8018068 <raise>
 8017f80:	2001      	movs	r0, #1
 8017f82:	f7ea f8f3 	bl	800216c <_exit>
	...

08017f88 <_fstat_r>:
 8017f88:	b538      	push	{r3, r4, r5, lr}
 8017f8a:	4d07      	ldr	r5, [pc, #28]	; (8017fa8 <_fstat_r+0x20>)
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	4604      	mov	r4, r0
 8017f90:	4608      	mov	r0, r1
 8017f92:	4611      	mov	r1, r2
 8017f94:	602b      	str	r3, [r5, #0]
 8017f96:	f7ea f91c 	bl	80021d2 <_fstat>
 8017f9a:	1c43      	adds	r3, r0, #1
 8017f9c:	d102      	bne.n	8017fa4 <_fstat_r+0x1c>
 8017f9e:	682b      	ldr	r3, [r5, #0]
 8017fa0:	b103      	cbz	r3, 8017fa4 <_fstat_r+0x1c>
 8017fa2:	6023      	str	r3, [r4, #0]
 8017fa4:	bd38      	pop	{r3, r4, r5, pc}
 8017fa6:	bf00      	nop
 8017fa8:	20014ac0 	.word	0x20014ac0

08017fac <_isatty_r>:
 8017fac:	b538      	push	{r3, r4, r5, lr}
 8017fae:	4d06      	ldr	r5, [pc, #24]	; (8017fc8 <_isatty_r+0x1c>)
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	4608      	mov	r0, r1
 8017fb6:	602b      	str	r3, [r5, #0]
 8017fb8:	f7ea f91b 	bl	80021f2 <_isatty>
 8017fbc:	1c43      	adds	r3, r0, #1
 8017fbe:	d102      	bne.n	8017fc6 <_isatty_r+0x1a>
 8017fc0:	682b      	ldr	r3, [r5, #0]
 8017fc2:	b103      	cbz	r3, 8017fc6 <_isatty_r+0x1a>
 8017fc4:	6023      	str	r3, [r4, #0]
 8017fc6:	bd38      	pop	{r3, r4, r5, pc}
 8017fc8:	20014ac0 	.word	0x20014ac0

08017fcc <_realloc_r>:
 8017fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fce:	4607      	mov	r7, r0
 8017fd0:	4614      	mov	r4, r2
 8017fd2:	460e      	mov	r6, r1
 8017fd4:	b921      	cbnz	r1, 8017fe0 <_realloc_r+0x14>
 8017fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017fda:	4611      	mov	r1, r2
 8017fdc:	f7fe bd6a 	b.w	8016ab4 <_malloc_r>
 8017fe0:	b922      	cbnz	r2, 8017fec <_realloc_r+0x20>
 8017fe2:	f7ff fb1d 	bl	8017620 <_free_r>
 8017fe6:	4625      	mov	r5, r4
 8017fe8:	4628      	mov	r0, r5
 8017fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fec:	f000 f858 	bl	80180a0 <_malloc_usable_size_r>
 8017ff0:	42a0      	cmp	r0, r4
 8017ff2:	d20f      	bcs.n	8018014 <_realloc_r+0x48>
 8017ff4:	4621      	mov	r1, r4
 8017ff6:	4638      	mov	r0, r7
 8017ff8:	f7fe fd5c 	bl	8016ab4 <_malloc_r>
 8017ffc:	4605      	mov	r5, r0
 8017ffe:	2800      	cmp	r0, #0
 8018000:	d0f2      	beq.n	8017fe8 <_realloc_r+0x1c>
 8018002:	4631      	mov	r1, r6
 8018004:	4622      	mov	r2, r4
 8018006:	f7fe fd24 	bl	8016a52 <memcpy>
 801800a:	4631      	mov	r1, r6
 801800c:	4638      	mov	r0, r7
 801800e:	f7ff fb07 	bl	8017620 <_free_r>
 8018012:	e7e9      	b.n	8017fe8 <_realloc_r+0x1c>
 8018014:	4635      	mov	r5, r6
 8018016:	e7e7      	b.n	8017fe8 <_realloc_r+0x1c>

08018018 <_raise_r>:
 8018018:	291f      	cmp	r1, #31
 801801a:	b538      	push	{r3, r4, r5, lr}
 801801c:	4604      	mov	r4, r0
 801801e:	460d      	mov	r5, r1
 8018020:	d904      	bls.n	801802c <_raise_r+0x14>
 8018022:	2316      	movs	r3, #22
 8018024:	6003      	str	r3, [r0, #0]
 8018026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801802a:	bd38      	pop	{r3, r4, r5, pc}
 801802c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801802e:	b112      	cbz	r2, 8018036 <_raise_r+0x1e>
 8018030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018034:	b94b      	cbnz	r3, 801804a <_raise_r+0x32>
 8018036:	4620      	mov	r0, r4
 8018038:	f000 f830 	bl	801809c <_getpid_r>
 801803c:	462a      	mov	r2, r5
 801803e:	4601      	mov	r1, r0
 8018040:	4620      	mov	r0, r4
 8018042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018046:	f000 b817 	b.w	8018078 <_kill_r>
 801804a:	2b01      	cmp	r3, #1
 801804c:	d00a      	beq.n	8018064 <_raise_r+0x4c>
 801804e:	1c59      	adds	r1, r3, #1
 8018050:	d103      	bne.n	801805a <_raise_r+0x42>
 8018052:	2316      	movs	r3, #22
 8018054:	6003      	str	r3, [r0, #0]
 8018056:	2001      	movs	r0, #1
 8018058:	e7e7      	b.n	801802a <_raise_r+0x12>
 801805a:	2400      	movs	r4, #0
 801805c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018060:	4628      	mov	r0, r5
 8018062:	4798      	blx	r3
 8018064:	2000      	movs	r0, #0
 8018066:	e7e0      	b.n	801802a <_raise_r+0x12>

08018068 <raise>:
 8018068:	4b02      	ldr	r3, [pc, #8]	; (8018074 <raise+0xc>)
 801806a:	4601      	mov	r1, r0
 801806c:	6818      	ldr	r0, [r3, #0]
 801806e:	f7ff bfd3 	b.w	8018018 <_raise_r>
 8018072:	bf00      	nop
 8018074:	200004b4 	.word	0x200004b4

08018078 <_kill_r>:
 8018078:	b538      	push	{r3, r4, r5, lr}
 801807a:	4d07      	ldr	r5, [pc, #28]	; (8018098 <_kill_r+0x20>)
 801807c:	2300      	movs	r3, #0
 801807e:	4604      	mov	r4, r0
 8018080:	4608      	mov	r0, r1
 8018082:	4611      	mov	r1, r2
 8018084:	602b      	str	r3, [r5, #0]
 8018086:	f7ea f85f 	bl	8002148 <_kill>
 801808a:	1c43      	adds	r3, r0, #1
 801808c:	d102      	bne.n	8018094 <_kill_r+0x1c>
 801808e:	682b      	ldr	r3, [r5, #0]
 8018090:	b103      	cbz	r3, 8018094 <_kill_r+0x1c>
 8018092:	6023      	str	r3, [r4, #0]
 8018094:	bd38      	pop	{r3, r4, r5, pc}
 8018096:	bf00      	nop
 8018098:	20014ac0 	.word	0x20014ac0

0801809c <_getpid_r>:
 801809c:	f7ea b84c 	b.w	8002138 <_getpid>

080180a0 <_malloc_usable_size_r>:
 80180a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180a4:	1f18      	subs	r0, r3, #4
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	bfbc      	itt	lt
 80180aa:	580b      	ldrlt	r3, [r1, r0]
 80180ac:	18c0      	addlt	r0, r0, r3
 80180ae:	4770      	bx	lr

080180b0 <_init>:
 80180b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180b2:	bf00      	nop
 80180b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180b6:	bc08      	pop	{r3}
 80180b8:	469e      	mov	lr, r3
 80180ba:	4770      	bx	lr

080180bc <_fini>:
 80180bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180be:	bf00      	nop
 80180c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180c2:	bc08      	pop	{r3}
 80180c4:	469e      	mov	lr, r3
 80180c6:	4770      	bx	lr
