
Lan_zagatovka_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000acc0  08017fac  08017fac  00027fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022c6c  08022c6c  00040518  2**0
                  CONTENTS
  4 .ARM          00000008  08022c6c  08022c6c  00032c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022c74  08022c74  00040518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022c74  08022c74  00032c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022c78  08022c78  00032c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  20000000  08022c7c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040518  2**0
                  CONTENTS
 10 .bss          000131c8  20000518  20000518  00040518  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200136e0  200136e0  00040518  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040518  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047eb7  00000000  00000000  00040548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008205  00000000  00000000  000883ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00090608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002198  00000000  00000000  000928a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001172d  00000000  00000000  00094a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035400  00000000  00000000  000a616d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2fbe  00000000  00000000  000db56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ce52b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c44  00000000  00000000  001ce580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000518 	.word	0x20000518
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017f94 	.word	0x08017f94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000051c 	.word	0x2000051c
 80001cc:	08017f94 	.word	0x08017f94

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"json","formjson","menu"};
char const **TAGS = TAGCHAR;
int f = 0;
//
uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b097      	sub	sp, #92	; 0x5c
 800059c:	af0c      	add	r7, sp, #48	; 0x30
 800059e:	6278      	str	r0, [r7, #36]	; 0x24
 80005a0:	6239      	str	r1, [r7, #32]
 80005a2:	61fa      	str	r2, [r7, #28]
 80005a4:	837b      	strh	r3, [r7, #26]
	//printf("+++ jsongo +++ %d \n", jsongo);
	switch (iIndex) {
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 85cc 	beq.w	8001146 <ssi_handler+0xbae>
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 85d2 	bgt.w	800115a <ssi_handler+0xbc2>
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <ssi_handler+0x30>
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 844c 	beq.w	8000e5c <ssi_handler+0x8c4>
		case 2:
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
			return strlen(pcInsert);
			break;
		default :
			break;
 80005c4:	f000 bdc9 	b.w	800115a <ssi_handler+0xbc2>
		if (variable == numpin) {
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <ssi_handler+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b3a      	cmp	r3, #58	; 0x3a
 80005ce:	d104      	bne.n	80005da <ssi_handler+0x42>
			variable = 0;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <ssi_handler+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
			break;
 80005d6:	f000 bdc1 	b.w	800115c <ssi_handler+0xbc4>
			if(jsongo == 1){
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <ssi_handler+0x50>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d17d      	bne.n	80006de <ssi_handler+0x146>
				while(variable3 <= numpintopin-1){
 80005e2:	e075      	b.n	80006d0 <ssi_handler+0x138>
 80005e4:	20000538 	.word	0x20000538
 80005e8:	2000053c 	.word	0x2000053c
						if(variable3 == 0) {
 80005ec:	4baa      	ldr	r3, [pc, #680]	; (8000898 <ssi_handler+0x300>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10b      	bne.n	800060c <ssi_handler+0x74>
							strcat(listaction, "{");
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <ssi_handler+0x304>)
 80005f6:	f7ff fdf5 	bl	80001e4 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4ba7      	ldr	r3, [pc, #668]	; (800089c <ssi_handler+0x304>)
 8000600:	4413      	add	r3, r2
 8000602:	49a7      	ldr	r1, [pc, #668]	; (80008a0 <ssi_handler+0x308>)
 8000604:	461a      	mov	r2, r3
 8000606:	460b      	mov	r3, r1
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	8013      	strh	r3, [r2, #0]
						if(variable == TO[variable3].idin && TO[variable3].flag == 1){
 800060c:	4ba2      	ldr	r3, [pc, #648]	; (8000898 <ssi_handler+0x300>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	49a4      	ldr	r1, [pc, #656]	; (80008a4 <ssi_handler+0x30c>)
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4ba2      	ldr	r3, [pc, #648]	; (80008a8 <ssi_handler+0x310>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d125      	bne.n	8000672 <ssi_handler+0xda>
 8000626:	4b9c      	ldr	r3, [pc, #624]	; (8000898 <ssi_handler+0x300>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	499e      	ldr	r1, [pc, #632]	; (80008a4 <ssi_handler+0x30c>)
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3308      	adds	r3, #8
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d119      	bne.n	8000672 <ssi_handler+0xda>
							sprintf(name3, "\"%s\":%d,",tp[TO[variable3].idout].pins, variable3);
 800063e:	4b96      	ldr	r3, [pc, #600]	; (8000898 <ssi_handler+0x300>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4998      	ldr	r1, [pc, #608]	; (80008a4 <ssi_handler+0x30c>)
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	3304      	adds	r3, #4
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4a94      	ldr	r2, [pc, #592]	; (80008ac <ssi_handler+0x314>)
 800065c:	441a      	add	r2, r3
 800065e:	4b8e      	ldr	r3, [pc, #568]	; (8000898 <ssi_handler+0x300>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4993      	ldr	r1, [pc, #588]	; (80008b0 <ssi_handler+0x318>)
 8000664:	4893      	ldr	r0, [pc, #588]	; (80008b4 <ssi_handler+0x31c>)
 8000666:	f016 fb6d 	bl	8016d44 <siprintf>
							strcat(listaction, name3);
 800066a:	4992      	ldr	r1, [pc, #584]	; (80008b4 <ssi_handler+0x31c>)
 800066c:	488b      	ldr	r0, [pc, #556]	; (800089c <ssi_handler+0x304>)
 800066e:	f016 fbcc 	bl	8016e0a <strcat>
						if(variable3 == numpintopin-1 &&  strcmp(listaction[strlen(listaction)-1], '{') > 0){
 8000672:	4b89      	ldr	r3, [pc, #548]	; (8000898 <ssi_handler+0x300>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b45      	cmp	r3, #69	; 0x45
 8000678:	d115      	bne.n	80006a6 <ssi_handler+0x10e>
 800067a:	4888      	ldr	r0, [pc, #544]	; (800089c <ssi_handler+0x304>)
 800067c:	f7ff fdb2 	bl	80001e4 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	3b01      	subs	r3, #1
 8000684:	4a85      	ldr	r2, [pc, #532]	; (800089c <ssi_handler+0x304>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	217b      	movs	r1, #123	; 0x7b
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fda0 	bl	80001d0 <strcmp>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	dd07      	ble.n	80006a6 <ssi_handler+0x10e>
							listaction[strlen(listaction)-1] = '\0';
 8000696:	4881      	ldr	r0, [pc, #516]	; (800089c <ssi_handler+0x304>)
 8000698:	f7ff fda4 	bl	80001e4 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	3b01      	subs	r3, #1
 80006a0:	4a7e      	ldr	r2, [pc, #504]	; (800089c <ssi_handler+0x304>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	54d1      	strb	r1, [r2, r3]
						if(variable3 == numpintopin-1) {
 80006a6:	4b7c      	ldr	r3, [pc, #496]	; (8000898 <ssi_handler+0x300>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b45      	cmp	r3, #69	; 0x45
 80006ac:	d10b      	bne.n	80006c6 <ssi_handler+0x12e>
							strcat(listaction, "}");
 80006ae:	487b      	ldr	r0, [pc, #492]	; (800089c <ssi_handler+0x304>)
 80006b0:	f7ff fd98 	bl	80001e4 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b78      	ldr	r3, [pc, #480]	; (800089c <ssi_handler+0x304>)
 80006ba:	4413      	add	r3, r2
 80006bc:	497e      	ldr	r1, [pc, #504]	; (80008b8 <ssi_handler+0x320>)
 80006be:	461a      	mov	r2, r3
 80006c0:	460b      	mov	r3, r1
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	8013      	strh	r3, [r2, #0]
						variable3++;
 80006c6:	4b74      	ldr	r3, [pc, #464]	; (8000898 <ssi_handler+0x300>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a72      	ldr	r2, [pc, #456]	; (8000898 <ssi_handler+0x300>)
 80006ce:	6013      	str	r3, [r2, #0]
				while(variable3 <= numpintopin-1){
 80006d0:	4b71      	ldr	r3, [pc, #452]	; (8000898 <ssi_handler+0x300>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b45      	cmp	r3, #69	; 0x45
 80006d6:	dd89      	ble.n	80005ec <ssi_handler+0x54>
				variable3 = 0;
 80006d8:	4b6f      	ldr	r3, [pc, #444]	; (8000898 <ssi_handler+0x300>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
			if (variable == 0) {
 80006de:	4b72      	ldr	r3, [pc, #456]	; (80008a8 <ssi_handler+0x310>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f040 8144 	bne.w	8000970 <ssi_handler+0x3d8>
				if(jsongo == 1){
 80006e8:	4b74      	ldr	r3, [pc, #464]	; (80008bc <ssi_handler+0x324>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d17e      	bne.n	80007ee <ssi_handler+0x256>
				sprintf(pcInsert,
 80006f0:	4b6d      	ldr	r3, [pc, #436]	; (80008a8 <ssi_handler+0x310>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a72      	ldr	r2, [pc, #456]	; (80008c0 <ssi_handler+0x328>)
 80006f6:	2168      	movs	r1, #104	; 0x68
 80006f8:	fb01 f303 	mul.w	r3, r1, r3
 80006fc:	4413      	add	r3, r2
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <ssi_handler+0x310>)
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000708:	4b67      	ldr	r3, [pc, #412]	; (80008a8 <ssi_handler+0x310>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4a65      	ldr	r2, [pc, #404]	; (80008ac <ssi_handler+0x314>)
 8000716:	1899      	adds	r1, r3, r2
 8000718:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 800071a:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <ssi_handler+0x310>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2268      	movs	r2, #104	; 0x68
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	3318      	adds	r3, #24
 8000726:	4a66      	ldr	r2, [pc, #408]	; (80008c0 <ssi_handler+0x328>)
 8000728:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 800072a:	4b5f      	ldr	r3, [pc, #380]	; (80008a8 <ssi_handler+0x310>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a64      	ldr	r2, [pc, #400]	; (80008c0 <ssi_handler+0x328>)
 8000730:	2168      	movs	r1, #104	; 0x68
 8000732:	fb01 f303 	mul.w	r3, r1, r3
 8000736:	4413      	add	r3, r2
 8000738:	332c      	adds	r3, #44	; 0x2c
 800073a:	681d      	ldr	r5, [r3, #0]
 800073c:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <ssi_handler+0x310>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a5f      	ldr	r2, [pc, #380]	; (80008c0 <ssi_handler+0x328>)
 8000742:	2168      	movs	r1, #104	; 0x68
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	4413      	add	r3, r2
 800074a:	3330      	adds	r3, #48	; 0x30
 800074c:	681e      	ldr	r6, [r3, #0]
 800074e:	4b56      	ldr	r3, [pc, #344]	; (80008a8 <ssi_handler+0x310>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a5b      	ldr	r2, [pc, #364]	; (80008c0 <ssi_handler+0x328>)
 8000754:	2168      	movs	r1, #104	; 0x68
 8000756:	fb01 f303 	mul.w	r3, r1, r3
 800075a:	4413      	add	r3, r2
 800075c:	3334      	adds	r3, #52	; 0x34
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	4b51      	ldr	r3, [pc, #324]	; (80008a8 <ssi_handler+0x310>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a56      	ldr	r2, [pc, #344]	; (80008c0 <ssi_handler+0x328>)
 8000768:	2168      	movs	r1, #104	; 0x68
 800076a:	fb01 f303 	mul.w	r3, r1, r3
 800076e:	4413      	add	r3, r2
 8000770:	3338      	adds	r3, #56	; 0x38
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	6079      	str	r1, [r7, #4]
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ssi_handler+0x310>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a51      	ldr	r2, [pc, #324]	; (80008c0 <ssi_handler+0x328>)
 800077c:	2168      	movs	r1, #104	; 0x68
 800077e:	fb01 f303 	mul.w	r3, r1, r3
 8000782:	4413      	add	r3, r2
 8000784:	333c      	adds	r3, #60	; 0x3c
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <ssi_handler+0x310>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a4c      	ldr	r2, [pc, #304]	; (80008c0 <ssi_handler+0x328>)
 8000790:	2168      	movs	r1, #104	; 0x68
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	3340      	adds	r3, #64	; 0x40
 800079a:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <ssi_handler+0x310>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2268      	movs	r2, #104	; 0x68
 80007a2:	fb02 f303 	mul.w	r3, r2, r3
 80007a6:	3340      	adds	r3, #64	; 0x40
 80007a8:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <ssi_handler+0x328>)
 80007aa:	4413      	add	r3, r2
 80007ac:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <ssi_handler+0x310>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4843      	ldr	r0, [pc, #268]	; (80008c0 <ssi_handler+0x328>)
 80007b4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80007b8:	fb0c f303 	mul.w	r3, ip, r3
 80007bc:	4403      	add	r3, r0
 80007be:	3364      	adds	r3, #100	; 0x64
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	930a      	str	r3, [sp, #40]	; 0x28
 80007c4:	9209      	str	r2, [sp, #36]	; 0x24
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <ssi_handler+0x304>)
 80007c8:	9308      	str	r3, [sp, #32]
 80007ca:	9107      	str	r1, [sp, #28]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	9306      	str	r3, [sp, #24]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	9105      	str	r1, [sp, #20]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	9204      	str	r2, [sp, #16]
 80007d8:	9603      	str	r6, [sp, #12]
 80007da:	9502      	str	r5, [sp, #8]
 80007dc:	9401      	str	r4, [sp, #4]
 80007de:	68f9      	ldr	r1, [r7, #12]
 80007e0:	9100      	str	r1, [sp, #0]
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4937      	ldr	r1, [pc, #220]	; (80008c4 <ssi_handler+0x32c>)
 80007e8:	6a38      	ldr	r0, [r7, #32]
 80007ea:	f016 faab 	bl	8016d44 <siprintf>
				if(jsongo == 2){
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <ssi_handler+0x324>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	f040 8091 	bne.w	800091a <ssi_handler+0x382>
				sprintf(pcInsert,
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <ssi_handler+0x310>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <ssi_handler+0x328>)
 80007fe:	2168      	movs	r1, #104	; 0x68
 8000800:	fb01 f303 	mul.w	r3, r1, r3
 8000804:	4413      	add	r3, r2
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <ssi_handler+0x310>)
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <ssi_handler+0x310>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4a23      	ldr	r2, [pc, #140]	; (80008ac <ssi_handler+0x314>)
 800081e:	4413      	add	r3, r2
						T[variable].ptype,
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <ssi_handler+0x310>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	2168      	movs	r1, #104	; 0x68
 8000826:	fb01 f202 	mul.w	r2, r1, r2
 800082a:	3218      	adds	r2, #24
 800082c:	4924      	ldr	r1, [pc, #144]	; (80008c0 <ssi_handler+0x328>)
 800082e:	440a      	add	r2, r1
				sprintf(pcInsert,
 8000830:	491d      	ldr	r1, [pc, #116]	; (80008a8 <ssi_handler+0x310>)
 8000832:	6809      	ldr	r1, [r1, #0]
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <ssi_handler+0x328>)
 8000836:	2468      	movs	r4, #104	; 0x68
 8000838:	fb04 f101 	mul.w	r1, r4, r1
 800083c:	4401      	add	r1, r0
 800083e:	3104      	adds	r1, #4
 8000840:	6809      	ldr	r1, [r1, #0]
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <ssi_handler+0x310>)
 8000844:	6800      	ldr	r0, [r0, #0]
 8000846:	4c1e      	ldr	r4, [pc, #120]	; (80008c0 <ssi_handler+0x328>)
 8000848:	2568      	movs	r5, #104	; 0x68
 800084a:	fb05 f000 	mul.w	r0, r5, r0
 800084e:	4420      	add	r0, r4
 8000850:	3008      	adds	r0, #8
 8000852:	6800      	ldr	r0, [r0, #0]
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	4c14      	ldr	r4, [pc, #80]	; (80008a8 <ssi_handler+0x310>)
 8000858:	6824      	ldr	r4, [r4, #0]
 800085a:	4d19      	ldr	r5, [pc, #100]	; (80008c0 <ssi_handler+0x328>)
 800085c:	2668      	movs	r6, #104	; 0x68
 800085e:	fb06 f404 	mul.w	r4, r6, r4
 8000862:	442c      	add	r4, r5
 8000864:	340c      	adds	r4, #12
 8000866:	6820      	ldr	r0, [r4, #0]
 8000868:	60b8      	str	r0, [r7, #8]
 800086a:	4d0f      	ldr	r5, [pc, #60]	; (80008a8 <ssi_handler+0x310>)
 800086c:	682d      	ldr	r5, [r5, #0]
 800086e:	4e14      	ldr	r6, [pc, #80]	; (80008c0 <ssi_handler+0x328>)
 8000870:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000874:	fb0c f505 	mul.w	r5, ip, r5
 8000878:	4435      	add	r5, r6
 800087a:	3510      	adds	r5, #16
 800087c:	682d      	ldr	r5, [r5, #0]
 800087e:	4e0a      	ldr	r6, [pc, #40]	; (80008a8 <ssi_handler+0x310>)
 8000880:	6836      	ldr	r6, [r6, #0]
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <ssi_handler+0x328>)
 8000884:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000888:	fb0c f606 	mul.w	r6, ip, r6
 800088c:	4406      	add	r6, r0
 800088e:	3614      	adds	r6, #20
 8000890:	6836      	ldr	r6, [r6, #0]
						T[variable].info,
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <ssi_handler+0x310>)
 8000894:	6800      	ldr	r0, [r0, #0]
 8000896:	e017      	b.n	80008c8 <ssi_handler+0x330>
 8000898:	20000534 	.word	0x20000534
 800089c:	20009928 	.word	0x20009928
 80008a0:	08017fc8 	.word	0x08017fc8
 80008a4:	20005540 	.word	0x20005540
 80008a8:	20000538 	.word	0x20000538
 80008ac:	20000000 	.word	0x20000000
 80008b0:	08017fcc 	.word	0x08017fcc
 80008b4:	20005888 	.word	0x20005888
 80008b8:	08017fd8 	.word	0x08017fd8
 80008bc:	2000053c 	.word	0x2000053c
 80008c0:	20005894 	.word	0x20005894
 80008c4:	08017fdc 	.word	0x08017fdc
 80008c8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80008cc:	fb0c fc00 	mul.w	ip, ip, r0
 80008d0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80008d4:	4820      	ldr	r0, [pc, #128]	; (8000958 <ssi_handler+0x3c0>)
 80008d6:	4484      	add	ip, r0
 80008d8:	f10c 0004 	add.w	r0, ip, #4
 80008dc:	6078      	str	r0, [r7, #4]
				sprintf(pcInsert,
 80008de:	481f      	ldr	r0, [pc, #124]	; (800095c <ssi_handler+0x3c4>)
 80008e0:	6800      	ldr	r0, [r0, #0]
 80008e2:	4c1d      	ldr	r4, [pc, #116]	; (8000958 <ssi_handler+0x3c0>)
 80008e4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80008e8:	fb0c fc00 	mul.w	ip, ip, r0
 80008ec:	44a4      	add	ip, r4
 80008ee:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80008f2:	f8dc 0000 	ldr.w	r0, [ip]
 80008f6:	9008      	str	r0, [sp, #32]
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	9007      	str	r0, [sp, #28]
 80008fc:	9606      	str	r6, [sp, #24]
 80008fe:	9505      	str	r5, [sp, #20]
 8000900:	68b8      	ldr	r0, [r7, #8]
 8000902:	9004      	str	r0, [sp, #16]
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	9003      	str	r0, [sp, #12]
 8000908:	9102      	str	r1, [sp, #8]
 800090a:	9201      	str	r2, [sp, #4]
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	4913      	ldr	r1, [pc, #76]	; (8000960 <ssi_handler+0x3c8>)
 8000914:	6a38      	ldr	r0, [r7, #32]
 8000916:	f016 fa15 	bl	8016d44 <siprintf>
				if(jsongo == 3){
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <ssi_handler+0x3cc>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b03      	cmp	r3, #3
 8000920:	f040 8276 	bne.w	8000e10 <ssi_handler+0x878>
					sprintf(pcInsert,
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <ssi_handler+0x3c4>)
 8000926:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <ssi_handler+0x3c4>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <ssi_handler+0x3d0>)
 8000936:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <ssi_handler+0x3c4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <ssi_handler+0x3c0>)
 800093e:	2468      	movs	r4, #104	; 0x68
 8000940:	fb04 f303 	mul.w	r3, r4, r3
 8000944:	4403      	add	r3, r0
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	4613      	mov	r3, r2
 800094c:	460a      	mov	r2, r1
 800094e:	4907      	ldr	r1, [pc, #28]	; (800096c <ssi_handler+0x3d4>)
 8000950:	6a38      	ldr	r0, [r7, #32]
 8000952:	f016 f9f7 	bl	8016d44 <siprintf>
 8000956:	e25b      	b.n	8000e10 <ssi_handler+0x878>
 8000958:	20005894 	.word	0x20005894
 800095c:	20000538 	.word	0x20000538
 8000960:	08018078 	.word	0x08018078
 8000964:	2000053c 	.word	0x2000053c
 8000968:	20000000 	.word	0x20000000
 800096c:	080180f4 	.word	0x080180f4
			} else if (variable == numpin-1) {
 8000970:	4b91      	ldr	r3, [pc, #580]	; (8000bb8 <ssi_handler+0x620>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b39      	cmp	r3, #57	; 0x39
 8000976:	f040 812f 	bne.w	8000bd8 <ssi_handler+0x640>
				if(jsongo == 1){
 800097a:	4b90      	ldr	r3, [pc, #576]	; (8000bbc <ssi_handler+0x624>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d17e      	bne.n	8000a80 <ssi_handler+0x4e8>
				sprintf(pcInsert,
 8000982:	4b8d      	ldr	r3, [pc, #564]	; (8000bb8 <ssi_handler+0x620>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a8e      	ldr	r2, [pc, #568]	; (8000bc0 <ssi_handler+0x628>)
 8000988:	2168      	movs	r1, #104	; 0x68
 800098a:	fb01 f303 	mul.w	r3, r1, r3
 800098e:	4413      	add	r3, r2
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	4b88      	ldr	r3, [pc, #544]	; (8000bb8 <ssi_handler+0x620>)
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 800099a:	4b87      	ldr	r3, [pc, #540]	; (8000bb8 <ssi_handler+0x620>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <ssi_handler+0x62c>)
 80009a8:	1899      	adds	r1, r3, r2
 80009aa:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 80009ac:	4b82      	ldr	r3, [pc, #520]	; (8000bb8 <ssi_handler+0x620>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2268      	movs	r2, #104	; 0x68
 80009b2:	fb02 f303 	mul.w	r3, r2, r3
 80009b6:	3318      	adds	r3, #24
 80009b8:	4a81      	ldr	r2, [pc, #516]	; (8000bc0 <ssi_handler+0x628>)
 80009ba:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 80009bc:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <ssi_handler+0x620>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a7f      	ldr	r2, [pc, #508]	; (8000bc0 <ssi_handler+0x628>)
 80009c2:	2168      	movs	r1, #104	; 0x68
 80009c4:	fb01 f303 	mul.w	r3, r1, r3
 80009c8:	4413      	add	r3, r2
 80009ca:	332c      	adds	r3, #44	; 0x2c
 80009cc:	681d      	ldr	r5, [r3, #0]
 80009ce:	4b7a      	ldr	r3, [pc, #488]	; (8000bb8 <ssi_handler+0x620>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a7b      	ldr	r2, [pc, #492]	; (8000bc0 <ssi_handler+0x628>)
 80009d4:	2168      	movs	r1, #104	; 0x68
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	3330      	adds	r3, #48	; 0x30
 80009de:	681e      	ldr	r6, [r3, #0]
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <ssi_handler+0x620>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a76      	ldr	r2, [pc, #472]	; (8000bc0 <ssi_handler+0x628>)
 80009e6:	2168      	movs	r1, #104	; 0x68
 80009e8:	fb01 f303 	mul.w	r3, r1, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	3334      	adds	r3, #52	; 0x34
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	60ba      	str	r2, [r7, #8]
 80009f4:	4b70      	ldr	r3, [pc, #448]	; (8000bb8 <ssi_handler+0x620>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a71      	ldr	r2, [pc, #452]	; (8000bc0 <ssi_handler+0x628>)
 80009fa:	2168      	movs	r1, #104	; 0x68
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	3338      	adds	r3, #56	; 0x38
 8000a04:	6819      	ldr	r1, [r3, #0]
 8000a06:	6079      	str	r1, [r7, #4]
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <ssi_handler+0x620>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a6c      	ldr	r2, [pc, #432]	; (8000bc0 <ssi_handler+0x628>)
 8000a0e:	2168      	movs	r1, #104	; 0x68
 8000a10:	fb01 f303 	mul.w	r3, r1, r3
 8000a14:	4413      	add	r3, r2
 8000a16:	333c      	adds	r3, #60	; 0x3c
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b66      	ldr	r3, [pc, #408]	; (8000bb8 <ssi_handler+0x620>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a67      	ldr	r2, [pc, #412]	; (8000bc0 <ssi_handler+0x628>)
 8000a22:	2168      	movs	r1, #104	; 0x68
 8000a24:	fb01 f303 	mul.w	r3, r1, r3
 8000a28:	4413      	add	r3, r2
 8000a2a:	3340      	adds	r3, #64	; 0x40
 8000a2c:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000a2e:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <ssi_handler+0x620>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2268      	movs	r2, #104	; 0x68
 8000a34:	fb02 f303 	mul.w	r3, r2, r3
 8000a38:	3340      	adds	r3, #64	; 0x40
 8000a3a:	4a61      	ldr	r2, [pc, #388]	; (8000bc0 <ssi_handler+0x628>)
 8000a3c:	4413      	add	r3, r2
 8000a3e:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000a40:	4b5d      	ldr	r3, [pc, #372]	; (8000bb8 <ssi_handler+0x620>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	485e      	ldr	r0, [pc, #376]	; (8000bc0 <ssi_handler+0x628>)
 8000a46:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000a4a:	fb0c f303 	mul.w	r3, ip, r3
 8000a4e:	4403      	add	r3, r0
 8000a50:	3364      	adds	r3, #100	; 0x64
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	930a      	str	r3, [sp, #40]	; 0x28
 8000a56:	9209      	str	r2, [sp, #36]	; 0x24
 8000a58:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <ssi_handler+0x630>)
 8000a5a:	9308      	str	r3, [sp, #32]
 8000a5c:	9107      	str	r1, [sp, #28]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	9306      	str	r3, [sp, #24]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	9105      	str	r1, [sp, #20]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	9204      	str	r2, [sp, #16]
 8000a6a:	9603      	str	r6, [sp, #12]
 8000a6c:	9502      	str	r5, [sp, #8]
 8000a6e:	9401      	str	r4, [sp, #4]
 8000a70:	68f9      	ldr	r1, [r7, #12]
 8000a72:	9100      	str	r1, [sp, #0]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	4954      	ldr	r1, [pc, #336]	; (8000bcc <ssi_handler+0x634>)
 8000a7a:	6a38      	ldr	r0, [r7, #32]
 8000a7c:	f016 f962 	bl	8016d44 <siprintf>
				if(jsongo == 2){
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <ssi_handler+0x624>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d177      	bne.n	8000b78 <ssi_handler+0x5e0>
					sprintf(pcInsert,
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <ssi_handler+0x620>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <ssi_handler+0x628>)
 8000a8e:	2168      	movs	r1, #104	; 0x68
 8000a90:	fb01 f303 	mul.w	r3, r1, r3
 8000a94:	4413      	add	r3, r2
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <ssi_handler+0x620>)
 8000a9c:	6819      	ldr	r1, [r3, #0]
 8000a9e:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <ssi_handler+0x620>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <ssi_handler+0x62c>)
 8000aae:	4413      	add	r3, r2
							T[variable].ptype,
 8000ab0:	4a41      	ldr	r2, [pc, #260]	; (8000bb8 <ssi_handler+0x620>)
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	2168      	movs	r1, #104	; 0x68
 8000ab6:	fb01 f202 	mul.w	r2, r1, r2
 8000aba:	3218      	adds	r2, #24
 8000abc:	4940      	ldr	r1, [pc, #256]	; (8000bc0 <ssi_handler+0x628>)
 8000abe:	440a      	add	r2, r1
					sprintf(pcInsert,
 8000ac0:	493d      	ldr	r1, [pc, #244]	; (8000bb8 <ssi_handler+0x620>)
 8000ac2:	6809      	ldr	r1, [r1, #0]
 8000ac4:	483e      	ldr	r0, [pc, #248]	; (8000bc0 <ssi_handler+0x628>)
 8000ac6:	2468      	movs	r4, #104	; 0x68
 8000ac8:	fb04 f101 	mul.w	r1, r4, r1
 8000acc:	4401      	add	r1, r0
 8000ace:	3104      	adds	r1, #4
 8000ad0:	6809      	ldr	r1, [r1, #0]
 8000ad2:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <ssi_handler+0x620>)
 8000ad4:	6800      	ldr	r0, [r0, #0]
 8000ad6:	4c3a      	ldr	r4, [pc, #232]	; (8000bc0 <ssi_handler+0x628>)
 8000ad8:	2568      	movs	r5, #104	; 0x68
 8000ada:	fb05 f000 	mul.w	r0, r5, r0
 8000ade:	4420      	add	r0, r4
 8000ae0:	3008      	adds	r0, #8
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	4c34      	ldr	r4, [pc, #208]	; (8000bb8 <ssi_handler+0x620>)
 8000ae8:	6824      	ldr	r4, [r4, #0]
 8000aea:	4d35      	ldr	r5, [pc, #212]	; (8000bc0 <ssi_handler+0x628>)
 8000aec:	2668      	movs	r6, #104	; 0x68
 8000aee:	fb06 f404 	mul.w	r4, r6, r4
 8000af2:	442c      	add	r4, r5
 8000af4:	340c      	adds	r4, #12
 8000af6:	6820      	ldr	r0, [r4, #0]
 8000af8:	60b8      	str	r0, [r7, #8]
 8000afa:	4d2f      	ldr	r5, [pc, #188]	; (8000bb8 <ssi_handler+0x620>)
 8000afc:	682d      	ldr	r5, [r5, #0]
 8000afe:	4e30      	ldr	r6, [pc, #192]	; (8000bc0 <ssi_handler+0x628>)
 8000b00:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b04:	fb0c f505 	mul.w	r5, ip, r5
 8000b08:	4435      	add	r5, r6
 8000b0a:	3510      	adds	r5, #16
 8000b0c:	682d      	ldr	r5, [r5, #0]
 8000b0e:	4e2a      	ldr	r6, [pc, #168]	; (8000bb8 <ssi_handler+0x620>)
 8000b10:	6836      	ldr	r6, [r6, #0]
 8000b12:	482b      	ldr	r0, [pc, #172]	; (8000bc0 <ssi_handler+0x628>)
 8000b14:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b18:	fb0c f606 	mul.w	r6, ip, r6
 8000b1c:	4406      	add	r6, r0
 8000b1e:	3614      	adds	r6, #20
 8000b20:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 8000b22:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <ssi_handler+0x620>)
 8000b24:	6800      	ldr	r0, [r0, #0]
 8000b26:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b2a:	fb0c fc00 	mul.w	ip, ip, r0
 8000b2e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <ssi_handler+0x628>)
 8000b34:	4484      	add	ip, r0
 8000b36:	f10c 0004 	add.w	r0, ip, #4
 8000b3a:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8000b3c:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <ssi_handler+0x620>)
 8000b3e:	6800      	ldr	r0, [r0, #0]
 8000b40:	4c1f      	ldr	r4, [pc, #124]	; (8000bc0 <ssi_handler+0x628>)
 8000b42:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b46:	fb0c fc00 	mul.w	ip, ip, r0
 8000b4a:	44a4      	add	ip, r4
 8000b4c:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000b50:	f8dc 0000 	ldr.w	r0, [ip]
 8000b54:	9008      	str	r0, [sp, #32]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	9007      	str	r0, [sp, #28]
 8000b5a:	9606      	str	r6, [sp, #24]
 8000b5c:	9505      	str	r5, [sp, #20]
 8000b5e:	68b8      	ldr	r0, [r7, #8]
 8000b60:	9004      	str	r0, [sp, #16]
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	9003      	str	r0, [sp, #12]
 8000b66:	9102      	str	r1, [sp, #8]
 8000b68:	9201      	str	r2, [sp, #4]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4917      	ldr	r1, [pc, #92]	; (8000bd0 <ssi_handler+0x638>)
 8000b72:	6a38      	ldr	r0, [r7, #32]
 8000b74:	f016 f8e6 	bl	8016d44 <siprintf>
				if(jsongo == 3){
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <ssi_handler+0x624>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f040 8147 	bne.w	8000e10 <ssi_handler+0x878>
					sprintf(pcInsert,
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <ssi_handler+0x620>)
 8000b84:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <ssi_handler+0x620>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <ssi_handler+0x62c>)
 8000b94:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <ssi_handler+0x620>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <ssi_handler+0x628>)
 8000b9c:	2468      	movs	r4, #104	; 0x68
 8000b9e:	fb04 f303 	mul.w	r3, r4, r3
 8000ba2:	4403      	add	r3, r0
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	460a      	mov	r2, r1
 8000bac:	4909      	ldr	r1, [pc, #36]	; (8000bd4 <ssi_handler+0x63c>)
 8000bae:	6a38      	ldr	r0, [r7, #32]
 8000bb0:	f016 f8c8 	bl	8016d44 <siprintf>
 8000bb4:	e12c      	b.n	8000e10 <ssi_handler+0x878>
 8000bb6:	bf00      	nop
 8000bb8:	20000538 	.word	0x20000538
 8000bbc:	2000053c 	.word	0x2000053c
 8000bc0:	20005894 	.word	0x20005894
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20009928 	.word	0x20009928
 8000bcc:	08018118 	.word	0x08018118
 8000bd0:	080181b4 	.word	0x080181b4
 8000bd4:	08018230 	.word	0x08018230
				if(jsongo == 1){
 8000bd8:	4b98      	ldr	r3, [pc, #608]	; (8000e3c <ssi_handler+0x8a4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d17e      	bne.n	8000cde <ssi_handler+0x746>
				sprintf(pcInsert,
 8000be0:	4b97      	ldr	r3, [pc, #604]	; (8000e40 <ssi_handler+0x8a8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a97      	ldr	r2, [pc, #604]	; (8000e44 <ssi_handler+0x8ac>)
 8000be6:	2168      	movs	r1, #104	; 0x68
 8000be8:	fb01 f303 	mul.w	r3, r1, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b93      	ldr	r3, [pc, #588]	; (8000e40 <ssi_handler+0x8a8>)
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
 8000bf8:	4b91      	ldr	r3, [pc, #580]	; (8000e40 <ssi_handler+0x8a8>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <ssi_handler+0x8b0>)
 8000c06:	1899      	adds	r1, r3, r2
 8000c08:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	; (8000e40 <ssi_handler+0x8a8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2268      	movs	r2, #104	; 0x68
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	3318      	adds	r3, #24
 8000c16:	4a8b      	ldr	r2, [pc, #556]	; (8000e44 <ssi_handler+0x8ac>)
 8000c18:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
 8000c1a:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <ssi_handler+0x8a8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a89      	ldr	r2, [pc, #548]	; (8000e44 <ssi_handler+0x8ac>)
 8000c20:	2168      	movs	r1, #104	; 0x68
 8000c22:	fb01 f303 	mul.w	r3, r1, r3
 8000c26:	4413      	add	r3, r2
 8000c28:	332c      	adds	r3, #44	; 0x2c
 8000c2a:	681d      	ldr	r5, [r3, #0]
 8000c2c:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <ssi_handler+0x8a8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a84      	ldr	r2, [pc, #528]	; (8000e44 <ssi_handler+0x8ac>)
 8000c32:	2168      	movs	r1, #104	; 0x68
 8000c34:	fb01 f303 	mul.w	r3, r1, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	3330      	adds	r3, #48	; 0x30
 8000c3c:	681e      	ldr	r6, [r3, #0]
 8000c3e:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <ssi_handler+0x8a8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a80      	ldr	r2, [pc, #512]	; (8000e44 <ssi_handler+0x8ac>)
 8000c44:	2168      	movs	r1, #104	; 0x68
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3334      	adds	r3, #52	; 0x34
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	4b7b      	ldr	r3, [pc, #492]	; (8000e40 <ssi_handler+0x8a8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a7b      	ldr	r2, [pc, #492]	; (8000e44 <ssi_handler+0x8ac>)
 8000c58:	2168      	movs	r1, #104	; 0x68
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	3338      	adds	r3, #56	; 0x38
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	6079      	str	r1, [r7, #4]
 8000c66:	4b76      	ldr	r3, [pc, #472]	; (8000e40 <ssi_handler+0x8a8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a76      	ldr	r2, [pc, #472]	; (8000e44 <ssi_handler+0x8ac>)
 8000c6c:	2168      	movs	r1, #104	; 0x68
 8000c6e:	fb01 f303 	mul.w	r3, r1, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	333c      	adds	r3, #60	; 0x3c
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b71      	ldr	r3, [pc, #452]	; (8000e40 <ssi_handler+0x8a8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a71      	ldr	r2, [pc, #452]	; (8000e44 <ssi_handler+0x8ac>)
 8000c80:	2168      	movs	r1, #104	; 0x68
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	3340      	adds	r3, #64	; 0x40
 8000c8a:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
 8000c8c:	4b6c      	ldr	r3, [pc, #432]	; (8000e40 <ssi_handler+0x8a8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2268      	movs	r2, #104	; 0x68
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	3340      	adds	r3, #64	; 0x40
 8000c98:	4a6a      	ldr	r2, [pc, #424]	; (8000e44 <ssi_handler+0x8ac>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
 8000c9e:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <ssi_handler+0x8a8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4868      	ldr	r0, [pc, #416]	; (8000e44 <ssi_handler+0x8ac>)
 8000ca4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000ca8:	fb0c f303 	mul.w	r3, ip, r3
 8000cac:	4403      	add	r3, r0
 8000cae:	3364      	adds	r3, #100	; 0x64
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8000cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8000cb6:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <ssi_handler+0x8b4>)
 8000cb8:	9308      	str	r3, [sp, #32]
 8000cba:	9107      	str	r1, [sp, #28]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	9306      	str	r3, [sp, #24]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	9105      	str	r1, [sp, #20]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	9204      	str	r2, [sp, #16]
 8000cc8:	9603      	str	r6, [sp, #12]
 8000cca:	9502      	str	r5, [sp, #8]
 8000ccc:	9401      	str	r4, [sp, #4]
 8000cce:	68f9      	ldr	r1, [r7, #12]
 8000cd0:	9100      	str	r1, [sp, #0]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	495e      	ldr	r1, [pc, #376]	; (8000e50 <ssi_handler+0x8b8>)
 8000cd8:	6a38      	ldr	r0, [r7, #32]
 8000cda:	f016 f833 	bl	8016d44 <siprintf>
				if(jsongo == 2){
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <ssi_handler+0x8a4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d177      	bne.n	8000dd6 <ssi_handler+0x83e>
					sprintf(pcInsert,
 8000ce6:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <ssi_handler+0x8a8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a56      	ldr	r2, [pc, #344]	; (8000e44 <ssi_handler+0x8ac>)
 8000cec:	2168      	movs	r1, #104	; 0x68
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <ssi_handler+0x8a8>)
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <ssi_handler+0x8a8>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <ssi_handler+0x8b0>)
 8000d0c:	4413      	add	r3, r2
							T[variable].ptype,
 8000d0e:	4a4c      	ldr	r2, [pc, #304]	; (8000e40 <ssi_handler+0x8a8>)
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	2168      	movs	r1, #104	; 0x68
 8000d14:	fb01 f202 	mul.w	r2, r1, r2
 8000d18:	3218      	adds	r2, #24
 8000d1a:	494a      	ldr	r1, [pc, #296]	; (8000e44 <ssi_handler+0x8ac>)
 8000d1c:	440a      	add	r2, r1
					sprintf(pcInsert,
 8000d1e:	4948      	ldr	r1, [pc, #288]	; (8000e40 <ssi_handler+0x8a8>)
 8000d20:	6809      	ldr	r1, [r1, #0]
 8000d22:	4848      	ldr	r0, [pc, #288]	; (8000e44 <ssi_handler+0x8ac>)
 8000d24:	2468      	movs	r4, #104	; 0x68
 8000d26:	fb04 f101 	mul.w	r1, r4, r1
 8000d2a:	4401      	add	r1, r0
 8000d2c:	3104      	adds	r1, #4
 8000d2e:	6809      	ldr	r1, [r1, #0]
 8000d30:	4843      	ldr	r0, [pc, #268]	; (8000e40 <ssi_handler+0x8a8>)
 8000d32:	6800      	ldr	r0, [r0, #0]
 8000d34:	4c43      	ldr	r4, [pc, #268]	; (8000e44 <ssi_handler+0x8ac>)
 8000d36:	2568      	movs	r5, #104	; 0x68
 8000d38:	fb05 f000 	mul.w	r0, r5, r0
 8000d3c:	4420      	add	r0, r4
 8000d3e:	3008      	adds	r0, #8
 8000d40:	6800      	ldr	r0, [r0, #0]
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	4c3e      	ldr	r4, [pc, #248]	; (8000e40 <ssi_handler+0x8a8>)
 8000d46:	6824      	ldr	r4, [r4, #0]
 8000d48:	4d3e      	ldr	r5, [pc, #248]	; (8000e44 <ssi_handler+0x8ac>)
 8000d4a:	2668      	movs	r6, #104	; 0x68
 8000d4c:	fb06 f404 	mul.w	r4, r6, r4
 8000d50:	442c      	add	r4, r5
 8000d52:	340c      	adds	r4, #12
 8000d54:	6820      	ldr	r0, [r4, #0]
 8000d56:	60b8      	str	r0, [r7, #8]
 8000d58:	4d39      	ldr	r5, [pc, #228]	; (8000e40 <ssi_handler+0x8a8>)
 8000d5a:	682d      	ldr	r5, [r5, #0]
 8000d5c:	4e39      	ldr	r6, [pc, #228]	; (8000e44 <ssi_handler+0x8ac>)
 8000d5e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000d62:	fb0c f505 	mul.w	r5, ip, r5
 8000d66:	4435      	add	r5, r6
 8000d68:	3510      	adds	r5, #16
 8000d6a:	682d      	ldr	r5, [r5, #0]
 8000d6c:	4e34      	ldr	r6, [pc, #208]	; (8000e40 <ssi_handler+0x8a8>)
 8000d6e:	6836      	ldr	r6, [r6, #0]
 8000d70:	4834      	ldr	r0, [pc, #208]	; (8000e44 <ssi_handler+0x8ac>)
 8000d72:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000d76:	fb0c f606 	mul.w	r6, ip, r6
 8000d7a:	4406      	add	r6, r0
 8000d7c:	3614      	adds	r6, #20
 8000d7e:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
 8000d80:	482f      	ldr	r0, [pc, #188]	; (8000e40 <ssi_handler+0x8a8>)
 8000d82:	6800      	ldr	r0, [r0, #0]
 8000d84:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000d88:	fb0c fc00 	mul.w	ip, ip, r0
 8000d8c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000d90:	482c      	ldr	r0, [pc, #176]	; (8000e44 <ssi_handler+0x8ac>)
 8000d92:	4484      	add	ip, r0
 8000d94:	f10c 0004 	add.w	r0, ip, #4
 8000d98:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8000d9a:	4829      	ldr	r0, [pc, #164]	; (8000e40 <ssi_handler+0x8a8>)
 8000d9c:	6800      	ldr	r0, [r0, #0]
 8000d9e:	4c29      	ldr	r4, [pc, #164]	; (8000e44 <ssi_handler+0x8ac>)
 8000da0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000da4:	fb0c fc00 	mul.w	ip, ip, r0
 8000da8:	44a4      	add	ip, r4
 8000daa:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000dae:	f8dc 0000 	ldr.w	r0, [ip]
 8000db2:	9008      	str	r0, [sp, #32]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	9007      	str	r0, [sp, #28]
 8000db8:	9606      	str	r6, [sp, #24]
 8000dba:	9505      	str	r5, [sp, #20]
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	9004      	str	r0, [sp, #16]
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	9102      	str	r1, [sp, #8]
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	4921      	ldr	r1, [pc, #132]	; (8000e54 <ssi_handler+0x8bc>)
 8000dd0:	6a38      	ldr	r0, [r7, #32]
 8000dd2:	f015 ffb7 	bl	8016d44 <siprintf>
				if(jsongo == 3){
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <ssi_handler+0x8a4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d118      	bne.n	8000e10 <ssi_handler+0x878>
					sprintf(pcInsert,
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <ssi_handler+0x8a8>)
 8000de0:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <ssi_handler+0x8a8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <ssi_handler+0x8b0>)
 8000df0:	441a      	add	r2, r3
					sprintf(pcInsert,
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <ssi_handler+0x8a8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <ssi_handler+0x8ac>)
 8000df8:	2468      	movs	r4, #104	; 0x68
 8000dfa:	fb04 f303 	mul.w	r3, r4, r3
 8000dfe:	4403      	add	r3, r0
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	460a      	mov	r2, r1
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <ssi_handler+0x8c0>)
 8000e0a:	6a38      	ldr	r0, [r7, #32]
 8000e0c:	f015 ff9a 	bl	8016d44 <siprintf>
			memset(listaction, '\0', sizeof(listaction));
 8000e10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e14:	2100      	movs	r1, #0
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <ssi_handler+0x8b4>)
 8000e18:	f015 fdb5 	bl	8016986 <memset>
			*next_tag_part = variable;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <ssi_handler+0x8a8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e24:	801a      	strh	r2, [r3, #0]
			variable++;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <ssi_handler+0x8a8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <ssi_handler+0x8a8>)
 8000e2e:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000e30:	6a38      	ldr	r0, [r7, #32]
 8000e32:	f7ff f9d7 	bl	80001e4 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	e190      	b.n	800115e <ssi_handler+0xbc6>
 8000e3c:	2000053c 	.word	0x2000053c
 8000e40:	20000538 	.word	0x20000538
 8000e44:	20005894 	.word	0x20005894
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20009928 	.word	0x20009928
 8000e50:	08018254 	.word	0x08018254
 8000e54:	080182f0 	.word	0x080182f0
 8000e58:	0801836c 	.word	0x0801836c
			if(idtab == 1){
 8000e5c:	4b84      	ldr	r3, [pc, #528]	; (8001070 <ssi_handler+0xad8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d17c      	bne.n	8000f5e <ssi_handler+0x9c6>
			sprintf(pcInsert,
 8000e64:	4b83      	ldr	r3, [pc, #524]	; (8001074 <ssi_handler+0xadc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a83      	ldr	r2, [pc, #524]	; (8001078 <ssi_handler+0xae0>)
 8000e6a:	2168      	movs	r1, #104	; 0x68
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b7f      	ldr	r3, [pc, #508]	; (8001074 <ssi_handler+0xadc>)
 8000e78:	6819      	ldr	r1, [r3, #0]
 8000e7a:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 8000e7c:	4b7d      	ldr	r3, [pc, #500]	; (8001074 <ssi_handler+0xadc>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4a7c      	ldr	r2, [pc, #496]	; (800107c <ssi_handler+0xae4>)
 8000e8a:	1899      	adds	r1, r3, r2
 8000e8c:	60f9      	str	r1, [r7, #12]
					T[id].ptype,
 8000e8e:	4b79      	ldr	r3, [pc, #484]	; (8001074 <ssi_handler+0xadc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2268      	movs	r2, #104	; 0x68
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	3318      	adds	r3, #24
 8000e9a:	4a77      	ldr	r2, [pc, #476]	; (8001078 <ssi_handler+0xae0>)
 8000e9c:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 8000e9e:	4b75      	ldr	r3, [pc, #468]	; (8001074 <ssi_handler+0xadc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a75      	ldr	r2, [pc, #468]	; (8001078 <ssi_handler+0xae0>)
 8000ea4:	2168      	movs	r1, #104	; 0x68
 8000ea6:	fb01 f303 	mul.w	r3, r1, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	332c      	adds	r3, #44	; 0x2c
 8000eae:	681d      	ldr	r5, [r3, #0]
 8000eb0:	4b70      	ldr	r3, [pc, #448]	; (8001074 <ssi_handler+0xadc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a70      	ldr	r2, [pc, #448]	; (8001078 <ssi_handler+0xae0>)
 8000eb6:	2168      	movs	r1, #104	; 0x68
 8000eb8:	fb01 f303 	mul.w	r3, r1, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3330      	adds	r3, #48	; 0x30
 8000ec0:	681e      	ldr	r6, [r3, #0]
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <ssi_handler+0xadc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a6c      	ldr	r2, [pc, #432]	; (8001078 <ssi_handler+0xae0>)
 8000ec8:	2168      	movs	r1, #104	; 0x68
 8000eca:	fb01 f303 	mul.w	r3, r1, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	3334      	adds	r3, #52	; 0x34
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	4b67      	ldr	r3, [pc, #412]	; (8001074 <ssi_handler+0xadc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a67      	ldr	r2, [pc, #412]	; (8001078 <ssi_handler+0xae0>)
 8000edc:	2168      	movs	r1, #104	; 0x68
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3338      	adds	r3, #56	; 0x38
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	6079      	str	r1, [r7, #4]
 8000eea:	4b62      	ldr	r3, [pc, #392]	; (8001074 <ssi_handler+0xadc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a62      	ldr	r2, [pc, #392]	; (8001078 <ssi_handler+0xae0>)
 8000ef0:	2168      	movs	r1, #104	; 0x68
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	333c      	adds	r3, #60	; 0x3c
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <ssi_handler+0xadc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <ssi_handler+0xae0>)
 8000f04:	2168      	movs	r1, #104	; 0x68
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3340      	adds	r3, #64	; 0x40
 8000f0e:	6819      	ldr	r1, [r3, #0]
					T[id].info,
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <ssi_handler+0xadc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2268      	movs	r2, #104	; 0x68
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	3340      	adds	r3, #64	; 0x40
 8000f1c:	4a56      	ldr	r2, [pc, #344]	; (8001078 <ssi_handler+0xae0>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <ssi_handler+0xadc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4854      	ldr	r0, [pc, #336]	; (8001078 <ssi_handler+0xae0>)
 8000f28:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000f2c:	fb0c f303 	mul.w	r3, ip, r3
 8000f30:	4403      	add	r3, r0
 8000f32:	3364      	adds	r3, #100	; 0x64
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	9309      	str	r3, [sp, #36]	; 0x24
 8000f38:	9208      	str	r2, [sp, #32]
 8000f3a:	9107      	str	r1, [sp, #28]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	9306      	str	r3, [sp, #24]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	9105      	str	r1, [sp, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	9204      	str	r2, [sp, #16]
 8000f48:	9603      	str	r6, [sp, #12]
 8000f4a:	9502      	str	r5, [sp, #8]
 8000f4c:	9401      	str	r4, [sp, #4]
 8000f4e:	68f9      	ldr	r1, [r7, #12]
 8000f50:	9100      	str	r1, [sp, #0]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	494a      	ldr	r1, [pc, #296]	; (8001080 <ssi_handler+0xae8>)
 8000f58:	6a38      	ldr	r0, [r7, #32]
 8000f5a:	f015 fef3 	bl	8016d44 <siprintf>
			if(idtab == 2){
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <ssi_handler+0xad8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d177      	bne.n	8001056 <ssi_handler+0xabe>
			sprintf(pcInsert,
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <ssi_handler+0xadc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <ssi_handler+0xae0>)
 8000f6c:	2168      	movs	r1, #104	; 0x68
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <ssi_handler+0xadc>)
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	6139      	str	r1, [r7, #16]
					tp[id].pins,
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <ssi_handler+0xadc>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4a3c      	ldr	r2, [pc, #240]	; (800107c <ssi_handler+0xae4>)
 8000f8c:	4413      	add	r3, r2
					T[id].ptype,
 8000f8e:	4a39      	ldr	r2, [pc, #228]	; (8001074 <ssi_handler+0xadc>)
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	2168      	movs	r1, #104	; 0x68
 8000f94:	fb01 f202 	mul.w	r2, r1, r2
 8000f98:	3218      	adds	r2, #24
 8000f9a:	4937      	ldr	r1, [pc, #220]	; (8001078 <ssi_handler+0xae0>)
 8000f9c:	440a      	add	r2, r1
			sprintf(pcInsert,
 8000f9e:	4935      	ldr	r1, [pc, #212]	; (8001074 <ssi_handler+0xadc>)
 8000fa0:	6809      	ldr	r1, [r1, #0]
 8000fa2:	4835      	ldr	r0, [pc, #212]	; (8001078 <ssi_handler+0xae0>)
 8000fa4:	2468      	movs	r4, #104	; 0x68
 8000fa6:	fb04 f101 	mul.w	r1, r4, r1
 8000faa:	4401      	add	r1, r0
 8000fac:	3104      	adds	r1, #4
 8000fae:	6809      	ldr	r1, [r1, #0]
 8000fb0:	4830      	ldr	r0, [pc, #192]	; (8001074 <ssi_handler+0xadc>)
 8000fb2:	6800      	ldr	r0, [r0, #0]
 8000fb4:	4c30      	ldr	r4, [pc, #192]	; (8001078 <ssi_handler+0xae0>)
 8000fb6:	2568      	movs	r5, #104	; 0x68
 8000fb8:	fb05 f000 	mul.w	r0, r5, r0
 8000fbc:	4420      	add	r0, r4
 8000fbe:	3008      	adds	r0, #8
 8000fc0:	6800      	ldr	r0, [r0, #0]
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	4c2b      	ldr	r4, [pc, #172]	; (8001074 <ssi_handler+0xadc>)
 8000fc6:	6824      	ldr	r4, [r4, #0]
 8000fc8:	4d2b      	ldr	r5, [pc, #172]	; (8001078 <ssi_handler+0xae0>)
 8000fca:	2668      	movs	r6, #104	; 0x68
 8000fcc:	fb06 f404 	mul.w	r4, r6, r4
 8000fd0:	442c      	add	r4, r5
 8000fd2:	340c      	adds	r4, #12
 8000fd4:	6820      	ldr	r0, [r4, #0]
 8000fd6:	60b8      	str	r0, [r7, #8]
 8000fd8:	4d26      	ldr	r5, [pc, #152]	; (8001074 <ssi_handler+0xadc>)
 8000fda:	682d      	ldr	r5, [r5, #0]
 8000fdc:	4e26      	ldr	r6, [pc, #152]	; (8001078 <ssi_handler+0xae0>)
 8000fde:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000fe2:	fb0c f505 	mul.w	r5, ip, r5
 8000fe6:	4435      	add	r5, r6
 8000fe8:	3510      	adds	r5, #16
 8000fea:	682d      	ldr	r5, [r5, #0]
 8000fec:	4e21      	ldr	r6, [pc, #132]	; (8001074 <ssi_handler+0xadc>)
 8000fee:	6836      	ldr	r6, [r6, #0]
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <ssi_handler+0xae0>)
 8000ff2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000ff6:	fb0c f606 	mul.w	r6, ip, r6
 8000ffa:	4406      	add	r6, r0
 8000ffc:	3614      	adds	r6, #20
 8000ffe:	6836      	ldr	r6, [r6, #0]
					T[id].info,
 8001000:	481c      	ldr	r0, [pc, #112]	; (8001074 <ssi_handler+0xadc>)
 8001002:	6800      	ldr	r0, [r0, #0]
 8001004:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001008:	fb0c fc00 	mul.w	ip, ip, r0
 800100c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <ssi_handler+0xae0>)
 8001012:	4484      	add	ip, r0
 8001014:	f10c 0004 	add.w	r0, ip, #4
 8001018:	6078      	str	r0, [r7, #4]
			sprintf(pcInsert,
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <ssi_handler+0xadc>)
 800101c:	6800      	ldr	r0, [r0, #0]
 800101e:	4c16      	ldr	r4, [pc, #88]	; (8001078 <ssi_handler+0xae0>)
 8001020:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001024:	fb0c fc00 	mul.w	ip, ip, r0
 8001028:	44a4      	add	ip, r4
 800102a:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 800102e:	f8dc 0000 	ldr.w	r0, [ip]
 8001032:	9008      	str	r0, [sp, #32]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	9007      	str	r0, [sp, #28]
 8001038:	9606      	str	r6, [sp, #24]
 800103a:	9505      	str	r5, [sp, #20]
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	9004      	str	r0, [sp, #16]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	9003      	str	r0, [sp, #12]
 8001044:	9102      	str	r1, [sp, #8]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <ssi_handler+0xaec>)
 8001050:	6a38      	ldr	r0, [r7, #32]
 8001052:	f015 fe77 	bl	8016d44 <siprintf>
			if(idtab == 3){
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <ssi_handler+0xad8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d167      	bne.n	800112e <ssi_handler+0xb96>
				sprintf(jsonrp, "{");
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <ssi_handler+0xaf0>)
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <ssi_handler+0xaf4>)
 8001062:	f015 fe6f 	bl	8016d44 <siprintf>
				strcat(bufervar, jsonrp);
 8001066:	4909      	ldr	r1, [pc, #36]	; (800108c <ssi_handler+0xaf4>)
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <ssi_handler+0xaf8>)
 800106a:	f015 fece 	bl	8016e0a <strcat>
			while(variable <= numpin-1){
 800106e:	e036      	b.n	80010de <ssi_handler+0xb46>
 8001070:	20000544 	.word	0x20000544
 8001074:	20000540 	.word	0x20000540
 8001078:	20005894 	.word	0x20005894
 800107c:	20000000 	.word	0x20000000
 8001080:	08018390 	.word	0x08018390
 8001084:	08018420 	.word	0x08018420
 8001088:	08017fc8 	.word	0x08017fc8
 800108c:	20009abc 	.word	0x20009abc
 8001090:	20007024 	.word	0x20007024
				if(T[variable].topin == 2){
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <ssi_handler+0xbd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a34      	ldr	r2, [pc, #208]	; (800116c <ssi_handler+0xbd4>)
 800109a:	2168      	movs	r1, #104	; 0x68
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d115      	bne.n	80010d4 <ssi_handler+0xb3c>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <ssi_handler+0xbd0>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <ssi_handler+0xbd8>)
 80010b6:	441a      	add	r2, r3
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <ssi_handler+0xbd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	492d      	ldr	r1, [pc, #180]	; (8001174 <ssi_handler+0xbdc>)
 80010be:	482e      	ldr	r0, [pc, #184]	; (8001178 <ssi_handler+0xbe0>)
 80010c0:	f015 fe40 	bl	8016d44 <siprintf>
				    strcat(bufervar, jsonrp);
 80010c4:	492c      	ldr	r1, [pc, #176]	; (8001178 <ssi_handler+0xbe0>)
 80010c6:	482d      	ldr	r0, [pc, #180]	; (800117c <ssi_handler+0xbe4>)
 80010c8:	f015 fe9f 	bl	8016e0a <strcat>
					printf("%s \r\n",  jsonrp);
 80010cc:	492a      	ldr	r1, [pc, #168]	; (8001178 <ssi_handler+0xbe0>)
 80010ce:	482c      	ldr	r0, [pc, #176]	; (8001180 <ssi_handler+0xbe8>)
 80010d0:	f015 fcbc 	bl	8016a4c <iprintf>
				variable++;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <ssi_handler+0xbd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <ssi_handler+0xbd0>)
 80010dc:	6013      	str	r3, [r2, #0]
			while(variable <= numpin-1){
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <ssi_handler+0xbd0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b39      	cmp	r3, #57	; 0x39
 80010e4:	ddd6      	ble.n	8001094 <ssi_handler+0xafc>
				bufervar[strlen(bufervar)-1] = '\0';
 80010e6:	4825      	ldr	r0, [pc, #148]	; (800117c <ssi_handler+0xbe4>)
 80010e8:	f7ff f87c 	bl	80001e4 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <ssi_handler+0xbe4>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	54d1      	strb	r1, [r2, r3]
				sprintf(jsonrp, "}");
 80010f6:	4923      	ldr	r1, [pc, #140]	; (8001184 <ssi_handler+0xbec>)
 80010f8:	481f      	ldr	r0, [pc, #124]	; (8001178 <ssi_handler+0xbe0>)
 80010fa:	f015 fe23 	bl	8016d44 <siprintf>
				strcat(bufervar, jsonrp);
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <ssi_handler+0xbe0>)
 8001100:	481e      	ldr	r0, [pc, #120]	; (800117c <ssi_handler+0xbe4>)
 8001102:	f015 fe82 	bl	8016e0a <strcat>
				variable = 0;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <ssi_handler+0xbd0>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id, tp[id].pins, bufervar);
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <ssi_handler+0xbf0>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <ssi_handler+0xbf0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <ssi_handler+0xbd8>)
 800111e:	4413      	add	r3, r2
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <ssi_handler+0xbe4>)
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	460a      	mov	r2, r1
 8001126:	4919      	ldr	r1, [pc, #100]	; (800118c <ssi_handler+0xbf4>)
 8001128:	6a38      	ldr	r0, [r7, #32]
 800112a:	f015 fe0b 	bl	8016d44 <siprintf>
			memset(bufervar, '\0', sizeof(bufervar));
 800112e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001132:	2100      	movs	r1, #0
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <ssi_handler+0xbe4>)
 8001136:	f015 fc26 	bl	8016986 <memset>
			return strlen(pcInsert);
 800113a:	6a38      	ldr	r0, [r7, #32]
 800113c:	f7ff f852 	bl	80001e4 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29b      	uxth	r3, r3
 8001144:	e00b      	b.n	800115e <ssi_handler+0xbc6>
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
 8001146:	4912      	ldr	r1, [pc, #72]	; (8001190 <ssi_handler+0xbf8>)
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f015 fdfb 	bl	8016d44 <siprintf>
			return strlen(pcInsert);
 800114e:	6a38      	ldr	r0, [r7, #32]
 8001150:	f7ff f848 	bl	80001e4 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29b      	uxth	r3, r3
 8001158:	e001      	b.n	800115e <ssi_handler+0xbc6>
			break;
 800115a:	bf00      	nop
	}
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	372c      	adds	r7, #44	; 0x2c
 8001162:	46bd      	mov	sp, r7
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000538 	.word	0x20000538
 800116c:	20005894 	.word	0x20005894
 8001170:	20000000 	.word	0x20000000
 8001174:	08017fcc 	.word	0x08017fcc
 8001178:	20009abc 	.word	0x20009abc
 800117c:	20007024 	.word	0x20007024
 8001180:	08018498 	.word	0x08018498
 8001184:	08017fd8 	.word	0x08017fd8
 8001188:	20000540 	.word	0x20000540
 800118c:	080184a0 	.word	0x080184a0
 8001190:	080184c4 	.word	0x080184c4

08001194 <CGIForm_Handler>:
};

const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI
const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d120      	bne.n	80011ea <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e019      	b.n	80011e2 <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <CGIForm_Handler+0x60>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f808 	bl	80001d0 <strcmp>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f015 fa81 	bl	80166d8 <atoi>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <CGIForm_Handler+0x64>)
 80011da:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbe1      	blt.n	80011ae <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <CGIForm_Handler+0x68>)
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	080185c4 	.word	0x080185c4
 80011f8:	2000053c 	.word	0x2000053c
 80011fc:	0801857c 	.word	0x0801857c

08001200 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d005      	beq.n	8001220 <CGIForm_Handler1+0x20>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d002      	beq.n	8001220 <CGIForm_Handler1+0x20>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d137      	bne.n	8001290 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e030      	b.n	8001288 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4921      	ldr	r1, [pc, #132]	; (80012b8 <CGIForm_Handler1+0xb8>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe ffcc 	bl	80001d0 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10a      	bne.n	8001254 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f015 fa45 	bl	80166d8 <atoi>
 800124e:	4603      	mov	r3, r0
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <CGIForm_Handler1+0xbc>)
 8001252:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4918      	ldr	r1, [pc, #96]	; (80012c0 <CGIForm_Handler1+0xc0>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffb5 	bl	80001d0 <strcmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10a      	bne.n	8001282 <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f015 fa2e 	bl	80166d8 <atoi>
 800127c:	4603      	mov	r3, r0
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <CGIForm_Handler1+0xc4>)
 8001280:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbca      	blt.n	8001226 <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <CGIForm_Handler1+0xc8>)
 8001298:	e00a      	b.n	80012b0 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d101      	bne.n	80012a4 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <CGIForm_Handler1+0xcc>)
 80012a2:	e005      	b.n	80012b0 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d101      	bne.n	80012ae <CGIForm_Handler1+0xae>
			return "/form3.shtml";
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <CGIForm_Handler1+0xd0>)
 80012ac:	e000      	b.n	80012b0 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <CGIForm_Handler1+0xd4>)
	}
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	080185cc 	.word	0x080185cc
 80012bc:	20000540 	.word	0x20000540
 80012c0:	080185d0 	.word	0x080185d0
 80012c4:	20000544 	.word	0x20000544
 80012c8:	08018588 	.word	0x08018588
 80012cc:	08018598 	.word	0x08018598
 80012d0:	080185a8 	.word	0x080185a8
 80012d4:	080185d4 	.word	0x080185d4

080012d8 <CGIForm_Handler2>:

const char *CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
 80012e6:	4826      	ldr	r0, [pc, #152]	; (8001380 <CGIForm_Handler2+0xa8>)
 80012e8:	f015 fc36 	bl	8016b58 <puts>
	if (iIndex == 4)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d140      	bne.n	8001374 <CGIForm_Handler2+0x9c>
	{
		for (int i=0; i<iNumParams; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e039      	b.n	800136c <CGIForm_Handler2+0x94>
		{
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4920      	ldr	r1, [pc, #128]	; (8001384 <CGIForm_Handler2+0xac>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff63 	bl	80001d0 <strcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d12a      	bne.n	8001366 <CGIForm_Handler2+0x8e>
			{
				id = atoi(pcValue[i]);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4413      	add	r3, r2
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f015 f9dc 	bl	80166d8 <atoi>
 8001320:	4603      	mov	r3, r0
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <CGIForm_Handler2+0xb0>)
 8001324:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <CGIForm_Handler2+0xb0>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4918      	ldr	r1, [pc, #96]	; (800138c <CGIForm_Handler2+0xb4>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	3304      	adds	r3, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <CGIForm_Handler2+0xb0>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4912      	ldr	r1, [pc, #72]	; (800138c <CGIForm_Handler2+0xb4>)
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <CGIForm_Handler2+0xb0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	490d      	ldr	r1, [pc, #52]	; (800138c <CGIForm_Handler2+0xb4>)
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3308      	adds	r3, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
		for (int i=0; i<iNumParams; i++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbc1      	blt.n	80012f8 <CGIForm_Handler2+0x20>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <CGIForm_Handler2+0xb8>)
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	080185e0 	.word	0x080185e0
 8001384:	080185ec 	.word	0x080185ec
 8001388:	20000540 	.word	0x20000540
 800138c:	20005540 	.word	0x20005540
 8001390:	080185b8 	.word	0x080185b8

08001394 <httpd_post_begin>:
static void *current_connection;
static void *valid_connection;
int http_post_content_len;
// char *urls;
char urls[30] = { 0 };
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request, uint16_t http_request_len, int content_len, char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	807b      	strh	r3, [r7, #2]
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 80013a2:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <httpd_post_begin+0x44>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6013      	str	r3, [r2, #0]
	//urls = uri;
	strncpy(urls, uri, 15);
 80013a8:	220f      	movs	r2, #15
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <httpd_post_begin+0x48>)
 80013ae:	f015 fd62 	bl	8016e76 <strncpy>
	//printf("+++++++++uri %s +++++++++++------- \r\n",uri);  // Вывод /select.shtml +
	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);
	if (current_connection != connection) {
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <httpd_post_begin+0x4c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d007      	beq.n	80013cc <httpd_post_begin+0x38>
		current_connection = connection;
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <httpd_post_begin+0x4c>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <httpd_post_begin+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e001      	b.n	80013d0 <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 80013cc:	f06f 0305 	mvn.w	r3, #5
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000553c 	.word	0x2000553c
 80013dc:	20000550 	.word	0x20000550
 80013e0:	20000548 	.word	0x20000548
 80013e4:	2000054c 	.word	0x2000054c

080013e8 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	printf("OK POST 2 \r\n");
 80013f2:	4817      	ldr	r0, [pc, #92]	; (8001450 <httpd_post_receive_data+0x68>)
 80013f4:	f015 fbb0 	bl	8016b58 <puts>
	char *data;
	if (current_connection == connection && p != NULL) {
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <httpd_post_receive_data+0x6c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d117      	bne.n	8001432 <httpd_post_receive_data+0x4a>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d014      	beq.n	8001432 <httpd_post_receive_data+0x4a>
		data = p->payload;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <httpd_post_receive_data+0x70>)
 8001412:	f015 fb1b 	bl	8016a4c <iprintf>
		strcat(bufervar, data);
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	4810      	ldr	r0, [pc, #64]	; (800145c <httpd_post_receive_data+0x74>)
 800141a:	f015 fcf6 	bl	8016e0a <strcat>
		pbuf_free(p);
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f00b ff84 	bl	800d32c <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8001424:	2201      	movs	r2, #1
 8001426:	2100      	movs	r1, #0
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f015 faac 	bl	8016986 <memset>
		return ERR_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e00a      	b.n	8001448 <httpd_post_receive_data+0x60>
	}
	if (p != NULL) {
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <httpd_post_receive_data+0x5c>
		printf("END \r\n");
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <httpd_post_receive_data+0x78>)
 800143a:	f015 fb8d 	bl	8016b58 <puts>
		pbuf_free(p);
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f00b ff74 	bl	800d32c <pbuf_free>
	}
	return ERR_VAL;
 8001444:	f06f 0305 	mvn.w	r3, #5
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	080185f0 	.word	0x080185f0
 8001454:	20000548 	.word	0x20000548
 8001458:	080185fc 	.word	0x080185fc
 800145c:	20007024 	.word	0x20007024
 8001460:	08018608 	.word	0x08018608

08001464 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8001464:	b580      	push	{r7, lr}
 8001466:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 800146a:	af00      	add	r7, sp, #0
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	6019      	str	r1, [r3, #0]
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
 800147c:	48cd      	ldr	r0, [pc, #820]	; (80017b4 <httpd_post_finished+0x350>)
 800147e:	f015 fb6b 	bl	8016b58 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	//char urlline[http_post_content_len];
	char urlline[1000];
	char name0[50];
	char nametoken[50];

	memset(name0, '\0', sizeof(name0));
 800148e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001492:	2232      	movs	r2, #50	; 0x32
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f015 fa75 	bl	8016986 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 800149c:	4bc6      	ldr	r3, [pc, #792]	; (80017b8 <httpd_post_finished+0x354>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014a6:	49c5      	ldr	r1, [pc, #788]	; (80017bc <httpd_post_finished+0x358>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f015 fce4 	bl	8016e76 <strncpy>

	printf("%s \r\n", urlline);
 80014ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014b2:	4619      	mov	r1, r3
 80014b4:	48c2      	ldr	r0, [pc, #776]	; (80017c0 <httpd_post_finished+0x35c>)
 80014b6:	f015 fac9 	bl	8016a4c <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 80014ba:	4bbf      	ldr	r3, [pc, #764]	; (80017b8 <httpd_post_finished+0x354>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	48c0      	ldr	r0, [pc, #768]	; (80017c4 <httpd_post_finished+0x360>)
 80014c2:	f015 fac3 	bl	8016a4c <iprintf>
	char *rest = urlline;
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ce:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 80014d0:	e26d      	b.n	80019ae <httpd_post_finished+0x54a>
		//printf("%s\n", token);
		char *rest1 = token;
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80014da:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 80014dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e0:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80014e4:	4618      	mov	r0, r3
 80014e6:	f015 fc90 	bl	8016e0a <strcat>
		y = 0;
 80014ea:	4bb7      	ldr	r3, [pc, #732]	; (80017c8 <httpd_post_finished+0x364>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 80014f0:	e219      	b.n	8001926 <httpd_post_finished+0x4c2>
			z = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 80014f8:	4bb3      	ldr	r3, [pc, #716]	; (80017c8 <httpd_post_finished+0x364>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12b      	bne.n	8001558 <httpd_post_finished+0xf4>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8001508:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 800150a:	e016      	b.n	800153a <httpd_post_finished+0xd6>
					if (z == 0) {
 800150c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <httpd_post_finished+0xb8>
						name1 = token2;
 8001514:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001518:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 800151c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <httpd_post_finished+0xcc>
						id = atoi(token2);
 8001524:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8001528:	f015 f8d6 	bl	80166d8 <atoi>
 800152c:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 8001530:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001534:	3301      	adds	r3, #1
 8001536:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f107 0214 	add.w	r2, r7, #20
 8001544:	49a1      	ldr	r1, [pc, #644]	; (80017cc <httpd_post_finished+0x368>)
 8001546:	4618      	mov	r0, r3
 8001548:	f015 fce7 	bl	8016f1a <strtok_r>
 800154c:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 8001550:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1d9      	bne.n	800150c <httpd_post_finished+0xa8>
				}
			}
			if(y == 1){
 8001558:	4b9b      	ldr	r3, [pc, #620]	; (80017c8 <httpd_post_finished+0x364>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 81dd 	bne.w	800191c <httpd_post_finished+0x4b8>
				// значение переменной
				//printf("VAL %s\n", token1);

				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 8001562:	499b      	ldr	r1, [pc, #620]	; (80017d0 <httpd_post_finished+0x36c>)
 8001564:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001568:	f7fe fe32 	bl	80001d0 <strcmp>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <httpd_post_finished+0x12a>
					strcpy(T[id].ptype, token1);
 8001572:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001576:	2268      	movs	r2, #104	; 0x68
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	3318      	adds	r3, #24
 800157e:	4a95      	ldr	r2, [pc, #596]	; (80017d4 <httpd_post_finished+0x370>)
 8001580:	4413      	add	r3, r2
 8001582:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001586:	4618      	mov	r0, r3
 8001588:	f015 fc5b 	bl	8016e42 <strcpy>
 800158c:	e1c6      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "topin") == 0) {
 800158e:	4992      	ldr	r1, [pc, #584]	; (80017d8 <httpd_post_finished+0x374>)
 8001590:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001594:	f7fe fe1c 	bl	80001d0 <strcmp>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <httpd_post_finished+0x156>
					T[id].topin = atoi(token1);
 800159e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80015a2:	f015 f899 	bl	80166d8 <atoi>
 80015a6:	4602      	mov	r2, r0
 80015a8:	498a      	ldr	r1, [pc, #552]	; (80017d4 <httpd_post_finished+0x370>)
 80015aa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80015ae:	2068      	movs	r0, #104	; 0x68
 80015b0:	fb00 f303 	mul.w	r3, r0, r3
 80015b4:	440b      	add	r3, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e1b0      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "binter") == 0) {
 80015ba:	4988      	ldr	r1, [pc, #544]	; (80017dc <httpd_post_finished+0x378>)
 80015bc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80015c0:	f7fe fe06 	bl	80001d0 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10e      	bne.n	80015e8 <httpd_post_finished+0x184>
					T[id].binter = atoi(token1);
 80015ca:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80015ce:	f015 f883 	bl	80166d8 <atoi>
 80015d2:	4602      	mov	r2, r0
 80015d4:	497f      	ldr	r1, [pc, #508]	; (80017d4 <httpd_post_finished+0x370>)
 80015d6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80015da:	2068      	movs	r0, #104	; 0x68
 80015dc:	fb00 f303 	mul.w	r3, r0, r3
 80015e0:	440b      	add	r3, r1
 80015e2:	332c      	adds	r3, #44	; 0x2c
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e199      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "hinter") == 0) {
 80015e8:	497d      	ldr	r1, [pc, #500]	; (80017e0 <httpd_post_finished+0x37c>)
 80015ea:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80015ee:	f7fe fdef 	bl	80001d0 <strcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10e      	bne.n	8001616 <httpd_post_finished+0x1b2>
					T[id].hinter = atoi(token1);
 80015f8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80015fc:	f015 f86c 	bl	80166d8 <atoi>
 8001600:	4602      	mov	r2, r0
 8001602:	4974      	ldr	r1, [pc, #464]	; (80017d4 <httpd_post_finished+0x370>)
 8001604:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001608:	2068      	movs	r0, #104	; 0x68
 800160a:	fb00 f303 	mul.w	r3, r0, r3
 800160e:	440b      	add	r3, r1
 8001610:	3330      	adds	r3, #48	; 0x30
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e182      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "repeat") == 0) {
 8001616:	4973      	ldr	r1, [pc, #460]	; (80017e4 <httpd_post_finished+0x380>)
 8001618:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800161c:	f7fe fdd8 	bl	80001d0 <strcmp>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <httpd_post_finished+0x1e0>
					T[id].repeat = atoi(token1);
 8001626:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800162a:	f015 f855 	bl	80166d8 <atoi>
 800162e:	4602      	mov	r2, r0
 8001630:	4968      	ldr	r1, [pc, #416]	; (80017d4 <httpd_post_finished+0x370>)
 8001632:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001636:	2068      	movs	r0, #104	; 0x68
 8001638:	fb00 f303 	mul.w	r3, r0, r3
 800163c:	440b      	add	r3, r1
 800163e:	3334      	adds	r3, #52	; 0x34
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e16b      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "rinter") == 0) {
 8001644:	4968      	ldr	r1, [pc, #416]	; (80017e8 <httpd_post_finished+0x384>)
 8001646:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800164a:	f7fe fdc1 	bl	80001d0 <strcmp>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10e      	bne.n	8001672 <httpd_post_finished+0x20e>
					T[id].rinter = atoi(token1);
 8001654:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001658:	f015 f83e 	bl	80166d8 <atoi>
 800165c:	4602      	mov	r2, r0
 800165e:	495d      	ldr	r1, [pc, #372]	; (80017d4 <httpd_post_finished+0x370>)
 8001660:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001664:	2068      	movs	r0, #104	; 0x68
 8001666:	fb00 f303 	mul.w	r3, r0, r3
 800166a:	440b      	add	r3, r1
 800166c:	3338      	adds	r3, #56	; 0x38
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e154      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "dcinter") == 0) {
 8001672:	495e      	ldr	r1, [pc, #376]	; (80017ec <httpd_post_finished+0x388>)
 8001674:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001678:	f7fe fdaa 	bl	80001d0 <strcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10e      	bne.n	80016a0 <httpd_post_finished+0x23c>
					T[id].dcinter = atoi(token1);
 8001682:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001686:	f015 f827 	bl	80166d8 <atoi>
 800168a:	4602      	mov	r2, r0
 800168c:	4951      	ldr	r1, [pc, #324]	; (80017d4 <httpd_post_finished+0x370>)
 800168e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001692:	2068      	movs	r0, #104	; 0x68
 8001694:	fb00 f303 	mul.w	r3, r0, r3
 8001698:	440b      	add	r3, r1
 800169a:	333c      	adds	r3, #60	; 0x3c
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e13d      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "pclick") == 0) {
 80016a0:	4953      	ldr	r1, [pc, #332]	; (80017f0 <httpd_post_finished+0x38c>)
 80016a2:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80016a6:	f7fe fd93 	bl	80001d0 <strcmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10e      	bne.n	80016ce <httpd_post_finished+0x26a>
					T[id].pclick = atoi(token1);
 80016b0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80016b4:	f015 f810 	bl	80166d8 <atoi>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4946      	ldr	r1, [pc, #280]	; (80017d4 <httpd_post_finished+0x370>)
 80016bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80016c0:	2068      	movs	r0, #104	; 0x68
 80016c2:	fb00 f303 	mul.w	r3, r0, r3
 80016c6:	440b      	add	r3, r1
 80016c8:	3340      	adds	r3, #64	; 0x40
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e126      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "info") == 0) {
 80016ce:	4949      	ldr	r1, [pc, #292]	; (80017f4 <httpd_post_finished+0x390>)
 80016d0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80016d4:	f7fe fd7c 	bl	80001d0 <strcmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10e      	bne.n	80016fc <httpd_post_finished+0x298>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 80016de:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80016e2:	2268      	movs	r2, #104	; 0x68
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	3340      	adds	r3, #64	; 0x40
 80016ea:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <httpd_post_finished+0x370>)
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80016f4:	4618      	mov	r0, r3
 80016f6:	f015 fba4 	bl	8016e42 <strcpy>
 80016fa:	e10f      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "onoff") == 0) {
 80016fc:	493e      	ldr	r1, [pc, #248]	; (80017f8 <httpd_post_finished+0x394>)
 80016fe:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001702:	f7fe fd65 	bl	80001d0 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10e      	bne.n	800172a <httpd_post_finished+0x2c6>
					T[id].onoff = atoi(token1);
 800170c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001710:	f014 ffe2 	bl	80166d8 <atoi>
 8001714:	4602      	mov	r2, r0
 8001716:	492f      	ldr	r1, [pc, #188]	; (80017d4 <httpd_post_finished+0x370>)
 8001718:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800171c:	2068      	movs	r0, #104	; 0x68
 800171e:	fb00 f303 	mul.w	r3, r0, r3
 8001722:	440b      	add	r3, r1
 8001724:	3364      	adds	r3, #100	; 0x64
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e0f8      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "pwm") == 0) {
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <httpd_post_finished+0x398>)
 800172c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8001730:	f7fe fd4e 	bl	80001d0 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <httpd_post_finished+0x2f4>
					T[id].pwm = atoi(token1);
 800173a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800173e:	f014 ffcb 	bl	80166d8 <atoi>
 8001742:	4602      	mov	r2, r0
 8001744:	4923      	ldr	r1, [pc, #140]	; (80017d4 <httpd_post_finished+0x370>)
 8001746:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800174a:	2068      	movs	r0, #104	; 0x68
 800174c:	fb00 f303 	mul.w	r3, r0, r3
 8001750:	440b      	add	r3, r1
 8001752:	3304      	adds	r3, #4
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e0e1      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "on") == 0) {
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <httpd_post_finished+0x39c>)
 800175a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800175e:	f7fe fd37 	bl	80001d0 <strcmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10e      	bne.n	8001786 <httpd_post_finished+0x322>
					T[id].on = atoi(token1);
 8001768:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800176c:	f014 ffb4 	bl	80166d8 <atoi>
 8001770:	4602      	mov	r2, r0
 8001772:	4918      	ldr	r1, [pc, #96]	; (80017d4 <httpd_post_finished+0x370>)
 8001774:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001778:	2068      	movs	r0, #104	; 0x68
 800177a:	fb00 f303 	mul.w	r3, r0, r3
 800177e:	440b      	add	r3, r1
 8001780:	3308      	adds	r3, #8
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e0ca      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "istate") == 0) {
 8001786:	491f      	ldr	r1, [pc, #124]	; (8001804 <httpd_post_finished+0x3a0>)
 8001788:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800178c:	f7fe fd20 	bl	80001d0 <strcmp>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d138      	bne.n	8001808 <httpd_post_finished+0x3a4>
					T[id].istate = atoi(token1);
 8001796:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800179a:	f014 ff9d 	bl	80166d8 <atoi>
 800179e:	4602      	mov	r2, r0
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <httpd_post_finished+0x370>)
 80017a2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80017a6:	2068      	movs	r0, #104	; 0x68
 80017a8:	fb00 f303 	mul.w	r3, r0, r3
 80017ac:	440b      	add	r3, r1
 80017ae:	330c      	adds	r3, #12
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e0b3      	b.n	800191c <httpd_post_finished+0x4b8>
 80017b4:	08018610 	.word	0x08018610
 80017b8:	2000553c 	.word	0x2000553c
 80017bc:	20007024 	.word	0x20007024
 80017c0:	08018498 	.word	0x08018498
 80017c4:	0801861c 	.word	0x0801861c
 80017c8:	20009ab8 	.word	0x20009ab8
 80017cc:	08018628 	.word	0x08018628
 80017d0:	0801862c 	.word	0x0801862c
 80017d4:	20005894 	.word	0x20005894
 80017d8:	08018634 	.word	0x08018634
 80017dc:	0801863c 	.word	0x0801863c
 80017e0:	08018644 	.word	0x08018644
 80017e4:	0801864c 	.word	0x0801864c
 80017e8:	08018654 	.word	0x08018654
 80017ec:	0801865c 	.word	0x0801865c
 80017f0:	08018664 	.word	0x08018664
 80017f4:	0801866c 	.word	0x0801866c
 80017f8:	08018674 	.word	0x08018674
 80017fc:	0801867c 	.word	0x0801867c
 8001800:	08018680 	.word	0x08018680
 8001804:	08018684 	.word	0x08018684
				} else if (strcmp(name1, "dvalue") == 0) {
 8001808:	498e      	ldr	r1, [pc, #568]	; (8001a44 <httpd_post_finished+0x5e0>)
 800180a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800180e:	f7fe fcdf 	bl	80001d0 <strcmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10e      	bne.n	8001836 <httpd_post_finished+0x3d2>
					T[id].dvalue = atoi(token1);
 8001818:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800181c:	f014 ff5c 	bl	80166d8 <atoi>
 8001820:	4602      	mov	r2, r0
 8001822:	4989      	ldr	r1, [pc, #548]	; (8001a48 <httpd_post_finished+0x5e4>)
 8001824:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001828:	2068      	movs	r0, #104	; 0x68
 800182a:	fb00 f303 	mul.w	r3, r0, r3
 800182e:	440b      	add	r3, r1
 8001830:	3310      	adds	r3, #16
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e072      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "ponr") == 0) {
 8001836:	4985      	ldr	r1, [pc, #532]	; (8001a4c <httpd_post_finished+0x5e8>)
 8001838:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800183c:	f7fe fcc8 	bl	80001d0 <strcmp>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10e      	bne.n	8001864 <httpd_post_finished+0x400>
					T[id].ponr = atoi(token1);
 8001846:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800184a:	f014 ff45 	bl	80166d8 <atoi>
 800184e:	4602      	mov	r2, r0
 8001850:	497d      	ldr	r1, [pc, #500]	; (8001a48 <httpd_post_finished+0x5e4>)
 8001852:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001856:	2068      	movs	r0, #104	; 0x68
 8001858:	fb00 f303 	mul.w	r3, r0, r3
 800185c:	440b      	add	r3, r1
 800185e:	3314      	adds	r3, #20
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e05b      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "idin") == 0) {
 8001864:	497a      	ldr	r1, [pc, #488]	; (8001a50 <httpd_post_finished+0x5ec>)
 8001866:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800186a:	f7fe fcb1 	bl	80001d0 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d139      	bne.n	80018e8 <httpd_post_finished+0x484>
					//printf("idin------- %d \r\n", atoi(token1));
					while(variable1 <= numpintopin-1){
 8001874:	e030      	b.n	80018d8 <httpd_post_finished+0x474>
						if(TO[variable1].flag == 0){
 8001876:	4977      	ldr	r1, [pc, #476]	; (8001a54 <httpd_post_finished+0x5f0>)
 8001878:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3308      	adds	r3, #8
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d11f      	bne.n	80018ce <httpd_post_finished+0x46a>
							TO[variable1].idin = atoi(token1);
 800188e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001892:	f014 ff21 	bl	80166d8 <atoi>
 8001896:	4601      	mov	r1, r0
 8001898:	486e      	ldr	r0, [pc, #440]	; (8001a54 <httpd_post_finished+0x5f0>)
 800189a:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4403      	add	r3, r0
 80018a8:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 80018aa:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80018ae:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 80018b2:	4968      	ldr	r1, [pc, #416]	; (8001a54 <httpd_post_finished+0x5f0>)
 80018b4:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3308      	adds	r3, #8
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 80018c8:	2346      	movs	r3, #70	; 0x46
 80018ca:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 80018ce:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while(variable1 <= numpintopin-1){
 80018d8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80018dc:	2b45      	cmp	r3, #69	; 0x45
 80018de:	ddca      	ble.n	8001876 <httpd_post_finished+0x412>
					}
					variable1 = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80018e6:	e019      	b.n	800191c <httpd_post_finished+0x4b8>
				} else if (strcmp(name1, "idout") == 0) {
 80018e8:	495b      	ldr	r1, [pc, #364]	; (8001a58 <httpd_post_finished+0x5f4>)
 80018ea:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80018ee:	f7fe fc6f 	bl	80001d0 <strcmp>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <httpd_post_finished+0x4b8>
					TO[variable2].idout = atoi(token1);
 80018f8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80018fc:	f014 feec 	bl	80166d8 <atoi>
 8001900:	4601      	mov	r1, r0
 8001902:	4854      	ldr	r0, [pc, #336]	; (8001a54 <httpd_post_finished+0x5f0>)
 8001904:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4403      	add	r3, r0
 8001912:	3304      	adds	r3, #4
 8001914:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//					}
//					variable1 = 0;
					//////////////
				}
			}
			y++;
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <httpd_post_finished+0x5f8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <httpd_post_finished+0x5f8>)
 8001924:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f107 0218 	add.w	r2, r7, #24
 8001930:	494b      	ldr	r1, [pc, #300]	; (8001a60 <httpd_post_finished+0x5fc>)
 8001932:	4618      	mov	r0, r3
 8001934:	f015 faf1 	bl	8016f1a <strtok_r>
 8001938:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 800193c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f add6 	bne.w	80014f2 <httpd_post_finished+0x8e>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то, его заполняем "null".
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 800194e:	4945      	ldr	r1, [pc, #276]	; (8001a64 <httpd_post_finished+0x600>)
 8001950:	4618      	mov	r0, r3
 8001952:	f015 f9f7 	bl	8016d44 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8001956:	f107 0220 	add.w	r2, r7, #32
 800195a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc35 	bl	80001d0 <strcmp>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10d      	bne.n	8001988 <httpd_post_finished+0x524>
			strcpy(T[id].info, "null");
 800196c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8001970:	2268      	movs	r2, #104	; 0x68
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	3340      	adds	r3, #64	; 0x40
 8001978:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <httpd_post_finished+0x5e4>)
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <httpd_post_finished+0x604>)
 8001980:	6810      	ldr	r0, [r2, #0]
 8001982:	6018      	str	r0, [r3, #0]
 8001984:	7912      	ldrb	r2, [r2, #4]
 8001986:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 8001988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f014 fff8 	bl	8016986 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2232      	movs	r2, #50	; 0x32
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f014 fff1 	bl	8016986 <memset>
		z++;
 80019a4:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80019a8:	3301      	adds	r3, #1
 80019aa:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f107 021c 	add.w	r2, r7, #28
 80019b8:	492c      	ldr	r1, [pc, #176]	; (8001a6c <httpd_post_finished+0x608>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f015 faad 	bl	8016f1a <strtok_r>
 80019c0:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 80019c4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ad82 	bne.w	80014d2 <httpd_post_finished+0x6e>
	}

	memset(urlline, '\0', sizeof(urlline));
 80019ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f014 ffd4 	bl	8016986 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 80019de:	f642 1204 	movw	r2, #10500	; 0x2904
 80019e2:	2100      	movs	r1, #0
 80019e4:	4822      	ldr	r0, [pc, #136]	; (8001a70 <httpd_post_finished+0x60c>)
 80019e6:	f014 ffce 	bl	8016986 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("----------- %s ------- \r\n", urls);
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	8819      	ldrh	r1, [r3, #0]
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <httpd_post_finished+0x610>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f015 f971 	bl	8016cdc <sniprintf>
	if (current_connection == connection) {
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <httpd_post_finished+0x614>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f107 020c 	add.w	r2, r7, #12
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d114      	bne.n	8001a32 <httpd_post_finished+0x5ce>
		if (valid_connection == connection) {
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <httpd_post_finished+0x618>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d107      	bne.n	8001a26 <httpd_post_finished+0x5c2>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	8819      	ldrh	r1, [r3, #0]
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <httpd_post_finished+0x610>)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	f015 f95b 	bl	8016cdc <sniprintf>
		}
		current_connection = NULL;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <httpd_post_finished+0x614>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <httpd_post_finished+0x618>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	0801868c 	.word	0x0801868c
 8001a48:	20005894 	.word	0x20005894
 8001a4c:	08018694 	.word	0x08018694
 8001a50:	0801869c 	.word	0x0801869c
 8001a54:	20005540 	.word	0x20005540
 8001a58:	080186a4 	.word	0x080186a4
 8001a5c:	20009ab8 	.word	0x20009ab8
 8001a60:	080186ac 	.word	0x080186ac
 8001a64:	080186b0 	.word	0x080186b0
 8001a68:	080186c0 	.word	0x080186c0
 8001a6c:	080186c8 	.word	0x080186c8
 8001a70:	20007024 	.word	0x20007024
 8001a74:	20000550 	.word	0x20000550
 8001a78:	20000548 	.word	0x20000548
 8001a7c:	2000054c 	.word	0x2000054c

08001a80 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	httpd_init();
 8001a84:	f009 ff36 	bl	800b8f4 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <http_server_init+0x24>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <http_server_init+0x28>)
 8001a92:	f009 ff4f 	bl	800b934 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8001a96:	2305      	movs	r3, #5
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4804      	ldr	r0, [pc, #16]	; (8001aac <http_server_init+0x2c>)
 8001a9c:	f009 ff8c 	bl	800b9b8 <http_set_cgi_handlers>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000494 	.word	0x20000494
 8001aa8:	08000599 	.word	0x08000599
 8001aac:	0801b988 	.word	0x0801b988

08001ab0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001abc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001acc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001ad0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ad8:	e000      	b.n	8001adc <ITM_SendChar+0x2c>
    {
      __NOP();
 8001ada:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001adc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f9      	beq.n	8001ada <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ae6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <_write>:
static void MX_USART6_UART_Init(void);
void StartDefaultTask(void *argument);
void Start_LED_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	2332      	movs	r3, #50	; 0x32
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <_write+0x48>)
 8001b16:	f002 ffb8 	bl	8004a8a <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e009      	b.n	8001b34 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ffc1 	bl	8001ab0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf1      	blt.n	8001b20 <_write+0x20>
	}
	return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000cc20 	.word	0x2000cc20

08001b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b50:	f000 fb3c 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b54:	f000 f826 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b58:	f000 f8b8 	bl	8001ccc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001b5c:	f000 f88c 	bl	8001c78 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b60:	f004 f80e 	bl	8005b80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <main+0x40>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <main+0x44>)
 8001b6a:	f004 f868 	bl	8005c3e <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <main+0x48>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of my_LED_Task */
  my_LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &my_LED_Task_attributes);
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <main+0x4c>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <main+0x50>)
 8001b7a:	f004 f860 	bl	8005c3e <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <main+0x54>)
 8001b82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f004 f820 	bl	8005bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <main+0x3c>
 8001b8a:	bf00      	nop
 8001b8c:	0801b9b0 	.word	0x0801b9b0
 8001b90:	08001da5 	.word	0x08001da5
 8001b94:	20009be8 	.word	0x20009be8
 8001b98:	0801b9d4 	.word	0x0801b9d4
 8001b9c:	08001dbd 	.word	0x08001dbd
 8001ba0:	2000cd20 	.word	0x2000cd20

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	; 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f014 fee7 	bl	8016986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c18:	23a8      	movs	r3, #168	; 0xa8
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 ff8d 	bl	8003b48 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 f8e2 	bl	8001dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2105      	movs	r1, #5
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 f9ee 	bl	8004038 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c62:	f000 f8cb 	bl	8001dfc <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	; 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART6_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001cb0:	f002 fe9e 	bl	80049f0 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f89f 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000cc20 	.word	0x2000cc20
 8001cc8:	40011400 	.word	0x40011400

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a25      	ldr	r2, [pc, #148]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_GPIO_Init+0xd0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	480b      	ldr	r0, [pc, #44]	; (8001da0 <MX_GPIO_Init+0xd4>)
 8001d74:	f001 feb4 	bl	8003ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_GPIO_Init+0xd4>)
 8001d90:	f001 fd0a 	bl	80037a8 <HAL_GPIO_Init>

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020c00 	.word	0x40020c00

08001da4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001dac:	f003 f936 	bl	800501c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001db0:	f7ff fe66 	bl	8001a80 <http_server_init>
  {
//	  ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
//	         to the lwIP for handling */
//	  	  sys_check_timeouts();/* Handle timeouts */
//
    osDelay(1);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f003 ffd4 	bl	8005d62 <osDelay>
 8001dba:	e7fb      	b.n	8001db4 <StartDefaultTask+0x10>

08001dbc <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <Start_LED_Task+0x18>)
 8001dc8:	f001 fea3 	bl	8003b12 <HAL_GPIO_TogglePin>
    osDelay(150);
 8001dcc:	2096      	movs	r0, #150	; 0x96
 8001dce:	f003 ffc8 	bl	8005d62 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8001dd2:	e7f7      	b.n	8001dc4 <Start_LED_Task+0x8>
 8001dd4:	40020c00 	.word	0x40020c00

08001dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dea:	f000 fa11 	bl	8002210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40002000 	.word	0x40002000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <Error_Handler+0x8>
	...

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_MspInit+0x54>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <HAL_MspInit+0x54>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_MspInit+0x54>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_MspInit+0x54>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_MspInit+0x54>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_MspInit+0x54>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	210f      	movs	r1, #15
 8001e4a:	f06f 0001 	mvn.w	r0, #1
 8001e4e:	f000 fadb 	bl	8002408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_UART_MspInit+0x84>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12b      	bne.n	8001eda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e8c:	f043 0320 	orr.w	r3, r3, #32
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_UART_MspInit+0x88>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_MspInit+0x8c>)
 8001ed6:	f001 fc67 	bl	80037a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800

08001ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	202d      	movs	r0, #45	; 0x2d
 8001f06:	f000 fa7f 	bl	8002408 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f0a:	202d      	movs	r0, #45	; 0x2d
 8001f0c:	f000 fa98 	bl	8002440 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_InitTick+0xa4>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_InitTick+0xa4>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_InitTick+0xa4>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2c:	f107 0210 	add.w	r2, r7, #16
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fa7a 	bl	8004430 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f3c:	f002 fa50 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_InitTick+0xa8>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	3b01      	subs	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_InitTick+0xac>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_InitTick+0xb0>)
 8001f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_InitTick+0xac>)
 8001f5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f60:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_InitTick+0xac>)
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_InitTick+0xac>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_InitTick+0xac>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <HAL_InitTick+0xac>)
 8001f76:	f002 fa8d 	bl	8004494 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <HAL_InitTick+0xac>)
 8001f82:	f002 fae1 	bl	8004548 <HAL_TIM_Base_Start_IT>
 8001f86:	4603      	mov	r3, r0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3730      	adds	r7, #48	; 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	2000cd24 	.word	0x2000cd24
 8001fa0:	40002000 	.word	0x40002000

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fd6:	f002 fb27 	bl	8004628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000cd24 	.word	0x2000cd24

08001fe4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <ETH_IRQHandler+0x10>)
 8001fea:	f000 fe1b 	bl	8002c24 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000e684 	.word	0x2000e684

08001ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_kill>:

int _kill(int pid, int sig)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <_kill+0x20>)
 8002014:	2216      	movs	r2, #22
 8002016:	601a      	str	r2, [r3, #0]
	return -1;
 8002018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	200136cc 	.word	0x200136cc

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe5 	bl	8002008 <_kill>
	while (1) {}		/* Make sure we hang here */
 800203e:	e7fe      	b.n	800203e <_exit+0x12>

08002040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
	}

return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_close>:
	}
	return len;
}

int _close(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	605a      	str	r2, [r3, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:

int _isatty(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d205      	bcs.n	8002120 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <_sbrk+0x6c>)
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211e:	e009      	b.n	8002134 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20020000 	.word	0x20020000
 8002144:	00000400 	.word	0x00000400
 8002148:	20000570 	.word	0x20000570
 800214c:	200136e0 	.word	0x200136e0
 8002150:	200136cc 	.word	0x200136cc

08002154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021a2:	f7ff ffd7 	bl	8002154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f014 fb91 	bl	80168cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7ff fccf 	bl	8001b4c <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000518 	.word	0x20000518
  ldr r2, =_sidata
 80021bc:	08022c7c 	.word	0x08022c7c
  ldr r2, =_sbss
 80021c0:	20000518 	.word	0x20000518
  ldr r4, =_ebss
 80021c4:	200136e0 	.word	0x200136e0

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f8fc 	bl	80023f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f7ff fe78 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fe02 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200004a0 	.word	0x200004a0
 8002234:	2000cd6c 	.word	0x2000cd6c

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000cd6c 	.word	0x2000cd6c

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200004a0 	.word	0x200004a0

08002298 <__NVIC_SetPriorityGrouping>:
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <__NVIC_EnableIRQ+0x38>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff4c 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241a:	f7ff ff61 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 800241e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7ff ffb1 	bl	800238c <NVIC_EncodePriority>
 800242a:	4602      	mov	r2, r0
 800242c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff80 	bl	8002338 <__NVIC_SetPriority>
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff54 	bl	80022fc <__NVIC_EnableIRQ>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800246c:	4baa      	ldr	r3, [pc, #680]	; (8002718 <HAL_ETH_Init+0x2bc>)
 800246e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e183      	b.n	800278a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f002 ff22 	bl	80052e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	4b9e      	ldr	r3, [pc, #632]	; (800271c <HAL_ETH_Init+0x2c0>)
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	4a9d      	ldr	r2, [pc, #628]	; (800271c <HAL_ETH_Init+0x2c0>)
 80024a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024aa:	6453      	str	r3, [r2, #68]	; 0x44
 80024ac:	4b9b      	ldr	r3, [pc, #620]	; (800271c <HAL_ETH_Init+0x2c0>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024b8:	4b99      	ldr	r3, [pc, #612]	; (8002720 <HAL_ETH_Init+0x2c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a98      	ldr	r2, [pc, #608]	; (8002720 <HAL_ETH_Init+0x2c4>)
 80024be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024c2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024c4:	4b96      	ldr	r3, [pc, #600]	; (8002720 <HAL_ETH_Init+0x2c4>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4994      	ldr	r1, [pc, #592]	; (8002720 <HAL_ETH_Init+0x2c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024ea:	f7ff fea5 	bl	8002238 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80024f0:	e011      	b.n	8002516 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80024f2:	f7ff fea1 	bl	8002238 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002500:	d909      	bls.n	8002516 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e139      	b.n	800278a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e4      	bne.n	80024f2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f023 031c 	bic.w	r3, r3, #28
 8002536:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002538:	f001 ff46 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800253c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_ETH_Init+0x2c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d908      	bls.n	8002558 <HAL_ETH_Init+0xfc>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4a77      	ldr	r2, [pc, #476]	; (8002728 <HAL_ETH_Init+0x2cc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d804      	bhi.n	8002558 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e027      	b.n	80025a8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4a73      	ldr	r2, [pc, #460]	; (8002728 <HAL_ETH_Init+0x2cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d908      	bls.n	8002572 <HAL_ETH_Init+0x116>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_ETH_Init+0x2bc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d204      	bcs.n	8002572 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f043 030c 	orr.w	r3, r3, #12
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e01a      	b.n	80025a8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4a68      	ldr	r2, [pc, #416]	; (8002718 <HAL_ETH_Init+0x2bc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d303      	bcc.n	8002582 <HAL_ETH_Init+0x126>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4a6b      	ldr	r2, [pc, #428]	; (800272c <HAL_ETH_Init+0x2d0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d911      	bls.n	80025a6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_ETH_Init+0x2d0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d908      	bls.n	800259c <HAL_ETH_Init+0x140>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4a68      	ldr	r2, [pc, #416]	; (8002730 <HAL_ETH_Init+0x2d4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d804      	bhi.n	800259c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e005      	b.n	80025a8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	e000      	b.n	80025a8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025a6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fc17 	bl	8002dea <HAL_ETH_WritePHYRegister>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80025c6:	6939      	ldr	r1, [r7, #16]
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fdcd 	bl	8003168 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0d7      	b.n	800278a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80025da:	20ff      	movs	r0, #255	; 0xff
 80025dc:	f7ff fe38 	bl	8002250 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a5 	beq.w	8002734 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80025ea:	f7ff fe25 	bl	8002238 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fb8e 	bl	8002d1a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80025fe:	f7ff fe1b 	bl	8002238 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d90f      	bls.n	8002630 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002614:	6939      	ldr	r1, [r7, #16]
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fda6 	bl	8003168 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0ac      	b.n	800278a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0da      	beq.n	80025f0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800263a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fbd2 	bl	8002dea <HAL_ETH_WritePHYRegister>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002650:	6939      	ldr	r1, [r7, #16]
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fd88 	bl	8003168 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002660:	2301      	movs	r3, #1
 8002662:	e092      	b.n	800278a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff fde8 	bl	8002238 <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	461a      	mov	r2, r3
 8002670:	2101      	movs	r1, #1
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fb51 	bl	8002d1a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002678:	f7ff fdde 	bl	8002238 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d90f      	bls.n	80026aa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fd69 	bl	8003168 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e06f      	b.n	800278a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0da      	beq.n	800266a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	461a      	mov	r2, r3
 80026ba:	2110      	movs	r1, #16
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fb2c 	bl	8002d1a <HAL_ETH_ReadPHYRegister>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fd4a 	bl	8003168 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026dc:	2301      	movs	r3, #1
 80026de:	e054      	b.n	800278a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e002      	b.n	80026fa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	e035      	b.n	8002778 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e030      	b.n	8002778 <HAL_ETH_Init+0x31c>
 8002716:	bf00      	nop
 8002718:	03938700 	.word	0x03938700
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	01312cff 	.word	0x01312cff
 8002728:	02160ebf 	.word	0x02160ebf
 800272c:	05f5e0ff 	.word	0x05f5e0ff
 8002730:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002744:	4313      	orrs	r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb4c 	bl	8002dea <HAL_ETH_WritePHYRegister>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800275c:	6939      	ldr	r1, [r7, #16]
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fd02 	bl	8003168 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e00c      	b.n	800278a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002770:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002774:	f7ff fd6c 	bl	8002250 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002778:	6939      	ldr	r1, [r7, #16]
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fcf4 	bl	8003168 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop

08002794 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_ETH_DMATxDescListInit+0x20>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e052      	b.n	800285a <HAL_ETH_DMATxDescListInit+0xc6>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e030      	b.n	8002832 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4413      	add	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027e0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	429a      	cmp	r2, r3
 8002812:	d208      	bcs.n	8002826 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	461a      	mov	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	e002      	b.n	800282c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3ca      	bcc.n	80027d0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002844:	3310      	adds	r3, #16
 8002846:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ETH_DMARxDescListInit+0x20>
 8002882:	2302      	movs	r3, #2
 8002884:	e056      	b.n	8002934 <HAL_ETH_DMARxDescListInit+0xce>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e034      	b.n	800290c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4413      	add	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028b2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028ba:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d208      	bcs.n	8002900 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	4413      	add	r3, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	e002      	b.n	8002906 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3c6      	bcc.n	80028a2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291e:	330c      	adds	r3, #12
 8002920:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_ETH_TransmitFrame+0x24>
 8002960:	2302      	movs	r3, #2
 8002962:	e0cd      	b.n	8002b00 <HAL_ETH_TransmitFrame+0x1c0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800298a:	2301      	movs	r3, #1
 800298c:	e0b8      	b.n	8002b00 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	da09      	bge.n	80029ac <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2212      	movs	r2, #18
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0a9      	b.n	8002b00 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d915      	bls.n	80029e2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_ETH_TransmitFrame+0x1cc>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_ETH_TransmitFrame+0x1cc>)
 80029c6:	fba3 1302 	umull	r1, r3, r3, r2
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e001      	b.n	80029e6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80029e2:	2301      	movs	r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d11c      	bne.n	8002a26 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80029fa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a06:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a16:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a24:	e04b      	b.n	8002abe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e044      	b.n	8002ab6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a3a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a50:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a5a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d116      	bne.n	8002a94 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a74:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <HAL_ETH_TransmitFrame+0x1d0>)
 8002a7a:	fb02 f203 	mul.w	r2, r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002a86:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a92:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3b6      	bcc.n	8002a2c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac6:	3314      	adds	r3, #20
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	3314      	adds	r3, #20
 8002adc:	2204      	movs	r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	ac02b00b 	.word	0xac02b00b
 8002b10:	fffffa0c 	.word	0xfffffa0c

08002b14 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e074      	b.n	8002c18 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002b3e:	e05a      	b.n	8002bf6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d10d      	bne.n	8002b72 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b70:	e041      	b.n	8002bf6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
 8002b96:	e02e      	b.n	8002bf6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d103      	bne.n	8002bba <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002bc6:	1f1a      	subs	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e010      	b.n	8002c18 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db02      	blt.n	8002c06 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d99c      	bls.n	8002b40 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c34:	3314      	adds	r3, #20
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d112      	bne.n	8002c66 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f002 fbfb 	bl	800543c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4e:	3314      	adds	r3, #20
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c64:	e01b      	b.n	8002c9e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6e:	3314      	adds	r3, #20
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d111      	bne.n	8002c9e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f839 	bl	8002cf2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	3314      	adds	r3, #20
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cac:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	3314      	adds	r3, #20
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc2:	d112      	bne.n	8002cea <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f81e 	bl	8002d06 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cd8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	460b      	mov	r3, r1
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b82      	cmp	r3, #130	; 0x82
 8002d3a:	d101      	bne.n	8002d40 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e050      	b.n	8002de2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2282      	movs	r2, #130	; 0x82
 8002d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 031c 	and.w	r3, r3, #28
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8a1b      	ldrh	r3, [r3, #16]
 8002d5c:	02db      	lsls	r3, r3, #11
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0302 	bic.w	r3, r3, #2
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8c:	f7ff fa54 	bl	8002238 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d92:	e015      	b.n	8002dc0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002d94:	f7ff fa50 	bl	8002238 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d309      	bcc.n	8002db8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e014      	b.n	8002de2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e4      	bne.n	8002d94 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	460b      	mov	r3, r1
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b42      	cmp	r3, #66	; 0x42
 8002e0a:	d101      	bne.n	8002e10 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e04e      	b.n	8002eae <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2242      	movs	r2, #66	; 0x42
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 031c 	and.w	r3, r3, #28
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8a1b      	ldrh	r3, [r3, #16]
 8002e2c:	02db      	lsls	r3, r3, #11
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e66:	f7ff f9e7 	bl	8002238 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e6c:	e015      	b.n	8002e9a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002e6e:	f7ff f9e3 	bl	8002238 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d309      	bcc.n	8002e92 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e00d      	b.n	8002eae <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e4      	bne.n	8002e6e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_ETH_Start+0x16>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e01f      	b.n	8002f0c <HAL_ETH_Start+0x56>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fb45 	bl	800356c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb7c 	bl	80035e0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fc13 	bl	8003714 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fbb0 	bl	8003654 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fbdd 	bl	80036b4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ETH_Stop+0x16>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e01f      	b.n	8002f6a <HAL_ETH_Stop+0x56>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fba2 	bl	8003684 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fbcf 	bl	80036e4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fb67 	bl	800361a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fbe1 	bl	8003714 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb27 	bl	80035a6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_ETH_ConfigMAC+0x1c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e0e4      	b.n	800315a <HAL_ETH_ConfigMAC+0x1e6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b1 	beq.w	800310a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <HAL_ETH_ConfigMAC+0x1f0>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002fc0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002fc6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002fcc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002fd2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002fd8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002fde:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002fe4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002fea:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002ff0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002ff6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002ffc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003002:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800301a:	2001      	movs	r0, #1
 800301c:	f7ff f918 	bl	8002250 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003030:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003036:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800303c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003042:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003048:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800304e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800305a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800305c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003066:	2001      	movs	r0, #1
 8003068:	f7ff f8f2 	bl	8002250 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800307c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003086:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030a4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80030aa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80030b0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80030b6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80030bc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7ff f8bb 	bl	8002250 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f7ff f8a8 	bl	8002250 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	61da      	str	r2, [r3, #28]
 8003108:	e01e      	b.n	8003148 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003118:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800313a:	2001      	movs	r0, #1
 800313c:	f7ff f888 	bl	8002250 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	ff20810f 	.word	0xff20810f

08003168 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b0b0      	sub	sp, #192	; 0xc0
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800318c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003196:	2300      	movs	r3, #0
 8003198:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b2:	663b      	str	r3, [r7, #96]	; 0x60
 80031b4:	e001      	b.n	80031ba <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80031ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031be:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031c4:	2300      	movs	r3, #0
 80031c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80031d4:	2340      	movs	r3, #64	; 0x40
 80031d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800323c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003240:	4bac      	ldr	r3, [pc, #688]	; (80034f4 <ETH_MACDMAConfig+0x38c>)
 8003242:	4013      	ands	r3, r2
 8003244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003248:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800324a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800324c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003250:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003254:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800325a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800325c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800325e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003262:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003268:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800326a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800326c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800326e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003270:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003274:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003278:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800327a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800327c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800327e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003290:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800329c:	2001      	movs	r0, #1
 800329e:	f7fe ffd7 	bl	8002250 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032aa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032b0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80032b4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80032b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80032ba:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80032bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80032c0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80032c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80032c6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80032c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80032d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80032d8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032da:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fe ffb2 	bl	8002250 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032fe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003308:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003314:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003318:	f64f 7341 	movw	r3, #65345	; 0xff41
 800331c:	4013      	ands	r3, r2
 800331e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003326:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800332c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800332e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003332:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003338:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800333a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800333e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003340:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003344:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003346:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003358:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003364:	2001      	movs	r0, #1
 8003366:	f7fe ff73 	bl	8002250 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003372:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003374:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003378:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800338e:	2001      	movs	r0, #1
 8003390:	f7fe ff5e 	bl	8002250 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800339c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033b0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80033c2:	2304      	movs	r3, #4
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80033c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80033cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033dc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	3318      	adds	r3, #24
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033fe:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <ETH_MACDMAConfig+0x390>)
 8003400:	4013      	ands	r3, r2
 8003402:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003406:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003408:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800340a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800340c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800340e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003410:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003412:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003414:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003416:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003418:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800341a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800341c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800341e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003422:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003426:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343a:	3318      	adds	r3, #24
 800343c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003440:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800344a:	3318      	adds	r3, #24
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fe fefc 	bl	8002250 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	3318      	adds	r3, #24
 8003462:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003466:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800346c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003470:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003474:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003478:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800347a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800347e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003482:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800348c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003490:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034a0:	2001      	movs	r0, #1
 80034a2:	f7fe fed5 	bl	8002250 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10f      	bne.n	80034dc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c4:	331c      	adds	r3, #28
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d8:	331c      	adds	r3, #28
 80034da:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	461a      	mov	r2, r3
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f809 	bl	80034fc <ETH_MACAddressConfig>
}
 80034ea:	bf00      	nop
 80034ec:	37c0      	adds	r7, #192	; 0xc0
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	ff20810f 	.word	0xff20810f
 80034f8:	f8de3f23 	.word	0xf8de3f23

080034fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3305      	adds	r3, #5
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	3204      	adds	r2, #4
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <ETH_MACAddressConfig+0x68>)
 800351e:	4413      	add	r3, r2
 8003520:	461a      	mov	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3303      	adds	r3, #3
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	061a      	lsls	r2, r3, #24
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3302      	adds	r3, #2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3301      	adds	r3, #1
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	4313      	orrs	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <ETH_MACAddressConfig+0x6c>)
 800354e:	4413      	add	r3, r2
 8003550:	461a      	mov	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40028040 	.word	0x40028040
 8003568:	40028044 	.word	0x40028044

0800356c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003590:	2001      	movs	r0, #1
 8003592:	f000 f8e9 	bl	8003768 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 f8cc 	bl	8003768 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0204 	orr.w	r2, r2, #4
 80035fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003604:	2001      	movs	r0, #1
 8003606:	f000 f8af 	bl	8003768 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0204 	bic.w	r2, r2, #4
 8003634:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800363e:	2001      	movs	r0, #1
 8003640:	f000 f892 	bl	8003768 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003664:	3318      	adds	r3, #24
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003674:	3318      	adds	r3, #24
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003694:	3318      	adds	r3, #24
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	3318      	adds	r3, #24
 80036a6:	601a      	str	r2, [r3, #0]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c4:	3318      	adds	r3, #24
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0202 	orr.w	r2, r2, #2
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	3318      	adds	r3, #24
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f4:	3318      	adds	r3, #24
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0202 	bic.w	r2, r2, #2
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	3318      	adds	r3, #24
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	3318      	adds	r3, #24
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	3318      	adds	r3, #24
 800373a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003744:	3318      	adds	r3, #24
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800374a:	2001      	movs	r0, #1
 800374c:	f000 f80c 	bl	8003768 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375a:	3318      	adds	r3, #24
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <ETH_Delay+0x38>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <ETH_Delay+0x3c>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0a5b      	lsrs	r3, r3, #9
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003784:	bf00      	nop
  } 
  while (Delay --);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	60fa      	str	r2, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f9      	bne.n	8003784 <ETH_Delay+0x1c>
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000498 	.word	0x20000498
 80037a4:	10624dd3 	.word	0x10624dd3

080037a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e16b      	b.n	8003a9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037c4:	2201      	movs	r2, #1
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	f040 815a 	bne.w	8003a96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d005      	beq.n	80037fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d130      	bne.n	800385c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0201 	and.w	r2, r3, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b03      	cmp	r3, #3
 8003866:	d017      	beq.n	8003898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	2203      	movs	r2, #3
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d123      	bne.n	80038ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	08da      	lsrs	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3208      	adds	r2, #8
 80038ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	220f      	movs	r2, #15
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	08da      	lsrs	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3208      	adds	r2, #8
 80038e6:	69b9      	ldr	r1, [r7, #24]
 80038e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0203 	and.w	r2, r3, #3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80b4 	beq.w	8003a96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <HAL_GPIO_Init+0x30c>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a5f      	ldr	r2, [pc, #380]	; (8003ab4 <HAL_GPIO_Init+0x30c>)
 8003938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_GPIO_Init+0x30c>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800394a:	4a5b      	ldr	r2, [pc, #364]	; (8003ab8 <HAL_GPIO_Init+0x310>)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	3302      	adds	r3, #2
 8003952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	220f      	movs	r2, #15
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a52      	ldr	r2, [pc, #328]	; (8003abc <HAL_GPIO_Init+0x314>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02b      	beq.n	80039ce <HAL_GPIO_Init+0x226>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a51      	ldr	r2, [pc, #324]	; (8003ac0 <HAL_GPIO_Init+0x318>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d025      	beq.n	80039ca <HAL_GPIO_Init+0x222>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a50      	ldr	r2, [pc, #320]	; (8003ac4 <HAL_GPIO_Init+0x31c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01f      	beq.n	80039c6 <HAL_GPIO_Init+0x21e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_GPIO_Init+0x320>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d019      	beq.n	80039c2 <HAL_GPIO_Init+0x21a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <HAL_GPIO_Init+0x324>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_GPIO_Init+0x216>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <HAL_GPIO_Init+0x328>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_Init+0x212>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4c      	ldr	r2, [pc, #304]	; (8003ad4 <HAL_GPIO_Init+0x32c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x20e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4b      	ldr	r2, [pc, #300]	; (8003ad8 <HAL_GPIO_Init+0x330>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_Init+0x20a>
 80039ae:	2307      	movs	r3, #7
 80039b0:	e00e      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039b2:	2308      	movs	r3, #8
 80039b4:	e00c      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039b6:	2306      	movs	r3, #6
 80039b8:	e00a      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039be:	2304      	movs	r3, #4
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x228>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x310>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ee:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <HAL_GPIO_Init+0x334>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a12:	4a32      	ldr	r2, [pc, #200]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f ae90 	bls.w	80037c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40021c00 	.word	0x40021c00
 8003adc:	40013c00 	.word	0x40013c00

08003ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
 8003aec:	4613      	mov	r3, r2
 8003aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af0:	787b      	ldrb	r3, [r7, #1]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003afc:	e003      	b.n	8003b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003afe:	887b      	ldrh	r3, [r7, #2]
 8003b00:	041a      	lsls	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	619a      	str	r2, [r3, #24]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b24:	887a      	ldrh	r2, [r7, #2]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	041a      	lsls	r2, r3, #16
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	887b      	ldrh	r3, [r7, #2]
 8003b32:	400b      	ands	r3, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e264      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d075      	beq.n	8003c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b66:	4ba3      	ldr	r3, [pc, #652]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d00c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4ba0      	ldr	r3, [pc, #640]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d112      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b9d      	ldr	r3, [pc, #628]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	4b99      	ldr	r3, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d05b      	beq.n	8003c50 <HAL_RCC_OscConfig+0x108>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d157      	bne.n	8003c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e23f      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_OscConfig+0x74>
 8003bae:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a90      	ldr	r2, [pc, #576]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e01d      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x98>
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a8a      	ldr	r2, [pc, #552]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0xb0>
 8003be0:	4b84      	ldr	r3, [pc, #528]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a83      	ldr	r2, [pc, #524]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a80      	ldr	r2, [pc, #512]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fb1a 	bl	8002238 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fb16 	bl	8002238 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e204      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0xc0>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe fb06 	bl	8002238 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe fb02 	bl	8002238 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1f0      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0xe8>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d063      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d11c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x152>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1c4      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b56      	ldr	r3, [pc, #344]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4952      	ldr	r1, [pc, #328]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	e03a      	b.n	8003d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <HAL_RCC_OscConfig+0x2b0>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fabb 	bl	8002238 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fab7 	bl	8002238 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1a5      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4940      	ldr	r1, [pc, #256]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCC_OscConfig+0x2b0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fa9a 	bl	8002238 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fa96 	bl	8002238 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e184      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d030      	beq.n	8003d94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCC_OscConfig+0x2b4>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fe fa7a 	bl	8002238 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe fa76 	bl	8002238 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e164      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x200>
 8003d66:	e015      	b.n	8003d94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x2b4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fe fa63 	bl	8002238 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fe fa5f 	bl	8002238 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e14d      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a0 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_RCC_OscConfig+0x2b8>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dea:	f7fe fa25 	bl	8002238 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	e011      	b.n	8003e16 <HAL_RCC_OscConfig+0x2ce>
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	42470000 	.word	0x42470000
 8003dfc:	42470e80 	.word	0x42470e80
 8003e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fe fa18 	bl	8002238 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e106      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b85      	ldr	r3, [pc, #532]	; (800402c <HAL_RCC_OscConfig+0x4e4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x2f0>
 8003e2a:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a80      	ldr	r2, [pc, #512]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x32a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x312>
 8003e40:	4b7b      	ldr	r3, [pc, #492]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a7a      	ldr	r2, [pc, #488]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	4b78      	ldr	r3, [pc, #480]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a77      	ldr	r2, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x32a>
 8003e5a:	4b75      	ldr	r3, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a74      	ldr	r2, [pc, #464]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a71      	ldr	r2, [pc, #452]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fe f9dd 	bl	8002238 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe f9d9 	bl	8002238 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0c5      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b65      	ldr	r3, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x33a>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe f9c7 	bl	8002238 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe f9c3 	bl	8002238 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0af      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 809b 	beq.w	8004022 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d141      	bne.n	8003f84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <HAL_RCC_OscConfig+0x4ec>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe f997 	bl	8002238 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe f993 	bl	8002238 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e081      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	4b43      	ldr	r3, [pc, #268]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	019b      	lsls	r3, r3, #6
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	3b01      	subs	r3, #1
 8003f46:	041b      	lsls	r3, r3, #16
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	4937      	ldr	r1, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f56:	4b37      	ldr	r3, [pc, #220]	; (8004034 <HAL_RCC_OscConfig+0x4ec>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f96c 	bl	8002238 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe f968 	bl	8002238 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e056      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x41c>
 8003f82:	e04e      	b.n	8004022 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_RCC_OscConfig+0x4ec>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f955 	bl	8002238 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fe f951 	bl	8002238 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e03f      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x44a>
 8003fb0:	e037      	b.n	8004022 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e032      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <HAL_RCC_OscConfig+0x4e8>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d028      	beq.n	800401e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d121      	bne.n	800401e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11a      	bne.n	800401e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fee:	4013      	ands	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d111      	bne.n	800401e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d107      	bne.n	800401e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40007000 	.word	0x40007000
 8004030:	40023800 	.word	0x40023800
 8004034:	42470060 	.word	0x42470060

08004038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0cc      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800404c:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d90c      	bls.n	8004074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0b8      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d020      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800408c:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a58      	ldr	r2, [pc, #352]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a4:	4b53      	ldr	r3, [pc, #332]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a52      	ldr	r2, [pc, #328]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	494d      	ldr	r1, [pc, #308]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d044      	beq.n	8004158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d119      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e07f      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d003      	beq.n	80040f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e06f      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e067      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004116:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4934      	ldr	r1, [pc, #208]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004128:	f7fe f886 	bl	8002238 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fe f882 	bl	8002238 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e04f      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 020c 	and.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1eb      	bne.n	8004130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d20c      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e032      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4916      	ldr	r1, [pc, #88]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	490e      	ldr	r1, [pc, #56]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041be:	f000 f821 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490a      	ldr	r1, [pc, #40]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd fe86 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00
 80041f4:	40023800 	.word	0x40023800
 80041f8:	0801b9f8 	.word	0x0801b9f8
 80041fc:	20000498 	.word	0x20000498
 8004200:	2000049c 	.word	0x2000049c

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	2300      	movs	r3, #0
 8004216:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421c:	4b67      	ldr	r3, [pc, #412]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	2b08      	cmp	r3, #8
 8004226:	d00d      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x40>
 8004228:	2b08      	cmp	r3, #8
 800422a:	f200 80bd 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x34>
 8004232:	2b04      	cmp	r3, #4
 8004234:	d003      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x3a>
 8004236:	e0b7      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800423a:	60bb      	str	r3, [r7, #8]
       break;
 800423c:	e0b7      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423e:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004240:	60bb      	str	r3, [r7, #8]
      break;
 8004242:	e0b4      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004244:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424e:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04d      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	461a      	mov	r2, r3
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	ea02 0800 	and.w	r8, r2, r0
 8004272:	ea03 0901 	and.w	r9, r3, r1
 8004276:	4640      	mov	r0, r8
 8004278:	4649      	mov	r1, r9
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	014b      	lsls	r3, r1, #5
 8004284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004288:	0142      	lsls	r2, r0, #5
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	ebb0 0008 	subs.w	r0, r0, r8
 8004292:	eb61 0109 	sbc.w	r1, r1, r9
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042a4:	0182      	lsls	r2, r0, #6
 80042a6:	1a12      	subs	r2, r2, r0
 80042a8:	eb63 0301 	sbc.w	r3, r3, r1
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	00d9      	lsls	r1, r3, #3
 80042b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ba:	00d0      	lsls	r0, r2, #3
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	eb12 0208 	adds.w	r2, r2, r8
 80042c4:	eb43 0309 	adc.w	r3, r3, r9
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	0259      	lsls	r1, r3, #9
 80042d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042d6:	0250      	lsls	r0, r2, #9
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f7fb ffda 	bl	80002a0 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e04a      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	ea02 0400 	and.w	r4, r2, r0
 800430e:	ea03 0501 	and.w	r5, r3, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	014b      	lsls	r3, r1, #5
 8004320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004324:	0142      	lsls	r2, r0, #5
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	1b00      	subs	r0, r0, r4
 800432c:	eb61 0105 	sbc.w	r1, r1, r5
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	018b      	lsls	r3, r1, #6
 800433a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800433e:	0182      	lsls	r2, r0, #6
 8004340:	1a12      	subs	r2, r2, r0
 8004342:	eb63 0301 	sbc.w	r3, r3, r1
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	00d9      	lsls	r1, r3, #3
 8004350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004354:	00d0      	lsls	r0, r2, #3
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	1912      	adds	r2, r2, r4
 800435c:	eb45 0303 	adc.w	r3, r5, r3
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	0299      	lsls	r1, r3, #10
 800436a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800436e:	0290      	lsls	r0, r2, #10
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f7fb ff8e 	bl	80002a0 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	60bb      	str	r3, [r7, #8]
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043aa:	60bb      	str	r3, [r7, #8]
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	68bb      	ldr	r3, [r7, #8]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000498 	.word	0x20000498

080043e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e4:	f7ff fff0 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	0801ba08 	.word	0x0801ba08

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800440c:	f7ff ffdc 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0b5b      	lsrs	r3, r3, #13
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0801ba08 	.word	0x0801ba08

08004430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	220f      	movs	r2, #15
 800443e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_GetClockConfig+0x5c>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0203 	and.w	r2, r3, #3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <HAL_RCC_GetClockConfig+0x5c>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_RCC_GetClockConfig+0x5c>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_GetClockConfig+0x5c>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_RCC_GetClockConfig+0x60>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0207 	and.w	r2, r3, #7
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	40023c00 	.word	0x40023c00

08004494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e041      	b.n	800452a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f839 	bl	8004532 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 f9d8 	bl	8004888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e04e      	b.n	80045fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a23      	ldr	r2, [pc, #140]	; (800460c <HAL_TIM_Base_Start_IT+0xc4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d01d      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_TIM_Base_Start_IT+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_TIM_Base_Start_IT+0xcc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <HAL_TIM_Base_Start_IT+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_TIM_Base_Start_IT+0xd4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIM_Base_Start_IT+0xdc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d111      	bne.n	80045ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d010      	beq.n	80045fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ea:	e007      	b.n	80045fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40010400 	.word	0x40010400
 8004620:	40014000 	.word	0x40014000
 8004624:	40001800 	.word	0x40001800

08004628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8ee 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8e0 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8f1 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0204 	mvn.w	r2, #4
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8c4 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8b6 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8c7 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0208 	mvn.w	r2, #8
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f89a 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f88c 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f89d 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b10      	cmp	r3, #16
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0210 	mvn.w	r2, #16
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2208      	movs	r2, #8
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f870 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f862 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f873 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d10e      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0201 	mvn.w	r2, #1
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fb16 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d10e      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d107      	bne.n	80047d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f902 	bl	80049dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b40      	cmp	r3, #64	; 0x40
 80047e4:	d10e      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d107      	bne.n	8004804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f838 	bl	8004874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d107      	bne.n	8004830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0220 	mvn.w	r2, #32
 8004828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8cc 	bl	80049c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a40      	ldr	r2, [pc, #256]	; (800499c <TIM_Base_SetConfig+0x114>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <TIM_Base_SetConfig+0x118>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <TIM_Base_SetConfig+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3b      	ldr	r2, [pc, #236]	; (80049a8 <TIM_Base_SetConfig+0x120>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3a      	ldr	r2, [pc, #232]	; (80049ac <TIM_Base_SetConfig+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	; (800499c <TIM_Base_SetConfig+0x114>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d02b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d027      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <TIM_Base_SetConfig+0x118>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d023      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <TIM_Base_SetConfig+0x11c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <TIM_Base_SetConfig+0x120>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a29      	ldr	r2, [pc, #164]	; (80049ac <TIM_Base_SetConfig+0x124>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d017      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <TIM_Base_SetConfig+0x128>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <TIM_Base_SetConfig+0x12c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <TIM_Base_SetConfig+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a25      	ldr	r2, [pc, #148]	; (80049bc <TIM_Base_SetConfig+0x134>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <TIM_Base_SetConfig+0x138>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <TIM_Base_SetConfig+0x13c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0xf8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <TIM_Base_SetConfig+0x124>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40010400 	.word	0x40010400
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800
 80049bc:	40001800 	.word	0x40001800
 80049c0:	40001c00 	.word	0x40001c00
 80049c4:	40002000 	.word	0x40002000

080049c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e03f      	b.n	8004a82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fa22 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f929 	bl	8004c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d17c      	bne.n	8004ba4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_Transmit+0x2c>
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e075      	b.n	8004ba6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Transmit+0x3e>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e06e      	b.n	8004ba6 <HAL_UART_Transmit+0x11c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2221      	movs	r2, #33	; 0x21
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fbab 	bl	8002238 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	d108      	bne.n	8004b0c <HAL_UART_Transmit+0x82>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b1c:	e02a      	b.n	8004b74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f840 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e036      	b.n	8004ba6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	3302      	adds	r3, #2
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	e007      	b.n	8004b66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	3301      	adds	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1cf      	bne.n	8004b1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2140      	movs	r1, #64	; 0x40
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f810 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b090      	sub	sp, #64	; 0x40
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	e050      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc6:	d04c      	beq.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0x30>
 8004bce:	f7fd fb33 	bl	8002238 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d241      	bcs.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bfe:	637a      	str	r2, [r7, #52]	; 0x34
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	613b      	str	r3, [r7, #16]
   return(result);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c32:	623a      	str	r2, [r7, #32]
 8004c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e00f      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d09f      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3740      	adds	r7, #64	; 0x40
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	b09f      	sub	sp, #124	; 0x7c
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca2:	68d9      	ldr	r1, [r3, #12]
 8004ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	ea40 0301 	orr.w	r3, r0, r1
 8004cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cd0:	f021 010c 	bic.w	r1, r1, #12
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	6999      	ldr	r1, [r3, #24]
 8004cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4bc5      	ldr	r3, [pc, #788]	; (8005010 <UART_SetConfig+0x384>)
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d004      	beq.n	8004d0a <UART_SetConfig+0x7e>
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4bc3      	ldr	r3, [pc, #780]	; (8005014 <UART_SetConfig+0x388>)
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d103      	bne.n	8004d12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0a:	f7ff fb7d 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8004d0e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d10:	e002      	b.n	8004d18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7ff fb65 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8004d16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	f040 80b6 	bne.w	8004e90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d26:	461c      	mov	r4, r3
 8004d28:	f04f 0500 	mov.w	r5, #0
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	6439      	str	r1, [r7, #64]	; 0x40
 8004d34:	415b      	adcs	r3, r3
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
 8004d38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3c:	1912      	adds	r2, r2, r4
 8004d3e:	eb45 0303 	adc.w	r3, r5, r3
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	00d9      	lsls	r1, r3, #3
 8004d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d50:	00d0      	lsls	r0, r2, #3
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	1911      	adds	r1, r2, r4
 8004d58:	6639      	str	r1, [r7, #96]	; 0x60
 8004d5a:	416b      	adcs	r3, r5
 8004d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d78:	f7fb fa92 	bl	80002a0 <__aeabi_uldivmod>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4ba5      	ldr	r3, [pc, #660]	; (8005018 <UART_SetConfig+0x38c>)
 8004d82:	fba3 2302 	umull	r2, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	011e      	lsls	r6, r3, #4
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8c:	461c      	mov	r4, r3
 8004d8e:	f04f 0500 	mov.w	r5, #0
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	1891      	adds	r1, r2, r2
 8004d98:	6339      	str	r1, [r7, #48]	; 0x30
 8004d9a:	415b      	adcs	r3, r3
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004da2:	1912      	adds	r2, r2, r4
 8004da4:	eb45 0303 	adc.w	r3, r5, r3
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	00d9      	lsls	r1, r3, #3
 8004db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db6:	00d0      	lsls	r0, r2, #3
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	1911      	adds	r1, r2, r4
 8004dbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc0:	416b      	adcs	r3, r5
 8004dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dde:	f7fb fa5f 	bl	80002a0 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b8c      	ldr	r3, [pc, #560]	; (8005018 <UART_SetConfig+0x38c>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	; 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	3332      	adds	r3, #50	; 0x32
 8004dfa:	4a87      	ldr	r2, [pc, #540]	; (8005018 <UART_SetConfig+0x38c>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e08:	441e      	add	r6, r3
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	1894      	adds	r4, r2, r2
 8004e18:	623c      	str	r4, [r7, #32]
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e22:	1812      	adds	r2, r2, r0
 8004e24:	eb41 0303 	adc.w	r3, r1, r3
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	f04f 0500 	mov.w	r5, #0
 8004e30:	00dd      	lsls	r5, r3, #3
 8004e32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e36:	00d4      	lsls	r4, r2, #3
 8004e38:	4622      	mov	r2, r4
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	1814      	adds	r4, r2, r0
 8004e3e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e40:	414b      	adcs	r3, r1
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
 8004e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	61b9      	str	r1, [r7, #24]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e5e:	f7fb fa1f 	bl	80002a0 <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <UART_SetConfig+0x38c>)
 8004e68:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	2164      	movs	r1, #100	; 0x64
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	3332      	adds	r3, #50	; 0x32
 8004e7a:	4a67      	ldr	r2, [pc, #412]	; (8005018 <UART_SetConfig+0x38c>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4432      	add	r2, r6
 8004e8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8e:	e0b9      	b.n	8005004 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e92:	461c      	mov	r4, r3
 8004e94:	f04f 0500 	mov.w	r5, #0
 8004e98:	4622      	mov	r2, r4
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	6139      	str	r1, [r7, #16]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ea8:	1912      	adds	r2, r2, r4
 8004eaa:	eb45 0303 	adc.w	r3, r5, r3
 8004eae:	f04f 0000 	mov.w	r0, #0
 8004eb2:	f04f 0100 	mov.w	r1, #0
 8004eb6:	00d9      	lsls	r1, r3, #3
 8004eb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ebc:	00d0      	lsls	r0, r2, #3
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	eb12 0804 	adds.w	r8, r2, r4
 8004ec6:	eb43 0905 	adc.w	r9, r3, r5
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	008b      	lsls	r3, r1, #2
 8004ede:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ee2:	0082      	lsls	r2, r0, #2
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb f9da 	bl	80002a0 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b49      	ldr	r3, [pc, #292]	; (8005018 <UART_SetConfig+0x38c>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011e      	lsls	r6, r3, #4
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	4618      	mov	r0, r3
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	1894      	adds	r4, r2, r2
 8004f08:	60bc      	str	r4, [r7, #8]
 8004f0a:	415b      	adcs	r3, r3
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f12:	1812      	adds	r2, r2, r0
 8004f14:	eb41 0303 	adc.w	r3, r1, r3
 8004f18:	f04f 0400 	mov.w	r4, #0
 8004f1c:	f04f 0500 	mov.w	r5, #0
 8004f20:	00dd      	lsls	r5, r3, #3
 8004f22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f26:	00d4      	lsls	r4, r2, #3
 8004f28:	4622      	mov	r2, r4
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	1814      	adds	r4, r2, r0
 8004f2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f30:	414b      	adcs	r3, r1
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f4c:	0082      	lsls	r2, r0, #2
 8004f4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f52:	f7fb f9a5 	bl	80002a0 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <UART_SetConfig+0x38c>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <UART_SetConfig+0x38c>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f7a:	441e      	add	r6, r3
 8004f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	1894      	adds	r4, r2, r2
 8004f8a:	603c      	str	r4, [r7, #0]
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f94:	1812      	adds	r2, r2, r0
 8004f96:	eb41 0303 	adc.w	r3, r1, r3
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	f04f 0500 	mov.w	r5, #0
 8004fa2:	00dd      	lsls	r5, r3, #3
 8004fa4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fa8:	00d4      	lsls	r4, r2, #3
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	eb12 0a00 	adds.w	sl, r2, r0
 8004fb2:	eb43 0b01 	adc.w	fp, r3, r1
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fce:	0082      	lsls	r2, r0, #2
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb f964 	bl	80002a0 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <UART_SetConfig+0x38c>)
 8004fde:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a09      	ldr	r2, [pc, #36]	; (8005018 <UART_SetConfig+0x38c>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4432      	add	r2, r6
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	377c      	adds	r7, #124	; 0x7c
 8005008:	46bd      	mov	sp, r7
 800500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	40011000 	.word	0x40011000
 8005014:	40011400 	.word	0x40011400
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005022:	4ba0      	ldr	r3, [pc, #640]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005024:	22c0      	movs	r2, #192	; 0xc0
 8005026:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005028:	4b9e      	ldr	r3, [pc, #632]	; (80052a4 <MX_LWIP_Init+0x288>)
 800502a:	22a8      	movs	r2, #168	; 0xa8
 800502c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800502e:	4b9d      	ldr	r3, [pc, #628]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005030:	2212      	movs	r2, #18
 8005032:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005034:	4b9b      	ldr	r3, [pc, #620]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005036:	226f      	movs	r2, #111	; 0x6f
 8005038:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800503a:	4b9b      	ldr	r3, [pc, #620]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800503c:	22ff      	movs	r2, #255	; 0xff
 800503e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005040:	4b99      	ldr	r3, [pc, #612]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005042:	22ff      	movs	r2, #255	; 0xff
 8005044:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005046:	4b98      	ldr	r3, [pc, #608]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800504c:	4b96      	ldr	r3, [pc, #600]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800504e:	2200      	movs	r2, #0
 8005050:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005052:	4b96      	ldr	r3, [pc, #600]	; (80052ac <MX_LWIP_Init+0x290>)
 8005054:	22c0      	movs	r2, #192	; 0xc0
 8005056:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005058:	4b94      	ldr	r3, [pc, #592]	; (80052ac <MX_LWIP_Init+0x290>)
 800505a:	22a8      	movs	r2, #168	; 0xa8
 800505c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800505e:	4b93      	ldr	r3, [pc, #588]	; (80052ac <MX_LWIP_Init+0x290>)
 8005060:	2212      	movs	r2, #18
 8005062:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005064:	4b91      	ldr	r3, [pc, #580]	; (80052ac <MX_LWIP_Init+0x290>)
 8005066:	2201      	movs	r2, #1
 8005068:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800506a:	2100      	movs	r1, #0
 800506c:	2000      	movs	r0, #0
 800506e:	f004 fcc5 	bl	80099fc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005072:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	061a      	lsls	r2, r3, #24
 8005078:	4b8a      	ldr	r3, [pc, #552]	; (80052a4 <MX_LWIP_Init+0x288>)
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	4313      	orrs	r3, r2
 8005088:	4a86      	ldr	r2, [pc, #536]	; (80052a4 <MX_LWIP_Init+0x288>)
 800508a:	78d2      	ldrb	r2, [r2, #3]
 800508c:	4313      	orrs	r3, r2
 800508e:	061a      	lsls	r2, r3, #24
 8005090:	4b84      	ldr	r3, [pc, #528]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	0619      	lsls	r1, r3, #24
 8005096:	4b83      	ldr	r3, [pc, #524]	; (80052a4 <MX_LWIP_Init+0x288>)
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	4319      	orrs	r1, r3
 800509e:	4b81      	ldr	r3, [pc, #516]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050a0:	789b      	ldrb	r3, [r3, #2]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	430b      	orrs	r3, r1
 80050a6:	497f      	ldr	r1, [pc, #508]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050a8:	78c9      	ldrb	r1, [r1, #3]
 80050aa:	430b      	orrs	r3, r1
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050b2:	431a      	orrs	r2, r3
 80050b4:	4b7b      	ldr	r3, [pc, #492]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	0619      	lsls	r1, r3, #24
 80050ba:	4b7a      	ldr	r3, [pc, #488]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	4319      	orrs	r1, r3
 80050c2:	4b78      	ldr	r3, [pc, #480]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050c4:	789b      	ldrb	r3, [r3, #2]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	430b      	orrs	r3, r1
 80050ca:	4976      	ldr	r1, [pc, #472]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050cc:	78c9      	ldrb	r1, [r1, #3]
 80050ce:	430b      	orrs	r3, r1
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050d6:	431a      	orrs	r2, r3
 80050d8:	4b72      	ldr	r3, [pc, #456]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	0619      	lsls	r1, r3, #24
 80050de:	4b71      	ldr	r3, [pc, #452]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	4319      	orrs	r1, r3
 80050e6:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050e8:	789b      	ldrb	r3, [r3, #2]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	430b      	orrs	r3, r1
 80050ee:	496d      	ldr	r1, [pc, #436]	; (80052a4 <MX_LWIP_Init+0x288>)
 80050f0:	78c9      	ldrb	r1, [r1, #3]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	4313      	orrs	r3, r2
 80050f8:	4a6d      	ldr	r2, [pc, #436]	; (80052b0 <MX_LWIP_Init+0x294>)
 80050fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050fc:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <MX_LWIP_Init+0x28c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	061a      	lsls	r2, r3, #24
 8005102:	4b69      	ldr	r3, [pc, #420]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	431a      	orrs	r2, r3
 800510a:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800510c:	789b      	ldrb	r3, [r3, #2]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	4313      	orrs	r3, r2
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005114:	78d2      	ldrb	r2, [r2, #3]
 8005116:	4313      	orrs	r3, r2
 8005118:	061a      	lsls	r2, r3, #24
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	0619      	lsls	r1, r3, #24
 8005120:	4b61      	ldr	r3, [pc, #388]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	4319      	orrs	r1, r3
 8005128:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	430b      	orrs	r3, r1
 8005130:	495d      	ldr	r1, [pc, #372]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005132:	78c9      	ldrb	r1, [r1, #3]
 8005134:	430b      	orrs	r3, r1
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800513c:	431a      	orrs	r2, r3
 800513e:	4b5a      	ldr	r3, [pc, #360]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	0619      	lsls	r1, r3, #24
 8005144:	4b58      	ldr	r3, [pc, #352]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	4319      	orrs	r1, r3
 800514c:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800514e:	789b      	ldrb	r3, [r3, #2]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	430b      	orrs	r3, r1
 8005154:	4954      	ldr	r1, [pc, #336]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005156:	78c9      	ldrb	r1, [r1, #3]
 8005158:	430b      	orrs	r3, r1
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005160:	431a      	orrs	r2, r3
 8005162:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	0619      	lsls	r1, r3, #24
 8005168:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	4319      	orrs	r1, r3
 8005170:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <MX_LWIP_Init+0x28c>)
 8005172:	789b      	ldrb	r3, [r3, #2]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	430b      	orrs	r3, r1
 8005178:	494b      	ldr	r1, [pc, #300]	; (80052a8 <MX_LWIP_Init+0x28c>)
 800517a:	78c9      	ldrb	r1, [r1, #3]
 800517c:	430b      	orrs	r3, r1
 800517e:	0e1b      	lsrs	r3, r3, #24
 8005180:	4313      	orrs	r3, r2
 8005182:	4a4c      	ldr	r2, [pc, #304]	; (80052b4 <MX_LWIP_Init+0x298>)
 8005184:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <MX_LWIP_Init+0x290>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	061a      	lsls	r2, r3, #24
 800518c:	4b47      	ldr	r3, [pc, #284]	; (80052ac <MX_LWIP_Init+0x290>)
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	4b45      	ldr	r3, [pc, #276]	; (80052ac <MX_LWIP_Init+0x290>)
 8005196:	789b      	ldrb	r3, [r3, #2]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	4313      	orrs	r3, r2
 800519c:	4a43      	ldr	r2, [pc, #268]	; (80052ac <MX_LWIP_Init+0x290>)
 800519e:	78d2      	ldrb	r2, [r2, #3]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	061a      	lsls	r2, r3, #24
 80051a4:	4b41      	ldr	r3, [pc, #260]	; (80052ac <MX_LWIP_Init+0x290>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	0619      	lsls	r1, r3, #24
 80051aa:	4b40      	ldr	r3, [pc, #256]	; (80052ac <MX_LWIP_Init+0x290>)
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	4319      	orrs	r1, r3
 80051b2:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <MX_LWIP_Init+0x290>)
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	430b      	orrs	r3, r1
 80051ba:	493c      	ldr	r1, [pc, #240]	; (80052ac <MX_LWIP_Init+0x290>)
 80051bc:	78c9      	ldrb	r1, [r1, #3]
 80051be:	430b      	orrs	r3, r1
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051c6:	431a      	orrs	r2, r3
 80051c8:	4b38      	ldr	r3, [pc, #224]	; (80052ac <MX_LWIP_Init+0x290>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	0619      	lsls	r1, r3, #24
 80051ce:	4b37      	ldr	r3, [pc, #220]	; (80052ac <MX_LWIP_Init+0x290>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	4319      	orrs	r1, r3
 80051d6:	4b35      	ldr	r3, [pc, #212]	; (80052ac <MX_LWIP_Init+0x290>)
 80051d8:	789b      	ldrb	r3, [r3, #2]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	430b      	orrs	r3, r1
 80051de:	4933      	ldr	r1, [pc, #204]	; (80052ac <MX_LWIP_Init+0x290>)
 80051e0:	78c9      	ldrb	r1, [r1, #3]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051ea:	431a      	orrs	r2, r3
 80051ec:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <MX_LWIP_Init+0x290>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	0619      	lsls	r1, r3, #24
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <MX_LWIP_Init+0x290>)
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	4319      	orrs	r1, r3
 80051fa:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <MX_LWIP_Init+0x290>)
 80051fc:	789b      	ldrb	r3, [r3, #2]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	430b      	orrs	r3, r1
 8005202:	492a      	ldr	r1, [pc, #168]	; (80052ac <MX_LWIP_Init+0x290>)
 8005204:	78c9      	ldrb	r1, [r1, #3]
 8005206:	430b      	orrs	r3, r1
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	4313      	orrs	r3, r2
 800520c:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <MX_LWIP_Init+0x29c>)
 800520e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <MX_LWIP_Init+0x2a0>)
 8005212:	9302      	str	r3, [sp, #8]
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <MX_LWIP_Init+0x2a4>)
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	2300      	movs	r3, #0
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <MX_LWIP_Init+0x29c>)
 800521e:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <MX_LWIP_Init+0x298>)
 8005220:	4923      	ldr	r1, [pc, #140]	; (80052b0 <MX_LWIP_Init+0x294>)
 8005222:	4828      	ldr	r0, [pc, #160]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 8005224:	f007 fa10 	bl	800c648 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005228:	4826      	ldr	r0, [pc, #152]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 800522a:	f007 fbbf 	bl	800c9ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800522e:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 8005230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005240:	4820      	ldr	r0, [pc, #128]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 8005242:	f007 fbc3 	bl	800c9cc <netif_set_up>
 8005246:	e002      	b.n	800524e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005248:	481e      	ldr	r0, [pc, #120]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 800524a:	f007 fc2b 	bl	800caa4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800524e:	491e      	ldr	r1, [pc, #120]	; (80052c8 <MX_LWIP_Init+0x2ac>)
 8005250:	481c      	ldr	r0, [pc, #112]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 8005252:	f007 fcbd 	bl	800cbd0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005256:	2200      	movs	r2, #0
 8005258:	2101      	movs	r1, #1
 800525a:	2001      	movs	r0, #1
 800525c:	f000 feaa 	bl	8005fb4 <osSemaphoreNew>
 8005260:	4603      	mov	r3, r0
 8005262:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <MX_LWIP_Init+0x2b0>)
 8005264:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <MX_LWIP_Init+0x2b4>)
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <MX_LWIP_Init+0x2a8>)
 800526a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <MX_LWIP_Init+0x2b0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <MX_LWIP_Init+0x2b4>)
 8005272:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005274:	2224      	movs	r2, #36	; 0x24
 8005276:	2100      	movs	r1, #0
 8005278:	4816      	ldr	r0, [pc, #88]	; (80052d4 <MX_LWIP_Init+0x2b8>)
 800527a:	f011 fb84 	bl	8016986 <memset>
  attributes.name = "LinkThr";
 800527e:	4b15      	ldr	r3, [pc, #84]	; (80052d4 <MX_LWIP_Init+0x2b8>)
 8005280:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <MX_LWIP_Init+0x2bc>)
 8005282:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <MX_LWIP_Init+0x2b8>)
 8005286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800528a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <MX_LWIP_Init+0x2b8>)
 800528e:	2210      	movs	r2, #16
 8005290:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005292:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <MX_LWIP_Init+0x2b8>)
 8005294:	490e      	ldr	r1, [pc, #56]	; (80052d0 <MX_LWIP_Init+0x2b4>)
 8005296:	4811      	ldr	r0, [pc, #68]	; (80052dc <MX_LWIP_Init+0x2c0>)
 8005298:	f000 fcd1 	bl	8005c3e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	2000cda8 	.word	0x2000cda8
 80052a8:	2000cda4 	.word	0x2000cda4
 80052ac:	2000cd78 	.word	0x2000cd78
 80052b0:	2000cda0 	.word	0x2000cda0
 80052b4:	2000cdac 	.word	0x2000cdac
 80052b8:	2000cdb0 	.word	0x2000cdb0
 80052bc:	08009939 	.word	0x08009939
 80052c0:	08005909 	.word	0x08005909
 80052c4:	20009bec 	.word	0x20009bec
 80052c8:	080059ed 	.word	0x080059ed
 80052cc:	20000574 	.word	0x20000574
 80052d0:	2000cd70 	.word	0x2000cd70
 80052d4:	2000cd7c 	.word	0x2000cd7c
 80052d8:	080186e4 	.word	0x080186e4
 80052dc:	08005975 	.word	0x08005975

080052e0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a4a      	ldr	r2, [pc, #296]	; (8005428 <HAL_ETH_MspInit+0x148>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f040 808d 	bne.w	800541e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	4b48      	ldr	r3, [pc, #288]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	4a47      	ldr	r2, [pc, #284]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800530e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005312:	6313      	str	r3, [r2, #48]	; 0x30
 8005314:	4b45      	ldr	r3, [pc, #276]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	4b41      	ldr	r3, [pc, #260]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	4a40      	ldr	r2, [pc, #256]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800532a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800532e:	6313      	str	r3, [r2, #48]	; 0x30
 8005330:	4b3e      	ldr	r3, [pc, #248]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2300      	movs	r3, #0
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	4b3a      	ldr	r3, [pc, #232]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4a39      	ldr	r2, [pc, #228]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005346:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800534a:	6313      	str	r3, [r2, #48]	; 0x30
 800534c:	4b37      	ldr	r3, [pc, #220]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	4b33      	ldr	r3, [pc, #204]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a32      	ldr	r2, [pc, #200]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005362:	f043 0304 	orr.w	r3, r3, #4
 8005366:	6313      	str	r3, [r2, #48]	; 0x30
 8005368:	4b30      	ldr	r3, [pc, #192]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	4b2c      	ldr	r3, [pc, #176]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a2b      	ldr	r2, [pc, #172]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6313      	str	r3, [r2, #48]	; 0x30
 8005384:	4b29      	ldr	r3, [pc, #164]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <HAL_ETH_MspInit+0x14c>)
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	4a24      	ldr	r2, [pc, #144]	; (800542c <HAL_ETH_MspInit+0x14c>)
 800539a:	f043 0302 	orr.w	r3, r3, #2
 800539e:	6313      	str	r3, [r2, #48]	; 0x30
 80053a0:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_ETH_MspInit+0x14c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80053ac:	2332      	movs	r3, #50	; 0x32
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b0:	2302      	movs	r3, #2
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b8:	2303      	movs	r3, #3
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053bc:	230b      	movs	r3, #11
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c4:	4619      	mov	r1, r3
 80053c6:	481a      	ldr	r0, [pc, #104]	; (8005430 <HAL_ETH_MspInit+0x150>)
 80053c8:	f7fe f9ee 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80053cc:	2386      	movs	r3, #134	; 0x86
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d0:	2302      	movs	r3, #2
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d8:	2303      	movs	r3, #3
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053dc:	230b      	movs	r3, #11
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e4:	4619      	mov	r1, r3
 80053e6:	4813      	ldr	r0, [pc, #76]	; (8005434 <HAL_ETH_MspInit+0x154>)
 80053e8:	f7fe f9de 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80053ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f2:	2302      	movs	r3, #2
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fa:	2303      	movs	r3, #3
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053fe:	230b      	movs	r3, #11
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005406:	4619      	mov	r1, r3
 8005408:	480b      	ldr	r0, [pc, #44]	; (8005438 <HAL_ETH_MspInit+0x158>)
 800540a:	f7fe f9cd 	bl	80037a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800540e:	2200      	movs	r2, #0
 8005410:	2105      	movs	r1, #5
 8005412:	203d      	movs	r0, #61	; 0x3d
 8005414:	f7fc fff8 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005418:	203d      	movs	r0, #61	; 0x3d
 800541a:	f7fd f811 	bl	8002440 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800541e:	bf00      	nop
 8005420:	3738      	adds	r7, #56	; 0x38
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40028000 	.word	0x40028000
 800542c:	40023800 	.word	0x40023800
 8005430:	40020800 	.word	0x40020800
 8005434:	40020000 	.word	0x40020000
 8005438:	40020400 	.word	0x40020400

0800543c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <HAL_ETH_RxCpltCallback+0x1c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fe8f 	bl	800616c <osSemaphoreRelease>
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000578 	.word	0x20000578

0800545c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b090      	sub	sp, #64	; 0x40
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005468:	4b5d      	ldr	r3, [pc, #372]	; (80055e0 <low_level_init+0x184>)
 800546a:	4a5e      	ldr	r2, [pc, #376]	; (80055e4 <low_level_init+0x188>)
 800546c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800546e:	4b5c      	ldr	r3, [pc, #368]	; (80055e0 <low_level_init+0x184>)
 8005470:	2201      	movs	r2, #1
 8005472:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005474:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <low_level_init+0x184>)
 8005476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800547a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800547c:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <low_level_init+0x184>)
 800547e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005482:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005484:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <low_level_init+0x184>)
 8005486:	2201      	movs	r2, #1
 8005488:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800548a:	2300      	movs	r3, #0
 800548c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005492:	23e1      	movs	r3, #225	; 0xe1
 8005494:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800549a:	2300      	movs	r3, #0
 800549c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800549e:	2300      	movs	r3, #0
 80054a0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80054a2:	4a4f      	ldr	r2, [pc, #316]	; (80055e0 <low_level_init+0x184>)
 80054a4:	f107 030c 	add.w	r3, r7, #12
 80054a8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80054aa:	4b4d      	ldr	r3, [pc, #308]	; (80055e0 <low_level_init+0x184>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80054b0:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <low_level_init+0x184>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80054b6:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <low_level_init+0x184>)
 80054b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80054bc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80054be:	4848      	ldr	r0, [pc, #288]	; (80055e0 <low_level_init+0x184>)
 80054c0:	f7fc ffcc 	bl	800245c <HAL_ETH_Init>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80054ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80054e4:	2304      	movs	r3, #4
 80054e6:	4a40      	ldr	r2, [pc, #256]	; (80055e8 <low_level_init+0x18c>)
 80054e8:	4940      	ldr	r1, [pc, #256]	; (80055ec <low_level_init+0x190>)
 80054ea:	483d      	ldr	r0, [pc, #244]	; (80055e0 <low_level_init+0x184>)
 80054ec:	f7fd f952 	bl	8002794 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80054f0:	2304      	movs	r3, #4
 80054f2:	4a3f      	ldr	r2, [pc, #252]	; (80055f0 <low_level_init+0x194>)
 80054f4:	493f      	ldr	r1, [pc, #252]	; (80055f4 <low_level_init+0x198>)
 80054f6:	483a      	ldr	r0, [pc, #232]	; (80055e0 <low_level_init+0x184>)
 80054f8:	f7fd f9b5 	bl	8002866 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2206      	movs	r2, #6
 8005500:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005504:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <low_level_init+0x184>)
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <low_level_init+0x184>)
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	785a      	ldrb	r2, [r3, #1]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800551c:	4b30      	ldr	r3, [pc, #192]	; (80055e0 <low_level_init+0x184>)
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	789a      	ldrb	r2, [r3, #2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005528:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <low_level_init+0x184>)
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	78da      	ldrb	r2, [r3, #3]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005534:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <low_level_init+0x184>)
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	791a      	ldrb	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005540:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <low_level_init+0x184>)
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	795a      	ldrb	r2, [r3, #5]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005552:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800555a:	f043 030a 	orr.w	r3, r3, #10
 800555e:	b2da      	uxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005566:	2200      	movs	r2, #0
 8005568:	2101      	movs	r1, #1
 800556a:	2001      	movs	r0, #1
 800556c:	f000 fd22 	bl	8005fb4 <osSemaphoreNew>
 8005570:	4603      	mov	r3, r0
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <low_level_init+0x19c>)
 8005574:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f011 fa01 	bl	8016986 <memset>
  attributes.name = "EthIf";
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <low_level_init+0x1a0>)
 8005586:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005588:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800558e:	2330      	movs	r3, #48	; 0x30
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	461a      	mov	r2, r3
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4819      	ldr	r0, [pc, #100]	; (8005600 <low_level_init+0x1a4>)
 800559c:	f000 fb4f 	bl	8005c3e <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80055a0:	480f      	ldr	r0, [pc, #60]	; (80055e0 <low_level_init+0x184>)
 80055a2:	f7fd fc88 	bl	8002eb6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80055a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055aa:	461a      	mov	r2, r3
 80055ac:	211d      	movs	r1, #29
 80055ae:	480c      	ldr	r0, [pc, #48]	; (80055e0 <low_level_init+0x184>)
 80055b0:	f7fd fbb3 	bl	8002d1a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	f043 030b 	orr.w	r3, r3, #11
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	461a      	mov	r2, r3
 80055c0:	211d      	movs	r1, #29
 80055c2:	4807      	ldr	r0, [pc, #28]	; (80055e0 <low_level_init+0x184>)
 80055c4:	f7fd fc11 	bl	8002dea <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80055c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055cc:	461a      	mov	r2, r3
 80055ce:	211d      	movs	r1, #29
 80055d0:	4803      	ldr	r0, [pc, #12]	; (80055e0 <low_level_init+0x184>)
 80055d2:	f7fd fba2 	bl	8002d1a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80055d6:	bf00      	nop
 80055d8:	3740      	adds	r7, #64	; 0x40
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2000e684 	.word	0x2000e684
 80055e4:	40028000 	.word	0x40028000
 80055e8:	2000e6cc 	.word	0x2000e6cc
 80055ec:	2000cdb4 	.word	0x2000cdb4
 80055f0:	2000ce34 	.word	0x2000ce34
 80055f4:	2000e604 	.word	0x2000e604
 80055f8:	20000578 	.word	0x20000578
 80055fc:	080186ec 	.word	0x080186ec
 8005600:	080058a9 	.word	0x080058a9

08005604 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800560e:	4b4b      	ldr	r3, [pc, #300]	; (800573c <low_level_output+0x138>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005626:	4b45      	ldr	r3, [pc, #276]	; (800573c <low_level_output+0x138>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	e05a      	b.n	80056ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	da03      	bge.n	8005646 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800563e:	23f8      	movs	r3, #248	; 0xf8
 8005640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005644:	e05c      	b.n	8005700 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	895b      	ldrh	r3, [r3, #10]
 800564a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005650:	e02f      	b.n	80056b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	18d0      	adds	r0, r2, r3
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	18d1      	adds	r1, r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005666:	3304      	adds	r3, #4
 8005668:	461a      	mov	r2, r3
 800566a:	f011 f964 	bl	8016936 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da03      	bge.n	8005684 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800567c:	23f8      	movs	r3, #248	; 0xf8
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005682:	e03d      	b.n	8005700 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005694:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80056a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80056ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80056bc:	4293      	cmp	r3, r2
 80056be:	d8c8      	bhi.n	8005652 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	18d0      	adds	r0, r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4619      	mov	r1, r3
 80056d2:	f011 f930 	bl	8016936 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1a1      	bne.n	8005636 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80056f2:	6979      	ldr	r1, [r7, #20]
 80056f4:	4811      	ldr	r0, [pc, #68]	; (800573c <low_level_output+0x138>)
 80056f6:	f7fd f923 	bl	8002940 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <low_level_output+0x138>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005708:	3314      	adds	r3, #20
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <low_level_output+0x138>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	3314      	adds	r3, #20
 800571e:	2220      	movs	r2, #32
 8005720:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <low_level_output+0x138>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572a:	3304      	adds	r3, #4
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000e684 	.word	0x2000e684

08005740 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	; 0x30
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005764:	484f      	ldr	r0, [pc, #316]	; (80058a4 <low_level_input+0x164>)
 8005766:	f7fd f9d5 	bl	8002b14 <HAL_ETH_GetReceivedFrame_IT>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <low_level_input+0x34>

    return NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	e092      	b.n	800589a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <low_level_input+0x164>)
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <low_level_input+0x164>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800578c:	4619      	mov	r1, r3
 800578e:	2000      	movs	r0, #0
 8005790:	f007 fae8 	bl	800cd64 <pbuf_alloc>
 8005794:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d04b      	beq.n	8005834 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800579c:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <low_level_input+0x164>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	e040      	b.n	800582e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80057b6:	e021      	b.n	80057fc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	18d0      	adds	r0, r2, r3
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	18d1      	adds	r1, r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80057cc:	3304      	adds	r3, #4
 80057ce:	461a      	mov	r2, r3
 80057d0:	f011 f8b1 	bl	8016936 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80057ea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80057f6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005806:	4293      	cmp	r3, r2
 8005808:	d8d6      	bhi.n	80057b8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	18d0      	adds	r0, r2, r3
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4619      	mov	r1, r3
 800581c:	f011 f88b 	bl	8016936 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4413      	add	r3, r2
 8005826:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1bb      	bne.n	80057ac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <low_level_input+0x164>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e00b      	b.n	8005858 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3301      	adds	r3, #1
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <low_level_input+0x164>)
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3ee      	bcc.n	8005840 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <low_level_input+0x164>)
 8005864:	2200      	movs	r2, #0
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <low_level_input+0x164>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	3314      	adds	r3, #20
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <low_level_input+0x164>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005884:	3314      	adds	r3, #20
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <low_level_input+0x164>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005892:	3308      	adds	r3, #8
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	; 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	2000e684 	.word	0x2000e684

080058a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80058b4:	4b12      	ldr	r3, [pc, #72]	; (8005900 <ethernetif_input+0x58>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fc03 	bl	80060c8 <osSemaphoreAcquire>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f5      	bne.n	80058b4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80058c8:	480e      	ldr	r0, [pc, #56]	; (8005904 <ethernetif_input+0x5c>)
 80058ca:	f010 feab 	bl	8016624 <sys_mutex_lock>
        p = low_level_input( netif );
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ff36 	bl	8005740 <low_level_input>
 80058d4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	68b8      	ldr	r0, [r7, #8]
 80058e4:	4798      	blx	r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80058ec:	68b8      	ldr	r0, [r7, #8]
 80058ee:	f007 fd1d 	bl	800d32c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80058f2:	4804      	ldr	r0, [pc, #16]	; (8005904 <ethernetif_input+0x5c>)
 80058f4:	f010 fea5 	bl	8016642 <sys_mutex_unlock>
      } while(p!=NULL);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e4      	bne.n	80058c8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80058fe:	e7d9      	b.n	80058b4 <ethernetif_input+0xc>
 8005900:	20000578 	.word	0x20000578
 8005904:	2000fedc 	.word	0x2000fedc

08005908 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <ethernetif_init+0x1c>
 8005916:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <ethernetif_init+0x48>)
 8005918:	f240 2231 	movw	r2, #561	; 0x231
 800591c:	490d      	ldr	r1, [pc, #52]	; (8005954 <ethernetif_init+0x4c>)
 800591e:	480e      	ldr	r0, [pc, #56]	; (8005958 <ethernetif_init+0x50>)
 8005920:	f011 f894 	bl	8016a4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2273      	movs	r2, #115	; 0x73
 8005928:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2274      	movs	r2, #116	; 0x74
 8005930:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <ethernetif_init+0x54>)
 8005938:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a08      	ldr	r2, [pc, #32]	; (8005960 <ethernetif_init+0x58>)
 800593e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fd8b 	bl	800545c <low_level_init>

  return ERR_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	080186f4 	.word	0x080186f4
 8005954:	08018710 	.word	0x08018710
 8005958:	08018720 	.word	0x08018720
 800595c:	0801480d 	.word	0x0801480d
 8005960:	08005605 	.word	0x08005605

08005964 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005968:	f7fc fc66 	bl	8002238 <HAL_GetTick>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005984:	f107 0308 	add.w	r3, r7, #8
 8005988:	461a      	mov	r2, r3
 800598a:	2101      	movs	r1, #1
 800598c:	4816      	ldr	r0, [pc, #88]	; (80059e8 <ethernetif_set_link+0x74>)
 800598e:	f7fd f9c4 	bl	8002d1a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <ethernetif_set_link+0x48>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f007 f8a7 	bl	800cb08 <netif_set_link_up>
 80059ba:	e011      	b.n	80059e0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <ethernetif_set_link+0x6c>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f007 f8c8 	bl	800cb70 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80059e0:	20c8      	movs	r0, #200	; 0xc8
 80059e2:	f000 f9be 	bl	8005d62 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80059e6:	e7cd      	b.n	8005984 <ethernetif_set_link+0x10>
 80059e8:	2000e684 	.word	0x2000e684

080059ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d05d      	beq.n	8005aca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005a0e:	4b34      	ldr	r3, [pc, #208]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03f      	beq.n	8005a96 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4830      	ldr	r0, [pc, #192]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a1e:	f7fd f9e4 	bl	8002dea <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005a22:	f7fc fc09 	bl	8002238 <HAL_GetTick>
 8005a26:	4603      	mov	r3, r0
 8005a28:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2101      	movs	r1, #1
 8005a32:	482b      	ldr	r0, [pc, #172]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a34:	f7fd f971 	bl	8002d1a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005a38:	f7fc fbfe 	bl	8002238 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a46:	d828      	bhi.n	8005a9a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0eb      	beq.n	8005a2a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	461a      	mov	r2, r3
 8005a58:	2110      	movs	r1, #16
 8005a5a:	4821      	ldr	r0, [pc, #132]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a5c:	f7fd f95d 	bl	8002d1a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	e002      	b.n	8005a7a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
 8005a8a:	e016      	b.n	8005aba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a92:	609a      	str	r2, [r3, #8]
 8005a94:	e011      	b.n	8005aba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <ethernetif_update_config+0xb0>
          goto error;
 8005a9a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005ab6:	f7fd f998 	bl	8002dea <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005aba:	2100      	movs	r1, #0
 8005abc:	4808      	ldr	r0, [pc, #32]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005abe:	f7fd fa59 	bl	8002f74 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005ac2:	4807      	ldr	r0, [pc, #28]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005ac4:	f7fd f9f7 	bl	8002eb6 <HAL_ETH_Start>
 8005ac8:	e002      	b.n	8005ad0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005aca:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <ethernetif_update_config+0xf4>)
 8005acc:	f7fd fa22 	bl	8002f14 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f807 	bl	8005ae4 <ethernetif_notify_conn_changed>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000e684 	.word	0x2000e684

08005ae4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <__NVIC_SetPriority>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	db0a      	blt.n	8005b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	490c      	ldr	r1, [pc, #48]	; (8005b44 <__NVIC_SetPriority+0x4c>)
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	0112      	lsls	r2, r2, #4
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b20:	e00a      	b.n	8005b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4908      	ldr	r1, [pc, #32]	; (8005b48 <__NVIC_SetPriority+0x50>)
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	3b04      	subs	r3, #4
 8005b30:	0112      	lsls	r2, r2, #4
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	440b      	add	r3, r1
 8005b36:	761a      	strb	r2, [r3, #24]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	e000e100 	.word	0xe000e100
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <SysTick_Handler+0x1c>)
 8005b52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b54:	f002 fc96 	bl	8008484 <xTaskGetSchedulerState>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b5e:	f003 fb7b 	bl	8009258 <xPortSysTickHandler>
  }
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	e000e010 	.word	0xe000e010

08005b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b70:	2100      	movs	r1, #0
 8005b72:	f06f 0004 	mvn.w	r0, #4
 8005b76:	f7ff ffbf 	bl	8005af8 <__NVIC_SetPriority>
#endif
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b92:	f06f 0305 	mvn.w	r3, #5
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	e00c      	b.n	8005bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <osKernelInitialize+0x44>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ba2:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <osKernelInitialize+0x44>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	e002      	b.n	8005bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bb4:	687b      	ldr	r3, [r7, #4]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000057c 	.word	0x2000057c

08005bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8005bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bda:	f06f 0305 	mvn.w	r3, #5
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	e010      	b.n	8005c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <osKernelStart+0x48>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d109      	bne.n	8005bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bea:	f7ff ffbf 	bl	8005b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <osKernelStart+0x48>)
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bf4:	f001 ffc8 	bl	8007b88 <vTaskStartScheduler>
      stat = osOK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e002      	b.n	8005c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c04:	687b      	ldr	r3, [r7, #4]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000057c 	.word	0x2000057c

08005c14 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1a:	f3ef 8305 	mrs	r3, IPSR
 8005c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c20:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005c26:	f002 f8db 	bl	8007de0 <xTaskGetTickCountFromISR>
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	e002      	b.n	8005c34 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005c2e:	f002 f8c7 	bl	8007dc0 <xTaskGetTickCount>
 8005c32:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005c34:	687b      	ldr	r3, [r7, #4]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b08e      	sub	sp, #56	; 0x38
 8005c42:	af04      	add	r7, sp, #16
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4e:	f3ef 8305 	mrs	r3, IPSR
 8005c52:	617b      	str	r3, [r7, #20]
  return(result);
 8005c54:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d17e      	bne.n	8005d58 <osThreadNew+0x11a>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d07b      	beq.n	8005d58 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c64:	2318      	movs	r3, #24
 8005c66:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d045      	beq.n	8005d04 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <osThreadNew+0x48>
        name = attr->name;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <osThreadNew+0x6e>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b38      	cmp	r3, #56	; 0x38
 8005c9e:	d805      	bhi.n	8005cac <osThreadNew+0x6e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <osThreadNew+0x72>
        return (NULL);
 8005cac:	2300      	movs	r3, #0
 8005cae:	e054      	b.n	8005d5a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <osThreadNew+0xa8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2bbb      	cmp	r3, #187	; 0xbb
 8005cce:	d90a      	bls.n	8005ce6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d006      	beq.n	8005ce6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <osThreadNew+0xa8>
        mem = 1;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e010      	b.n	8005d08 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <osThreadNew+0xca>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d108      	bne.n	8005d08 <osThreadNew+0xca>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <osThreadNew+0xca>
          mem = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e001      	b.n	8005d08 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d110      	bne.n	8005d30 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d16:	9202      	str	r2, [sp, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f001 fd43 	bl	80077b0 <xTaskCreateStatic>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e013      	b.n	8005d58 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d110      	bne.n	8005d58 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f001 fd8e 	bl	800786a <xTaskCreate>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <osThreadNew+0x11a>
            hTask = NULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d58:	693b      	ldr	r3, [r7, #16]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3728      	adds	r7, #40	; 0x28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d6a:	f3ef 8305 	mrs	r3, IPSR
 8005d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <osDelay+0x1c>
    stat = osErrorISR;
 8005d76:	f06f 0305 	mvn.w	r3, #5
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e007      	b.n	8005d8e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fec9 	bl	8007b20 <vTaskDelay>
    }
  }

  return (stat);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da4:	f3ef 8305 	mrs	r3, IPSR
 8005da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005daa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d174      	bne.n	8005e9a <osMutexNew+0x102>
    if (attr != NULL) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <osMutexNew+0x26>
      type = attr->attr_bits;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e001      	b.n	8005dc2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <osMutexNew+0x3a>
      rmtx = 1U;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e001      	b.n	8005dd6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d15c      	bne.n	8005e9a <osMutexNew+0x102>
      mem = -1;
 8005de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d015      	beq.n	8005e18 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <osMutexNew+0x6a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b4f      	cmp	r3, #79	; 0x4f
 8005dfa:	d902      	bls.n	8005e02 <osMutexNew+0x6a>
          mem = 1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e00c      	b.n	8005e1c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <osMutexNew+0x84>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <osMutexNew+0x84>
            mem = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e001      	b.n	8005e1c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d112      	bne.n	8005e48 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2004      	movs	r0, #4
 8005e30:	f000 fd69 	bl	8006906 <xQueueCreateMutexStatic>
 8005e34:	61f8      	str	r0, [r7, #28]
 8005e36:	e016      	b.n	8005e66 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f000 fd61 	bl	8006906 <xQueueCreateMutexStatic>
 8005e44:	61f8      	str	r0, [r7, #28]
 8005e46:	e00e      	b.n	8005e66 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005e54:	2004      	movs	r0, #4
 8005e56:	f000 fd3e 	bl	80068d6 <xQueueCreateMutex>
 8005e5a:	61f8      	str	r0, [r7, #28]
 8005e5c:	e003      	b.n	8005e66 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005e5e:	2001      	movs	r0, #1
 8005e60:	f000 fd39 	bl	80068d6 <xQueueCreateMutex>
 8005e64:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <osMutexNew+0xee>
        if (attr != NULL) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <osMutexNew+0xe2>
          name = attr->name;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e001      	b.n	8005e7e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	69f8      	ldr	r0, [r7, #28]
 8005e82:	f001 fc0d 	bl	80076a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <osMutexNew+0x102>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec2:	f3ef 8305 	mrs	r3, IPSR
 8005ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005ece:	f06f 0305 	mvn.w	r3, #5
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e02c      	b.n	8005f30 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005edc:	f06f 0303 	mvn.w	r3, #3
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e025      	b.n	8005f30 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6938      	ldr	r0, [r7, #16]
 8005eee:	f000 fd59 	bl	80069a4 <xQueueTakeMutexRecursive>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d01b      	beq.n	8005f30 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005efe:	f06f 0301 	mvn.w	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e014      	b.n	8005f30 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f06:	f06f 0302 	mvn.w	r3, #2
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e010      	b.n	8005f30 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6938      	ldr	r0, [r7, #16]
 8005f12:	f001 f8ed 	bl	80070f0 <xQueueSemaphoreTake>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d009      	beq.n	8005f30 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005f22:	f06f 0301 	mvn.w	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e002      	b.n	8005f30 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f2a:	f06f 0302 	mvn.w	r3, #2
 8005f2e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005f30:	697b      	ldr	r3, [r7, #20]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f56:	f3ef 8305 	mrs	r3, IPSR
 8005f5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005f62:	f06f 0305 	mvn.w	r3, #5
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e01f      	b.n	8005faa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005f70:	f06f 0303 	mvn.w	r3, #3
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e018      	b.n	8005faa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f000 fcdc 	bl	800693c <xQueueGiveMutexRecursive>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d00f      	beq.n	8005faa <osMutexRelease+0x70>
        stat = osErrorResource;
 8005f8a:	f06f 0302 	mvn.w	r3, #2
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e00b      	b.n	8005faa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005f92:	2300      	movs	r3, #0
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f000 fda3 	bl	8006ae4 <xQueueGenericSend>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d002      	beq.n	8005faa <osMutexRelease+0x70>
        stat = osErrorResource;
 8005fa4:	f06f 0302 	mvn.w	r3, #2
 8005fa8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc4:	f3ef 8305 	mrs	r3, IPSR
 8005fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8005fca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d175      	bne.n	80060bc <osSemaphoreNew+0x108>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d072      	beq.n	80060bc <osSemaphoreNew+0x108>
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d86e      	bhi.n	80060bc <osSemaphoreNew+0x108>
    mem = -1;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d015      	beq.n	8006016 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <osSemaphoreNew+0x4c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b4f      	cmp	r3, #79	; 0x4f
 8005ff8:	d902      	bls.n	8006000 <osSemaphoreNew+0x4c>
        mem = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e00c      	b.n	800601a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d108      	bne.n	800601a <osSemaphoreNew+0x66>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <osSemaphoreNew+0x66>
          mem = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e001      	b.n	800601a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006020:	d04c      	beq.n	80060bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d128      	bne.n	800607a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d10a      	bne.n	8006044 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2203      	movs	r2, #3
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	2001      	movs	r0, #1
 800603c:	f000 fb5c 	bl	80066f8 <xQueueGenericCreateStatic>
 8006040:	61f8      	str	r0, [r7, #28]
 8006042:	e005      	b.n	8006050 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006044:	2203      	movs	r2, #3
 8006046:	2100      	movs	r1, #0
 8006048:	2001      	movs	r0, #1
 800604a:	f000 fbcd 	bl	80067e8 <xQueueGenericCreate>
 800604e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <osSemaphoreNew+0xe8>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01f      	beq.n	800609c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800605c:	2300      	movs	r3, #0
 800605e:	2200      	movs	r2, #0
 8006060:	2100      	movs	r1, #0
 8006062:	69f8      	ldr	r0, [r7, #28]
 8006064:	f000 fd3e 	bl	8006ae4 <xQueueGenericSend>
 8006068:	4603      	mov	r3, r0
 800606a:	2b01      	cmp	r3, #1
 800606c:	d016      	beq.n	800609c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800606e:	69f8      	ldr	r0, [r7, #28]
 8006070:	f001 f9ca 	bl	8007408 <vQueueDelete>
            hSemaphore = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e010      	b.n	800609c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d108      	bne.n	8006092 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	461a      	mov	r2, r3
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fcc1 	bl	8006a10 <xQueueCreateCountingSemaphoreStatic>
 800608e:	61f8      	str	r0, [r7, #28]
 8006090:	e004      	b.n	800609c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fcf2 	bl	8006a7e <xQueueCreateCountingSemaphore>
 800609a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00c      	beq.n	80060bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e001      	b.n	80060b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	69f8      	ldr	r0, [r7, #28]
 80060b8:	f001 faf2 	bl	80076a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80060bc:	69fb      	ldr	r3, [r7, #28]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80060e0:	f06f 0303 	mvn.w	r3, #3
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	e039      	b.n	800615c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e8:	f3ef 8305 	mrs	r3, IPSR
 80060ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d022      	beq.n	800613a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80060fa:	f06f 0303 	mvn.w	r3, #3
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e02c      	b.n	800615c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	461a      	mov	r2, r3
 800610c:	2100      	movs	r1, #0
 800610e:	6938      	ldr	r0, [r7, #16]
 8006110:	f001 f8fa 	bl	8007308 <xQueueReceiveFromISR>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d003      	beq.n	8006122 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800611a:	f06f 0302 	mvn.w	r3, #2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e01c      	b.n	800615c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d019      	beq.n	800615c <osSemaphoreAcquire+0x94>
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <osSemaphoreAcquire+0xa0>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	e010      	b.n	800615c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f000 ffd7 	bl	80070f0 <xQueueSemaphoreTake>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d009      	beq.n	800615c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800614e:	f06f 0301 	mvn.w	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e002      	b.n	800615c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006156:	f06f 0302 	mvn.w	r3, #2
 800615a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800615c:	697b      	ldr	r3, [r7, #20]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006182:	f06f 0303 	mvn.w	r3, #3
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e02c      	b.n	80061e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618a:	f3ef 8305 	mrs	r3, IPSR
 800618e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006190:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01a      	beq.n	80061cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800619a:	f107 0308 	add.w	r3, r7, #8
 800619e:	4619      	mov	r1, r3
 80061a0:	6938      	ldr	r0, [r7, #16]
 80061a2:	f000 fe38 	bl	8006e16 <xQueueGiveFromISR>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d003      	beq.n	80061b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80061ac:	f06f 0302 	mvn.w	r3, #2
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	e017      	b.n	80061e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <osSemaphoreRelease+0x78>
 80061ba:	4b0d      	ldr	r3, [pc, #52]	; (80061f0 <osSemaphoreRelease+0x84>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	e00b      	b.n	80061e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	6938      	ldr	r0, [r7, #16]
 80061d4:	f000 fc86 	bl	8006ae4 <xQueueGenericSend>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d002      	beq.n	80061e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80061de:	f06f 0302 	mvn.w	r3, #2
 80061e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80061e4:	697b      	ldr	r3, [r7, #20]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	613b      	str	r3, [r7, #16]
  return(result);
 800620a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	d15f      	bne.n	80062d0 <osMessageQueueNew+0xdc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d05c      	beq.n	80062d0 <osMessageQueueNew+0xdc>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d059      	beq.n	80062d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800621c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006220:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d029      	beq.n	800627c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d012      	beq.n	8006256 <osMessageQueueNew+0x62>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b4f      	cmp	r3, #79	; 0x4f
 8006236:	d90e      	bls.n	8006256 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	429a      	cmp	r2, r3
 800624e:	d302      	bcc.n	8006256 <osMessageQueueNew+0x62>
        mem = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	e014      	b.n	8006280 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d110      	bne.n	8006280 <osMessageQueueNew+0x8c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10c      	bne.n	8006280 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800626a:	2b00      	cmp	r3, #0
 800626c:	d108      	bne.n	8006280 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <osMessageQueueNew+0x8c>
          mem = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e001      	b.n	8006280 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10b      	bne.n	800629e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2100      	movs	r1, #0
 8006290:	9100      	str	r1, [sp, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fa2f 	bl	80066f8 <xQueueGenericCreateStatic>
 800629a:	61f8      	str	r0, [r7, #28]
 800629c:	e008      	b.n	80062b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80062a4:	2200      	movs	r2, #0
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fa9d 	bl	80067e8 <xQueueGenericCreate>
 80062ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00c      	beq.n	80062d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e001      	b.n	80062c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	69f8      	ldr	r0, [r7, #28]
 80062cc:	f001 f9e8 	bl	80076a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062d0:	69fb      	ldr	r3, [r7, #28]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f4:	f3ef 8305 	mrs	r3, IPSR
 80062f8:	617b      	str	r3, [r7, #20]
  return(result);
 80062fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d028      	beq.n	8006352 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <osMessageQueuePut+0x36>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <osMessageQueuePut+0x36>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006312:	f06f 0303 	mvn.w	r3, #3
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e038      	b.n	800638c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800631e:	f107 0210 	add.w	r2, r7, #16
 8006322:	2300      	movs	r3, #0
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	69b8      	ldr	r0, [r7, #24]
 8006328:	f000 fcda 	bl	8006ce0 <xQueueGenericSendFromISR>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d003      	beq.n	800633a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006332:	f06f 0302 	mvn.w	r3, #2
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	e028      	b.n	800638c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d025      	beq.n	800638c <osMessageQueuePut+0xb0>
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <osMessageQueuePut+0xbc>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	e01c      	b.n	800638c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <osMessageQueuePut+0x82>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800635e:	f06f 0303 	mvn.w	r3, #3
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	e012      	b.n	800638c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006366:	2300      	movs	r3, #0
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	69b8      	ldr	r0, [r7, #24]
 800636e:	f000 fbb9 	bl	8006ae4 <xQueueGenericSend>
 8006372:	4603      	mov	r3, r0
 8006374:	2b01      	cmp	r3, #1
 8006376:	d009      	beq.n	800638c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800637e:	f06f 0301 	mvn.w	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e002      	b.n	800638c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006386:	f06f 0302 	mvn.w	r3, #2
 800638a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800638c:	69fb      	ldr	r3, [r7, #28]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b2:	f3ef 8305 	mrs	r3, IPSR
 80063b6:	617b      	str	r3, [r7, #20]
  return(result);
 80063b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d028      	beq.n	8006410 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <osMessageQueueGet+0x34>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <osMessageQueueGet+0x34>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80063d0:	f06f 0303 	mvn.w	r3, #3
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e037      	b.n	8006448 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063dc:	f107 0310 	add.w	r3, r7, #16
 80063e0:	461a      	mov	r2, r3
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	69b8      	ldr	r0, [r7, #24]
 80063e6:	f000 ff8f 	bl	8007308 <xQueueReceiveFromISR>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d003      	beq.n	80063f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80063f0:	f06f 0302 	mvn.w	r3, #2
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e027      	b.n	8006448 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d024      	beq.n	8006448 <osMessageQueueGet+0xac>
 80063fe:	4b15      	ldr	r3, [pc, #84]	; (8006454 <osMessageQueueGet+0xb8>)
 8006400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	e01b      	b.n	8006448 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <osMessageQueueGet+0x80>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800641c:	f06f 0303 	mvn.w	r3, #3
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	e011      	b.n	8006448 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	69b8      	ldr	r0, [r7, #24]
 800642a:	f000 fd81 	bl	8006f30 <xQueueReceive>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d009      	beq.n	8006448 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800643a:	f06f 0301 	mvn.w	r3, #1
 800643e:	61fb      	str	r3, [r7, #28]
 8006440:	e002      	b.n	8006448 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006442:	f06f 0302 	mvn.w	r3, #2
 8006446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006448:	69fb      	ldr	r3, [r7, #28]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a07      	ldr	r2, [pc, #28]	; (8006484 <vApplicationGetIdleTaskMemory+0x2c>)
 8006468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a06      	ldr	r2, [pc, #24]	; (8006488 <vApplicationGetIdleTaskMemory+0x30>)
 800646e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000580 	.word	0x20000580
 8006488:	2000063c 	.word	0x2000063c

0800648c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a07      	ldr	r2, [pc, #28]	; (80064b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800649c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a06      	ldr	r2, [pc, #24]	; (80064bc <vApplicationGetTimerTaskMemory+0x30>)
 80064a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064aa:	601a      	str	r2, [r3, #0]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	2000083c 	.word	0x2000083c
 80064bc:	200008f8 	.word	0x200008f8

080064c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f103 0208 	add.w	r2, r3, #8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f103 0208 	add.w	r2, r3, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f103 0208 	add.w	r2, r3, #8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006578:	d103      	bne.n	8006582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e00c      	b.n	800659c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3308      	adds	r3, #8
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e002      	b.n	8006590 <vListInsert+0x2e>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	d2f6      	bcs.n	800658a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6892      	ldr	r2, [r2, #8]
 80065ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6852      	ldr	r2, [r2, #4]
 80065f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d103      	bne.n	8006608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	1e5a      	subs	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006652:	f002 fd6f 	bl	8009134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	441a      	add	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	3b01      	subs	r3, #1
 8006684:	68f9      	ldr	r1, [r7, #12]
 8006686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d114      	bne.n	80066d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01a      	beq.n	80066e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3310      	adds	r3, #16
 80066b4:	4618      	mov	r0, r3
 80066b6:	f001 fd13 	bl	80080e0 <xTaskRemoveFromEventList>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <xQueueGenericReset+0xcc>)
 80066c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	e009      	b.n	80066e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3310      	adds	r3, #16
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff fef2 	bl	80064c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3324      	adds	r3, #36	; 0x24
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff feed 	bl	80064c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066e6:	f002 fd55 	bl	8009194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066ea:	2301      	movs	r3, #1
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08e      	sub	sp, #56	; 0x38
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <xQueueGenericCreateStatic+0x52>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <xQueueGenericCreateStatic+0x56>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <xQueueGenericCreateStatic+0x58>
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	623b      	str	r3, [r7, #32]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <xQueueGenericCreateStatic+0x7e>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <xQueueGenericCreateStatic+0x82>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueGenericCreateStatic+0x84>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	61fb      	str	r3, [r7, #28]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006796:	2350      	movs	r3, #80	; 0x50
 8006798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b50      	cmp	r3, #80	; 0x50
 800679e:	d00a      	beq.n	80067b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61bb      	str	r3, [r7, #24]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4613      	mov	r3, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f83f 	bl	800685c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3730      	adds	r7, #48	; 0x30
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xQueueGenericCreate+0x2a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3350      	adds	r3, #80	; 0x50
 8006820:	4618      	mov	r0, r3
 8006822:	f002 fda9 	bl	8009378 <pvPortMalloc>
 8006826:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d011      	beq.n	8006852 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	3350      	adds	r3, #80	; 0x50
 8006836:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006840:	79fa      	ldrb	r2, [r7, #7]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4613      	mov	r3, r2
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f805 	bl	800685c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006852:	69bb      	ldr	r3, [r7, #24]
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e002      	b.n	800687e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800688a:	2101      	movs	r1, #1
 800688c:	69b8      	ldr	r0, [r7, #24]
 800688e:	f7ff fecb 	bl	8006628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00e      	beq.n	80068ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80068c2:	2300      	movs	r3, #0
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f90b 	bl	8006ae4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	4603      	mov	r3, r0
 80068de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80068e0:	2301      	movs	r3, #1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6939      	ldr	r1, [r7, #16]
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f7ff ff7a 	bl	80067e8 <xQueueGenericCreate>
 80068f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff ffd3 	bl	80068a2 <prvInitialiseMutex>

		return xNewQueue;
 80068fc:	68fb      	ldr	r3, [r7, #12]
	}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af02      	add	r7, sp, #8
 800690c:	4603      	mov	r3, r0
 800690e:	6039      	str	r1, [r7, #0]
 8006910:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006912:	2301      	movs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2200      	movs	r2, #0
 8006922:	6939      	ldr	r1, [r7, #16]
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	f7ff fee7 	bl	80066f8 <xQueueGenericCreateStatic>
 800692a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff ffb8 	bl	80068a2 <prvInitialiseMutex>

		return xNewQueue;
 8006932:	68fb      	ldr	r3, [r7, #12]
	}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	689c      	ldr	r4, [r3, #8]
 8006968:	f001 fd7c 	bl	8008464 <xTaskGetCurrentTaskHandle>
 800696c:	4603      	mov	r3, r0
 800696e:	429c      	cmp	r4, r3
 8006970:	d111      	bne.n	8006996 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	1e5a      	subs	r2, r3, #1
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006984:	2300      	movs	r3, #0
 8006986:	2200      	movs	r2, #0
 8006988:	2100      	movs	r1, #0
 800698a:	6938      	ldr	r0, [r7, #16]
 800698c:	f000 f8aa 	bl	8006ae4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006990:	2301      	movs	r3, #1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e001      	b.n	800699a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800699a:	697b      	ldr	r3, [r7, #20]
	}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd90      	pop	{r4, r7, pc}

080069a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60fb      	str	r3, [r7, #12]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	689c      	ldr	r4, [r3, #8]
 80069d2:	f001 fd47 	bl	8008464 <xTaskGetCurrentTaskHandle>
 80069d6:	4603      	mov	r3, r0
 80069d8:	429c      	cmp	r4, r3
 80069da:	d107      	bne.n	80069ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80069e6:	2301      	movs	r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e00c      	b.n	8006a06 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6938      	ldr	r0, [r7, #16]
 80069f0:	f000 fb7e 	bl	80070f0 <xQueueSemaphoreTake>
 80069f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006a06:	697b      	ldr	r3, [r7, #20]
	}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd90      	pop	{r4, r7, pc}

08006a10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61bb      	str	r3, [r7, #24]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d90a      	bls.n	8006a56 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	617b      	str	r3, [r7, #20]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a56:	2302      	movs	r3, #2
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fe49 	bl	80066f8 <xQueueGenericCreateStatic>
 8006a66:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006a74:	69fb      	ldr	r3, [r7, #28]
	}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	613b      	str	r3, [r7, #16]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d90a      	bls.n	8006ac2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe8e 	bl	80067e8 <xQueueGenericCreate>
 8006acc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ada:	697b      	ldr	r3, [r7, #20]
	}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	; 0x38
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006af2:	2300      	movs	r3, #0
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xQueueGenericSend+0x32>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d103      	bne.n	8006b24 <xQueueGenericSend+0x40>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <xQueueGenericSend+0x44>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <xQueueGenericSend+0x46>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xQueueGenericSend+0x60>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d103      	bne.n	8006b52 <xQueueGenericSend+0x6e>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <xQueueGenericSend+0x72>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericSend+0x74>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b72:	f001 fc87 	bl	8008484 <xTaskGetSchedulerState>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <xQueueGenericSend+0x9e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <xQueueGenericSend+0xa2>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <xQueueGenericSend+0xa4>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	61fb      	str	r3, [r7, #28]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba2:	f002 fac7 	bl	8009134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <xQueueGenericSend+0xd4>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d129      	bne.n	8006c0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bbe:	f000 fc5e 	bl	800747e <prvCopyDataToQueue>
 8006bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fa85 	bl	80080e0 <xTaskRemoveFromEventList>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d013      	beq.n	8006c04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bdc:	4b3f      	ldr	r3, [pc, #252]	; (8006cdc <xQueueGenericSend+0x1f8>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	e00a      	b.n	8006c04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bf4:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <xQueueGenericSend+0x1f8>)
 8006bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c04:	f002 fac6 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e063      	b.n	8006cd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d103      	bne.n	8006c1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c12:	f002 fabf 	bl	8009194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e05c      	b.n	8006cd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d106      	bne.n	8006c2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c20:	f107 0314 	add.w	r3, r7, #20
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fabf 	bl	80081a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c2e:	f002 fab1 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c32:	f001 f819 	bl	8007c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c36:	f002 fa7d 	bl	8009134 <vPortEnterCritical>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c40:	b25b      	sxtb	r3, r3
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c46:	d103      	bne.n	8006c50 <xQueueGenericSend+0x16c>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x182>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c66:	f002 fa95 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c6a:	1d3a      	adds	r2, r7, #4
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 faae 	bl	80081d4 <xTaskCheckForTimeOut>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d124      	bne.n	8006cc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c80:	f000 fcf5 	bl	800766e <prvIsQueueFull>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d018      	beq.n	8006cbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 f9d4 	bl	8008040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c9a:	f000 fc80 	bl	800759e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c9e:	f000 fff1 	bl	8007c84 <xTaskResumeAll>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f47f af7c 	bne.w	8006ba2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006caa:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <xQueueGenericSend+0x1f8>)
 8006cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	e772      	b.n	8006ba2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbe:	f000 fc6e 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc2:	f000 ffdf 	bl	8007c84 <xTaskResumeAll>
 8006cc6:	e76c      	b.n	8006ba2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cca:	f000 fc68 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cce:	f000 ffd9 	bl	8007c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3738      	adds	r7, #56	; 0x38
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b090      	sub	sp, #64	; 0x40
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <xQueueGenericSendFromISR+0x3c>
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <xQueueGenericSendFromISR+0x40>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <xQueueGenericSendFromISR+0x42>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d103      	bne.n	8006d4a <xQueueGenericSendFromISR+0x6a>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <xQueueGenericSendFromISR+0x6e>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xQueueGenericSendFromISR+0x70>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	623b      	str	r3, [r7, #32]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6a:	f002 fac5 	bl	80092f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fa      	str	r2, [r7, #28]
 8006d84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <xQueueGenericSendFromISR+0xbc>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d12f      	bne.n	8006dfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006db2:	f000 fb64 	bl	800747e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006db6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbe:	d112      	bne.n	8006de6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	3324      	adds	r3, #36	; 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f987 	bl	80080e0 <xTaskRemoveFromEventList>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e007      	b.n	8006df6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006de6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dea:	3301      	adds	r3, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	b25a      	sxtb	r2, r3
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006df6:	2301      	movs	r3, #1
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006dfa:	e001      	b.n	8006e00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3740      	adds	r7, #64	; 0x40
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b08e      	sub	sp, #56	; 0x38
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	623b      	str	r3, [r7, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	61fb      	str	r3, [r7, #28]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <xQueueGiveFromISR+0x58>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <xQueueGiveFromISR+0x5c>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <xQueueGiveFromISR+0x5e>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	61bb      	str	r3, [r7, #24]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e8e:	f002 fa33 	bl	80092f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e92:	f3ef 8211 	mrs	r2, BASEPRI
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	617a      	str	r2, [r7, #20]
 8006ea8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006eaa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d22b      	bcs.n	8006f16 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed8:	d112      	bne.n	8006f00 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	3324      	adds	r3, #36	; 0x24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f8fa 	bl	80080e0 <xTaskRemoveFromEventList>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00e      	beq.n	8006f10 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e007      	b.n	8006f10 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f04:	3301      	adds	r3, #1
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	b25a      	sxtb	r2, r3
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f10:	2301      	movs	r3, #1
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
 8006f14:	e001      	b.n	8006f1a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f383 8811 	msr	BASEPRI, r3
}
 8006f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3738      	adds	r7, #56	; 0x38
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08c      	sub	sp, #48	; 0x30
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <xQueueReceive+0x30>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	623b      	str	r3, [r7, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d103      	bne.n	8006f6e <xQueueReceive+0x3e>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <xQueueReceive+0x42>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <xQueueReceive+0x44>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xQueueReceive+0x5e>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	61fb      	str	r3, [r7, #28]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f8e:	f001 fa79 	bl	8008484 <xTaskGetSchedulerState>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <xQueueReceive+0x6e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <xQueueReceive+0x72>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e000      	b.n	8006fa4 <xQueueReceive+0x74>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <xQueueReceive+0x8e>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	61bb      	str	r3, [r7, #24]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fbe:	f002 f8b9 	bl	8009134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01f      	beq.n	800700e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd2:	f000 fabe 	bl	8007552 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	1e5a      	subs	r2, r3, #1
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	3310      	adds	r3, #16
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f878 	bl	80080e0 <xTaskRemoveFromEventList>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ff6:	4b3d      	ldr	r3, [pc, #244]	; (80070ec <xQueueReceive+0x1bc>)
 8006ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007006:	f002 f8c5 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 800700a:	2301      	movs	r3, #1
 800700c:	e069      	b.n	80070e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007014:	f002 f8be 	bl	8009194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007018:	2300      	movs	r3, #0
 800701a:	e062      	b.n	80070e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007022:	f107 0310 	add.w	r3, r7, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f001 f8be 	bl	80081a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007030:	f002 f8b0 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007034:	f000 fe18 	bl	8007c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007038:	f002 f87c 	bl	8009134 <vPortEnterCritical>
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007048:	d103      	bne.n	8007052 <xQueueReceive+0x122>
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007058:	b25b      	sxtb	r3, r3
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800705e:	d103      	bne.n	8007068 <xQueueReceive+0x138>
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007068:	f002 f894 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800706c:	1d3a      	adds	r2, r7, #4
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	4611      	mov	r1, r2
 8007074:	4618      	mov	r0, r3
 8007076:	f001 f8ad 	bl	80081d4 <xTaskCheckForTimeOut>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d123      	bne.n	80070c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007082:	f000 fade 	bl	8007642 <prvIsQueueEmpty>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d017      	beq.n	80070bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ffd3 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709c:	f000 fa7f 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a0:	f000 fdf0 	bl	8007c84 <xTaskResumeAll>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d189      	bne.n	8006fbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <xQueueReceive+0x1bc>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	e780      	b.n	8006fbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f000 fa6e 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070c2:	f000 fddf 	bl	8007c84 <xTaskResumeAll>
 80070c6:	e77a      	b.n	8006fbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ca:	f000 fa68 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ce:	f000 fdd9 	bl	8007c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d4:	f000 fab5 	bl	8007642 <prvIsQueueEmpty>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f43f af6f 	beq.w	8006fbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3730      	adds	r7, #48	; 0x30
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08e      	sub	sp, #56	; 0x38
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61fb      	str	r3, [r7, #28]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007140:	f001 f9a0 	bl	8008484 <xTaskGetSchedulerState>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <xQueueSemaphoreTake+0x60>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <xQueueSemaphoreTake+0x64>
 8007150:	2301      	movs	r3, #1
 8007152:	e000      	b.n	8007156 <xQueueSemaphoreTake+0x66>
 8007154:	2300      	movs	r3, #0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	61bb      	str	r3, [r7, #24]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007170:	f001 ffe0 	bl	8009134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	2b00      	cmp	r3, #0
 800717e:	d024      	beq.n	80071ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007190:	f001 faee 	bl	8008770 <pvTaskIncrementMutexHeldCount>
 8007194:	4602      	mov	r2, r0
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00f      	beq.n	80071c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	3310      	adds	r3, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 ff9a 	bl	80080e0 <xTaskRemoveFromEventList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071b2:	4b54      	ldr	r3, [pc, #336]	; (8007304 <xQueueSemaphoreTake+0x214>)
 80071b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071c2:	f001 ffe7 	bl	8009194 <vPortExitCritical>
				return pdPASS;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e097      	b.n	80072fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d111      	bne.n	80071f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	617b      	str	r3, [r7, #20]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071ec:	f001 ffd2 	bl	8009194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e082      	b.n	80072fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 ffd2 	bl	80081a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007208:	f001 ffc4 	bl	8009194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800720c:	f000 fd2c 	bl	8007c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007210:	f001 ff90 	bl	8009134 <vPortEnterCritical>
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721a:	b25b      	sxtb	r3, r3
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007220:	d103      	bne.n	800722a <xQueueSemaphoreTake+0x13a>
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007230:	b25b      	sxtb	r3, r3
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007236:	d103      	bne.n	8007240 <xQueueSemaphoreTake+0x150>
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007240:	f001 ffa8 	bl	8009194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007244:	463a      	mov	r2, r7
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ffc1 	bl	80081d4 <xTaskCheckForTimeOut>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d132      	bne.n	80072be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800725a:	f000 f9f2 	bl	8007642 <prvIsQueueEmpty>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d026      	beq.n	80072b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800726c:	f001 ff62 	bl	8009134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f923 	bl	80084c0 <xTaskPriorityInherit>
 800727a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800727c:	f001 ff8a 	bl	8009194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	3324      	adds	r3, #36	; 0x24
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fed9 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800728e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007290:	f000 f985 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007294:	f000 fcf6 	bl	8007c84 <xTaskResumeAll>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	f47f af68 	bne.w	8007170 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80072a0:	4b18      	ldr	r3, [pc, #96]	; (8007304 <xQueueSemaphoreTake+0x214>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	e75e      	b.n	8007170 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b4:	f000 f973 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b8:	f000 fce4 	bl	8007c84 <xTaskResumeAll>
 80072bc:	e758      	b.n	8007170 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072c0:	f000 f96d 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c4:	f000 fcde 	bl	8007c84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ca:	f000 f9ba 	bl	8007642 <prvIsQueueEmpty>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f43f af4d 	beq.w	8007170 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00d      	beq.n	80072f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80072dc:	f001 ff2a 	bl	8009134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e2:	f000 f8b4 	bl	800744e <prvGetDisinheritPriorityAfterTimeout>
 80072e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 f9bc 	bl	800866c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072f4:	f001 ff4e 	bl	8009194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3738      	adds	r7, #56	; 0x38
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	623b      	str	r3, [r7, #32]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <xQueueReceiveFromISR+0x3a>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueReceiveFromISR+0x3e>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueReceiveFromISR+0x40>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61fb      	str	r3, [r7, #28]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007362:	f001 ffc9 	bl	80092f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007366:	f3ef 8211 	mrs	r2, BASEPRI
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	61ba      	str	r2, [r7, #24]
 800737c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800737e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02f      	beq.n	80073ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800739c:	f000 f8d9 	bl	8007552 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80073a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b0:	d112      	bne.n	80073d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d016      	beq.n	80073e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	3310      	adds	r3, #16
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fe8e 	bl	80080e0 <xTaskRemoveFromEventList>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e007      	b.n	80073e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073dc:	3301      	adds	r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	b25a      	sxtb	r2, r3
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073e8:	2301      	movs	r3, #1
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
 80073ec:	e001      	b.n	80073f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f383 8811 	msr	BASEPRI, r3
}
 80073fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007400:	4618      	mov	r0, r3
 8007402:	3738      	adds	r7, #56	; 0x38
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <vQueueDelete+0x28>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f95f 	bl	80076f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f002 f865 	bl	8009510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	e001      	b.n	8007470 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007470:	68fb      	ldr	r3, [r7, #12]
	}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10d      	bne.n	80074b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d14d      	bne.n	8007540 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f871 	bl	8008590 <xTaskPriorityDisinherit>
 80074ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	e043      	b.n	8007540 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d119      	bne.n	80074f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6858      	ldr	r0, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	461a      	mov	r2, r3
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	f00f fa34 	bl	8016936 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	441a      	add	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d32b      	bcc.n	8007540 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	e026      	b.n	8007540 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68d8      	ldr	r0, [r3, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	461a      	mov	r2, r3
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	f00f fa1a 	bl	8016936 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	425b      	negs	r3, r3
 800750c:	441a      	add	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d207      	bcs.n	800752e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	425b      	negs	r3, r3
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d105      	bne.n	8007540 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3b01      	subs	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d018      	beq.n	8007596 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	441a      	add	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	d303      	bcc.n	8007586 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68d9      	ldr	r1, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	461a      	mov	r2, r3
 8007590:	6838      	ldr	r0, [r7, #0]
 8007592:	f00f f9d0 	bl	8016936 <memcpy>
	}
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075a6:	f001 fdc5 	bl	8009134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b2:	e011      	b.n	80075d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d012      	beq.n	80075e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3324      	adds	r3, #36	; 0x24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fd8d 	bl	80080e0 <xTaskRemoveFromEventList>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075cc:	f000 fe64 	bl	8008298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dce9      	bgt.n	80075b4 <prvUnlockQueue+0x16>
 80075e0:	e000      	b.n	80075e4 <prvUnlockQueue+0x46>
					break;
 80075e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	22ff      	movs	r2, #255	; 0xff
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075ec:	f001 fdd2 	bl	8009194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075f0:	f001 fda0 	bl	8009134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075fc:	e011      	b.n	8007622 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d012      	beq.n	800762c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3310      	adds	r3, #16
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd68 	bl	80080e0 <xTaskRemoveFromEventList>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007616:	f000 fe3f 	bl	8008298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	3b01      	subs	r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	dce9      	bgt.n	80075fe <prvUnlockQueue+0x60>
 800762a:	e000      	b.n	800762e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800762c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	22ff      	movs	r2, #255	; 0xff
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007636:	f001 fdad 	bl	8009194 <vPortExitCritical>
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800764a:	f001 fd73 	bl	8009134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007656:	2301      	movs	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e001      	b.n	8007660 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007660:	f001 fd98 	bl	8009194 <vPortExitCritical>

	return xReturn;
 8007664:	68fb      	ldr	r3, [r7, #12]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007676:	f001 fd5d 	bl	8009134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	d102      	bne.n	800768c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e001      	b.n	8007690 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007690:	f001 fd80 	bl	8009194 <vPortExitCritical>

	return xReturn;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	e014      	b.n	80076da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <vQueueAddToRegistry+0x50>)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076bc:	490c      	ldr	r1, [pc, #48]	; (80076f0 <vQueueAddToRegistry+0x50>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076c6:	4a0a      	ldr	r2, [pc, #40]	; (80076f0 <vQueueAddToRegistry+0x50>)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076d2:	e006      	b.n	80076e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	d9e7      	bls.n	80076b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	2000fe9c 	.word	0x2000fe9c

080076f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e016      	b.n	8007730 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007702:	4a10      	ldr	r2, [pc, #64]	; (8007744 <vQueueUnregisterQueue+0x50>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d10b      	bne.n	800772a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <vQueueUnregisterQueue+0x50>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2100      	movs	r1, #0
 8007718:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800771c:	4a09      	ldr	r2, [pc, #36]	; (8007744 <vQueueUnregisterQueue+0x50>)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4413      	add	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	605a      	str	r2, [r3, #4]
				break;
 8007728:	e006      	b.n	8007738 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b07      	cmp	r3, #7
 8007734:	d9e5      	bls.n	8007702 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	2000fe9c 	.word	0x2000fe9c

08007748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007758:	f001 fcec 	bl	8009134 <vPortEnterCritical>
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007762:	b25b      	sxtb	r3, r3
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007768:	d103      	bne.n	8007772 <vQueueWaitForMessageRestricted+0x2a>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007778:	b25b      	sxtb	r3, r3
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800777e:	d103      	bne.n	8007788 <vQueueWaitForMessageRestricted+0x40>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007788:	f001 fd04 	bl	8009194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fc73 	bl	8008088 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f7ff fefb 	bl	800759e <prvUnlockQueue>
	}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08e      	sub	sp, #56	; 0x38
 80077b4:	af04      	add	r7, sp, #16
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xTaskCreateStatic+0x2a>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	623b      	str	r3, [r7, #32]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	61fb      	str	r3, [r7, #28]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077f6:	23bc      	movs	r3, #188	; 0xbc
 80077f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2bbc      	cmp	r3, #188	; 0xbc
 80077fe:	d00a      	beq.n	8007816 <xTaskCreateStatic+0x66>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61bb      	str	r3, [r7, #24]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007816:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01e      	beq.n	800785c <xTaskCreateStatic+0xac>
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2202      	movs	r2, #2
 8007832:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007836:	2300      	movs	r3, #0
 8007838:	9303      	str	r3, [sp, #12]
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	9302      	str	r3, [sp, #8]
 800783e:	f107 0314 	add.w	r3, r7, #20
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f850 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007856:	f000 f8f3 	bl	8007a40 <prvAddNewTaskToReadyList>
 800785a:	e001      	b.n	8007860 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3728      	adds	r7, #40	; 0x28
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08c      	sub	sp, #48	; 0x30
 800786e:	af04      	add	r7, sp, #16
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fd7a 	bl	8009378 <pvPortMalloc>
 8007884:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800788c:	20bc      	movs	r0, #188	; 0xbc
 800788e:	f001 fd73 	bl	8009378 <pvPortMalloc>
 8007892:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
 80078a0:	e005      	b.n	80078ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f001 fe34 	bl	8009510 <vPortFree>
 80078a8:	e001      	b.n	80078ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d017      	beq.n	80078e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	2300      	movs	r3, #0
 80078c0:	9303      	str	r3, [sp, #12]
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 f80e 	bl	80078f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078d8:	69f8      	ldr	r0, [r7, #28]
 80078da:	f000 f8b1 	bl	8007a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	e002      	b.n	80078ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078ea:	69bb      	ldr	r3, [r7, #24]
	}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	461a      	mov	r2, r3
 800790c:	21a5      	movs	r1, #165	; 0xa5
 800790e:	f00f f83a 	bl	8016986 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800791c:	3b01      	subs	r3, #1
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	617b      	str	r3, [r7, #20]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01f      	beq.n	8007992 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	e012      	b.n	800797e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	7819      	ldrb	r1, [r3, #0]
 8007960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	4413      	add	r3, r2
 8007966:	3334      	adds	r3, #52	; 0x34
 8007968:	460a      	mov	r2, r1
 800796a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d006      	beq.n	8007986 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	3301      	adds	r3, #1
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b0f      	cmp	r3, #15
 8007982:	d9e9      	bls.n	8007958 <prvInitialiseNewTask+0x64>
 8007984:	e000      	b.n	8007988 <prvInitialiseNewTask+0x94>
			{
				break;
 8007986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007990:	e003      	b.n	800799a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	2b37      	cmp	r3, #55	; 0x37
 800799e:	d901      	bls.n	80079a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079a0:	2337      	movs	r3, #55	; 0x37
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2200      	movs	r2, #0
 80079b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fda0 	bl	8006500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	3318      	adds	r3, #24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fd9b 	bl	8006500 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	3354      	adds	r3, #84	; 0x54
 80079f4:	2260      	movs	r2, #96	; 0x60
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f00e ffc4 	bl	8016986 <memset>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <prvInitialiseNewTask+0x140>)
 8007a02:	659a      	str	r2, [r3, #88]	; 0x58
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <prvInitialiseNewTask+0x144>)
 8007a08:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	4a0b      	ldr	r2, [pc, #44]	; (8007a3c <prvInitialiseNewTask+0x148>)
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	69b8      	ldr	r0, [r7, #24]
 8007a16:	f001 fa61 	bl	8008edc <pxPortInitialiseStack>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a2c:	bf00      	nop
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	08022b40 	.word	0x08022b40
 8007a38:	08022b60 	.word	0x08022b60
 8007a3c:	08022b20 	.word	0x08022b20

08007a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a48:	f001 fb74 	bl	8009134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a4c:	4b2d      	ldr	r3, [pc, #180]	; (8007b04 <prvAddNewTaskToReadyList+0xc4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	4a2c      	ldr	r2, [pc, #176]	; (8007b04 <prvAddNewTaskToReadyList+0xc4>)
 8007a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a56:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <prvAddNewTaskToReadyList+0xc8>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a5e:	4a2a      	ldr	r2, [pc, #168]	; (8007b08 <prvAddNewTaskToReadyList+0xc8>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a64:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <prvAddNewTaskToReadyList+0xc4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d110      	bne.n	8007a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a6c:	f000 fc38 	bl	80082e0 <prvInitialiseTaskLists>
 8007a70:	e00d      	b.n	8007a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <prvAddNewTaskToReadyList+0xcc>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a7a:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <prvAddNewTaskToReadyList+0xc8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d802      	bhi.n	8007a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a88:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <prvAddNewTaskToReadyList+0xc8>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <prvAddNewTaskToReadyList+0xd0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <prvAddNewTaskToReadyList+0xd0>)
 8007a96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a98:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <prvAddNewTaskToReadyList+0xd0>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <prvAddNewTaskToReadyList+0xd4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d903      	bls.n	8007ab4 <prvAddNewTaskToReadyList+0x74>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <prvAddNewTaskToReadyList+0xd4>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <prvAddNewTaskToReadyList+0xd8>)
 8007ac2:	441a      	add	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7fe fd25 	bl	800651a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ad0:	f001 fb60 	bl	8009194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ad4:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <prvAddNewTaskToReadyList+0xcc>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00e      	beq.n	8007afa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <prvAddNewTaskToReadyList+0xc8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d207      	bcs.n	8007afa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007aea:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <prvAddNewTaskToReadyList+0xdc>)
 8007aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200011cc 	.word	0x200011cc
 8007b08:	20000cf8 	.word	0x20000cf8
 8007b0c:	200011d8 	.word	0x200011d8
 8007b10:	200011e8 	.word	0x200011e8
 8007b14:	200011d4 	.word	0x200011d4
 8007b18:	20000cfc 	.word	0x20000cfc
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d017      	beq.n	8007b62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <vTaskDelay+0x60>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <vTaskDelay+0x30>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60bb      	str	r3, [r7, #8]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b50:	f000 f88a 	bl	8007c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fe1e 	bl	8008798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b5c:	f000 f892 	bl	8007c84 <xTaskResumeAll>
 8007b60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d107      	bne.n	8007b78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <vTaskDelay+0x64>)
 8007b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	200011f4 	.word	0x200011f4
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b96:	463a      	mov	r2, r7
 8007b98:	1d39      	adds	r1, r7, #4
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fc5a 	bl	8006458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	9202      	str	r2, [sp, #8]
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	460a      	mov	r2, r1
 8007bb6:	4924      	ldr	r1, [pc, #144]	; (8007c48 <vTaskStartScheduler+0xc0>)
 8007bb8:	4824      	ldr	r0, [pc, #144]	; (8007c4c <vTaskStartScheduler+0xc4>)
 8007bba:	f7ff fdf9 	bl	80077b0 <xTaskCreateStatic>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4a23      	ldr	r2, [pc, #140]	; (8007c50 <vTaskStartScheduler+0xc8>)
 8007bc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bc4:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <vTaskStartScheduler+0xc8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	e001      	b.n	8007bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bdc:	f000 fe30 	bl	8008840 <xTimerCreateTimerTask>
 8007be0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d11b      	bne.n	8007c20 <vTaskStartScheduler+0x98>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	613b      	str	r3, [r7, #16]
}
 8007bfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bfc:	4b15      	ldr	r3, [pc, #84]	; (8007c54 <vTaskStartScheduler+0xcc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3354      	adds	r3, #84	; 0x54
 8007c02:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <vTaskStartScheduler+0xd0>)
 8007c04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c06:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <vTaskStartScheduler+0xd4>)
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c0e:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <vTaskStartScheduler+0xd8>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <vTaskStartScheduler+0xdc>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c1a:	f001 f9e9 	bl	8008ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c1e:	e00e      	b.n	8007c3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c26:	d10a      	bne.n	8007c3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	60fb      	str	r3, [r7, #12]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <vTaskStartScheduler+0xb4>
}
 8007c3e:	bf00      	nop
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	08018748 	.word	0x08018748
 8007c4c:	080082b1 	.word	0x080082b1
 8007c50:	200011f0 	.word	0x200011f0
 8007c54:	20000cf8 	.word	0x20000cf8
 8007c58:	200004b4 	.word	0x200004b4
 8007c5c:	200011ec 	.word	0x200011ec
 8007c60:	200011d8 	.word	0x200011d8
 8007c64:	200011d0 	.word	0x200011d0

08007c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c6c:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <vTaskSuspendAll+0x18>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	4a03      	ldr	r2, [pc, #12]	; (8007c80 <vTaskSuspendAll+0x18>)
 8007c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c76:	bf00      	nop
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200011f4 	.word	0x200011f4

08007c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c92:	4b42      	ldr	r3, [pc, #264]	; (8007d9c <xTaskResumeAll+0x118>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cb0:	f001 fa40 	bl	8009134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cb4:	4b39      	ldr	r3, [pc, #228]	; (8007d9c <xTaskResumeAll+0x118>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	4a38      	ldr	r2, [pc, #224]	; (8007d9c <xTaskResumeAll+0x118>)
 8007cbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbe:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <xTaskResumeAll+0x118>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d162      	bne.n	8007d8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cc6:	4b36      	ldr	r3, [pc, #216]	; (8007da0 <xTaskResumeAll+0x11c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d05e      	beq.n	8007d8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cce:	e02f      	b.n	8007d30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd0:	4b34      	ldr	r3, [pc, #208]	; (8007da4 <xTaskResumeAll+0x120>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3318      	adds	r3, #24
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fc79 	bl	80065d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fc74 	bl	80065d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <xTaskResumeAll+0x124>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <xTaskResumeAll+0x7c>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a2a      	ldr	r2, [pc, #168]	; (8007da8 <xTaskResumeAll+0x124>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a27      	ldr	r2, [pc, #156]	; (8007dac <xTaskResumeAll+0x128>)
 8007d0e:	441a      	add	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fe fbff 	bl	800651a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d20:	4b23      	ldr	r3, [pc, #140]	; (8007db0 <xTaskResumeAll+0x12c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <xTaskResumeAll+0x130>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d30:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <xTaskResumeAll+0x120>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1cb      	bne.n	8007cd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d3e:	f000 fb71 	bl	8008424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <xTaskResumeAll+0x134>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d4e:	f000 f859 	bl	8007e04 <xTaskIncrementTick>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <xTaskResumeAll+0x130>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f1      	bne.n	8007d4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <xTaskResumeAll+0x134>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <xTaskResumeAll+0x130>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <xTaskResumeAll+0x138>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d8c:	f001 fa02 	bl	8009194 <vPortExitCritical>

	return xAlreadyYielded;
 8007d90:	68bb      	ldr	r3, [r7, #8]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200011f4 	.word	0x200011f4
 8007da0:	200011cc 	.word	0x200011cc
 8007da4:	2000118c 	.word	0x2000118c
 8007da8:	200011d4 	.word	0x200011d4
 8007dac:	20000cfc 	.word	0x20000cfc
 8007db0:	20000cf8 	.word	0x20000cf8
 8007db4:	200011e0 	.word	0x200011e0
 8007db8:	200011dc 	.word	0x200011dc
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <xTaskGetTickCount+0x1c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dcc:	687b      	ldr	r3, [r7, #4]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	200011d0 	.word	0x200011d0

08007de0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007de6:	f001 fa87 	bl	80092f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007dee:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <xTaskGetTickCountFromISR+0x20>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007df4:	683b      	ldr	r3, [r7, #0]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200011d0 	.word	0x200011d0

08007e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0e:	4b4f      	ldr	r3, [pc, #316]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 808f 	bne.w	8007f36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e18:	4b4d      	ldr	r3, [pc, #308]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e20:	4a4b      	ldr	r2, [pc, #300]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d120      	bne.n	8007e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e2c:	4b49      	ldr	r3, [pc, #292]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskIncrementTick+0x46>
 8007e4c:	4b41      	ldr	r3, [pc, #260]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3f      	ldr	r2, [pc, #252]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b3e      	ldr	r3, [pc, #248]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a3d      	ldr	r2, [pc, #244]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f000 fadb 	bl	8008424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e6e:	4b3c      	ldr	r3, [pc, #240]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d349      	bcc.n	8007f0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e78:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e88:	601a      	str	r2, [r3, #0]
					break;
 8007e8a:	e03f      	b.n	8007f0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b31      	ldr	r3, [pc, #196]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea4:	4a2e      	ldr	r2, [pc, #184]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eaa:	e02f      	b.n	8007f0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fb8f 	bl	80065d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fb86 	bl	80065d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d903      	bls.n	8007edc <xTaskIncrementTick+0xd8>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007eea:	441a      	add	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7fe fb11 	bl	800651a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <xTaskIncrementTick+0x168>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d3b8      	bcc.n	8007e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f0a:	e7b5      	b.n	8007e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <xTaskIncrementTick+0x168>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	4915      	ldr	r1, [pc, #84]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d901      	bls.n	8007f28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f28:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e004      	b.n	8007f40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <xTaskIncrementTick+0x170>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	4a0d      	ldr	r2, [pc, #52]	; (8007f74 <xTaskIncrementTick+0x170>)
 8007f3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f40:	697b      	ldr	r3, [r7, #20]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200011f4 	.word	0x200011f4
 8007f50:	200011d0 	.word	0x200011d0
 8007f54:	20001184 	.word	0x20001184
 8007f58:	20001188 	.word	0x20001188
 8007f5c:	200011e4 	.word	0x200011e4
 8007f60:	200011ec 	.word	0x200011ec
 8007f64:	200011d4 	.word	0x200011d4
 8007f68:	20000cfc 	.word	0x20000cfc
 8007f6c:	20000cf8 	.word	0x20000cf8
 8007f70:	200011e0 	.word	0x200011e0
 8007f74:	200011dc 	.word	0x200011dc

08007f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7e:	4b2a      	ldr	r3, [pc, #168]	; (8008028 <vTaskSwitchContext+0xb0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f86:	4b29      	ldr	r3, [pc, #164]	; (800802c <vTaskSwitchContext+0xb4>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f8c:	e046      	b.n	800801c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007f8e:	4b27      	ldr	r3, [pc, #156]	; (800802c <vTaskSwitchContext+0xb4>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f94:	4b26      	ldr	r3, [pc, #152]	; (8008030 <vTaskSwitchContext+0xb8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	e010      	b.n	8007fbe <vTaskSwitchContext+0x46>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	607b      	str	r3, [r7, #4]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <vTaskSwitchContext+0x3e>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	491d      	ldr	r1, [pc, #116]	; (8008034 <vTaskSwitchContext+0xbc>)
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0e4      	beq.n	8007f9c <vTaskSwitchContext+0x24>
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4a15      	ldr	r2, [pc, #84]	; (8008034 <vTaskSwitchContext+0xbc>)
 8007fde:	4413      	add	r3, r2
 8007fe0:	60bb      	str	r3, [r7, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	605a      	str	r2, [r3, #4]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d104      	bne.n	8008002 <vTaskSwitchContext+0x8a>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4a0b      	ldr	r2, [pc, #44]	; (8008038 <vTaskSwitchContext+0xc0>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	4a08      	ldr	r2, [pc, #32]	; (8008030 <vTaskSwitchContext+0xb8>)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <vTaskSwitchContext+0xc0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3354      	adds	r3, #84	; 0x54
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <vTaskSwitchContext+0xc4>)
 800801a:	6013      	str	r3, [r2, #0]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	200011f4 	.word	0x200011f4
 800802c:	200011e0 	.word	0x200011e0
 8008030:	200011d4 	.word	0x200011d4
 8008034:	20000cfc 	.word	0x20000cfc
 8008038:	20000cf8 	.word	0x20000cf8
 800803c:	200004b4 	.word	0x200004b4

08008040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <vTaskPlaceOnEventList+0x44>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3318      	adds	r3, #24
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fe fa77 	bl	8006562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008074:	2101      	movs	r1, #1
 8008076:	6838      	ldr	r0, [r7, #0]
 8008078:	f000 fb8e 	bl	8008798 <prvAddCurrentTaskToDelayedList>
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000cf8 	.word	0x20000cf8

08008088 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	617b      	str	r3, [r7, #20]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080b0:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <vTaskPlaceOnEventListRestricted+0x54>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3318      	adds	r3, #24
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7fe fa2e 	bl	800651a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	68b8      	ldr	r0, [r7, #8]
 80080ce:	f000 fb63 	bl	8008798 <prvAddCurrentTaskToDelayedList>
	}
 80080d2:	bf00      	nop
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000cf8 	.word	0x20000cf8

080080e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10a      	bne.n	800810c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60fb      	str	r3, [r7, #12]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3318      	adds	r3, #24
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fa5f 	bl	80065d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <xTaskRemoveFromEventList+0xb0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11d      	bne.n	800815a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	3304      	adds	r3, #4
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fa56 	bl	80065d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <xTaskRemoveFromEventList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d903      	bls.n	800813c <xTaskRemoveFromEventList+0x5c>
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	4a16      	ldr	r2, [pc, #88]	; (8008194 <xTaskRemoveFromEventList+0xb4>)
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4a13      	ldr	r2, [pc, #76]	; (8008198 <xTaskRemoveFromEventList+0xb8>)
 800814a:	441a      	add	r2, r3
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7fe f9e1 	bl	800651a <vListInsertEnd>
 8008158:	e005      	b.n	8008166 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	3318      	adds	r3, #24
 800815e:	4619      	mov	r1, r3
 8008160:	480e      	ldr	r0, [pc, #56]	; (800819c <xTaskRemoveFromEventList+0xbc>)
 8008162:	f7fe f9da 	bl	800651a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <xTaskRemoveFromEventList+0xc0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d905      	bls.n	8008180 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <xTaskRemoveFromEventList+0xc4>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e001      	b.n	8008184 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008184:	697b      	ldr	r3, [r7, #20]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200011f4 	.word	0x200011f4
 8008194:	200011d4 	.word	0x200011d4
 8008198:	20000cfc 	.word	0x20000cfc
 800819c:	2000118c 	.word	0x2000118c
 80081a0:	20000cf8 	.word	0x20000cf8
 80081a4:	200011e0 	.word	0x200011e0

080081a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <vTaskInternalSetTimeOutState+0x24>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <vTaskInternalSetTimeOutState+0x28>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	605a      	str	r2, [r3, #4]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	200011e4 	.word	0x200011e4
 80081d0:	200011d0 	.word	0x200011d0

080081d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	613b      	str	r3, [r7, #16]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008216:	f000 ff8d 	bl	8009134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800821a:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <xTaskCheckForTimeOut+0xbc>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008232:	d102      	bne.n	800823a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	e023      	b.n	8008282 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <xTaskCheckForTimeOut+0xc0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d007      	beq.n	8008256 <xTaskCheckForTimeOut+0x82>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	429a      	cmp	r2, r3
 800824e:	d302      	bcc.n	8008256 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	e015      	b.n	8008282 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	429a      	cmp	r2, r3
 800825e:	d20b      	bcs.n	8008278 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ff9b 	bl	80081a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e004      	b.n	8008282 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800827e:	2301      	movs	r3, #1
 8008280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008282:	f000 ff87 	bl	8009194 <vPortExitCritical>

	return xReturn;
 8008286:	69fb      	ldr	r3, [r7, #28]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200011d0 	.word	0x200011d0
 8008294:	200011e4 	.word	0x200011e4

08008298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800829c:	4b03      	ldr	r3, [pc, #12]	; (80082ac <vTaskMissedYield+0x14>)
 800829e:	2201      	movs	r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	200011e0 	.word	0x200011e0

080082b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082b8:	f000 f852 	bl	8008360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082bc:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <prvIdleTask+0x28>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d9f9      	bls.n	80082b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <prvIdleTask+0x2c>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082d4:	e7f0      	b.n	80082b8 <prvIdleTask+0x8>
 80082d6:	bf00      	nop
 80082d8:	20000cfc 	.word	0x20000cfc
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082e6:	2300      	movs	r3, #0
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	e00c      	b.n	8008306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4a12      	ldr	r2, [pc, #72]	; (8008340 <prvInitialiseTaskLists+0x60>)
 80082f8:	4413      	add	r3, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe f8e0 	bl	80064c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3301      	adds	r3, #1
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b37      	cmp	r3, #55	; 0x37
 800830a:	d9ef      	bls.n	80082ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800830c:	480d      	ldr	r0, [pc, #52]	; (8008344 <prvInitialiseTaskLists+0x64>)
 800830e:	f7fe f8d7 	bl	80064c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008312:	480d      	ldr	r0, [pc, #52]	; (8008348 <prvInitialiseTaskLists+0x68>)
 8008314:	f7fe f8d4 	bl	80064c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008318:	480c      	ldr	r0, [pc, #48]	; (800834c <prvInitialiseTaskLists+0x6c>)
 800831a:	f7fe f8d1 	bl	80064c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800831e:	480c      	ldr	r0, [pc, #48]	; (8008350 <prvInitialiseTaskLists+0x70>)
 8008320:	f7fe f8ce 	bl	80064c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008324:	480b      	ldr	r0, [pc, #44]	; (8008354 <prvInitialiseTaskLists+0x74>)
 8008326:	f7fe f8cb 	bl	80064c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <prvInitialiseTaskLists+0x78>)
 800832c:	4a05      	ldr	r2, [pc, #20]	; (8008344 <prvInitialiseTaskLists+0x64>)
 800832e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvInitialiseTaskLists+0x7c>)
 8008332:	4a05      	ldr	r2, [pc, #20]	; (8008348 <prvInitialiseTaskLists+0x68>)
 8008334:	601a      	str	r2, [r3, #0]
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000cfc 	.word	0x20000cfc
 8008344:	2000115c 	.word	0x2000115c
 8008348:	20001170 	.word	0x20001170
 800834c:	2000118c 	.word	0x2000118c
 8008350:	200011a0 	.word	0x200011a0
 8008354:	200011b8 	.word	0x200011b8
 8008358:	20001184 	.word	0x20001184
 800835c:	20001188 	.word	0x20001188

08008360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008366:	e019      	b.n	800839c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008368:	f000 fee4 	bl	8009134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <prvCheckTasksWaitingTermination+0x50>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3304      	adds	r3, #4
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe f92b 	bl	80065d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <prvCheckTasksWaitingTermination+0x54>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3b01      	subs	r3, #1
 8008384:	4a0b      	ldr	r2, [pc, #44]	; (80083b4 <prvCheckTasksWaitingTermination+0x54>)
 8008386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008388:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <prvCheckTasksWaitingTermination+0x58>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <prvCheckTasksWaitingTermination+0x58>)
 8008390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008392:	f000 feff 	bl	8009194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f810 	bl	80083bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <prvCheckTasksWaitingTermination+0x58>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e1      	bne.n	8008368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200011a0 	.word	0x200011a0
 80083b4:	200011cc 	.word	0x200011cc
 80083b8:	200011b4 	.word	0x200011b4

080083bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3354      	adds	r3, #84	; 0x54
 80083c8:	4618      	mov	r0, r3
 80083ca:	f00e fc1b 	bl	8016c04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d108      	bne.n	80083ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 f897 	bl	8009510 <vPortFree>
				vPortFree( pxTCB );
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 f894 	bl	8009510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083e8:	e018      	b.n	800841c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d103      	bne.n	80083fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 f88b 	bl	8009510 <vPortFree>
	}
 80083fa:	e00f      	b.n	800841c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008402:	2b02      	cmp	r3, #2
 8008404:	d00a      	beq.n	800841c <prvDeleteTCB+0x60>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <prvDeleteTCB+0x5e>
	}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <prvResetNextTaskUnblockTime+0x38>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <prvResetNextTaskUnblockTime+0x3c>)
 8008436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800843a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800843c:	e008      	b.n	8008450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <prvResetNextTaskUnblockTime+0x38>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvResetNextTaskUnblockTime+0x3c>)
 800844e:	6013      	str	r3, [r2, #0]
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	20001184 	.word	0x20001184
 8008460:	200011ec 	.word	0x200011ec

08008464 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <xTaskGetCurrentTaskHandle+0x1c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008470:	687b      	ldr	r3, [r7, #4]
	}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000cf8 	.word	0x20000cf8

08008484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <xTaskGetSchedulerState+0x34>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d102      	bne.n	8008498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008492:	2301      	movs	r3, #1
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	e008      	b.n	80084aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <xTaskGetSchedulerState+0x38>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084a0:	2302      	movs	r3, #2
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	e001      	b.n	80084aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084a6:	2300      	movs	r3, #0
 80084a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084aa:	687b      	ldr	r3, [r7, #4]
	}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	200011d8 	.word	0x200011d8
 80084bc:	200011f4 	.word	0x200011f4

080084c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d051      	beq.n	800857a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <xTaskPriorityInherit+0xc4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d241      	bcs.n	8008568 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	db06      	blt.n	80084fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <xTaskPriorityInherit+0xc4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6959      	ldr	r1, [r3, #20]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a1f      	ldr	r2, [pc, #124]	; (8008588 <xTaskPriorityInherit+0xc8>)
 800850c:	4413      	add	r3, r2
 800850e:	4299      	cmp	r1, r3
 8008510:	d122      	bne.n	8008558 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3304      	adds	r3, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe f85c 	bl	80065d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <xTaskPriorityInherit+0xc4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852a:	4b18      	ldr	r3, [pc, #96]	; (800858c <xTaskPriorityInherit+0xcc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d903      	bls.n	800853a <xTaskPriorityInherit+0x7a>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4a15      	ldr	r2, [pc, #84]	; (800858c <xTaskPriorityInherit+0xcc>)
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4a10      	ldr	r2, [pc, #64]	; (8008588 <xTaskPriorityInherit+0xc8>)
 8008548:	441a      	add	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3304      	adds	r3, #4
 800854e:	4619      	mov	r1, r3
 8008550:	4610      	mov	r0, r2
 8008552:	f7fd ffe2 	bl	800651a <vListInsertEnd>
 8008556:	e004      	b.n	8008562 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <xTaskPriorityInherit+0xc4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e008      	b.n	800857a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <xTaskPriorityInherit+0xc4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d201      	bcs.n	800857a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008576:	2301      	movs	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800857a:	68fb      	ldr	r3, [r7, #12]
	}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000cf8 	.word	0x20000cf8
 8008588:	20000cfc 	.word	0x20000cfc
 800858c:	200011d4 	.word	0x200011d4

08008590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d056      	beq.n	8008654 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085a6:	4b2e      	ldr	r3, [pc, #184]	; (8008660 <xTaskPriorityDisinherit+0xd0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d00a      	beq.n	80085c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60fb      	str	r3, [r7, #12]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60bb      	str	r3, [r7, #8]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e8:	1e5a      	subs	r2, r3, #1
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d02c      	beq.n	8008654 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d128      	bne.n	8008654 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7fd ffe4 	bl	80065d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <xTaskPriorityDisinherit+0xd4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d903      	bls.n	8008634 <xTaskPriorityDisinherit+0xa4>
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <xTaskPriorityDisinherit+0xd4>)
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4a09      	ldr	r2, [pc, #36]	; (8008668 <xTaskPriorityDisinherit+0xd8>)
 8008642:	441a      	add	r2, r3
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fd ff65 	bl	800651a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008654:	697b      	ldr	r3, [r7, #20]
	}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000cf8 	.word	0x20000cf8
 8008664:	200011d4 	.word	0x200011d4
 8008668:	20000cfc 	.word	0x20000cfc

0800866c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800867a:	2301      	movs	r3, #1
 800867c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d06a      	beq.n	800875a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60fb      	str	r3, [r7, #12]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d902      	bls.n	80086b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	61fb      	str	r3, [r7, #28]
 80086b0:	e002      	b.n	80086b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d04b      	beq.n	800875a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d146      	bne.n	800875a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086cc:	4b25      	ldr	r3, [pc, #148]	; (8008764 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d10a      	bne.n	80086ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	db04      	blt.n	800870a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	6959      	ldr	r1, [r3, #20]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800871a:	4413      	add	r3, r2
 800871c:	4299      	cmp	r1, r3
 800871e:	d11c      	bne.n	800875a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	3304      	adds	r3, #4
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd ff55 	bl	80065d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d903      	bls.n	800873e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	4a0c      	ldr	r2, [pc, #48]	; (800876c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800874c:	441a      	add	r2, r3
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	3304      	adds	r3, #4
 8008752:	4619      	mov	r1, r3
 8008754:	4610      	mov	r0, r2
 8008756:	f7fd fee0 	bl	800651a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800875a:	bf00      	nop
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000cf8 	.word	0x20000cf8
 8008768:	20000cfc 	.word	0x20000cfc
 800876c:	200011d4 	.word	0x200011d4

08008770 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008774:	4b07      	ldr	r3, [pc, #28]	; (8008794 <pvTaskIncrementMutexHeldCount+0x24>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <pvTaskIncrementMutexHeldCount+0x24>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008782:	3201      	adds	r2, #1
 8008784:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008786:	4b03      	ldr	r3, [pc, #12]	; (8008794 <pvTaskIncrementMutexHeldCount+0x24>)
 8008788:	681b      	ldr	r3, [r3, #0]
	}
 800878a:	4618      	mov	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	20000cf8 	.word	0x20000cf8

08008798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087a2:	4b21      	ldr	r3, [pc, #132]	; (8008828 <prvAddCurrentTaskToDelayedList+0x90>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087a8:	4b20      	ldr	r3, [pc, #128]	; (800882c <prvAddCurrentTaskToDelayedList+0x94>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fd ff10 	bl	80065d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ba:	d10a      	bne.n	80087d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c2:	4b1a      	ldr	r3, [pc, #104]	; (800882c <prvAddCurrentTaskToDelayedList+0x94>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4819      	ldr	r0, [pc, #100]	; (8008830 <prvAddCurrentTaskToDelayedList+0x98>)
 80087cc:	f7fd fea5 	bl	800651a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087d0:	e026      	b.n	8008820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4413      	add	r3, r2
 80087d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087da:	4b14      	ldr	r3, [pc, #80]	; (800882c <prvAddCurrentTaskToDelayedList+0x94>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d209      	bcs.n	80087fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087ea:	4b12      	ldr	r3, [pc, #72]	; (8008834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <prvAddCurrentTaskToDelayedList+0x94>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fd feb3 	bl	8006562 <vListInsert>
}
 80087fc:	e010      	b.n	8008820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <prvAddCurrentTaskToDelayedList+0x94>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f7fd fea9 	bl	8006562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	d202      	bcs.n	8008820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800881a:	4a08      	ldr	r2, [pc, #32]	; (800883c <prvAddCurrentTaskToDelayedList+0xa4>)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6013      	str	r3, [r2, #0]
}
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	200011d0 	.word	0x200011d0
 800882c:	20000cf8 	.word	0x20000cf8
 8008830:	200011b8 	.word	0x200011b8
 8008834:	20001188 	.word	0x20001188
 8008838:	20001184 	.word	0x20001184
 800883c:	200011ec 	.word	0x200011ec

08008840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800884a:	f000 fb07 	bl	8008e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800884e:	4b1c      	ldr	r3, [pc, #112]	; (80088c0 <xTimerCreateTimerTask+0x80>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d021      	beq.n	800889a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800885e:	1d3a      	adds	r2, r7, #4
 8008860:	f107 0108 	add.w	r1, r7, #8
 8008864:	f107 030c 	add.w	r3, r7, #12
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd fe0f 	bl	800648c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	9202      	str	r2, [sp, #8]
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	2302      	movs	r3, #2
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2300      	movs	r3, #0
 800887e:	460a      	mov	r2, r1
 8008880:	4910      	ldr	r1, [pc, #64]	; (80088c4 <xTimerCreateTimerTask+0x84>)
 8008882:	4811      	ldr	r0, [pc, #68]	; (80088c8 <xTimerCreateTimerTask+0x88>)
 8008884:	f7fe ff94 	bl	80077b0 <xTaskCreateStatic>
 8008888:	4603      	mov	r3, r0
 800888a:	4a10      	ldr	r2, [pc, #64]	; (80088cc <xTimerCreateTimerTask+0x8c>)
 800888c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <xTimerCreateTimerTask+0x8c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008896:	2301      	movs	r3, #1
 8008898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088b6:	697b      	ldr	r3, [r7, #20]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20001228 	.word	0x20001228
 80088c4:	08018750 	.word	0x08018750
 80088c8:	08008a05 	.word	0x08008a05
 80088cc:	2000122c 	.word	0x2000122c

080088d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	; 0x28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088de:	2300      	movs	r3, #0
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	623b      	str	r3, [r7, #32]
}
 80088fa:	bf00      	nop
 80088fc:	e7fe      	b.n	80088fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088fe:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <xTimerGenericCommand+0x98>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d02a      	beq.n	800895c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b05      	cmp	r3, #5
 8008916:	dc18      	bgt.n	800894a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008918:	f7ff fdb4 	bl	8008484 <xTaskGetSchedulerState>
 800891c:	4603      	mov	r3, r0
 800891e:	2b02      	cmp	r3, #2
 8008920:	d109      	bne.n	8008936 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <xTimerGenericCommand+0x98>)
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f107 0110 	add.w	r1, r7, #16
 800892a:	2300      	movs	r3, #0
 800892c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892e:	f7fe f8d9 	bl	8006ae4 <xQueueGenericSend>
 8008932:	6278      	str	r0, [r7, #36]	; 0x24
 8008934:	e012      	b.n	800895c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <xTimerGenericCommand+0x98>)
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f107 0110 	add.w	r1, r7, #16
 800893e:	2300      	movs	r3, #0
 8008940:	2200      	movs	r2, #0
 8008942:	f7fe f8cf 	bl	8006ae4 <xQueueGenericSend>
 8008946:	6278      	str	r0, [r7, #36]	; 0x24
 8008948:	e008      	b.n	800895c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <xTimerGenericCommand+0x98>)
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f107 0110 	add.w	r1, r7, #16
 8008952:	2300      	movs	r3, #0
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	f7fe f9c3 	bl	8006ce0 <xQueueGenericSendFromISR>
 800895a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800895e:	4618      	mov	r0, r3
 8008960:	3728      	adds	r7, #40	; 0x28
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20001228 	.word	0x20001228

0800896c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af02      	add	r7, sp, #8
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008976:	4b22      	ldr	r3, [pc, #136]	; (8008a00 <prvProcessExpiredTimer+0x94>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	3304      	adds	r3, #4
 8008984:	4618      	mov	r0, r3
 8008986:	f7fd fe25 	bl	80065d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d022      	beq.n	80089de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	699a      	ldr	r2, [r3, #24]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	18d1      	adds	r1, r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	6978      	ldr	r0, [r7, #20]
 80089a6:	f000 f8d1 	bl	8008b4c <prvInsertTimerInActiveList>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01f      	beq.n	80089f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	2300      	movs	r3, #0
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	2100      	movs	r1, #0
 80089ba:	6978      	ldr	r0, [r7, #20]
 80089bc:	f7ff ff88 	bl	80088d0 <xTimerGenericCommand>
 80089c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d113      	bne.n	80089f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	4798      	blx	r3
}
 80089f8:	bf00      	nop
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20001220 	.word	0x20001220

08008a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 f857 	bl	8008ac4 <prvGetNextExpireTime>
 8008a16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f803 	bl	8008a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a22:	f000 f8d5 	bl	8008bd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a26:	e7f1      	b.n	8008a0c <prvTimerTask+0x8>

08008a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a32:	f7ff f919 	bl	8007c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f866 	bl	8008b0c <prvSampleTimeNow>
 8008a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d130      	bne.n	8008aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <prvProcessTimerOrBlockTask+0x3c>
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d806      	bhi.n	8008a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a56:	f7ff f915 	bl	8007c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ff85 	bl	800896c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a62:	e024      	b.n	8008aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d008      	beq.n	8008a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a6a:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <prvProcessTimerOrBlockTask+0x90>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <prvProcessTimerOrBlockTask+0x50>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <prvProcessTimerOrBlockTask+0x52>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <prvProcessTimerOrBlockTask+0x94>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7fe fe5d 	bl	8007748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a8e:	f7ff f8f9 	bl	8007c84 <xTaskResumeAll>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a98:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <prvProcessTimerOrBlockTask+0x98>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
}
 8008aa8:	e001      	b.n	8008aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008aaa:	f7ff f8eb 	bl	8007c84 <xTaskResumeAll>
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20001224 	.word	0x20001224
 8008abc:	20001228 	.word	0x20001228
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <prvGetNextExpireTime+0x44>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <prvGetNextExpireTime+0x16>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	e000      	b.n	8008adc <prvGetNextExpireTime+0x18>
 8008ada:	2200      	movs	r2, #0
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d105      	bne.n	8008af4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ae8:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <prvGetNextExpireTime+0x44>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	e001      	b.n	8008af8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20001220 	.word	0x20001220

08008b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b14:	f7ff f954 	bl	8007dc0 <xTaskGetTickCount>
 8008b18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <prvSampleTimeNow+0x3c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d205      	bcs.n	8008b30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b24:	f000 f936 	bl	8008d94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e002      	b.n	8008b36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b36:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <prvSampleTimeNow+0x3c>)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20001230 	.word	0x20001230

08008b4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d812      	bhi.n	8008b98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad2      	subs	r2, r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d302      	bcc.n	8008b86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e01b      	b.n	8008bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b86:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <prvInsertTimerInActiveList+0x7c>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f7fd fce6 	bl	8006562 <vListInsert>
 8008b96:	e012      	b.n	8008bbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d206      	bcs.n	8008bae <prvInsertTimerInActiveList+0x62>
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d302      	bcc.n	8008bae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e007      	b.n	8008bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <prvInsertTimerInActiveList+0x80>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f7fd fcd2 	bl	8006562 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bbe:	697b      	ldr	r3, [r7, #20]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	20001224 	.word	0x20001224
 8008bcc:	20001220 	.word	0x20001220

08008bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08e      	sub	sp, #56	; 0x38
 8008bd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bd6:	e0ca      	b.n	8008d6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da18      	bge.n	8008c10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bde:	1d3b      	adds	r3, r7, #4
 8008be0:	3304      	adds	r3, #4
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	61fb      	str	r3, [r7, #28]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c06:	6850      	ldr	r0, [r2, #4]
 8008c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c0a:	6892      	ldr	r2, [r2, #8]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f2c0 80aa 	blt.w	8008d6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	3304      	adds	r3, #4
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fd fcd3 	bl	80065d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c2e:	463b      	mov	r3, r7
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff ff6b 	bl	8008b0c <prvSampleTimeNow>
 8008c36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b09      	cmp	r3, #9
 8008c3c:	f200 8097 	bhi.w	8008d6e <prvProcessReceivedCommands+0x19e>
 8008c40:	a201      	add	r2, pc, #4	; (adr r2, 8008c48 <prvProcessReceivedCommands+0x78>)
 8008c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c46:	bf00      	nop
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008ce5 	.word	0x08008ce5
 8008c58:	08008cf9 	.word	0x08008cf9
 8008c5c:	08008d43 	.word	0x08008d43
 8008c60:	08008c71 	.word	0x08008c71
 8008c64:	08008c71 	.word	0x08008c71
 8008c68:	08008ce5 	.word	0x08008ce5
 8008c6c:	08008cf9 	.word	0x08008cf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	18d1      	adds	r1, r2, r3
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c90:	f7ff ff5c 	bl	8008b4c <prvInsertTimerInActiveList>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d069      	beq.n	8008d6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d05e      	beq.n	8008d6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	441a      	add	r2, r3
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc2:	f7ff fe05 	bl	80088d0 <xTimerGenericCommand>
 8008cc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d14f      	bne.n	8008d6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	61bb      	str	r3, [r7, #24]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cea:	f023 0301 	bic.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008cf6:	e03a      	b.n	8008d6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	617b      	str	r3, [r7, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	18d1      	adds	r1, r2, r3
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d3c:	f7ff ff06 	bl	8008b4c <prvInsertTimerInActiveList>
					break;
 8008d40:	e015      	b.n	8008d6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d52:	f000 fbdd 	bl	8009510 <vPortFree>
 8008d56:	e00a      	b.n	8008d6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d6a:	e000      	b.n	8008d6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d6e:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <prvProcessReceivedCommands+0x1c0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	1d39      	adds	r1, r7, #4
 8008d74:	2200      	movs	r2, #0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe f8da 	bl	8006f30 <xQueueReceive>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f47f af2a 	bne.w	8008bd8 <prvProcessReceivedCommands+0x8>
	}
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop
 8008d88:	3730      	adds	r7, #48	; 0x30
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20001228 	.word	0x20001228

08008d94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d9a:	e048      	b.n	8008e2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d9c:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da6:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fd fc0d 	bl	80065d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d02e      	beq.n	8008e2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d90e      	bls.n	8008e00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dee:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f7fd fbb2 	bl	8006562 <vListInsert>
 8008dfe:	e016      	b.n	8008e2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e00:	2300      	movs	r3, #0
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	2300      	movs	r3, #0
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff fd60 	bl	80088d0 <xTimerGenericCommand>
 8008e10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	603b      	str	r3, [r7, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1b1      	bne.n	8008d9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e38:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <prvSwitchTimerLists+0xc4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a04      	ldr	r2, [pc, #16]	; (8008e54 <prvSwitchTimerLists+0xc0>)
 8008e44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e46:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <prvSwitchTimerLists+0xc4>)
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	6013      	str	r3, [r2, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20001220 	.word	0x20001220
 8008e58:	20001224 	.word	0x20001224

08008e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e62:	f000 f967 	bl	8009134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e66:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <prvCheckForValidListAndQueue+0x60>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d120      	bne.n	8008eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e6e:	4814      	ldr	r0, [pc, #80]	; (8008ec0 <prvCheckForValidListAndQueue+0x64>)
 8008e70:	f7fd fb26 	bl	80064c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e74:	4813      	ldr	r0, [pc, #76]	; (8008ec4 <prvCheckForValidListAndQueue+0x68>)
 8008e76:	f7fd fb23 	bl	80064c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e7a:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <prvCheckForValidListAndQueue+0x6c>)
 8008e7c:	4a10      	ldr	r2, [pc, #64]	; (8008ec0 <prvCheckForValidListAndQueue+0x64>)
 8008e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e80:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <prvCheckForValidListAndQueue+0x70>)
 8008e82:	4a10      	ldr	r2, [pc, #64]	; (8008ec4 <prvCheckForValidListAndQueue+0x68>)
 8008e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e86:	2300      	movs	r3, #0
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <prvCheckForValidListAndQueue+0x74>)
 8008e8c:	4a11      	ldr	r2, [pc, #68]	; (8008ed4 <prvCheckForValidListAndQueue+0x78>)
 8008e8e:	2110      	movs	r1, #16
 8008e90:	200a      	movs	r0, #10
 8008e92:	f7fd fc31 	bl	80066f8 <xQueueGenericCreateStatic>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <prvCheckForValidListAndQueue+0x60>)
 8008e9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <prvCheckForValidListAndQueue+0x60>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <prvCheckForValidListAndQueue+0x60>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	490b      	ldr	r1, [pc, #44]	; (8008ed8 <prvCheckForValidListAndQueue+0x7c>)
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fbf8 	bl	80076a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eb0:	f000 f970 	bl	8009194 <vPortExitCritical>
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20001228 	.word	0x20001228
 8008ec0:	200011f8 	.word	0x200011f8
 8008ec4:	2000120c 	.word	0x2000120c
 8008ec8:	20001220 	.word	0x20001220
 8008ecc:	20001224 	.word	0x20001224
 8008ed0:	200012d4 	.word	0x200012d4
 8008ed4:	20001234 	.word	0x20001234
 8008ed8:	08018758 	.word	0x08018758

08008edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3b04      	subs	r3, #4
 8008eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3b04      	subs	r3, #4
 8008efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f023 0201 	bic.w	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f0c:	4a0c      	ldr	r2, [pc, #48]	; (8008f40 <pxPortInitialiseStack+0x64>)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3b14      	subs	r3, #20
 8008f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3b04      	subs	r3, #4
 8008f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f06f 0202 	mvn.w	r2, #2
 8008f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3b20      	subs	r3, #32
 8008f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	08008f45 	.word	0x08008f45

08008f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f4e:	4b12      	ldr	r3, [pc, #72]	; (8008f98 <prvTaskExitError+0x54>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f56:	d00a      	beq.n	8008f6e <prvTaskExitError+0x2a>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <prvTaskExitError+0x28>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60bb      	str	r3, [r7, #8]
}
 8008f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f82:	bf00      	nop
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0fc      	beq.n	8008f84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	200004a4 	.word	0x200004a4
 8008f9c:	00000000 	.word	0x00000000

08008fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <pxCurrentTCBConst2>)
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	6808      	ldr	r0, [r1, #0]
 8008fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	f380 8809 	msr	PSP, r0
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	4770      	bx	lr
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst2>:
 8008fc0:	20000cf8 	.word	0x20000cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fc8:	4808      	ldr	r0, [pc, #32]	; (8008fec <prvPortStartFirstTask+0x24>)
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f380 8808 	msr	MSP, r0
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8814 	msr	CONTROL, r0
 8008fda:	b662      	cpsie	i
 8008fdc:	b661      	cpsie	f
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	df00      	svc	0
 8008fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fea:	bf00      	nop
 8008fec:	e000ed08 	.word	0xe000ed08

08008ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ff6:	4b46      	ldr	r3, [pc, #280]	; (8009110 <xPortStartScheduler+0x120>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a46      	ldr	r2, [pc, #280]	; (8009114 <xPortStartScheduler+0x124>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10a      	bne.n	8009016 <xPortStartScheduler+0x26>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009016:	4b3e      	ldr	r3, [pc, #248]	; (8009110 <xPortStartScheduler+0x120>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a3f      	ldr	r2, [pc, #252]	; (8009118 <xPortStartScheduler+0x128>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d10a      	bne.n	8009036 <xPortStartScheduler+0x46>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009036:	4b39      	ldr	r3, [pc, #228]	; (800911c <xPortStartScheduler+0x12c>)
 8009038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	22ff      	movs	r2, #255	; 0xff
 8009046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009058:	b2da      	uxtb	r2, r3
 800905a:	4b31      	ldr	r3, [pc, #196]	; (8009120 <xPortStartScheduler+0x130>)
 800905c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800905e:	4b31      	ldr	r3, [pc, #196]	; (8009124 <xPortStartScheduler+0x134>)
 8009060:	2207      	movs	r2, #7
 8009062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009064:	e009      	b.n	800907a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009066:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <xPortStartScheduler+0x134>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3b01      	subs	r3, #1
 800906c:	4a2d      	ldr	r2, [pc, #180]	; (8009124 <xPortStartScheduler+0x134>)
 800906e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009082:	2b80      	cmp	r3, #128	; 0x80
 8009084:	d0ef      	beq.n	8009066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009086:	4b27      	ldr	r3, [pc, #156]	; (8009124 <xPortStartScheduler+0x134>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f1c3 0307 	rsb	r3, r3, #7
 800908e:	2b04      	cmp	r3, #4
 8009090:	d00a      	beq.n	80090a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60bb      	str	r3, [r7, #8]
}
 80090a4:	bf00      	nop
 80090a6:	e7fe      	b.n	80090a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090a8:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <xPortStartScheduler+0x134>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	4a1d      	ldr	r2, [pc, #116]	; (8009124 <xPortStartScheduler+0x134>)
 80090b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090b2:	4b1c      	ldr	r3, [pc, #112]	; (8009124 <xPortStartScheduler+0x134>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090ba:	4a1a      	ldr	r2, [pc, #104]	; (8009124 <xPortStartScheduler+0x134>)
 80090bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090c6:	4b18      	ldr	r3, [pc, #96]	; (8009128 <xPortStartScheduler+0x138>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a17      	ldr	r2, [pc, #92]	; (8009128 <xPortStartScheduler+0x138>)
 80090cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090d2:	4b15      	ldr	r3, [pc, #84]	; (8009128 <xPortStartScheduler+0x138>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a14      	ldr	r2, [pc, #80]	; (8009128 <xPortStartScheduler+0x138>)
 80090d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090de:	f000 f8dd 	bl	800929c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090e2:	4b12      	ldr	r3, [pc, #72]	; (800912c <xPortStartScheduler+0x13c>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090e8:	f000 f8fc 	bl	80092e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090ec:	4b10      	ldr	r3, [pc, #64]	; (8009130 <xPortStartScheduler+0x140>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0f      	ldr	r2, [pc, #60]	; (8009130 <xPortStartScheduler+0x140>)
 80090f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090f8:	f7ff ff66 	bl	8008fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090fc:	f7fe ff3c 	bl	8007f78 <vTaskSwitchContext>
	prvTaskExitError();
 8009100:	f7ff ff20 	bl	8008f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	e000ed00 	.word	0xe000ed00
 8009114:	410fc271 	.word	0x410fc271
 8009118:	410fc270 	.word	0x410fc270
 800911c:	e000e400 	.word	0xe000e400
 8009120:	20001324 	.word	0x20001324
 8009124:	20001328 	.word	0x20001328
 8009128:	e000ed20 	.word	0xe000ed20
 800912c:	200004a4 	.word	0x200004a4
 8009130:	e000ef34 	.word	0xe000ef34

08009134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	607b      	str	r3, [r7, #4]
}
 800914c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800914e:	4b0f      	ldr	r3, [pc, #60]	; (800918c <vPortEnterCritical+0x58>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <vPortEnterCritical+0x58>)
 8009156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <vPortEnterCritical+0x58>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d10f      	bne.n	8009180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortEnterCritical+0x5c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <vPortEnterCritical+0x4c>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	603b      	str	r3, [r7, #0]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <vPortEnterCritical+0x4a>
	}
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	200004a4 	.word	0x200004a4
 8009190:	e000ed04 	.word	0xe000ed04

08009194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <vPortExitCritical+0x50>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <vPortExitCritical+0x24>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	607b      	str	r3, [r7, #4]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <vPortExitCritical+0x50>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <vPortExitCritical+0x50>)
 80091c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091c2:	4b08      	ldr	r3, [pc, #32]	; (80091e4 <vPortExitCritical+0x50>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <vPortExitCritical+0x42>
 80091ca:	2300      	movs	r3, #0
 80091cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	f383 8811 	msr	BASEPRI, r3
}
 80091d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	200004a4 	.word	0x200004a4
	...

080091f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091f0:	f3ef 8009 	mrs	r0, PSP
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4b15      	ldr	r3, [pc, #84]	; (8009250 <pxCurrentTCBConst>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	f01e 0f10 	tst.w	lr, #16
 8009200:	bf08      	it	eq
 8009202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	6010      	str	r0, [r2, #0]
 800920c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009214:	f380 8811 	msr	BASEPRI, r0
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f7fe feaa 	bl	8007f78 <vTaskSwitchContext>
 8009224:	f04f 0000 	mov.w	r0, #0
 8009228:	f380 8811 	msr	BASEPRI, r0
 800922c:	bc09      	pop	{r0, r3}
 800922e:	6819      	ldr	r1, [r3, #0]
 8009230:	6808      	ldr	r0, [r1, #0]
 8009232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009236:	f01e 0f10 	tst.w	lr, #16
 800923a:	bf08      	it	eq
 800923c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009240:	f380 8809 	msr	PSP, r0
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst>:
 8009250:	20000cf8 	.word	0x20000cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	607b      	str	r3, [r7, #4]
}
 8009270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009272:	f7fe fdc7 	bl	8007e04 <xTaskIncrementTick>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <xPortSysTickHandler+0x40>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f383 8811 	msr	BASEPRI, r3
}
 800928e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <vPortSetupTimerInterrupt+0x38>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <vPortSetupTimerInterrupt+0x3c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <vPortSetupTimerInterrupt+0x40>)
 80092b2:	fba2 2303 	umull	r2, r3, r2, r3
 80092b6:	099b      	lsrs	r3, r3, #6
 80092b8:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <vPortSetupTimerInterrupt+0x44>)
 80092ba:	3b01      	subs	r3, #1
 80092bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <vPortSetupTimerInterrupt+0x34>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	bf00      	nop
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	e000e010 	.word	0xe000e010
 80092d4:	e000e018 	.word	0xe000e018
 80092d8:	20000498 	.word	0x20000498
 80092dc:	10624dd3 	.word	0x10624dd3
 80092e0:	e000e014 	.word	0xe000e014

080092e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092f4 <vPortEnableVFP+0x10>
 80092e8:	6801      	ldr	r1, [r0, #0]
 80092ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ee:	6001      	str	r1, [r0, #0]
 80092f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e000ed88 	.word	0xe000ed88

080092f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092fe:	f3ef 8305 	mrs	r3, IPSR
 8009302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b0f      	cmp	r3, #15
 8009308:	d914      	bls.n	8009334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <vPortValidateInterruptPriority+0x70>)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009314:	4b15      	ldr	r3, [pc, #84]	; (800936c <vPortValidateInterruptPriority+0x74>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	7afa      	ldrb	r2, [r7, #11]
 800931a:	429a      	cmp	r2, r3
 800931c:	d20a      	bcs.n	8009334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <vPortValidateInterruptPriority+0x78>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <vPortValidateInterruptPriority+0x7c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d90a      	bls.n	800935a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	603b      	str	r3, [r7, #0]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <vPortValidateInterruptPriority+0x60>
	}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	e000e3f0 	.word	0xe000e3f0
 800936c:	20001324 	.word	0x20001324
 8009370:	e000ed0c 	.word	0xe000ed0c
 8009374:	20001328 	.word	0x20001328

08009378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009384:	f7fe fc70 	bl	8007c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009388:	4b5b      	ldr	r3, [pc, #364]	; (80094f8 <pvPortMalloc+0x180>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009390:	f000 f920 	bl	80095d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009394:	4b59      	ldr	r3, [pc, #356]	; (80094fc <pvPortMalloc+0x184>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 8093 	bne.w	80094c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01d      	beq.n	80093e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80093a8:	2208      	movs	r2, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d014      	beq.n	80093e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f023 0307 	bic.w	r3, r3, #7
 80093c0:	3308      	adds	r3, #8
 80093c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <pvPortMalloc+0x6c>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	617b      	str	r3, [r7, #20]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d06e      	beq.n	80094c8 <pvPortMalloc+0x150>
 80093ea:	4b45      	ldr	r3, [pc, #276]	; (8009500 <pvPortMalloc+0x188>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d869      	bhi.n	80094c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093f4:	4b43      	ldr	r3, [pc, #268]	; (8009504 <pvPortMalloc+0x18c>)
 80093f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093f8:	4b42      	ldr	r3, [pc, #264]	; (8009504 <pvPortMalloc+0x18c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093fe:	e004      	b.n	800940a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d903      	bls.n	800941c <pvPortMalloc+0xa4>
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f1      	bne.n	8009400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800941c:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <pvPortMalloc+0x180>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009422:	429a      	cmp	r2, r3
 8009424:	d050      	beq.n	80094c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2208      	movs	r2, #8
 800942c:	4413      	add	r3, r2
 800942e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	2308      	movs	r3, #8
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	429a      	cmp	r2, r3
 8009446:	d91f      	bls.n	8009488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <pvPortMalloc+0xf8>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	613b      	str	r3, [r7, #16]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009482:	69b8      	ldr	r0, [r7, #24]
 8009484:	f000 f908 	bl	8009698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <pvPortMalloc+0x188>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	4a1b      	ldr	r2, [pc, #108]	; (8009500 <pvPortMalloc+0x188>)
 8009494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009496:	4b1a      	ldr	r3, [pc, #104]	; (8009500 <pvPortMalloc+0x188>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <pvPortMalloc+0x190>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d203      	bcs.n	80094aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094a2:	4b17      	ldr	r3, [pc, #92]	; (8009500 <pvPortMalloc+0x188>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a18      	ldr	r2, [pc, #96]	; (8009508 <pvPortMalloc+0x190>)
 80094a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <pvPortMalloc+0x184>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <pvPortMalloc+0x194>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3301      	adds	r3, #1
 80094c4:	4a11      	ldr	r2, [pc, #68]	; (800950c <pvPortMalloc+0x194>)
 80094c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094c8:	f7fe fbdc 	bl	8007c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <pvPortMalloc+0x174>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60fb      	str	r3, [r7, #12]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <pvPortMalloc+0x172>
	return pvReturn;
 80094ec:	69fb      	ldr	r3, [r7, #28]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3728      	adds	r7, #40	; 0x28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20004f34 	.word	0x20004f34
 80094fc:	20004f48 	.word	0x20004f48
 8009500:	20004f38 	.word	0x20004f38
 8009504:	20004f2c 	.word	0x20004f2c
 8009508:	20004f3c 	.word	0x20004f3c
 800950c:	20004f40 	.word	0x20004f40

08009510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d04d      	beq.n	80095be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009522:	2308      	movs	r3, #8
 8009524:	425b      	negs	r3, r3
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	4b24      	ldr	r3, [pc, #144]	; (80095c8 <vPortFree+0xb8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <vPortFree+0x44>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	60fb      	str	r3, [r7, #12]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <vPortFree+0x62>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60bb      	str	r3, [r7, #8]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <vPortFree+0xb8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01e      	beq.n	80095be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11a      	bne.n	80095be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	4b0e      	ldr	r3, [pc, #56]	; (80095c8 <vPortFree+0xb8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	43db      	mvns	r3, r3
 8009592:	401a      	ands	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009598:	f7fe fb66 	bl	8007c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <vPortFree+0xbc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	4a09      	ldr	r2, [pc, #36]	; (80095cc <vPortFree+0xbc>)
 80095a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095aa:	6938      	ldr	r0, [r7, #16]
 80095ac:	f000 f874 	bl	8009698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <vPortFree+0xc0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	4a06      	ldr	r2, [pc, #24]	; (80095d0 <vPortFree+0xc0>)
 80095b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80095ba:	f7fe fb63 	bl	8007c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80095be:	bf00      	nop
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20004f48 	.word	0x20004f48
 80095cc:	20004f38 	.word	0x20004f38
 80095d0:	20004f44 	.word	0x20004f44

080095d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095e0:	4b27      	ldr	r3, [pc, #156]	; (8009680 <prvHeapInit+0xac>)
 80095e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00c      	beq.n	8009608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3307      	adds	r3, #7
 80095f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0307 	bic.w	r3, r3, #7
 80095fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <prvHeapInit+0xac>)
 8009604:	4413      	add	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800960c:	4a1d      	ldr	r2, [pc, #116]	; (8009684 <prvHeapInit+0xb0>)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <prvHeapInit+0xb0>)
 8009614:	2200      	movs	r2, #0
 8009616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009620:	2208      	movs	r2, #8
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a15      	ldr	r2, [pc, #84]	; (8009688 <prvHeapInit+0xb4>)
 8009634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <prvHeapInit+0xb4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800963e:	4b12      	ldr	r3, [pc, #72]	; (8009688 <prvHeapInit+0xb4>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvHeapInit+0xb4>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4a0a      	ldr	r2, [pc, #40]	; (800968c <prvHeapInit+0xb8>)
 8009662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4a09      	ldr	r2, [pc, #36]	; (8009690 <prvHeapInit+0xbc>)
 800966a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800966c:	4b09      	ldr	r3, [pc, #36]	; (8009694 <prvHeapInit+0xc0>)
 800966e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009672:	601a      	str	r2, [r3, #0]
}
 8009674:	bf00      	nop
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	2000132c 	.word	0x2000132c
 8009684:	20004f2c 	.word	0x20004f2c
 8009688:	20004f34 	.word	0x20004f34
 800968c:	20004f3c 	.word	0x20004f3c
 8009690:	20004f38 	.word	0x20004f38
 8009694:	20004f48 	.word	0x20004f48

08009698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096a0:	4b28      	ldr	r3, [pc, #160]	; (8009744 <prvInsertBlockIntoFreeList+0xac>)
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e002      	b.n	80096ac <prvInsertBlockIntoFreeList+0x14>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d8f7      	bhi.n	80096a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4413      	add	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d108      	bne.n	80096da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	441a      	add	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	441a      	add	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d118      	bne.n	8009720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <prvInsertBlockIntoFreeList+0xb0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d00d      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	441a      	add	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	e008      	b.n	8009728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <prvInsertBlockIntoFreeList+0xb0>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e003      	b.n	8009728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	d002      	beq.n	8009736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20004f2c 	.word	0x20004f2c
 8009748:	20004f34 	.word	0x20004f34

0800974c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009756:	f00a fa1b 	bl	8013b90 <sys_timeouts_sleeptime>
 800975a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009762:	d10b      	bne.n	800977c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009764:	4813      	ldr	r0, [pc, #76]	; (80097b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009766:	f00c ff6c 	bl	8016642 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800976a:	2200      	movs	r2, #0
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f00c fef4 	bl	801655c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009774:	480f      	ldr	r0, [pc, #60]	; (80097b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009776:	f00c ff55 	bl	8016624 <sys_mutex_lock>
    return;
 800977a:	e018      	b.n	80097ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009782:	f00a f9cb 	bl	8013b1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009786:	e7e6      	b.n	8009756 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009788:	480a      	ldr	r0, [pc, #40]	; (80097b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800978a:	f00c ff5a 	bl	8016642 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f00c fee2 	bl	801655c <sys_arch_mbox_fetch>
 8009798:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800979a:	4806      	ldr	r0, [pc, #24]	; (80097b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800979c:	f00c ff42 	bl	8016624 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097a6:	d102      	bne.n	80097ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80097a8:	f00a f9b8 	bl	8013b1c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80097ac:	e7d3      	b.n	8009756 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	2000fedc 	.word	0x2000fedc

080097b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80097c0:	4810      	ldr	r0, [pc, #64]	; (8009804 <tcpip_thread+0x4c>)
 80097c2:	f00c ff2f 	bl	8016624 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <tcpip_thread+0x50>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <tcpip_thread+0x50>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a0e      	ldr	r2, [pc, #56]	; (800980c <tcpip_thread+0x54>)
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	4610      	mov	r0, r2
 80097d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80097da:	f107 030c 	add.w	r3, r7, #12
 80097de:	4619      	mov	r1, r3
 80097e0:	480b      	ldr	r0, [pc, #44]	; (8009810 <tcpip_thread+0x58>)
 80097e2:	f7ff ffb3 	bl	800974c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80097ec:	4b09      	ldr	r3, [pc, #36]	; (8009814 <tcpip_thread+0x5c>)
 80097ee:	2291      	movs	r2, #145	; 0x91
 80097f0:	4909      	ldr	r1, [pc, #36]	; (8009818 <tcpip_thread+0x60>)
 80097f2:	480a      	ldr	r0, [pc, #40]	; (800981c <tcpip_thread+0x64>)
 80097f4:	f00d f92a 	bl	8016a4c <iprintf>
      continue;
 80097f8:	e003      	b.n	8009802 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f80f 	bl	8009820 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009802:	e7ea      	b.n	80097da <tcpip_thread+0x22>
 8009804:	2000fedc 	.word	0x2000fedc
 8009808:	20004f4c 	.word	0x20004f4c
 800980c:	20004f50 	.word	0x20004f50
 8009810:	20004f54 	.word	0x20004f54
 8009814:	08018760 	.word	0x08018760
 8009818:	08018790 	.word	0x08018790
 800981c:	080187b0 	.word	0x080187b0

08009820 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b02      	cmp	r3, #2
 800982e:	d026      	beq.n	800987e <tcpip_thread_handle_msg+0x5e>
 8009830:	2b02      	cmp	r3, #2
 8009832:	dc2b      	bgt.n	800988c <tcpip_thread_handle_msg+0x6c>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <tcpip_thread_handle_msg+0x1e>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d015      	beq.n	8009868 <tcpip_thread_handle_msg+0x48>
 800983c:	e026      	b.n	800988c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6850      	ldr	r0, [r2, #4]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6892      	ldr	r2, [r2, #8]
 800984a:	4611      	mov	r1, r2
 800984c:	4798      	blx	r3
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4618      	mov	r0, r3
 800985a:	f003 fd67 	bl	800d32c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	2009      	movs	r0, #9
 8009862:	f002 febf 	bl	800c5e4 <memp_free>
      break;
 8009866:	e018      	b.n	800989a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6892      	ldr	r2, [r2, #8]
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	2008      	movs	r0, #8
 8009878:	f002 feb4 	bl	800c5e4 <memp_free>
      break;
 800987c:	e00d      	b.n	800989a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6892      	ldr	r2, [r2, #8]
 8009886:	4610      	mov	r0, r2
 8009888:	4798      	blx	r3
      break;
 800988a:	e006      	b.n	800989a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <tcpip_thread_handle_msg+0x84>)
 800988e:	22cf      	movs	r2, #207	; 0xcf
 8009890:	4905      	ldr	r1, [pc, #20]	; (80098a8 <tcpip_thread_handle_msg+0x88>)
 8009892:	4806      	ldr	r0, [pc, #24]	; (80098ac <tcpip_thread_handle_msg+0x8c>)
 8009894:	f00d f8da 	bl	8016a4c <iprintf>
      break;
 8009898:	bf00      	nop
  }
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	08018760 	.word	0x08018760
 80098a8:	08018790 	.word	0x08018790
 80098ac:	080187b0 	.word	0x080187b0

080098b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80098bc:	481a      	ldr	r0, [pc, #104]	; (8009928 <tcpip_inpkt+0x78>)
 80098be:	f00c fe7e 	bl	80165be <sys_mbox_valid>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d105      	bne.n	80098d4 <tcpip_inpkt+0x24>
 80098c8:	4b18      	ldr	r3, [pc, #96]	; (800992c <tcpip_inpkt+0x7c>)
 80098ca:	22fc      	movs	r2, #252	; 0xfc
 80098cc:	4918      	ldr	r1, [pc, #96]	; (8009930 <tcpip_inpkt+0x80>)
 80098ce:	4819      	ldr	r0, [pc, #100]	; (8009934 <tcpip_inpkt+0x84>)
 80098d0:	f00d f8bc 	bl	8016a4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80098d4:	2009      	movs	r0, #9
 80098d6:	f002 fe33 	bl	800c540 <memp_malloc>
 80098da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d102      	bne.n	80098e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098e6:	e01a      	b.n	800991e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009900:	6979      	ldr	r1, [r7, #20]
 8009902:	4809      	ldr	r0, [pc, #36]	; (8009928 <tcpip_inpkt+0x78>)
 8009904:	f00c fe10 	bl	8016528 <sys_mbox_trypost>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d006      	beq.n	800991c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800990e:	6979      	ldr	r1, [r7, #20]
 8009910:	2009      	movs	r0, #9
 8009912:	f002 fe67 	bl	800c5e4 <memp_free>
    return ERR_MEM;
 8009916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800991a:	e000      	b.n	800991e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800991c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20004f54 	.word	0x20004f54
 800992c:	08018760 	.word	0x08018760
 8009930:	080187d8 	.word	0x080187d8
 8009934:	080187b0 	.word	0x080187b0

08009938 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009948:	f003 0318 	and.w	r3, r3, #24
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009950:	4a08      	ldr	r2, [pc, #32]	; (8009974 <tcpip_input+0x3c>)
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff ffab 	bl	80098b0 <tcpip_inpkt>
 800995a:	4603      	mov	r3, r0
 800995c:	e005      	b.n	800996a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800995e:	4a06      	ldr	r2, [pc, #24]	; (8009978 <tcpip_input+0x40>)
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ffa4 	bl	80098b0 <tcpip_inpkt>
 8009968:	4603      	mov	r3, r0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	08016349 	.word	0x08016349
 8009978:	0801525d 	.word	0x0801525d

0800997c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009986:	4819      	ldr	r0, [pc, #100]	; (80099ec <tcpip_try_callback+0x70>)
 8009988:	f00c fe19 	bl	80165be <sys_mbox_valid>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <tcpip_try_callback+0x24>
 8009992:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <tcpip_try_callback+0x74>)
 8009994:	f240 125d 	movw	r2, #349	; 0x15d
 8009998:	4916      	ldr	r1, [pc, #88]	; (80099f4 <tcpip_try_callback+0x78>)
 800999a:	4817      	ldr	r0, [pc, #92]	; (80099f8 <tcpip_try_callback+0x7c>)
 800999c:	f00d f856 	bl	8016a4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80099a0:	2008      	movs	r0, #8
 80099a2:	f002 fdcd 	bl	800c540 <memp_malloc>
 80099a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b2:	e017      	b.n	80099e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2201      	movs	r2, #1
 80099b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <tcpip_try_callback+0x70>)
 80099ca:	f00c fdad 	bl	8016528 <sys_mbox_trypost>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d006      	beq.n	80099e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	2008      	movs	r0, #8
 80099d8:	f002 fe04 	bl	800c5e4 <memp_free>
    return ERR_MEM;
 80099dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099e0:	e000      	b.n	80099e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20004f54 	.word	0x20004f54
 80099f0:	08018760 	.word	0x08018760
 80099f4:	080187d8 	.word	0x080187d8
 80099f8:	080187b0 	.word	0x080187b0

080099fc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af02      	add	r7, sp, #8
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009a06:	f002 f913 	bl	800bc30 <lwip_init>

  tcpip_init_done = initfunc;
 8009a0a:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <tcpip_init+0x6c>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009a10:	4a16      	ldr	r2, [pc, #88]	; (8009a6c <tcpip_init+0x70>)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009a16:	2106      	movs	r1, #6
 8009a18:	4815      	ldr	r0, [pc, #84]	; (8009a70 <tcpip_init+0x74>)
 8009a1a:	f00c fd6b 	bl	80164f4 <sys_mbox_new>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009a24:	4b13      	ldr	r3, [pc, #76]	; (8009a74 <tcpip_init+0x78>)
 8009a26:	f240 2261 	movw	r2, #609	; 0x261
 8009a2a:	4913      	ldr	r1, [pc, #76]	; (8009a78 <tcpip_init+0x7c>)
 8009a2c:	4813      	ldr	r0, [pc, #76]	; (8009a7c <tcpip_init+0x80>)
 8009a2e:	f00d f80d 	bl	8016a4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009a32:	4813      	ldr	r0, [pc, #76]	; (8009a80 <tcpip_init+0x84>)
 8009a34:	f00c fde0 	bl	80165f8 <sys_mutex_new>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <tcpip_init+0x78>)
 8009a40:	f240 2265 	movw	r2, #613	; 0x265
 8009a44:	490f      	ldr	r1, [pc, #60]	; (8009a84 <tcpip_init+0x88>)
 8009a46:	480d      	ldr	r0, [pc, #52]	; (8009a7c <tcpip_init+0x80>)
 8009a48:	f00d f800 	bl	8016a4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009a4c:	2318      	movs	r3, #24
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009a54:	2200      	movs	r2, #0
 8009a56:	490c      	ldr	r1, [pc, #48]	; (8009a88 <tcpip_init+0x8c>)
 8009a58:	480c      	ldr	r0, [pc, #48]	; (8009a8c <tcpip_init+0x90>)
 8009a5a:	f00c fdff 	bl	801665c <sys_thread_new>
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20004f4c 	.word	0x20004f4c
 8009a6c:	20004f50 	.word	0x20004f50
 8009a70:	20004f54 	.word	0x20004f54
 8009a74:	08018760 	.word	0x08018760
 8009a78:	080187e8 	.word	0x080187e8
 8009a7c:	080187b0 	.word	0x080187b0
 8009a80:	2000fedc 	.word	0x2000fedc
 8009a84:	0801880c 	.word	0x0801880c
 8009a88:	080097b9 	.word	0x080097b9
 8009a8c:	08018830 	.word	0x08018830

08009a90 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <fs_open+0x16>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <fs_open+0x1c>
    return ERR_ARG;
 8009aa6:	f06f 030f 	mvn.w	r3, #15
 8009aaa:	e028      	b.n	8009afe <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009aac:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <fs_open+0x78>)
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e020      	b.n	8009af4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6838      	ldr	r0, [r7, #0]
 8009aba:	f7f6 fb89 	bl	80001d0 <strcmp>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d114      	bne.n	8009aee <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	7c1a      	ldrb	r2, [r3, #16]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e007      	b.n	8009afe <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1db      	bne.n	8009ab2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009afa:	f06f 0305 	mvn.w	r3, #5
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	080227fc 	.word	0x080227fc

08009b0c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	1ad3      	subs	r3, r2, r3
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8009b44:	f44f 7090 	mov.w	r0, #288	; 0x120
 8009b48:	f002 fb78 	bl	800c23c <mem_malloc>
 8009b4c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8009b54:	f44f 7290 	mov.w	r2, #288	; 0x120
 8009b58:	2100      	movs	r1, #0
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f00c ff13 	bl	8016986 <memset>
  }
  return ret;
 8009b60:	687b      	ldr	r3, [r7, #4]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f002 f9c5 	bl	800bf08 <mem_free>
  }
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009b8e:	22d8      	movs	r2, #216	; 0xd8
 8009b90:	2100      	movs	r1, #0
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f00c fef7 	bl	8016986 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2205      	movs	r2, #5
 8009b9c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009bae:	20d8      	movs	r0, #216	; 0xd8
 8009bb0:	f002 fb44 	bl	800c23c <mem_malloc>
 8009bb4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ffe2 	bl	8009b86 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009bc2:	687b      	ldr	r3, [r7, #4]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff ff93 	bl	8009b0c <fs_close>
    hs->handle = NULL;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffb6 	bl	8009b6a <http_ssi_state_free>
    hs->ssi = NULL;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <http_state_eof+0x50>
    pbuf_free(hs->req);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f003 fb8b 	bl	800d32c <pbuf_free>
    hs->req = NULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <http_state_free+0x1a>
    http_state_eof(hs);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff ffca 	bl	8009bcc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f002 f965 	bl	800bf08 <mem_free>
  }
}
 8009c3e:	bf00      	nop
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d106      	bne.n	8009c6a <http_write+0x22>
 8009c5c:	4b2c      	ldr	r3, [pc, #176]	; (8009d10 <http_write+0xc8>)
 8009c5e:	f240 2219 	movw	r2, #537	; 0x219
 8009c62:	492c      	ldr	r1, [pc, #176]	; (8009d14 <http_write+0xcc>)
 8009c64:	482c      	ldr	r0, [pc, #176]	; (8009d18 <http_write+0xd0>)
 8009c66:	f00c fef1 	bl	8016a4c <iprintf>
  len = *length;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <http_write+0x32>
    return ERR_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e045      	b.n	8009d06 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c80:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8009c82:	8aba      	ldrh	r2, [r7, #20]
 8009c84:	8afb      	ldrh	r3, [r7, #22]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d201      	bcs.n	8009c8e <http_write+0x46>
    len = max_len;
 8009c8a:	8abb      	ldrh	r3, [r7, #20]
 8009c8c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8009c96:	8afa      	ldrh	r2, [r7, #22]
 8009c98:	8abb      	ldrh	r3, [r7, #20]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d901      	bls.n	8009ca2 <http_write+0x5a>
    len = max_len;
 8009c9e:	8abb      	ldrh	r3, [r7, #20]
 8009ca0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	8afa      	ldrh	r2, [r7, #22]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f008 f8cf 	bl	8011e4c <tcp_write>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009cb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cba:	d10f      	bne.n	8009cdc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d902      	bls.n	8009cd6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	82fb      	strh	r3, [r7, #22]
 8009cd4:	e002      	b.n	8009cdc <http_write+0x94>
      } else {
        len /= 2;
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	085b      	lsrs	r3, r3, #1
 8009cda:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009cdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ce4:	d102      	bne.n	8009cec <http_write+0xa4>
 8009ce6:	8afb      	ldrh	r3, [r7, #22]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d8da      	bhi.n	8009ca2 <http_write+0x5a>

  if (err == ERR_OK) {
 8009cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8afa      	ldrh	r2, [r7, #22]
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	e002      	b.n	8009d02 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009d02:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	08018d10 	.word	0x08018d10
 8009d14:	08018d48 	.word	0x08018d48
 8009d18:	08018d58 	.word	0x08018d58

08009d1c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00c      	beq.n	8009d4a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d007      	beq.n	8009d4a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8009d3a:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <http_close_or_abort_conn+0x9c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8009d40:	223f      	movs	r2, #63	; 0x3f
 8009d42:	491d      	ldr	r1, [pc, #116]	; (8009db8 <http_close_or_abort_conn+0x9c>)
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7f7 fb8d 	bl	8001464 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f005 f93f 	bl	800efd0 <tcp_arg>
  altcp_recv(pcb, NULL);
 8009d52:	2100      	movs	r1, #0
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f005 f94d 	bl	800eff4 <tcp_recv>
  altcp_err(pcb, NULL);
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f005 f98d 	bl	800f07c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8009d62:	2200      	movs	r2, #0
 8009d64:	2100      	movs	r1, #0
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f005 f9c2 	bl	800f0f0 <tcp_poll>
  altcp_sent(pcb, NULL);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f005 f962 	bl	800f038 <tcp_sent>
  if (hs != NULL) {
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8009d7a:	68b8      	ldr	r0, [r7, #8]
 8009d7c:	f7ff ff52 	bl	8009c24 <http_state_free>
  }

  if (abort_conn) {
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f004 f864 	bl	800de54 <tcp_abort>
    return ERR_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e00f      	b.n	8009db0 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f003 ff75 	bl	800dc80 <tcp_close>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8009d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009da2:	2204      	movs	r2, #4
 8009da4:	4905      	ldr	r1, [pc, #20]	; (8009dbc <http_close_or_abort_conn+0xa0>)
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f005 f9a2 	bl	800f0f0 <tcp_poll>
  }
  return err;
 8009dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20005358 	.word	0x20005358
 8009dbc:	0800b62f 	.word	0x0800b62f

08009dc0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff ffa4 	bl	8009d1c <http_close_or_abort_conn>
 8009dd4:	4603      	mov	r3, r0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff ffe8 	bl	8009dc0 <http_close_conn>
  }
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <extract_uri_parameters+0x18>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <extract_uri_parameters+0x1c>
    return (0);
 8009e10:	2300      	movs	r3, #0
 8009e12:	e04b      	b.n	8009eac <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009e18:	2300      	movs	r3, #0
 8009e1a:	613b      	str	r3, [r7, #16]
 8009e1c:	e03f      	b.n	8009e9e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	320c      	adds	r2, #12
 8009e24:	6979      	ldr	r1, [r7, #20]
 8009e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8009e2e:	2126      	movs	r1, #38	; 0x26
 8009e30:	6978      	ldr	r0, [r7, #20]
 8009e32:	f00c fff9 	bl	8016e28 <strchr>
 8009e36:	6178      	str	r0, [r7, #20]
    if (pair) {
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <extract_uri_parameters+0x54>
      *pair = '\0';
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]
      pair++;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	3301      	adds	r3, #1
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	e00c      	b.n	8009e66 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8009e4c:	2120      	movs	r1, #32
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f00c ffea 	bl	8016e28 <strchr>
 8009e54:	6178      	str	r0, [r7, #20]
      if (pair) {
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8009e66:	213d      	movs	r1, #61	; 0x3d
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f00c ffdd 	bl	8016e28 <strchr>
 8009e6e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <extract_uri_parameters+0x94>
      *equals = '\0';
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	321c      	adds	r2, #28
 8009e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e8a:	e005      	b.n	8009e98 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	321c      	adds	r2, #28
 8009e92:	2100      	movs	r1, #0
 8009e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b0f      	cmp	r3, #15
 8009ea2:	dc02      	bgt.n	8009eaa <extract_uri_parameters+0xb2>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1b9      	bne.n	8009e1e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8009eaa:	693b      	ldr	r3, [r7, #16]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b089      	sub	sp, #36	; 0x24
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <get_tag_insert+0x1c>
 8009ec2:	4b58      	ldr	r3, [pc, #352]	; (800a024 <get_tag_insert+0x170>)
 8009ec4:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009ec8:	4957      	ldr	r1, [pc, #348]	; (800a028 <get_tag_insert+0x174>)
 8009eca:	4858      	ldr	r0, [pc, #352]	; (800a02c <get_tag_insert+0x178>)
 8009ecc:	f00c fdbe 	bl	8016a4c <iprintf>
  ssi = hs->ssi;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <get_tag_insert+0x36>
 8009edc:	4b51      	ldr	r3, [pc, #324]	; (800a024 <get_tag_insert+0x170>)
 8009ede:	f240 3206 	movw	r2, #774	; 0x306
 8009ee2:	4953      	ldr	r1, [pc, #332]	; (800a030 <get_tag_insert+0x17c>)
 8009ee4:	4851      	ldr	r0, [pc, #324]	; (800a02c <get_tag_insert+0x178>)
 8009ee6:	f00c fdb1 	bl	8016a4c <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	8a9b      	ldrh	r3, [r3, #20]
 8009eee:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ef6:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8009ef8:	4b4e      	ldr	r3, [pc, #312]	; (800a034 <get_tag_insert+0x180>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d033      	beq.n	8009f68 <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8009f00:	4b4d      	ldr	r3, [pc, #308]	; (800a038 <get_tag_insert+0x184>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d02f      	beq.n	8009f68 <get_tag_insert+0xb4>
 8009f08:	4b4c      	ldr	r3, [pc, #304]	; (800a03c <get_tag_insert+0x188>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d02b      	beq.n	8009f68 <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	e023      	b.n	8009f5e <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f103 0018 	add.w	r0, r3, #24
 8009f1c:	4b46      	ldr	r3, [pc, #280]	; (800a038 <get_tag_insert+0x184>)
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f7f6 f951 	bl	80001d0 <strcmp>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d111      	bne.n	8009f58 <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8009f34:	4b3f      	ldr	r3, [pc, #252]	; (800a034 <get_tag_insert+0x180>)
 8009f36:	681c      	ldr	r4, [r3, #0]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3314      	adds	r3, #20
 8009f42:	89fa      	ldrh	r2, [r7, #14]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4613      	mov	r3, r2
 8009f48:	22fa      	movs	r2, #250	; 0xfa
 8009f4a:	6978      	ldr	r0, [r7, #20]
 8009f4c:	47a0      	blx	r4
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8009f56:	e061      	b.n	800a01c <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	4b37      	ldr	r3, [pc, #220]	; (800a03c <get_tag_insert+0x188>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	dbd6      	blt.n	8009f16 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	3318      	adds	r3, #24
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f6 f939 	bl	80001e4 <strlen>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2be0      	cmp	r3, #224	; 0xe0
 8009f76:	d818      	bhi.n	8009faa <get_tag_insert+0xf6>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	3318      	adds	r3, #24
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f6 f931 	bl	80001e4 <strlen>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b09      	cmp	r3, #9
 8009f86:	d810      	bhi.n	8009faa <get_tag_insert+0xf6>
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	3318      	adds	r3, #24
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f6 f929 	bl	80001e4 <strlen>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2be0      	cmp	r3, #224	; 0xe0
 8009f96:	d806      	bhi.n	8009fa6 <get_tag_insert+0xf2>
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	3318      	adds	r3, #24
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7f6 f921 	bl	80001e4 <strlen>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	e002      	b.n	8009fac <get_tag_insert+0xf8>
 8009fa6:	23e1      	movs	r3, #225	; 0xe1
 8009fa8:	e000      	b.n	8009fac <get_tag_insert+0xf8>
 8009faa:	2309      	movs	r3, #9
 8009fac:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3321      	adds	r3, #33	; 0x21
 8009fb2:	2212      	movs	r2, #18
 8009fb4:	4922      	ldr	r1, [pc, #136]	; (800a040 <get_tag_insert+0x18c>)
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f00c fcbd 	bl	8016936 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f103 0033 	add.w	r0, r3, #51	; 0x33
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3318      	adds	r3, #24
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f00c fcb4 	bl	8016936 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	3312      	adds	r3, #18
 8009fd2:	3320      	adds	r3, #32
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	3301      	adds	r3, #1
 8009fda:	2207      	movs	r2, #7
 8009fdc:	4919      	ldr	r1, [pc, #100]	; (800a044 <get_tag_insert+0x190>)
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f00c fca9 	bl	8016936 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3319      	adds	r3, #25
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4413      	add	r3, r2
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	3321      	adds	r3, #33	; 0x21
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f6 f8f4 	bl	80001e4 <strlen>
 8009ffc:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a004:	d306      	bcc.n	800a014 <get_tag_insert+0x160>
 800a006:	4b07      	ldr	r3, [pc, #28]	; (800a024 <get_tag_insert+0x170>)
 800a008:	f240 323f 	movw	r2, #831	; 0x33f
 800a00c:	490e      	ldr	r1, [pc, #56]	; (800a048 <get_tag_insert+0x194>)
 800a00e:	4807      	ldr	r0, [pc, #28]	; (800a02c <get_tag_insert+0x178>)
 800a010:	f00c fd1c 	bl	8016a4c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	b29a      	uxth	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	825a      	strh	r2, [r3, #18]
}
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd90      	pop	{r4, r7, pc}
 800a022:	bf00      	nop
 800a024:	08018d10 	.word	0x08018d10
 800a028:	08018d80 	.word	0x08018d80
 800a02c:	08018d58 	.word	0x08018d58
 800a030:	08018d8c 	.word	0x08018d8c
 800a034:	20005398 	.word	0x20005398
 800a038:	200053a0 	.word	0x200053a0
 800a03c:	2000539c 	.word	0x2000539c
 800a040:	08018d98 	.word	0x08018d98
 800a044:	08018dac 	.word	0x08018dac
 800a048:	08018db4 	.word	0x08018db4

0800a04c <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800a056:	4a55      	ldr	r2, [pc, #340]	; (800a1ac <get_http_headers+0x160>)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d110      	bne.n	800a096 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a074:	4a4e      	ldr	r2, [pc, #312]	; (800a1b0 <get_http_headers+0x164>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800a07c:	4a4d      	ldr	r2, [pc, #308]	; (800a1b4 <get_http_headers+0x168>)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800a094:	e087      	b.n	800a1a6 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800a096:	4948      	ldr	r1, [pc, #288]	; (800a1b8 <get_http_headers+0x16c>)
 800a098:	6838      	ldr	r0, [r7, #0]
 800a09a:	f00c feff 	bl	8016e9c <strstr>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a0a4:	4a42      	ldr	r2, [pc, #264]	; (800a1b0 <get_http_headers+0x164>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a0ac:	e01b      	b.n	800a0e6 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800a0ae:	4943      	ldr	r1, [pc, #268]	; (800a1bc <get_http_headers+0x170>)
 800a0b0:	6838      	ldr	r0, [r7, #0]
 800a0b2:	f00c fef3 	bl	8016e9c <strstr>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800a0bc:	4a40      	ldr	r2, [pc, #256]	; (800a1c0 <get_http_headers+0x174>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a0c4:	e00f      	b.n	800a0e6 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800a0c6:	493f      	ldr	r1, [pc, #252]	; (800a1c4 <get_http_headers+0x178>)
 800a0c8:	6838      	ldr	r0, [r7, #0]
 800a0ca:	f00c fee7 	bl	8016e9c <strstr>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800a0d4:	4a3c      	ldr	r2, [pc, #240]	; (800a1c8 <get_http_headers+0x17c>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a0dc:	e003      	b.n	800a0e6 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800a0de:	4a3b      	ldr	r2, [pc, #236]	; (800a1cc <get_http_headers+0x180>)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800a0e6:	213f      	movs	r1, #63	; 0x3f
 800a0e8:	6838      	ldr	r0, [r7, #0]
 800a0ea:	f00c fe9d 	bl	8016e28 <strchr>
 800a0ee:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <get_http_headers+0xb0>
    *vars = '\0';
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800a100:	212e      	movs	r1, #46	; 0x2e
 800a102:	6838      	ldr	r0, [r7, #0]
 800a104:	f00c fe90 	bl	8016e28 <strchr>
 800a108:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a10a:	e007      	b.n	800a11c <get_http_headers+0xd0>
    ext = tmp + 1;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	3301      	adds	r3, #1
 800a110:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800a112:	212e      	movs	r1, #46	; 0x2e
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f00c fe87 	bl	8016e28 <strchr>
 800a11a:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f4      	bne.n	800a10c <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d014      	beq.n	800a152 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e00d      	b.n	800a14a <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800a12e:	4a28      	ldr	r2, [pc, #160]	; (800a1d0 <get_http_headers+0x184>)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fcd1 	bl	800bae0 <lwip_stricmp>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	3301      	adds	r3, #1
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b13      	cmp	r3, #19
 800a14e:	d9ee      	bls.n	800a12e <get_http_headers+0xe2>
 800a150:	e003      	b.n	800a15a <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800a152:	2314      	movs	r3, #20
 800a154:	617b      	str	r3, [r7, #20]
 800a156:	e000      	b.n	800a15a <get_http_headers+0x10e>
        break;
 800a158:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <get_http_headers+0x11a>
    *vars = '?';
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	223f      	movs	r2, #63	; 0x3f
 800a164:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b13      	cmp	r3, #19
 800a16a:	d808      	bhi.n	800a17e <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800a16c:	4a18      	ldr	r2, [pc, #96]	; (800a1d0 <get_http_headers+0x184>)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	4413      	add	r3, r2
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a17c:	e00b      	b.n	800a196 <get_http_headers+0x14a>
  } else if (!ext) {
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <get_http_headers+0x188>)
 800a188:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a18c:	e003      	b.n	800a196 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <get_http_headers+0x18c>)
 800a192:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	08018990 	.word	0x08018990
 800a1b0:	08018854 	.word	0x08018854
 800a1b4:	080189d0 	.word	0x080189d0
 800a1b8:	08018dc4 	.word	0x08018dc4
 800a1bc:	08018dc8 	.word	0x08018dc8
 800a1c0:	08018874 	.word	0x08018874
 800a1c4:	08018dcc 	.word	0x08018dcc
 800a1c8:	08018890 	.word	0x08018890
 800a1cc:	08018840 	.word	0x08018840
 800a1d0:	08022810 	.word	0x08022810
 800a1d4:	08018b64 	.word	0x08018b64
 800a1d8:	08018dd0 	.word	0x08018dd0

0800a1dc <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <get_http_content_length+0x24>
 800a1f2:	4b27      	ldr	r3, [pc, #156]	; (800a290 <get_http_content_length+0xb4>)
 800a1f4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800a1f8:	4926      	ldr	r1, [pc, #152]	; (800a294 <get_http_content_length+0xb8>)
 800a1fa:	4827      	ldr	r0, [pc, #156]	; (800a298 <get_http_content_length+0xbc>)
 800a1fc:	f00c fc26 	bl	8016a4c <iprintf>

  add_content_len = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10c      	bne.n	800a226 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <get_http_content_length+0x4a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	7c1b      	ldrb	r3, [r3, #16]
 800a21a:	f003 0302 	and.w	r3, r3, #2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <get_http_content_length+0x4a>
      add_content_len = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d025      	beq.n	800a278 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	461a      	mov	r2, r3
 800a23a:	210c      	movs	r1, #12
 800a23c:	f001 fc84 	bl	800bb48 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	33c4      	adds	r3, #196	; 0xc4
 800a244:	4618      	mov	r0, r3
 800a246:	f7f5 ffcd 	bl	80001e4 <strlen>
 800a24a:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d810      	bhi.n	800a274 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	33c0      	adds	r3, #192	; 0xc0
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	4413      	add	r3, r2
 800a25a:	3304      	adds	r3, #4
 800a25c:	2203      	movs	r2, #3
 800a25e:	490f      	ldr	r1, [pc, #60]	; (800a29c <get_http_content_length+0xc0>)
 800a260:	4618      	mov	r0, r3
 800a262:	f00c fb68 	bl	8016936 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800a272:	e001      	b.n	800a278 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800a27e:	4a08      	ldr	r2, [pc, #32]	; (800a2a0 <get_http_content_length+0xc4>)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	08018d10 	.word	0x08018d10
 800a294:	08018df0 	.word	0x08018df0
 800a298:	08018d58 	.word	0x08018d58
 800a29c:	08018e04 	.word	0x08018e04
 800a2a0:	08018920 	.word	0x08018920

0800a2a4 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800a2bc:	6838      	ldr	r0, [r7, #0]
 800a2be:	f7ff ff8d 	bl	800a1dc <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2c8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800a2ca:	8bfb      	ldrh	r3, [r7, #30]
 800a2cc:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a2ce:	e08b      	b.n	800a3e8 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	322c      	adds	r2, #44	; 0x2c
 800a2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f5 ff7f 	bl	80001e4 <strlen>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800a2ea:	8b7b      	ldrh	r3, [r7, #26]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a2f2:	1a9a      	subs	r2, r3, r2
 800a2f4:	8bfb      	ldrh	r3, [r7, #30]
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	bfa8      	it	ge
 800a2fa:	4613      	movge	r3, r2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a306:	461a      	mov	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	322c      	adds	r2, #44	; 0x2c
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a316:	4413      	add	r3, r2
 800a318:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800a31a:	89fb      	ldrh	r3, [r7, #14]
 800a31c:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800a31e:	2300      	movs	r3, #0
 800a320:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d103      	bne.n	800a334 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800a32c:	7f3b      	ldrb	r3, [r7, #28]
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d803      	bhi.n	800a346 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800a33e:	7f3b      	ldrb	r3, [r7, #28]
 800a340:	f043 0302 	orr.w	r3, r3, #2
 800a344:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800a346:	7f3b      	ldrb	r3, [r7, #28]
 800a348:	f107 020e 	add.w	r2, r7, #14
 800a34c:	6979      	ldr	r1, [r7, #20]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fc7a 	bl	8009c48 <http_write>
 800a354:	4603      	mov	r3, r0
 800a356:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800a358:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d106      	bne.n	800a36e <http_send_headers+0xca>
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	8a7a      	ldrh	r2, [r7, #18]
 800a364:	429a      	cmp	r2, r3
 800a366:	d002      	beq.n	800a36e <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	777b      	strb	r3, [r7, #29]
 800a36c:	e005      	b.n	800a37a <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800a36e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800a380:	89fb      	ldrh	r3, [r7, #14]
 800a382:	4413      	add	r3, r2
 800a384:	b29a      	uxth	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800a38c:	89fb      	ldrh	r3, [r7, #14]
 800a38e:	8bfa      	ldrh	r2, [r7, #30]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800a39a:	8b7a      	ldrh	r2, [r7, #26]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d123      	bne.n	800a3e8 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a3b0:	e007      	b.n	800a3c2 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d809      	bhi.n	800a3e0 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	322c      	adds	r2, #44	; 0x2c
 800a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0e8      	beq.n	800a3b2 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a3e8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <http_send_headers+0x15c>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d803      	bhi.n	800a400 <http_send_headers+0x15c>
 800a3f8:	89fb      	ldrh	r3, [r7, #14]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f af68 	bne.w	800a2d0 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a406:	2b04      	cmp	r3, #4
 800a408:	d90f      	bls.n	800a42a <http_send_headers+0x186>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10b      	bne.n	800a42a <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f819 	bl	800a44c <http_check_eof>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800a420:	2302      	movs	r3, #2
 800a422:	777b      	strb	r3, [r7, #29]
 800a424:	e001      	b.n	800a42a <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800a426:	2303      	movs	r3, #3
 800a428:	e00b      	b.n	800a442 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a430:	2b04      	cmp	r3, #4
 800a432:	d903      	bls.n	800a43c <http_send_headers+0x198>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800a43c:	2302      	movs	r3, #2
 800a43e:	e000      	b.n	800a442 <http_send_headers+0x19e>
  }
  return data_to_send;
 800a440:	7f7b      	ldrb	r3, [r7, #29]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d105      	bne.n	800a46a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff fcbc 	bl	8009dde <http_eof>
    return 0;
 800a466:	2300      	movs	r3, #0
 800a468:	e016      	b.n	800a498 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fb56 	bl	8009b20 <fs_bytes_left>
 800a474:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc05      	bgt.n	800a488 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff fcad 	bl	8009dde <http_eof>
    return 0;
 800a484:	2300      	movs	r3, #0
 800a486:	e007      	b.n	800a498 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <http_check_eof+0x54>)
 800a48a:	f240 429d 	movw	r2, #1181	; 0x49d
 800a48e:	4905      	ldr	r1, [pc, #20]	; (800a4a4 <http_check_eof+0x58>)
 800a490:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <http_check_eof+0x5c>)
 800a492:	f00c fadb 	bl	8016a4c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a496:	2301      	movs	r3, #1
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	08018d10 	.word	0x08018d10
 800a4a4:	08018e08 	.word	0x08018e08
 800a4a8:	08018d58 	.word	0x08018d58

0800a4ac <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d803      	bhi.n	800a4ce <http_send_data_nonssi+0x22>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	e001      	b.n	800a4d2 <http_send_data_nonssi+0x26>
 800a4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4d2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	6999      	ldr	r1, [r3, #24]
 800a4d8:	f107 020c 	add.w	r2, r7, #12
 800a4dc:	2300      	movs	r3, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff fbb2 	bl	8009c48 <http_write>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10d      	bne.n	800a50c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	89ba      	ldrh	r2, [r7, #12]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	89ba      	ldrh	r2, [r7, #12]
 800a506:	1a9a      	subs	r2, r3, r2
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <http_send_data_ssi+0x2c>
 800a536:	4b89      	ldr	r3, [pc, #548]	; (800a75c <http_send_data_ssi+0x244>)
 800a538:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a53c:	4988      	ldr	r1, [pc, #544]	; (800a760 <http_send_data_ssi+0x248>)
 800a53e:	4889      	ldr	r0, [pc, #548]	; (800a764 <http_send_data_ssi+0x24c>)
 800a540:	f00c fa84 	bl	8016a4c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a54a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	429a      	cmp	r2, r3
 800a556:	f240 82c5 	bls.w	800aae4 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a568:	4293      	cmp	r3, r2
 800a56a:	dc06      	bgt.n	800a57a <http_send_data_ssi+0x62>
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	b29b      	uxth	r3, r3
 800a578:	e001      	b.n	800a57e <http_send_data_ssi+0x66>
 800a57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a57e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	6999      	ldr	r1, [r3, #24]
 800a584:	f107 020e 	add.w	r2, r7, #14
 800a588:	2300      	movs	r3, #0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff fb5c 	bl	8009c48 <http_write>
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10d      	bne.n	800a5b8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800a59c:	2301      	movs	r3, #1
 800a59e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	89fa      	ldrh	r2, [r7, #14]
 800a5a6:	441a      	add	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	89fa      	ldrh	r2, [r7, #14]
 800a5b2:	1a9a      	subs	r2, r3, r2
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f040 8290 	bne.w	800aae4 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800a5c4:	7dbb      	ldrb	r3, [r7, #22]
 800a5c6:	e2d6      	b.n	800ab76 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <http_send_data_ssi+0xba>
      return data_to_send;
 800a5ce:	7dbb      	ldrb	r3, [r7, #22]
 800a5d0:	e2d1      	b.n	800ab76 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	f200 8282 	bhi.w	800aae2 <http_send_data_ssi+0x5ca>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <http_send_data_ssi+0xcc>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a653 	.word	0x0800a653
 800a5ec:	0800a6c5 	.word	0x0800a6c5
 800a5f0:	0800a80d 	.word	0x0800a80d
 800a5f4:	0800a983 	.word	0x0800a983
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	757b      	strb	r3, [r7, #21]
 800a5fc:	e01b      	b.n	800a636 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	781a      	ldrb	r2, [r3, #0]
 800a604:	7d7b      	ldrb	r3, [r7, #21]
 800a606:	4958      	ldr	r1, [pc, #352]	; (800a768 <http_send_data_ssi+0x250>)
 800a608:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d10e      	bne.n	800a630 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	7d7a      	ldrb	r2, [r7, #21]
 800a616:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_index = 1;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	2201      	movs	r2, #1
 800a624:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800a62e:	e005      	b.n	800a63c <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a630:	7d7b      	ldrb	r3, [r7, #21]
 800a632:	3301      	adds	r3, #1
 800a634:	757b      	strb	r3, [r7, #21]
 800a636:	7d7b      	ldrb	r3, [r7, #21]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d9e0      	bls.n	800a5fe <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	601a      	str	r2, [r3, #0]
        break;
 800a650:	e248      	b.n	800aae4 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	7d9b      	ldrb	r3, [r3, #22]
 800a656:	461a      	mov	r2, r3
 800a658:	4b43      	ldr	r3, [pc, #268]	; (800a768 <http_send_data_ssi+0x250>)
 800a65a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	8a12      	ldrh	r2, [r2, #16]
 800a662:	4413      	add	r3, r2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d107      	bne.n	800a67a <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2200      	movs	r2, #0
 800a66e:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 800a678:	e234      	b.n	800aae4 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	7d9b      	ldrb	r3, [r3, #22]
 800a684:	4619      	mov	r1, r3
 800a686:	4b38      	ldr	r3, [pc, #224]	; (800a768 <http_send_data_ssi+0x250>)
 800a688:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800a68c:	6939      	ldr	r1, [r7, #16]
 800a68e:	8a09      	ldrh	r1, [r1, #16]
 800a690:	440b      	add	r3, r1
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d106      	bne.n	800a6a6 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	8a1b      	ldrh	r3, [r3, #16]
 800a69c:	3301      	adds	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	821a      	strh	r2, [r3, #16]
 800a6a4:	e003      	b.n	800a6ae <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	1e5a      	subs	r2, r3, #1
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	601a      	str	r2, [r3, #0]
        }
        break;
 800a6c2:	e20f      	b.n	800aae4 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	8a1b      	ldrh	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d11e      	bne.n	800a70a <http_send_data_ssi+0x1f2>
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b20      	cmp	r3, #32
 800a6d4:	d00e      	beq.n	800a6f4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a6dc:	2b09      	cmp	r3, #9
 800a6de:	d009      	beq.n	800a6f4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b0a      	cmp	r3, #10
 800a6e8:	d004      	beq.n	800a6f4 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a6f0:	2b0d      	cmp	r3, #13
 800a6f2:	d10a      	bne.n	800a70a <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	601a      	str	r2, [r3, #0]
          break;
 800a708:	e1ec      	b.n	800aae4 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	781a      	ldrb	r2, [r3, #0]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	7d9b      	ldrb	r3, [r3, #22]
 800a714:	4914      	ldr	r1, [pc, #80]	; (800a768 <http_send_data_ssi+0x250>)
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	440b      	add	r3, r1
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d013      	beq.n	800a74a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d00e      	beq.n	800a74a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b09      	cmp	r3, #9
 800a734:	d009      	beq.n	800a74a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a73c:	2b0a      	cmp	r3, #10
 800a73e:	d004      	beq.n	800a74a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b0d      	cmp	r3, #13
 800a748:	d13f      	bne.n	800a7ca <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	8a1b      	ldrh	r3, [r3, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10c      	bne.n	800a76c <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          if (ssi->tag_index == 0) {
 800a75a:	e04c      	b.n	800a7f6 <http_send_data_ssi+0x2de>
 800a75c:	08018d10 	.word	0x08018d10
 800a760:	08018d8c 	.word	0x08018d8c
 800a764:	08018d58 	.word	0x08018d58
 800a768:	080228ec 	.word	0x080228ec
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2203      	movs	r2, #3
 800a770:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	8a1b      	ldrh	r3, [r3, #16]
 800a778:	2bff      	cmp	r3, #255	; 0xff
 800a77a:	d906      	bls.n	800a78a <http_send_data_ssi+0x272>
 800a77c:	4b92      	ldr	r3, [pc, #584]	; (800a9c8 <http_send_data_ssi+0x4b0>)
 800a77e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a782:	4992      	ldr	r1, [pc, #584]	; (800a9cc <http_send_data_ssi+0x4b4>)
 800a784:	4892      	ldr	r0, [pc, #584]	; (800a9d0 <http_send_data_ssi+0x4b8>)
 800a786:	f00c f961 	bl	8016a4c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	8a1b      	ldrh	r3, [r3, #16]
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	8a1b      	ldrh	r3, [r3, #16]
 800a798:	461a      	mov	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	4413      	add	r3, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	781a      	ldrb	r2, [r3, #0]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	7d9b      	ldrb	r3, [r3, #22]
 800a7ac:	4989      	ldr	r1, [pc, #548]	; (800a9d4 <http_send_data_ssi+0x4bc>)
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	440b      	add	r3, r1
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d103      	bne.n	800a7c2 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800a7c0:	e019      	b.n	800a7f6 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800a7c8:	e015      	b.n	800a7f6 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	8a1b      	ldrh	r3, [r3, #16]
 800a7ce:	2b07      	cmp	r3, #7
 800a7d0:	d80d      	bhi.n	800a7ee <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	8a1b      	ldrh	r3, [r3, #16]
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	b288      	uxth	r0, r1
 800a7de:	6939      	ldr	r1, [r7, #16]
 800a7e0:	8208      	strh	r0, [r1, #16]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	7812      	ldrb	r2, [r2, #0]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	440b      	add	r3, r1
 800a7ea:	761a      	strb	r2, [r3, #24]
 800a7ec:	e003      	b.n	800a7f6 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	1e5a      	subs	r2, r3, #1
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	601a      	str	r2, [r3, #0]

        break;
 800a80a:	e16b      	b.n	800aae4 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	8a1b      	ldrh	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11e      	bne.n	800a852 <http_send_data_ssi+0x33a>
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	d00e      	beq.n	800a83c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a824:	2b09      	cmp	r3, #9
 800a826:	d009      	beq.n	800a83c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b0a      	cmp	r3, #10
 800a830:	d004      	beq.n	800a83c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a838:	2b0d      	cmp	r3, #13
 800a83a:	d10a      	bne.n	800a852 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	1e5a      	subs	r2, r3, #1
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	601a      	str	r2, [r3, #0]
          break;
 800a850:	e148      	b.n	800aae4 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	7d9b      	ldrb	r3, [r3, #22]
 800a85c:	495d      	ldr	r1, [pc, #372]	; (800a9d4 <http_send_data_ssi+0x4bc>)
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	440b      	add	r3, r1
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	6939      	ldr	r1, [r7, #16]
 800a866:	8a09      	ldrh	r1, [r1, #16]
 800a868:	440b      	add	r3, r1
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d179      	bne.n	800a964 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	1e5a      	subs	r2, r3, #1
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	8a1b      	ldrh	r3, [r3, #16]
 800a888:	3301      	adds	r3, #1
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	7d9b      	ldrb	r3, [r3, #22]
 800a894:	4a4f      	ldr	r2, [pc, #316]	; (800a9d4 <http_send_data_ssi+0x4bc>)
 800a896:	00db      	lsls	r3, r3, #3
 800a898:	4413      	add	r3, r2
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	8a12      	ldrh	r2, [r2, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f040 811d 	bne.w	800aae4 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800a8b0:	6838      	ldr	r0, [r7, #0]
 800a8b2:	f7ff faff 	bl	8009eb4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2204      	movs	r2, #4
 800a8c0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_end = ssi->parsed;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	f240 8101 	bls.w	800aae4 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	dc06      	bgt.n	800a902 <http_send_data_ssi+0x3ea>
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	e001      	b.n	800a906 <http_send_data_ssi+0x3ee>
 800a902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a906:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	6999      	ldr	r1, [r3, #24]
 800a90c:	f107 020e 	add.w	r2, r7, #14
 800a910:	2300      	movs	r3, #0
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff f998 	bl	8009c48 <http_write>
 800a918:	4603      	mov	r3, r0
 800a91a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800a91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 80df 	bne.w	800aae4 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800a926:	2301      	movs	r3, #1
 800a928:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	429a      	cmp	r2, r3
 800a934:	d809      	bhi.n	800a94a <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	b29a      	uxth	r2, r3
 800a942:	89fb      	ldrh	r3, [r7, #14]
 800a944:	4413      	add	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	89fa      	ldrh	r2, [r7, #14]
 800a950:	441a      	add	r2, r3
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	89fa      	ldrh	r2, [r7, #14]
 800a95c:	1a9a      	subs	r2, r3, r2
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	625a      	str	r2, [r3, #36]	; 0x24
 800a962:	e0bf      	b.n	800aae4 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        }
        break;
 800a980:	e0b0      	b.n	800aae4 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	689a      	ldr	r2, [r3, #8]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d95c      	bls.n	800aa48 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	429a      	cmp	r2, r3
 800a998:	d206      	bcs.n	800a9a8 <http_send_data_ssi+0x490>
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <http_send_data_ssi+0x4b0>)
 800a99c:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800a9a0:	490d      	ldr	r1, [pc, #52]	; (800a9d8 <http_send_data_ssi+0x4c0>)
 800a9a2:	480b      	ldr	r0, [pc, #44]	; (800a9d0 <http_send_data_ssi+0x4b8>)
 800a9a4:	f00c f852 	bl	8016a4c <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	dc10      	bgt.n	800a9dc <http_send_data_ssi+0x4c4>
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	e00b      	b.n	800a9e0 <http_send_data_ssi+0x4c8>
 800a9c8:	08018d10 	.word	0x08018d10
 800a9cc:	08018e40 	.word	0x08018e40
 800a9d0:	08018d58 	.word	0x08018d58
 800a9d4:	080228ec 	.word	0x080228ec
 800a9d8:	08018e58 	.word	0x08018e58
 800a9dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9e0:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800a9e2:	89fb      	ldrh	r3, [r7, #14]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00a      	beq.n	800a9fe <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6999      	ldr	r1, [r3, #24]
 800a9ec:	f107 020e 	add.w	r2, r7, #14
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff f928 	bl	8009c48 <http_write>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	75fb      	strb	r3, [r7, #23]
 800a9fc:	e001      	b.n	800aa02 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800aa02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d16c      	bne.n	800aae4 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d809      	bhi.n	800aa2e <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	89fb      	ldrh	r3, [r7, #14]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	89fa      	ldrh	r2, [r7, #14]
 800aa34:	441a      	add	r2, r3
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	89fa      	ldrh	r2, [r7, #14]
 800aa40:	1a9a      	subs	r2, r3, r2
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	625a      	str	r2, [r3, #36]	; 0x24
 800aa46:	e04d      	b.n	800aae4 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	8a1a      	ldrh	r2, [r3, #16]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	8a5b      	ldrh	r3, [r3, #18]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d30b      	bcc.n	800aa6c <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	8a9b      	ldrh	r3, [r3, #20]
 800aa58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d005      	beq.n	800aa6c <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2200      	movs	r2, #0
 800aa64:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800aa66:	6838      	ldr	r0, [r7, #0]
 800aa68:	f7ff fa24 	bl	8009eb4 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	8a1a      	ldrh	r2, [r3, #16]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	8a5b      	ldrh	r3, [r3, #18]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d222      	bcs.n	800aabe <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	8a5a      	ldrh	r2, [r3, #18]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	8a1b      	ldrh	r3, [r3, #16]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	8a1b      	ldrh	r3, [r3, #16]
 800aa8a:	3320      	adds	r3, #32
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4413      	add	r3, r2
 800aa90:	1c59      	adds	r1, r3, #1
 800aa92:	f107 020e 	add.w	r2, r7, #14
 800aa96:	2301      	movs	r3, #1
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff f8d5 	bl	8009c48 <http_write>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800aaa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d11c      	bne.n	800aae4 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	8a1a      	ldrh	r2, [r3, #16]
 800aab2:	89fb      	ldrh	r3, [r7, #14]
 800aab4:	4413      	add	r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	821a      	strh	r2, [r3, #16]
 800aabc:	e012      	b.n	800aae4 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	8a9b      	ldrh	r3, [r3, #20]
 800aac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10c      	bne.n	800aae4 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2200      	movs	r2, #0
 800aace:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800aae0:	e000      	b.n	800aae4 <http_send_data_ssi+0x5cc>
        default:
          break;
 800aae2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	d003      	beq.n	800aaf6 <http_send_data_ssi+0x5de>
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d004      	beq.n	800ab00 <http_send_data_ssi+0x5e8>
 800aaf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f43f ad64 	beq.w	800a5c8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d034      	beq.n	800ab74 <http_send_data_ssi+0x65c>
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d92e      	bls.n	800ab74 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab24:	4293      	cmp	r3, r2
 800ab26:	dc06      	bgt.n	800ab36 <http_send_data_ssi+0x61e>
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	e001      	b.n	800ab3a <http_send_data_ssi+0x622>
 800ab36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab3a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	6999      	ldr	r1, [r3, #24]
 800ab40:	f107 020e 	add.w	r2, r7, #14
 800ab44:	2300      	movs	r3, #0
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff f87e 	bl	8009c48 <http_write>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ab50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10d      	bne.n	800ab74 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	89fa      	ldrh	r2, [r7, #14]
 800ab62:	441a      	add	r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	89fa      	ldrh	r2, [r7, #14]
 800ab6e:	1a9a      	subs	r2, r3, r2
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800ab74:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop

0800ab80 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <http_send+0x18>
    return 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e048      	b.n	800ac2a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d812      	bhi.n	800abc8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff fb7d 	bl	800a2a4 <http_send_headers>
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d007      	beq.n	800abc4 <http_send+0x44>
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d006      	beq.n	800abc8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d801      	bhi.n	800abc8 <http_send+0x48>
      return data_to_send;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	e030      	b.n	800ac2a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d108      	bne.n	800abe2 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff fc3a 	bl	800a44c <http_check_eof>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <http_send+0x62>
      return 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	e023      	b.n	800ac2a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d006      	beq.n	800abf8 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff fc93 	bl	800a518 <http_send_data_ssi>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]
 800abf6:	e005      	b.n	800ac04 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff fc56 	bl	800a4ac <http_send_data_nonssi>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10d      	bne.n	800ac28 <http_send+0xa8>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe ff85 	bl	8009b20 <fs_bytes_left>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc05      	bgt.n	800ac28 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff f8dd 	bl	8009dde <http_eof>
    return 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e000      	b.n	800ac2a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	4a1c      	ldr	r2, [pc, #112]	; (800acb4 <http_get_404_file+0x80>)
 800ac42:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f7fe ff1f 	bl	8009a90 <fs_open>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ac56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d024      	beq.n	800aca8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <http_get_404_file+0x84>)
 800ac62:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	f7fe ff0f 	bl	8009a90 <fs_open>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ac76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d014      	beq.n	800aca8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	4a0e      	ldr	r2, [pc, #56]	; (800acbc <http_get_404_file+0x88>)
 800ac82:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	f7fe feff 	bl	8009a90 <fs_open>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800ac96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d004      	beq.n	800aca8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
        return NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800aca8:	687b      	ldr	r3, [r7, #4]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	08018e70 	.word	0x08018e70
 800acb8:	08018e7c 	.word	0x08018e7c
 800acbc:	08018e88 	.word	0x08018e88

0800acc0 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800acc8:	4b08      	ldr	r3, [pc, #32]	; (800acec <http_handle_post_finished+0x2c>)
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800acce:	223f      	movs	r2, #63	; 0x3f
 800acd0:	4906      	ldr	r1, [pc, #24]	; (800acec <http_handle_post_finished+0x2c>)
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f6 fbc6 	bl	8001464 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800acd8:	2200      	movs	r2, #0
 800acda:	4904      	ldr	r1, [pc, #16]	; (800acec <http_handle_post_finished+0x2c>)
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 faab 	bl	800b238 <http_find_file>
 800ace2:	4603      	mov	r3, r0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20005358 	.word	0x20005358

0800acf0 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d014      	beq.n	800ad2a <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	8912      	ldrh	r2, [r2, #8]
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d204      	bcs.n	800ad18 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800ad16:	e008      	b.n	800ad2a <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	8912      	ldrh	r2, [r2, #8]
 800ad22:	1a9a      	subs	r2, r3, r2
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7f6 fb58 	bl	80013e8 <httpd_post_receive_data>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e001      	b.n	800ad42 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800ad42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d104      	bne.n	800ad66 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff ffaf 	bl	800acc0 <http_handle_post_finished>
 800ad62:	4603      	mov	r3, r0
 800ad64:	e000      	b.n	800ad68 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b092      	sub	sp, #72	; 0x48
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800ad7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad80:	1c58      	adds	r0, r3, #1
 800ad82:	887a      	ldrh	r2, [r7, #2]
 800ad84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad86:	1c59      	adds	r1, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	1acb      	subs	r3, r1, r3
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4965      	ldr	r1, [pc, #404]	; (800af28 <http_post_request+0x1b8>)
 800ad92:	f000 fe6f 	bl	800ba74 <lwip_strnstr>
 800ad96:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 80be 	beq.w	800af1c <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800ada0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada2:	1c58      	adds	r0, r3, #1
 800ada4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada6:	3301      	adds	r3, #1
 800ada8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	461a      	mov	r2, r3
 800adae:	495f      	ldr	r1, [pc, #380]	; (800af2c <http_post_request+0x1bc>)
 800adb0:	f000 fe60 	bl	800ba74 <lwip_strnstr>
 800adb4:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 80ac 	beq.w	800af16 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	3310      	adds	r3, #16
 800adc2:	220a      	movs	r2, #10
 800adc4:	495a      	ldr	r1, [pc, #360]	; (800af30 <http_post_request+0x1c0>)
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fe54 	bl	800ba74 <lwip_strnstr>
 800adcc:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 80a0 	beq.w	800af16 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	3310      	adds	r3, #16
 800adda:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800addc:	69f8      	ldr	r0, [r7, #28]
 800adde:	f00b fc7b 	bl	80166d8 <atoi>
 800ade2:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800ade4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b30      	cmp	r3, #48	; 0x30
 800adf0:	d104      	bne.n	800adfc <http_post_request+0x8c>
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	3301      	adds	r3, #1
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b0d      	cmp	r3, #13
 800adfa:	d002      	beq.n	800ae02 <http_post_request+0x92>
            content_len = -1;
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800ae02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f2c0 8083 	blt.w	800af10 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800ae0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800ae10:	887a      	ldrh	r2, [r7, #2]
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	1d19      	adds	r1, r3, #4
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	1acb      	subs	r3, r1, r3
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	db05      	blt.n	800ae2a <http_post_request+0xba>
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	e000      	b.n	800ae2c <http_post_request+0xbc>
 800ae2a:	887b      	ldrh	r3, [r7, #2]
 800ae2c:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800ae2e:	887a      	ldrh	r2, [r7, #2]
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	1d19      	adds	r1, r3, #4
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	1acb      	subs	r3, r1, r3
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	db05      	blt.n	800ae48 <http_post_request+0xd8>
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	1d1a      	adds	r2, r3, #4
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	e000      	b.n	800ae4a <http_post_request+0xda>
 800ae48:	887b      	ldrh	r3, [r7, #2]
 800ae4a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800ae50:	4b38      	ldr	r3, [pc, #224]	; (800af34 <http_post_request+0x1c4>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800ae5c:	8aba      	ldrh	r2, [r7, #20]
 800ae5e:	f107 0312 	add.w	r3, r7, #18
 800ae62:	9303      	str	r3, [sp, #12]
 800ae64:	233f      	movs	r3, #63	; 0x3f
 800ae66:	9302      	str	r3, [sp, #8]
 800ae68:	4b32      	ldr	r3, [pc, #200]	; (800af34 <http_post_request+0x1c4>)
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	4613      	mov	r3, r2
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f7f6 fa8c 	bl	8001394 <httpd_post_begin>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800ae80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d13c      	bne.n	800af02 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800ae8c:	8afb      	ldrh	r3, [r7, #22]
 800ae8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800ae90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800ae98:	e007      	b.n	800aeaa <http_post_request+0x13a>
              start_offset -= q->len;
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	895b      	ldrh	r3, [r3, #10]
 800ae9e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <http_post_request+0x14a>
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	895b      	ldrh	r3, [r3, #10]
 800aeb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d2ef      	bcs.n	800ae9a <http_post_request+0x12a>
            }
            if (q != NULL) {
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00d      	beq.n	800aedc <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800aec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aec2:	4619      	mov	r1, r3
 800aec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aec6:	f002 f9ab 	bl	800d220 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800aeca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aecc:	f002 fad4 	bl	800d478 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800aed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aed2:	68b8      	ldr	r0, [r7, #8]
 800aed4:	f7ff ff0c 	bl	800acf0 <http_post_rxpbuf>
 800aed8:	4603      	mov	r3, r0
 800aeda:	e021      	b.n	800af20 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800aee6:	2241      	movs	r2, #65	; 0x41
 800aee8:	2100      	movs	r1, #0
 800aeea:	2000      	movs	r0, #0
 800aeec:	f001 ff3a 	bl	800cd64 <pbuf_alloc>
 800aef0:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800aef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aef4:	68b8      	ldr	r0, [r7, #8]
 800aef6:	f7ff fefb 	bl	800acf0 <http_post_rxpbuf>
 800aefa:	4603      	mov	r3, r0
 800aefc:	e010      	b.n	800af20 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e00e      	b.n	800af20 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800af02:	2200      	movs	r2, #0
 800af04:	490b      	ldr	r1, [pc, #44]	; (800af34 <http_post_request+0x1c4>)
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	f000 f996 	bl	800b238 <http_find_file>
 800af0c:	4603      	mov	r3, r0
 800af0e:	e007      	b.n	800af20 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800af10:	f06f 030f 	mvn.w	r3, #15
 800af14:	e004      	b.n	800af20 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800af16:	f06f 030f 	mvn.w	r3, #15
 800af1a:	e001      	b.n	800af20 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800af1c:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800af20:	4618      	mov	r0, r3
 800af22:	3738      	adds	r7, #56	; 0x38
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	08018e94 	.word	0x08018e94
 800af2c:	08018920 	.word	0x08018920
 800af30:	08018e04 	.word	0x08018e04
 800af34:	20005358 	.word	0x20005358

0800af38 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b092      	sub	sp, #72	; 0x48
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <http_parse_request+0x24>
 800af4e:	4b87      	ldr	r3, [pc, #540]	; (800b16c <http_parse_request+0x234>)
 800af50:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800af54:	4986      	ldr	r1, [pc, #536]	; (800b170 <http_parse_request+0x238>)
 800af56:	4887      	ldr	r0, [pc, #540]	; (800b174 <http_parse_request+0x23c>)
 800af58:	f00b fd78 	bl	8016a4c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <http_parse_request+0x38>
 800af62:	4b82      	ldr	r3, [pc, #520]	; (800b16c <http_parse_request+0x234>)
 800af64:	f240 72af 	movw	r2, #1967	; 0x7af
 800af68:	4983      	ldr	r1, [pc, #524]	; (800b178 <http_parse_request+0x240>)
 800af6a:	4882      	ldr	r0, [pc, #520]	; (800b174 <http_parse_request+0x23c>)
 800af6c:	f00b fd6e 	bl	8016a4c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d103      	bne.n	800af80 <http_parse_request+0x48>
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800af80:	f06f 0307 	mvn.w	r3, #7
 800af84:	e0ed      	b.n	800b162 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d103      	bne.n	800af96 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af92:	621a      	str	r2, [r3, #32]
 800af94:	e005      	b.n	800afa2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 fa93 	bl	800d4c8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800afa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa4:	f002 fa68 	bl	800d478 <pbuf_ref>

  if (hs->req->next != NULL) {
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	891b      	ldrh	r3, [r3, #8]
 800afb8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afbc:	4293      	cmp	r3, r2
 800afbe:	bf28      	it	cs
 800afc0:	4613      	movcs	r3, r2
 800afc2:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	6a18      	ldr	r0, [r3, #32]
 800afc8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800afca:	2300      	movs	r3, #0
 800afcc:	496b      	ldr	r1, [pc, #428]	; (800b17c <http_parse_request+0x244>)
 800afce:	f002 fba3 	bl	800d718 <pbuf_copy_partial>
    data = httpd_req_buf;
 800afd2:	4b6a      	ldr	r3, [pc, #424]	; (800b17c <http_parse_request+0x244>)
 800afd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd6:	e005      	b.n	800afe4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	895b      	ldrh	r3, [r3, #10]
 800afe2:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800afe4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800afe6:	2b06      	cmp	r3, #6
 800afe8:	f240 80a1 	bls.w	800b12e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800afec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800afee:	461a      	mov	r2, r3
 800aff0:	4963      	ldr	r1, [pc, #396]	; (800b180 <http_parse_request+0x248>)
 800aff2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aff4:	f000 fd3e 	bl	800ba74 <lwip_strnstr>
 800aff8:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8096 	beq.w	800b12e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b00a:	2204      	movs	r2, #4
 800b00c:	495d      	ldr	r1, [pc, #372]	; (800b184 <http_parse_request+0x24c>)
 800b00e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b010:	f00b ff1f 	bl	8016e52 <strncmp>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d103      	bne.n	800b022 <http_parse_request+0xea>
        sp1 = data + 3;
 800b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01c:	3303      	adds	r3, #3
 800b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b020:	e014      	b.n	800b04c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800b022:	2205      	movs	r2, #5
 800b024:	4958      	ldr	r1, [pc, #352]	; (800b188 <http_parse_request+0x250>)
 800b026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b028:	f00b ff13 	bl	8016e52 <strncmp>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d105      	bne.n	800b03e <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	3304      	adds	r3, #4
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b03c:	e006      	b.n	800b04c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800b03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b040:	3304      	adds	r3, #4
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800b046:	f06f 030f 	mvn.w	r3, #15
 800b04a:	e08a      	b.n	800b162 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	b29b      	uxth	r3, r3
 800b056:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05e:	3301      	adds	r3, #1
 800b060:	8bfa      	ldrh	r2, [r7, #30]
 800b062:	494a      	ldr	r1, [pc, #296]	; (800b18c <http_parse_request+0x254>)
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fd05 	bl	800ba74 <lwip_strnstr>
 800b06a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10c      	bne.n	800b08c <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	3301      	adds	r3, #1
 800b076:	8bfa      	ldrh	r2, [r7, #30]
 800b078:	4941      	ldr	r1, [pc, #260]	; (800b180 <http_parse_request+0x248>)
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fcfa 	bl	800ba74 <lwip_strnstr>
 800b080:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b082:	2301      	movs	r3, #1
 800b084:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800b086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d163      	bne.n	800b154 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	3301      	adds	r3, #1
 800b090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d048      	beq.n	800b12e <http_parse_request+0x1f6>
 800b09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d944      	bls.n	800b12e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b0a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4939      	ldr	r1, [pc, #228]	; (800b190 <http_parse_request+0x258>)
 800b0aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0ac:	f000 fce2 	bl	800ba74 <lwip_strnstr>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d03b      	beq.n	800b12e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800b0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	2200      	movs	r2, #0
 800b0c0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b0c2:	8bbb      	ldrh	r3, [r7, #28]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800b0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d026      	beq.n	800b120 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800b0d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	6978      	ldr	r0, [r7, #20]
 800b0ea:	f7ff fe41 	bl	800ad70 <http_post_request>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800b0f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	2220      	movs	r2, #32
 800b104:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800b106:	8bbb      	ldrh	r3, [r7, #28]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	4413      	add	r3, r2
 800b10c:	2220      	movs	r2, #32
 800b10e:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800b110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b114:	f113 0f10 	cmn.w	r3, #16
 800b118:	d01e      	beq.n	800b158 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800b11a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b11e:	e020      	b.n	800b162 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b122:	69b9      	ldr	r1, [r7, #24]
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f000 f887 	bl	800b238 <http_find_file>
 800b12a:	4603      	mov	r3, r0
 800b12c:	e019      	b.n	800b162 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	4618      	mov	r0, r3
 800b134:	f002 f988 	bl	800d448 <pbuf_clen>
 800b138:	4603      	mov	r3, r0
 800b13a:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b146:	d209      	bcs.n	800b15c <http_parse_request+0x224>
 800b148:	8a3b      	ldrh	r3, [r7, #16]
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d806      	bhi.n	800b15c <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b14e:	f06f 0304 	mvn.w	r3, #4
 800b152:	e006      	b.n	800b162 <http_parse_request+0x22a>
          goto badrequest;
 800b154:	bf00      	nop
 800b156:	e002      	b.n	800b15e <http_parse_request+0x226>
              goto badrequest;
 800b158:	bf00      	nop
 800b15a:	e000      	b.n	800b15e <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800b15c:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b15e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b162:	4618      	mov	r0, r3
 800b164:	3740      	adds	r7, #64	; 0x40
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08018d10 	.word	0x08018d10
 800b170:	08018e9c 	.word	0x08018e9c
 800b174:	08018d58 	.word	0x08018d58
 800b178:	08018d80 	.word	0x08018d80
 800b17c:	20004f58 	.word	0x20004f58
 800b180:	08018e04 	.word	0x08018e04
 800b184:	08018ea8 	.word	0x08018ea8
 800b188:	08018eb0 	.word	0x08018eb0
 800b18c:	08018eb8 	.word	0x08018eb8
 800b190:	08018e94 	.word	0x08018e94

0800b194 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d040      	beq.n	800b22a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800b1ac:	213f      	movs	r1, #63	; 0x3f
 800b1ae:	6838      	ldr	r0, [r7, #0]
 800b1b0:	f00b fe3a 	bl	8016e28 <strchr>
 800b1b4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	613b      	str	r3, [r7, #16]
    ext = uri;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b1ca:	212e      	movs	r1, #46	; 0x2e
 800b1cc:	6938      	ldr	r0, [r7, #16]
 800b1ce:	f00b fe2b 	bl	8016e28 <strchr>
 800b1d2:	6138      	str	r0, [r7, #16]
 800b1d4:	e009      	b.n	800b1ea <http_uri_is_ssi+0x56>
      ext = sub;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	617b      	str	r3, [r7, #20]
      sub++;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b1e0:	212e      	movs	r1, #46	; 0x2e
 800b1e2:	6938      	ldr	r0, [r7, #16]
 800b1e4:	f00b fe20 	bl	8016e28 <strchr>
 800b1e8:	6138      	str	r0, [r7, #16]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1f2      	bne.n	800b1d6 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e010      	b.n	800b218 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800b1f6:	4a0f      	ldr	r2, [pc, #60]	; (800b234 <http_uri_is_ssi+0xa0>)
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6978      	ldr	r0, [r7, #20]
 800b202:	f000 fc6d 	bl	800bae0 <lwip_stricmp>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800b20c:	2301      	movs	r3, #1
 800b20e:	76fb      	strb	r3, [r7, #27]
        break;
 800b210:	e005      	b.n	800b21e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d9eb      	bls.n	800b1f6 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <http_uri_is_ssi+0x96>
      *param = '?';
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	223f      	movs	r2, #63	; 0x3f
 800b228:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800b22a:	7efb      	ldrb	r3, [r7, #27]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3720      	adds	r7, #32
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	080228b0 	.word	0x080228b0

0800b238 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b093      	sub	sp, #76	; 0x4c
 800b23c:	af02      	add	r7, sp, #8
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f7f4 ffc5 	bl	80001e4 <strlen>
 800b25a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d072      	beq.n	800b348 <http_find_file+0x110>
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	3b01      	subs	r3, #1
 800b268:	4413      	add	r3, r2
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b2f      	cmp	r3, #47	; 0x2f
 800b26e:	d16b      	bne.n	800b348 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b270:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b272:	4a80      	ldr	r2, [pc, #512]	; (800b474 <http_find_file+0x23c>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d102      	bne.n	800b27e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d164      	bne.n	800b348 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	3b01      	subs	r3, #1
 800b282:	2b3f      	cmp	r3, #63	; 0x3f
 800b284:	bf28      	it	cs
 800b286:	233f      	movcs	r3, #63	; 0x3f
 800b288:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00a      	beq.n	800b2a6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	4619      	mov	r1, r3
 800b296:	4877      	ldr	r0, [pc, #476]	; (800b474 <http_find_file+0x23c>)
 800b298:	f00b fb4d 	bl	8016936 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b29c:	4a75      	ldr	r2, [pc, #468]	; (800b474 <http_find_file+0x23c>)
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2aa:	e04a      	b.n	800b342 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d028      	beq.n	800b304 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b2b8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01e      	beq.n	800b2fe <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b2c0:	4a6d      	ldr	r2, [pc, #436]	; (800b478 <http_find_file+0x240>)
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7f4 ff8b 	bl	80001e4 <strlen>
 800b2ce:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	bf28      	it	cs
 800b2d8:	4613      	movcs	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	4a65      	ldr	r2, [pc, #404]	; (800b474 <http_find_file+0x23c>)
 800b2e0:	1898      	adds	r0, r3, r2
 800b2e2:	4a65      	ldr	r2, [pc, #404]	; (800b478 <http_find_file+0x240>)
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f00b fb22 	bl	8016936 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b2f2:	6a3a      	ldr	r2, [r7, #32]
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	4a5e      	ldr	r2, [pc, #376]	; (800b474 <http_find_file+0x23c>)
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b2fe:	4b5d      	ldr	r3, [pc, #372]	; (800b474 <http_find_file+0x23c>)
 800b300:	62bb      	str	r3, [r7, #40]	; 0x28
 800b302:	e004      	b.n	800b30e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b304:	4a5c      	ldr	r2, [pc, #368]	; (800b478 <http_find_file+0x240>)
 800b306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b30c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fbbc 	bl	8009a90 <fs_open>
 800b318:	4603      	mov	r3, r0
 800b31a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800b31c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10b      	bne.n	800b33c <http_find_file+0x104>
        uri = file_name;
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800b32c:	4a52      	ldr	r2, [pc, #328]	; (800b478 <http_find_file+0x240>)
 800b32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b330:	00db      	lsls	r3, r3, #3
 800b332:	4413      	add	r3, r2
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800b33a:	e005      	b.n	800b348 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33e:	3301      	adds	r3, #1
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	2b04      	cmp	r3, #4
 800b346:	d9b1      	bls.n	800b2ac <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d176      	bne.n	800b43c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	213f      	movs	r1, #63	; 0x3f
 800b352:	4618      	mov	r0, r3
 800b354:	f00b fd68 	bl	8016e28 <strchr>
 800b358:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
      params++;
 800b366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b368:	3301      	adds	r3, #1
 800b36a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800b36c:	4b43      	ldr	r3, [pc, #268]	; (800b47c <http_find_file+0x244>)
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b372:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800b374:	4b42      	ldr	r3, [pc, #264]	; (800b480 <http_find_file+0x248>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d034      	beq.n	800b3e6 <http_find_file+0x1ae>
 800b37c:	4b41      	ldr	r3, [pc, #260]	; (800b484 <http_find_file+0x24c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d030      	beq.n	800b3e6 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b384:	2300      	movs	r3, #0
 800b386:	633b      	str	r3, [r7, #48]	; 0x30
 800b388:	e028      	b.n	800b3dc <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	4b3d      	ldr	r3, [pc, #244]	; (800b484 <http_find_file+0x24c>)
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	4413      	add	r3, r2
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4619      	mov	r1, r3
 800b39a:	f7f4 ff19 	bl	80001d0 <strcmp>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d118      	bne.n	800b3d6 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800b3a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7fe fd26 	bl	8009df8 <extract_uri_parameters>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	4a33      	ldr	r2, [pc, #204]	; (800b47c <http_find_file+0x244>)
 800b3b0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b3b2:	4b34      	ldr	r3, [pc, #208]	; (800b484 <http_find_file+0x24c>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	685c      	ldr	r4, [r3, #4]
 800b3be:	4b2f      	ldr	r3, [pc, #188]	; (800b47c <http_find_file+0x244>)
 800b3c0:	6819      	ldr	r1, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b3cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ce:	47a0      	blx	r4
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	60bb      	str	r3, [r7, #8]
          break;
 800b3d4:	e007      	b.n	800b3e6 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	3301      	adds	r3, #1
 800b3da:	633b      	str	r3, [r7, #48]	; 0x30
 800b3dc:	4b28      	ldr	r3, [pc, #160]	; (800b480 <http_find_file+0x248>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	dbd1      	blt.n	800b38a <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fb4f 	bl	8009a90 <fs_open>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800b3f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	63bb      	str	r3, [r7, #56]	; 0x38
 800b402:	e006      	b.n	800b412 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800b404:	f107 0308 	add.w	r3, r7, #8
 800b408:	4619      	mov	r1, r3
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fc12 	bl	800ac34 <http_get_404_file>
 800b410:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	2b00      	cmp	r3, #0
 800b416:	d011      	beq.n	800b43c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	f003 0308 	and.w	r3, r3, #8
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <http_find_file+0x1f4>
        tag_check = 1;
 800b424:	2301      	movs	r3, #1
 800b426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b42a:	e007      	b.n	800b43c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4619      	mov	r1, r3
 800b430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b432:	f7ff feaf 	bl	800b194 <http_uri_is_ssi>
 800b436:	4603      	mov	r3, r0
 800b438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b442:	f107 0308 	add.w	r3, r7, #8
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7ff fbf3 	bl	800ac34 <http_get_404_file>
 800b44e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	4613      	mov	r3, r2
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f810 	bl	800b488 <http_init_file>
 800b468:	4603      	mov	r3, r0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3744      	adds	r7, #68	; 0x44
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd90      	pop	{r4, r7, pc}
 800b472:	bf00      	nop
 800b474:	20005358 	.word	0x20005358
 800b478:	080228c4 	.word	0x080228c4
 800b47c:	200053ac 	.word	0x200053ac
 800b480:	200053a8 	.word	0x200053a8
 800b484:	200053a4 	.word	0x200053a4

0800b488 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d06f      	beq.n	800b57c <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <http_init_file+0x2a>
 800b4a4:	4b46      	ldr	r3, [pc, #280]	; (800b5c0 <http_init_file+0x138>)
 800b4a6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b4aa:	4946      	ldr	r1, [pc, #280]	; (800b5c4 <http_init_file+0x13c>)
 800b4ac:	4846      	ldr	r0, [pc, #280]	; (800b5c8 <http_init_file+0x140>)
 800b4ae:	f00b facd 	bl	8016a4c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800b4b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01c      	beq.n	800b4f4 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800b4ba:	f7fe fb40 	bl	8009b3e <http_ssi_state_alloc>
 800b4be:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d016      	beq.n	800b4f4 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        ssi->parsed = file->data;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	69fa      	ldr	r2, [r7, #28]
 800b4f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	da06      	bge.n	800b518 <http_init_file+0x90>
 800b50a:	4b2d      	ldr	r3, [pc, #180]	; (800b5c0 <http_init_file+0x138>)
 800b50c:	f640 1234 	movw	r2, #2356	; 0x934
 800b510:	492e      	ldr	r1, [pc, #184]	; (800b5cc <http_init_file+0x144>)
 800b512:	482d      	ldr	r0, [pc, #180]	; (800b5c8 <http_init_file+0x140>)
 800b514:	f00b fa9a 	bl	8016a4c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	461a      	mov	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d032      	beq.n	800b596 <http_init_file+0x10e>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	7c1b      	ldrb	r3, [r3, #16]
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d02b      	beq.n	800b596 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6998      	ldr	r0, [r3, #24]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	461a      	mov	r2, r3
 800b548:	4921      	ldr	r1, [pc, #132]	; (800b5d0 <http_init_file+0x148>)
 800b54a:	f000 fa93 	bl	800ba74 <lwip_strnstr>
 800b54e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d01f      	beq.n	800b596 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	441a      	add	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	1ad2      	subs	r2, r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	625a      	str	r2, [r3, #36]	; 0x24
 800b57a:	e00c      	b.n	800b596 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d006      	beq.n	800b5ac <http_init_file+0x124>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	7c1b      	ldrb	r3, [r3, #16]
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d103      	bne.n	800b5b4 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7fe fd4c 	bl	800a04c <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3720      	adds	r7, #32
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	08018d10 	.word	0x08018d10
 800b5c4:	08018ebc 	.word	0x08018ebc
 800b5c8:	08018d58 	.word	0x08018d58
 800b5cc:	08018ed0 	.word	0x08018ed0
 800b5d0:	08018e94 	.word	0x08018e94

0800b5d4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <http_err+0x1c>
    http_state_free(hs);
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7fe fb1a 	bl	8009c24 <http_state_free>
  }
}
 800b5f0:	bf00      	nop
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	4613      	mov	r3, r2
 800b604:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <http_sent+0x1c>
    return ERR_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	e008      	b.n	800b626 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b61c:	6979      	ldr	r1, [r7, #20]
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f7ff faae 	bl	800ab80 <http_send>

  return ERR_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d107      	bne.n	800b652 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b642:	2100      	movs	r1, #0
 800b644:	6838      	ldr	r0, [r7, #0]
 800b646:	f7fe fbbb 	bl	8009dc0 <http_close_conn>
 800b64a:	4603      	mov	r3, r0
 800b64c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	e021      	b.n	800b696 <http_poll+0x68>
  } else {
    hs->retries++;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b658:	3301      	adds	r3, #1
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d105      	bne.n	800b678 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b66c:	68f9      	ldr	r1, [r7, #12]
 800b66e:	6838      	ldr	r0, [r7, #0]
 800b670:	f7fe fba6 	bl	8009dc0 <http_close_conn>
      return ERR_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	e00e      	b.n	800b696 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b680:	68f9      	ldr	r1, [r7, #12]
 800b682:	6838      	ldr	r0, [r7, #0]
 800b684:	f7ff fa7c 	bl	800ab80 <http_send>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b68e:	6838      	ldr	r0, [r7, #0]
 800b690:	f007 f9c6 	bl	8012a20 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b6b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d105      	bne.n	800b6c6 <http_recv+0x26>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <http_recv+0x26>
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d111      	bne.n	800b6ea <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d008      	beq.n	800b6de <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	891b      	ldrh	r3, [r3, #8]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	68b8      	ldr	r0, [r7, #8]
 800b6d4:	f002 fd98 	bl	800e208 <tcp_recved>
      pbuf_free(p);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 fe27 	bl	800d32c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b6de:	6979      	ldr	r1, [r7, #20]
 800b6e0:	68b8      	ldr	r0, [r7, #8]
 800b6e2:	f7fe fb6d 	bl	8009dc0 <http_close_conn>
    return ERR_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e072      	b.n	800b7d0 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	891b      	ldrh	r3, [r3, #8]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	68b8      	ldr	r0, [r7, #8]
 800b6f2:	f002 fd89 	bl	800e208 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d012      	beq.n	800b726 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	6978      	ldr	r0, [r7, #20]
 800b70c:	f7ff faf0 	bl	800acf0 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b716:	2b00      	cmp	r3, #0
 800b718:	d103      	bne.n	800b722 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800b71a:	6979      	ldr	r1, [r7, #20]
 800b71c:	68b8      	ldr	r0, [r7, #8]
 800b71e:	f7ff fa2f 	bl	800ab80 <http_send>
    }
    return ERR_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	e054      	b.n	800b7d0 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d14c      	bne.n	800b7c8 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	6979      	ldr	r1, [r7, #20]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fc00 	bl	800af38 <http_parse_request>
 800b738:	4603      	mov	r3, r0
 800b73a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b73c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d015      	beq.n	800b770 <http_recv+0xd0>
 800b744:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b748:	f113 0f05 	cmn.w	r3, #5
 800b74c:	d010      	beq.n	800b770 <http_recv+0xd0>
 800b74e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b752:	f113 0f10 	cmn.w	r3, #16
 800b756:	d00b      	beq.n	800b770 <http_recv+0xd0>
 800b758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b75c:	f113 0f08 	cmn.w	r3, #8
 800b760:	d006      	beq.n	800b770 <http_recv+0xd0>
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <http_recv+0x138>)
 800b764:	f640 2204 	movw	r2, #2564	; 0xa04
 800b768:	491c      	ldr	r1, [pc, #112]	; (800b7dc <http_recv+0x13c>)
 800b76a:	481d      	ldr	r0, [pc, #116]	; (800b7e0 <http_recv+0x140>)
 800b76c:	f00b f96e 	bl	8016a4c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b774:	f113 0f05 	cmn.w	r3, #5
 800b778:	d00b      	beq.n	800b792 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d007      	beq.n	800b792 <http_recv+0xf2>
          pbuf_free(hs->req);
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	4618      	mov	r0, r3
 800b788:	f001 fdd0 	bl	800d32c <pbuf_free>
          hs->req = NULL;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2200      	movs	r2, #0
 800b790:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 fdca 	bl	800d32c <pbuf_free>
      if (parsed == ERR_OK) {
 800b798:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d109      	bne.n	800b7b4 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d111      	bne.n	800b7ce <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b7aa:	6979      	ldr	r1, [r7, #20]
 800b7ac:	68b8      	ldr	r0, [r7, #8]
 800b7ae:	f7ff f9e7 	bl	800ab80 <http_send>
 800b7b2:	e00c      	b.n	800b7ce <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800b7b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b7b8:	f113 0f10 	cmn.w	r3, #16
 800b7bc:	d107      	bne.n	800b7ce <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b7be:	6979      	ldr	r1, [r7, #20]
 800b7c0:	68b8      	ldr	r0, [r7, #8]
 800b7c2:	f7fe fafd 	bl	8009dc0 <http_close_conn>
 800b7c6:	e002      	b.n	800b7ce <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fdaf 	bl	800d32c <pbuf_free>
    }
  }
  return ERR_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	08018d10 	.word	0x08018d10
 800b7dc:	08018ef0 	.word	0x08018ef0
 800b7e0:	08018d58 	.word	0x08018d58

0800b7e4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b7f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <http_accept+0x1c>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <http_accept+0x22>
    return ERR_VAL;
 800b800:	f06f 0305 	mvn.w	r3, #5
 800b804:	e025      	b.n	800b852 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b806:	2101      	movs	r1, #1
 800b808:	68b8      	ldr	r0, [r7, #8]
 800b80a:	f003 f9e1 	bl	800ebd0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b80e:	f7fe f9cb 	bl	8009ba8 <http_state_alloc>
 800b812:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d102      	bne.n	800b820 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b81e:	e018      	b.n	800b852 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b826:	6979      	ldr	r1, [r7, #20]
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	f003 fbd1 	bl	800efd0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b82e:	490b      	ldr	r1, [pc, #44]	; (800b85c <http_accept+0x78>)
 800b830:	68b8      	ldr	r0, [r7, #8]
 800b832:	f003 fbdf 	bl	800eff4 <tcp_recv>
  altcp_err(pcb, http_err);
 800b836:	490a      	ldr	r1, [pc, #40]	; (800b860 <http_accept+0x7c>)
 800b838:	68b8      	ldr	r0, [r7, #8]
 800b83a:	f003 fc1f 	bl	800f07c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b83e:	2204      	movs	r2, #4
 800b840:	4908      	ldr	r1, [pc, #32]	; (800b864 <http_accept+0x80>)
 800b842:	68b8      	ldr	r0, [r7, #8]
 800b844:	f003 fc54 	bl	800f0f0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b848:	4907      	ldr	r1, [pc, #28]	; (800b868 <http_accept+0x84>)
 800b84a:	68b8      	ldr	r0, [r7, #8]
 800b84c:	f003 fbf4 	bl	800f038 <tcp_sent>

  return ERR_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	0800b6a1 	.word	0x0800b6a1
 800b860:	0800b5d5 	.word	0x0800b5d5
 800b864:	0800b62f 	.word	0x0800b62f
 800b868:	0800b5f9 	.word	0x0800b5f9

0800b86c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d029      	beq.n	800b8d2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b87e:	2101      	movs	r1, #1
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f003 f9a5 	bl	800ebd0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b886:	887b      	ldrh	r3, [r7, #2]
 800b888:	461a      	mov	r2, r3
 800b88a:	4914      	ldr	r1, [pc, #80]	; (800b8dc <httpd_init_pcb+0x70>)
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f002 faed 	bl	800de6c <tcp_bind>
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d006      	beq.n	800b8ac <httpd_init_pcb+0x40>
 800b89e:	4b10      	ldr	r3, [pc, #64]	; (800b8e0 <httpd_init_pcb+0x74>)
 800b8a0:	f640 2257 	movw	r2, #2647	; 0xa57
 800b8a4:	490f      	ldr	r1, [pc, #60]	; (800b8e4 <httpd_init_pcb+0x78>)
 800b8a6:	4810      	ldr	r0, [pc, #64]	; (800b8e8 <httpd_init_pcb+0x7c>)
 800b8a8:	f00b f8d0 	bl	8016a4c <iprintf>
    pcb = altcp_listen(pcb);
 800b8ac:	21ff      	movs	r1, #255	; 0xff
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f002 fb94 	bl	800dfdc <tcp_listen_with_backlog>
 800b8b4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <httpd_init_pcb+0x5e>
 800b8bc:	4b08      	ldr	r3, [pc, #32]	; (800b8e0 <httpd_init_pcb+0x74>)
 800b8be:	f640 2259 	movw	r2, #2649	; 0xa59
 800b8c2:	490a      	ldr	r1, [pc, #40]	; (800b8ec <httpd_init_pcb+0x80>)
 800b8c4:	4808      	ldr	r0, [pc, #32]	; (800b8e8 <httpd_init_pcb+0x7c>)
 800b8c6:	f00b f8c1 	bl	8016a4c <iprintf>
    altcp_accept(pcb, http_accept);
 800b8ca:	4909      	ldr	r1, [pc, #36]	; (800b8f0 <httpd_init_pcb+0x84>)
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f003 fbf7 	bl	800f0c0 <tcp_accept>
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	08022a0c 	.word	0x08022a0c
 800b8e0:	08018d10 	.word	0x08018d10
 800b8e4:	08018f1c 	.word	0x08018f1c
 800b8e8:	08018d58 	.word	0x08018d58
 800b8ec:	08018f38 	.word	0x08018f38
 800b8f0:	0800b7e5 	.word	0x0800b7e5

0800b8f4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b8fa:	202e      	movs	r0, #46	; 0x2e
 800b8fc:	f003 fb5a 	bl	800efb4 <tcp_new_ip_type>
 800b900:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <httpd_init+0x22>
 800b908:	4b07      	ldr	r3, [pc, #28]	; (800b928 <httpd_init+0x34>)
 800b90a:	f640 2272 	movw	r2, #2674	; 0xa72
 800b90e:	4907      	ldr	r1, [pc, #28]	; (800b92c <httpd_init+0x38>)
 800b910:	4807      	ldr	r0, [pc, #28]	; (800b930 <httpd_init+0x3c>)
 800b912:	f00b f89b 	bl	8016a4c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b916:	2150      	movs	r1, #80	; 0x50
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff ffa7 	bl	800b86c <httpd_init_pcb>
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	08018d10 	.word	0x08018d10
 800b92c:	08018f58 	.word	0x08018f58
 800b930:	08018d58 	.word	0x08018d58

0800b934 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <http_set_ssi_handler+0x20>
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <http_set_ssi_handler+0x64>)
 800b948:	f640 2297 	movw	r2, #2711	; 0xa97
 800b94c:	4913      	ldr	r1, [pc, #76]	; (800b99c <http_set_ssi_handler+0x68>)
 800b94e:	4814      	ldr	r0, [pc, #80]	; (800b9a0 <http_set_ssi_handler+0x6c>)
 800b950:	f00b f87c 	bl	8016a4c <iprintf>
  httpd_ssi_handler = ssi_handler;
 800b954:	4a13      	ldr	r2, [pc, #76]	; (800b9a4 <http_set_ssi_handler+0x70>)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <http_set_ssi_handler+0x3a>
 800b960:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <http_set_ssi_handler+0x64>)
 800b962:	f640 229e 	movw	r2, #2718	; 0xa9e
 800b966:	4910      	ldr	r1, [pc, #64]	; (800b9a8 <http_set_ssi_handler+0x74>)
 800b968:	480d      	ldr	r0, [pc, #52]	; (800b9a0 <http_set_ssi_handler+0x6c>)
 800b96a:	f00b f86f 	bl	8016a4c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc06      	bgt.n	800b982 <http_set_ssi_handler+0x4e>
 800b974:	4b08      	ldr	r3, [pc, #32]	; (800b998 <http_set_ssi_handler+0x64>)
 800b976:	f640 229f 	movw	r2, #2719	; 0xa9f
 800b97a:	490c      	ldr	r1, [pc, #48]	; (800b9ac <http_set_ssi_handler+0x78>)
 800b97c:	4808      	ldr	r0, [pc, #32]	; (800b9a0 <http_set_ssi_handler+0x6c>)
 800b97e:	f00b f865 	bl	8016a4c <iprintf>

  httpd_tags = tags;
 800b982:	4a0b      	ldr	r2, [pc, #44]	; (800b9b0 <http_set_ssi_handler+0x7c>)
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800b988:	4a0a      	ldr	r2, [pc, #40]	; (800b9b4 <http_set_ssi_handler+0x80>)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800b98e:	bf00      	nop
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	08018d10 	.word	0x08018d10
 800b99c:	08018f74 	.word	0x08018f74
 800b9a0:	08018d58 	.word	0x08018d58
 800b9a4:	20005398 	.word	0x20005398
 800b9a8:	08018f8c 	.word	0x08018f8c
 800b9ac:	08018f9c 	.word	0x08018f9c
 800b9b0:	200053a0 	.word	0x200053a0
 800b9b4:	2000539c 	.word	0x2000539c

0800b9b8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d106      	bne.n	800b9d6 <http_set_cgi_handlers+0x1e>
 800b9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ba00 <http_set_cgi_handlers+0x48>)
 800b9ca:	f640 22b2 	movw	r2, #2738	; 0xab2
 800b9ce:	490d      	ldr	r1, [pc, #52]	; (800ba04 <http_set_cgi_handlers+0x4c>)
 800b9d0:	480d      	ldr	r0, [pc, #52]	; (800ba08 <http_set_cgi_handlers+0x50>)
 800b9d2:	f00b f83b 	bl	8016a4c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dc06      	bgt.n	800b9ea <http_set_cgi_handlers+0x32>
 800b9dc:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <http_set_cgi_handlers+0x48>)
 800b9de:	f640 22b3 	movw	r2, #2739	; 0xab3
 800b9e2:	490a      	ldr	r1, [pc, #40]	; (800ba0c <http_set_cgi_handlers+0x54>)
 800b9e4:	4808      	ldr	r0, [pc, #32]	; (800ba08 <http_set_cgi_handlers+0x50>)
 800b9e6:	f00b f831 	bl	8016a4c <iprintf>

  httpd_cgis = cgis;
 800b9ea:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <http_set_cgi_handlers+0x58>)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800b9f0:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <http_set_cgi_handlers+0x5c>)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	6013      	str	r3, [r2, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08018d10 	.word	0x08018d10
 800ba04:	08018fb4 	.word	0x08018fb4
 800ba08:	08018d58 	.word	0x08018d58
 800ba0c:	08018fc4 	.word	0x08018fc4
 800ba10:	200053a4 	.word	0x200053a4
 800ba14:	200053a8 	.word	0x200053a8

0800ba18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	021b      	lsls	r3, r3, #8
 800ba26:	b21a      	sxth	r2, r3
 800ba28:	88fb      	ldrh	r3, [r7, #6]
 800ba2a:	0a1b      	lsrs	r3, r3, #8
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	b21b      	sxth	r3, r3
 800ba30:	4313      	orrs	r3, r2
 800ba32:	b21b      	sxth	r3, r3
 800ba34:	b29b      	uxth	r3, r3
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	061a      	lsls	r2, r3, #24
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	0a1b      	lsrs	r3, r3, #8
 800ba5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba60:	431a      	orrs	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	0e1b      	lsrs	r3, r3, #24
 800ba66:	4313      	orrs	r3, r2
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ba80:	68b8      	ldr	r0, [r7, #8]
 800ba82:	f7f4 fbaf 	bl	80001e4 <strlen>
 800ba86:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	e022      	b.n	800bad8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e012      	b.n	800babe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	781a      	ldrb	r2, [r3, #0]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d109      	bne.n	800bab8 <lwip_strnstr+0x44>
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	68b9      	ldr	r1, [r7, #8]
 800baa8:	6978      	ldr	r0, [r7, #20]
 800baaa:	f00b f9d2 	bl	8016e52 <strncmp>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	e00f      	b.n	800bad8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	3301      	adds	r3, #1
 800babc:	617b      	str	r3, [r7, #20]
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d007      	beq.n	800bad6 <lwip_strnstr+0x62>
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	441a      	add	r2, r3
 800bacc:	68f9      	ldr	r1, [r7, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	440b      	add	r3, r1
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d9e0      	bls.n	800ba98 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	603a      	str	r2, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800bafe:	7bfa      	ldrb	r2, [r7, #15]
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d016      	beq.n	800bb34 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	f043 0320 	orr.w	r3, r3, #32
 800bb0c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800bb0e:	7b7b      	ldrb	r3, [r7, #13]
 800bb10:	2b60      	cmp	r3, #96	; 0x60
 800bb12:	d90c      	bls.n	800bb2e <lwip_stricmp+0x4e>
 800bb14:	7b7b      	ldrb	r3, [r7, #13]
 800bb16:	2b7a      	cmp	r3, #122	; 0x7a
 800bb18:	d809      	bhi.n	800bb2e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	f043 0320 	orr.w	r3, r3, #32
 800bb20:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800bb22:	7b7a      	ldrb	r2, [r7, #13]
 800bb24:	7b3b      	ldrb	r3, [r7, #12]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d003      	beq.n	800bb32 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e006      	b.n	800bb3c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e004      	b.n	800bb3c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800bb32:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1d7      	bne.n	800baea <lwip_stricmp+0xa>
  return 0;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
  char *res = result;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfb8      	it	lt
 800bb68:	425b      	neglt	r3, r3
 800bb6a:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d806      	bhi.n	800bb80 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d154      	bne.n	800bc22 <lwip_itoa+0xda>
      *result = 0;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	701a      	strb	r2, [r3, #0]
    }
    return;
 800bb7e:	e050      	b.n	800bc22 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	da04      	bge.n	800bb90 <lwip_itoa+0x48>
    *res++ = '-';
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	1c5a      	adds	r2, r3, #1
 800bb8a:	61fa      	str	r2, [r7, #28]
 800bb8c:	222d      	movs	r2, #45	; 0x2d
 800bb8e:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800bb96:	e01c      	b.n	800bbd2 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <lwip_itoa+0xe4>)
 800bb9c:	fb83 1302 	smull	r1, r3, r3, r2
 800bba0:	1099      	asrs	r1, r3, #2
 800bba2:	17d3      	asrs	r3, r2, #31
 800bba4:	1ac9      	subs	r1, r1, r3
 800bba6:	460b      	mov	r3, r1
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	440b      	add	r3, r1
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	1ad1      	subs	r1, r2, r3
 800bbb0:	b2cb      	uxtb	r3, r1
 800bbb2:	3330      	adds	r3, #48	; 0x30
 800bbb4:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	7cfa      	ldrb	r2, [r7, #19]
 800bbc0:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	4a19      	ldr	r2, [pc, #100]	; (800bc2c <lwip_itoa+0xe4>)
 800bbc6:	fb82 1203 	smull	r1, r2, r2, r3
 800bbca:	1092      	asrs	r2, r2, #2
 800bbcc:	17db      	asrs	r3, r3, #31
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <lwip_itoa+0x98>
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d8db      	bhi.n	800bb98 <lwip_itoa+0x50>
  }
  if (n) {
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
    return;
 800bbec:	e01a      	b.n	800bc24 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	61fa      	str	r2, [r7, #28]
 800bbfc:	2230      	movs	r2, #48	; 0x30
 800bbfe:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	61fa      	str	r2, [r7, #28]
 800bc06:	2200      	movs	r2, #0
 800bc08:	701a      	strb	r2, [r3, #0]
    return;
 800bc0a:	e00b      	b.n	800bc24 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	441a      	add	r2, r3
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	461a      	mov	r2, r3
 800bc18:	69b9      	ldr	r1, [r7, #24]
 800bc1a:	69f8      	ldr	r0, [r7, #28]
 800bc1c:	f00a fe99 	bl	8016952 <memmove>
 800bc20:	e000      	b.n	800bc24 <lwip_itoa+0xdc>
    return;
 800bc22:	bf00      	nop
}
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	66666667 	.word	0x66666667

0800bc30 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bc3a:	f00a fcd1 	bl	80165e0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bc3e:	f000 f8d5 	bl	800bdec <mem_init>
  memp_init();
 800bc42:	f000 fc31 	bl	800c4a8 <memp_init>
  pbuf_init();
  netif_init();
 800bc46:	f000 fcf7 	bl	800c638 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc4a:	f007 ffd9 	bl	8013c00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc4e:	f001 fe07 	bl	800d860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc52:	f007 ff1b 	bl	8013a8c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc6a:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <ptr_to_mem+0x20>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	88fb      	ldrh	r3, [r7, #6]
 800bc70:	4413      	add	r3, r2
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	200053b0 	.word	0x200053b0

0800bc84 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc8c:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <mem_to_ptr+0x20>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	b29b      	uxth	r3, r3
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	200053b0 	.word	0x200053b0

0800bca8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bca8:	b590      	push	{r4, r7, lr}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bcb0:	4b45      	ldr	r3, [pc, #276]	; (800bdc8 <plug_holes+0x120>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d206      	bcs.n	800bcc8 <plug_holes+0x20>
 800bcba:	4b44      	ldr	r3, [pc, #272]	; (800bdcc <plug_holes+0x124>)
 800bcbc:	f240 12df 	movw	r2, #479	; 0x1df
 800bcc0:	4943      	ldr	r1, [pc, #268]	; (800bdd0 <plug_holes+0x128>)
 800bcc2:	4844      	ldr	r0, [pc, #272]	; (800bdd4 <plug_holes+0x12c>)
 800bcc4:	f00a fec2 	bl	8016a4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bcc8:	4b43      	ldr	r3, [pc, #268]	; (800bdd8 <plug_holes+0x130>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d306      	bcc.n	800bce0 <plug_holes+0x38>
 800bcd2:	4b3e      	ldr	r3, [pc, #248]	; (800bdcc <plug_holes+0x124>)
 800bcd4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bcd8:	4940      	ldr	r1, [pc, #256]	; (800bddc <plug_holes+0x134>)
 800bcda:	483e      	ldr	r0, [pc, #248]	; (800bdd4 <plug_holes+0x12c>)
 800bcdc:	f00a feb6 	bl	8016a4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	791b      	ldrb	r3, [r3, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d006      	beq.n	800bcf6 <plug_holes+0x4e>
 800bce8:	4b38      	ldr	r3, [pc, #224]	; (800bdcc <plug_holes+0x124>)
 800bcea:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bcee:	493c      	ldr	r1, [pc, #240]	; (800bde0 <plug_holes+0x138>)
 800bcf0:	4838      	ldr	r0, [pc, #224]	; (800bdd4 <plug_holes+0x12c>)
 800bcf2:	f00a feab 	bl	8016a4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcfe:	d906      	bls.n	800bd0e <plug_holes+0x66>
 800bd00:	4b32      	ldr	r3, [pc, #200]	; (800bdcc <plug_holes+0x124>)
 800bd02:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bd06:	4937      	ldr	r1, [pc, #220]	; (800bde4 <plug_holes+0x13c>)
 800bd08:	4832      	ldr	r0, [pc, #200]	; (800bdd4 <plug_holes+0x12c>)
 800bd0a:	f00a fe9f 	bl	8016a4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ffa4 	bl	800bc60 <ptr_to_mem>
 800bd18:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d024      	beq.n	800bd6c <plug_holes+0xc4>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	791b      	ldrb	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d120      	bne.n	800bd6c <plug_holes+0xc4>
 800bd2a:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <plug_holes+0x130>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d01b      	beq.n	800bd6c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <plug_holes+0x140>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d102      	bne.n	800bd44 <plug_holes+0x9c>
      lfree = mem;
 800bd3e:	4a2a      	ldr	r2, [pc, #168]	; (800bde8 <plug_holes+0x140>)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	881a      	ldrh	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd54:	d00a      	beq.n	800bd6c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	881b      	ldrh	r3, [r3, #0]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff ff80 	bl	800bc60 <ptr_to_mem>
 800bd60:	4604      	mov	r4, r0
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff ff8e 	bl	800bc84 <mem_to_ptr>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	885b      	ldrh	r3, [r3, #2]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff ff75 	bl	800bc60 <ptr_to_mem>
 800bd76:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d01f      	beq.n	800bdc0 <plug_holes+0x118>
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d11b      	bne.n	800bdc0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd88:	4b17      	ldr	r3, [pc, #92]	; (800bde8 <plug_holes+0x140>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d102      	bne.n	800bd98 <plug_holes+0xf0>
      lfree = pmem;
 800bd92:	4a15      	ldr	r2, [pc, #84]	; (800bde8 <plug_holes+0x140>)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	881a      	ldrh	r2, [r3, #0]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bda8:	d00a      	beq.n	800bdc0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff ff56 	bl	800bc60 <ptr_to_mem>
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	68b8      	ldr	r0, [r7, #8]
 800bdb8:	f7ff ff64 	bl	800bc84 <mem_to_ptr>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd90      	pop	{r4, r7, pc}
 800bdc8:	200053b0 	.word	0x200053b0
 800bdcc:	08018fe0 	.word	0x08018fe0
 800bdd0:	08019010 	.word	0x08019010
 800bdd4:	08019028 	.word	0x08019028
 800bdd8:	200053b4 	.word	0x200053b4
 800bddc:	08019050 	.word	0x08019050
 800bde0:	0801906c 	.word	0x0801906c
 800bde4:	08019088 	.word	0x08019088
 800bde8:	200053bc 	.word	0x200053bc

0800bdec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bdf2:	4b1f      	ldr	r3, [pc, #124]	; (800be70 <mem_init+0x84>)
 800bdf4:	3303      	adds	r3, #3
 800bdf6:	f023 0303 	bic.w	r3, r3, #3
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <mem_init+0x88>)
 800bdfe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800be00:	4b1c      	ldr	r3, [pc, #112]	; (800be74 <mem_init+0x88>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800be1a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800be1e:	f7ff ff1f 	bl	800bc60 <ptr_to_mem>
 800be22:	4603      	mov	r3, r0
 800be24:	4a14      	ldr	r2, [pc, #80]	; (800be78 <mem_init+0x8c>)
 800be26:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800be28:	4b13      	ldr	r3, [pc, #76]	; (800be78 <mem_init+0x8c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2201      	movs	r2, #1
 800be2e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800be30:	4b11      	ldr	r3, [pc, #68]	; (800be78 <mem_init+0x8c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be38:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800be3a:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <mem_init+0x8c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be42:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800be44:	4b0b      	ldr	r3, [pc, #44]	; (800be74 <mem_init+0x88>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a0c      	ldr	r2, [pc, #48]	; (800be7c <mem_init+0x90>)
 800be4a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800be4c:	480c      	ldr	r0, [pc, #48]	; (800be80 <mem_init+0x94>)
 800be4e:	f00a fbd3 	bl	80165f8 <sys_mutex_new>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d006      	beq.n	800be66 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <mem_init+0x98>)
 800be5a:	f240 221f 	movw	r2, #543	; 0x21f
 800be5e:	490a      	ldr	r1, [pc, #40]	; (800be88 <mem_init+0x9c>)
 800be60:	480a      	ldr	r0, [pc, #40]	; (800be8c <mem_init+0xa0>)
 800be62:	f00a fdf3 	bl	8016a4c <iprintf>
  }
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2000fef8 	.word	0x2000fef8
 800be74:	200053b0 	.word	0x200053b0
 800be78:	200053b4 	.word	0x200053b4
 800be7c:	200053bc 	.word	0x200053bc
 800be80:	200053b8 	.word	0x200053b8
 800be84:	08018fe0 	.word	0x08018fe0
 800be88:	080190b4 	.word	0x080190b4
 800be8c:	08019028 	.word	0x08019028

0800be90 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7ff fef3 	bl	800bc84 <mem_to_ptr>
 800be9e:	4603      	mov	r3, r0
 800bea0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff feda 	bl	800bc60 <ptr_to_mem>
 800beac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff fed4 	bl	800bc60 <ptr_to_mem>
 800beb8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bec2:	d818      	bhi.n	800bef6 <mem_link_valid+0x66>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	885b      	ldrh	r3, [r3, #2]
 800bec8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800becc:	d813      	bhi.n	800bef6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bed2:	8afa      	ldrh	r2, [r7, #22]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d004      	beq.n	800bee2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	8afa      	ldrh	r2, [r7, #22]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d109      	bne.n	800bef6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bee2:	4b08      	ldr	r3, [pc, #32]	; (800bf04 <mem_link_valid+0x74>)
 800bee4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d006      	beq.n	800befa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	885b      	ldrh	r3, [r3, #2]
 800bef0:	8afa      	ldrh	r2, [r7, #22]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d001      	beq.n	800befa <mem_link_valid+0x6a>
    return 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e000      	b.n	800befc <mem_link_valid+0x6c>
  }
  return 1;
 800befa:	2301      	movs	r3, #1
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200053b4 	.word	0x200053b4

0800bf08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d070      	beq.n	800bff8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00d      	beq.n	800bf3c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bf20:	4b37      	ldr	r3, [pc, #220]	; (800c000 <mem_free+0xf8>)
 800bf22:	f240 2273 	movw	r2, #627	; 0x273
 800bf26:	4937      	ldr	r1, [pc, #220]	; (800c004 <mem_free+0xfc>)
 800bf28:	4837      	ldr	r0, [pc, #220]	; (800c008 <mem_free+0x100>)
 800bf2a:	f00a fd8f 	bl	8016a4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf2e:	f00a fbb5 	bl	801669c <sys_arch_protect>
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f00a fbbf 	bl	80166b8 <sys_arch_unprotect>
    return;
 800bf3a:	e05e      	b.n	800bffa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3b08      	subs	r3, #8
 800bf40:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bf42:	4b32      	ldr	r3, [pc, #200]	; (800c00c <mem_free+0x104>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d306      	bcc.n	800bf5a <mem_free+0x52>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f103 020c 	add.w	r2, r3, #12
 800bf52:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <mem_free+0x108>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d90d      	bls.n	800bf76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf5a:	4b29      	ldr	r3, [pc, #164]	; (800c000 <mem_free+0xf8>)
 800bf5c:	f240 227f 	movw	r2, #639	; 0x27f
 800bf60:	492c      	ldr	r1, [pc, #176]	; (800c014 <mem_free+0x10c>)
 800bf62:	4829      	ldr	r0, [pc, #164]	; (800c008 <mem_free+0x100>)
 800bf64:	f00a fd72 	bl	8016a4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf68:	f00a fb98 	bl	801669c <sys_arch_protect>
 800bf6c:	6138      	str	r0, [r7, #16]
 800bf6e:	6938      	ldr	r0, [r7, #16]
 800bf70:	f00a fba2 	bl	80166b8 <sys_arch_unprotect>
    return;
 800bf74:	e041      	b.n	800bffa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf76:	4828      	ldr	r0, [pc, #160]	; (800c018 <mem_free+0x110>)
 800bf78:	f00a fb54 	bl	8016624 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	791b      	ldrb	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d110      	bne.n	800bfa6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bf84:	4b1e      	ldr	r3, [pc, #120]	; (800c000 <mem_free+0xf8>)
 800bf86:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bf8a:	4924      	ldr	r1, [pc, #144]	; (800c01c <mem_free+0x114>)
 800bf8c:	481e      	ldr	r0, [pc, #120]	; (800c008 <mem_free+0x100>)
 800bf8e:	f00a fd5d 	bl	8016a4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bf92:	4821      	ldr	r0, [pc, #132]	; (800c018 <mem_free+0x110>)
 800bf94:	f00a fb55 	bl	8016642 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf98:	f00a fb80 	bl	801669c <sys_arch_protect>
 800bf9c:	6178      	str	r0, [r7, #20]
 800bf9e:	6978      	ldr	r0, [r7, #20]
 800bfa0:	f00a fb8a 	bl	80166b8 <sys_arch_unprotect>
    return;
 800bfa4:	e029      	b.n	800bffa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bfa6:	69f8      	ldr	r0, [r7, #28]
 800bfa8:	f7ff ff72 	bl	800be90 <mem_link_valid>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d110      	bne.n	800bfd4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bfb2:	4b13      	ldr	r3, [pc, #76]	; (800c000 <mem_free+0xf8>)
 800bfb4:	f240 2295 	movw	r2, #661	; 0x295
 800bfb8:	4919      	ldr	r1, [pc, #100]	; (800c020 <mem_free+0x118>)
 800bfba:	4813      	ldr	r0, [pc, #76]	; (800c008 <mem_free+0x100>)
 800bfbc:	f00a fd46 	bl	8016a4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bfc0:	4815      	ldr	r0, [pc, #84]	; (800c018 <mem_free+0x110>)
 800bfc2:	f00a fb3e 	bl	8016642 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfc6:	f00a fb69 	bl	801669c <sys_arch_protect>
 800bfca:	61b8      	str	r0, [r7, #24]
 800bfcc:	69b8      	ldr	r0, [r7, #24]
 800bfce:	f00a fb73 	bl	80166b8 <sys_arch_unprotect>
    return;
 800bfd2:	e012      	b.n	800bffa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bfda:	4b12      	ldr	r3, [pc, #72]	; (800c024 <mem_free+0x11c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	69fa      	ldr	r2, [r7, #28]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d202      	bcs.n	800bfea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bfe4:	4a0f      	ldr	r2, [pc, #60]	; (800c024 <mem_free+0x11c>)
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bfea:	69f8      	ldr	r0, [r7, #28]
 800bfec:	f7ff fe5c 	bl	800bca8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bff0:	4809      	ldr	r0, [pc, #36]	; (800c018 <mem_free+0x110>)
 800bff2:	f00a fb26 	bl	8016642 <sys_mutex_unlock>
 800bff6:	e000      	b.n	800bffa <mem_free+0xf2>
    return;
 800bff8:	bf00      	nop
}
 800bffa:	3720      	adds	r7, #32
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	08018fe0 	.word	0x08018fe0
 800c004:	080190d0 	.word	0x080190d0
 800c008:	08019028 	.word	0x08019028
 800c00c:	200053b0 	.word	0x200053b0
 800c010:	200053b4 	.word	0x200053b4
 800c014:	080190f4 	.word	0x080190f4
 800c018:	200053b8 	.word	0x200053b8
 800c01c:	08019110 	.word	0x08019110
 800c020:	08019138 	.word	0x08019138
 800c024:	200053bc 	.word	0x200053bc

0800c028 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c034:	887b      	ldrh	r3, [r7, #2]
 800c036:	3303      	adds	r3, #3
 800c038:	b29b      	uxth	r3, r3
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c040:	8bfb      	ldrh	r3, [r7, #30]
 800c042:	2b0b      	cmp	r3, #11
 800c044:	d801      	bhi.n	800c04a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c046:	230c      	movs	r3, #12
 800c048:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c04a:	8bfb      	ldrh	r3, [r7, #30]
 800c04c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c050:	d803      	bhi.n	800c05a <mem_trim+0x32>
 800c052:	8bfa      	ldrh	r2, [r7, #30]
 800c054:	887b      	ldrh	r3, [r7, #2]
 800c056:	429a      	cmp	r2, r3
 800c058:	d201      	bcs.n	800c05e <mem_trim+0x36>
    return NULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	e0d8      	b.n	800c210 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c05e:	4b6e      	ldr	r3, [pc, #440]	; (800c218 <mem_trim+0x1f0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d304      	bcc.n	800c072 <mem_trim+0x4a>
 800c068:	4b6c      	ldr	r3, [pc, #432]	; (800c21c <mem_trim+0x1f4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d306      	bcc.n	800c080 <mem_trim+0x58>
 800c072:	4b6b      	ldr	r3, [pc, #428]	; (800c220 <mem_trim+0x1f8>)
 800c074:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c078:	496a      	ldr	r1, [pc, #424]	; (800c224 <mem_trim+0x1fc>)
 800c07a:	486b      	ldr	r0, [pc, #428]	; (800c228 <mem_trim+0x200>)
 800c07c:	f00a fce6 	bl	8016a4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c080:	4b65      	ldr	r3, [pc, #404]	; (800c218 <mem_trim+0x1f0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	429a      	cmp	r2, r3
 800c088:	d304      	bcc.n	800c094 <mem_trim+0x6c>
 800c08a:	4b64      	ldr	r3, [pc, #400]	; (800c21c <mem_trim+0x1f4>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d307      	bcc.n	800c0a4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c094:	f00a fb02 	bl	801669c <sys_arch_protect>
 800c098:	60b8      	str	r0, [r7, #8]
 800c09a:	68b8      	ldr	r0, [r7, #8]
 800c09c:	f00a fb0c 	bl	80166b8 <sys_arch_unprotect>
    return rmem;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	e0b5      	b.n	800c210 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3b08      	subs	r3, #8
 800c0a8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c0aa:	69b8      	ldr	r0, [r7, #24]
 800c0ac:	f7ff fdea 	bl	800bc84 <mem_to_ptr>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	881a      	ldrh	r2, [r3, #0]
 800c0b8:	8afb      	ldrh	r3, [r7, #22]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b08      	subs	r3, #8
 800c0c0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c0c2:	8bfa      	ldrh	r2, [r7, #30]
 800c0c4:	8abb      	ldrh	r3, [r7, #20]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d906      	bls.n	800c0d8 <mem_trim+0xb0>
 800c0ca:	4b55      	ldr	r3, [pc, #340]	; (800c220 <mem_trim+0x1f8>)
 800c0cc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c0d0:	4956      	ldr	r1, [pc, #344]	; (800c22c <mem_trim+0x204>)
 800c0d2:	4855      	ldr	r0, [pc, #340]	; (800c228 <mem_trim+0x200>)
 800c0d4:	f00a fcba 	bl	8016a4c <iprintf>
  if (newsize > size) {
 800c0d8:	8bfa      	ldrh	r2, [r7, #30]
 800c0da:	8abb      	ldrh	r3, [r7, #20]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d901      	bls.n	800c0e4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	e095      	b.n	800c210 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c0e4:	8bfa      	ldrh	r2, [r7, #30]
 800c0e6:	8abb      	ldrh	r3, [r7, #20]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d101      	bne.n	800c0f0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	e08f      	b.n	800c210 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c0f0:	484f      	ldr	r0, [pc, #316]	; (800c230 <mem_trim+0x208>)
 800c0f2:	f00a fa97 	bl	8016624 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff fdb0 	bl	800bc60 <ptr_to_mem>
 800c100:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	791b      	ldrb	r3, [r3, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d13f      	bne.n	800c18a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c112:	d106      	bne.n	800c122 <mem_trim+0xfa>
 800c114:	4b42      	ldr	r3, [pc, #264]	; (800c220 <mem_trim+0x1f8>)
 800c116:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c11a:	4946      	ldr	r1, [pc, #280]	; (800c234 <mem_trim+0x20c>)
 800c11c:	4842      	ldr	r0, [pc, #264]	; (800c228 <mem_trim+0x200>)
 800c11e:	f00a fc95 	bl	8016a4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	881b      	ldrh	r3, [r3, #0]
 800c126:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c128:	8afa      	ldrh	r2, [r7, #22]
 800c12a:	8bfb      	ldrh	r3, [r7, #30]
 800c12c:	4413      	add	r3, r2
 800c12e:	b29b      	uxth	r3, r3
 800c130:	3308      	adds	r3, #8
 800c132:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c134:	4b40      	ldr	r3, [pc, #256]	; (800c238 <mem_trim+0x210>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d106      	bne.n	800c14c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c13e:	89fb      	ldrh	r3, [r7, #14]
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff fd8d 	bl	800bc60 <ptr_to_mem>
 800c146:	4603      	mov	r3, r0
 800c148:	4a3b      	ldr	r2, [pc, #236]	; (800c238 <mem_trim+0x210>)
 800c14a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c14c:	89fb      	ldrh	r3, [r7, #14]
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff fd86 	bl	800bc60 <ptr_to_mem>
 800c154:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2200      	movs	r2, #0
 800c15a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	89ba      	ldrh	r2, [r7, #12]
 800c160:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	8afa      	ldrh	r2, [r7, #22]
 800c166:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	89fa      	ldrh	r2, [r7, #14]
 800c16c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c176:	d047      	beq.n	800c208 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fd6f 	bl	800bc60 <ptr_to_mem>
 800c182:	4602      	mov	r2, r0
 800c184:	89fb      	ldrh	r3, [r7, #14]
 800c186:	8053      	strh	r3, [r2, #2]
 800c188:	e03e      	b.n	800c208 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c18a:	8bfb      	ldrh	r3, [r7, #30]
 800c18c:	f103 0214 	add.w	r2, r3, #20
 800c190:	8abb      	ldrh	r3, [r7, #20]
 800c192:	429a      	cmp	r2, r3
 800c194:	d838      	bhi.n	800c208 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c196:	8afa      	ldrh	r2, [r7, #22]
 800c198:	8bfb      	ldrh	r3, [r7, #30]
 800c19a:	4413      	add	r3, r2
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	3308      	adds	r3, #8
 800c1a0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1aa:	d106      	bne.n	800c1ba <mem_trim+0x192>
 800c1ac:	4b1c      	ldr	r3, [pc, #112]	; (800c220 <mem_trim+0x1f8>)
 800c1ae:	f240 3216 	movw	r2, #790	; 0x316
 800c1b2:	4920      	ldr	r1, [pc, #128]	; (800c234 <mem_trim+0x20c>)
 800c1b4:	481c      	ldr	r0, [pc, #112]	; (800c228 <mem_trim+0x200>)
 800c1b6:	f00a fc49 	bl	8016a4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c1ba:	89fb      	ldrh	r3, [r7, #14]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff fd4f 	bl	800bc60 <ptr_to_mem>
 800c1c2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c1c4:	4b1c      	ldr	r3, [pc, #112]	; (800c238 <mem_trim+0x210>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d202      	bcs.n	800c1d4 <mem_trim+0x1ac>
      lfree = mem2;
 800c1ce:	4a1a      	ldr	r2, [pc, #104]	; (800c238 <mem_trim+0x210>)
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	881a      	ldrh	r2, [r3, #0]
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	8afa      	ldrh	r2, [r7, #22]
 800c1e6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	89fa      	ldrh	r2, [r7, #14]
 800c1ec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1f6:	d007      	beq.n	800c208 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fd2f 	bl	800bc60 <ptr_to_mem>
 800c202:	4602      	mov	r2, r0
 800c204:	89fb      	ldrh	r3, [r7, #14]
 800c206:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c208:	4809      	ldr	r0, [pc, #36]	; (800c230 <mem_trim+0x208>)
 800c20a:	f00a fa1a 	bl	8016642 <sys_mutex_unlock>
  return rmem;
 800c20e:	687b      	ldr	r3, [r7, #4]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3720      	adds	r7, #32
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	200053b0 	.word	0x200053b0
 800c21c:	200053b4 	.word	0x200053b4
 800c220:	08018fe0 	.word	0x08018fe0
 800c224:	0801916c 	.word	0x0801916c
 800c228:	08019028 	.word	0x08019028
 800c22c:	08019184 	.word	0x08019184
 800c230:	200053b8 	.word	0x200053b8
 800c234:	080191a4 	.word	0x080191a4
 800c238:	200053bc 	.word	0x200053bc

0800c23c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <mem_malloc+0x14>
    return NULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	e0e2      	b.n	800c416 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c250:	88fb      	ldrh	r3, [r7, #6]
 800c252:	3303      	adds	r3, #3
 800c254:	b29b      	uxth	r3, r3
 800c256:	f023 0303 	bic.w	r3, r3, #3
 800c25a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c25c:	8bbb      	ldrh	r3, [r7, #28]
 800c25e:	2b0b      	cmp	r3, #11
 800c260:	d801      	bhi.n	800c266 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c262:	230c      	movs	r3, #12
 800c264:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c266:	8bbb      	ldrh	r3, [r7, #28]
 800c268:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c26c:	d803      	bhi.n	800c276 <mem_malloc+0x3a>
 800c26e:	8bba      	ldrh	r2, [r7, #28]
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	429a      	cmp	r2, r3
 800c274:	d201      	bcs.n	800c27a <mem_malloc+0x3e>
    return NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	e0cd      	b.n	800c416 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c27a:	4869      	ldr	r0, [pc, #420]	; (800c420 <mem_malloc+0x1e4>)
 800c27c:	f00a f9d2 	bl	8016624 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c280:	4b68      	ldr	r3, [pc, #416]	; (800c424 <mem_malloc+0x1e8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fcfd 	bl	800bc84 <mem_to_ptr>
 800c28a:	4603      	mov	r3, r0
 800c28c:	83fb      	strh	r3, [r7, #30]
 800c28e:	e0b7      	b.n	800c400 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c290:	8bfb      	ldrh	r3, [r7, #30]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff fce4 	bl	800bc60 <ptr_to_mem>
 800c298:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	791b      	ldrb	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f040 80a7 	bne.w	800c3f2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	881b      	ldrh	r3, [r3, #0]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	8bfb      	ldrh	r3, [r7, #30]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	f1a3 0208 	sub.w	r2, r3, #8
 800c2b2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	f0c0 809c 	bcc.w	800c3f2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	8bfb      	ldrh	r3, [r7, #30]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	f1a3 0208 	sub.w	r2, r3, #8
 800c2c8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ca:	3314      	adds	r3, #20
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d333      	bcc.n	800c338 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c2d0:	8bfa      	ldrh	r2, [r7, #30]
 800c2d2:	8bbb      	ldrh	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3308      	adds	r3, #8
 800c2da:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c2dc:	8a7b      	ldrh	r3, [r7, #18]
 800c2de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2e2:	d106      	bne.n	800c2f2 <mem_malloc+0xb6>
 800c2e4:	4b50      	ldr	r3, [pc, #320]	; (800c428 <mem_malloc+0x1ec>)
 800c2e6:	f240 3287 	movw	r2, #903	; 0x387
 800c2ea:	4950      	ldr	r1, [pc, #320]	; (800c42c <mem_malloc+0x1f0>)
 800c2ec:	4850      	ldr	r0, [pc, #320]	; (800c430 <mem_malloc+0x1f4>)
 800c2ee:	f00a fbad 	bl	8016a4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c2f2:	8a7b      	ldrh	r3, [r7, #18]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fcb3 	bl	800bc60 <ptr_to_mem>
 800c2fa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	881a      	ldrh	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	8bfa      	ldrh	r2, [r7, #30]
 800c30e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	8a7a      	ldrh	r2, [r7, #18]
 800c314:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2201      	movs	r2, #1
 800c31a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c324:	d00b      	beq.n	800c33e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7ff fc98 	bl	800bc60 <ptr_to_mem>
 800c330:	4602      	mov	r2, r0
 800c332:	8a7b      	ldrh	r3, [r7, #18]
 800c334:	8053      	strh	r3, [r2, #2]
 800c336:	e002      	b.n	800c33e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2201      	movs	r2, #1
 800c33c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c33e:	4b39      	ldr	r3, [pc, #228]	; (800c424 <mem_malloc+0x1e8>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	429a      	cmp	r2, r3
 800c346:	d127      	bne.n	800c398 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c348:	4b36      	ldr	r3, [pc, #216]	; (800c424 <mem_malloc+0x1e8>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c34e:	e005      	b.n	800c35c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fc83 	bl	800bc60 <ptr_to_mem>
 800c35a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	791b      	ldrb	r3, [r3, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <mem_malloc+0x132>
 800c364:	4b33      	ldr	r3, [pc, #204]	; (800c434 <mem_malloc+0x1f8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d1f0      	bne.n	800c350 <mem_malloc+0x114>
          }
          lfree = cur;
 800c36e:	4a2d      	ldr	r2, [pc, #180]	; (800c424 <mem_malloc+0x1e8>)
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c374:	4b2b      	ldr	r3, [pc, #172]	; (800c424 <mem_malloc+0x1e8>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	4b2e      	ldr	r3, [pc, #184]	; (800c434 <mem_malloc+0x1f8>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d00b      	beq.n	800c398 <mem_malloc+0x15c>
 800c380:	4b28      	ldr	r3, [pc, #160]	; (800c424 <mem_malloc+0x1e8>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	791b      	ldrb	r3, [r3, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d006      	beq.n	800c398 <mem_malloc+0x15c>
 800c38a:	4b27      	ldr	r3, [pc, #156]	; (800c428 <mem_malloc+0x1ec>)
 800c38c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c390:	4929      	ldr	r1, [pc, #164]	; (800c438 <mem_malloc+0x1fc>)
 800c392:	4827      	ldr	r0, [pc, #156]	; (800c430 <mem_malloc+0x1f4>)
 800c394:	f00a fb5a 	bl	8016a4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c398:	4821      	ldr	r0, [pc, #132]	; (800c420 <mem_malloc+0x1e4>)
 800c39a:	f00a f952 	bl	8016642 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c39e:	8bba      	ldrh	r2, [r7, #28]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	4a23      	ldr	r2, [pc, #140]	; (800c434 <mem_malloc+0x1f8>)
 800c3a8:	6812      	ldr	r2, [r2, #0]
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d906      	bls.n	800c3bc <mem_malloc+0x180>
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <mem_malloc+0x1ec>)
 800c3b0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c3b4:	4921      	ldr	r1, [pc, #132]	; (800c43c <mem_malloc+0x200>)
 800c3b6:	481e      	ldr	r0, [pc, #120]	; (800c430 <mem_malloc+0x1f4>)
 800c3b8:	f00a fb48 	bl	8016a4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f003 0303 	and.w	r3, r3, #3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d006      	beq.n	800c3d4 <mem_malloc+0x198>
 800c3c6:	4b18      	ldr	r3, [pc, #96]	; (800c428 <mem_malloc+0x1ec>)
 800c3c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c3cc:	491c      	ldr	r1, [pc, #112]	; (800c440 <mem_malloc+0x204>)
 800c3ce:	4818      	ldr	r0, [pc, #96]	; (800c430 <mem_malloc+0x1f4>)
 800c3d0:	f00a fb3c 	bl	8016a4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f003 0303 	and.w	r3, r3, #3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d006      	beq.n	800c3ec <mem_malloc+0x1b0>
 800c3de:	4b12      	ldr	r3, [pc, #72]	; (800c428 <mem_malloc+0x1ec>)
 800c3e0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c3e4:	4917      	ldr	r1, [pc, #92]	; (800c444 <mem_malloc+0x208>)
 800c3e6:	4812      	ldr	r0, [pc, #72]	; (800c430 <mem_malloc+0x1f4>)
 800c3e8:	f00a fb30 	bl	8016a4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	e011      	b.n	800c416 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c3f2:	8bfb      	ldrh	r3, [r7, #30]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fc33 	bl	800bc60 <ptr_to_mem>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c400:	8bfa      	ldrh	r2, [r7, #30]
 800c402:	8bbb      	ldrh	r3, [r7, #28]
 800c404:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c408:	429a      	cmp	r2, r3
 800c40a:	f4ff af41 	bcc.w	800c290 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c40e:	4804      	ldr	r0, [pc, #16]	; (800c420 <mem_malloc+0x1e4>)
 800c410:	f00a f917 	bl	8016642 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	200053b8 	.word	0x200053b8
 800c424:	200053bc 	.word	0x200053bc
 800c428:	08018fe0 	.word	0x08018fe0
 800c42c:	080191a4 	.word	0x080191a4
 800c430:	08019028 	.word	0x08019028
 800c434:	200053b4 	.word	0x200053b4
 800c438:	080191b8 	.word	0x080191b8
 800c43c:	080191d4 	.word	0x080191d4
 800c440:	08019204 	.word	0x08019204
 800c444:	08019234 	.word	0x08019234

0800c448 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	3303      	adds	r3, #3
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e011      	b.n	800c48e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	4413      	add	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3301      	adds	r3, #1
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	885b      	ldrh	r3, [r3, #2]
 800c492:	461a      	mov	r2, r3
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4293      	cmp	r3, r2
 800c498:	dbe7      	blt.n	800c46a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c49a:	bf00      	nop
 800c49c:	bf00      	nop
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	80fb      	strh	r3, [r7, #6]
 800c4b2:	e009      	b.n	800c4c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	4a08      	ldr	r2, [pc, #32]	; (800c4d8 <memp_init+0x30>)
 800c4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff ffc3 	bl	800c448 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4c2:	88fb      	ldrh	r3, [r7, #6]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	80fb      	strh	r3, [r7, #6]
 800c4c8:	88fb      	ldrh	r3, [r7, #6]
 800c4ca:	2b0c      	cmp	r3, #12
 800c4cc:	d9f2      	bls.n	800c4b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	08022998 	.word	0x08022998

0800c4dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c4e4:	f00a f8da 	bl	801669c <sys_arch_protect>
 800c4e8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d015      	beq.n	800c524 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	6812      	ldr	r2, [r2, #0]
 800c500:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	f003 0303 	and.w	r3, r3, #3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <do_memp_malloc_pool+0x3e>
 800c50c:	4b09      	ldr	r3, [pc, #36]	; (800c534 <do_memp_malloc_pool+0x58>)
 800c50e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c512:	4909      	ldr	r1, [pc, #36]	; (800c538 <do_memp_malloc_pool+0x5c>)
 800c514:	4809      	ldr	r0, [pc, #36]	; (800c53c <do_memp_malloc_pool+0x60>)
 800c516:	f00a fa99 	bl	8016a4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f00a f8cc 	bl	80166b8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	e003      	b.n	800c52c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f00a f8c7 	bl	80166b8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	08019258 	.word	0x08019258
 800c538:	08019288 	.word	0x08019288
 800c53c:	080192ac 	.word	0x080192ac

0800c540 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	2b0c      	cmp	r3, #12
 800c54e:	d908      	bls.n	800c562 <memp_malloc+0x22>
 800c550:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <memp_malloc+0x3c>)
 800c552:	f240 1257 	movw	r2, #343	; 0x157
 800c556:	490a      	ldr	r1, [pc, #40]	; (800c580 <memp_malloc+0x40>)
 800c558:	480a      	ldr	r0, [pc, #40]	; (800c584 <memp_malloc+0x44>)
 800c55a:	f00a fa77 	bl	8016a4c <iprintf>
 800c55e:	2300      	movs	r3, #0
 800c560:	e008      	b.n	800c574 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	4a08      	ldr	r2, [pc, #32]	; (800c588 <memp_malloc+0x48>)
 800c566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff ffb6 	bl	800c4dc <do_memp_malloc_pool>
 800c570:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c572:	68fb      	ldr	r3, [r7, #12]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	08019258 	.word	0x08019258
 800c580:	080192e8 	.word	0x080192e8
 800c584:	080192ac 	.word	0x080192ac
 800c588:	08022998 	.word	0x08022998

0800c58c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	f003 0303 	and.w	r3, r3, #3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d006      	beq.n	800c5ae <do_memp_free_pool+0x22>
 800c5a0:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <do_memp_free_pool+0x4c>)
 800c5a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c5a6:	490d      	ldr	r1, [pc, #52]	; (800c5dc <do_memp_free_pool+0x50>)
 800c5a8:	480d      	ldr	r0, [pc, #52]	; (800c5e0 <do_memp_free_pool+0x54>)
 800c5aa:	f00a fa4f 	bl	8016a4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c5b2:	f00a f873 	bl	801669c <sys_arch_protect>
 800c5b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c5ca:	68b8      	ldr	r0, [r7, #8]
 800c5cc:	f00a f874 	bl	80166b8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	08019258 	.word	0x08019258
 800c5dc:	08019308 	.word	0x08019308
 800c5e0:	080192ac 	.word	0x080192ac

0800c5e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b0c      	cmp	r3, #12
 800c5f4:	d907      	bls.n	800c606 <memp_free+0x22>
 800c5f6:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <memp_free+0x44>)
 800c5f8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c5fc:	490b      	ldr	r1, [pc, #44]	; (800c62c <memp_free+0x48>)
 800c5fe:	480c      	ldr	r0, [pc, #48]	; (800c630 <memp_free+0x4c>)
 800c600:	f00a fa24 	bl	8016a4c <iprintf>
 800c604:	e00c      	b.n	800c620 <memp_free+0x3c>

  if (mem == NULL) {
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d008      	beq.n	800c61e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	4a09      	ldr	r2, [pc, #36]	; (800c634 <memp_free+0x50>)
 800c610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ffb8 	bl	800c58c <do_memp_free_pool>
 800c61c:	e000      	b.n	800c620 <memp_free+0x3c>
    return;
 800c61e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	08019258 	.word	0x08019258
 800c62c:	08019328 	.word	0x08019328
 800c630:	080192ac 	.word	0x080192ac
 800c634:	08022998 	.word	0x08022998

0800c638 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c638:	b480      	push	{r7}
 800c63a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c63c:	bf00      	nop
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
	...

0800c648 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d108      	bne.n	800c66e <netif_add+0x26>
 800c65c:	4b57      	ldr	r3, [pc, #348]	; (800c7bc <netif_add+0x174>)
 800c65e:	f240 1227 	movw	r2, #295	; 0x127
 800c662:	4957      	ldr	r1, [pc, #348]	; (800c7c0 <netif_add+0x178>)
 800c664:	4857      	ldr	r0, [pc, #348]	; (800c7c4 <netif_add+0x17c>)
 800c666:	f00a f9f1 	bl	8016a4c <iprintf>
 800c66a:	2300      	movs	r3, #0
 800c66c:	e0a2      	b.n	800c7b4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	d108      	bne.n	800c686 <netif_add+0x3e>
 800c674:	4b51      	ldr	r3, [pc, #324]	; (800c7bc <netif_add+0x174>)
 800c676:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c67a:	4953      	ldr	r1, [pc, #332]	; (800c7c8 <netif_add+0x180>)
 800c67c:	4851      	ldr	r0, [pc, #324]	; (800c7c4 <netif_add+0x17c>)
 800c67e:	f00a f9e5 	bl	8016a4c <iprintf>
 800c682:	2300      	movs	r3, #0
 800c684:	e096      	b.n	800c7b4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c68c:	4b4f      	ldr	r3, [pc, #316]	; (800c7cc <netif_add+0x184>)
 800c68e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c696:	4b4d      	ldr	r3, [pc, #308]	; (800c7cc <netif_add+0x184>)
 800c698:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c6a0:	4b4a      	ldr	r3, [pc, #296]	; (800c7cc <netif_add+0x184>)
 800c6a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	4a45      	ldr	r2, [pc, #276]	; (800c7d0 <netif_add+0x188>)
 800c6ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a3a      	ldr	r2, [r7, #32]
 800c6d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c6d6:	4b3f      	ldr	r3, [pc, #252]	; (800c7d4 <netif_add+0x18c>)
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f000 f913 	bl	800c918 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	4798      	blx	r3
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <netif_add+0xba>
    return NULL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e058      	b.n	800c7b4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c708:	2bff      	cmp	r3, #255	; 0xff
 800c70a:	d103      	bne.n	800c714 <netif_add+0xcc>
        netif->num = 0;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c718:	4b2f      	ldr	r3, [pc, #188]	; (800c7d8 <netif_add+0x190>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	617b      	str	r3, [r7, #20]
 800c71e:	e02b      	b.n	800c778 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c720:	697a      	ldr	r2, [r7, #20]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	429a      	cmp	r2, r3
 800c726:	d106      	bne.n	800c736 <netif_add+0xee>
 800c728:	4b24      	ldr	r3, [pc, #144]	; (800c7bc <netif_add+0x174>)
 800c72a:	f240 128b 	movw	r2, #395	; 0x18b
 800c72e:	492b      	ldr	r1, [pc, #172]	; (800c7dc <netif_add+0x194>)
 800c730:	4824      	ldr	r0, [pc, #144]	; (800c7c4 <netif_add+0x17c>)
 800c732:	f00a f98b 	bl	8016a4c <iprintf>
        num_netifs++;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	3301      	adds	r3, #1
 800c73a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	2bff      	cmp	r3, #255	; 0xff
 800c740:	dd06      	ble.n	800c750 <netif_add+0x108>
 800c742:	4b1e      	ldr	r3, [pc, #120]	; (800c7bc <netif_add+0x174>)
 800c744:	f240 128d 	movw	r2, #397	; 0x18d
 800c748:	4925      	ldr	r1, [pc, #148]	; (800c7e0 <netif_add+0x198>)
 800c74a:	481e      	ldr	r0, [pc, #120]	; (800c7c4 <netif_add+0x17c>)
 800c74c:	f00a f97e 	bl	8016a4c <iprintf>
        if (netif2->num == netif->num) {
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d108      	bne.n	800c772 <netif_add+0x12a>
          netif->num++;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c766:	3301      	adds	r3, #1
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c770:	e005      	b.n	800c77e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1d0      	bne.n	800c720 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1be      	bne.n	800c702 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c78a:	2bfe      	cmp	r3, #254	; 0xfe
 800c78c:	d103      	bne.n	800c796 <netif_add+0x14e>
    netif_num = 0;
 800c78e:	4b11      	ldr	r3, [pc, #68]	; (800c7d4 <netif_add+0x18c>)
 800c790:	2200      	movs	r2, #0
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	e006      	b.n	800c7a4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c79c:	3301      	adds	r3, #1
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <netif_add+0x18c>)
 800c7a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c7a4:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <netif_add+0x190>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c7ac:	4a0a      	ldr	r2, [pc, #40]	; (800c7d8 <netif_add+0x190>)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	08019344 	.word	0x08019344
 800c7c0:	080193d8 	.word	0x080193d8
 800c7c4:	08019394 	.word	0x08019394
 800c7c8:	080193f4 	.word	0x080193f4
 800c7cc:	08022a0c 	.word	0x08022a0c
 800c7d0:	0800cbf3 	.word	0x0800cbf3
 800c7d4:	200053f4 	.word	0x200053f4
 800c7d8:	200136a0 	.word	0x200136a0
 800c7dc:	08019418 	.word	0x08019418
 800c7e0:	0801942c 	.word	0x0801942c

0800c7e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f002 fe23 	bl	800f43c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f007 fb8b 	bl	8013f14 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d106      	bne.n	800c828 <netif_do_set_ipaddr+0x20>
 800c81a:	4b1d      	ldr	r3, [pc, #116]	; (800c890 <netif_do_set_ipaddr+0x88>)
 800c81c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c820:	491c      	ldr	r1, [pc, #112]	; (800c894 <netif_do_set_ipaddr+0x8c>)
 800c822:	481d      	ldr	r0, [pc, #116]	; (800c898 <netif_do_set_ipaddr+0x90>)
 800c824:	f00a f912 	bl	8016a4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <netif_do_set_ipaddr+0x34>
 800c82e:	4b18      	ldr	r3, [pc, #96]	; (800c890 <netif_do_set_ipaddr+0x88>)
 800c830:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c834:	4917      	ldr	r1, [pc, #92]	; (800c894 <netif_do_set_ipaddr+0x8c>)
 800c836:	4818      	ldr	r0, [pc, #96]	; (800c898 <netif_do_set_ipaddr+0x90>)
 800c838:	f00a f908 	bl	8016a4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3304      	adds	r3, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d01c      	beq.n	800c884 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3304      	adds	r3, #4
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c85a:	f107 0314 	add.w	r3, r7, #20
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff ffbf 	bl	800c7e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <netif_do_set_ipaddr+0x6a>
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	e000      	b.n	800c874 <netif_do_set_ipaddr+0x6c>
 800c872:	2300      	movs	r3, #0
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c878:	2101      	movs	r1, #1
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 f8d2 	bl	800ca24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c880:	2301      	movs	r3, #1
 800c882:	e000      	b.n	800c886 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	08019344 	.word	0x08019344
 800c894:	0801945c 	.word	0x0801945c
 800c898:	08019394 	.word	0x08019394

0800c89c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d00a      	beq.n	800c8cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <netif_do_set_netmask+0x26>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	e000      	b.n	800c8c4 <netif_do_set_netmask+0x28>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e000      	b.n	800c8ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	330c      	adds	r3, #12
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d00a      	beq.n	800c90a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <netif_do_set_gw+0x26>
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	e000      	b.n	800c902 <netif_do_set_gw+0x28>
 800c900:	2300      	movs	r3, #0
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c906:	2301      	movs	r3, #1
 800c908:	e000      	b.n	800c90c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b088      	sub	sp, #32
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c934:	4b1c      	ldr	r3, [pc, #112]	; (800c9a8 <netif_set_addr+0x90>)
 800c936:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c93e:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <netif_set_addr+0x90>)
 800c940:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c948:	4b17      	ldr	r3, [pc, #92]	; (800c9a8 <netif_set_addr+0x90>)
 800c94a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <netif_set_addr+0x42>
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <netif_set_addr+0x46>
 800c95a:	2301      	movs	r3, #1
 800c95c:	e000      	b.n	800c960 <netif_set_addr+0x48>
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d006      	beq.n	800c976 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c968:	f107 0310 	add.w	r3, r7, #16
 800c96c:	461a      	mov	r2, r3
 800c96e:	68b9      	ldr	r1, [r7, #8]
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f7ff ff49 	bl	800c808 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f7ff ff8e 	bl	800c89c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff ffa8 	bl	800c8da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d106      	bne.n	800c99e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c990:	f107 0310 	add.w	r3, r7, #16
 800c994:	461a      	mov	r2, r3
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff ff35 	bl	800c808 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c99e:	bf00      	nop
 800c9a0:	3720      	adds	r7, #32
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	08022a0c 	.word	0x08022a0c

0800c9ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c9b4:	4a04      	ldr	r2, [pc, #16]	; (800c9c8 <netif_set_default+0x1c>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	200136a4 	.word	0x200136a4

0800c9cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d107      	bne.n	800c9ea <netif_set_up+0x1e>
 800c9da:	4b0f      	ldr	r3, [pc, #60]	; (800ca18 <netif_set_up+0x4c>)
 800c9dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c9e0:	490e      	ldr	r1, [pc, #56]	; (800ca1c <netif_set_up+0x50>)
 800c9e2:	480f      	ldr	r0, [pc, #60]	; (800ca20 <netif_set_up+0x54>)
 800c9e4:	f00a f832 	bl	8016a4c <iprintf>
 800c9e8:	e013      	b.n	800ca12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10c      	bne.n	800ca12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca0a:	2103      	movs	r1, #3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f809 	bl	800ca24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08019344 	.word	0x08019344
 800ca1c:	080194cc 	.word	0x080194cc
 800ca20:	08019394 	.word	0x08019394

0800ca24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <netif_issue_reports+0x20>
 800ca36:	4b18      	ldr	r3, [pc, #96]	; (800ca98 <netif_issue_reports+0x74>)
 800ca38:	f240 326d 	movw	r2, #877	; 0x36d
 800ca3c:	4917      	ldr	r1, [pc, #92]	; (800ca9c <netif_issue_reports+0x78>)
 800ca3e:	4818      	ldr	r0, [pc, #96]	; (800caa0 <netif_issue_reports+0x7c>)
 800ca40:	f00a f804 	bl	8016a4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d01e      	beq.n	800ca90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d017      	beq.n	800ca90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	f003 0301 	and.w	r3, r3, #1
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d013      	beq.n	800ca92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00e      	beq.n	800ca92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca7a:	f003 0308 	and.w	r3, r3, #8
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d007      	beq.n	800ca92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3304      	adds	r3, #4
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f008 f9ad 	bl	8014de8 <etharp_request>
 800ca8e:	e000      	b.n	800ca92 <netif_issue_reports+0x6e>
    return;
 800ca90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	08019344 	.word	0x08019344
 800ca9c:	080194e8 	.word	0x080194e8
 800caa0:	08019394 	.word	0x08019394

0800caa4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d107      	bne.n	800cac2 <netif_set_down+0x1e>
 800cab2:	4b12      	ldr	r3, [pc, #72]	; (800cafc <netif_set_down+0x58>)
 800cab4:	f240 329b 	movw	r2, #923	; 0x39b
 800cab8:	4911      	ldr	r1, [pc, #68]	; (800cb00 <netif_set_down+0x5c>)
 800caba:	4812      	ldr	r0, [pc, #72]	; (800cb04 <netif_set_down+0x60>)
 800cabc:	f009 ffc6 	bl	8016a4c <iprintf>
 800cac0:	e019      	b.n	800caf6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cac8:	f003 0301 	and.w	r3, r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d012      	beq.n	800caf6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cad6:	f023 0301 	bic.w	r3, r3, #1
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae8:	f003 0308 	and.w	r3, r3, #8
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f007 fd37 	bl	8014564 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	08019344 	.word	0x08019344
 800cb00:	0801950c 	.word	0x0801950c
 800cb04:	08019394 	.word	0x08019394

0800cb08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d107      	bne.n	800cb26 <netif_set_link_up+0x1e>
 800cb16:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <netif_set_link_up+0x5c>)
 800cb18:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cb1c:	4912      	ldr	r1, [pc, #72]	; (800cb68 <netif_set_link_up+0x60>)
 800cb1e:	4813      	ldr	r0, [pc, #76]	; (800cb6c <netif_set_link_up+0x64>)
 800cb20:	f009 ff94 	bl	8016a4c <iprintf>
 800cb24:	e01b      	b.n	800cb5e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d114      	bne.n	800cb5e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb3a:	f043 0304 	orr.w	r3, r3, #4
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cb46:	2103      	movs	r1, #3
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff ff6b 	bl	800ca24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <netif_set_link_up+0x56>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	08019344 	.word	0x08019344
 800cb68:	0801952c 	.word	0x0801952c
 800cb6c:	08019394 	.word	0x08019394

0800cb70 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d107      	bne.n	800cb8e <netif_set_link_down+0x1e>
 800cb7e:	4b11      	ldr	r3, [pc, #68]	; (800cbc4 <netif_set_link_down+0x54>)
 800cb80:	f240 4206 	movw	r2, #1030	; 0x406
 800cb84:	4910      	ldr	r1, [pc, #64]	; (800cbc8 <netif_set_link_down+0x58>)
 800cb86:	4811      	ldr	r0, [pc, #68]	; (800cbcc <netif_set_link_down+0x5c>)
 800cb88:	f009 ff60 	bl	8016a4c <iprintf>
 800cb8c:	e017      	b.n	800cbbe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d010      	beq.n	800cbbe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cba2:	f023 0304 	bic.w	r3, r3, #4
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <netif_set_link_down+0x4e>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08019344 	.word	0x08019344
 800cbc8:	08019550 	.word	0x08019550
 800cbcc:	08019394 	.word	0x08019394

0800cbd0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	61da      	str	r2, [r3, #28]
  }
}
 800cbe6:	bf00      	nop
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b085      	sub	sp, #20
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cbfe:	f06f 030b 	mvn.w	r3, #11
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
	...

0800cc10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cc20:	4b0d      	ldr	r3, [pc, #52]	; (800cc58 <netif_get_by_index+0x48>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	e00c      	b.n	800cc42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc2e:	3301      	adds	r3, #1
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	79fa      	ldrb	r2, [r7, #7]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d101      	bne.n	800cc3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	e006      	b.n	800cc4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1ef      	bne.n	800cc28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	200136a0 	.word	0x200136a0

0800cc5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cc62:	f009 fd1b 	bl	801669c <sys_arch_protect>
 800cc66:	6038      	str	r0, [r7, #0]
 800cc68:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <pbuf_free_ooseq+0x44>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
 800cc6e:	6838      	ldr	r0, [r7, #0]
 800cc70:	f009 fd22 	bl	80166b8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc74:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <pbuf_free_ooseq+0x48>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	607b      	str	r3, [r7, #4]
 800cc7a:	e00a      	b.n	800cc92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f002 fc17 	bl	800f4b8 <tcp_free_ooseq>
      return;
 800cc8a:	e005      	b.n	800cc98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	607b      	str	r3, [r7, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1f1      	bne.n	800cc7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	200136a8 	.word	0x200136a8
 800cca4:	200136b0 	.word	0x200136b0

0800cca8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ccb0:	f7ff ffd4 	bl	800cc5c <pbuf_free_ooseq>
}
 800ccb4:	bf00      	nop
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ccc2:	f009 fceb 	bl	801669c <sys_arch_protect>
 800ccc6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ccc8:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <pbuf_pool_is_empty+0x4c>)
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ccce:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <pbuf_pool_is_empty+0x4c>)
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f009 fcef 	bl	80166b8 <sys_arch_unprotect>

  if (!queued) {
 800ccda:	78fb      	ldrb	r3, [r7, #3]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10f      	bne.n	800cd00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cce0:	2100      	movs	r1, #0
 800cce2:	480a      	ldr	r0, [pc, #40]	; (800cd0c <pbuf_pool_is_empty+0x50>)
 800cce4:	f7fc fe4a 	bl	800997c <tcpip_try_callback>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d008      	beq.n	800cd00 <pbuf_pool_is_empty+0x44>
 800ccee:	f009 fcd5 	bl	801669c <sys_arch_protect>
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	4b04      	ldr	r3, [pc, #16]	; (800cd08 <pbuf_pool_is_empty+0x4c>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	701a      	strb	r2, [r3, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f009 fcdc 	bl	80166b8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	200136a8 	.word	0x200136a8
 800cd0c:	0800cca9 	.word	0x0800cca9

0800cd10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	460b      	mov	r3, r1
 800cd20:	80fb      	strh	r3, [r7, #6]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	88fa      	ldrh	r2, [r7, #6]
 800cd36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	88ba      	ldrh	r2, [r7, #4]
 800cd3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cd3e:	8b3b      	ldrh	r3, [r7, #24]
 800cd40:	b2da      	uxtb	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	7f3a      	ldrb	r2, [r7, #28]
 800cd4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	73da      	strb	r2, [r3, #15]
}
 800cd58:	bf00      	nop
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08c      	sub	sp, #48	; 0x30
 800cd68:	af02      	add	r7, sp, #8
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	71fb      	strb	r3, [r7, #7]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	80bb      	strh	r3, [r7, #4]
 800cd72:	4613      	mov	r3, r2
 800cd74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cd7a:	887b      	ldrh	r3, [r7, #2]
 800cd7c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cd80:	d07f      	beq.n	800ce82 <pbuf_alloc+0x11e>
 800cd82:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cd86:	f300 80c8 	bgt.w	800cf1a <pbuf_alloc+0x1b6>
 800cd8a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cd8e:	d010      	beq.n	800cdb2 <pbuf_alloc+0x4e>
 800cd90:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cd94:	f300 80c1 	bgt.w	800cf1a <pbuf_alloc+0x1b6>
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d002      	beq.n	800cda2 <pbuf_alloc+0x3e>
 800cd9c:	2b41      	cmp	r3, #65	; 0x41
 800cd9e:	f040 80bc 	bne.w	800cf1a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cda2:	887a      	ldrh	r2, [r7, #2]
 800cda4:	88bb      	ldrh	r3, [r7, #4]
 800cda6:	4619      	mov	r1, r3
 800cda8:	2000      	movs	r0, #0
 800cdaa:	f000 f8d1 	bl	800cf50 <pbuf_alloc_reference>
 800cdae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cdb0:	e0bd      	b.n	800cf2e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cdba:	88bb      	ldrh	r3, [r7, #4]
 800cdbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cdbe:	200c      	movs	r0, #12
 800cdc0:	f7ff fbbe 	bl	800c540 <memp_malloc>
 800cdc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d109      	bne.n	800cde0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cdcc:	f7ff ff76 	bl	800ccbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <pbuf_alloc+0x78>
            pbuf_free(p);
 800cdd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdd8:	f000 faa8 	bl	800d32c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cddc:	2300      	movs	r3, #0
 800cdde:	e0a7      	b.n	800cf30 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cde0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cde2:	3303      	adds	r3, #3
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	8b7a      	ldrh	r2, [r7, #26]
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	bf28      	it	cs
 800cdf8:	4613      	movcs	r3, r2
 800cdfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cdfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdfe:	3310      	adds	r3, #16
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	4413      	add	r3, r2
 800ce04:	3303      	adds	r3, #3
 800ce06:	f023 0303 	bic.w	r3, r3, #3
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	89f9      	ldrh	r1, [r7, #14]
 800ce0e:	8b7a      	ldrh	r2, [r7, #26]
 800ce10:	2300      	movs	r3, #0
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	887b      	ldrh	r3, [r7, #2]
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	6938      	ldr	r0, [r7, #16]
 800ce1e:	f7ff ff77 	bl	800cd10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f003 0303 	and.w	r3, r3, #3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d006      	beq.n	800ce3c <pbuf_alloc+0xd8>
 800ce2e:	4b42      	ldr	r3, [pc, #264]	; (800cf38 <pbuf_alloc+0x1d4>)
 800ce30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce34:	4941      	ldr	r1, [pc, #260]	; (800cf3c <pbuf_alloc+0x1d8>)
 800ce36:	4842      	ldr	r0, [pc, #264]	; (800cf40 <pbuf_alloc+0x1dc>)
 800ce38:	f009 fe08 	bl	8016a4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ce3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce3e:	3303      	adds	r3, #3
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ce48:	d106      	bne.n	800ce58 <pbuf_alloc+0xf4>
 800ce4a:	4b3b      	ldr	r3, [pc, #236]	; (800cf38 <pbuf_alloc+0x1d4>)
 800ce4c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ce50:	493c      	ldr	r1, [pc, #240]	; (800cf44 <pbuf_alloc+0x1e0>)
 800ce52:	483b      	ldr	r0, [pc, #236]	; (800cf40 <pbuf_alloc+0x1dc>)
 800ce54:	f009 fdfa 	bl	8016a4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
 800ce62:	e002      	b.n	800ce6a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ce6e:	8b7a      	ldrh	r2, [r7, #26]
 800ce70:	89fb      	ldrh	r3, [r7, #14]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ce7a:	8b7b      	ldrh	r3, [r7, #26]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d19e      	bne.n	800cdbe <pbuf_alloc+0x5a>
      break;
 800ce80:	e055      	b.n	800cf2e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ce82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce84:	3303      	adds	r3, #3
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	f023 0303 	bic.w	r3, r3, #3
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	88bb      	ldrh	r3, [r7, #4]
 800ce90:	3303      	adds	r3, #3
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	4413      	add	r3, r2
 800ce9c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ce9e:	8b3b      	ldrh	r3, [r7, #24]
 800cea0:	3310      	adds	r3, #16
 800cea2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cea4:	8b3a      	ldrh	r2, [r7, #24]
 800cea6:	88bb      	ldrh	r3, [r7, #4]
 800cea8:	3303      	adds	r3, #3
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d306      	bcc.n	800cec0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ceb2:	8afa      	ldrh	r2, [r7, #22]
 800ceb4:	88bb      	ldrh	r3, [r7, #4]
 800ceb6:	3303      	adds	r3, #3
 800ceb8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d201      	bcs.n	800cec4 <pbuf_alloc+0x160>
        return NULL;
 800cec0:	2300      	movs	r3, #0
 800cec2:	e035      	b.n	800cf30 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cec4:	8afb      	ldrh	r3, [r7, #22]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff f9b8 	bl	800c23c <mem_malloc>
 800cecc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <pbuf_alloc+0x174>
        return NULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e02b      	b.n	800cf30 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ced8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceda:	3310      	adds	r3, #16
 800cedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cede:	4413      	add	r3, r2
 800cee0:	3303      	adds	r3, #3
 800cee2:	f023 0303 	bic.w	r3, r3, #3
 800cee6:	4618      	mov	r0, r3
 800cee8:	88b9      	ldrh	r1, [r7, #4]
 800ceea:	88ba      	ldrh	r2, [r7, #4]
 800ceec:	2300      	movs	r3, #0
 800ceee:	9301      	str	r3, [sp, #4]
 800cef0:	887b      	ldrh	r3, [r7, #2]
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	460b      	mov	r3, r1
 800cef6:	4601      	mov	r1, r0
 800cef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cefa:	f7ff ff09 	bl	800cd10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f003 0303 	and.w	r3, r3, #3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d010      	beq.n	800cf2c <pbuf_alloc+0x1c8>
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	; (800cf38 <pbuf_alloc+0x1d4>)
 800cf0c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cf10:	490d      	ldr	r1, [pc, #52]	; (800cf48 <pbuf_alloc+0x1e4>)
 800cf12:	480b      	ldr	r0, [pc, #44]	; (800cf40 <pbuf_alloc+0x1dc>)
 800cf14:	f009 fd9a 	bl	8016a4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cf18:	e008      	b.n	800cf2c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cf1a:	4b07      	ldr	r3, [pc, #28]	; (800cf38 <pbuf_alloc+0x1d4>)
 800cf1c:	f240 1227 	movw	r2, #295	; 0x127
 800cf20:	490a      	ldr	r1, [pc, #40]	; (800cf4c <pbuf_alloc+0x1e8>)
 800cf22:	4807      	ldr	r0, [pc, #28]	; (800cf40 <pbuf_alloc+0x1dc>)
 800cf24:	f009 fd92 	bl	8016a4c <iprintf>
      return NULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	e001      	b.n	800cf30 <pbuf_alloc+0x1cc>
      break;
 800cf2c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3728      	adds	r7, #40	; 0x28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	08019574 	.word	0x08019574
 800cf3c:	080195a4 	.word	0x080195a4
 800cf40:	080195d4 	.word	0x080195d4
 800cf44:	080195fc 	.word	0x080195fc
 800cf48:	08019630 	.word	0x08019630
 800cf4c:	0801965c 	.word	0x0801965c

0800cf50 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af02      	add	r7, sp, #8
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cf60:	883b      	ldrh	r3, [r7, #0]
 800cf62:	2b41      	cmp	r3, #65	; 0x41
 800cf64:	d009      	beq.n	800cf7a <pbuf_alloc_reference+0x2a>
 800cf66:	883b      	ldrh	r3, [r7, #0]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d006      	beq.n	800cf7a <pbuf_alloc_reference+0x2a>
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <pbuf_alloc_reference+0x5c>)
 800cf6e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cf72:	490f      	ldr	r1, [pc, #60]	; (800cfb0 <pbuf_alloc_reference+0x60>)
 800cf74:	480f      	ldr	r0, [pc, #60]	; (800cfb4 <pbuf_alloc_reference+0x64>)
 800cf76:	f009 fd69 	bl	8016a4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cf7a:	200b      	movs	r0, #11
 800cf7c:	f7ff fae0 	bl	800c540 <memp_malloc>
 800cf80:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e00b      	b.n	800cfa4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cf8c:	8879      	ldrh	r1, [r7, #2]
 800cf8e:	887a      	ldrh	r2, [r7, #2]
 800cf90:	2300      	movs	r3, #0
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	883b      	ldrh	r3, [r7, #0]
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f7ff feb7 	bl	800cd10 <pbuf_init_alloced_pbuf>
  return p;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	08019574 	.word	0x08019574
 800cfb0:	08019678 	.word	0x08019678
 800cfb4:	080195d4 	.word	0x080195d4

0800cfb8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	607b      	str	r3, [r7, #4]
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	81bb      	strh	r3, [r7, #12]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cfcc:	7bfb      	ldrb	r3, [r7, #15]
 800cfce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cfd0:	8a7b      	ldrh	r3, [r7, #18]
 800cfd2:	3303      	adds	r3, #3
 800cfd4:	f023 0203 	bic.w	r2, r3, #3
 800cfd8:	89bb      	ldrh	r3, [r7, #12]
 800cfda:	441a      	add	r2, r3
 800cfdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d901      	bls.n	800cfe6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	e018      	b.n	800d018 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d007      	beq.n	800cffc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cfec:	8a7b      	ldrh	r3, [r7, #18]
 800cfee:	3303      	adds	r3, #3
 800cff0:	f023 0303 	bic.w	r3, r3, #3
 800cff4:	6a3a      	ldr	r2, [r7, #32]
 800cff6:	4413      	add	r3, r2
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e001      	b.n	800d000 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	89b9      	ldrh	r1, [r7, #12]
 800d004:	89ba      	ldrh	r2, [r7, #12]
 800d006:	2302      	movs	r3, #2
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	897b      	ldrh	r3, [r7, #10]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	460b      	mov	r3, r1
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	f7ff fe7d 	bl	800cd10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d016:	687b      	ldr	r3, [r7, #4]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <pbuf_realloc+0x20>
 800d032:	4b3a      	ldr	r3, [pc, #232]	; (800d11c <pbuf_realloc+0xfc>)
 800d034:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d038:	4939      	ldr	r1, [pc, #228]	; (800d120 <pbuf_realloc+0x100>)
 800d03a:	483a      	ldr	r0, [pc, #232]	; (800d124 <pbuf_realloc+0x104>)
 800d03c:	f009 fd06 	bl	8016a4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	891b      	ldrh	r3, [r3, #8]
 800d044:	887a      	ldrh	r2, [r7, #2]
 800d046:	429a      	cmp	r2, r3
 800d048:	d263      	bcs.n	800d112 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	891a      	ldrh	r2, [r3, #8]
 800d04e:	887b      	ldrh	r3, [r7, #2]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d054:	887b      	ldrh	r3, [r7, #2]
 800d056:	817b      	strh	r3, [r7, #10]
  q = p;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d05c:	e018      	b.n	800d090 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	897a      	ldrh	r2, [r7, #10]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	891a      	ldrh	r2, [r3, #8]
 800d06c:	893b      	ldrh	r3, [r7, #8]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	b29a      	uxth	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d106      	bne.n	800d090 <pbuf_realloc+0x70>
 800d082:	4b26      	ldr	r3, [pc, #152]	; (800d11c <pbuf_realloc+0xfc>)
 800d084:	f240 12af 	movw	r2, #431	; 0x1af
 800d088:	4927      	ldr	r1, [pc, #156]	; (800d128 <pbuf_realloc+0x108>)
 800d08a:	4826      	ldr	r0, [pc, #152]	; (800d124 <pbuf_realloc+0x104>)
 800d08c:	f009 fcde 	bl	8016a4c <iprintf>
  while (rem_len > q->len) {
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	895b      	ldrh	r3, [r3, #10]
 800d094:	897a      	ldrh	r2, [r7, #10]
 800d096:	429a      	cmp	r2, r3
 800d098:	d8e1      	bhi.n	800d05e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	7b1b      	ldrb	r3, [r3, #12]
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d121      	bne.n	800d0ea <pbuf_realloc+0xca>
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	895b      	ldrh	r3, [r3, #10]
 800d0aa:	897a      	ldrh	r2, [r7, #10]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d01c      	beq.n	800d0ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	7b5b      	ldrb	r3, [r3, #13]
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d116      	bne.n	800d0ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	897b      	ldrh	r3, [r7, #10]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f7fe ffaa 	bl	800c028 <mem_trim>
 800d0d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d106      	bne.n	800d0ea <pbuf_realloc+0xca>
 800d0dc:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <pbuf_realloc+0xfc>)
 800d0de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d0e2:	4912      	ldr	r1, [pc, #72]	; (800d12c <pbuf_realloc+0x10c>)
 800d0e4:	480f      	ldr	r0, [pc, #60]	; (800d124 <pbuf_realloc+0x104>)
 800d0e6:	f009 fcb1 	bl	8016a4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	897a      	ldrh	r2, [r7, #10]
 800d0ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	895a      	ldrh	r2, [r3, #10]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4618      	mov	r0, r3
 800d106:	f000 f911 	bl	800d32c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	e000      	b.n	800d114 <pbuf_realloc+0xf4>
    return;
 800d112:	bf00      	nop

}
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	08019574 	.word	0x08019574
 800d120:	0801968c 	.word	0x0801968c
 800d124:	080195d4 	.word	0x080195d4
 800d128:	080196a4 	.word	0x080196a4
 800d12c:	080196bc 	.word	0x080196bc

0800d130 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d106      	bne.n	800d152 <pbuf_add_header_impl+0x22>
 800d144:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <pbuf_add_header_impl+0xc4>)
 800d146:	f240 12df 	movw	r2, #479	; 0x1df
 800d14a:	492b      	ldr	r1, [pc, #172]	; (800d1f8 <pbuf_add_header_impl+0xc8>)
 800d14c:	482b      	ldr	r0, [pc, #172]	; (800d1fc <pbuf_add_header_impl+0xcc>)
 800d14e:	f009 fc7d 	bl	8016a4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <pbuf_add_header_impl+0x30>
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d15e:	d301      	bcc.n	800d164 <pbuf_add_header_impl+0x34>
    return 1;
 800d160:	2301      	movs	r3, #1
 800d162:	e043      	b.n	800d1ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <pbuf_add_header_impl+0x3e>
    return 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	e03e      	b.n	800d1ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	891a      	ldrh	r2, [r3, #8]
 800d176:	8a7b      	ldrh	r3, [r7, #18]
 800d178:	4413      	add	r3, r2
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8a7a      	ldrh	r2, [r7, #18]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d901      	bls.n	800d186 <pbuf_add_header_impl+0x56>
    return 1;
 800d182:	2301      	movs	r3, #1
 800d184:	e032      	b.n	800d1ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	7b1b      	ldrb	r3, [r3, #12]
 800d18a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d18c:	8a3b      	ldrh	r3, [r7, #16]
 800d18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00c      	beq.n	800d1b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	425b      	negs	r3, r3
 800d19e:	4413      	add	r3, r2
 800d1a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d20d      	bcs.n	800d1c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e01d      	b.n	800d1ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d006      	beq.n	800d1c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	425b      	negs	r3, r3
 800d1be:	4413      	add	r3, r2
 800d1c0:	617b      	str	r3, [r7, #20]
 800d1c2:	e001      	b.n	800d1c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e011      	b.n	800d1ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	895a      	ldrh	r2, [r3, #10]
 800d1d2:	8a7b      	ldrh	r3, [r7, #18]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	891a      	ldrh	r2, [r3, #8]
 800d1e0:	8a7b      	ldrh	r3, [r7, #18]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	08019574 	.word	0x08019574
 800d1f8:	080196d8 	.word	0x080196d8
 800d1fc:	080195d4 	.word	0x080195d4

0800d200 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d20a:	2200      	movs	r2, #0
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff ff8e 	bl	800d130 <pbuf_add_header_impl>
 800d214:	4603      	mov	r3, r0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <pbuf_remove_header+0x1e>
 800d230:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <pbuf_remove_header+0x94>)
 800d232:	f240 224b 	movw	r2, #587	; 0x24b
 800d236:	4920      	ldr	r1, [pc, #128]	; (800d2b8 <pbuf_remove_header+0x98>)
 800d238:	4820      	ldr	r0, [pc, #128]	; (800d2bc <pbuf_remove_header+0x9c>)
 800d23a:	f009 fc07 	bl	8016a4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d003      	beq.n	800d24c <pbuf_remove_header+0x2c>
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d24a:	d301      	bcc.n	800d250 <pbuf_remove_header+0x30>
    return 1;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e02c      	b.n	800d2aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d101      	bne.n	800d25a <pbuf_remove_header+0x3a>
    return 0;
 800d256:	2300      	movs	r3, #0
 800d258:	e027      	b.n	800d2aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	895b      	ldrh	r3, [r3, #10]
 800d262:	89fa      	ldrh	r2, [r7, #14]
 800d264:	429a      	cmp	r2, r3
 800d266:	d908      	bls.n	800d27a <pbuf_remove_header+0x5a>
 800d268:	4b12      	ldr	r3, [pc, #72]	; (800d2b4 <pbuf_remove_header+0x94>)
 800d26a:	f240 2255 	movw	r2, #597	; 0x255
 800d26e:	4914      	ldr	r1, [pc, #80]	; (800d2c0 <pbuf_remove_header+0xa0>)
 800d270:	4812      	ldr	r0, [pc, #72]	; (800d2bc <pbuf_remove_header+0x9c>)
 800d272:	f009 fbeb 	bl	8016a4c <iprintf>
 800d276:	2301      	movs	r3, #1
 800d278:	e017      	b.n	800d2aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	441a      	add	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	895a      	ldrh	r2, [r3, #10]
 800d290:	89fb      	ldrh	r3, [r7, #14]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	891a      	ldrh	r2, [r3, #8]
 800d29e:	89fb      	ldrh	r3, [r7, #14]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08019574 	.word	0x08019574
 800d2b8:	080196d8 	.word	0x080196d8
 800d2bc:	080195d4 	.word	0x080195d4
 800d2c0:	080196e4 	.word	0x080196e4

0800d2c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	807b      	strh	r3, [r7, #2]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d2d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	da08      	bge.n	800d2ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d2dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2e0:	425b      	negs	r3, r3
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff ff9b 	bl	800d220 <pbuf_remove_header>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	e007      	b.n	800d2fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d2ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2f2:	787a      	ldrb	r2, [r7, #1]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7ff ff1a 	bl	800d130 <pbuf_add_header_impl>
 800d2fc:	4603      	mov	r3, r0
  }
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d312:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d316:	2201      	movs	r2, #1
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff ffd2 	bl	800d2c4 <pbuf_header_impl>
 800d320:	4603      	mov	r3, r0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3708      	adds	r7, #8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
	...

0800d32c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10b      	bne.n	800d352 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <pbuf_free+0x22>
 800d340:	4b3b      	ldr	r3, [pc, #236]	; (800d430 <pbuf_free+0x104>)
 800d342:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d346:	493b      	ldr	r1, [pc, #236]	; (800d434 <pbuf_free+0x108>)
 800d348:	483b      	ldr	r0, [pc, #236]	; (800d438 <pbuf_free+0x10c>)
 800d34a:	f009 fb7f 	bl	8016a4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	e069      	b.n	800d426 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d356:	e062      	b.n	800d41e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d358:	f009 f9a0 	bl	801669c <sys_arch_protect>
 800d35c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	7b9b      	ldrb	r3, [r3, #14]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d106      	bne.n	800d374 <pbuf_free+0x48>
 800d366:	4b32      	ldr	r3, [pc, #200]	; (800d430 <pbuf_free+0x104>)
 800d368:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d36c:	4933      	ldr	r1, [pc, #204]	; (800d43c <pbuf_free+0x110>)
 800d36e:	4832      	ldr	r0, [pc, #200]	; (800d438 <pbuf_free+0x10c>)
 800d370:	f009 fb6c 	bl	8016a4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7b9b      	ldrb	r3, [r3, #14]
 800d378:	3b01      	subs	r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	739a      	strb	r2, [r3, #14]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7b9b      	ldrb	r3, [r3, #14]
 800d384:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d386:	69b8      	ldr	r0, [r7, #24]
 800d388:	f009 f996 	bl	80166b8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d143      	bne.n	800d41a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7b1b      	ldrb	r3, [r3, #12]
 800d39c:	f003 030f 	and.w	r3, r3, #15
 800d3a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	7b5b      	ldrb	r3, [r3, #13]
 800d3a6:	f003 0302 	and.w	r3, r3, #2
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d011      	beq.n	800d3d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d106      	bne.n	800d3c8 <pbuf_free+0x9c>
 800d3ba:	4b1d      	ldr	r3, [pc, #116]	; (800d430 <pbuf_free+0x104>)
 800d3bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d3c0:	491f      	ldr	r1, [pc, #124]	; (800d440 <pbuf_free+0x114>)
 800d3c2:	481d      	ldr	r0, [pc, #116]	; (800d438 <pbuf_free+0x10c>)
 800d3c4:	f009 fb42 	bl	8016a4c <iprintf>
        pc->custom_free_function(p);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	4798      	blx	r3
 800d3d0:	e01d      	b.n	800d40e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d104      	bne.n	800d3e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	200c      	movs	r0, #12
 800d3dc:	f7ff f902 	bl	800c5e4 <memp_free>
 800d3e0:	e015      	b.n	800d40e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d104      	bne.n	800d3f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	200b      	movs	r0, #11
 800d3ec:	f7ff f8fa 	bl	800c5e4 <memp_free>
 800d3f0:	e00d      	b.n	800d40e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <pbuf_free+0xd4>
          mem_free(p);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7fe fd85 	bl	800bf08 <mem_free>
 800d3fe:	e006      	b.n	800d40e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d400:	4b0b      	ldr	r3, [pc, #44]	; (800d430 <pbuf_free+0x104>)
 800d402:	f240 320f 	movw	r2, #783	; 0x30f
 800d406:	490f      	ldr	r1, [pc, #60]	; (800d444 <pbuf_free+0x118>)
 800d408:	480b      	ldr	r0, [pc, #44]	; (800d438 <pbuf_free+0x10c>)
 800d40a:	f009 fb1f 	bl	8016a4c <iprintf>
        }
      }
      count++;
 800d40e:	7ffb      	ldrb	r3, [r7, #31]
 800d410:	3301      	adds	r3, #1
 800d412:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	607b      	str	r3, [r7, #4]
 800d418:	e001      	b.n	800d41e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d41a:	2300      	movs	r3, #0
 800d41c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d199      	bne.n	800d358 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d424:	7ffb      	ldrb	r3, [r7, #31]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3720      	adds	r7, #32
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	08019574 	.word	0x08019574
 800d434:	080196d8 	.word	0x080196d8
 800d438:	080195d4 	.word	0x080195d4
 800d43c:	08019704 	.word	0x08019704
 800d440:	0801971c 	.word	0x0801971c
 800d444:	08019740 	.word	0x08019740

0800d448 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d454:	e005      	b.n	800d462 <pbuf_clen+0x1a>
    ++len;
 800d456:	89fb      	ldrh	r3, [r7, #14]
 800d458:	3301      	adds	r3, #1
 800d45a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1f6      	bne.n	800d456 <pbuf_clen+0xe>
  }
  return len;
 800d468:	89fb      	ldrh	r3, [r7, #14]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3714      	adds	r7, #20
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
	...

0800d478 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d016      	beq.n	800d4b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d486:	f009 f909 	bl	801669c <sys_arch_protect>
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7b9b      	ldrb	r3, [r3, #14]
 800d490:	3301      	adds	r3, #1
 800d492:	b2da      	uxtb	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	739a      	strb	r2, [r3, #14]
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f009 f90d 	bl	80166b8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7b9b      	ldrb	r3, [r3, #14]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <pbuf_ref+0x3c>
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <pbuf_ref+0x44>)
 800d4a8:	f240 3242 	movw	r2, #834	; 0x342
 800d4ac:	4904      	ldr	r1, [pc, #16]	; (800d4c0 <pbuf_ref+0x48>)
 800d4ae:	4805      	ldr	r0, [pc, #20]	; (800d4c4 <pbuf_ref+0x4c>)
 800d4b0:	f009 facc 	bl	8016a4c <iprintf>
  }
}
 800d4b4:	bf00      	nop
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	08019574 	.word	0x08019574
 800d4c0:	08019754 	.word	0x08019754
 800d4c4:	080195d4 	.word	0x080195d4

0800d4c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <pbuf_cat+0x16>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d107      	bne.n	800d4ee <pbuf_cat+0x26>
 800d4de:	4b20      	ldr	r3, [pc, #128]	; (800d560 <pbuf_cat+0x98>)
 800d4e0:	f240 3259 	movw	r2, #857	; 0x359
 800d4e4:	491f      	ldr	r1, [pc, #124]	; (800d564 <pbuf_cat+0x9c>)
 800d4e6:	4820      	ldr	r0, [pc, #128]	; (800d568 <pbuf_cat+0xa0>)
 800d4e8:	f009 fab0 	bl	8016a4c <iprintf>
 800d4ec:	e034      	b.n	800d558 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e00a      	b.n	800d50a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	891a      	ldrh	r2, [r3, #8]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	891b      	ldrh	r3, [r3, #8]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	60fb      	str	r3, [r7, #12]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1f0      	bne.n	800d4f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	891a      	ldrh	r2, [r3, #8]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	895b      	ldrh	r3, [r3, #10]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d006      	beq.n	800d52c <pbuf_cat+0x64>
 800d51e:	4b10      	ldr	r3, [pc, #64]	; (800d560 <pbuf_cat+0x98>)
 800d520:	f240 3262 	movw	r2, #866	; 0x362
 800d524:	4911      	ldr	r1, [pc, #68]	; (800d56c <pbuf_cat+0xa4>)
 800d526:	4810      	ldr	r0, [pc, #64]	; (800d568 <pbuf_cat+0xa0>)
 800d528:	f009 fa90 	bl	8016a4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d006      	beq.n	800d542 <pbuf_cat+0x7a>
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <pbuf_cat+0x98>)
 800d536:	f240 3263 	movw	r2, #867	; 0x363
 800d53a:	490d      	ldr	r1, [pc, #52]	; (800d570 <pbuf_cat+0xa8>)
 800d53c:	480a      	ldr	r0, [pc, #40]	; (800d568 <pbuf_cat+0xa0>)
 800d53e:	f009 fa85 	bl	8016a4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	891a      	ldrh	r2, [r3, #8]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	891b      	ldrh	r3, [r3, #8]
 800d54a:	4413      	add	r3, r2
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08019574 	.word	0x08019574
 800d564:	08019768 	.word	0x08019768
 800d568:	080195d4 	.word	0x080195d4
 800d56c:	080197a0 	.word	0x080197a0
 800d570:	080197d0 	.word	0x080197d0

0800d574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	2300      	movs	r3, #0
 800d584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d008      	beq.n	800d59e <pbuf_copy+0x2a>
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d005      	beq.n	800d59e <pbuf_copy+0x2a>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	891a      	ldrh	r2, [r3, #8]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	891b      	ldrh	r3, [r3, #8]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d209      	bcs.n	800d5b2 <pbuf_copy+0x3e>
 800d59e:	4b57      	ldr	r3, [pc, #348]	; (800d6fc <pbuf_copy+0x188>)
 800d5a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d5a4:	4956      	ldr	r1, [pc, #344]	; (800d700 <pbuf_copy+0x18c>)
 800d5a6:	4857      	ldr	r0, [pc, #348]	; (800d704 <pbuf_copy+0x190>)
 800d5a8:	f009 fa50 	bl	8016a4c <iprintf>
 800d5ac:	f06f 030f 	mvn.w	r3, #15
 800d5b0:	e09f      	b.n	800d6f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	895b      	ldrh	r3, [r3, #10]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	1ad2      	subs	r2, r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	1acb      	subs	r3, r1, r3
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d306      	bcc.n	800d5d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	895b      	ldrh	r3, [r3, #10]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	1ad3      	subs	r3, r2, r3
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	e005      	b.n	800d5e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	895b      	ldrh	r3, [r3, #10]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	18d0      	adds	r0, r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	f009 f99d 	bl	8016936 <memcpy>
    offset_to += len;
 800d5fc:	697a      	ldr	r2, [r7, #20]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4413      	add	r3, r2
 800d602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d604:	693a      	ldr	r2, [r7, #16]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4413      	add	r3, r2
 800d60a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	895b      	ldrh	r3, [r3, #10]
 800d610:	461a      	mov	r2, r3
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	4293      	cmp	r3, r2
 800d616:	d906      	bls.n	800d626 <pbuf_copy+0xb2>
 800d618:	4b38      	ldr	r3, [pc, #224]	; (800d6fc <pbuf_copy+0x188>)
 800d61a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d61e:	493a      	ldr	r1, [pc, #232]	; (800d708 <pbuf_copy+0x194>)
 800d620:	4838      	ldr	r0, [pc, #224]	; (800d704 <pbuf_copy+0x190>)
 800d622:	f009 fa13 	bl	8016a4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	895b      	ldrh	r3, [r3, #10]
 800d62a:	461a      	mov	r2, r3
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	4293      	cmp	r3, r2
 800d630:	d906      	bls.n	800d640 <pbuf_copy+0xcc>
 800d632:	4b32      	ldr	r3, [pc, #200]	; (800d6fc <pbuf_copy+0x188>)
 800d634:	f240 32da 	movw	r2, #986	; 0x3da
 800d638:	4934      	ldr	r1, [pc, #208]	; (800d70c <pbuf_copy+0x198>)
 800d63a:	4832      	ldr	r0, [pc, #200]	; (800d704 <pbuf_copy+0x190>)
 800d63c:	f009 fa06 	bl	8016a4c <iprintf>
    if (offset_from >= p_from->len) {
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	895b      	ldrh	r3, [r3, #10]
 800d644:	461a      	mov	r2, r3
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	4293      	cmp	r3, r2
 800d64a:	d304      	bcc.n	800d656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	895b      	ldrh	r3, [r3, #10]
 800d65a:	461a      	mov	r2, r3
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	4293      	cmp	r3, r2
 800d660:	d114      	bne.n	800d68c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10c      	bne.n	800d68c <pbuf_copy+0x118>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d009      	beq.n	800d68c <pbuf_copy+0x118>
 800d678:	4b20      	ldr	r3, [pc, #128]	; (800d6fc <pbuf_copy+0x188>)
 800d67a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d67e:	4924      	ldr	r1, [pc, #144]	; (800d710 <pbuf_copy+0x19c>)
 800d680:	4820      	ldr	r0, [pc, #128]	; (800d704 <pbuf_copy+0x190>)
 800d682:	f009 f9e3 	bl	8016a4c <iprintf>
 800d686:	f06f 030f 	mvn.w	r3, #15
 800d68a:	e032      	b.n	800d6f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d013      	beq.n	800d6ba <pbuf_copy+0x146>
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	895a      	ldrh	r2, [r3, #10]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	891b      	ldrh	r3, [r3, #8]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d10d      	bne.n	800d6ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d009      	beq.n	800d6ba <pbuf_copy+0x146>
 800d6a6:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <pbuf_copy+0x188>)
 800d6a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d6ac:	4919      	ldr	r1, [pc, #100]	; (800d714 <pbuf_copy+0x1a0>)
 800d6ae:	4815      	ldr	r0, [pc, #84]	; (800d704 <pbuf_copy+0x190>)
 800d6b0:	f009 f9cc 	bl	8016a4c <iprintf>
 800d6b4:	f06f 0305 	mvn.w	r3, #5
 800d6b8:	e01b      	b.n	800d6f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d013      	beq.n	800d6e8 <pbuf_copy+0x174>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	895a      	ldrh	r2, [r3, #10]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	891b      	ldrh	r3, [r3, #8]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d10d      	bne.n	800d6e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d009      	beq.n	800d6e8 <pbuf_copy+0x174>
 800d6d4:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <pbuf_copy+0x188>)
 800d6d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d6da:	490e      	ldr	r1, [pc, #56]	; (800d714 <pbuf_copy+0x1a0>)
 800d6dc:	4809      	ldr	r0, [pc, #36]	; (800d704 <pbuf_copy+0x190>)
 800d6de:	f009 f9b5 	bl	8016a4c <iprintf>
 800d6e2:	f06f 0305 	mvn.w	r3, #5
 800d6e6:	e004      	b.n	800d6f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f47f af61 	bne.w	800d5b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08019574 	.word	0x08019574
 800d700:	0801981c 	.word	0x0801981c
 800d704:	080195d4 	.word	0x080195d4
 800d708:	0801984c 	.word	0x0801984c
 800d70c:	08019864 	.word	0x08019864
 800d710:	08019880 	.word	0x08019880
 800d714:	08019890 	.word	0x08019890

0800d718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	4611      	mov	r1, r2
 800d724:	461a      	mov	r2, r3
 800d726:	460b      	mov	r3, r1
 800d728:	80fb      	strh	r3, [r7, #6]
 800d72a:	4613      	mov	r3, r2
 800d72c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d108      	bne.n	800d74e <pbuf_copy_partial+0x36>
 800d73c:	4b2b      	ldr	r3, [pc, #172]	; (800d7ec <pbuf_copy_partial+0xd4>)
 800d73e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d742:	492b      	ldr	r1, [pc, #172]	; (800d7f0 <pbuf_copy_partial+0xd8>)
 800d744:	482b      	ldr	r0, [pc, #172]	; (800d7f4 <pbuf_copy_partial+0xdc>)
 800d746:	f009 f981 	bl	8016a4c <iprintf>
 800d74a:	2300      	movs	r3, #0
 800d74c:	e04a      	b.n	800d7e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d108      	bne.n	800d766 <pbuf_copy_partial+0x4e>
 800d754:	4b25      	ldr	r3, [pc, #148]	; (800d7ec <pbuf_copy_partial+0xd4>)
 800d756:	f240 420b 	movw	r2, #1035	; 0x40b
 800d75a:	4927      	ldr	r1, [pc, #156]	; (800d7f8 <pbuf_copy_partial+0xe0>)
 800d75c:	4825      	ldr	r0, [pc, #148]	; (800d7f4 <pbuf_copy_partial+0xdc>)
 800d75e:	f009 f975 	bl	8016a4c <iprintf>
 800d762:	2300      	movs	r3, #0
 800d764:	e03e      	b.n	800d7e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	61fb      	str	r3, [r7, #28]
 800d76a:	e034      	b.n	800d7d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d76c:	88bb      	ldrh	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00a      	beq.n	800d788 <pbuf_copy_partial+0x70>
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	895b      	ldrh	r3, [r3, #10]
 800d776:	88ba      	ldrh	r2, [r7, #4]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d305      	bcc.n	800d788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	895b      	ldrh	r3, [r3, #10]
 800d780:	88ba      	ldrh	r2, [r7, #4]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	80bb      	strh	r3, [r7, #4]
 800d786:	e023      	b.n	800d7d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	895a      	ldrh	r2, [r3, #10]
 800d78c:	88bb      	ldrh	r3, [r7, #4]
 800d78e:	1ad3      	subs	r3, r2, r3
 800d790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d792:	8b3a      	ldrh	r2, [r7, #24]
 800d794:	88fb      	ldrh	r3, [r7, #6]
 800d796:	429a      	cmp	r2, r3
 800d798:	d901      	bls.n	800d79e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d79a:	88fb      	ldrh	r3, [r7, #6]
 800d79c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d79e:	8b7b      	ldrh	r3, [r7, #26]
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	18d0      	adds	r0, r2, r3
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	685a      	ldr	r2, [r3, #4]
 800d7a8:	88bb      	ldrh	r3, [r7, #4]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	8b3a      	ldrh	r2, [r7, #24]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	f009 f8c1 	bl	8016936 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d7b4:	8afa      	ldrh	r2, [r7, #22]
 800d7b6:	8b3b      	ldrh	r3, [r7, #24]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d7bc:	8b7a      	ldrh	r2, [r7, #26]
 800d7be:	8b3b      	ldrh	r3, [r7, #24]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d7c4:	88fa      	ldrh	r2, [r7, #6]
 800d7c6:	8b3b      	ldrh	r3, [r7, #24]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	61fb      	str	r3, [r7, #28]
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <pbuf_copy_partial+0xca>
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1c4      	bne.n	800d76c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d7e2:	8afb      	ldrh	r3, [r7, #22]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3720      	adds	r7, #32
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	08019574 	.word	0x08019574
 800d7f0:	080198bc 	.word	0x080198bc
 800d7f4:	080195d4 	.word	0x080195d4
 800d7f8:	080198dc 	.word	0x080198dc

0800d7fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	603a      	str	r2, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
 800d808:	460b      	mov	r3, r1
 800d80a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	8919      	ldrh	r1, [r3, #8]
 800d810:	88ba      	ldrh	r2, [r7, #4]
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	4618      	mov	r0, r3
 800d816:	f7ff faa5 	bl	800cd64 <pbuf_alloc>
 800d81a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <pbuf_clone+0x2a>
    return NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	e011      	b.n	800d84a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f7ff fea3 	bl	800d574 <pbuf_copy>
 800d82e:	4603      	mov	r3, r0
 800d830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d006      	beq.n	800d848 <pbuf_clone+0x4c>
 800d83a:	4b06      	ldr	r3, [pc, #24]	; (800d854 <pbuf_clone+0x58>)
 800d83c:	f240 5224 	movw	r2, #1316	; 0x524
 800d840:	4905      	ldr	r1, [pc, #20]	; (800d858 <pbuf_clone+0x5c>)
 800d842:	4806      	ldr	r0, [pc, #24]	; (800d85c <pbuf_clone+0x60>)
 800d844:	f009 f902 	bl	8016a4c <iprintf>
  return q;
 800d848:	68fb      	ldr	r3, [r7, #12]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08019574 	.word	0x08019574
 800d858:	080199e8 	.word	0x080199e8
 800d85c:	080195d4 	.word	0x080195d4

0800d860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d864:	f009 f980 	bl	8016b68 <rand>
 800d868:	4603      	mov	r3, r0
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d870:	b29b      	uxth	r3, r3
 800d872:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d876:	b29a      	uxth	r2, r3
 800d878:	4b01      	ldr	r3, [pc, #4]	; (800d880 <tcp_init+0x20>)
 800d87a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d87c:	bf00      	nop
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	200004a8 	.word	0x200004a8

0800d884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	7d1b      	ldrb	r3, [r3, #20]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d105      	bne.n	800d8a0 <tcp_free+0x1c>
 800d894:	4b06      	ldr	r3, [pc, #24]	; (800d8b0 <tcp_free+0x2c>)
 800d896:	22d4      	movs	r2, #212	; 0xd4
 800d898:	4906      	ldr	r1, [pc, #24]	; (800d8b4 <tcp_free+0x30>)
 800d89a:	4807      	ldr	r0, [pc, #28]	; (800d8b8 <tcp_free+0x34>)
 800d89c:	f009 f8d6 	bl	8016a4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d8a0:	6879      	ldr	r1, [r7, #4]
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	f7fe fe9e 	bl	800c5e4 <memp_free>
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	08019a74 	.word	0x08019a74
 800d8b4:	08019aa4 	.word	0x08019aa4
 800d8b8:	08019ab8 	.word	0x08019ab8

0800d8bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d105      	bne.n	800d8d8 <tcp_free_listen+0x1c>
 800d8cc:	4b06      	ldr	r3, [pc, #24]	; (800d8e8 <tcp_free_listen+0x2c>)
 800d8ce:	22df      	movs	r2, #223	; 0xdf
 800d8d0:	4906      	ldr	r1, [pc, #24]	; (800d8ec <tcp_free_listen+0x30>)
 800d8d2:	4807      	ldr	r0, [pc, #28]	; (800d8f0 <tcp_free_listen+0x34>)
 800d8d4:	f009 f8ba 	bl	8016a4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	2002      	movs	r0, #2
 800d8dc:	f7fe fe82 	bl	800c5e4 <memp_free>
}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	08019a74 	.word	0x08019a74
 800d8ec:	08019ae0 	.word	0x08019ae0
 800d8f0:	08019ab8 	.word	0x08019ab8

0800d8f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d8f8:	f001 f85c 	bl	800e9b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d8fc:	4b07      	ldr	r3, [pc, #28]	; (800d91c <tcp_tmr+0x28>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	3301      	adds	r3, #1
 800d902:	b2da      	uxtb	r2, r3
 800d904:	4b05      	ldr	r3, [pc, #20]	; (800d91c <tcp_tmr+0x28>)
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	4b04      	ldr	r3, [pc, #16]	; (800d91c <tcp_tmr+0x28>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d914:	f000 fd0e 	bl	800e334 <tcp_slowtmr>
  }
}
 800d918:	bf00      	nop
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200053f5 	.word	0x200053f5

0800d920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d105      	bne.n	800d93c <tcp_remove_listener+0x1c>
 800d930:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <tcp_remove_listener+0x48>)
 800d932:	22ff      	movs	r2, #255	; 0xff
 800d934:	490d      	ldr	r1, [pc, #52]	; (800d96c <tcp_remove_listener+0x4c>)
 800d936:	480e      	ldr	r0, [pc, #56]	; (800d970 <tcp_remove_listener+0x50>)
 800d938:	f009 f888 	bl	8016a4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	e00a      	b.n	800d958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d102      	bne.n	800d952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2200      	movs	r2, #0
 800d950:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	60fb      	str	r3, [r7, #12]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1f1      	bne.n	800d942 <tcp_remove_listener+0x22>
    }
  }
}
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	08019a74 	.word	0x08019a74
 800d96c:	08019afc 	.word	0x08019afc
 800d970:	08019ab8 	.word	0x08019ab8

0800d974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <tcp_listen_closed+0x1c>
 800d982:	4b14      	ldr	r3, [pc, #80]	; (800d9d4 <tcp_listen_closed+0x60>)
 800d984:	f240 1211 	movw	r2, #273	; 0x111
 800d988:	4913      	ldr	r1, [pc, #76]	; (800d9d8 <tcp_listen_closed+0x64>)
 800d98a:	4814      	ldr	r0, [pc, #80]	; (800d9dc <tcp_listen_closed+0x68>)
 800d98c:	f009 f85e 	bl	8016a4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	7d1b      	ldrb	r3, [r3, #20]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d006      	beq.n	800d9a6 <tcp_listen_closed+0x32>
 800d998:	4b0e      	ldr	r3, [pc, #56]	; (800d9d4 <tcp_listen_closed+0x60>)
 800d99a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d99e:	4910      	ldr	r1, [pc, #64]	; (800d9e0 <tcp_listen_closed+0x6c>)
 800d9a0:	480e      	ldr	r0, [pc, #56]	; (800d9dc <tcp_listen_closed+0x68>)
 800d9a2:	f009 f853 	bl	8016a4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	e00b      	b.n	800d9c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d9ac:	4a0d      	ldr	r2, [pc, #52]	; (800d9e4 <tcp_listen_closed+0x70>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff ffb1 	bl	800d920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d9f0      	bls.n	800d9ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d9ca:	bf00      	nop
 800d9cc:	bf00      	nop
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	08019a74 	.word	0x08019a74
 800d9d8:	08019b24 	.word	0x08019b24
 800d9dc:	08019ab8 	.word	0x08019ab8
 800d9e0:	08019b30 	.word	0x08019b30
 800d9e4:	080229e4 	.word	0x080229e4

0800d9e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d9e8:	b5b0      	push	{r4, r5, r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <tcp_close_shutdown+0x20>
 800d9fa:	4b63      	ldr	r3, [pc, #396]	; (800db88 <tcp_close_shutdown+0x1a0>)
 800d9fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800da00:	4962      	ldr	r1, [pc, #392]	; (800db8c <tcp_close_shutdown+0x1a4>)
 800da02:	4863      	ldr	r0, [pc, #396]	; (800db90 <tcp_close_shutdown+0x1a8>)
 800da04:	f009 f822 	bl	8016a4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d066      	beq.n	800dadc <tcp_close_shutdown+0xf4>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	2b04      	cmp	r3, #4
 800da14:	d003      	beq.n	800da1e <tcp_close_shutdown+0x36>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7d1b      	ldrb	r3, [r3, #20]
 800da1a:	2b07      	cmp	r3, #7
 800da1c:	d15e      	bne.n	800dadc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da22:	2b00      	cmp	r3, #0
 800da24:	d104      	bne.n	800da30 <tcp_close_shutdown+0x48>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da2e:	d055      	beq.n	800dadc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8b5b      	ldrh	r3, [r3, #26]
 800da34:	f003 0310 	and.w	r3, r3, #16
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <tcp_close_shutdown+0x62>
 800da3c:	4b52      	ldr	r3, [pc, #328]	; (800db88 <tcp_close_shutdown+0x1a0>)
 800da3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800da42:	4954      	ldr	r1, [pc, #336]	; (800db94 <tcp_close_shutdown+0x1ac>)
 800da44:	4852      	ldr	r0, [pc, #328]	; (800db90 <tcp_close_shutdown+0x1a8>)
 800da46:	f009 f801 	bl	8016a4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da52:	687d      	ldr	r5, [r7, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3304      	adds	r3, #4
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	8ad2      	ldrh	r2, [r2, #22]
 800da5c:	6879      	ldr	r1, [r7, #4]
 800da5e:	8b09      	ldrh	r1, [r1, #24]
 800da60:	9102      	str	r1, [sp, #8]
 800da62:	9201      	str	r2, [sp, #4]
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	462b      	mov	r3, r5
 800da68:	4622      	mov	r2, r4
 800da6a:	4601      	mov	r1, r0
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f005 fd8b 	bl	8013588 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f001 fb6c 	bl	800f150 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800da78:	4b47      	ldr	r3, [pc, #284]	; (800db98 <tcp_close_shutdown+0x1b0>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d105      	bne.n	800da8e <tcp_close_shutdown+0xa6>
 800da82:	4b45      	ldr	r3, [pc, #276]	; (800db98 <tcp_close_shutdown+0x1b0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	4a43      	ldr	r2, [pc, #268]	; (800db98 <tcp_close_shutdown+0x1b0>)
 800da8a:	6013      	str	r3, [r2, #0]
 800da8c:	e013      	b.n	800dab6 <tcp_close_shutdown+0xce>
 800da8e:	4b42      	ldr	r3, [pc, #264]	; (800db98 <tcp_close_shutdown+0x1b0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e00c      	b.n	800dab0 <tcp_close_shutdown+0xc8>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d104      	bne.n	800daaa <tcp_close_shutdown+0xc2>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68da      	ldr	r2, [r3, #12]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	60da      	str	r2, [r3, #12]
 800daa8:	e005      	b.n	800dab6 <tcp_close_shutdown+0xce>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1ef      	bne.n	800da96 <tcp_close_shutdown+0xae>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	60da      	str	r2, [r3, #12]
 800dabc:	4b37      	ldr	r3, [pc, #220]	; (800db9c <tcp_close_shutdown+0x1b4>)
 800dabe:	2201      	movs	r2, #1
 800dac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dac2:	4b37      	ldr	r3, [pc, #220]	; (800dba0 <tcp_close_shutdown+0x1b8>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d102      	bne.n	800dad2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dacc:	f004 f800 	bl	8011ad0 <tcp_trigger_input_pcb_close>
 800dad0:	e002      	b.n	800dad8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff fed6 	bl	800d884 <tcp_free>
      }
      return ERR_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	e050      	b.n	800db7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7d1b      	ldrb	r3, [r3, #20]
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d03b      	beq.n	800db5c <tcp_close_shutdown+0x174>
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	dc44      	bgt.n	800db72 <tcp_close_shutdown+0x18a>
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <tcp_close_shutdown+0x10a>
 800daec:	2b01      	cmp	r3, #1
 800daee:	d02a      	beq.n	800db46 <tcp_close_shutdown+0x15e>
 800daf0:	e03f      	b.n	800db72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8adb      	ldrh	r3, [r3, #22]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d021      	beq.n	800db3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dafa:	4b2a      	ldr	r3, [pc, #168]	; (800dba4 <tcp_close_shutdown+0x1bc>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	429a      	cmp	r2, r3
 800db02:	d105      	bne.n	800db10 <tcp_close_shutdown+0x128>
 800db04:	4b27      	ldr	r3, [pc, #156]	; (800dba4 <tcp_close_shutdown+0x1bc>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	4a26      	ldr	r2, [pc, #152]	; (800dba4 <tcp_close_shutdown+0x1bc>)
 800db0c:	6013      	str	r3, [r2, #0]
 800db0e:	e013      	b.n	800db38 <tcp_close_shutdown+0x150>
 800db10:	4b24      	ldr	r3, [pc, #144]	; (800dba4 <tcp_close_shutdown+0x1bc>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	60bb      	str	r3, [r7, #8]
 800db16:	e00c      	b.n	800db32 <tcp_close_shutdown+0x14a>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d104      	bne.n	800db2c <tcp_close_shutdown+0x144>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68da      	ldr	r2, [r3, #12]
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	60da      	str	r2, [r3, #12]
 800db2a:	e005      	b.n	800db38 <tcp_close_shutdown+0x150>
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	60bb      	str	r3, [r7, #8]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1ef      	bne.n	800db18 <tcp_close_shutdown+0x130>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff fea0 	bl	800d884 <tcp_free>
      break;
 800db44:	e01a      	b.n	800db7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff ff14 	bl	800d974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800db4c:	6879      	ldr	r1, [r7, #4]
 800db4e:	4816      	ldr	r0, [pc, #88]	; (800dba8 <tcp_close_shutdown+0x1c0>)
 800db50:	f001 fb4e 	bl	800f1f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff feb1 	bl	800d8bc <tcp_free_listen>
      break;
 800db5a:	e00f      	b.n	800db7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	480e      	ldr	r0, [pc, #56]	; (800db98 <tcp_close_shutdown+0x1b0>)
 800db60:	f001 fb46 	bl	800f1f0 <tcp_pcb_remove>
 800db64:	4b0d      	ldr	r3, [pc, #52]	; (800db9c <tcp_close_shutdown+0x1b4>)
 800db66:	2201      	movs	r2, #1
 800db68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fe8a 	bl	800d884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800db70:	e004      	b.n	800db7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f81a 	bl	800dbac <tcp_close_shutdown_fin>
 800db78:	4603      	mov	r3, r0
 800db7a:	e000      	b.n	800db7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bdb0      	pop	{r4, r5, r7, pc}
 800db86:	bf00      	nop
 800db88:	08019a74 	.word	0x08019a74
 800db8c:	08019b48 	.word	0x08019b48
 800db90:	08019ab8 	.word	0x08019ab8
 800db94:	08019b68 	.word	0x08019b68
 800db98:	200136b0 	.word	0x200136b0
 800db9c:	200136ac 	.word	0x200136ac
 800dba0:	200136c4 	.word	0x200136c4
 800dba4:	200136bc 	.word	0x200136bc
 800dba8:	200136b8 	.word	0x200136b8

0800dbac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d106      	bne.n	800dbc8 <tcp_close_shutdown_fin+0x1c>
 800dbba:	4b2e      	ldr	r3, [pc, #184]	; (800dc74 <tcp_close_shutdown_fin+0xc8>)
 800dbbc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dbc0:	492d      	ldr	r1, [pc, #180]	; (800dc78 <tcp_close_shutdown_fin+0xcc>)
 800dbc2:	482e      	ldr	r0, [pc, #184]	; (800dc7c <tcp_close_shutdown_fin+0xd0>)
 800dbc4:	f008 ff42 	bl	8016a4c <iprintf>

  switch (pcb->state) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	2b07      	cmp	r3, #7
 800dbce:	d020      	beq.n	800dc12 <tcp_close_shutdown_fin+0x66>
 800dbd0:	2b07      	cmp	r3, #7
 800dbd2:	dc2b      	bgt.n	800dc2c <tcp_close_shutdown_fin+0x80>
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d002      	beq.n	800dbde <tcp_close_shutdown_fin+0x32>
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d00d      	beq.n	800dbf8 <tcp_close_shutdown_fin+0x4c>
 800dbdc:	e026      	b.n	800dc2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f004 fde0 	bl	80127a4 <tcp_send_fin>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dbe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d11f      	bne.n	800dc30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2205      	movs	r2, #5
 800dbf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbf6:	e01b      	b.n	800dc30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f004 fdd3 	bl	80127a4 <tcp_send_fin>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d114      	bne.n	800dc34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2205      	movs	r2, #5
 800dc0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc10:	e010      	b.n	800dc34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f004 fdc6 	bl	80127a4 <tcp_send_fin>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d109      	bne.n	800dc38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2209      	movs	r2, #9
 800dc28:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc2a:	e005      	b.n	800dc38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	e01c      	b.n	800dc6a <tcp_close_shutdown_fin+0xbe>
      break;
 800dc30:	bf00      	nop
 800dc32:	e002      	b.n	800dc3a <tcp_close_shutdown_fin+0x8e>
      break;
 800dc34:	bf00      	nop
 800dc36:	e000      	b.n	800dc3a <tcp_close_shutdown_fin+0x8e>
      break;
 800dc38:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d103      	bne.n	800dc4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f004 feec 	bl	8012a20 <tcp_output>
 800dc48:	e00d      	b.n	800dc66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc52:	d108      	bne.n	800dc66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	8b5b      	ldrh	r3, [r3, #26]
 800dc58:	f043 0308 	orr.w	r3, r3, #8
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	e001      	b.n	800dc6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	08019a74 	.word	0x08019a74
 800dc78:	08019b24 	.word	0x08019b24
 800dc7c:	08019ab8 	.word	0x08019ab8

0800dc80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d109      	bne.n	800dca2 <tcp_close+0x22>
 800dc8e:	4b0f      	ldr	r3, [pc, #60]	; (800dccc <tcp_close+0x4c>)
 800dc90:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dc94:	490e      	ldr	r1, [pc, #56]	; (800dcd0 <tcp_close+0x50>)
 800dc96:	480f      	ldr	r0, [pc, #60]	; (800dcd4 <tcp_close+0x54>)
 800dc98:	f008 fed8 	bl	8016a4c <iprintf>
 800dc9c:	f06f 030f 	mvn.w	r3, #15
 800dca0:	e00f      	b.n	800dcc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	7d1b      	ldrb	r3, [r3, #20]
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d006      	beq.n	800dcb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	8b5b      	ldrh	r3, [r3, #26]
 800dcae:	f043 0310 	orr.w	r3, r3, #16
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dcb8:	2101      	movs	r1, #1
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff fe94 	bl	800d9e8 <tcp_close_shutdown>
 800dcc0:	4603      	mov	r3, r0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	08019a74 	.word	0x08019a74
 800dcd0:	08019b84 	.word	0x08019b84
 800dcd4:	08019ab8 	.word	0x08019ab8

0800dcd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08e      	sub	sp, #56	; 0x38
 800dcdc:	af04      	add	r7, sp, #16
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d107      	bne.n	800dcf8 <tcp_abandon+0x20>
 800dce8:	4b52      	ldr	r3, [pc, #328]	; (800de34 <tcp_abandon+0x15c>)
 800dcea:	f240 223d 	movw	r2, #573	; 0x23d
 800dcee:	4952      	ldr	r1, [pc, #328]	; (800de38 <tcp_abandon+0x160>)
 800dcf0:	4852      	ldr	r0, [pc, #328]	; (800de3c <tcp_abandon+0x164>)
 800dcf2:	f008 feab 	bl	8016a4c <iprintf>
 800dcf6:	e099      	b.n	800de2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7d1b      	ldrb	r3, [r3, #20]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d106      	bne.n	800dd0e <tcp_abandon+0x36>
 800dd00:	4b4c      	ldr	r3, [pc, #304]	; (800de34 <tcp_abandon+0x15c>)
 800dd02:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd06:	494e      	ldr	r1, [pc, #312]	; (800de40 <tcp_abandon+0x168>)
 800dd08:	484c      	ldr	r0, [pc, #304]	; (800de3c <tcp_abandon+0x164>)
 800dd0a:	f008 fe9f 	bl	8016a4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	7d1b      	ldrb	r3, [r3, #20]
 800dd12:	2b0a      	cmp	r3, #10
 800dd14:	d107      	bne.n	800dd26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	484a      	ldr	r0, [pc, #296]	; (800de44 <tcp_abandon+0x16c>)
 800dd1a:	f001 fa69 	bl	800f1f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fdb0 	bl	800d884 <tcp_free>
 800dd24:	e082      	b.n	800de2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7d1b      	ldrb	r3, [r3, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d126      	bne.n	800dd9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	8adb      	ldrh	r3, [r3, #22]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d02e      	beq.n	800ddb6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd58:	4b3b      	ldr	r3, [pc, #236]	; (800de48 <tcp_abandon+0x170>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d105      	bne.n	800dd6e <tcp_abandon+0x96>
 800dd62:	4b39      	ldr	r3, [pc, #228]	; (800de48 <tcp_abandon+0x170>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	4a37      	ldr	r2, [pc, #220]	; (800de48 <tcp_abandon+0x170>)
 800dd6a:	6013      	str	r3, [r2, #0]
 800dd6c:	e013      	b.n	800dd96 <tcp_abandon+0xbe>
 800dd6e:	4b36      	ldr	r3, [pc, #216]	; (800de48 <tcp_abandon+0x170>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	61fb      	str	r3, [r7, #28]
 800dd74:	e00c      	b.n	800dd90 <tcp_abandon+0xb8>
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d104      	bne.n	800dd8a <tcp_abandon+0xb2>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	68da      	ldr	r2, [r3, #12]
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	60da      	str	r2, [r3, #12]
 800dd88:	e005      	b.n	800dd96 <tcp_abandon+0xbe>
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1ef      	bne.n	800dd76 <tcp_abandon+0x9e>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	60da      	str	r2, [r3, #12]
 800dd9c:	e00b      	b.n	800ddb6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8adb      	ldrh	r3, [r3, #22]
 800dda6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dda8:	6879      	ldr	r1, [r7, #4]
 800ddaa:	4828      	ldr	r0, [pc, #160]	; (800de4c <tcp_abandon+0x174>)
 800ddac:	f001 fa20 	bl	800f1f0 <tcp_pcb_remove>
 800ddb0:	4b27      	ldr	r3, [pc, #156]	; (800de50 <tcp_abandon+0x178>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fed6 	bl	800eb74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d004      	beq.n	800ddda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f000 fecd 	bl	800eb74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 fec4 	bl	800eb74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00e      	beq.n	800de10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	8b12      	ldrh	r2, [r2, #24]
 800ddfc:	9202      	str	r2, [sp, #8]
 800ddfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	460b      	mov	r3, r1
 800de06:	697a      	ldr	r2, [r7, #20]
 800de08:	69b9      	ldr	r1, [r7, #24]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f005 fbbc 	bl	8013588 <tcp_rst>
    }
    last_state = pcb->state;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	7d1b      	ldrb	r3, [r3, #20]
 800de14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7ff fd34 	bl	800d884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d004      	beq.n	800de2c <tcp_abandon+0x154>
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	f06f 010c 	mvn.w	r1, #12
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	4798      	blx	r3
  }
}
 800de2c:	3728      	adds	r7, #40	; 0x28
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	08019a74 	.word	0x08019a74
 800de38:	08019bb8 	.word	0x08019bb8
 800de3c:	08019ab8 	.word	0x08019ab8
 800de40:	08019bd4 	.word	0x08019bd4
 800de44:	200136c0 	.word	0x200136c0
 800de48:	200136bc 	.word	0x200136bc
 800de4c:	200136b0 	.word	0x200136b0
 800de50:	200136ac 	.word	0x200136ac

0800de54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de5c:	2101      	movs	r1, #1
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7ff ff3a 	bl	800dcd8 <tcp_abandon>
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b088      	sub	sp, #32
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4613      	mov	r3, r2
 800de78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de7a:	2304      	movs	r3, #4
 800de7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de84:	4b3e      	ldr	r3, [pc, #248]	; (800df80 <tcp_bind+0x114>)
 800de86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d109      	bne.n	800dea2 <tcp_bind+0x36>
 800de8e:	4b3d      	ldr	r3, [pc, #244]	; (800df84 <tcp_bind+0x118>)
 800de90:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de94:	493c      	ldr	r1, [pc, #240]	; (800df88 <tcp_bind+0x11c>)
 800de96:	483d      	ldr	r0, [pc, #244]	; (800df8c <tcp_bind+0x120>)
 800de98:	f008 fdd8 	bl	8016a4c <iprintf>
 800de9c:	f06f 030f 	mvn.w	r3, #15
 800dea0:	e06a      	b.n	800df78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	7d1b      	ldrb	r3, [r3, #20]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d009      	beq.n	800debe <tcp_bind+0x52>
 800deaa:	4b36      	ldr	r3, [pc, #216]	; (800df84 <tcp_bind+0x118>)
 800deac:	f240 22ab 	movw	r2, #683	; 0x2ab
 800deb0:	4937      	ldr	r1, [pc, #220]	; (800df90 <tcp_bind+0x124>)
 800deb2:	4836      	ldr	r0, [pc, #216]	; (800df8c <tcp_bind+0x120>)
 800deb4:	f008 fdca 	bl	8016a4c <iprintf>
 800deb8:	f06f 0305 	mvn.w	r3, #5
 800debc:	e05c      	b.n	800df78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800debe:	88fb      	ldrh	r3, [r7, #6]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d109      	bne.n	800ded8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dec4:	f000 f9f0 	bl	800e2a8 <tcp_new_port>
 800dec8:	4603      	mov	r3, r0
 800deca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800decc:	88fb      	ldrh	r3, [r7, #6]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d135      	bne.n	800df3e <tcp_bind+0xd2>
      return ERR_BUF;
 800ded2:	f06f 0301 	mvn.w	r3, #1
 800ded6:	e04f      	b.n	800df78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ded8:	2300      	movs	r3, #0
 800deda:	61fb      	str	r3, [r7, #28]
 800dedc:	e02b      	b.n	800df36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dede:	4a2d      	ldr	r2, [pc, #180]	; (800df94 <tcp_bind+0x128>)
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e01e      	b.n	800df2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	8adb      	ldrh	r3, [r3, #22]
 800def0:	88fa      	ldrh	r2, [r7, #6]
 800def2:	429a      	cmp	r2, r3
 800def4:	d116      	bne.n	800df24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800def6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800def8:	2b00      	cmp	r3, #0
 800defa:	d010      	beq.n	800df1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00c      	beq.n	800df1e <tcp_bind+0xb2>
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d005      	beq.n	800df1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d102      	bne.n	800df24 <tcp_bind+0xb8>
              return ERR_USE;
 800df1e:	f06f 0307 	mvn.w	r3, #7
 800df22:	e029      	b.n	800df78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	61bb      	str	r3, [r7, #24]
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1dd      	bne.n	800deec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	3301      	adds	r3, #1
 800df34:	61fb      	str	r3, [r7, #28]
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	dbcf      	blt.n	800dede <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00c      	beq.n	800df5e <tcp_bind+0xf2>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d008      	beq.n	800df5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <tcp_bind+0xec>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	e000      	b.n	800df5a <tcp_bind+0xee>
 800df58:	2300      	movs	r3, #0
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	88fa      	ldrh	r2, [r7, #6]
 800df62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df64:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <tcp_bind+0x12c>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	60da      	str	r2, [r3, #12]
 800df6c:	4a0a      	ldr	r2, [pc, #40]	; (800df98 <tcp_bind+0x12c>)
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	f005 fccb 	bl	801390c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3720      	adds	r7, #32
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	08022a0c 	.word	0x08022a0c
 800df84:	08019a74 	.word	0x08019a74
 800df88:	08019c08 	.word	0x08019c08
 800df8c:	08019ab8 	.word	0x08019ab8
 800df90:	08019c20 	.word	0x08019c20
 800df94:	080229e4 	.word	0x080229e4
 800df98:	200136bc 	.word	0x200136bc

0800df9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d106      	bne.n	800dfbe <tcp_accept_null+0x22>
 800dfb0:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <tcp_accept_null+0x34>)
 800dfb2:	f240 320f 	movw	r2, #783	; 0x30f
 800dfb6:	4907      	ldr	r1, [pc, #28]	; (800dfd4 <tcp_accept_null+0x38>)
 800dfb8:	4807      	ldr	r0, [pc, #28]	; (800dfd8 <tcp_accept_null+0x3c>)
 800dfba:	f008 fd47 	bl	8016a4c <iprintf>

  tcp_abort(pcb);
 800dfbe:	68b8      	ldr	r0, [r7, #8]
 800dfc0:	f7ff ff48 	bl	800de54 <tcp_abort>

  return ERR_ABRT;
 800dfc4:	f06f 030c 	mvn.w	r3, #12
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	08019a74 	.word	0x08019a74
 800dfd4:	08019c48 	.word	0x08019c48
 800dfd8:	08019ab8 	.word	0x08019ab8

0800dfdc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	2200      	movs	r2, #0
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 f806 	bl	800e000 <tcp_listen_with_backlog_and_err>
 800dff4:	4603      	mov	r3, r0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
	...

0800e000 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b088      	sub	sp, #32
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	460b      	mov	r3, r1
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d109      	bne.n	800e02c <tcp_listen_with_backlog_and_err+0x2c>
 800e018:	4b47      	ldr	r3, [pc, #284]	; (800e138 <tcp_listen_with_backlog_and_err+0x138>)
 800e01a:	f240 3259 	movw	r2, #857	; 0x359
 800e01e:	4947      	ldr	r1, [pc, #284]	; (800e13c <tcp_listen_with_backlog_and_err+0x13c>)
 800e020:	4847      	ldr	r0, [pc, #284]	; (800e140 <tcp_listen_with_backlog_and_err+0x140>)
 800e022:	f008 fd13 	bl	8016a4c <iprintf>
 800e026:	23f0      	movs	r3, #240	; 0xf0
 800e028:	76fb      	strb	r3, [r7, #27]
 800e02a:	e079      	b.n	800e120 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	7d1b      	ldrb	r3, [r3, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d009      	beq.n	800e048 <tcp_listen_with_backlog_and_err+0x48>
 800e034:	4b40      	ldr	r3, [pc, #256]	; (800e138 <tcp_listen_with_backlog_and_err+0x138>)
 800e036:	f240 325a 	movw	r2, #858	; 0x35a
 800e03a:	4942      	ldr	r1, [pc, #264]	; (800e144 <tcp_listen_with_backlog_and_err+0x144>)
 800e03c:	4840      	ldr	r0, [pc, #256]	; (800e140 <tcp_listen_with_backlog_and_err+0x140>)
 800e03e:	f008 fd05 	bl	8016a4c <iprintf>
 800e042:	23f1      	movs	r3, #241	; 0xf1
 800e044:	76fb      	strb	r3, [r7, #27]
 800e046:	e06b      	b.n	800e120 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	7d1b      	ldrb	r3, [r3, #20]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d104      	bne.n	800e05a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e054:	23f7      	movs	r3, #247	; 0xf7
 800e056:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e058:	e062      	b.n	800e120 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e05a:	2002      	movs	r0, #2
 800e05c:	f7fe fa70 	bl	800c540 <memp_malloc>
 800e060:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e068:	23ff      	movs	r3, #255	; 0xff
 800e06a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e06c:	e058      	b.n	800e120 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	691a      	ldr	r2, [r3, #16]
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8ada      	ldrh	r2, [r3, #22]
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	2201      	movs	r2, #1
 800e082:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	7d5a      	ldrb	r2, [r3, #21]
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	7a5a      	ldrb	r2, [r3, #9]
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	2200      	movs	r2, #0
 800e098:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	7ada      	ldrb	r2, [r3, #11]
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	7a9a      	ldrb	r2, [r3, #10]
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	8adb      	ldrh	r3, [r3, #22]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d021      	beq.n	800e0fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0ba:	4b23      	ldr	r3, [pc, #140]	; (800e148 <tcp_listen_with_backlog_and_err+0x148>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d105      	bne.n	800e0d0 <tcp_listen_with_backlog_and_err+0xd0>
 800e0c4:	4b20      	ldr	r3, [pc, #128]	; (800e148 <tcp_listen_with_backlog_and_err+0x148>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	4a1f      	ldr	r2, [pc, #124]	; (800e148 <tcp_listen_with_backlog_and_err+0x148>)
 800e0cc:	6013      	str	r3, [r2, #0]
 800e0ce:	e013      	b.n	800e0f8 <tcp_listen_with_backlog_and_err+0xf8>
 800e0d0:	4b1d      	ldr	r3, [pc, #116]	; (800e148 <tcp_listen_with_backlog_and_err+0x148>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	617b      	str	r3, [r7, #20]
 800e0d6:	e00c      	b.n	800e0f2 <tcp_listen_with_backlog_and_err+0xf2>
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d104      	bne.n	800e0ec <tcp_listen_with_backlog_and_err+0xec>
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68da      	ldr	r2, [r3, #12]
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	60da      	str	r2, [r3, #12]
 800e0ea:	e005      	b.n	800e0f8 <tcp_listen_with_backlog_and_err+0xf8>
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	617b      	str	r3, [r7, #20]
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1ef      	bne.n	800e0d8 <tcp_listen_with_backlog_and_err+0xd8>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f7ff fbc0 	bl	800d884 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	4a11      	ldr	r2, [pc, #68]	; (800e14c <tcp_listen_with_backlog_and_err+0x14c>)
 800e108:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e10a:	4b11      	ldr	r3, [pc, #68]	; (800e150 <tcp_listen_with_backlog_and_err+0x150>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	60da      	str	r2, [r3, #12]
 800e112:	4a0f      	ldr	r2, [pc, #60]	; (800e150 <tcp_listen_with_backlog_and_err+0x150>)
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	f005 fbf8 	bl	801390c <tcp_timer_needed>
  res = ERR_OK;
 800e11c:	2300      	movs	r3, #0
 800e11e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	7efa      	ldrb	r2, [r7, #27]
 800e12a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e12c:	69fb      	ldr	r3, [r7, #28]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3720      	adds	r7, #32
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	08019a74 	.word	0x08019a74
 800e13c:	08019c68 	.word	0x08019c68
 800e140:	08019ab8 	.word	0x08019ab8
 800e144:	08019c98 	.word	0x08019c98
 800e148:	200136bc 	.word	0x200136bc
 800e14c:	0800df9d 	.word	0x0800df9d
 800e150:	200136b8 	.word	0x200136b8

0800e154 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <tcp_update_rcv_ann_wnd+0x1c>
 800e162:	4b25      	ldr	r3, [pc, #148]	; (800e1f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e164:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e168:	4924      	ldr	r1, [pc, #144]	; (800e1fc <tcp_update_rcv_ann_wnd+0xa8>)
 800e16a:	4825      	ldr	r0, [pc, #148]	; (800e200 <tcp_update_rcv_ann_wnd+0xac>)
 800e16c:	f008 fc6e 	bl	8016a4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e178:	4413      	add	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e184:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e188:	bf28      	it	cs
 800e18a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e18e:	b292      	uxth	r2, r2
 800e190:	4413      	add	r3, r2
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	db08      	blt.n	800e1ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	e020      	b.n	800e1ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	dd03      	ble.n	800e1c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1c0:	e014      	b.n	800e1ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1d4:	d306      	bcc.n	800e1e4 <tcp_update_rcv_ann_wnd+0x90>
 800e1d6:	4b08      	ldr	r3, [pc, #32]	; (800e1f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e1d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e1dc:	4909      	ldr	r1, [pc, #36]	; (800e204 <tcp_update_rcv_ann_wnd+0xb0>)
 800e1de:	4808      	ldr	r0, [pc, #32]	; (800e200 <tcp_update_rcv_ann_wnd+0xac>)
 800e1e0:	f008 fc34 	bl	8016a4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e1ec:	2300      	movs	r3, #0
  }
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	08019a74 	.word	0x08019a74
 800e1fc:	08019cd0 	.word	0x08019cd0
 800e200:	08019ab8 	.word	0x08019ab8
 800e204:	08019cf4 	.word	0x08019cf4

0800e208 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	460b      	mov	r3, r1
 800e212:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d107      	bne.n	800e22a <tcp_recved+0x22>
 800e21a:	4b1f      	ldr	r3, [pc, #124]	; (800e298 <tcp_recved+0x90>)
 800e21c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e220:	491e      	ldr	r1, [pc, #120]	; (800e29c <tcp_recved+0x94>)
 800e222:	481f      	ldr	r0, [pc, #124]	; (800e2a0 <tcp_recved+0x98>)
 800e224:	f008 fc12 	bl	8016a4c <iprintf>
 800e228:	e032      	b.n	800e290 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	7d1b      	ldrb	r3, [r3, #20]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d106      	bne.n	800e240 <tcp_recved+0x38>
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <tcp_recved+0x90>)
 800e234:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e238:	491a      	ldr	r1, [pc, #104]	; (800e2a4 <tcp_recved+0x9c>)
 800e23a:	4819      	ldr	r0, [pc, #100]	; (800e2a0 <tcp_recved+0x98>)
 800e23c:	f008 fc06 	bl	8016a4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e244:	887b      	ldrh	r3, [r7, #2]
 800e246:	4413      	add	r3, r2
 800e248:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e250:	d804      	bhi.n	800e25c <tcp_recved+0x54>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e256:	89fa      	ldrh	r2, [r7, #14]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d204      	bcs.n	800e266 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e262:	851a      	strh	r2, [r3, #40]	; 0x28
 800e264:	e002      	b.n	800e26c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	89fa      	ldrh	r2, [r7, #14]
 800e26a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7ff ff71 	bl	800e154 <tcp_update_rcv_ann_wnd>
 800e272:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e27a:	d309      	bcc.n	800e290 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	8b5b      	ldrh	r3, [r3, #26]
 800e280:	f043 0302 	orr.w	r3, r3, #2
 800e284:	b29a      	uxth	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f004 fbc8 	bl	8012a20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	08019a74 	.word	0x08019a74
 800e29c:	08019d10 	.word	0x08019d10
 800e2a0:	08019ab8 	.word	0x08019ab8
 800e2a4:	08019d28 	.word	0x08019d28

0800e2a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e2b2:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <tcp_new_port+0x84>)
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	4b1c      	ldr	r3, [pc, #112]	; (800e32c <tcp_new_port+0x84>)
 800e2bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e2be:	4b1b      	ldr	r3, [pc, #108]	; (800e32c <tcp_new_port+0x84>)
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d103      	bne.n	800e2d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e2ca:	4b18      	ldr	r3, [pc, #96]	; (800e32c <tcp_new_port+0x84>)
 800e2cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e2d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	71fb      	strb	r3, [r7, #7]
 800e2d6:	e01e      	b.n	800e316 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e2d8:	79fb      	ldrb	r3, [r7, #7]
 800e2da:	4a15      	ldr	r2, [pc, #84]	; (800e330 <tcp_new_port+0x88>)
 800e2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	e011      	b.n	800e30a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	8ada      	ldrh	r2, [r3, #22]
 800e2ea:	4b10      	ldr	r3, [pc, #64]	; (800e32c <tcp_new_port+0x84>)
 800e2ec:	881b      	ldrh	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d108      	bne.n	800e304 <tcp_new_port+0x5c>
        n++;
 800e2f2:	88bb      	ldrh	r3, [r7, #4]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e2f8:	88bb      	ldrh	r3, [r7, #4]
 800e2fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2fe:	d3d8      	bcc.n	800e2b2 <tcp_new_port+0xa>
          return 0;
 800e300:	2300      	movs	r3, #0
 800e302:	e00d      	b.n	800e320 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	603b      	str	r3, [r7, #0]
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1ea      	bne.n	800e2e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	3301      	adds	r3, #1
 800e314:	71fb      	strb	r3, [r7, #7]
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d9dd      	bls.n	800e2d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e31c:	4b03      	ldr	r3, [pc, #12]	; (800e32c <tcp_new_port+0x84>)
 800e31e:	881b      	ldrh	r3, [r3, #0]
}
 800e320:	4618      	mov	r0, r3
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	200004a8 	.word	0x200004a8
 800e330:	080229e4 	.word	0x080229e4

0800e334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e334:	b5b0      	push	{r4, r5, r7, lr}
 800e336:	b090      	sub	sp, #64	; 0x40
 800e338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e340:	4b94      	ldr	r3, [pc, #592]	; (800e594 <tcp_slowtmr+0x260>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3301      	adds	r3, #1
 800e346:	4a93      	ldr	r2, [pc, #588]	; (800e594 <tcp_slowtmr+0x260>)
 800e348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e34a:	4b93      	ldr	r3, [pc, #588]	; (800e598 <tcp_slowtmr+0x264>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	3301      	adds	r3, #1
 800e350:	b2da      	uxtb	r2, r3
 800e352:	4b91      	ldr	r3, [pc, #580]	; (800e598 <tcp_slowtmr+0x264>)
 800e354:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e356:	2300      	movs	r3, #0
 800e358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e35a:	4b90      	ldr	r3, [pc, #576]	; (800e59c <tcp_slowtmr+0x268>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e360:	e29f      	b.n	800e8a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	7d1b      	ldrb	r3, [r3, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <tcp_slowtmr+0x44>
 800e36a:	4b8d      	ldr	r3, [pc, #564]	; (800e5a0 <tcp_slowtmr+0x26c>)
 800e36c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e370:	498c      	ldr	r1, [pc, #560]	; (800e5a4 <tcp_slowtmr+0x270>)
 800e372:	488d      	ldr	r0, [pc, #564]	; (800e5a8 <tcp_slowtmr+0x274>)
 800e374:	f008 fb6a 	bl	8016a4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	7d1b      	ldrb	r3, [r3, #20]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d106      	bne.n	800e38e <tcp_slowtmr+0x5a>
 800e380:	4b87      	ldr	r3, [pc, #540]	; (800e5a0 <tcp_slowtmr+0x26c>)
 800e382:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e386:	4989      	ldr	r1, [pc, #548]	; (800e5ac <tcp_slowtmr+0x278>)
 800e388:	4887      	ldr	r0, [pc, #540]	; (800e5a8 <tcp_slowtmr+0x274>)
 800e38a:	f008 fb5f 	bl	8016a4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	7d1b      	ldrb	r3, [r3, #20]
 800e392:	2b0a      	cmp	r3, #10
 800e394:	d106      	bne.n	800e3a4 <tcp_slowtmr+0x70>
 800e396:	4b82      	ldr	r3, [pc, #520]	; (800e5a0 <tcp_slowtmr+0x26c>)
 800e398:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e39c:	4984      	ldr	r1, [pc, #528]	; (800e5b0 <tcp_slowtmr+0x27c>)
 800e39e:	4882      	ldr	r0, [pc, #520]	; (800e5a8 <tcp_slowtmr+0x274>)
 800e3a0:	f008 fb54 	bl	8016a4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	7f9a      	ldrb	r2, [r3, #30]
 800e3a8:	4b7b      	ldr	r3, [pc, #492]	; (800e598 <tcp_slowtmr+0x264>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d105      	bne.n	800e3bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e3ba:	e272      	b.n	800e8a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e3bc:	4b76      	ldr	r3, [pc, #472]	; (800e598 <tcp_slowtmr+0x264>)
 800e3be:	781a      	ldrb	r2, [r3, #0]
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	7d1b      	ldrb	r3, [r3, #20]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d10a      	bne.n	800e3ee <tcp_slowtmr+0xba>
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3de:	2b05      	cmp	r3, #5
 800e3e0:	d905      	bls.n	800e3ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3ec:	e11e      	b.n	800e62c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3f4:	2b0b      	cmp	r3, #11
 800e3f6:	d905      	bls.n	800e404 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e402:	e113      	b.n	800e62c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d075      	beq.n	800e4fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e412:	2b00      	cmp	r3, #0
 800e414:	d006      	beq.n	800e424 <tcp_slowtmr+0xf0>
 800e416:	4b62      	ldr	r3, [pc, #392]	; (800e5a0 <tcp_slowtmr+0x26c>)
 800e418:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e41c:	4965      	ldr	r1, [pc, #404]	; (800e5b4 <tcp_slowtmr+0x280>)
 800e41e:	4862      	ldr	r0, [pc, #392]	; (800e5a8 <tcp_slowtmr+0x274>)
 800e420:	f008 fb14 	bl	8016a4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d106      	bne.n	800e43a <tcp_slowtmr+0x106>
 800e42c:	4b5c      	ldr	r3, [pc, #368]	; (800e5a0 <tcp_slowtmr+0x26c>)
 800e42e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e432:	4961      	ldr	r1, [pc, #388]	; (800e5b8 <tcp_slowtmr+0x284>)
 800e434:	485c      	ldr	r0, [pc, #368]	; (800e5a8 <tcp_slowtmr+0x274>)
 800e436:	f008 fb09 	bl	8016a4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e440:	2b0b      	cmp	r3, #11
 800e442:	d905      	bls.n	800e450 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e448:	3301      	adds	r3, #1
 800e44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e44e:	e0ed      	b.n	800e62c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e456:	3b01      	subs	r3, #1
 800e458:	4a58      	ldr	r2, [pc, #352]	; (800e5bc <tcp_slowtmr+0x288>)
 800e45a:	5cd3      	ldrb	r3, [r2, r3]
 800e45c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e460:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e464:	7c7a      	ldrb	r2, [r7, #17]
 800e466:	429a      	cmp	r2, r3
 800e468:	d907      	bls.n	800e47a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e470:	3301      	adds	r3, #1
 800e472:	b2da      	uxtb	r2, r3
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e480:	7c7a      	ldrb	r2, [r7, #17]
 800e482:	429a      	cmp	r2, r3
 800e484:	f200 80d2 	bhi.w	800e62c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e488:	2301      	movs	r3, #1
 800e48a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e492:	2b00      	cmp	r3, #0
 800e494:	d108      	bne.n	800e4a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e498:	f005 f96a 	bl	8013770 <tcp_zero_window_probe>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d014      	beq.n	800e4cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	623b      	str	r3, [r7, #32]
 800e4a6:	e011      	b.n	800e4cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4b2:	f004 f82f 	bl	8012514 <tcp_split_unsent_seg>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d107      	bne.n	800e4cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4be:	f004 faaf 	bl	8012a20 <tcp_output>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d101      	bne.n	800e4cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e4cc:	6a3b      	ldr	r3, [r7, #32]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f000 80ac 	beq.w	800e62c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4e2:	2b06      	cmp	r3, #6
 800e4e4:	f200 80a2 	bhi.w	800e62c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e4f8:	e098      	b.n	800e62c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e500:	2b00      	cmp	r3, #0
 800e502:	db0f      	blt.n	800e524 <tcp_slowtmr+0x1f0>
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e50a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e50e:	4293      	cmp	r3, r2
 800e510:	d008      	beq.n	800e524 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e518:	b29b      	uxth	r3, r3
 800e51a:	3301      	adds	r3, #1
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	b21a      	sxth	r2, r3
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e530:	429a      	cmp	r2, r3
 800e532:	db7b      	blt.n	800e62c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e536:	f004 fd65 	bl	8013004 <tcp_rexmit_rto_prepare>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d007      	beq.n	800e550 <tcp_slowtmr+0x21c>
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e544:	2b00      	cmp	r3, #0
 800e546:	d171      	bne.n	800e62c <tcp_slowtmr+0x2f8>
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d06d      	beq.n	800e62c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	7d1b      	ldrb	r3, [r3, #20]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d03a      	beq.n	800e5ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e55e:	2b0c      	cmp	r3, #12
 800e560:	bf28      	it	cs
 800e562:	230c      	movcs	r3, #12
 800e564:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e56c:	10db      	asrs	r3, r3, #3
 800e56e:	b21b      	sxth	r3, r3
 800e570:	461a      	mov	r2, r3
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e578:	4413      	add	r3, r2
 800e57a:	7efa      	ldrb	r2, [r7, #27]
 800e57c:	4910      	ldr	r1, [pc, #64]	; (800e5c0 <tcp_slowtmr+0x28c>)
 800e57e:	5c8a      	ldrb	r2, [r1, r2]
 800e580:	4093      	lsls	r3, r2
 800e582:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e58a:	4293      	cmp	r3, r2
 800e58c:	dc1a      	bgt.n	800e5c4 <tcp_slowtmr+0x290>
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	b21a      	sxth	r2, r3
 800e592:	e019      	b.n	800e5c8 <tcp_slowtmr+0x294>
 800e594:	200136b4 	.word	0x200136b4
 800e598:	200053f6 	.word	0x200053f6
 800e59c:	200136b0 	.word	0x200136b0
 800e5a0:	08019a74 	.word	0x08019a74
 800e5a4:	08019db8 	.word	0x08019db8
 800e5a8:	08019ab8 	.word	0x08019ab8
 800e5ac:	08019de4 	.word	0x08019de4
 800e5b0:	08019e10 	.word	0x08019e10
 800e5b4:	08019e40 	.word	0x08019e40
 800e5b8:	08019e74 	.word	0x08019e74
 800e5bc:	080229dc 	.word	0x080229dc
 800e5c0:	080229cc 	.word	0x080229cc
 800e5c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5e0:	4293      	cmp	r3, r2
 800e5e2:	bf28      	it	cs
 800e5e4:	4613      	movcs	r3, r2
 800e5e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e5e8:	8a7b      	ldrh	r3, [r7, #18]
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5fe:	005b      	lsls	r3, r3, #1
 800e600:	b29b      	uxth	r3, r3
 800e602:	429a      	cmp	r2, r3
 800e604:	d206      	bcs.n	800e614 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	2200      	movs	r2, #0
 800e622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e628:	f004 fd5c 	bl	80130e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	2b06      	cmp	r3, #6
 800e632:	d111      	bne.n	800e658 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e636:	8b5b      	ldrh	r3, [r3, #26]
 800e638:	f003 0310 	and.w	r3, r3, #16
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00b      	beq.n	800e658 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e640:	4b9d      	ldr	r3, [pc, #628]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	6a1b      	ldr	r3, [r3, #32]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	2b28      	cmp	r3, #40	; 0x28
 800e64c:	d904      	bls.n	800e658 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e64e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e652:	3301      	adds	r3, #1
 800e654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65a:	7a5b      	ldrb	r3, [r3, #9]
 800e65c:	f003 0308 	and.w	r3, r3, #8
 800e660:	2b00      	cmp	r3, #0
 800e662:	d04c      	beq.n	800e6fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d003      	beq.n	800e674 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e670:	2b07      	cmp	r3, #7
 800e672:	d144      	bne.n	800e6fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e674:	4b90      	ldr	r3, [pc, #576]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	6a1b      	ldr	r3, [r3, #32]
 800e67c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e684:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e688:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e68c:	498b      	ldr	r1, [pc, #556]	; (800e8bc <tcp_slowtmr+0x588>)
 800e68e:	fba1 1303 	umull	r1, r3, r1, r3
 800e692:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e694:	429a      	cmp	r2, r3
 800e696:	d90a      	bls.n	800e6ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e69c:	3301      	adds	r3, #1
 800e69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e6a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e6ac:	e027      	b.n	800e6fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6ae:	4b82      	ldr	r3, [pc, #520]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	6a1b      	ldr	r3, [r3, #32]
 800e6b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	4b7e      	ldr	r3, [pc, #504]	; (800e8c0 <tcp_slowtmr+0x58c>)
 800e6c8:	fb03 f300 	mul.w	r3, r3, r0
 800e6cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e6ce:	497b      	ldr	r1, [pc, #492]	; (800e8bc <tcp_slowtmr+0x588>)
 800e6d0:	fba1 1303 	umull	r1, r3, r1, r3
 800e6d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d911      	bls.n	800e6fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e6da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6dc:	f005 f808 	bl	80136f0 <tcp_keepalive>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e6e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d107      	bne.n	800e6fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e702:	2b00      	cmp	r3, #0
 800e704:	d011      	beq.n	800e72a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e706:	4b6c      	ldr	r3, [pc, #432]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e716:	4619      	mov	r1, r3
 800e718:	460b      	mov	r3, r1
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	440b      	add	r3, r1
 800e71e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e720:	429a      	cmp	r2, r3
 800e722:	d302      	bcc.n	800e72a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e726:	f000 fec7 	bl	800f4b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	7d1b      	ldrb	r3, [r3, #20]
 800e72e:	2b03      	cmp	r3, #3
 800e730:	d10b      	bne.n	800e74a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e732:	4b61      	ldr	r3, [pc, #388]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	2b28      	cmp	r3, #40	; 0x28
 800e73e:	d904      	bls.n	800e74a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e744:	3301      	adds	r3, #1
 800e746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	7d1b      	ldrb	r3, [r3, #20]
 800e74e:	2b09      	cmp	r3, #9
 800e750:	d10b      	bne.n	800e76a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e752:	4b59      	ldr	r3, [pc, #356]	; (800e8b8 <tcp_slowtmr+0x584>)
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	2bf0      	cmp	r3, #240	; 0xf0
 800e75e:	d904      	bls.n	800e76a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e764:	3301      	adds	r3, #1
 800e766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d060      	beq.n	800e834 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e778:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e77a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e77c:	f000 fce8 	bl	800f150 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	2b00      	cmp	r3, #0
 800e784:	d010      	beq.n	800e7a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e786:	4b4f      	ldr	r3, [pc, #316]	; (800e8c4 <tcp_slowtmr+0x590>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d106      	bne.n	800e79e <tcp_slowtmr+0x46a>
 800e790:	4b4d      	ldr	r3, [pc, #308]	; (800e8c8 <tcp_slowtmr+0x594>)
 800e792:	f240 526d 	movw	r2, #1389	; 0x56d
 800e796:	494d      	ldr	r1, [pc, #308]	; (800e8cc <tcp_slowtmr+0x598>)
 800e798:	484d      	ldr	r0, [pc, #308]	; (800e8d0 <tcp_slowtmr+0x59c>)
 800e79a:	f008 f957 	bl	8016a4c <iprintf>
        prev->next = pcb->next;
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	68da      	ldr	r2, [r3, #12]
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	60da      	str	r2, [r3, #12]
 800e7a6:	e00f      	b.n	800e7c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e7a8:	4b46      	ldr	r3, [pc, #280]	; (800e8c4 <tcp_slowtmr+0x590>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d006      	beq.n	800e7c0 <tcp_slowtmr+0x48c>
 800e7b2:	4b45      	ldr	r3, [pc, #276]	; (800e8c8 <tcp_slowtmr+0x594>)
 800e7b4:	f240 5271 	movw	r2, #1393	; 0x571
 800e7b8:	4946      	ldr	r1, [pc, #280]	; (800e8d4 <tcp_slowtmr+0x5a0>)
 800e7ba:	4845      	ldr	r0, [pc, #276]	; (800e8d0 <tcp_slowtmr+0x59c>)
 800e7bc:	f008 f946 	bl	8016a4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	4a3f      	ldr	r2, [pc, #252]	; (800e8c4 <tcp_slowtmr+0x590>)
 800e7c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e7c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d013      	beq.n	800e7f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e7d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	3304      	adds	r3, #4
 800e7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7e0:	8ad2      	ldrh	r2, [r2, #22]
 800e7e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7e4:	8b09      	ldrh	r1, [r1, #24]
 800e7e6:	9102      	str	r1, [sp, #8]
 800e7e8:	9201      	str	r2, [sp, #4]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	462b      	mov	r3, r5
 800e7ee:	4622      	mov	r2, r4
 800e7f0:	4601      	mov	r1, r0
 800e7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f4:	f004 fec8 	bl	8013588 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e800:	7d1b      	ldrb	r3, [r3, #20]
 800e802:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e80e:	6838      	ldr	r0, [r7, #0]
 800e810:	f7ff f838 	bl	800d884 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e814:	4b30      	ldr	r3, [pc, #192]	; (800e8d8 <tcp_slowtmr+0x5a4>)
 800e816:	2200      	movs	r2, #0
 800e818:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d004      	beq.n	800e82a <tcp_slowtmr+0x4f6>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f06f 010c 	mvn.w	r1, #12
 800e826:	68b8      	ldr	r0, [r7, #8]
 800e828:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e82a:	4b2b      	ldr	r3, [pc, #172]	; (800e8d8 <tcp_slowtmr+0x5a4>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d037      	beq.n	800e8a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e832:	e590      	b.n	800e356 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	7f1b      	ldrb	r3, [r3, #28]
 800e842:	3301      	adds	r3, #1
 800e844:	b2da      	uxtb	r2, r3
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84c:	7f1a      	ldrb	r2, [r3, #28]
 800e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e850:	7f5b      	ldrb	r3, [r3, #29]
 800e852:	429a      	cmp	r2, r3
 800e854:	d325      	bcc.n	800e8a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	2200      	movs	r2, #0
 800e85a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e85c:	4b1e      	ldr	r3, [pc, #120]	; (800e8d8 <tcp_slowtmr+0x5a4>)
 800e85e:	2200      	movs	r2, #0
 800e860:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <tcp_slowtmr+0x550>
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e874:	6912      	ldr	r2, [r2, #16]
 800e876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e878:	4610      	mov	r0, r2
 800e87a:	4798      	blx	r3
 800e87c:	4603      	mov	r3, r0
 800e87e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e882:	e002      	b.n	800e88a <tcp_slowtmr+0x556>
 800e884:	2300      	movs	r3, #0
 800e886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e88a:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <tcp_slowtmr+0x5a4>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d000      	beq.n	800e894 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e892:	e560      	b.n	800e356 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e894:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e89e:	f004 f8bf 	bl	8012a20 <tcp_output>
  while (pcb != NULL) {
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f47f ad5c 	bne.w	800e362 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	; (800e8dc <tcp_slowtmr+0x5a8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e8b4:	e067      	b.n	800e986 <tcp_slowtmr+0x652>
 800e8b6:	bf00      	nop
 800e8b8:	200136b4 	.word	0x200136b4
 800e8bc:	10624dd3 	.word	0x10624dd3
 800e8c0:	000124f8 	.word	0x000124f8
 800e8c4:	200136b0 	.word	0x200136b0
 800e8c8:	08019a74 	.word	0x08019a74
 800e8cc:	08019eac 	.word	0x08019eac
 800e8d0:	08019ab8 	.word	0x08019ab8
 800e8d4:	08019ed8 	.word	0x08019ed8
 800e8d8:	200136ac 	.word	0x200136ac
 800e8dc:	200136c0 	.word	0x200136c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b0a      	cmp	r3, #10
 800e8e6:	d006      	beq.n	800e8f6 <tcp_slowtmr+0x5c2>
 800e8e8:	4b2b      	ldr	r3, [pc, #172]	; (800e998 <tcp_slowtmr+0x664>)
 800e8ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e8ee:	492b      	ldr	r1, [pc, #172]	; (800e99c <tcp_slowtmr+0x668>)
 800e8f0:	482b      	ldr	r0, [pc, #172]	; (800e9a0 <tcp_slowtmr+0x66c>)
 800e8f2:	f008 f8ab 	bl	8016a4c <iprintf>
    pcb_remove = 0;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e8fc:	4b29      	ldr	r3, [pc, #164]	; (800e9a4 <tcp_slowtmr+0x670>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	2bf0      	cmp	r3, #240	; 0xf0
 800e908:	d904      	bls.n	800e914 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e90e:	3301      	adds	r3, #1
 800e910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d02f      	beq.n	800e97c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e91e:	f000 fc17 	bl	800f150 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	2b00      	cmp	r3, #0
 800e926:	d010      	beq.n	800e94a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e928:	4b1f      	ldr	r3, [pc, #124]	; (800e9a8 <tcp_slowtmr+0x674>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e92e:	429a      	cmp	r2, r3
 800e930:	d106      	bne.n	800e940 <tcp_slowtmr+0x60c>
 800e932:	4b19      	ldr	r3, [pc, #100]	; (800e998 <tcp_slowtmr+0x664>)
 800e934:	f240 52af 	movw	r2, #1455	; 0x5af
 800e938:	491c      	ldr	r1, [pc, #112]	; (800e9ac <tcp_slowtmr+0x678>)
 800e93a:	4819      	ldr	r0, [pc, #100]	; (800e9a0 <tcp_slowtmr+0x66c>)
 800e93c:	f008 f886 	bl	8016a4c <iprintf>
        prev->next = pcb->next;
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	60da      	str	r2, [r3, #12]
 800e948:	e00f      	b.n	800e96a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e94a:	4b17      	ldr	r3, [pc, #92]	; (800e9a8 <tcp_slowtmr+0x674>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e950:	429a      	cmp	r2, r3
 800e952:	d006      	beq.n	800e962 <tcp_slowtmr+0x62e>
 800e954:	4b10      	ldr	r3, [pc, #64]	; (800e998 <tcp_slowtmr+0x664>)
 800e956:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e95a:	4915      	ldr	r1, [pc, #84]	; (800e9b0 <tcp_slowtmr+0x67c>)
 800e95c:	4810      	ldr	r0, [pc, #64]	; (800e9a0 <tcp_slowtmr+0x66c>)
 800e95e:	f008 f875 	bl	8016a4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	4a10      	ldr	r2, [pc, #64]	; (800e9a8 <tcp_slowtmr+0x674>)
 800e968:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e974:	69f8      	ldr	r0, [r7, #28]
 800e976:	f7fe ff85 	bl	800d884 <tcp_free>
 800e97a:	e004      	b.n	800e986 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1a9      	bne.n	800e8e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e98c:	bf00      	nop
 800e98e:	bf00      	nop
 800e990:	3730      	adds	r7, #48	; 0x30
 800e992:	46bd      	mov	sp, r7
 800e994:	bdb0      	pop	{r4, r5, r7, pc}
 800e996:	bf00      	nop
 800e998:	08019a74 	.word	0x08019a74
 800e99c:	08019f04 	.word	0x08019f04
 800e9a0:	08019ab8 	.word	0x08019ab8
 800e9a4:	200136b4 	.word	0x200136b4
 800e9a8:	200136c0 	.word	0x200136c0
 800e9ac:	08019f34 	.word	0x08019f34
 800e9b0:	08019f5c 	.word	0x08019f5c

0800e9b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e9ba:	4b2d      	ldr	r3, [pc, #180]	; (800ea70 <tcp_fasttmr+0xbc>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	4b2b      	ldr	r3, [pc, #172]	; (800ea70 <tcp_fasttmr+0xbc>)
 800e9c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e9c6:	4b2b      	ldr	r3, [pc, #172]	; (800ea74 <tcp_fasttmr+0xc0>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9cc:	e048      	b.n	800ea60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	7f9a      	ldrb	r2, [r3, #30]
 800e9d2:	4b27      	ldr	r3, [pc, #156]	; (800ea70 <tcp_fasttmr+0xbc>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d03f      	beq.n	800ea5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e9da:	4b25      	ldr	r3, [pc, #148]	; (800ea70 <tcp_fasttmr+0xbc>)
 800e9dc:	781a      	ldrb	r2, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8b5b      	ldrh	r3, [r3, #26]
 800e9e6:	f003 0301 	and.w	r3, r3, #1
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d010      	beq.n	800ea10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	8b5b      	ldrh	r3, [r3, #26]
 800e9f2:	f043 0302 	orr.w	r3, r3, #2
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f004 f80f 	bl	8012a20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	8b5b      	ldrh	r3, [r3, #26]
 800ea06:	f023 0303 	bic.w	r3, r3, #3
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d009      	beq.n	800ea30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	8b5b      	ldrh	r3, [r3, #26]
 800ea20:	f023 0308 	bic.w	r3, r3, #8
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff f8be 	bl	800dbac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00a      	beq.n	800ea54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ea3e:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <tcp_fasttmr+0xc4>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f819 	bl	800ea7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ea4a:	4b0b      	ldr	r3, [pc, #44]	; (800ea78 <tcp_fasttmr+0xc4>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d000      	beq.n	800ea54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ea52:	e7b8      	b.n	800e9c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	607b      	str	r3, [r7, #4]
 800ea58:	e002      	b.n	800ea60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1b3      	bne.n	800e9ce <tcp_fasttmr+0x1a>
    }
  }
}
 800ea66:	bf00      	nop
 800ea68:	bf00      	nop
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	200053f6 	.word	0x200053f6
 800ea74:	200136b0 	.word	0x200136b0
 800ea78:	200136ac 	.word	0x200136ac

0800ea7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ea7c:	b590      	push	{r4, r7, lr}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d109      	bne.n	800ea9e <tcp_process_refused_data+0x22>
 800ea8a:	4b37      	ldr	r3, [pc, #220]	; (800eb68 <tcp_process_refused_data+0xec>)
 800ea8c:	f240 6209 	movw	r2, #1545	; 0x609
 800ea90:	4936      	ldr	r1, [pc, #216]	; (800eb6c <tcp_process_refused_data+0xf0>)
 800ea92:	4837      	ldr	r0, [pc, #220]	; (800eb70 <tcp_process_refused_data+0xf4>)
 800ea94:	f007 ffda 	bl	8016a4c <iprintf>
 800ea98:	f06f 030f 	mvn.w	r3, #15
 800ea9c:	e060      	b.n	800eb60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaa2:	7b5b      	ldrb	r3, [r3, #13]
 800eaa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00b      	beq.n	800ead4 <tcp_process_refused_data+0x58>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6918      	ldr	r0, [r3, #16]
 800eac6:	2300      	movs	r3, #0
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	47a0      	blx	r4
 800eace:	4603      	mov	r3, r0
 800ead0:	73fb      	strb	r3, [r7, #15]
 800ead2:	e007      	b.n	800eae4 <tcp_process_refused_data+0x68>
 800ead4:	2300      	movs	r3, #0
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	2000      	movs	r0, #0
 800eadc:	f000 f8c2 	bl	800ec64 <tcp_recv_null>
 800eae0:	4603      	mov	r3, r0
 800eae2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d12a      	bne.n	800eb42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eaec:	7bbb      	ldrb	r3, [r7, #14]
 800eaee:	f003 0320 	and.w	r3, r3, #32
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d033      	beq.n	800eb5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eafa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eafe:	d005      	beq.n	800eb0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb04:	3301      	adds	r3, #1
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00b      	beq.n	800eb2e <tcp_process_refused_data+0xb2>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6918      	ldr	r0, [r3, #16]
 800eb20:	2300      	movs	r3, #0
 800eb22:	2200      	movs	r2, #0
 800eb24:	6879      	ldr	r1, [r7, #4]
 800eb26:	47a0      	blx	r4
 800eb28:	4603      	mov	r3, r0
 800eb2a:	73fb      	strb	r3, [r7, #15]
 800eb2c:	e001      	b.n	800eb32 <tcp_process_refused_data+0xb6>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eb32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb36:	f113 0f0d 	cmn.w	r3, #13
 800eb3a:	d110      	bne.n	800eb5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eb3c:	f06f 030c 	mvn.w	r3, #12
 800eb40:	e00e      	b.n	800eb60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eb42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb46:	f113 0f0d 	cmn.w	r3, #13
 800eb4a:	d102      	bne.n	800eb52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eb4c:	f06f 030c 	mvn.w	r3, #12
 800eb50:	e006      	b.n	800eb60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800eb58:	f06f 0304 	mvn.w	r3, #4
 800eb5c:	e000      	b.n	800eb60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd90      	pop	{r4, r7, pc}
 800eb68:	08019a74 	.word	0x08019a74
 800eb6c:	08019f84 	.word	0x08019f84
 800eb70:	08019ab8 	.word	0x08019ab8

0800eb74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eb7c:	e007      	b.n	800eb8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f80a 	bl	800eb9e <tcp_seg_free>
    seg = next;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1f4      	bne.n	800eb7e <tcp_segs_free+0xa>
  }
}
 800eb94:	bf00      	nop
 800eb96:	bf00      	nop
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b082      	sub	sp, #8
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00c      	beq.n	800ebc6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d004      	beq.n	800ebbe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fbb7 	bl	800d32c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ebbe:	6879      	ldr	r1, [r7, #4]
 800ebc0:	2003      	movs	r0, #3
 800ebc2:	f7fd fd0f 	bl	800c5e4 <memp_free>
  }
}
 800ebc6:	bf00      	nop
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d107      	bne.n	800ebf2 <tcp_setprio+0x22>
 800ebe2:	4b07      	ldr	r3, [pc, #28]	; (800ec00 <tcp_setprio+0x30>)
 800ebe4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ebe8:	4906      	ldr	r1, [pc, #24]	; (800ec04 <tcp_setprio+0x34>)
 800ebea:	4807      	ldr	r0, [pc, #28]	; (800ec08 <tcp_setprio+0x38>)
 800ebec:	f007 ff2e 	bl	8016a4c <iprintf>
 800ebf0:	e002      	b.n	800ebf8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	755a      	strb	r2, [r3, #21]
}
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	08019a74 	.word	0x08019a74
 800ec04:	08019fac 	.word	0x08019fac
 800ec08:	08019ab8 	.word	0x08019ab8

0800ec0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <tcp_seg_copy+0x1c>
 800ec1a:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <tcp_seg_copy+0x4c>)
 800ec1c:	f240 6282 	movw	r2, #1666	; 0x682
 800ec20:	490e      	ldr	r1, [pc, #56]	; (800ec5c <tcp_seg_copy+0x50>)
 800ec22:	480f      	ldr	r0, [pc, #60]	; (800ec60 <tcp_seg_copy+0x54>)
 800ec24:	f007 ff12 	bl	8016a4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec28:	2003      	movs	r0, #3
 800ec2a:	f7fd fc89 	bl	800c540 <memp_malloc>
 800ec2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d101      	bne.n	800ec3a <tcp_seg_copy+0x2e>
    return NULL;
 800ec36:	2300      	movs	r3, #0
 800ec38:	e00a      	b.n	800ec50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec3a:	2210      	movs	r2, #16
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	f007 fe79 	bl	8016936 <memcpy>
  pbuf_ref(cseg->p);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe fc15 	bl	800d478 <pbuf_ref>
  return cseg;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	08019a74 	.word	0x08019a74
 800ec5c:	08019fc8 	.word	0x08019fc8
 800ec60:	08019ab8 	.word	0x08019ab8

0800ec64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d109      	bne.n	800ec8c <tcp_recv_null+0x28>
 800ec78:	4b12      	ldr	r3, [pc, #72]	; (800ecc4 <tcp_recv_null+0x60>)
 800ec7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ec7e:	4912      	ldr	r1, [pc, #72]	; (800ecc8 <tcp_recv_null+0x64>)
 800ec80:	4812      	ldr	r0, [pc, #72]	; (800eccc <tcp_recv_null+0x68>)
 800ec82:	f007 fee3 	bl	8016a4c <iprintf>
 800ec86:	f06f 030f 	mvn.w	r3, #15
 800ec8a:	e016      	b.n	800ecba <tcp_recv_null+0x56>

  if (p != NULL) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d009      	beq.n	800eca6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	891b      	ldrh	r3, [r3, #8]
 800ec96:	4619      	mov	r1, r3
 800ec98:	68b8      	ldr	r0, [r7, #8]
 800ec9a:	f7ff fab5 	bl	800e208 <tcp_recved>
    pbuf_free(p);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7fe fb44 	bl	800d32c <pbuf_free>
 800eca4:	e008      	b.n	800ecb8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d104      	bne.n	800ecb8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f7fe ffe6 	bl	800dc80 <tcp_close>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	e000      	b.n	800ecba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	08019a74 	.word	0x08019a74
 800ecc8:	08019fe4 	.word	0x08019fe4
 800eccc:	08019ab8 	.word	0x08019ab8

0800ecd0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ecda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	db01      	blt.n	800ece6 <tcp_kill_prio+0x16>
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	e000      	b.n	800ece8 <tcp_kill_prio+0x18>
 800ece6:	237f      	movs	r3, #127	; 0x7f
 800ece8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ecea:	7afb      	ldrb	r3, [r7, #11]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d034      	beq.n	800ed5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ecf0:	7afb      	ldrb	r3, [r7, #11]
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecfe:	4b19      	ldr	r3, [pc, #100]	; (800ed64 <tcp_kill_prio+0x94>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	e01f      	b.n	800ed46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	7d5b      	ldrb	r3, [r3, #21]
 800ed0a:	7afa      	ldrb	r2, [r7, #11]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d80c      	bhi.n	800ed2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed14:	7afa      	ldrb	r2, [r7, #11]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d112      	bne.n	800ed40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed1a:	4b13      	ldr	r3, [pc, #76]	; (800ed68 <tcp_kill_prio+0x98>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d80a      	bhi.n	800ed40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed2a:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <tcp_kill_prio+0x98>)
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	7d5b      	ldrb	r3, [r3, #21]
 800ed3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1dc      	bne.n	800ed06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d004      	beq.n	800ed5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed52:	6938      	ldr	r0, [r7, #16]
 800ed54:	f7ff f87e 	bl	800de54 <tcp_abort>
 800ed58:	e000      	b.n	800ed5c <tcp_kill_prio+0x8c>
    return;
 800ed5a:	bf00      	nop
  }
}
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	200136b0 	.word	0x200136b0
 800ed68:	200136b4 	.word	0x200136b4

0800ed6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	4603      	mov	r3, r0
 800ed74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	2b08      	cmp	r3, #8
 800ed7a:	d009      	beq.n	800ed90 <tcp_kill_state+0x24>
 800ed7c:	79fb      	ldrb	r3, [r7, #7]
 800ed7e:	2b09      	cmp	r3, #9
 800ed80:	d006      	beq.n	800ed90 <tcp_kill_state+0x24>
 800ed82:	4b1a      	ldr	r3, [pc, #104]	; (800edec <tcp_kill_state+0x80>)
 800ed84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ed88:	4919      	ldr	r1, [pc, #100]	; (800edf0 <tcp_kill_state+0x84>)
 800ed8a:	481a      	ldr	r0, [pc, #104]	; (800edf4 <tcp_kill_state+0x88>)
 800ed8c:	f007 fe5e 	bl	8016a4c <iprintf>

  inactivity = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed98:	4b17      	ldr	r3, [pc, #92]	; (800edf8 <tcp_kill_state+0x8c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	617b      	str	r3, [r7, #20]
 800ed9e:	e017      	b.n	800edd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	7d1b      	ldrb	r3, [r3, #20]
 800eda4:	79fa      	ldrb	r2, [r7, #7]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d10f      	bne.n	800edca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edaa:	4b14      	ldr	r3, [pc, #80]	; (800edfc <tcp_kill_state+0x90>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d807      	bhi.n	800edca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edba:	4b10      	ldr	r3, [pc, #64]	; (800edfc <tcp_kill_state+0x90>)
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	617b      	str	r3, [r7, #20]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1e4      	bne.n	800eda0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d003      	beq.n	800ede4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eddc:	2100      	movs	r1, #0
 800edde:	6938      	ldr	r0, [r7, #16]
 800ede0:	f7fe ff7a 	bl	800dcd8 <tcp_abandon>
  }
}
 800ede4:	bf00      	nop
 800ede6:	3718      	adds	r7, #24
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	08019a74 	.word	0x08019a74
 800edf0:	0801a000 	.word	0x0801a000
 800edf4:	08019ab8 	.word	0x08019ab8
 800edf8:	200136b0 	.word	0x200136b0
 800edfc:	200136b4 	.word	0x200136b4

0800ee00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0e:	4b12      	ldr	r3, [pc, #72]	; (800ee58 <tcp_kill_timewait+0x58>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	60fb      	str	r3, [r7, #12]
 800ee14:	e012      	b.n	800ee3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee16:	4b11      	ldr	r3, [pc, #68]	; (800ee5c <tcp_kill_timewait+0x5c>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d807      	bhi.n	800ee36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee26:	4b0d      	ldr	r3, [pc, #52]	; (800ee5c <tcp_kill_timewait+0x5c>)
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1e9      	bne.n	800ee16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d002      	beq.n	800ee4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee48:	68b8      	ldr	r0, [r7, #8]
 800ee4a:	f7ff f803 	bl	800de54 <tcp_abort>
  }
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	200136c0 	.word	0x200136c0
 800ee5c:	200136b4 	.word	0x200136b4

0800ee60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ee66:	4b10      	ldr	r3, [pc, #64]	; (800eea8 <tcp_handle_closepend+0x48>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ee6c:	e014      	b.n	800ee98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8b5b      	ldrh	r3, [r3, #26]
 800ee78:	f003 0308 	and.w	r3, r3, #8
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d009      	beq.n	800ee94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	8b5b      	ldrh	r3, [r3, #26]
 800ee84:	f023 0308 	bic.w	r3, r3, #8
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7fe fe8c 	bl	800dbac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1e7      	bne.n	800ee6e <tcp_handle_closepend+0xe>
  }
}
 800ee9e:	bf00      	nop
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	200136b0 	.word	0x200136b0

0800eeac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	f7fd fb42 	bl	800c540 <memp_malloc>
 800eebc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d126      	bne.n	800ef12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eec4:	f7ff ffcc 	bl	800ee60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eec8:	f7ff ff9a 	bl	800ee00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eecc:	2001      	movs	r0, #1
 800eece:	f7fd fb37 	bl	800c540 <memp_malloc>
 800eed2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d11b      	bne.n	800ef12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eeda:	2009      	movs	r0, #9
 800eedc:	f7ff ff46 	bl	800ed6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eee0:	2001      	movs	r0, #1
 800eee2:	f7fd fb2d 	bl	800c540 <memp_malloc>
 800eee6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d111      	bne.n	800ef12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800eeee:	2008      	movs	r0, #8
 800eef0:	f7ff ff3c 	bl	800ed6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eef4:	2001      	movs	r0, #1
 800eef6:	f7fd fb23 	bl	800c540 <memp_malloc>
 800eefa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d107      	bne.n	800ef12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef02:	79fb      	ldrb	r3, [r7, #7]
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff fee3 	bl	800ecd0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	f7fd fb18 	bl	800c540 <memp_malloc>
 800ef10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d03f      	beq.n	800ef98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef18:	229c      	movs	r2, #156	; 0x9c
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f007 fd32 	bl	8016986 <memset>
    pcb->prio = prio;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	79fa      	ldrb	r2, [r7, #7]
 800ef26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef38:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	22ff      	movs	r2, #255	; 0xff
 800ef46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2206      	movs	r2, #6
 800ef54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2206      	movs	r2, #6
 800ef5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ef6e:	4b0d      	ldr	r3, [pc, #52]	; (800efa4 <tcp_alloc+0xf8>)
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <tcp_alloc+0xfc>)
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	4a08      	ldr	r2, [pc, #32]	; (800efac <tcp_alloc+0x100>)
 800ef8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4a07      	ldr	r2, [pc, #28]	; (800efb0 <tcp_alloc+0x104>)
 800ef94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ef98:	68fb      	ldr	r3, [r7, #12]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	200136b4 	.word	0x200136b4
 800efa8:	200053f6 	.word	0x200053f6
 800efac:	0800ec65 	.word	0x0800ec65
 800efb0:	006ddd00 	.word	0x006ddd00

0800efb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800efbe:	2040      	movs	r0, #64	; 0x40
 800efc0:	f7ff ff74 	bl	800eeac <tcp_alloc>
 800efc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800efc6:	68fb      	ldr	r3, [r7, #12]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	611a      	str	r2, [r3, #16]
  }
}
 800efe6:	bf00      	nop
 800efe8:	370c      	adds	r7, #12
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
	...

0800eff4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00e      	beq.n	800f022 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d106      	bne.n	800f01a <tcp_recv+0x26>
 800f00c:	4b07      	ldr	r3, [pc, #28]	; (800f02c <tcp_recv+0x38>)
 800f00e:	f240 72df 	movw	r2, #2015	; 0x7df
 800f012:	4907      	ldr	r1, [pc, #28]	; (800f030 <tcp_recv+0x3c>)
 800f014:	4807      	ldr	r0, [pc, #28]	; (800f034 <tcp_recv+0x40>)
 800f016:	f007 fd19 	bl	8016a4c <iprintf>
    pcb->recv = recv;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f022:	bf00      	nop
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	08019a74 	.word	0x08019a74
 800f030:	0801a010 	.word	0x0801a010
 800f034:	08019ab8 	.word	0x08019ab8

0800f038 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00e      	beq.n	800f066 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d106      	bne.n	800f05e <tcp_sent+0x26>
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <tcp_sent+0x38>)
 800f052:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f056:	4907      	ldr	r1, [pc, #28]	; (800f074 <tcp_sent+0x3c>)
 800f058:	4807      	ldr	r0, [pc, #28]	; (800f078 <tcp_sent+0x40>)
 800f05a:	f007 fcf7 	bl	8016a4c <iprintf>
    pcb->sent = sent;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	08019a74 	.word	0x08019a74
 800f074:	0801a038 	.word	0x0801a038
 800f078:	08019ab8 	.word	0x08019ab8

0800f07c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00e      	beq.n	800f0aa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d106      	bne.n	800f0a2 <tcp_err+0x26>
 800f094:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <tcp_err+0x38>)
 800f096:	f640 020d 	movw	r2, #2061	; 0x80d
 800f09a:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <tcp_err+0x3c>)
 800f09c:	4807      	ldr	r0, [pc, #28]	; (800f0bc <tcp_err+0x40>)
 800f09e:	f007 fcd5 	bl	8016a4c <iprintf>
    pcb->errf = err;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	08019a74 	.word	0x08019a74
 800f0b8:	0801a060 	.word	0x0801a060
 800f0bc:	08019ab8 	.word	0x08019ab8

0800f0c0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d008      	beq.n	800f0e2 <tcp_accept+0x22>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d104      	bne.n	800f0e2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	619a      	str	r2, [r3, #24]
  }
}
 800f0e2:	bf00      	nop
 800f0e4:	3714      	adds	r7, #20
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d107      	bne.n	800f114 <tcp_poll+0x24>
 800f104:	4b0e      	ldr	r3, [pc, #56]	; (800f140 <tcp_poll+0x50>)
 800f106:	f640 023d 	movw	r2, #2109	; 0x83d
 800f10a:	490e      	ldr	r1, [pc, #56]	; (800f144 <tcp_poll+0x54>)
 800f10c:	480e      	ldr	r0, [pc, #56]	; (800f148 <tcp_poll+0x58>)
 800f10e:	f007 fc9d 	bl	8016a4c <iprintf>
 800f112:	e011      	b.n	800f138 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d106      	bne.n	800f12a <tcp_poll+0x3a>
 800f11c:	4b08      	ldr	r3, [pc, #32]	; (800f140 <tcp_poll+0x50>)
 800f11e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f122:	490a      	ldr	r1, [pc, #40]	; (800f14c <tcp_poll+0x5c>)
 800f124:	4808      	ldr	r0, [pc, #32]	; (800f148 <tcp_poll+0x58>)
 800f126:	f007 fc91 	bl	8016a4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	79fa      	ldrb	r2, [r7, #7]
 800f136:	775a      	strb	r2, [r3, #29]
}
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	08019a74 	.word	0x08019a74
 800f144:	0801a088 	.word	0x0801a088
 800f148:	08019ab8 	.word	0x08019ab8
 800f14c:	0801a0a0 	.word	0x0801a0a0

0800f150 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d107      	bne.n	800f16e <tcp_pcb_purge+0x1e>
 800f15e:	4b21      	ldr	r3, [pc, #132]	; (800f1e4 <tcp_pcb_purge+0x94>)
 800f160:	f640 0251 	movw	r2, #2129	; 0x851
 800f164:	4920      	ldr	r1, [pc, #128]	; (800f1e8 <tcp_pcb_purge+0x98>)
 800f166:	4821      	ldr	r0, [pc, #132]	; (800f1ec <tcp_pcb_purge+0x9c>)
 800f168:	f007 fc70 	bl	8016a4c <iprintf>
 800f16c:	e037      	b.n	800f1de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	7d1b      	ldrb	r3, [r3, #20]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d033      	beq.n	800f1de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f17a:	2b0a      	cmp	r3, #10
 800f17c:	d02f      	beq.n	800f1de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f182:	2b01      	cmp	r3, #1
 800f184:	d02b      	beq.n	800f1de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d007      	beq.n	800f19e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe f8ca 	bl	800d32c <pbuf_free>
      pcb->refused_data = NULL;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f986 	bl	800f4b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff fcdb 	bl	800eb74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff fcd6 	bl	800eb74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	08019a74 	.word	0x08019a74
 800f1e8:	0801a0c0 	.word	0x0801a0c0
 800f1ec:	08019ab8 	.word	0x08019ab8

0800f1f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d106      	bne.n	800f20e <tcp_pcb_remove+0x1e>
 800f200:	4b3e      	ldr	r3, [pc, #248]	; (800f2fc <tcp_pcb_remove+0x10c>)
 800f202:	f640 0283 	movw	r2, #2179	; 0x883
 800f206:	493e      	ldr	r1, [pc, #248]	; (800f300 <tcp_pcb_remove+0x110>)
 800f208:	483e      	ldr	r0, [pc, #248]	; (800f304 <tcp_pcb_remove+0x114>)
 800f20a:	f007 fc1f 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d106      	bne.n	800f222 <tcp_pcb_remove+0x32>
 800f214:	4b39      	ldr	r3, [pc, #228]	; (800f2fc <tcp_pcb_remove+0x10c>)
 800f216:	f640 0284 	movw	r2, #2180	; 0x884
 800f21a:	493b      	ldr	r1, [pc, #236]	; (800f308 <tcp_pcb_remove+0x118>)
 800f21c:	4839      	ldr	r0, [pc, #228]	; (800f304 <tcp_pcb_remove+0x114>)
 800f21e:	f007 fc15 	bl	8016a4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d105      	bne.n	800f238 <tcp_pcb_remove+0x48>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68da      	ldr	r2, [r3, #12]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	e013      	b.n	800f260 <tcp_pcb_remove+0x70>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	e00c      	b.n	800f25a <tcp_pcb_remove+0x6a>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	429a      	cmp	r2, r3
 800f248:	d104      	bne.n	800f254 <tcp_pcb_remove+0x64>
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	68da      	ldr	r2, [r3, #12]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	60da      	str	r2, [r3, #12]
 800f252:	e005      	b.n	800f260 <tcp_pcb_remove+0x70>
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d1ef      	bne.n	800f240 <tcp_pcb_remove+0x50>
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2200      	movs	r2, #0
 800f264:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f266:	6838      	ldr	r0, [r7, #0]
 800f268:	f7ff ff72 	bl	800f150 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b0a      	cmp	r3, #10
 800f272:	d013      	beq.n	800f29c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d00f      	beq.n	800f29c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	8b5b      	ldrh	r3, [r3, #26]
 800f280:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f284:	2b00      	cmp	r3, #0
 800f286:	d009      	beq.n	800f29c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	8b5b      	ldrh	r3, [r3, #26]
 800f28c:	f043 0302 	orr.w	r3, r3, #2
 800f290:	b29a      	uxth	r2, r3
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f296:	6838      	ldr	r0, [r7, #0]
 800f298:	f003 fbc2 	bl	8012a20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	7d1b      	ldrb	r3, [r3, #20]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d020      	beq.n	800f2e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d006      	beq.n	800f2ba <tcp_pcb_remove+0xca>
 800f2ac:	4b13      	ldr	r3, [pc, #76]	; (800f2fc <tcp_pcb_remove+0x10c>)
 800f2ae:	f640 0293 	movw	r2, #2195	; 0x893
 800f2b2:	4916      	ldr	r1, [pc, #88]	; (800f30c <tcp_pcb_remove+0x11c>)
 800f2b4:	4813      	ldr	r0, [pc, #76]	; (800f304 <tcp_pcb_remove+0x114>)
 800f2b6:	f007 fbc9 	bl	8016a4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d006      	beq.n	800f2d0 <tcp_pcb_remove+0xe0>
 800f2c2:	4b0e      	ldr	r3, [pc, #56]	; (800f2fc <tcp_pcb_remove+0x10c>)
 800f2c4:	f640 0294 	movw	r2, #2196	; 0x894
 800f2c8:	4911      	ldr	r1, [pc, #68]	; (800f310 <tcp_pcb_remove+0x120>)
 800f2ca:	480e      	ldr	r0, [pc, #56]	; (800f304 <tcp_pcb_remove+0x114>)
 800f2cc:	f007 fbbe 	bl	8016a4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <tcp_pcb_remove+0xf6>
 800f2d8:	4b08      	ldr	r3, [pc, #32]	; (800f2fc <tcp_pcb_remove+0x10c>)
 800f2da:	f640 0296 	movw	r2, #2198	; 0x896
 800f2de:	490d      	ldr	r1, [pc, #52]	; (800f314 <tcp_pcb_remove+0x124>)
 800f2e0:	4808      	ldr	r0, [pc, #32]	; (800f304 <tcp_pcb_remove+0x114>)
 800f2e2:	f007 fbb3 	bl	8016a4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f2f2:	bf00      	nop
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	08019a74 	.word	0x08019a74
 800f300:	0801a0dc 	.word	0x0801a0dc
 800f304:	08019ab8 	.word	0x08019ab8
 800f308:	0801a0f8 	.word	0x0801a0f8
 800f30c:	0801a118 	.word	0x0801a118
 800f310:	0801a130 	.word	0x0801a130
 800f314:	0801a14c 	.word	0x0801a14c

0800f318 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d106      	bne.n	800f334 <tcp_next_iss+0x1c>
 800f326:	4b0a      	ldr	r3, [pc, #40]	; (800f350 <tcp_next_iss+0x38>)
 800f328:	f640 02af 	movw	r2, #2223	; 0x8af
 800f32c:	4909      	ldr	r1, [pc, #36]	; (800f354 <tcp_next_iss+0x3c>)
 800f32e:	480a      	ldr	r0, [pc, #40]	; (800f358 <tcp_next_iss+0x40>)
 800f330:	f007 fb8c 	bl	8016a4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f334:	4b09      	ldr	r3, [pc, #36]	; (800f35c <tcp_next_iss+0x44>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	4b09      	ldr	r3, [pc, #36]	; (800f360 <tcp_next_iss+0x48>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4413      	add	r3, r2
 800f33e:	4a07      	ldr	r2, [pc, #28]	; (800f35c <tcp_next_iss+0x44>)
 800f340:	6013      	str	r3, [r2, #0]
  return iss;
 800f342:	4b06      	ldr	r3, [pc, #24]	; (800f35c <tcp_next_iss+0x44>)
 800f344:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	08019a74 	.word	0x08019a74
 800f354:	0801a164 	.word	0x0801a164
 800f358:	08019ab8 	.word	0x08019ab8
 800f35c:	200004ac 	.word	0x200004ac
 800f360:	200136b4 	.word	0x200136b4

0800f364 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d106      	bne.n	800f386 <tcp_eff_send_mss_netif+0x22>
 800f378:	4b14      	ldr	r3, [pc, #80]	; (800f3cc <tcp_eff_send_mss_netif+0x68>)
 800f37a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f37e:	4914      	ldr	r1, [pc, #80]	; (800f3d0 <tcp_eff_send_mss_netif+0x6c>)
 800f380:	4814      	ldr	r0, [pc, #80]	; (800f3d4 <tcp_eff_send_mss_netif+0x70>)
 800f382:	f007 fb63 	bl	8016a4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f38c:	89fb      	ldrh	r3, [r7, #14]
 800f38e:	e019      	b.n	800f3c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f394:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f396:	8afb      	ldrh	r3, [r7, #22]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d012      	beq.n	800f3c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f39c:	2328      	movs	r3, #40	; 0x28
 800f39e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3a0:	8afa      	ldrh	r2, [r7, #22]
 800f3a2:	8abb      	ldrh	r3, [r7, #20]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d904      	bls.n	800f3b2 <tcp_eff_send_mss_netif+0x4e>
 800f3a8:	8afa      	ldrh	r2, [r7, #22]
 800f3aa:	8abb      	ldrh	r3, [r7, #20]
 800f3ac:	1ad3      	subs	r3, r2, r3
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	e000      	b.n	800f3b4 <tcp_eff_send_mss_netif+0x50>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3b6:	8a7a      	ldrh	r2, [r7, #18]
 800f3b8:	89fb      	ldrh	r3, [r7, #14]
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	bf28      	it	cs
 800f3be:	4613      	movcs	r3, r2
 800f3c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f3c2:	89fb      	ldrh	r3, [r7, #14]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3718      	adds	r7, #24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	08019a74 	.word	0x08019a74
 800f3d0:	0801a180 	.word	0x0801a180
 800f3d4:	08019ab8 	.word	0x08019ab8

0800f3d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d119      	bne.n	800f420 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f3ec:	4b10      	ldr	r3, [pc, #64]	; (800f430 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f3ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f3f2:	4910      	ldr	r1, [pc, #64]	; (800f434 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f3f4:	4810      	ldr	r0, [pc, #64]	; (800f438 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f3f6:	f007 fb29 	bl	8016a4c <iprintf>

  while (pcb != NULL) {
 800f3fa:	e011      	b.n	800f420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d108      	bne.n	800f41a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f40e:	68f8      	ldr	r0, [r7, #12]
 800f410:	f7fe fd20 	bl	800de54 <tcp_abort>
      pcb = next;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e002      	b.n	800f420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1ea      	bne.n	800f3fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f426:	bf00      	nop
 800f428:	bf00      	nop
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	08019a74 	.word	0x08019a74
 800f434:	0801a1a8 	.word	0x0801a1a8
 800f438:	08019ab8 	.word	0x08019ab8

0800f43c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d02a      	beq.n	800f4a2 <tcp_netif_ip_addr_changed+0x66>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d026      	beq.n	800f4a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f454:	4b15      	ldr	r3, [pc, #84]	; (800f4ac <tcp_netif_ip_addr_changed+0x70>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4619      	mov	r1, r3
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f7ff ffbc 	bl	800f3d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f460:	4b13      	ldr	r3, [pc, #76]	; (800f4b0 <tcp_netif_ip_addr_changed+0x74>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4619      	mov	r1, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff ffb6 	bl	800f3d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d017      	beq.n	800f4a2 <tcp_netif_ip_addr_changed+0x66>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d013      	beq.n	800f4a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f47a:	4b0e      	ldr	r3, [pc, #56]	; (800f4b4 <tcp_netif_ip_addr_changed+0x78>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	e00c      	b.n	800f49c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d103      	bne.n	800f496 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1ef      	bne.n	800f482 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4a2:	bf00      	nop
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	200136b0 	.word	0x200136b0
 800f4b0:	200136bc 	.word	0x200136bc
 800f4b4:	200136b8 	.word	0x200136b8

0800f4b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d007      	beq.n	800f4d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7ff fb51 	bl	800eb74 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b08d      	sub	sp, #52	; 0x34
 800f4e4:	af04      	add	r7, sp, #16
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d105      	bne.n	800f4fc <tcp_input+0x1c>
 800f4f0:	4b9b      	ldr	r3, [pc, #620]	; (800f760 <tcp_input+0x280>)
 800f4f2:	2283      	movs	r2, #131	; 0x83
 800f4f4:	499b      	ldr	r1, [pc, #620]	; (800f764 <tcp_input+0x284>)
 800f4f6:	489c      	ldr	r0, [pc, #624]	; (800f768 <tcp_input+0x288>)
 800f4f8:	f007 faa8 	bl	8016a4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	4a9a      	ldr	r2, [pc, #616]	; (800f76c <tcp_input+0x28c>)
 800f502:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	895b      	ldrh	r3, [r3, #10]
 800f508:	2b13      	cmp	r3, #19
 800f50a:	f240 83c4 	bls.w	800fc96 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f50e:	4b98      	ldr	r3, [pc, #608]	; (800f770 <tcp_input+0x290>)
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	4a97      	ldr	r2, [pc, #604]	; (800f770 <tcp_input+0x290>)
 800f514:	6812      	ldr	r2, [r2, #0]
 800f516:	4611      	mov	r1, r2
 800f518:	4618      	mov	r0, r3
 800f51a:	f006 f89b 	bl	8015654 <ip4_addr_isbroadcast_u32>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	f040 83ba 	bne.w	800fc9a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f526:	4b92      	ldr	r3, [pc, #584]	; (800f770 <tcp_input+0x290>)
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f52e:	2be0      	cmp	r3, #224	; 0xe0
 800f530:	f000 83b3 	beq.w	800fc9a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f534:	4b8d      	ldr	r3, [pc, #564]	; (800f76c <tcp_input+0x28c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fc fa6b 	bl	800ba18 <lwip_htons>
 800f542:	4603      	mov	r3, r0
 800f544:	0b1b      	lsrs	r3, r3, #12
 800f546:	b29b      	uxth	r3, r3
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f54e:	7cbb      	ldrb	r3, [r7, #18]
 800f550:	2b13      	cmp	r3, #19
 800f552:	f240 83a4 	bls.w	800fc9e <tcp_input+0x7be>
 800f556:	7cbb      	ldrb	r3, [r7, #18]
 800f558:	b29a      	uxth	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	891b      	ldrh	r3, [r3, #8]
 800f55e:	429a      	cmp	r2, r3
 800f560:	f200 839d 	bhi.w	800fc9e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f564:	7cbb      	ldrb	r3, [r7, #18]
 800f566:	b29b      	uxth	r3, r3
 800f568:	3b14      	subs	r3, #20
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	4b81      	ldr	r3, [pc, #516]	; (800f774 <tcp_input+0x294>)
 800f56e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f570:	4b81      	ldr	r3, [pc, #516]	; (800f778 <tcp_input+0x298>)
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	895a      	ldrh	r2, [r3, #10]
 800f57a:	7cbb      	ldrb	r3, [r7, #18]
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	429a      	cmp	r2, r3
 800f580:	d309      	bcc.n	800f596 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f582:	4b7c      	ldr	r3, [pc, #496]	; (800f774 <tcp_input+0x294>)
 800f584:	881a      	ldrh	r2, [r3, #0]
 800f586:	4b7d      	ldr	r3, [pc, #500]	; (800f77c <tcp_input+0x29c>)
 800f588:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f58a:	7cbb      	ldrb	r3, [r7, #18]
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7fd fe46 	bl	800d220 <pbuf_remove_header>
 800f594:	e04e      	b.n	800f634 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d105      	bne.n	800f5aa <tcp_input+0xca>
 800f59e:	4b70      	ldr	r3, [pc, #448]	; (800f760 <tcp_input+0x280>)
 800f5a0:	22c2      	movs	r2, #194	; 0xc2
 800f5a2:	4977      	ldr	r1, [pc, #476]	; (800f780 <tcp_input+0x2a0>)
 800f5a4:	4870      	ldr	r0, [pc, #448]	; (800f768 <tcp_input+0x288>)
 800f5a6:	f007 fa51 	bl	8016a4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5aa:	2114      	movs	r1, #20
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7fd fe37 	bl	800d220 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	895a      	ldrh	r2, [r3, #10]
 800f5b6:	4b71      	ldr	r3, [pc, #452]	; (800f77c <tcp_input+0x29c>)
 800f5b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5ba:	4b6e      	ldr	r3, [pc, #440]	; (800f774 <tcp_input+0x294>)
 800f5bc:	881a      	ldrh	r2, [r3, #0]
 800f5be:	4b6f      	ldr	r3, [pc, #444]	; (800f77c <tcp_input+0x29c>)
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f5c6:	4b6d      	ldr	r3, [pc, #436]	; (800f77c <tcp_input+0x29c>)
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7fd fe27 	bl	800d220 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	895b      	ldrh	r3, [r3, #10]
 800f5d8:	8a3a      	ldrh	r2, [r7, #16]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	f200 8361 	bhi.w	800fca2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	4a64      	ldr	r2, [pc, #400]	; (800f778 <tcp_input+0x298>)
 800f5e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	8a3a      	ldrh	r2, [r7, #16]
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fd fe14 	bl	800d220 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	891a      	ldrh	r2, [r3, #8]
 800f5fc:	8a3b      	ldrh	r3, [r7, #16]
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	b29a      	uxth	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	895b      	ldrh	r3, [r3, #10]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d005      	beq.n	800f61a <tcp_input+0x13a>
 800f60e:	4b54      	ldr	r3, [pc, #336]	; (800f760 <tcp_input+0x280>)
 800f610:	22df      	movs	r2, #223	; 0xdf
 800f612:	495c      	ldr	r1, [pc, #368]	; (800f784 <tcp_input+0x2a4>)
 800f614:	4854      	ldr	r0, [pc, #336]	; (800f768 <tcp_input+0x288>)
 800f616:	f007 fa19 	bl	8016a4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	891a      	ldrh	r2, [r3, #8]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	891b      	ldrh	r3, [r3, #8]
 800f624:	429a      	cmp	r2, r3
 800f626:	d005      	beq.n	800f634 <tcp_input+0x154>
 800f628:	4b4d      	ldr	r3, [pc, #308]	; (800f760 <tcp_input+0x280>)
 800f62a:	22e0      	movs	r2, #224	; 0xe0
 800f62c:	4956      	ldr	r1, [pc, #344]	; (800f788 <tcp_input+0x2a8>)
 800f62e:	484e      	ldr	r0, [pc, #312]	; (800f768 <tcp_input+0x288>)
 800f630:	f007 fa0c 	bl	8016a4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f634:	4b4d      	ldr	r3, [pc, #308]	; (800f76c <tcp_input+0x28c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4a4b      	ldr	r2, [pc, #300]	; (800f76c <tcp_input+0x28c>)
 800f63e:	6814      	ldr	r4, [r2, #0]
 800f640:	4618      	mov	r0, r3
 800f642:	f7fc f9e9 	bl	800ba18 <lwip_htons>
 800f646:	4603      	mov	r3, r0
 800f648:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f64a:	4b48      	ldr	r3, [pc, #288]	; (800f76c <tcp_input+0x28c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	885b      	ldrh	r3, [r3, #2]
 800f650:	b29b      	uxth	r3, r3
 800f652:	4a46      	ldr	r2, [pc, #280]	; (800f76c <tcp_input+0x28c>)
 800f654:	6814      	ldr	r4, [r2, #0]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fc f9de 	bl	800ba18 <lwip_htons>
 800f65c:	4603      	mov	r3, r0
 800f65e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f660:	4b42      	ldr	r3, [pc, #264]	; (800f76c <tcp_input+0x28c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	4a41      	ldr	r2, [pc, #260]	; (800f76c <tcp_input+0x28c>)
 800f668:	6814      	ldr	r4, [r2, #0]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fc f9e9 	bl	800ba42 <lwip_htonl>
 800f670:	4603      	mov	r3, r0
 800f672:	6063      	str	r3, [r4, #4]
 800f674:	6863      	ldr	r3, [r4, #4]
 800f676:	4a45      	ldr	r2, [pc, #276]	; (800f78c <tcp_input+0x2ac>)
 800f678:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f67a:	4b3c      	ldr	r3, [pc, #240]	; (800f76c <tcp_input+0x28c>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	4a3a      	ldr	r2, [pc, #232]	; (800f76c <tcp_input+0x28c>)
 800f682:	6814      	ldr	r4, [r2, #0]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fc f9dc 	bl	800ba42 <lwip_htonl>
 800f68a:	4603      	mov	r3, r0
 800f68c:	60a3      	str	r3, [r4, #8]
 800f68e:	68a3      	ldr	r3, [r4, #8]
 800f690:	4a3f      	ldr	r2, [pc, #252]	; (800f790 <tcp_input+0x2b0>)
 800f692:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f694:	4b35      	ldr	r3, [pc, #212]	; (800f76c <tcp_input+0x28c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	89db      	ldrh	r3, [r3, #14]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	4a33      	ldr	r2, [pc, #204]	; (800f76c <tcp_input+0x28c>)
 800f69e:	6814      	ldr	r4, [r2, #0]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fc f9b9 	bl	800ba18 <lwip_htons>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6aa:	4b30      	ldr	r3, [pc, #192]	; (800f76c <tcp_input+0x28c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	899b      	ldrh	r3, [r3, #12]
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fc f9b0 	bl	800ba18 <lwip_htons>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	4b34      	ldr	r3, [pc, #208]	; (800f794 <tcp_input+0x2b4>)
 800f6c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	891a      	ldrh	r2, [r3, #8]
 800f6ca:	4b33      	ldr	r3, [pc, #204]	; (800f798 <tcp_input+0x2b8>)
 800f6cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f6ce:	4b31      	ldr	r3, [pc, #196]	; (800f794 <tcp_input+0x2b4>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	f003 0303 	and.w	r3, r3, #3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00c      	beq.n	800f6f4 <tcp_input+0x214>
    tcplen++;
 800f6da:	4b2f      	ldr	r3, [pc, #188]	; (800f798 <tcp_input+0x2b8>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	b29a      	uxth	r2, r3
 800f6e2:	4b2d      	ldr	r3, [pc, #180]	; (800f798 <tcp_input+0x2b8>)
 800f6e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	891a      	ldrh	r2, [r3, #8]
 800f6ea:	4b2b      	ldr	r3, [pc, #172]	; (800f798 <tcp_input+0x2b8>)
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	f200 82d9 	bhi.w	800fca6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6f8:	4b28      	ldr	r3, [pc, #160]	; (800f79c <tcp_input+0x2bc>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	61fb      	str	r3, [r7, #28]
 800f6fe:	e09d      	b.n	800f83c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	7d1b      	ldrb	r3, [r3, #20]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d105      	bne.n	800f714 <tcp_input+0x234>
 800f708:	4b15      	ldr	r3, [pc, #84]	; (800f760 <tcp_input+0x280>)
 800f70a:	22fb      	movs	r2, #251	; 0xfb
 800f70c:	4924      	ldr	r1, [pc, #144]	; (800f7a0 <tcp_input+0x2c0>)
 800f70e:	4816      	ldr	r0, [pc, #88]	; (800f768 <tcp_input+0x288>)
 800f710:	f007 f99c 	bl	8016a4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	7d1b      	ldrb	r3, [r3, #20]
 800f718:	2b0a      	cmp	r3, #10
 800f71a:	d105      	bne.n	800f728 <tcp_input+0x248>
 800f71c:	4b10      	ldr	r3, [pc, #64]	; (800f760 <tcp_input+0x280>)
 800f71e:	22fc      	movs	r2, #252	; 0xfc
 800f720:	4920      	ldr	r1, [pc, #128]	; (800f7a4 <tcp_input+0x2c4>)
 800f722:	4811      	ldr	r0, [pc, #68]	; (800f768 <tcp_input+0x288>)
 800f724:	f007 f992 	bl	8016a4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	7d1b      	ldrb	r3, [r3, #20]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d105      	bne.n	800f73c <tcp_input+0x25c>
 800f730:	4b0b      	ldr	r3, [pc, #44]	; (800f760 <tcp_input+0x280>)
 800f732:	22fd      	movs	r2, #253	; 0xfd
 800f734:	491c      	ldr	r1, [pc, #112]	; (800f7a8 <tcp_input+0x2c8>)
 800f736:	480c      	ldr	r0, [pc, #48]	; (800f768 <tcp_input+0x288>)
 800f738:	f007 f988 	bl	8016a4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	7a1b      	ldrb	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d033      	beq.n	800f7ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	7a1a      	ldrb	r2, [r3, #8]
 800f748:	4b09      	ldr	r3, [pc, #36]	; (800f770 <tcp_input+0x290>)
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f750:	3301      	adds	r3, #1
 800f752:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f754:	429a      	cmp	r2, r3
 800f756:	d029      	beq.n	800f7ac <tcp_input+0x2cc>
      prev = pcb;
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	61bb      	str	r3, [r7, #24]
      continue;
 800f75c:	e06b      	b.n	800f836 <tcp_input+0x356>
 800f75e:	bf00      	nop
 800f760:	0801a1dc 	.word	0x0801a1dc
 800f764:	0801a210 	.word	0x0801a210
 800f768:	0801a228 	.word	0x0801a228
 800f76c:	20005408 	.word	0x20005408
 800f770:	2000fee0 	.word	0x2000fee0
 800f774:	2000540c 	.word	0x2000540c
 800f778:	20005410 	.word	0x20005410
 800f77c:	2000540e 	.word	0x2000540e
 800f780:	0801a250 	.word	0x0801a250
 800f784:	0801a260 	.word	0x0801a260
 800f788:	0801a26c 	.word	0x0801a26c
 800f78c:	20005418 	.word	0x20005418
 800f790:	2000541c 	.word	0x2000541c
 800f794:	20005424 	.word	0x20005424
 800f798:	20005422 	.word	0x20005422
 800f79c:	200136b0 	.word	0x200136b0
 800f7a0:	0801a28c 	.word	0x0801a28c
 800f7a4:	0801a2b4 	.word	0x0801a2b4
 800f7a8:	0801a2e0 	.word	0x0801a2e0
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	8b1a      	ldrh	r2, [r3, #24]
 800f7b0:	4b94      	ldr	r3, [pc, #592]	; (800fa04 <tcp_input+0x524>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d13a      	bne.n	800f832 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	8ada      	ldrh	r2, [r3, #22]
 800f7c0:	4b90      	ldr	r3, [pc, #576]	; (800fa04 <tcp_input+0x524>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	885b      	ldrh	r3, [r3, #2]
 800f7c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d132      	bne.n	800f832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	4b8d      	ldr	r3, [pc, #564]	; (800fa08 <tcp_input+0x528>)
 800f7d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d12c      	bne.n	800f832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	4b8a      	ldr	r3, [pc, #552]	; (800fa08 <tcp_input+0x528>)
 800f7de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d126      	bne.n	800f832 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	69fa      	ldr	r2, [r7, #28]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d106      	bne.n	800f7fc <tcp_input+0x31c>
 800f7ee:	4b87      	ldr	r3, [pc, #540]	; (800fa0c <tcp_input+0x52c>)
 800f7f0:	f240 120d 	movw	r2, #269	; 0x10d
 800f7f4:	4986      	ldr	r1, [pc, #536]	; (800fa10 <tcp_input+0x530>)
 800f7f6:	4887      	ldr	r0, [pc, #540]	; (800fa14 <tcp_input+0x534>)
 800f7f8:	f007 f928 	bl	8016a4c <iprintf>
      if (prev != NULL) {
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00a      	beq.n	800f818 <tcp_input+0x338>
        prev->next = pcb->next;
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	68da      	ldr	r2, [r3, #12]
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f80a:	4b83      	ldr	r3, [pc, #524]	; (800fa18 <tcp_input+0x538>)
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f812:	4a81      	ldr	r2, [pc, #516]	; (800fa18 <tcp_input+0x538>)
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	69fa      	ldr	r2, [r7, #28]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d111      	bne.n	800f846 <tcp_input+0x366>
 800f822:	4b7a      	ldr	r3, [pc, #488]	; (800fa0c <tcp_input+0x52c>)
 800f824:	f240 1215 	movw	r2, #277	; 0x115
 800f828:	497c      	ldr	r1, [pc, #496]	; (800fa1c <tcp_input+0x53c>)
 800f82a:	487a      	ldr	r0, [pc, #488]	; (800fa14 <tcp_input+0x534>)
 800f82c:	f007 f90e 	bl	8016a4c <iprintf>
      break;
 800f830:	e009      	b.n	800f846 <tcp_input+0x366>
    }
    prev = pcb;
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	61fb      	str	r3, [r7, #28]
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f47f af5e 	bne.w	800f700 <tcp_input+0x220>
 800f844:	e000      	b.n	800f848 <tcp_input+0x368>
      break;
 800f846:	bf00      	nop
  }

  if (pcb == NULL) {
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f040 8095 	bne.w	800f97a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f850:	4b73      	ldr	r3, [pc, #460]	; (800fa20 <tcp_input+0x540>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	61fb      	str	r3, [r7, #28]
 800f856:	e03f      	b.n	800f8d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	7d1b      	ldrb	r3, [r3, #20]
 800f85c:	2b0a      	cmp	r3, #10
 800f85e:	d006      	beq.n	800f86e <tcp_input+0x38e>
 800f860:	4b6a      	ldr	r3, [pc, #424]	; (800fa0c <tcp_input+0x52c>)
 800f862:	f240 121f 	movw	r2, #287	; 0x11f
 800f866:	496f      	ldr	r1, [pc, #444]	; (800fa24 <tcp_input+0x544>)
 800f868:	486a      	ldr	r0, [pc, #424]	; (800fa14 <tcp_input+0x534>)
 800f86a:	f007 f8ef 	bl	8016a4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	7a1b      	ldrb	r3, [r3, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d009      	beq.n	800f88a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	7a1a      	ldrb	r2, [r3, #8]
 800f87a:	4b63      	ldr	r3, [pc, #396]	; (800fa08 <tcp_input+0x528>)
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f882:	3301      	adds	r3, #1
 800f884:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f886:	429a      	cmp	r2, r3
 800f888:	d122      	bne.n	800f8d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	8b1a      	ldrh	r2, [r3, #24]
 800f88e:	4b5d      	ldr	r3, [pc, #372]	; (800fa04 <tcp_input+0x524>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	429a      	cmp	r2, r3
 800f898:	d11b      	bne.n	800f8d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	8ada      	ldrh	r2, [r3, #22]
 800f89e:	4b59      	ldr	r3, [pc, #356]	; (800fa04 <tcp_input+0x524>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	885b      	ldrh	r3, [r3, #2]
 800f8a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d113      	bne.n	800f8d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	4b56      	ldr	r3, [pc, #344]	; (800fa08 <tcp_input+0x528>)
 800f8b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d10d      	bne.n	800f8d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	4b53      	ldr	r3, [pc, #332]	; (800fa08 <tcp_input+0x528>)
 800f8bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d107      	bne.n	800f8d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f8c2:	69f8      	ldr	r0, [r7, #28]
 800f8c4:	f000 fb54 	bl	800ff70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7fd fd2f 	bl	800d32c <pbuf_free>
        return;
 800f8ce:	e1f0      	b.n	800fcb2 <tcp_input+0x7d2>
        continue;
 800f8d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	61fb      	str	r3, [r7, #28]
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1bc      	bne.n	800f858 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8e2:	4b51      	ldr	r3, [pc, #324]	; (800fa28 <tcp_input+0x548>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	617b      	str	r3, [r7, #20]
 800f8e8:	e02a      	b.n	800f940 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	7a1b      	ldrb	r3, [r3, #8]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00c      	beq.n	800f90c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	7a1a      	ldrb	r2, [r3, #8]
 800f8f6:	4b44      	ldr	r3, [pc, #272]	; (800fa08 <tcp_input+0x528>)
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8fe:	3301      	adds	r3, #1
 800f900:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f902:	429a      	cmp	r2, r3
 800f904:	d002      	beq.n	800f90c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	61bb      	str	r3, [r7, #24]
        continue;
 800f90a:	e016      	b.n	800f93a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	8ada      	ldrh	r2, [r3, #22]
 800f910:	4b3c      	ldr	r3, [pc, #240]	; (800fa04 <tcp_input+0x524>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	885b      	ldrh	r3, [r3, #2]
 800f916:	b29b      	uxth	r3, r3
 800f918:	429a      	cmp	r2, r3
 800f91a:	d10c      	bne.n	800f936 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	4b39      	ldr	r3, [pc, #228]	; (800fa08 <tcp_input+0x528>)
 800f922:	695b      	ldr	r3, [r3, #20]
 800f924:	429a      	cmp	r2, r3
 800f926:	d00f      	beq.n	800f948 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00d      	beq.n	800f94a <tcp_input+0x46a>
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d009      	beq.n	800f94a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	617b      	str	r3, [r7, #20]
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1d1      	bne.n	800f8ea <tcp_input+0x40a>
 800f946:	e000      	b.n	800f94a <tcp_input+0x46a>
            break;
 800f948:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d014      	beq.n	800f97a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00a      	beq.n	800f96c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	68da      	ldr	r2, [r3, #12]
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f95e:	4b32      	ldr	r3, [pc, #200]	; (800fa28 <tcp_input+0x548>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f966:	4a30      	ldr	r2, [pc, #192]	; (800fa28 <tcp_input+0x548>)
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f96c:	6978      	ldr	r0, [r7, #20]
 800f96e:	f000 fa01 	bl	800fd74 <tcp_listen_input>
      }
      pbuf_free(p);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7fd fcda 	bl	800d32c <pbuf_free>
      return;
 800f978:	e19b      	b.n	800fcb2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f000 8160 	beq.w	800fc42 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f982:	4b2a      	ldr	r3, [pc, #168]	; (800fa2c <tcp_input+0x54c>)
 800f984:	2200      	movs	r2, #0
 800f986:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	891a      	ldrh	r2, [r3, #8]
 800f98c:	4b27      	ldr	r3, [pc, #156]	; (800fa2c <tcp_input+0x54c>)
 800f98e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f990:	4a26      	ldr	r2, [pc, #152]	; (800fa2c <tcp_input+0x54c>)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f996:	4b1b      	ldr	r3, [pc, #108]	; (800fa04 <tcp_input+0x524>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a24      	ldr	r2, [pc, #144]	; (800fa2c <tcp_input+0x54c>)
 800f99c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f99e:	4b24      	ldr	r3, [pc, #144]	; (800fa30 <tcp_input+0x550>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f9a4:	4b23      	ldr	r3, [pc, #140]	; (800fa34 <tcp_input+0x554>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f9aa:	4b23      	ldr	r3, [pc, #140]	; (800fa38 <tcp_input+0x558>)
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f9b0:	4b22      	ldr	r3, [pc, #136]	; (800fa3c <tcp_input+0x55c>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	f003 0308 	and.w	r3, r3, #8
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d006      	beq.n	800f9ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	7b5b      	ldrb	r3, [r3, #13]
 800f9c0:	f043 0301 	orr.w	r3, r3, #1
 800f9c4:	b2da      	uxtb	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d038      	beq.n	800fa44 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f9d2:	69f8      	ldr	r0, [r7, #28]
 800f9d4:	f7ff f852 	bl	800ea7c <tcp_process_refused_data>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	f113 0f0d 	cmn.w	r3, #13
 800f9de:	d007      	beq.n	800f9f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d02d      	beq.n	800fa44 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f9e8:	4b15      	ldr	r3, [pc, #84]	; (800fa40 <tcp_input+0x560>)
 800f9ea:	881b      	ldrh	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d029      	beq.n	800fa44 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f040 8104 	bne.w	800fc02 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f9fa:	69f8      	ldr	r0, [r7, #28]
 800f9fc:	f003 fe16 	bl	801362c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa00:	e0ff      	b.n	800fc02 <tcp_input+0x722>
 800fa02:	bf00      	nop
 800fa04:	20005408 	.word	0x20005408
 800fa08:	2000fee0 	.word	0x2000fee0
 800fa0c:	0801a1dc 	.word	0x0801a1dc
 800fa10:	0801a308 	.word	0x0801a308
 800fa14:	0801a228 	.word	0x0801a228
 800fa18:	200136b0 	.word	0x200136b0
 800fa1c:	0801a334 	.word	0x0801a334
 800fa20:	200136c0 	.word	0x200136c0
 800fa24:	0801a360 	.word	0x0801a360
 800fa28:	200136b8 	.word	0x200136b8
 800fa2c:	200053f8 	.word	0x200053f8
 800fa30:	20005428 	.word	0x20005428
 800fa34:	20005425 	.word	0x20005425
 800fa38:	20005420 	.word	0x20005420
 800fa3c:	20005424 	.word	0x20005424
 800fa40:	20005422 	.word	0x20005422
      }
    }
    tcp_input_pcb = pcb;
 800fa44:	4a9c      	ldr	r2, [pc, #624]	; (800fcb8 <tcp_input+0x7d8>)
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa4a:	69f8      	ldr	r0, [r7, #28]
 800fa4c:	f000 fb0a 	bl	8010064 <tcp_process>
 800fa50:	4603      	mov	r3, r0
 800fa52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa58:	f113 0f0d 	cmn.w	r3, #13
 800fa5c:	f000 80d3 	beq.w	800fc06 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fa60:	4b96      	ldr	r3, [pc, #600]	; (800fcbc <tcp_input+0x7dc>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	f003 0308 	and.w	r3, r3, #8
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d015      	beq.n	800fa98 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d008      	beq.n	800fa88 <tcp_input+0x5a8>
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa7c:	69fa      	ldr	r2, [r7, #28]
 800fa7e:	6912      	ldr	r2, [r2, #16]
 800fa80:	f06f 010d 	mvn.w	r1, #13
 800fa84:	4610      	mov	r0, r2
 800fa86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa88:	69f9      	ldr	r1, [r7, #28]
 800fa8a:	488d      	ldr	r0, [pc, #564]	; (800fcc0 <tcp_input+0x7e0>)
 800fa8c:	f7ff fbb0 	bl	800f1f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800fa90:	69f8      	ldr	r0, [r7, #28]
 800fa92:	f7fd fef7 	bl	800d884 <tcp_free>
 800fa96:	e0c1      	b.n	800fc1c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fa9c:	4b89      	ldr	r3, [pc, #548]	; (800fcc4 <tcp_input+0x7e4>)
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d01d      	beq.n	800fae0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800faa4:	4b87      	ldr	r3, [pc, #540]	; (800fcc4 <tcp_input+0x7e4>)
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00a      	beq.n	800faca <tcp_input+0x5ea>
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faba:	69fa      	ldr	r2, [r7, #28]
 800fabc:	6910      	ldr	r0, [r2, #16]
 800fabe:	89fa      	ldrh	r2, [r7, #14]
 800fac0:	69f9      	ldr	r1, [r7, #28]
 800fac2:	4798      	blx	r3
 800fac4:	4603      	mov	r3, r0
 800fac6:	74fb      	strb	r3, [r7, #19]
 800fac8:	e001      	b.n	800face <tcp_input+0x5ee>
 800faca:	2300      	movs	r3, #0
 800facc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800face:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fad2:	f113 0f0d 	cmn.w	r3, #13
 800fad6:	f000 8098 	beq.w	800fc0a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fada:	4b7a      	ldr	r3, [pc, #488]	; (800fcc4 <tcp_input+0x7e4>)
 800fadc:	2200      	movs	r2, #0
 800fade:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fae0:	69f8      	ldr	r0, [r7, #28]
 800fae2:	f000 f907 	bl	800fcf4 <tcp_input_delayed_close>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f040 8090 	bne.w	800fc0e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800faee:	4b76      	ldr	r3, [pc, #472]	; (800fcc8 <tcp_input+0x7e8>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d041      	beq.n	800fb7a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d006      	beq.n	800fb0c <tcp_input+0x62c>
 800fafe:	4b73      	ldr	r3, [pc, #460]	; (800fccc <tcp_input+0x7ec>)
 800fb00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb04:	4972      	ldr	r1, [pc, #456]	; (800fcd0 <tcp_input+0x7f0>)
 800fb06:	4873      	ldr	r0, [pc, #460]	; (800fcd4 <tcp_input+0x7f4>)
 800fb08:	f006 ffa0 	bl	8016a4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	8b5b      	ldrh	r3, [r3, #26]
 800fb10:	f003 0310 	and.w	r3, r3, #16
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d008      	beq.n	800fb2a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb18:	4b6b      	ldr	r3, [pc, #428]	; (800fcc8 <tcp_input+0x7e8>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fd fc05 	bl	800d32c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb22:	69f8      	ldr	r0, [r7, #28]
 800fb24:	f7fe f996 	bl	800de54 <tcp_abort>
            goto aborted;
 800fb28:	e078      	b.n	800fc1c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00c      	beq.n	800fb4e <tcp_input+0x66e>
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	6918      	ldr	r0, [r3, #16]
 800fb3e:	4b62      	ldr	r3, [pc, #392]	; (800fcc8 <tcp_input+0x7e8>)
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	2300      	movs	r3, #0
 800fb44:	69f9      	ldr	r1, [r7, #28]
 800fb46:	47a0      	blx	r4
 800fb48:	4603      	mov	r3, r0
 800fb4a:	74fb      	strb	r3, [r7, #19]
 800fb4c:	e008      	b.n	800fb60 <tcp_input+0x680>
 800fb4e:	4b5e      	ldr	r3, [pc, #376]	; (800fcc8 <tcp_input+0x7e8>)
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	2300      	movs	r3, #0
 800fb54:	69f9      	ldr	r1, [r7, #28]
 800fb56:	2000      	movs	r0, #0
 800fb58:	f7ff f884 	bl	800ec64 <tcp_recv_null>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb64:	f113 0f0d 	cmn.w	r3, #13
 800fb68:	d053      	beq.n	800fc12 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d003      	beq.n	800fb7a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb72:	4b55      	ldr	r3, [pc, #340]	; (800fcc8 <tcp_input+0x7e8>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb7a:	4b50      	ldr	r3, [pc, #320]	; (800fcbc <tcp_input+0x7dc>)
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	f003 0320 	and.w	r3, r3, #32
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d030      	beq.n	800fbe8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d009      	beq.n	800fba2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb92:	7b5a      	ldrb	r2, [r3, #13]
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb98:	f042 0220 	orr.w	r2, r2, #32
 800fb9c:	b2d2      	uxtb	r2, r2
 800fb9e:	735a      	strb	r2, [r3, #13]
 800fba0:	e022      	b.n	800fbe8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fba6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbaa:	d005      	beq.n	800fbb8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00b      	beq.n	800fbda <tcp_input+0x6fa>
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	6918      	ldr	r0, [r3, #16]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	2200      	movs	r2, #0
 800fbd0:	69f9      	ldr	r1, [r7, #28]
 800fbd2:	47a0      	blx	r4
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	74fb      	strb	r3, [r7, #19]
 800fbd8:	e001      	b.n	800fbde <tcp_input+0x6fe>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbe2:	f113 0f0d 	cmn.w	r3, #13
 800fbe6:	d016      	beq.n	800fc16 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fbe8:	4b33      	ldr	r3, [pc, #204]	; (800fcb8 <tcp_input+0x7d8>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fbee:	69f8      	ldr	r0, [r7, #28]
 800fbf0:	f000 f880 	bl	800fcf4 <tcp_input_delayed_close>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d10f      	bne.n	800fc1a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fbfa:	69f8      	ldr	r0, [r7, #28]
 800fbfc:	f002 ff10 	bl	8012a20 <tcp_output>
 800fc00:	e00c      	b.n	800fc1c <tcp_input+0x73c>
        goto aborted;
 800fc02:	bf00      	nop
 800fc04:	e00a      	b.n	800fc1c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc06:	bf00      	nop
 800fc08:	e008      	b.n	800fc1c <tcp_input+0x73c>
              goto aborted;
 800fc0a:	bf00      	nop
 800fc0c:	e006      	b.n	800fc1c <tcp_input+0x73c>
          goto aborted;
 800fc0e:	bf00      	nop
 800fc10:	e004      	b.n	800fc1c <tcp_input+0x73c>
            goto aborted;
 800fc12:	bf00      	nop
 800fc14:	e002      	b.n	800fc1c <tcp_input+0x73c>
              goto aborted;
 800fc16:	bf00      	nop
 800fc18:	e000      	b.n	800fc1c <tcp_input+0x73c>
          goto aborted;
 800fc1a:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc1c:	4b26      	ldr	r3, [pc, #152]	; (800fcb8 <tcp_input+0x7d8>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc22:	4b29      	ldr	r3, [pc, #164]	; (800fcc8 <tcp_input+0x7e8>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc28:	4b2b      	ldr	r3, [pc, #172]	; (800fcd8 <tcp_input+0x7f8>)
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d03f      	beq.n	800fcb0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fc30:	4b29      	ldr	r3, [pc, #164]	; (800fcd8 <tcp_input+0x7f8>)
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fd fb79 	bl	800d32c <pbuf_free>
      inseg.p = NULL;
 800fc3a:	4b27      	ldr	r3, [pc, #156]	; (800fcd8 <tcp_input+0x7f8>)
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc40:	e036      	b.n	800fcb0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc42:	4b26      	ldr	r3, [pc, #152]	; (800fcdc <tcp_input+0x7fc>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	899b      	ldrh	r3, [r3, #12]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fb fee4 	bl	800ba18 <lwip_htons>
 800fc50:	4603      	mov	r3, r0
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	f003 0304 	and.w	r3, r3, #4
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d118      	bne.n	800fc8e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc5c:	4b20      	ldr	r3, [pc, #128]	; (800fce0 <tcp_input+0x800>)
 800fc5e:	6819      	ldr	r1, [r3, #0]
 800fc60:	4b20      	ldr	r3, [pc, #128]	; (800fce4 <tcp_input+0x804>)
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	461a      	mov	r2, r3
 800fc66:	4b20      	ldr	r3, [pc, #128]	; (800fce8 <tcp_input+0x808>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc6c:	4b1b      	ldr	r3, [pc, #108]	; (800fcdc <tcp_input+0x7fc>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc70:	885b      	ldrh	r3, [r3, #2]
 800fc72:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc74:	4a19      	ldr	r2, [pc, #100]	; (800fcdc <tcp_input+0x7fc>)
 800fc76:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc78:	8812      	ldrh	r2, [r2, #0]
 800fc7a:	b292      	uxth	r2, r2
 800fc7c:	9202      	str	r2, [sp, #8]
 800fc7e:	9301      	str	r3, [sp, #4]
 800fc80:	4b1a      	ldr	r3, [pc, #104]	; (800fcec <tcp_input+0x80c>)
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	4b1a      	ldr	r3, [pc, #104]	; (800fcf0 <tcp_input+0x810>)
 800fc86:	4602      	mov	r2, r0
 800fc88:	2000      	movs	r0, #0
 800fc8a:	f003 fc7d 	bl	8013588 <tcp_rst>
    pbuf_free(p);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fd fb4c 	bl	800d32c <pbuf_free>
  return;
 800fc94:	e00c      	b.n	800fcb0 <tcp_input+0x7d0>
    goto dropped;
 800fc96:	bf00      	nop
 800fc98:	e006      	b.n	800fca8 <tcp_input+0x7c8>
    goto dropped;
 800fc9a:	bf00      	nop
 800fc9c:	e004      	b.n	800fca8 <tcp_input+0x7c8>
    goto dropped;
 800fc9e:	bf00      	nop
 800fca0:	e002      	b.n	800fca8 <tcp_input+0x7c8>
      goto dropped;
 800fca2:	bf00      	nop
 800fca4:	e000      	b.n	800fca8 <tcp_input+0x7c8>
      goto dropped;
 800fca6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fd fb3f 	bl	800d32c <pbuf_free>
 800fcae:	e000      	b.n	800fcb2 <tcp_input+0x7d2>
  return;
 800fcb0:	bf00      	nop
}
 800fcb2:	3724      	adds	r7, #36	; 0x24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd90      	pop	{r4, r7, pc}
 800fcb8:	200136c4 	.word	0x200136c4
 800fcbc:	20005425 	.word	0x20005425
 800fcc0:	200136b0 	.word	0x200136b0
 800fcc4:	20005420 	.word	0x20005420
 800fcc8:	20005428 	.word	0x20005428
 800fccc:	0801a1dc 	.word	0x0801a1dc
 800fcd0:	0801a390 	.word	0x0801a390
 800fcd4:	0801a228 	.word	0x0801a228
 800fcd8:	200053f8 	.word	0x200053f8
 800fcdc:	20005408 	.word	0x20005408
 800fce0:	2000541c 	.word	0x2000541c
 800fce4:	20005422 	.word	0x20005422
 800fce8:	20005418 	.word	0x20005418
 800fcec:	2000fef0 	.word	0x2000fef0
 800fcf0:	2000fef4 	.word	0x2000fef4

0800fcf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d106      	bne.n	800fd10 <tcp_input_delayed_close+0x1c>
 800fd02:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <tcp_input_delayed_close+0x6c>)
 800fd04:	f240 225a 	movw	r2, #602	; 0x25a
 800fd08:	4916      	ldr	r1, [pc, #88]	; (800fd64 <tcp_input_delayed_close+0x70>)
 800fd0a:	4817      	ldr	r0, [pc, #92]	; (800fd68 <tcp_input_delayed_close+0x74>)
 800fd0c:	f006 fe9e 	bl	8016a4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd10:	4b16      	ldr	r3, [pc, #88]	; (800fd6c <tcp_input_delayed_close+0x78>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	f003 0310 	and.w	r3, r3, #16
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d01c      	beq.n	800fd56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8b5b      	ldrh	r3, [r3, #26]
 800fd20:	f003 0310 	and.w	r3, r3, #16
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d10d      	bne.n	800fd44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d008      	beq.n	800fd44 <tcp_input_delayed_close+0x50>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	6912      	ldr	r2, [r2, #16]
 800fd3c:	f06f 010e 	mvn.w	r1, #14
 800fd40:	4610      	mov	r0, r2
 800fd42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd44:	6879      	ldr	r1, [r7, #4]
 800fd46:	480a      	ldr	r0, [pc, #40]	; (800fd70 <tcp_input_delayed_close+0x7c>)
 800fd48:	f7ff fa52 	bl	800f1f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7fd fd99 	bl	800d884 <tcp_free>
    return 1;
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	0801a1dc 	.word	0x0801a1dc
 800fd64:	0801a3ac 	.word	0x0801a3ac
 800fd68:	0801a228 	.word	0x0801a228
 800fd6c:	20005425 	.word	0x20005425
 800fd70:	200136b0 	.word	0x200136b0

0800fd74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd74:	b590      	push	{r4, r7, lr}
 800fd76:	b08b      	sub	sp, #44	; 0x2c
 800fd78:	af04      	add	r7, sp, #16
 800fd7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd7c:	4b6f      	ldr	r3, [pc, #444]	; (800ff3c <tcp_listen_input+0x1c8>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	f003 0304 	and.w	r3, r3, #4
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f040 80d2 	bne.w	800ff2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d106      	bne.n	800fd9e <tcp_listen_input+0x2a>
 800fd90:	4b6b      	ldr	r3, [pc, #428]	; (800ff40 <tcp_listen_input+0x1cc>)
 800fd92:	f240 2281 	movw	r2, #641	; 0x281
 800fd96:	496b      	ldr	r1, [pc, #428]	; (800ff44 <tcp_listen_input+0x1d0>)
 800fd98:	486b      	ldr	r0, [pc, #428]	; (800ff48 <tcp_listen_input+0x1d4>)
 800fd9a:	f006 fe57 	bl	8016a4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fd9e:	4b67      	ldr	r3, [pc, #412]	; (800ff3c <tcp_listen_input+0x1c8>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	f003 0310 	and.w	r3, r3, #16
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d019      	beq.n	800fdde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdaa:	4b68      	ldr	r3, [pc, #416]	; (800ff4c <tcp_listen_input+0x1d8>)
 800fdac:	6819      	ldr	r1, [r3, #0]
 800fdae:	4b68      	ldr	r3, [pc, #416]	; (800ff50 <tcp_listen_input+0x1dc>)
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4b67      	ldr	r3, [pc, #412]	; (800ff54 <tcp_listen_input+0x1e0>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdba:	4b67      	ldr	r3, [pc, #412]	; (800ff58 <tcp_listen_input+0x1e4>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdbe:	885b      	ldrh	r3, [r3, #2]
 800fdc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdc2:	4a65      	ldr	r2, [pc, #404]	; (800ff58 <tcp_listen_input+0x1e4>)
 800fdc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc6:	8812      	ldrh	r2, [r2, #0]
 800fdc8:	b292      	uxth	r2, r2
 800fdca:	9202      	str	r2, [sp, #8]
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	4b63      	ldr	r3, [pc, #396]	; (800ff5c <tcp_listen_input+0x1e8>)
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	4b63      	ldr	r3, [pc, #396]	; (800ff60 <tcp_listen_input+0x1ec>)
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f003 fbd6 	bl	8013588 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fddc:	e0a9      	b.n	800ff32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fdde:	4b57      	ldr	r3, [pc, #348]	; (800ff3c <tcp_listen_input+0x1c8>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	f003 0302 	and.w	r3, r3, #2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 80a3 	beq.w	800ff32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	7d5b      	ldrb	r3, [r3, #21]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff f85b 	bl	800eeac <tcp_alloc>
 800fdf6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d111      	bne.n	800fe22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	699b      	ldr	r3, [r3, #24]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00a      	beq.n	800fe1c <tcp_listen_input+0xa8>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	6910      	ldr	r0, [r2, #16]
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe12:	2100      	movs	r1, #0
 800fe14:	4798      	blx	r3
 800fe16:	4603      	mov	r3, r0
 800fe18:	73bb      	strb	r3, [r7, #14]
      return;
 800fe1a:	e08b      	b.n	800ff34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe1c:	23f0      	movs	r3, #240	; 0xf0
 800fe1e:	73bb      	strb	r3, [r7, #14]
      return;
 800fe20:	e088      	b.n	800ff34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe22:	4b50      	ldr	r3, [pc, #320]	; (800ff64 <tcp_listen_input+0x1f0>)
 800fe24:	695a      	ldr	r2, [r3, #20]
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe2a:	4b4e      	ldr	r3, [pc, #312]	; (800ff64 <tcp_listen_input+0x1f0>)
 800fe2c:	691a      	ldr	r2, [r3, #16]
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	8ada      	ldrh	r2, [r3, #22]
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe3a:	4b47      	ldr	r3, [pc, #284]	; (800ff58 <tcp_listen_input+0x1e4>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	881b      	ldrh	r3, [r3, #0]
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	2203      	movs	r2, #3
 800fe4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe4c:	4b41      	ldr	r3, [pc, #260]	; (800ff54 <tcp_listen_input+0x1e0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe5e:	6978      	ldr	r0, [r7, #20]
 800fe60:	f7ff fa5a 	bl	800f318 <tcp_next_iss>
 800fe64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	693a      	ldr	r2, [r7, #16]
 800fe6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	693a      	ldr	r2, [r7, #16]
 800fe70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	693a      	ldr	r2, [r7, #16]
 800fe76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fe7e:	4b35      	ldr	r3, [pc, #212]	; (800ff54 <tcp_listen_input+0x1e0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	1e5a      	subs	r2, r3, #1
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	691a      	ldr	r2, [r3, #16]
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7a5b      	ldrb	r3, [r3, #9]
 800fe9a:	f003 030c 	and.w	r3, r3, #12
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	7a1a      	ldrb	r2, [r3, #8]
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800feac:	4b2e      	ldr	r3, [pc, #184]	; (800ff68 <tcp_listen_input+0x1f4>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	60da      	str	r2, [r3, #12]
 800feb4:	4a2c      	ldr	r2, [pc, #176]	; (800ff68 <tcp_listen_input+0x1f4>)
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	6013      	str	r3, [r2, #0]
 800feba:	f003 fd27 	bl	801390c <tcp_timer_needed>
 800febe:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <tcp_listen_input+0x1f8>)
 800fec0:	2201      	movs	r2, #1
 800fec2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fec4:	6978      	ldr	r0, [r7, #20]
 800fec6:	f001 fd8d 	bl	80119e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800feca:	4b23      	ldr	r3, [pc, #140]	; (800ff58 <tcp_listen_input+0x1e4>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	89db      	ldrh	r3, [r3, #14]
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	3304      	adds	r3, #4
 800feec:	4618      	mov	r0, r3
 800feee:	f005 f91b 	bl	8015128 <ip4_route>
 800fef2:	4601      	mov	r1, r0
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	3304      	adds	r3, #4
 800fef8:	461a      	mov	r2, r3
 800fefa:	4620      	mov	r0, r4
 800fefc:	f7ff fa32 	bl	800f364 <tcp_eff_send_mss_netif>
 800ff00:	4603      	mov	r3, r0
 800ff02:	461a      	mov	r2, r3
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff08:	2112      	movs	r1, #18
 800ff0a:	6978      	ldr	r0, [r7, #20]
 800ff0c:	f002 fc9a 	bl	8012844 <tcp_enqueue_flags>
 800ff10:	4603      	mov	r3, r0
 800ff12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d004      	beq.n	800ff26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	6978      	ldr	r0, [r7, #20]
 800ff20:	f7fd feda 	bl	800dcd8 <tcp_abandon>
      return;
 800ff24:	e006      	b.n	800ff34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff26:	6978      	ldr	r0, [r7, #20]
 800ff28:	f002 fd7a 	bl	8012a20 <tcp_output>
  return;
 800ff2c:	e001      	b.n	800ff32 <tcp_listen_input+0x1be>
    return;
 800ff2e:	bf00      	nop
 800ff30:	e000      	b.n	800ff34 <tcp_listen_input+0x1c0>
  return;
 800ff32:	bf00      	nop
}
 800ff34:	371c      	adds	r7, #28
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd90      	pop	{r4, r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20005424 	.word	0x20005424
 800ff40:	0801a1dc 	.word	0x0801a1dc
 800ff44:	0801a3d4 	.word	0x0801a3d4
 800ff48:	0801a228 	.word	0x0801a228
 800ff4c:	2000541c 	.word	0x2000541c
 800ff50:	20005422 	.word	0x20005422
 800ff54:	20005418 	.word	0x20005418
 800ff58:	20005408 	.word	0x20005408
 800ff5c:	2000fef0 	.word	0x2000fef0
 800ff60:	2000fef4 	.word	0x2000fef4
 800ff64:	2000fee0 	.word	0x2000fee0
 800ff68:	200136b0 	.word	0x200136b0
 800ff6c:	200136ac 	.word	0x200136ac

0800ff70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b086      	sub	sp, #24
 800ff74:	af04      	add	r7, sp, #16
 800ff76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ff78:	4b2f      	ldr	r3, [pc, #188]	; (8010038 <tcp_timewait_input+0xc8>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d153      	bne.n	801002c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <tcp_timewait_input+0x28>
 800ff8a:	4b2c      	ldr	r3, [pc, #176]	; (801003c <tcp_timewait_input+0xcc>)
 800ff8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ff90:	492b      	ldr	r1, [pc, #172]	; (8010040 <tcp_timewait_input+0xd0>)
 800ff92:	482c      	ldr	r0, [pc, #176]	; (8010044 <tcp_timewait_input+0xd4>)
 800ff94:	f006 fd5a 	bl	8016a4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ff98:	4b27      	ldr	r3, [pc, #156]	; (8010038 <tcp_timewait_input+0xc8>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	f003 0302 	and.w	r3, r3, #2
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d02a      	beq.n	800fffa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffa4:	4b28      	ldr	r3, [pc, #160]	; (8010048 <tcp_timewait_input+0xd8>)
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	db2d      	blt.n	801000e <tcp_timewait_input+0x9e>
 800ffb2:	4b25      	ldr	r3, [pc, #148]	; (8010048 <tcp_timewait_input+0xd8>)
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffbe:	440b      	add	r3, r1
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	dc23      	bgt.n	801000e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffc6:	4b21      	ldr	r3, [pc, #132]	; (801004c <tcp_timewait_input+0xdc>)
 800ffc8:	6819      	ldr	r1, [r3, #0]
 800ffca:	4b21      	ldr	r3, [pc, #132]	; (8010050 <tcp_timewait_input+0xe0>)
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	4b1d      	ldr	r3, [pc, #116]	; (8010048 <tcp_timewait_input+0xd8>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffd6:	4b1f      	ldr	r3, [pc, #124]	; (8010054 <tcp_timewait_input+0xe4>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffda:	885b      	ldrh	r3, [r3, #2]
 800ffdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffde:	4a1d      	ldr	r2, [pc, #116]	; (8010054 <tcp_timewait_input+0xe4>)
 800ffe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffe2:	8812      	ldrh	r2, [r2, #0]
 800ffe4:	b292      	uxth	r2, r2
 800ffe6:	9202      	str	r2, [sp, #8]
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	4b1b      	ldr	r3, [pc, #108]	; (8010058 <tcp_timewait_input+0xe8>)
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	4b1b      	ldr	r3, [pc, #108]	; (801005c <tcp_timewait_input+0xec>)
 800fff0:	4602      	mov	r2, r0
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f003 fac8 	bl	8013588 <tcp_rst>
      return;
 800fff8:	e01b      	b.n	8010032 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fffa:	4b0f      	ldr	r3, [pc, #60]	; (8010038 <tcp_timewait_input+0xc8>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010006:	4b16      	ldr	r3, [pc, #88]	; (8010060 <tcp_timewait_input+0xf0>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801000e:	4b10      	ldr	r3, [pc, #64]	; (8010050 <tcp_timewait_input+0xe0>)
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00c      	beq.n	8010030 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8b5b      	ldrh	r3, [r3, #26]
 801001a:	f043 0302 	orr.w	r3, r3, #2
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f002 fcfb 	bl	8012a20 <tcp_output>
  }
  return;
 801002a:	e001      	b.n	8010030 <tcp_timewait_input+0xc0>
    return;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <tcp_timewait_input+0xc2>
  return;
 8010030:	bf00      	nop
}
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	20005424 	.word	0x20005424
 801003c:	0801a1dc 	.word	0x0801a1dc
 8010040:	0801a3f4 	.word	0x0801a3f4
 8010044:	0801a228 	.word	0x0801a228
 8010048:	20005418 	.word	0x20005418
 801004c:	2000541c 	.word	0x2000541c
 8010050:	20005422 	.word	0x20005422
 8010054:	20005408 	.word	0x20005408
 8010058:	2000fef0 	.word	0x2000fef0
 801005c:	2000fef4 	.word	0x2000fef4
 8010060:	200136b4 	.word	0x200136b4

08010064 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010064:	b590      	push	{r4, r7, lr}
 8010066:	b08d      	sub	sp, #52	; 0x34
 8010068:	af04      	add	r7, sp, #16
 801006a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010070:	2300      	movs	r3, #0
 8010072:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d106      	bne.n	8010088 <tcp_process+0x24>
 801007a:	4ba5      	ldr	r3, [pc, #660]	; (8010310 <tcp_process+0x2ac>)
 801007c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010080:	49a4      	ldr	r1, [pc, #656]	; (8010314 <tcp_process+0x2b0>)
 8010082:	48a5      	ldr	r0, [pc, #660]	; (8010318 <tcp_process+0x2b4>)
 8010084:	f006 fce2 	bl	8016a4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010088:	4ba4      	ldr	r3, [pc, #656]	; (801031c <tcp_process+0x2b8>)
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	f003 0304 	and.w	r3, r3, #4
 8010090:	2b00      	cmp	r3, #0
 8010092:	d04e      	beq.n	8010132 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	7d1b      	ldrb	r3, [r3, #20]
 8010098:	2b02      	cmp	r3, #2
 801009a:	d108      	bne.n	80100ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100a0:	4b9f      	ldr	r3, [pc, #636]	; (8010320 <tcp_process+0x2bc>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d123      	bne.n	80100f0 <tcp_process+0x8c>
        acceptable = 1;
 80100a8:	2301      	movs	r3, #1
 80100aa:	76fb      	strb	r3, [r7, #27]
 80100ac:	e020      	b.n	80100f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100b2:	4b9c      	ldr	r3, [pc, #624]	; (8010324 <tcp_process+0x2c0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d102      	bne.n	80100c0 <tcp_process+0x5c>
        acceptable = 1;
 80100ba:	2301      	movs	r3, #1
 80100bc:	76fb      	strb	r3, [r7, #27]
 80100be:	e017      	b.n	80100f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100c0:	4b98      	ldr	r3, [pc, #608]	; (8010324 <tcp_process+0x2c0>)
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	db10      	blt.n	80100f0 <tcp_process+0x8c>
 80100ce:	4b95      	ldr	r3, [pc, #596]	; (8010324 <tcp_process+0x2c0>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100da:	440b      	add	r3, r1
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	dc06      	bgt.n	80100f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	8b5b      	ldrh	r3, [r3, #26]
 80100e6:	f043 0302 	orr.w	r3, r3, #2
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80100f0:	7efb      	ldrb	r3, [r7, #27]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d01b      	beq.n	801012e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d106      	bne.n	801010c <tcp_process+0xa8>
 80100fe:	4b84      	ldr	r3, [pc, #528]	; (8010310 <tcp_process+0x2ac>)
 8010100:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010104:	4988      	ldr	r1, [pc, #544]	; (8010328 <tcp_process+0x2c4>)
 8010106:	4884      	ldr	r0, [pc, #528]	; (8010318 <tcp_process+0x2b4>)
 8010108:	f006 fca0 	bl	8016a4c <iprintf>
      recv_flags |= TF_RESET;
 801010c:	4b87      	ldr	r3, [pc, #540]	; (801032c <tcp_process+0x2c8>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f043 0308 	orr.w	r3, r3, #8
 8010114:	b2da      	uxtb	r2, r3
 8010116:	4b85      	ldr	r3, [pc, #532]	; (801032c <tcp_process+0x2c8>)
 8010118:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	8b5b      	ldrh	r3, [r3, #26]
 801011e:	f023 0301 	bic.w	r3, r3, #1
 8010122:	b29a      	uxth	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010128:	f06f 030d 	mvn.w	r3, #13
 801012c:	e37a      	b.n	8010824 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801012e:	2300      	movs	r3, #0
 8010130:	e378      	b.n	8010824 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010132:	4b7a      	ldr	r3, [pc, #488]	; (801031c <tcp_process+0x2b8>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f003 0302 	and.w	r3, r3, #2
 801013a:	2b00      	cmp	r3, #0
 801013c:	d010      	beq.n	8010160 <tcp_process+0xfc>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	2b02      	cmp	r3, #2
 8010144:	d00c      	beq.n	8010160 <tcp_process+0xfc>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	7d1b      	ldrb	r3, [r3, #20]
 801014a:	2b03      	cmp	r3, #3
 801014c:	d008      	beq.n	8010160 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	8b5b      	ldrh	r3, [r3, #26]
 8010152:	f043 0302 	orr.w	r3, r3, #2
 8010156:	b29a      	uxth	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	e361      	b.n	8010824 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8b5b      	ldrh	r3, [r3, #26]
 8010164:	f003 0310 	and.w	r3, r3, #16
 8010168:	2b00      	cmp	r3, #0
 801016a:	d103      	bne.n	8010174 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801016c:	4b70      	ldr	r3, [pc, #448]	; (8010330 <tcp_process+0x2cc>)
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f001 fc2d 	bl	80119e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	3b02      	subs	r3, #2
 8010190:	2b07      	cmp	r3, #7
 8010192:	f200 8337 	bhi.w	8010804 <tcp_process+0x7a0>
 8010196:	a201      	add	r2, pc, #4	; (adr r2, 801019c <tcp_process+0x138>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101bd 	.word	0x080101bd
 80101a0:	080103ed 	.word	0x080103ed
 80101a4:	08010565 	.word	0x08010565
 80101a8:	0801058f 	.word	0x0801058f
 80101ac:	080106b3 	.word	0x080106b3
 80101b0:	08010565 	.word	0x08010565
 80101b4:	0801073f 	.word	0x0801073f
 80101b8:	080107cf 	.word	0x080107cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80101bc:	4b57      	ldr	r3, [pc, #348]	; (801031c <tcp_process+0x2b8>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f003 0310 	and.w	r3, r3, #16
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f000 80e4 	beq.w	8010392 <tcp_process+0x32e>
 80101ca:	4b54      	ldr	r3, [pc, #336]	; (801031c <tcp_process+0x2b8>)
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	f003 0302 	and.w	r3, r3, #2
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f000 80dd 	beq.w	8010392 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	4b50      	ldr	r3, [pc, #320]	; (8010320 <tcp_process+0x2bc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	f040 80d5 	bne.w	8010392 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80101e8:	4b4e      	ldr	r3, [pc, #312]	; (8010324 <tcp_process+0x2c0>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80101fa:	4b49      	ldr	r3, [pc, #292]	; (8010320 <tcp_process+0x2bc>)
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010202:	4b4c      	ldr	r3, [pc, #304]	; (8010334 <tcp_process+0x2d0>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	89db      	ldrh	r3, [r3, #14]
 8010208:	b29a      	uxth	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801021c:	4b41      	ldr	r3, [pc, #260]	; (8010324 <tcp_process+0x2c0>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	1e5a      	subs	r2, r3, #1
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2204      	movs	r2, #4
 801022a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	3304      	adds	r3, #4
 8010234:	4618      	mov	r0, r3
 8010236:	f004 ff77 	bl	8015128 <ip4_route>
 801023a:	4601      	mov	r1, r0
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3304      	adds	r3, #4
 8010240:	461a      	mov	r2, r3
 8010242:	4620      	mov	r0, r4
 8010244:	f7ff f88e 	bl	800f364 <tcp_eff_send_mss_netif>
 8010248:	4603      	mov	r3, r0
 801024a:	461a      	mov	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010254:	009a      	lsls	r2, r3, #2
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801025a:	005b      	lsls	r3, r3, #1
 801025c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010260:	428b      	cmp	r3, r1
 8010262:	bf38      	it	cc
 8010264:	460b      	movcc	r3, r1
 8010266:	429a      	cmp	r2, r3
 8010268:	d204      	bcs.n	8010274 <tcp_process+0x210>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	b29b      	uxth	r3, r3
 8010272:	e00d      	b.n	8010290 <tcp_process+0x22c>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	f241 121c 	movw	r2, #4380	; 0x111c
 801027e:	4293      	cmp	r3, r2
 8010280:	d904      	bls.n	801028c <tcp_process+0x228>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010286:	005b      	lsls	r3, r3, #1
 8010288:	b29b      	uxth	r3, r3
 801028a:	e001      	b.n	8010290 <tcp_process+0x22c>
 801028c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801029c:	2b00      	cmp	r3, #0
 801029e:	d106      	bne.n	80102ae <tcp_process+0x24a>
 80102a0:	4b1b      	ldr	r3, [pc, #108]	; (8010310 <tcp_process+0x2ac>)
 80102a2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80102a6:	4924      	ldr	r1, [pc, #144]	; (8010338 <tcp_process+0x2d4>)
 80102a8:	481b      	ldr	r0, [pc, #108]	; (8010318 <tcp_process+0x2b4>)
 80102aa:	f006 fbcf 	bl	8016a4c <iprintf>
        --pcb->snd_queuelen;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102b4:	3b01      	subs	r3, #1
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d111      	bne.n	80102ee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <tcp_process+0x280>
 80102d6:	4b0e      	ldr	r3, [pc, #56]	; (8010310 <tcp_process+0x2ac>)
 80102d8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80102dc:	4917      	ldr	r1, [pc, #92]	; (801033c <tcp_process+0x2d8>)
 80102de:	480e      	ldr	r0, [pc, #56]	; (8010318 <tcp_process+0x2b4>)
 80102e0:	f006 fbb4 	bl	8016a4c <iprintf>
          pcb->unsent = rseg->next;
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80102ec:	e003      	b.n	80102f6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80102f6:	69f8      	ldr	r0, [r7, #28]
 80102f8:	f7fe fc51 	bl	800eb9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010300:	2b00      	cmp	r3, #0
 8010302:	d11d      	bne.n	8010340 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801030a:	861a      	strh	r2, [r3, #48]	; 0x30
 801030c:	e01f      	b.n	801034e <tcp_process+0x2ea>
 801030e:	bf00      	nop
 8010310:	0801a1dc 	.word	0x0801a1dc
 8010314:	0801a414 	.word	0x0801a414
 8010318:	0801a228 	.word	0x0801a228
 801031c:	20005424 	.word	0x20005424
 8010320:	2000541c 	.word	0x2000541c
 8010324:	20005418 	.word	0x20005418
 8010328:	0801a430 	.word	0x0801a430
 801032c:	20005425 	.word	0x20005425
 8010330:	200136b4 	.word	0x200136b4
 8010334:	20005408 	.word	0x20005408
 8010338:	0801a450 	.word	0x0801a450
 801033c:	0801a468 	.word	0x0801a468
        } else {
          pcb->rtime = 0;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00a      	beq.n	801036e <tcp_process+0x30a>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	6910      	ldr	r0, [r2, #16]
 8010362:	2200      	movs	r2, #0
 8010364:	6879      	ldr	r1, [r7, #4]
 8010366:	4798      	blx	r3
 8010368:	4603      	mov	r3, r0
 801036a:	76bb      	strb	r3, [r7, #26]
 801036c:	e001      	b.n	8010372 <tcp_process+0x30e>
 801036e:	2300      	movs	r3, #0
 8010370:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010372:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010376:	f113 0f0d 	cmn.w	r3, #13
 801037a:	d102      	bne.n	8010382 <tcp_process+0x31e>
          return ERR_ABRT;
 801037c:	f06f 030c 	mvn.w	r3, #12
 8010380:	e250      	b.n	8010824 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8b5b      	ldrh	r3, [r3, #26]
 8010386:	f043 0302 	orr.w	r3, r3, #2
 801038a:	b29a      	uxth	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010390:	e23a      	b.n	8010808 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010392:	4b9d      	ldr	r3, [pc, #628]	; (8010608 <tcp_process+0x5a4>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	f003 0310 	and.w	r3, r3, #16
 801039a:	2b00      	cmp	r3, #0
 801039c:	f000 8234 	beq.w	8010808 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103a0:	4b9a      	ldr	r3, [pc, #616]	; (801060c <tcp_process+0x5a8>)
 80103a2:	6819      	ldr	r1, [r3, #0]
 80103a4:	4b9a      	ldr	r3, [pc, #616]	; (8010610 <tcp_process+0x5ac>)
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	461a      	mov	r2, r3
 80103aa:	4b9a      	ldr	r3, [pc, #616]	; (8010614 <tcp_process+0x5b0>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103b0:	4b99      	ldr	r3, [pc, #612]	; (8010618 <tcp_process+0x5b4>)
 80103b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103b4:	885b      	ldrh	r3, [r3, #2]
 80103b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103b8:	4a97      	ldr	r2, [pc, #604]	; (8010618 <tcp_process+0x5b4>)
 80103ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103bc:	8812      	ldrh	r2, [r2, #0]
 80103be:	b292      	uxth	r2, r2
 80103c0:	9202      	str	r2, [sp, #8]
 80103c2:	9301      	str	r3, [sp, #4]
 80103c4:	4b95      	ldr	r3, [pc, #596]	; (801061c <tcp_process+0x5b8>)
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	4b95      	ldr	r3, [pc, #596]	; (8010620 <tcp_process+0x5bc>)
 80103ca:	4602      	mov	r2, r0
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f003 f8db 	bl	8013588 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103d8:	2b05      	cmp	r3, #5
 80103da:	f200 8215 	bhi.w	8010808 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f002 fea5 	bl	8013134 <tcp_rexmit_rto>
      break;
 80103ea:	e20d      	b.n	8010808 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80103ec:	4b86      	ldr	r3, [pc, #536]	; (8010608 <tcp_process+0x5a4>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	f003 0310 	and.w	r3, r3, #16
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80a1 	beq.w	801053c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80103fa:	4b84      	ldr	r3, [pc, #528]	; (801060c <tcp_process+0x5a8>)
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	3b01      	subs	r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	db7e      	blt.n	8010508 <tcp_process+0x4a4>
 801040a:	4b80      	ldr	r3, [pc, #512]	; (801060c <tcp_process+0x5a8>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	2b00      	cmp	r3, #0
 8010416:	dc77      	bgt.n	8010508 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2204      	movs	r2, #4
 801041c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010422:	2b00      	cmp	r3, #0
 8010424:	d102      	bne.n	801042c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010426:	23fa      	movs	r3, #250	; 0xfa
 8010428:	76bb      	strb	r3, [r7, #26]
 801042a:	e01d      	b.n	8010468 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d106      	bne.n	8010444 <tcp_process+0x3e0>
 8010436:	4b7b      	ldr	r3, [pc, #492]	; (8010624 <tcp_process+0x5c0>)
 8010438:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801043c:	497a      	ldr	r1, [pc, #488]	; (8010628 <tcp_process+0x5c4>)
 801043e:	487b      	ldr	r0, [pc, #492]	; (801062c <tcp_process+0x5c8>)
 8010440:	f006 fb04 	bl	8016a4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <tcp_process+0x400>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010452:	699b      	ldr	r3, [r3, #24]
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	6910      	ldr	r0, [r2, #16]
 8010458:	2200      	movs	r2, #0
 801045a:	6879      	ldr	r1, [r7, #4]
 801045c:	4798      	blx	r3
 801045e:	4603      	mov	r3, r0
 8010460:	76bb      	strb	r3, [r7, #26]
 8010462:	e001      	b.n	8010468 <tcp_process+0x404>
 8010464:	23f0      	movs	r3, #240	; 0xf0
 8010466:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00a      	beq.n	8010486 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010474:	f113 0f0d 	cmn.w	r3, #13
 8010478:	d002      	beq.n	8010480 <tcp_process+0x41c>
              tcp_abort(pcb);
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f7fd fcea 	bl	800de54 <tcp_abort>
            }
            return ERR_ABRT;
 8010480:	f06f 030c 	mvn.w	r3, #12
 8010484:	e1ce      	b.n	8010824 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fae0 	bl	8010a4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801048c:	4b68      	ldr	r3, [pc, #416]	; (8010630 <tcp_process+0x5cc>)
 801048e:	881b      	ldrh	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d005      	beq.n	80104a0 <tcp_process+0x43c>
            recv_acked--;
 8010494:	4b66      	ldr	r3, [pc, #408]	; (8010630 <tcp_process+0x5cc>)
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	3b01      	subs	r3, #1
 801049a:	b29a      	uxth	r2, r3
 801049c:	4b64      	ldr	r3, [pc, #400]	; (8010630 <tcp_process+0x5cc>)
 801049e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a4:	009a      	lsls	r2, r3, #2
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104aa:	005b      	lsls	r3, r3, #1
 80104ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80104b0:	428b      	cmp	r3, r1
 80104b2:	bf38      	it	cc
 80104b4:	460b      	movcc	r3, r1
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d204      	bcs.n	80104c4 <tcp_process+0x460>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	e00d      	b.n	80104e0 <tcp_process+0x47c>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d904      	bls.n	80104dc <tcp_process+0x478>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104d6:	005b      	lsls	r3, r3, #1
 80104d8:	b29b      	uxth	r3, r3
 80104da:	e001      	b.n	80104e0 <tcp_process+0x47c>
 80104dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80104e6:	4b53      	ldr	r3, [pc, #332]	; (8010634 <tcp_process+0x5d0>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	f003 0320 	and.w	r3, r3, #32
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d037      	beq.n	8010562 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8b5b      	ldrh	r3, [r3, #26]
 80104f6:	f043 0302 	orr.w	r3, r3, #2
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2207      	movs	r2, #7
 8010504:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010506:	e02c      	b.n	8010562 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010508:	4b40      	ldr	r3, [pc, #256]	; (801060c <tcp_process+0x5a8>)
 801050a:	6819      	ldr	r1, [r3, #0]
 801050c:	4b40      	ldr	r3, [pc, #256]	; (8010610 <tcp_process+0x5ac>)
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	461a      	mov	r2, r3
 8010512:	4b40      	ldr	r3, [pc, #256]	; (8010614 <tcp_process+0x5b0>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010518:	4b3f      	ldr	r3, [pc, #252]	; (8010618 <tcp_process+0x5b4>)
 801051a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801051c:	885b      	ldrh	r3, [r3, #2]
 801051e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010520:	4a3d      	ldr	r2, [pc, #244]	; (8010618 <tcp_process+0x5b4>)
 8010522:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010524:	8812      	ldrh	r2, [r2, #0]
 8010526:	b292      	uxth	r2, r2
 8010528:	9202      	str	r2, [sp, #8]
 801052a:	9301      	str	r3, [sp, #4]
 801052c:	4b3b      	ldr	r3, [pc, #236]	; (801061c <tcp_process+0x5b8>)
 801052e:	9300      	str	r3, [sp, #0]
 8010530:	4b3b      	ldr	r3, [pc, #236]	; (8010620 <tcp_process+0x5bc>)
 8010532:	4602      	mov	r2, r0
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f003 f827 	bl	8013588 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801053a:	e167      	b.n	801080c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801053c:	4b32      	ldr	r3, [pc, #200]	; (8010608 <tcp_process+0x5a4>)
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	f003 0302 	and.w	r3, r3, #2
 8010544:	2b00      	cmp	r3, #0
 8010546:	f000 8161 	beq.w	801080c <tcp_process+0x7a8>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801054e:	1e5a      	subs	r2, r3, #1
 8010550:	4b30      	ldr	r3, [pc, #192]	; (8010614 <tcp_process+0x5b0>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	429a      	cmp	r2, r3
 8010556:	f040 8159 	bne.w	801080c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f002 fe0c 	bl	8013178 <tcp_rexmit>
      break;
 8010560:	e154      	b.n	801080c <tcp_process+0x7a8>
 8010562:	e153      	b.n	801080c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fa71 	bl	8010a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801056a:	4b32      	ldr	r3, [pc, #200]	; (8010634 <tcp_process+0x5d0>)
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f003 0320 	and.w	r3, r3, #32
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 814c 	beq.w	8010810 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	8b5b      	ldrh	r3, [r3, #26]
 801057c:	f043 0302 	orr.w	r3, r3, #2
 8010580:	b29a      	uxth	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2207      	movs	r2, #7
 801058a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801058c:	e140      	b.n	8010810 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 fa5c 	bl	8010a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010594:	4b27      	ldr	r3, [pc, #156]	; (8010634 <tcp_process+0x5d0>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	f003 0320 	and.w	r3, r3, #32
 801059c:	2b00      	cmp	r3, #0
 801059e:	d071      	beq.n	8010684 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105a0:	4b19      	ldr	r3, [pc, #100]	; (8010608 <tcp_process+0x5a4>)
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	f003 0310 	and.w	r3, r3, #16
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d060      	beq.n	801066e <tcp_process+0x60a>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105b0:	4b16      	ldr	r3, [pc, #88]	; (801060c <tcp_process+0x5a8>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d15a      	bne.n	801066e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d156      	bne.n	801066e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8b5b      	ldrh	r3, [r3, #26]
 80105c4:	f043 0302 	orr.w	r3, r3, #2
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7fe fdbe 	bl	800f150 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80105d4:	4b18      	ldr	r3, [pc, #96]	; (8010638 <tcp_process+0x5d4>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d105      	bne.n	80105ea <tcp_process+0x586>
 80105de:	4b16      	ldr	r3, [pc, #88]	; (8010638 <tcp_process+0x5d4>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	4a14      	ldr	r2, [pc, #80]	; (8010638 <tcp_process+0x5d4>)
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	e02e      	b.n	8010648 <tcp_process+0x5e4>
 80105ea:	4b13      	ldr	r3, [pc, #76]	; (8010638 <tcp_process+0x5d4>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	617b      	str	r3, [r7, #20]
 80105f0:	e027      	b.n	8010642 <tcp_process+0x5de>
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d11f      	bne.n	801063c <tcp_process+0x5d8>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	68da      	ldr	r2, [r3, #12]
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	60da      	str	r2, [r3, #12]
 8010604:	e020      	b.n	8010648 <tcp_process+0x5e4>
 8010606:	bf00      	nop
 8010608:	20005424 	.word	0x20005424
 801060c:	2000541c 	.word	0x2000541c
 8010610:	20005422 	.word	0x20005422
 8010614:	20005418 	.word	0x20005418
 8010618:	20005408 	.word	0x20005408
 801061c:	2000fef0 	.word	0x2000fef0
 8010620:	2000fef4 	.word	0x2000fef4
 8010624:	0801a1dc 	.word	0x0801a1dc
 8010628:	0801a47c 	.word	0x0801a47c
 801062c:	0801a228 	.word	0x0801a228
 8010630:	20005420 	.word	0x20005420
 8010634:	20005425 	.word	0x20005425
 8010638:	200136b0 	.word	0x200136b0
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	617b      	str	r3, [r7, #20]
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1d4      	bne.n	80105f2 <tcp_process+0x58e>
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	60da      	str	r2, [r3, #12]
 801064e:	4b77      	ldr	r3, [pc, #476]	; (801082c <tcp_process+0x7c8>)
 8010650:	2201      	movs	r2, #1
 8010652:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	220a      	movs	r2, #10
 8010658:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801065a:	4b75      	ldr	r3, [pc, #468]	; (8010830 <tcp_process+0x7cc>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	60da      	str	r2, [r3, #12]
 8010662:	4a73      	ldr	r2, [pc, #460]	; (8010830 <tcp_process+0x7cc>)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6013      	str	r3, [r2, #0]
 8010668:	f003 f950 	bl	801390c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801066c:	e0d2      	b.n	8010814 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8b5b      	ldrh	r3, [r3, #26]
 8010672:	f043 0302 	orr.w	r3, r3, #2
 8010676:	b29a      	uxth	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2208      	movs	r2, #8
 8010680:	751a      	strb	r2, [r3, #20]
      break;
 8010682:	e0c7      	b.n	8010814 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010684:	4b6b      	ldr	r3, [pc, #428]	; (8010834 <tcp_process+0x7d0>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	f003 0310 	and.w	r3, r3, #16
 801068c:	2b00      	cmp	r3, #0
 801068e:	f000 80c1 	beq.w	8010814 <tcp_process+0x7b0>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010696:	4b68      	ldr	r3, [pc, #416]	; (8010838 <tcp_process+0x7d4>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	429a      	cmp	r2, r3
 801069c:	f040 80ba 	bne.w	8010814 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f040 80b5 	bne.w	8010814 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2206      	movs	r2, #6
 80106ae:	751a      	strb	r2, [r3, #20]
      break;
 80106b0:	e0b0      	b.n	8010814 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 f9ca 	bl	8010a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106b8:	4b60      	ldr	r3, [pc, #384]	; (801083c <tcp_process+0x7d8>)
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 0320 	and.w	r3, r3, #32
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f000 80a9 	beq.w	8010818 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8b5b      	ldrh	r3, [r3, #26]
 80106ca:	f043 0302 	orr.w	r3, r3, #2
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7fe fd3b 	bl	800f150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80106da:	4b59      	ldr	r3, [pc, #356]	; (8010840 <tcp_process+0x7dc>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d105      	bne.n	80106f0 <tcp_process+0x68c>
 80106e4:	4b56      	ldr	r3, [pc, #344]	; (8010840 <tcp_process+0x7dc>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	4a55      	ldr	r2, [pc, #340]	; (8010840 <tcp_process+0x7dc>)
 80106ec:	6013      	str	r3, [r2, #0]
 80106ee:	e013      	b.n	8010718 <tcp_process+0x6b4>
 80106f0:	4b53      	ldr	r3, [pc, #332]	; (8010840 <tcp_process+0x7dc>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	613b      	str	r3, [r7, #16]
 80106f6:	e00c      	b.n	8010712 <tcp_process+0x6ae>
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d104      	bne.n	801070c <tcp_process+0x6a8>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	68da      	ldr	r2, [r3, #12]
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	60da      	str	r2, [r3, #12]
 801070a:	e005      	b.n	8010718 <tcp_process+0x6b4>
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	613b      	str	r3, [r7, #16]
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1ef      	bne.n	80106f8 <tcp_process+0x694>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	60da      	str	r2, [r3, #12]
 801071e:	4b43      	ldr	r3, [pc, #268]	; (801082c <tcp_process+0x7c8>)
 8010720:	2201      	movs	r2, #1
 8010722:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	220a      	movs	r2, #10
 8010728:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801072a:	4b41      	ldr	r3, [pc, #260]	; (8010830 <tcp_process+0x7cc>)
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	60da      	str	r2, [r3, #12]
 8010732:	4a3f      	ldr	r2, [pc, #252]	; (8010830 <tcp_process+0x7cc>)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6013      	str	r3, [r2, #0]
 8010738:	f003 f8e8 	bl	801390c <tcp_timer_needed>
      }
      break;
 801073c:	e06c      	b.n	8010818 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f984 	bl	8010a4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010744:	4b3b      	ldr	r3, [pc, #236]	; (8010834 <tcp_process+0x7d0>)
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	f003 0310 	and.w	r3, r3, #16
 801074c:	2b00      	cmp	r3, #0
 801074e:	d065      	beq.n	801081c <tcp_process+0x7b8>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010754:	4b38      	ldr	r3, [pc, #224]	; (8010838 <tcp_process+0x7d4>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d15f      	bne.n	801081c <tcp_process+0x7b8>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010760:	2b00      	cmp	r3, #0
 8010762:	d15b      	bne.n	801081c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7fe fcf3 	bl	800f150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801076a:	4b35      	ldr	r3, [pc, #212]	; (8010840 <tcp_process+0x7dc>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d105      	bne.n	8010780 <tcp_process+0x71c>
 8010774:	4b32      	ldr	r3, [pc, #200]	; (8010840 <tcp_process+0x7dc>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	4a31      	ldr	r2, [pc, #196]	; (8010840 <tcp_process+0x7dc>)
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	e013      	b.n	80107a8 <tcp_process+0x744>
 8010780:	4b2f      	ldr	r3, [pc, #188]	; (8010840 <tcp_process+0x7dc>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	60fb      	str	r3, [r7, #12]
 8010786:	e00c      	b.n	80107a2 <tcp_process+0x73e>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	429a      	cmp	r2, r3
 8010790:	d104      	bne.n	801079c <tcp_process+0x738>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68da      	ldr	r2, [r3, #12]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	60da      	str	r2, [r3, #12]
 801079a:	e005      	b.n	80107a8 <tcp_process+0x744>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	60fb      	str	r3, [r7, #12]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d1ef      	bne.n	8010788 <tcp_process+0x724>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	60da      	str	r2, [r3, #12]
 80107ae:	4b1f      	ldr	r3, [pc, #124]	; (801082c <tcp_process+0x7c8>)
 80107b0:	2201      	movs	r2, #1
 80107b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	220a      	movs	r2, #10
 80107b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107ba:	4b1d      	ldr	r3, [pc, #116]	; (8010830 <tcp_process+0x7cc>)
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	60da      	str	r2, [r3, #12]
 80107c2:	4a1b      	ldr	r2, [pc, #108]	; (8010830 <tcp_process+0x7cc>)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	f003 f8a0 	bl	801390c <tcp_timer_needed>
      }
      break;
 80107cc:	e026      	b.n	801081c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f93c 	bl	8010a4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107d4:	4b17      	ldr	r3, [pc, #92]	; (8010834 <tcp_process+0x7d0>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	f003 0310 	and.w	r3, r3, #16
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01f      	beq.n	8010820 <tcp_process+0x7bc>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107e4:	4b14      	ldr	r3, [pc, #80]	; (8010838 <tcp_process+0x7d4>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d119      	bne.n	8010820 <tcp_process+0x7bc>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d115      	bne.n	8010820 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80107f4:	4b11      	ldr	r3, [pc, #68]	; (801083c <tcp_process+0x7d8>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f043 0310 	orr.w	r3, r3, #16
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b0f      	ldr	r3, [pc, #60]	; (801083c <tcp_process+0x7d8>)
 8010800:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010802:	e00d      	b.n	8010820 <tcp_process+0x7bc>
    default:
      break;
 8010804:	bf00      	nop
 8010806:	e00c      	b.n	8010822 <tcp_process+0x7be>
      break;
 8010808:	bf00      	nop
 801080a:	e00a      	b.n	8010822 <tcp_process+0x7be>
      break;
 801080c:	bf00      	nop
 801080e:	e008      	b.n	8010822 <tcp_process+0x7be>
      break;
 8010810:	bf00      	nop
 8010812:	e006      	b.n	8010822 <tcp_process+0x7be>
      break;
 8010814:	bf00      	nop
 8010816:	e004      	b.n	8010822 <tcp_process+0x7be>
      break;
 8010818:	bf00      	nop
 801081a:	e002      	b.n	8010822 <tcp_process+0x7be>
      break;
 801081c:	bf00      	nop
 801081e:	e000      	b.n	8010822 <tcp_process+0x7be>
      break;
 8010820:	bf00      	nop
  }
  return ERR_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3724      	adds	r7, #36	; 0x24
 8010828:	46bd      	mov	sp, r7
 801082a:	bd90      	pop	{r4, r7, pc}
 801082c:	200136ac 	.word	0x200136ac
 8010830:	200136c0 	.word	0x200136c0
 8010834:	20005424 	.word	0x20005424
 8010838:	2000541c 	.word	0x2000541c
 801083c:	20005425 	.word	0x20005425
 8010840:	200136b0 	.word	0x200136b0

08010844 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010844:	b590      	push	{r4, r7, lr}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d106      	bne.n	8010862 <tcp_oos_insert_segment+0x1e>
 8010854:	4b3b      	ldr	r3, [pc, #236]	; (8010944 <tcp_oos_insert_segment+0x100>)
 8010856:	f240 421f 	movw	r2, #1055	; 0x41f
 801085a:	493b      	ldr	r1, [pc, #236]	; (8010948 <tcp_oos_insert_segment+0x104>)
 801085c:	483b      	ldr	r0, [pc, #236]	; (801094c <tcp_oos_insert_segment+0x108>)
 801085e:	f006 f8f5 	bl	8016a4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	899b      	ldrh	r3, [r3, #12]
 8010868:	b29b      	uxth	r3, r3
 801086a:	4618      	mov	r0, r3
 801086c:	f7fb f8d4 	bl	800ba18 <lwip_htons>
 8010870:	4603      	mov	r3, r0
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f003 0301 	and.w	r3, r3, #1
 8010878:	2b00      	cmp	r3, #0
 801087a:	d028      	beq.n	80108ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801087c:	6838      	ldr	r0, [r7, #0]
 801087e:	f7fe f979 	bl	800eb74 <tcp_segs_free>
    next = NULL;
 8010882:	2300      	movs	r3, #0
 8010884:	603b      	str	r3, [r7, #0]
 8010886:	e056      	b.n	8010936 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	899b      	ldrh	r3, [r3, #12]
 801088e:	b29b      	uxth	r3, r3
 8010890:	4618      	mov	r0, r3
 8010892:	f7fb f8c1 	bl	800ba18 <lwip_htons>
 8010896:	4603      	mov	r3, r0
 8010898:	b2db      	uxtb	r3, r3
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00d      	beq.n	80108be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	899b      	ldrh	r3, [r3, #12]
 80108a8:	b29c      	uxth	r4, r3
 80108aa:	2001      	movs	r0, #1
 80108ac:	f7fb f8b4 	bl	800ba18 <lwip_htons>
 80108b0:	4603      	mov	r3, r0
 80108b2:	461a      	mov	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	4322      	orrs	r2, r4
 80108ba:	b292      	uxth	r2, r2
 80108bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7fe f968 	bl	800eb9e <tcp_seg_free>
    while (next &&
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00e      	beq.n	80108f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	891b      	ldrh	r3, [r3, #8]
 80108d8:	461a      	mov	r2, r3
 80108da:	4b1d      	ldr	r3, [pc, #116]	; (8010950 <tcp_oos_insert_segment+0x10c>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	441a      	add	r2, r3
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	6839      	ldr	r1, [r7, #0]
 80108e8:	8909      	ldrh	r1, [r1, #8]
 80108ea:	440b      	add	r3, r1
 80108ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	daca      	bge.n	8010888 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01e      	beq.n	8010936 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	461a      	mov	r2, r3
 80108fe:	4b14      	ldr	r3, [pc, #80]	; (8010950 <tcp_oos_insert_segment+0x10c>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	441a      	add	r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801090c:	2b00      	cmp	r3, #0
 801090e:	dd12      	ble.n	8010936 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	b29a      	uxth	r2, r3
 8010918:	4b0d      	ldr	r3, [pc, #52]	; (8010950 <tcp_oos_insert_segment+0x10c>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	b29b      	uxth	r3, r3
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	b29a      	uxth	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685a      	ldr	r2, [r3, #4]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	891b      	ldrh	r3, [r3, #8]
 801092e:	4619      	mov	r1, r3
 8010930:	4610      	mov	r0, r2
 8010932:	f7fc fb75 	bl	800d020 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	601a      	str	r2, [r3, #0]
}
 801093c:	bf00      	nop
 801093e:	3714      	adds	r7, #20
 8010940:	46bd      	mov	sp, r7
 8010942:	bd90      	pop	{r4, r7, pc}
 8010944:	0801a1dc 	.word	0x0801a1dc
 8010948:	0801a49c 	.word	0x0801a49c
 801094c:	0801a228 	.word	0x0801a228
 8010950:	20005418 	.word	0x20005418

08010954 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010954:	b5b0      	push	{r4, r5, r7, lr}
 8010956:	b086      	sub	sp, #24
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
 8010960:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010962:	e03e      	b.n	80109e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	f7fc fd68 	bl	800d448 <pbuf_clen>
 8010978:	4603      	mov	r3, r0
 801097a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010982:	8a7a      	ldrh	r2, [r7, #18]
 8010984:	429a      	cmp	r2, r3
 8010986:	d906      	bls.n	8010996 <tcp_free_acked_segments+0x42>
 8010988:	4b2a      	ldr	r3, [pc, #168]	; (8010a34 <tcp_free_acked_segments+0xe0>)
 801098a:	f240 4257 	movw	r2, #1111	; 0x457
 801098e:	492a      	ldr	r1, [pc, #168]	; (8010a38 <tcp_free_acked_segments+0xe4>)
 8010990:	482a      	ldr	r0, [pc, #168]	; (8010a3c <tcp_free_acked_segments+0xe8>)
 8010992:	f006 f85b 	bl	8016a4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801099c:	8a7b      	ldrh	r3, [r7, #18]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	891a      	ldrh	r2, [r3, #8]
 80109ac:	4b24      	ldr	r3, [pc, #144]	; (8010a40 <tcp_free_acked_segments+0xec>)
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	4413      	add	r3, r2
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	4b22      	ldr	r3, [pc, #136]	; (8010a40 <tcp_free_acked_segments+0xec>)
 80109b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80109b8:	6978      	ldr	r0, [r7, #20]
 80109ba:	f7fe f8f0 	bl	800eb9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00c      	beq.n	80109e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d109      	bne.n	80109e2 <tcp_free_acked_segments+0x8e>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d106      	bne.n	80109e2 <tcp_free_acked_segments+0x8e>
 80109d4:	4b17      	ldr	r3, [pc, #92]	; (8010a34 <tcp_free_acked_segments+0xe0>)
 80109d6:	f240 4261 	movw	r2, #1121	; 0x461
 80109da:	491a      	ldr	r1, [pc, #104]	; (8010a44 <tcp_free_acked_segments+0xf0>)
 80109dc:	4817      	ldr	r0, [pc, #92]	; (8010a3c <tcp_free_acked_segments+0xe8>)
 80109de:	f006 f835 	bl	8016a4c <iprintf>
  while (seg_list != NULL &&
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d020      	beq.n	8010a2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fb f827 	bl	800ba42 <lwip_htonl>
 80109f4:	4604      	mov	r4, r0
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	891b      	ldrh	r3, [r3, #8]
 80109fa:	461d      	mov	r5, r3
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	899b      	ldrh	r3, [r3, #12]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fb f807 	bl	800ba18 <lwip_htons>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	f003 0303 	and.w	r3, r3, #3
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <tcp_free_acked_segments+0xc6>
 8010a16:	2301      	movs	r3, #1
 8010a18:	e000      	b.n	8010a1c <tcp_free_acked_segments+0xc8>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	442b      	add	r3, r5
 8010a1e:	18e2      	adds	r2, r4, r3
 8010a20:	4b09      	ldr	r3, [pc, #36]	; (8010a48 <tcp_free_acked_segments+0xf4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	dd9c      	ble.n	8010964 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a2a:	68bb      	ldr	r3, [r7, #8]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bdb0      	pop	{r4, r5, r7, pc}
 8010a34:	0801a1dc 	.word	0x0801a1dc
 8010a38:	0801a4c4 	.word	0x0801a4c4
 8010a3c:	0801a228 	.word	0x0801a228
 8010a40:	20005420 	.word	0x20005420
 8010a44:	0801a4ec 	.word	0x0801a4ec
 8010a48:	2000541c 	.word	0x2000541c

08010a4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a4c:	b5b0      	push	{r4, r5, r7, lr}
 8010a4e:	b094      	sub	sp, #80	; 0x50
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d106      	bne.n	8010a6c <tcp_receive+0x20>
 8010a5e:	4ba6      	ldr	r3, [pc, #664]	; (8010cf8 <tcp_receive+0x2ac>)
 8010a60:	f240 427b 	movw	r2, #1147	; 0x47b
 8010a64:	49a5      	ldr	r1, [pc, #660]	; (8010cfc <tcp_receive+0x2b0>)
 8010a66:	48a6      	ldr	r0, [pc, #664]	; (8010d00 <tcp_receive+0x2b4>)
 8010a68:	f005 fff0 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	7d1b      	ldrb	r3, [r3, #20]
 8010a70:	2b03      	cmp	r3, #3
 8010a72:	d806      	bhi.n	8010a82 <tcp_receive+0x36>
 8010a74:	4ba0      	ldr	r3, [pc, #640]	; (8010cf8 <tcp_receive+0x2ac>)
 8010a76:	f240 427c 	movw	r2, #1148	; 0x47c
 8010a7a:	49a2      	ldr	r1, [pc, #648]	; (8010d04 <tcp_receive+0x2b8>)
 8010a7c:	48a0      	ldr	r0, [pc, #640]	; (8010d00 <tcp_receive+0x2b4>)
 8010a7e:	f005 ffe5 	bl	8016a4c <iprintf>

  if (flags & TCP_ACK) {
 8010a82:	4ba1      	ldr	r3, [pc, #644]	; (8010d08 <tcp_receive+0x2bc>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	f003 0310 	and.w	r3, r3, #16
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 8263 	beq.w	8010f56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a96:	461a      	mov	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a9c:	4413      	add	r3, r2
 8010a9e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aa4:	4b99      	ldr	r3, [pc, #612]	; (8010d0c <tcp_receive+0x2c0>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	db1b      	blt.n	8010ae6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ab2:	4b96      	ldr	r3, [pc, #600]	; (8010d0c <tcp_receive+0x2c0>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d106      	bne.n	8010ac8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010abe:	4b94      	ldr	r3, [pc, #592]	; (8010d10 <tcp_receive+0x2c4>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	db0e      	blt.n	8010ae6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010acc:	4b90      	ldr	r3, [pc, #576]	; (8010d10 <tcp_receive+0x2c4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d125      	bne.n	8010b20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ad4:	4b8f      	ldr	r3, [pc, #572]	; (8010d14 <tcp_receive+0x2c8>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	89db      	ldrh	r3, [r3, #14]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d91c      	bls.n	8010b20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ae6:	4b8b      	ldr	r3, [pc, #556]	; (8010d14 <tcp_receive+0x2c8>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	89db      	ldrh	r3, [r3, #14]
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d205      	bcs.n	8010b10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b10:	4b7e      	ldr	r3, [pc, #504]	; (8010d0c <tcp_receive+0x2c0>)
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b18:	4b7d      	ldr	r3, [pc, #500]	; (8010d10 <tcp_receive+0x2c4>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b20:	4b7b      	ldr	r3, [pc, #492]	; (8010d10 <tcp_receive+0x2c4>)
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	dc58      	bgt.n	8010be0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b2e:	4b7a      	ldr	r3, [pc, #488]	; (8010d18 <tcp_receive+0x2cc>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d14b      	bne.n	8010bce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010b40:	4413      	add	r3, r2
 8010b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d142      	bne.n	8010bce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	db3d      	blt.n	8010bce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b56:	4b6e      	ldr	r3, [pc, #440]	; (8010d10 <tcp_receive+0x2c4>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d137      	bne.n	8010bce <tcp_receive+0x182>
              found_dupack = 1;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b68:	2bff      	cmp	r3, #255	; 0xff
 8010b6a:	d007      	beq.n	8010b7c <tcp_receive+0x130>
                ++pcb->dupacks;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b72:	3301      	adds	r3, #1
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	d91b      	bls.n	8010bbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b90:	4413      	add	r3, r2
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d30a      	bcc.n	8010bb4 <tcp_receive+0x168>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba8:	4413      	add	r3, r2
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bb2:	e004      	b.n	8010bbe <tcp_receive+0x172>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d902      	bls.n	8010bce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f002 fb41 	bl	8013250 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f040 8160 	bne.w	8010e96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010bde:	e15a      	b.n	8010e96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010be0:	4b4b      	ldr	r3, [pc, #300]	; (8010d10 <tcp_receive+0x2c4>)
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	3b01      	subs	r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f2c0 814d 	blt.w	8010e8c <tcp_receive+0x440>
 8010bf2:	4b47      	ldr	r3, [pc, #284]	; (8010d10 <tcp_receive+0x2c4>)
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f300 8145 	bgt.w	8010e8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8b5b      	ldrh	r3, [r3, #26]
 8010c06:	f003 0304 	and.w	r3, r3, #4
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d010      	beq.n	8010c30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8b5b      	ldrh	r3, [r3, #26]
 8010c12:	f023 0304 	bic.w	r3, r3, #4
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c3e:	10db      	asrs	r3, r3, #3
 8010c40:	b21b      	sxth	r3, r3
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4413      	add	r3, r2
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	b21a      	sxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010c58:	4b2d      	ldr	r3, [pc, #180]	; (8010d10 <tcp_receive+0x2c4>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010c70:	4b27      	ldr	r3, [pc, #156]	; (8010d10 <tcp_receive+0x2c4>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	7d1b      	ldrb	r3, [r3, #20]
 8010c7c:	2b03      	cmp	r3, #3
 8010c7e:	f240 8096 	bls.w	8010dae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d244      	bcs.n	8010d1c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	8b5b      	ldrh	r3, [r3, #26]
 8010c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d001      	beq.n	8010ca2 <tcp_receive+0x256>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e000      	b.n	8010ca4 <tcp_receive+0x258>
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010ca8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cb2:	fb12 f303 	smulbb	r3, r2, r3
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	bf28      	it	cs
 8010cbe:	4613      	movcs	r3, r2
 8010cc0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cca:	4413      	add	r3, r2
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d309      	bcc.n	8010cec <tcp_receive+0x2a0>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ce0:	4413      	add	r3, r2
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cea:	e060      	b.n	8010dae <tcp_receive+0x362>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cf6:	e05a      	b.n	8010dae <tcp_receive+0x362>
 8010cf8:	0801a1dc 	.word	0x0801a1dc
 8010cfc:	0801a50c 	.word	0x0801a50c
 8010d00:	0801a228 	.word	0x0801a228
 8010d04:	0801a528 	.word	0x0801a528
 8010d08:	20005424 	.word	0x20005424
 8010d0c:	20005418 	.word	0x20005418
 8010d10:	2000541c 	.word	0x2000541c
 8010d14:	20005408 	.word	0x20005408
 8010d18:	20005422 	.word	0x20005422
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d24:	4413      	add	r3, r2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d309      	bcc.n	8010d46 <tcp_receive+0x2fa>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d3a:	4413      	add	r3, r2
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d44:	e004      	b.n	8010d50 <tcp_receive+0x304>
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d326      	bcc.n	8010dae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	b29a      	uxth	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d80:	4413      	add	r3, r2
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d30a      	bcc.n	8010da4 <tcp_receive+0x358>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d98:	4413      	add	r3, r2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010da2:	e004      	b.n	8010dae <tcp_receive+0x362>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010daa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db6:	4a98      	ldr	r2, [pc, #608]	; (8011018 <tcp_receive+0x5cc>)
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ff fdcb 	bl	8010954 <tcp_free_acked_segments>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dcc:	4a93      	ldr	r2, [pc, #588]	; (801101c <tcp_receive+0x5d0>)
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f7ff fdc0 	bl	8010954 <tcp_free_acked_segments>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d104      	bne.n	8010dec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010de8:	861a      	strh	r2, [r3, #48]	; 0x30
 8010dea:	e002      	b.n	8010df2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2200      	movs	r2, #0
 8010df6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e0e:	4b84      	ldr	r3, [pc, #528]	; (8011020 <tcp_receive+0x5d4>)
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	4413      	add	r3, r2
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	8b5b      	ldrh	r3, [r3, #26]
 8010e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d035      	beq.n	8010e94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d118      	bne.n	8010e62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00c      	beq.n	8010e52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fa fdfc 	bl	800ba42 <lwip_htonl>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	dc20      	bgt.n	8010e94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e60:	e018      	b.n	8010e94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa fde7 	bl	800ba42 <lwip_htonl>
 8010e74:	4603      	mov	r3, r0
 8010e76:	1ae3      	subs	r3, r4, r3
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	dc0b      	bgt.n	8010e94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	8b5b      	ldrh	r3, [r3, #26]
 8010e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e8a:	e003      	b.n	8010e94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f002 fbcd 	bl	801362c <tcp_send_empty_ack>
 8010e92:	e000      	b.n	8010e96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d05b      	beq.n	8010f56 <tcp_receive+0x50a>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ea2:	4b60      	ldr	r3, [pc, #384]	; (8011024 <tcp_receive+0x5d8>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	da54      	bge.n	8010f56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010eac:	4b5e      	ldr	r3, [pc, #376]	; (8011028 <tcp_receive+0x5dc>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	1ad3      	subs	r3, r2, r3
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010ec0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010eca:	10db      	asrs	r3, r3, #3
 8010ecc:	b21b      	sxth	r3, r3
 8010ece:	b29b      	uxth	r3, r3
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010ee4:	4413      	add	r3, r2
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	b21a      	sxth	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010eee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	da05      	bge.n	8010f02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010ef6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010efa:	425b      	negs	r3, r3
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f0c:	109b      	asrs	r3, r3, #2
 8010f0e:	b21b      	sxth	r3, r3
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f26:	4413      	add	r3, r2
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	b21a      	sxth	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f36:	10db      	asrs	r3, r3, #3
 8010f38:	b21b      	sxth	r3, r3
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4413      	add	r3, r2
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	b21a      	sxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010f56:	4b35      	ldr	r3, [pc, #212]	; (801102c <tcp_receive+0x5e0>)
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	f000 84e1 	beq.w	8011922 <tcp_receive+0xed6>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	7d1b      	ldrb	r3, [r3, #20]
 8010f64:	2b06      	cmp	r3, #6
 8010f66:	f200 84dc 	bhi.w	8011922 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f6e:	4b30      	ldr	r3, [pc, #192]	; (8011030 <tcp_receive+0x5e4>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	3b01      	subs	r3, #1
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f2c0 808e 	blt.w	8011098 <tcp_receive+0x64c>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f80:	4b2a      	ldr	r3, [pc, #168]	; (801102c <tcp_receive+0x5e0>)
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	4619      	mov	r1, r3
 8010f86:	4b2a      	ldr	r3, [pc, #168]	; (8011030 <tcp_receive+0x5e4>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	440b      	add	r3, r1
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	3301      	adds	r3, #1
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f300 8081 	bgt.w	8011098 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010f96:	4b27      	ldr	r3, [pc, #156]	; (8011034 <tcp_receive+0x5e8>)
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fa0:	4b23      	ldr	r3, [pc, #140]	; (8011030 <tcp_receive+0x5e4>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010fa8:	4b22      	ldr	r3, [pc, #136]	; (8011034 <tcp_receive+0x5e8>)
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d106      	bne.n	8010fbe <tcp_receive+0x572>
 8010fb0:	4b21      	ldr	r3, [pc, #132]	; (8011038 <tcp_receive+0x5ec>)
 8010fb2:	f240 5294 	movw	r2, #1428	; 0x594
 8010fb6:	4921      	ldr	r1, [pc, #132]	; (801103c <tcp_receive+0x5f0>)
 8010fb8:	4821      	ldr	r0, [pc, #132]	; (8011040 <tcp_receive+0x5f4>)
 8010fba:	f005 fd47 	bl	8016a4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d906      	bls.n	8010fd6 <tcp_receive+0x58a>
 8010fc8:	4b1b      	ldr	r3, [pc, #108]	; (8011038 <tcp_receive+0x5ec>)
 8010fca:	f240 5295 	movw	r2, #1429	; 0x595
 8010fce:	491d      	ldr	r1, [pc, #116]	; (8011044 <tcp_receive+0x5f8>)
 8010fd0:	481b      	ldr	r0, [pc, #108]	; (8011040 <tcp_receive+0x5f4>)
 8010fd2:	f005 fd3b 	bl	8016a4c <iprintf>
      off = (u16_t)off32;
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010fdc:	4b15      	ldr	r3, [pc, #84]	; (8011034 <tcp_receive+0x5e8>)
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	891b      	ldrh	r3, [r3, #8]
 8010fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d906      	bls.n	8010ff8 <tcp_receive+0x5ac>
 8010fea:	4b13      	ldr	r3, [pc, #76]	; (8011038 <tcp_receive+0x5ec>)
 8010fec:	f240 5297 	movw	r2, #1431	; 0x597
 8010ff0:	4915      	ldr	r1, [pc, #84]	; (8011048 <tcp_receive+0x5fc>)
 8010ff2:	4813      	ldr	r0, [pc, #76]	; (8011040 <tcp_receive+0x5f4>)
 8010ff4:	f005 fd2a 	bl	8016a4c <iprintf>
      inseg.len -= off;
 8010ff8:	4b0e      	ldr	r3, [pc, #56]	; (8011034 <tcp_receive+0x5e8>)
 8010ffa:	891a      	ldrh	r2, [r3, #8]
 8010ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	b29a      	uxth	r2, r3
 8011004:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <tcp_receive+0x5e8>)
 8011006:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <tcp_receive+0x5e8>)
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	891a      	ldrh	r2, [r3, #8]
 801100e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011016:	e029      	b.n	801106c <tcp_receive+0x620>
 8011018:	0801a544 	.word	0x0801a544
 801101c:	0801a54c 	.word	0x0801a54c
 8011020:	20005420 	.word	0x20005420
 8011024:	2000541c 	.word	0x2000541c
 8011028:	200136b4 	.word	0x200136b4
 801102c:	20005422 	.word	0x20005422
 8011030:	20005418 	.word	0x20005418
 8011034:	200053f8 	.word	0x200053f8
 8011038:	0801a1dc 	.word	0x0801a1dc
 801103c:	0801a554 	.word	0x0801a554
 8011040:	0801a228 	.word	0x0801a228
 8011044:	0801a564 	.word	0x0801a564
 8011048:	0801a574 	.word	0x0801a574
        off -= p->len;
 801104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801104e:	895b      	ldrh	r3, [r3, #10]
 8011050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801105a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801105c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801105e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011062:	2200      	movs	r2, #0
 8011064:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801106c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801106e:	895b      	ldrh	r3, [r3, #10]
 8011070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011074:	429a      	cmp	r2, r3
 8011076:	d8e9      	bhi.n	801104c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801107c:	4619      	mov	r1, r3
 801107e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011080:	f7fc f8ce 	bl	800d220 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011088:	4a91      	ldr	r2, [pc, #580]	; (80112d0 <tcp_receive+0x884>)
 801108a:	6013      	str	r3, [r2, #0]
 801108c:	4b91      	ldr	r3, [pc, #580]	; (80112d4 <tcp_receive+0x888>)
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	4a8f      	ldr	r2, [pc, #572]	; (80112d0 <tcp_receive+0x884>)
 8011092:	6812      	ldr	r2, [r2, #0]
 8011094:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011096:	e00d      	b.n	80110b4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011098:	4b8d      	ldr	r3, [pc, #564]	; (80112d0 <tcp_receive+0x884>)
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	da06      	bge.n	80110b4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	8b5b      	ldrh	r3, [r3, #26]
 80110aa:	f043 0302 	orr.w	r3, r3, #2
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110b4:	4b86      	ldr	r3, [pc, #536]	; (80112d0 <tcp_receive+0x884>)
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	f2c0 842a 	blt.w	8011918 <tcp_receive+0xecc>
 80110c4:	4b82      	ldr	r3, [pc, #520]	; (80112d0 <tcp_receive+0x884>)
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110d0:	440b      	add	r3, r1
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	3301      	adds	r3, #1
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f300 841e 	bgt.w	8011918 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110e0:	4b7b      	ldr	r3, [pc, #492]	; (80112d0 <tcp_receive+0x884>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	f040 829a 	bne.w	801161e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80110ea:	4b7a      	ldr	r3, [pc, #488]	; (80112d4 <tcp_receive+0x888>)
 80110ec:	891c      	ldrh	r4, [r3, #8]
 80110ee:	4b79      	ldr	r3, [pc, #484]	; (80112d4 <tcp_receive+0x888>)
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fa fc8e 	bl	800ba18 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0303 	and.w	r3, r3, #3
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <tcp_receive+0x6c0>
 8011108:	2301      	movs	r3, #1
 801110a:	e000      	b.n	801110e <tcp_receive+0x6c2>
 801110c:	2300      	movs	r3, #0
 801110e:	4423      	add	r3, r4
 8011110:	b29a      	uxth	r2, r3
 8011112:	4b71      	ldr	r3, [pc, #452]	; (80112d8 <tcp_receive+0x88c>)
 8011114:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801111a:	4b6f      	ldr	r3, [pc, #444]	; (80112d8 <tcp_receive+0x88c>)
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	429a      	cmp	r2, r3
 8011120:	d275      	bcs.n	801120e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011122:	4b6c      	ldr	r3, [pc, #432]	; (80112d4 <tcp_receive+0x888>)
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	899b      	ldrh	r3, [r3, #12]
 8011128:	b29b      	uxth	r3, r3
 801112a:	4618      	mov	r0, r3
 801112c:	f7fa fc74 	bl	800ba18 <lwip_htons>
 8011130:	4603      	mov	r3, r0
 8011132:	b2db      	uxtb	r3, r3
 8011134:	f003 0301 	and.w	r3, r3, #1
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01f      	beq.n	801117c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801113c:	4b65      	ldr	r3, [pc, #404]	; (80112d4 <tcp_receive+0x888>)
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	899b      	ldrh	r3, [r3, #12]
 8011142:	b29b      	uxth	r3, r3
 8011144:	b21b      	sxth	r3, r3
 8011146:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801114a:	b21c      	sxth	r4, r3
 801114c:	4b61      	ldr	r3, [pc, #388]	; (80112d4 <tcp_receive+0x888>)
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	899b      	ldrh	r3, [r3, #12]
 8011152:	b29b      	uxth	r3, r3
 8011154:	4618      	mov	r0, r3
 8011156:	f7fa fc5f 	bl	800ba18 <lwip_htons>
 801115a:	4603      	mov	r3, r0
 801115c:	b2db      	uxtb	r3, r3
 801115e:	b29b      	uxth	r3, r3
 8011160:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011164:	b29b      	uxth	r3, r3
 8011166:	4618      	mov	r0, r3
 8011168:	f7fa fc56 	bl	800ba18 <lwip_htons>
 801116c:	4603      	mov	r3, r0
 801116e:	b21b      	sxth	r3, r3
 8011170:	4323      	orrs	r3, r4
 8011172:	b21a      	sxth	r2, r3
 8011174:	4b57      	ldr	r3, [pc, #348]	; (80112d4 <tcp_receive+0x888>)
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	b292      	uxth	r2, r2
 801117a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011180:	4b54      	ldr	r3, [pc, #336]	; (80112d4 <tcp_receive+0x888>)
 8011182:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011184:	4b53      	ldr	r3, [pc, #332]	; (80112d4 <tcp_receive+0x888>)
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	899b      	ldrh	r3, [r3, #12]
 801118a:	b29b      	uxth	r3, r3
 801118c:	4618      	mov	r0, r3
 801118e:	f7fa fc43 	bl	800ba18 <lwip_htons>
 8011192:	4603      	mov	r3, r0
 8011194:	b2db      	uxtb	r3, r3
 8011196:	f003 0302 	and.w	r3, r3, #2
 801119a:	2b00      	cmp	r3, #0
 801119c:	d005      	beq.n	80111aa <tcp_receive+0x75e>
            inseg.len -= 1;
 801119e:	4b4d      	ldr	r3, [pc, #308]	; (80112d4 <tcp_receive+0x888>)
 80111a0:	891b      	ldrh	r3, [r3, #8]
 80111a2:	3b01      	subs	r3, #1
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	4b4b      	ldr	r3, [pc, #300]	; (80112d4 <tcp_receive+0x888>)
 80111a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111aa:	4b4a      	ldr	r3, [pc, #296]	; (80112d4 <tcp_receive+0x888>)
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	4a49      	ldr	r2, [pc, #292]	; (80112d4 <tcp_receive+0x888>)
 80111b0:	8912      	ldrh	r2, [r2, #8]
 80111b2:	4611      	mov	r1, r2
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fb ff33 	bl	800d020 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80111ba:	4b46      	ldr	r3, [pc, #280]	; (80112d4 <tcp_receive+0x888>)
 80111bc:	891c      	ldrh	r4, [r3, #8]
 80111be:	4b45      	ldr	r3, [pc, #276]	; (80112d4 <tcp_receive+0x888>)
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	899b      	ldrh	r3, [r3, #12]
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fa fc26 	bl	800ba18 <lwip_htons>
 80111cc:	4603      	mov	r3, r0
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	f003 0303 	and.w	r3, r3, #3
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d001      	beq.n	80111dc <tcp_receive+0x790>
 80111d8:	2301      	movs	r3, #1
 80111da:	e000      	b.n	80111de <tcp_receive+0x792>
 80111dc:	2300      	movs	r3, #0
 80111de:	4423      	add	r3, r4
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	4b3d      	ldr	r3, [pc, #244]	; (80112d8 <tcp_receive+0x88c>)
 80111e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80111e6:	4b3c      	ldr	r3, [pc, #240]	; (80112d8 <tcp_receive+0x88c>)
 80111e8:	881b      	ldrh	r3, [r3, #0]
 80111ea:	461a      	mov	r2, r3
 80111ec:	4b38      	ldr	r3, [pc, #224]	; (80112d0 <tcp_receive+0x884>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	441a      	add	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111fa:	440b      	add	r3, r1
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d006      	beq.n	801120e <tcp_receive+0x7c2>
 8011200:	4b36      	ldr	r3, [pc, #216]	; (80112dc <tcp_receive+0x890>)
 8011202:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011206:	4936      	ldr	r1, [pc, #216]	; (80112e0 <tcp_receive+0x894>)
 8011208:	4836      	ldr	r0, [pc, #216]	; (80112e4 <tcp_receive+0x898>)
 801120a:	f005 fc1f 	bl	8016a4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 80e7 	beq.w	80113e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011218:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <tcp_receive+0x888>)
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	899b      	ldrh	r3, [r3, #12]
 801121e:	b29b      	uxth	r3, r3
 8011220:	4618      	mov	r0, r3
 8011222:	f7fa fbf9 	bl	800ba18 <lwip_htons>
 8011226:	4603      	mov	r3, r0
 8011228:	b2db      	uxtb	r3, r3
 801122a:	f003 0301 	and.w	r3, r3, #1
 801122e:	2b00      	cmp	r3, #0
 8011230:	d010      	beq.n	8011254 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011232:	e00a      	b.n	801124a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011238:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7fd fcaa 	bl	800eb9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1f0      	bne.n	8011234 <tcp_receive+0x7e8>
 8011252:	e0c8      	b.n	80113e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011258:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801125a:	e052      	b.n	8011302 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801125c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	899b      	ldrh	r3, [r3, #12]
 8011262:	b29b      	uxth	r3, r3
 8011264:	4618      	mov	r0, r3
 8011266:	f7fa fbd7 	bl	800ba18 <lwip_htons>
 801126a:	4603      	mov	r3, r0
 801126c:	b2db      	uxtb	r3, r3
 801126e:	f003 0301 	and.w	r3, r3, #1
 8011272:	2b00      	cmp	r3, #0
 8011274:	d03d      	beq.n	80112f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011276:	4b17      	ldr	r3, [pc, #92]	; (80112d4 <tcp_receive+0x888>)
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	899b      	ldrh	r3, [r3, #12]
 801127c:	b29b      	uxth	r3, r3
 801127e:	4618      	mov	r0, r3
 8011280:	f7fa fbca 	bl	800ba18 <lwip_htons>
 8011284:	4603      	mov	r3, r0
 8011286:	b2db      	uxtb	r3, r3
 8011288:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801128c:	2b00      	cmp	r3, #0
 801128e:	d130      	bne.n	80112f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011290:	4b10      	ldr	r3, [pc, #64]	; (80112d4 <tcp_receive+0x888>)
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	899b      	ldrh	r3, [r3, #12]
 8011296:	b29c      	uxth	r4, r3
 8011298:	2001      	movs	r0, #1
 801129a:	f7fa fbbd 	bl	800ba18 <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	461a      	mov	r2, r3
 80112a2:	4b0c      	ldr	r3, [pc, #48]	; (80112d4 <tcp_receive+0x888>)
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	4322      	orrs	r2, r4
 80112a8:	b292      	uxth	r2, r2
 80112aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112ac:	4b09      	ldr	r3, [pc, #36]	; (80112d4 <tcp_receive+0x888>)
 80112ae:	891c      	ldrh	r4, [r3, #8]
 80112b0:	4b08      	ldr	r3, [pc, #32]	; (80112d4 <tcp_receive+0x888>)
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	899b      	ldrh	r3, [r3, #12]
 80112b6:	b29b      	uxth	r3, r3
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fa fbad 	bl	800ba18 <lwip_htons>
 80112be:	4603      	mov	r3, r0
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	f003 0303 	and.w	r3, r3, #3
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00e      	beq.n	80112e8 <tcp_receive+0x89c>
 80112ca:	2301      	movs	r3, #1
 80112cc:	e00d      	b.n	80112ea <tcp_receive+0x89e>
 80112ce:	bf00      	nop
 80112d0:	20005418 	.word	0x20005418
 80112d4:	200053f8 	.word	0x200053f8
 80112d8:	20005422 	.word	0x20005422
 80112dc:	0801a1dc 	.word	0x0801a1dc
 80112e0:	0801a584 	.word	0x0801a584
 80112e4:	0801a228 	.word	0x0801a228
 80112e8:	2300      	movs	r3, #0
 80112ea:	4423      	add	r3, r4
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	4b98      	ldr	r3, [pc, #608]	; (8011550 <tcp_receive+0xb04>)
 80112f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80112f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80112f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80112fc:	6938      	ldr	r0, [r7, #16]
 80112fe:	f7fd fc4e 	bl	800eb9e <tcp_seg_free>
            while (next &&
 8011302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00e      	beq.n	8011326 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011308:	4b91      	ldr	r3, [pc, #580]	; (8011550 <tcp_receive+0xb04>)
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	461a      	mov	r2, r3
 801130e:	4b91      	ldr	r3, [pc, #580]	; (8011554 <tcp_receive+0xb08>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	441a      	add	r2, r3
 8011314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801131c:	8909      	ldrh	r1, [r1, #8]
 801131e:	440b      	add	r3, r1
 8011320:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011322:	2b00      	cmp	r3, #0
 8011324:	da9a      	bge.n	801125c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011328:	2b00      	cmp	r3, #0
 801132a:	d059      	beq.n	80113e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801132c:	4b88      	ldr	r3, [pc, #544]	; (8011550 <tcp_receive+0xb04>)
 801132e:	881b      	ldrh	r3, [r3, #0]
 8011330:	461a      	mov	r2, r3
 8011332:	4b88      	ldr	r3, [pc, #544]	; (8011554 <tcp_receive+0xb08>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	441a      	add	r2, r3
 8011338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011340:	2b00      	cmp	r3, #0
 8011342:	dd4d      	ble.n	80113e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	b29a      	uxth	r2, r3
 801134c:	4b81      	ldr	r3, [pc, #516]	; (8011554 <tcp_receive+0xb08>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	b29b      	uxth	r3, r3
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	b29a      	uxth	r2, r3
 8011356:	4b80      	ldr	r3, [pc, #512]	; (8011558 <tcp_receive+0xb0c>)
 8011358:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801135a:	4b7f      	ldr	r3, [pc, #508]	; (8011558 <tcp_receive+0xb0c>)
 801135c:	68db      	ldr	r3, [r3, #12]
 801135e:	899b      	ldrh	r3, [r3, #12]
 8011360:	b29b      	uxth	r3, r3
 8011362:	4618      	mov	r0, r3
 8011364:	f7fa fb58 	bl	800ba18 <lwip_htons>
 8011368:	4603      	mov	r3, r0
 801136a:	b2db      	uxtb	r3, r3
 801136c:	f003 0302 	and.w	r3, r3, #2
 8011370:	2b00      	cmp	r3, #0
 8011372:	d005      	beq.n	8011380 <tcp_receive+0x934>
                inseg.len -= 1;
 8011374:	4b78      	ldr	r3, [pc, #480]	; (8011558 <tcp_receive+0xb0c>)
 8011376:	891b      	ldrh	r3, [r3, #8]
 8011378:	3b01      	subs	r3, #1
 801137a:	b29a      	uxth	r2, r3
 801137c:	4b76      	ldr	r3, [pc, #472]	; (8011558 <tcp_receive+0xb0c>)
 801137e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011380:	4b75      	ldr	r3, [pc, #468]	; (8011558 <tcp_receive+0xb0c>)
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	4a74      	ldr	r2, [pc, #464]	; (8011558 <tcp_receive+0xb0c>)
 8011386:	8912      	ldrh	r2, [r2, #8]
 8011388:	4611      	mov	r1, r2
 801138a:	4618      	mov	r0, r3
 801138c:	f7fb fe48 	bl	800d020 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011390:	4b71      	ldr	r3, [pc, #452]	; (8011558 <tcp_receive+0xb0c>)
 8011392:	891c      	ldrh	r4, [r3, #8]
 8011394:	4b70      	ldr	r3, [pc, #448]	; (8011558 <tcp_receive+0xb0c>)
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	4618      	mov	r0, r3
 801139e:	f7fa fb3b 	bl	800ba18 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	f003 0303 	and.w	r3, r3, #3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d001      	beq.n	80113b2 <tcp_receive+0x966>
 80113ae:	2301      	movs	r3, #1
 80113b0:	e000      	b.n	80113b4 <tcp_receive+0x968>
 80113b2:	2300      	movs	r3, #0
 80113b4:	4423      	add	r3, r4
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	4b65      	ldr	r3, [pc, #404]	; (8011550 <tcp_receive+0xb04>)
 80113ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80113bc:	4b64      	ldr	r3, [pc, #400]	; (8011550 <tcp_receive+0xb04>)
 80113be:	881b      	ldrh	r3, [r3, #0]
 80113c0:	461a      	mov	r2, r3
 80113c2:	4b64      	ldr	r3, [pc, #400]	; (8011554 <tcp_receive+0xb08>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	441a      	add	r2, r3
 80113c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d006      	beq.n	80113e0 <tcp_receive+0x994>
 80113d2:	4b62      	ldr	r3, [pc, #392]	; (801155c <tcp_receive+0xb10>)
 80113d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80113d8:	4961      	ldr	r1, [pc, #388]	; (8011560 <tcp_receive+0xb14>)
 80113da:	4862      	ldr	r0, [pc, #392]	; (8011564 <tcp_receive+0xb18>)
 80113dc:	f005 fb36 	bl	8016a4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80113e6:	4b5a      	ldr	r3, [pc, #360]	; (8011550 <tcp_receive+0xb04>)
 80113e8:	881b      	ldrh	r3, [r3, #0]
 80113ea:	461a      	mov	r2, r3
 80113ec:	4b59      	ldr	r3, [pc, #356]	; (8011554 <tcp_receive+0xb08>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	441a      	add	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113fa:	4b55      	ldr	r3, [pc, #340]	; (8011550 <tcp_receive+0xb04>)
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d206      	bcs.n	8011410 <tcp_receive+0x9c4>
 8011402:	4b56      	ldr	r3, [pc, #344]	; (801155c <tcp_receive+0xb10>)
 8011404:	f240 6207 	movw	r2, #1543	; 0x607
 8011408:	4957      	ldr	r1, [pc, #348]	; (8011568 <tcp_receive+0xb1c>)
 801140a:	4856      	ldr	r0, [pc, #344]	; (8011564 <tcp_receive+0xb18>)
 801140c:	f005 fb1e 	bl	8016a4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011414:	4b4e      	ldr	r3, [pc, #312]	; (8011550 <tcp_receive+0xb04>)
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7fc fe97 	bl	800e154 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011426:	4b4c      	ldr	r3, [pc, #304]	; (8011558 <tcp_receive+0xb0c>)
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	891b      	ldrh	r3, [r3, #8]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d006      	beq.n	801143e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011430:	4b49      	ldr	r3, [pc, #292]	; (8011558 <tcp_receive+0xb0c>)
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	4a4d      	ldr	r2, [pc, #308]	; (801156c <tcp_receive+0xb20>)
 8011436:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011438:	4b47      	ldr	r3, [pc, #284]	; (8011558 <tcp_receive+0xb0c>)
 801143a:	2200      	movs	r2, #0
 801143c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801143e:	4b46      	ldr	r3, [pc, #280]	; (8011558 <tcp_receive+0xb0c>)
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	899b      	ldrh	r3, [r3, #12]
 8011444:	b29b      	uxth	r3, r3
 8011446:	4618      	mov	r0, r3
 8011448:	f7fa fae6 	bl	800ba18 <lwip_htons>
 801144c:	4603      	mov	r3, r0
 801144e:	b2db      	uxtb	r3, r3
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	f000 80b8 	beq.w	80115ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801145a:	4b45      	ldr	r3, [pc, #276]	; (8011570 <tcp_receive+0xb24>)
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	f043 0320 	orr.w	r3, r3, #32
 8011462:	b2da      	uxtb	r2, r3
 8011464:	4b42      	ldr	r3, [pc, #264]	; (8011570 <tcp_receive+0xb24>)
 8011466:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011468:	e0af      	b.n	80115ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801146e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011474:	68db      	ldr	r3, [r3, #12]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	4a36      	ldr	r2, [pc, #216]	; (8011554 <tcp_receive+0xb08>)
 801147a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	891b      	ldrh	r3, [r3, #8]
 8011480:	461c      	mov	r4, r3
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	899b      	ldrh	r3, [r3, #12]
 8011488:	b29b      	uxth	r3, r3
 801148a:	4618      	mov	r0, r3
 801148c:	f7fa fac4 	bl	800ba18 <lwip_htons>
 8011490:	4603      	mov	r3, r0
 8011492:	b2db      	uxtb	r3, r3
 8011494:	f003 0303 	and.w	r3, r3, #3
 8011498:	2b00      	cmp	r3, #0
 801149a:	d001      	beq.n	80114a0 <tcp_receive+0xa54>
 801149c:	2301      	movs	r3, #1
 801149e:	e000      	b.n	80114a2 <tcp_receive+0xa56>
 80114a0:	2300      	movs	r3, #0
 80114a2:	191a      	adds	r2, r3, r4
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a8:	441a      	add	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114b2:	461c      	mov	r4, r3
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	891b      	ldrh	r3, [r3, #8]
 80114b8:	461d      	mov	r5, r3
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	899b      	ldrh	r3, [r3, #12]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fa faa8 	bl	800ba18 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0303 	and.w	r3, r3, #3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <tcp_receive+0xa8c>
 80114d4:	2301      	movs	r3, #1
 80114d6:	e000      	b.n	80114da <tcp_receive+0xa8e>
 80114d8:	2300      	movs	r3, #0
 80114da:	442b      	add	r3, r5
 80114dc:	429c      	cmp	r4, r3
 80114de:	d206      	bcs.n	80114ee <tcp_receive+0xaa2>
 80114e0:	4b1e      	ldr	r3, [pc, #120]	; (801155c <tcp_receive+0xb10>)
 80114e2:	f240 622b 	movw	r2, #1579	; 0x62b
 80114e6:	4923      	ldr	r1, [pc, #140]	; (8011574 <tcp_receive+0xb28>)
 80114e8:	481e      	ldr	r0, [pc, #120]	; (8011564 <tcp_receive+0xb18>)
 80114ea:	f005 faaf 	bl	8016a4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	461c      	mov	r4, r3
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	899b      	ldrh	r3, [r3, #12]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fa fa8b 	bl	800ba18 <lwip_htons>
 8011502:	4603      	mov	r3, r0
 8011504:	b2db      	uxtb	r3, r3
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <tcp_receive+0xac6>
 801150e:	2301      	movs	r3, #1
 8011510:	e000      	b.n	8011514 <tcp_receive+0xac8>
 8011512:	2300      	movs	r3, #0
 8011514:	1919      	adds	r1, r3, r4
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801151a:	b28b      	uxth	r3, r1
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	b29a      	uxth	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7fc fe15 	bl	800e154 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	891b      	ldrh	r3, [r3, #8]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d028      	beq.n	8011586 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011534:	4b0d      	ldr	r3, [pc, #52]	; (801156c <tcp_receive+0xb20>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d01d      	beq.n	8011578 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801153c:	4b0b      	ldr	r3, [pc, #44]	; (801156c <tcp_receive+0xb20>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	4619      	mov	r1, r3
 8011546:	4610      	mov	r0, r2
 8011548:	f7fb ffbe 	bl	800d4c8 <pbuf_cat>
 801154c:	e018      	b.n	8011580 <tcp_receive+0xb34>
 801154e:	bf00      	nop
 8011550:	20005422 	.word	0x20005422
 8011554:	20005418 	.word	0x20005418
 8011558:	200053f8 	.word	0x200053f8
 801155c:	0801a1dc 	.word	0x0801a1dc
 8011560:	0801a5bc 	.word	0x0801a5bc
 8011564:	0801a228 	.word	0x0801a228
 8011568:	0801a5f8 	.word	0x0801a5f8
 801156c:	20005428 	.word	0x20005428
 8011570:	20005425 	.word	0x20005425
 8011574:	0801a618 	.word	0x0801a618
            } else {
              recv_data = cseg->p;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	4a70      	ldr	r2, [pc, #448]	; (8011740 <tcp_receive+0xcf4>)
 801157e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2200      	movs	r2, #0
 8011584:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	899b      	ldrh	r3, [r3, #12]
 801158c:	b29b      	uxth	r3, r3
 801158e:	4618      	mov	r0, r3
 8011590:	f7fa fa42 	bl	800ba18 <lwip_htons>
 8011594:	4603      	mov	r3, r0
 8011596:	b2db      	uxtb	r3, r3
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d00d      	beq.n	80115bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115a0:	4b68      	ldr	r3, [pc, #416]	; (8011744 <tcp_receive+0xcf8>)
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f043 0320 	orr.w	r3, r3, #32
 80115a8:	b2da      	uxtb	r2, r3
 80115aa:	4b66      	ldr	r3, [pc, #408]	; (8011744 <tcp_receive+0xcf8>)
 80115ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	7d1b      	ldrb	r3, [r3, #20]
 80115b2:	2b04      	cmp	r3, #4
 80115b4:	d102      	bne.n	80115bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2207      	movs	r2, #7
 80115ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80115c4:	68b8      	ldr	r0, [r7, #8]
 80115c6:	f7fd faea 	bl	800eb9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d008      	beq.n	80115e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	685a      	ldr	r2, [r3, #4]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80115de:	429a      	cmp	r2, r3
 80115e0:	f43f af43 	beq.w	801146a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8b5b      	ldrh	r3, [r3, #26]
 80115e8:	f003 0301 	and.w	r3, r3, #1
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00e      	beq.n	801160e <tcp_receive+0xbc2>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	8b5b      	ldrh	r3, [r3, #26]
 80115f4:	f023 0301 	bic.w	r3, r3, #1
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	835a      	strh	r2, [r3, #26]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	8b5b      	ldrh	r3, [r3, #26]
 8011602:	f043 0302 	orr.w	r3, r3, #2
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801160c:	e188      	b.n	8011920 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8b5b      	ldrh	r3, [r3, #26]
 8011612:	f043 0301 	orr.w	r3, r3, #1
 8011616:	b29a      	uxth	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801161c:	e180      	b.n	8011920 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011622:	2b00      	cmp	r3, #0
 8011624:	d106      	bne.n	8011634 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011626:	4848      	ldr	r0, [pc, #288]	; (8011748 <tcp_receive+0xcfc>)
 8011628:	f7fd faf0 	bl	800ec0c <tcp_seg_copy>
 801162c:	4602      	mov	r2, r0
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	675a      	str	r2, [r3, #116]	; 0x74
 8011632:	e16d      	b.n	8011910 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011634:	2300      	movs	r3, #0
 8011636:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801163c:	63bb      	str	r3, [r7, #56]	; 0x38
 801163e:	e157      	b.n	80118f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	685a      	ldr	r2, [r3, #4]
 8011646:	4b41      	ldr	r3, [pc, #260]	; (801174c <tcp_receive+0xd00>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	429a      	cmp	r2, r3
 801164c:	d11d      	bne.n	801168a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801164e:	4b3e      	ldr	r3, [pc, #248]	; (8011748 <tcp_receive+0xcfc>)
 8011650:	891a      	ldrh	r2, [r3, #8]
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	891b      	ldrh	r3, [r3, #8]
 8011656:	429a      	cmp	r2, r3
 8011658:	f240 814f 	bls.w	80118fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801165c:	483a      	ldr	r0, [pc, #232]	; (8011748 <tcp_receive+0xcfc>)
 801165e:	f7fd fad5 	bl	800ec0c <tcp_seg_copy>
 8011662:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	2b00      	cmp	r3, #0
 8011668:	f000 8149 	beq.w	80118fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166e:	2b00      	cmp	r3, #0
 8011670:	d003      	beq.n	801167a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011674:	697a      	ldr	r2, [r7, #20]
 8011676:	601a      	str	r2, [r3, #0]
 8011678:	e002      	b.n	8011680 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011682:	6978      	ldr	r0, [r7, #20]
 8011684:	f7ff f8de 	bl	8010844 <tcp_oos_insert_segment>
                }
                break;
 8011688:	e139      	b.n	80118fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801168c:	2b00      	cmp	r3, #0
 801168e:	d117      	bne.n	80116c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011690:	4b2e      	ldr	r3, [pc, #184]	; (801174c <tcp_receive+0xd00>)
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	2b00      	cmp	r3, #0
 801169e:	da57      	bge.n	8011750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116a0:	4829      	ldr	r0, [pc, #164]	; (8011748 <tcp_receive+0xcfc>)
 80116a2:	f7fd fab3 	bl	800ec0c <tcp_seg_copy>
 80116a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 8129 	beq.w	8011902 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	69ba      	ldr	r2, [r7, #24]
 80116b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80116b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116b8:	69b8      	ldr	r0, [r7, #24]
 80116ba:	f7ff f8c3 	bl	8010844 <tcp_oos_insert_segment>
                  }
                  break;
 80116be:	e120      	b.n	8011902 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80116c0:	4b22      	ldr	r3, [pc, #136]	; (801174c <tcp_receive+0xd00>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	3b01      	subs	r3, #1
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	db3e      	blt.n	8011750 <tcp_receive+0xd04>
 80116d2:	4b1e      	ldr	r3, [pc, #120]	; (801174c <tcp_receive+0xd00>)
 80116d4:	681a      	ldr	r2, [r3, #0]
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	1ad3      	subs	r3, r2, r3
 80116de:	3301      	adds	r3, #1
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dc35      	bgt.n	8011750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e4:	4818      	ldr	r0, [pc, #96]	; (8011748 <tcp_receive+0xcfc>)
 80116e6:	f7fd fa91 	bl	800ec0c <tcp_seg_copy>
 80116ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 8109 	beq.w	8011906 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80116f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116fc:	8912      	ldrh	r2, [r2, #8]
 80116fe:	441a      	add	r2, r3
 8011700:	4b12      	ldr	r3, [pc, #72]	; (801174c <tcp_receive+0xd00>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	dd12      	ble.n	8011730 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801170a:	4b10      	ldr	r3, [pc, #64]	; (801174c <tcp_receive+0xd00>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	b29a      	uxth	r2, r3
 8011710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	b29b      	uxth	r3, r3
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	b29a      	uxth	r2, r3
 801171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801171e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011722:	685a      	ldr	r2, [r3, #4]
 8011724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011726:	891b      	ldrh	r3, [r3, #8]
 8011728:	4619      	mov	r1, r3
 801172a:	4610      	mov	r0, r2
 801172c:	f7fb fc78 	bl	800d020 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011732:	69fa      	ldr	r2, [r7, #28]
 8011734:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011738:	69f8      	ldr	r0, [r7, #28]
 801173a:	f7ff f883 	bl	8010844 <tcp_oos_insert_segment>
                  }
                  break;
 801173e:	e0e2      	b.n	8011906 <tcp_receive+0xeba>
 8011740:	20005428 	.word	0x20005428
 8011744:	20005425 	.word	0x20005425
 8011748:	200053f8 	.word	0x200053f8
 801174c:	20005418 	.word	0x20005418
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	f040 80c6 	bne.w	80118ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801175e:	4b80      	ldr	r3, [pc, #512]	; (8011960 <tcp_receive+0xf14>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801176a:	2b00      	cmp	r3, #0
 801176c:	f340 80bd 	ble.w	80118ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	899b      	ldrh	r3, [r3, #12]
 8011776:	b29b      	uxth	r3, r3
 8011778:	4618      	mov	r0, r3
 801177a:	f7fa f94d 	bl	800ba18 <lwip_htons>
 801177e:	4603      	mov	r3, r0
 8011780:	b2db      	uxtb	r3, r3
 8011782:	f003 0301 	and.w	r3, r3, #1
 8011786:	2b00      	cmp	r3, #0
 8011788:	f040 80bf 	bne.w	801190a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801178c:	4875      	ldr	r0, [pc, #468]	; (8011964 <tcp_receive+0xf18>)
 801178e:	f7fd fa3d 	bl	800ec0c <tcp_seg_copy>
 8011792:	4602      	mov	r2, r0
 8011794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011796:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 80b6 	beq.w	801190e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117aa:	8912      	ldrh	r2, [r2, #8]
 80117ac:	441a      	add	r2, r3
 80117ae:	4b6c      	ldr	r3, [pc, #432]	; (8011960 <tcp_receive+0xf14>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dd12      	ble.n	80117de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80117b8:	4b69      	ldr	r3, [pc, #420]	; (8011960 <tcp_receive+0xf14>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	b29a      	uxth	r2, r3
 80117be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	685a      	ldr	r2, [r3, #4]
 80117d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d4:	891b      	ldrh	r3, [r3, #8]
 80117d6:	4619      	mov	r1, r3
 80117d8:	4610      	mov	r0, r2
 80117da:	f7fb fc21 	bl	800d020 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80117de:	4b62      	ldr	r3, [pc, #392]	; (8011968 <tcp_receive+0xf1c>)
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	461a      	mov	r2, r3
 80117e4:	4b5e      	ldr	r3, [pc, #376]	; (8011960 <tcp_receive+0xf14>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	441a      	add	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ee:	6879      	ldr	r1, [r7, #4]
 80117f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117f2:	440b      	add	r3, r1
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f340 8089 	ble.w	801190e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80117fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	899b      	ldrh	r3, [r3, #12]
 8011804:	b29b      	uxth	r3, r3
 8011806:	4618      	mov	r0, r3
 8011808:	f7fa f906 	bl	800ba18 <lwip_htons>
 801180c:	4603      	mov	r3, r0
 801180e:	b2db      	uxtb	r3, r3
 8011810:	f003 0301 	and.w	r3, r3, #1
 8011814:	2b00      	cmp	r3, #0
 8011816:	d022      	beq.n	801185e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	899b      	ldrh	r3, [r3, #12]
 8011820:	b29b      	uxth	r3, r3
 8011822:	b21b      	sxth	r3, r3
 8011824:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011828:	b21c      	sxth	r4, r3
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	899b      	ldrh	r3, [r3, #12]
 8011832:	b29b      	uxth	r3, r3
 8011834:	4618      	mov	r0, r3
 8011836:	f7fa f8ef 	bl	800ba18 <lwip_htons>
 801183a:	4603      	mov	r3, r0
 801183c:	b2db      	uxtb	r3, r3
 801183e:	b29b      	uxth	r3, r3
 8011840:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011844:	b29b      	uxth	r3, r3
 8011846:	4618      	mov	r0, r3
 8011848:	f7fa f8e6 	bl	800ba18 <lwip_htons>
 801184c:	4603      	mov	r3, r0
 801184e:	b21b      	sxth	r3, r3
 8011850:	4323      	orrs	r3, r4
 8011852:	b21a      	sxth	r2, r3
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	b292      	uxth	r2, r2
 801185c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011862:	b29a      	uxth	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011868:	4413      	add	r3, r2
 801186a:	b299      	uxth	r1, r3
 801186c:	4b3c      	ldr	r3, [pc, #240]	; (8011960 <tcp_receive+0xf14>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	b29a      	uxth	r2, r3
 8011872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	1a8a      	subs	r2, r1, r2
 8011878:	b292      	uxth	r2, r2
 801187a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	891b      	ldrh	r3, [r3, #8]
 8011888:	4619      	mov	r1, r3
 801188a:	4610      	mov	r0, r2
 801188c:	f7fb fbc8 	bl	800d020 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	891c      	ldrh	r4, [r3, #8]
 8011896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	899b      	ldrh	r3, [r3, #12]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fa f8b9 	bl	800ba18 <lwip_htons>
 80118a6:	4603      	mov	r3, r0
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	f003 0303 	and.w	r3, r3, #3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d001      	beq.n	80118b6 <tcp_receive+0xe6a>
 80118b2:	2301      	movs	r3, #1
 80118b4:	e000      	b.n	80118b8 <tcp_receive+0xe6c>
 80118b6:	2300      	movs	r3, #0
 80118b8:	4423      	add	r3, r4
 80118ba:	b29a      	uxth	r2, r3
 80118bc:	4b2a      	ldr	r3, [pc, #168]	; (8011968 <tcp_receive+0xf1c>)
 80118be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80118c0:	4b29      	ldr	r3, [pc, #164]	; (8011968 <tcp_receive+0xf1c>)
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	4b26      	ldr	r3, [pc, #152]	; (8011960 <tcp_receive+0xf14>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	441a      	add	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d0:	6879      	ldr	r1, [r7, #4]
 80118d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118d4:	440b      	add	r3, r1
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d019      	beq.n	801190e <tcp_receive+0xec2>
 80118da:	4b24      	ldr	r3, [pc, #144]	; (801196c <tcp_receive+0xf20>)
 80118dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80118e0:	4923      	ldr	r1, [pc, #140]	; (8011970 <tcp_receive+0xf24>)
 80118e2:	4824      	ldr	r0, [pc, #144]	; (8011974 <tcp_receive+0xf28>)
 80118e4:	f005 f8b2 	bl	8016a4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80118e8:	e011      	b.n	801190e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f47f aea4 	bne.w	8011640 <tcp_receive+0xbf4>
 80118f8:	e00a      	b.n	8011910 <tcp_receive+0xec4>
                break;
 80118fa:	bf00      	nop
 80118fc:	e008      	b.n	8011910 <tcp_receive+0xec4>
                break;
 80118fe:	bf00      	nop
 8011900:	e006      	b.n	8011910 <tcp_receive+0xec4>
                  break;
 8011902:	bf00      	nop
 8011904:	e004      	b.n	8011910 <tcp_receive+0xec4>
                  break;
 8011906:	bf00      	nop
 8011908:	e002      	b.n	8011910 <tcp_receive+0xec4>
                  break;
 801190a:	bf00      	nop
 801190c:	e000      	b.n	8011910 <tcp_receive+0xec4>
                break;
 801190e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f001 fe8b 	bl	801362c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011916:	e003      	b.n	8011920 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f001 fe87 	bl	801362c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801191e:	e01a      	b.n	8011956 <tcp_receive+0xf0a>
 8011920:	e019      	b.n	8011956 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011922:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <tcp_receive+0xf14>)
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	db0a      	blt.n	8011946 <tcp_receive+0xefa>
 8011930:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <tcp_receive+0xf14>)
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011938:	6879      	ldr	r1, [r7, #4]
 801193a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801193c:	440b      	add	r3, r1
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	3301      	adds	r3, #1
 8011942:	2b00      	cmp	r3, #0
 8011944:	dd07      	ble.n	8011956 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	8b5b      	ldrh	r3, [r3, #26]
 801194a:	f043 0302 	orr.w	r3, r3, #2
 801194e:	b29a      	uxth	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011954:	e7ff      	b.n	8011956 <tcp_receive+0xf0a>
 8011956:	bf00      	nop
 8011958:	3750      	adds	r7, #80	; 0x50
 801195a:	46bd      	mov	sp, r7
 801195c:	bdb0      	pop	{r4, r5, r7, pc}
 801195e:	bf00      	nop
 8011960:	20005418 	.word	0x20005418
 8011964:	200053f8 	.word	0x200053f8
 8011968:	20005422 	.word	0x20005422
 801196c:	0801a1dc 	.word	0x0801a1dc
 8011970:	0801a584 	.word	0x0801a584
 8011974:	0801a228 	.word	0x0801a228

08011978 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801197e:	4b15      	ldr	r3, [pc, #84]	; (80119d4 <tcp_get_next_optbyte+0x5c>)
 8011980:	881b      	ldrh	r3, [r3, #0]
 8011982:	1c5a      	adds	r2, r3, #1
 8011984:	b291      	uxth	r1, r2
 8011986:	4a13      	ldr	r2, [pc, #76]	; (80119d4 <tcp_get_next_optbyte+0x5c>)
 8011988:	8011      	strh	r1, [r2, #0]
 801198a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801198c:	4b12      	ldr	r3, [pc, #72]	; (80119d8 <tcp_get_next_optbyte+0x60>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d004      	beq.n	801199e <tcp_get_next_optbyte+0x26>
 8011994:	4b11      	ldr	r3, [pc, #68]	; (80119dc <tcp_get_next_optbyte+0x64>)
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	88fa      	ldrh	r2, [r7, #6]
 801199a:	429a      	cmp	r2, r3
 801199c:	d208      	bcs.n	80119b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801199e:	4b10      	ldr	r3, [pc, #64]	; (80119e0 <tcp_get_next_optbyte+0x68>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3314      	adds	r3, #20
 80119a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119a6:	88fb      	ldrh	r3, [r7, #6]
 80119a8:	683a      	ldr	r2, [r7, #0]
 80119aa:	4413      	add	r3, r2
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	e00b      	b.n	80119c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119b0:	88fb      	ldrh	r3, [r7, #6]
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	4b09      	ldr	r3, [pc, #36]	; (80119dc <tcp_get_next_optbyte+0x64>)
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80119be:	4b06      	ldr	r3, [pc, #24]	; (80119d8 <tcp_get_next_optbyte+0x60>)
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	797b      	ldrb	r3, [r7, #5]
 80119c4:	4413      	add	r3, r2
 80119c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	20005414 	.word	0x20005414
 80119d8:	20005410 	.word	0x20005410
 80119dc:	2000540e 	.word	0x2000540e
 80119e0:	20005408 	.word	0x20005408

080119e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d106      	bne.n	8011a00 <tcp_parseopt+0x1c>
 80119f2:	4b32      	ldr	r3, [pc, #200]	; (8011abc <tcp_parseopt+0xd8>)
 80119f4:	f240 727d 	movw	r2, #1917	; 0x77d
 80119f8:	4931      	ldr	r1, [pc, #196]	; (8011ac0 <tcp_parseopt+0xdc>)
 80119fa:	4832      	ldr	r0, [pc, #200]	; (8011ac4 <tcp_parseopt+0xe0>)
 80119fc:	f005 f826 	bl	8016a4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a00:	4b31      	ldr	r3, [pc, #196]	; (8011ac8 <tcp_parseopt+0xe4>)
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d055      	beq.n	8011ab4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a08:	4b30      	ldr	r3, [pc, #192]	; (8011acc <tcp_parseopt+0xe8>)
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	801a      	strh	r2, [r3, #0]
 8011a0e:	e045      	b.n	8011a9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a10:	f7ff ffb2 	bl	8011978 <tcp_get_next_optbyte>
 8011a14:	4603      	mov	r3, r0
 8011a16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a18:	7bfb      	ldrb	r3, [r7, #15]
 8011a1a:	2b02      	cmp	r3, #2
 8011a1c:	d006      	beq.n	8011a2c <tcp_parseopt+0x48>
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	dc2b      	bgt.n	8011a7a <tcp_parseopt+0x96>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d041      	beq.n	8011aaa <tcp_parseopt+0xc6>
 8011a26:	2b01      	cmp	r3, #1
 8011a28:	d127      	bne.n	8011a7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011a2a:	e037      	b.n	8011a9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a2c:	f7ff ffa4 	bl	8011978 <tcp_get_next_optbyte>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b04      	cmp	r3, #4
 8011a34:	d13b      	bne.n	8011aae <tcp_parseopt+0xca>
 8011a36:	4b25      	ldr	r3, [pc, #148]	; (8011acc <tcp_parseopt+0xe8>)
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	4a22      	ldr	r2, [pc, #136]	; (8011ac8 <tcp_parseopt+0xe4>)
 8011a3e:	8812      	ldrh	r2, [r2, #0]
 8011a40:	4293      	cmp	r3, r2
 8011a42:	da34      	bge.n	8011aae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a44:	f7ff ff98 	bl	8011978 <tcp_get_next_optbyte>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	021b      	lsls	r3, r3, #8
 8011a4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a50:	f7ff ff92 	bl	8011978 <tcp_get_next_optbyte>
 8011a54:	4603      	mov	r3, r0
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	89bb      	ldrh	r3, [r7, #12]
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a5e:	89bb      	ldrh	r3, [r7, #12]
 8011a60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011a64:	d804      	bhi.n	8011a70 <tcp_parseopt+0x8c>
 8011a66:	89bb      	ldrh	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d001      	beq.n	8011a70 <tcp_parseopt+0x8c>
 8011a6c:	89ba      	ldrh	r2, [r7, #12]
 8011a6e:	e001      	b.n	8011a74 <tcp_parseopt+0x90>
 8011a70:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011a78:	e010      	b.n	8011a9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011a7a:	f7ff ff7d 	bl	8011978 <tcp_get_next_optbyte>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011a82:	7afb      	ldrb	r3, [r7, #11]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d914      	bls.n	8011ab2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011a88:	7afb      	ldrb	r3, [r7, #11]
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	4b0f      	ldr	r3, [pc, #60]	; (8011acc <tcp_parseopt+0xe8>)
 8011a8e:	881b      	ldrh	r3, [r3, #0]
 8011a90:	4413      	add	r3, r2
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	3b02      	subs	r3, #2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	4b0c      	ldr	r3, [pc, #48]	; (8011acc <tcp_parseopt+0xe8>)
 8011a9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a9c:	4b0b      	ldr	r3, [pc, #44]	; (8011acc <tcp_parseopt+0xe8>)
 8011a9e:	881a      	ldrh	r2, [r3, #0]
 8011aa0:	4b09      	ldr	r3, [pc, #36]	; (8011ac8 <tcp_parseopt+0xe4>)
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d3b3      	bcc.n	8011a10 <tcp_parseopt+0x2c>
 8011aa8:	e004      	b.n	8011ab4 <tcp_parseopt+0xd0>
          return;
 8011aaa:	bf00      	nop
 8011aac:	e002      	b.n	8011ab4 <tcp_parseopt+0xd0>
            return;
 8011aae:	bf00      	nop
 8011ab0:	e000      	b.n	8011ab4 <tcp_parseopt+0xd0>
            return;
 8011ab2:	bf00      	nop
      }
    }
  }
}
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801a1dc 	.word	0x0801a1dc
 8011ac0:	0801a640 	.word	0x0801a640
 8011ac4:	0801a228 	.word	0x0801a228
 8011ac8:	2000540c 	.word	0x2000540c
 8011acc:	20005414 	.word	0x20005414

08011ad0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011ad4:	4b05      	ldr	r3, [pc, #20]	; (8011aec <tcp_trigger_input_pcb_close+0x1c>)
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	f043 0310 	orr.w	r3, r3, #16
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	4b03      	ldr	r3, [pc, #12]	; (8011aec <tcp_trigger_input_pcb_close+0x1c>)
 8011ae0:	701a      	strb	r2, [r3, #0]
}
 8011ae2:	bf00      	nop
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr
 8011aec:	20005425 	.word	0x20005425

08011af0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00a      	beq.n	8011b18 <tcp_route+0x28>
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	7a1b      	ldrb	r3, [r3, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d006      	beq.n	8011b18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	7a1b      	ldrb	r3, [r3, #8]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7fb f87e 	bl	800cc10 <netif_get_by_index>
 8011b14:	4603      	mov	r3, r0
 8011b16:	e003      	b.n	8011b20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f003 fb05 	bl	8015128 <ip4_route>
 8011b1e:	4603      	mov	r3, r0
  }
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b28:	b590      	push	{r4, r7, lr}
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	603b      	str	r3, [r7, #0]
 8011b34:	4613      	mov	r3, r2
 8011b36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d105      	bne.n	8011b4a <tcp_create_segment+0x22>
 8011b3e:	4b44      	ldr	r3, [pc, #272]	; (8011c50 <tcp_create_segment+0x128>)
 8011b40:	22a3      	movs	r2, #163	; 0xa3
 8011b42:	4944      	ldr	r1, [pc, #272]	; (8011c54 <tcp_create_segment+0x12c>)
 8011b44:	4844      	ldr	r0, [pc, #272]	; (8011c58 <tcp_create_segment+0x130>)
 8011b46:	f004 ff81 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d105      	bne.n	8011b5c <tcp_create_segment+0x34>
 8011b50:	4b3f      	ldr	r3, [pc, #252]	; (8011c50 <tcp_create_segment+0x128>)
 8011b52:	22a4      	movs	r2, #164	; 0xa4
 8011b54:	4941      	ldr	r1, [pc, #260]	; (8011c5c <tcp_create_segment+0x134>)
 8011b56:	4840      	ldr	r0, [pc, #256]	; (8011c58 <tcp_create_segment+0x130>)
 8011b58:	f004 ff78 	bl	8016a4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	f003 0304 	and.w	r3, r3, #4
 8011b68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011b6a:	2003      	movs	r0, #3
 8011b6c:	f7fa fce8 	bl	800c540 <memp_malloc>
 8011b70:	6138      	str	r0, [r7, #16]
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d104      	bne.n	8011b82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011b78:	68b8      	ldr	r0, [r7, #8]
 8011b7a:	f7fb fbd7 	bl	800d32c <pbuf_free>
    return NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	e061      	b.n	8011c46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011b90:	693b      	ldr	r3, [r7, #16]
 8011b92:	68ba      	ldr	r2, [r7, #8]
 8011b94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	891a      	ldrh	r2, [r3, #8]
 8011b9a:	7dfb      	ldrb	r3, [r7, #23]
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d205      	bcs.n	8011bae <tcp_create_segment+0x86>
 8011ba2:	4b2b      	ldr	r3, [pc, #172]	; (8011c50 <tcp_create_segment+0x128>)
 8011ba4:	22b0      	movs	r2, #176	; 0xb0
 8011ba6:	492e      	ldr	r1, [pc, #184]	; (8011c60 <tcp_create_segment+0x138>)
 8011ba8:	482b      	ldr	r0, [pc, #172]	; (8011c58 <tcp_create_segment+0x130>)
 8011baa:	f004 ff4f 	bl	8016a4c <iprintf>
  seg->len = p->tot_len - optlen;
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	891a      	ldrh	r2, [r3, #8]
 8011bb2:	7dfb      	ldrb	r3, [r7, #23]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011bbe:	2114      	movs	r1, #20
 8011bc0:	68b8      	ldr	r0, [r7, #8]
 8011bc2:	f7fb fb1d 	bl	800d200 <pbuf_add_header>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d004      	beq.n	8011bd6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011bcc:	6938      	ldr	r0, [r7, #16]
 8011bce:	f7fc ffe6 	bl	800eb9e <tcp_seg_free>
    return NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	e037      	b.n	8011c46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	685a      	ldr	r2, [r3, #4]
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	8ada      	ldrh	r2, [r3, #22]
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	68dc      	ldr	r4, [r3, #12]
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7f9 ff15 	bl	800ba18 <lwip_htons>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	8b1a      	ldrh	r2, [r3, #24]
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	68dc      	ldr	r4, [r3, #12]
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	f7f9 ff0c 	bl	800ba18 <lwip_htons>
 8011c00:	4603      	mov	r3, r0
 8011c02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	68dc      	ldr	r4, [r3, #12]
 8011c08:	6838      	ldr	r0, [r7, #0]
 8011c0a:	f7f9 ff1a 	bl	800ba42 <lwip_htonl>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	089b      	lsrs	r3, r3, #2
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	3305      	adds	r3, #5
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	031b      	lsls	r3, r3, #12
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	79fb      	ldrb	r3, [r7, #7]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	4313      	orrs	r3, r2
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	68dc      	ldr	r4, [r3, #12]
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7f9 fef2 	bl	800ba18 <lwip_htons>
 8011c34:	4603      	mov	r3, r0
 8011c36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	749a      	strb	r2, [r3, #18]
 8011c40:	2200      	movs	r2, #0
 8011c42:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c44:	693b      	ldr	r3, [r7, #16]
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	371c      	adds	r7, #28
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd90      	pop	{r4, r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	0801a65c 	.word	0x0801a65c
 8011c54:	0801a690 	.word	0x0801a690
 8011c58:	0801a6b0 	.word	0x0801a6b0
 8011c5c:	0801a6d8 	.word	0x0801a6d8
 8011c60:	0801a6fc 	.word	0x0801a6fc

08011c64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	607b      	str	r3, [r7, #4]
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73fb      	strb	r3, [r7, #15]
 8011c70:	460b      	mov	r3, r1
 8011c72:	81bb      	strh	r3, [r7, #12]
 8011c74:	4613      	mov	r3, r2
 8011c76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011c78:	89bb      	ldrh	r3, [r7, #12]
 8011c7a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <tcp_pbuf_prealloc+0x2a>
 8011c82:	4b30      	ldr	r3, [pc, #192]	; (8011d44 <tcp_pbuf_prealloc+0xe0>)
 8011c84:	22e8      	movs	r2, #232	; 0xe8
 8011c86:	4930      	ldr	r1, [pc, #192]	; (8011d48 <tcp_pbuf_prealloc+0xe4>)
 8011c88:	4830      	ldr	r0, [pc, #192]	; (8011d4c <tcp_pbuf_prealloc+0xe8>)
 8011c8a:	f004 fedf 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011c8e:	6a3b      	ldr	r3, [r7, #32]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d105      	bne.n	8011ca0 <tcp_pbuf_prealloc+0x3c>
 8011c94:	4b2b      	ldr	r3, [pc, #172]	; (8011d44 <tcp_pbuf_prealloc+0xe0>)
 8011c96:	22e9      	movs	r2, #233	; 0xe9
 8011c98:	492d      	ldr	r1, [pc, #180]	; (8011d50 <tcp_pbuf_prealloc+0xec>)
 8011c9a:	482c      	ldr	r0, [pc, #176]	; (8011d4c <tcp_pbuf_prealloc+0xe8>)
 8011c9c:	f004 fed6 	bl	8016a4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011ca0:	89ba      	ldrh	r2, [r7, #12]
 8011ca2:	897b      	ldrh	r3, [r7, #10]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d221      	bcs.n	8011cec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ca8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cac:	f003 0302 	and.w	r3, r3, #2
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d111      	bne.n	8011cd8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	8b5b      	ldrh	r3, [r3, #26]
 8011cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d115      	bne.n	8011cec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011cc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d007      	beq.n	8011cd8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d103      	bne.n	8011cd8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011cd0:	6a3b      	ldr	r3, [r7, #32]
 8011cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d009      	beq.n	8011cec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011cd8:	89bb      	ldrh	r3, [r7, #12]
 8011cda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011cde:	f023 0203 	bic.w	r2, r3, #3
 8011ce2:	897b      	ldrh	r3, [r7, #10]
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	bf28      	it	cs
 8011ce8:	4613      	movcs	r3, r2
 8011cea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011cec:	8af9      	ldrh	r1, [r7, #22]
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
 8011cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fb f835 	bl	800cd64 <pbuf_alloc>
 8011cfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d101      	bne.n	8011d06 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d02:	2300      	movs	r3, #0
 8011d04:	e019      	b.n	8011d3a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d006      	beq.n	8011d1c <tcp_pbuf_prealloc+0xb8>
 8011d0e:	4b0d      	ldr	r3, [pc, #52]	; (8011d44 <tcp_pbuf_prealloc+0xe0>)
 8011d10:	f240 120b 	movw	r2, #267	; 0x10b
 8011d14:	490f      	ldr	r1, [pc, #60]	; (8011d54 <tcp_pbuf_prealloc+0xf0>)
 8011d16:	480d      	ldr	r0, [pc, #52]	; (8011d4c <tcp_pbuf_prealloc+0xe8>)
 8011d18:	f004 fe98 	bl	8016a4c <iprintf>
  *oversize = p->len - length;
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	895a      	ldrh	r2, [r3, #10]
 8011d20:	89bb      	ldrh	r3, [r7, #12]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	b29a      	uxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	89ba      	ldrh	r2, [r7, #12]
 8011d2e:	811a      	strh	r2, [r3, #8]
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	891a      	ldrh	r2, [r3, #8]
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	815a      	strh	r2, [r3, #10]
  return p;
 8011d38:	693b      	ldr	r3, [r7, #16]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3718      	adds	r7, #24
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	0801a65c 	.word	0x0801a65c
 8011d48:	0801a714 	.word	0x0801a714
 8011d4c:	0801a6b0 	.word	0x0801a6b0
 8011d50:	0801a738 	.word	0x0801a738
 8011d54:	0801a758 	.word	0x0801a758

08011d58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	460b      	mov	r3, r1
 8011d62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <tcp_write_checks+0x20>
 8011d6a:	4b33      	ldr	r3, [pc, #204]	; (8011e38 <tcp_write_checks+0xe0>)
 8011d6c:	f240 1233 	movw	r2, #307	; 0x133
 8011d70:	4932      	ldr	r1, [pc, #200]	; (8011e3c <tcp_write_checks+0xe4>)
 8011d72:	4833      	ldr	r0, [pc, #204]	; (8011e40 <tcp_write_checks+0xe8>)
 8011d74:	f004 fe6a 	bl	8016a4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	7d1b      	ldrb	r3, [r3, #20]
 8011d7c:	2b04      	cmp	r3, #4
 8011d7e:	d00e      	beq.n	8011d9e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011d84:	2b07      	cmp	r3, #7
 8011d86:	d00a      	beq.n	8011d9e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011d8c:	2b02      	cmp	r3, #2
 8011d8e:	d006      	beq.n	8011d9e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011d94:	2b03      	cmp	r3, #3
 8011d96:	d002      	beq.n	8011d9e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011d98:	f06f 030a 	mvn.w	r3, #10
 8011d9c:	e048      	b.n	8011e30 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011d9e:	887b      	ldrh	r3, [r7, #2]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d101      	bne.n	8011da8 <tcp_write_checks+0x50>
    return ERR_OK;
 8011da4:	2300      	movs	r3, #0
 8011da6:	e043      	b.n	8011e30 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011dae:	887a      	ldrh	r2, [r7, #2]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d909      	bls.n	8011dc8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	8b5b      	ldrh	r3, [r3, #26]
 8011db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011dc6:	e033      	b.n	8011e30 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dce:	2b08      	cmp	r3, #8
 8011dd0:	d909      	bls.n	8011de6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	8b5b      	ldrh	r3, [r3, #26]
 8011dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011de4:	e024      	b.n	8011e30 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00f      	beq.n	8011e10 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d11a      	bne.n	8011e2e <tcp_write_checks+0xd6>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d116      	bne.n	8011e2e <tcp_write_checks+0xd6>
 8011e00:	4b0d      	ldr	r3, [pc, #52]	; (8011e38 <tcp_write_checks+0xe0>)
 8011e02:	f240 1255 	movw	r2, #341	; 0x155
 8011e06:	490f      	ldr	r1, [pc, #60]	; (8011e44 <tcp_write_checks+0xec>)
 8011e08:	480d      	ldr	r0, [pc, #52]	; (8011e40 <tcp_write_checks+0xe8>)
 8011e0a:	f004 fe1f 	bl	8016a4c <iprintf>
 8011e0e:	e00e      	b.n	8011e2e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d103      	bne.n	8011e20 <tcp_write_checks+0xc8>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d006      	beq.n	8011e2e <tcp_write_checks+0xd6>
 8011e20:	4b05      	ldr	r3, [pc, #20]	; (8011e38 <tcp_write_checks+0xe0>)
 8011e22:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011e26:	4908      	ldr	r1, [pc, #32]	; (8011e48 <tcp_write_checks+0xf0>)
 8011e28:	4805      	ldr	r0, [pc, #20]	; (8011e40 <tcp_write_checks+0xe8>)
 8011e2a:	f004 fe0f 	bl	8016a4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e2e:	2300      	movs	r3, #0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	0801a65c 	.word	0x0801a65c
 8011e3c:	0801a76c 	.word	0x0801a76c
 8011e40:	0801a6b0 	.word	0x0801a6b0
 8011e44:	0801a78c 	.word	0x0801a78c
 8011e48:	0801a7c8 	.word	0x0801a7c8

08011e4c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e4c:	b590      	push	{r4, r7, lr}
 8011e4e:	b09b      	sub	sp, #108	; 0x6c
 8011e50:	af04      	add	r7, sp, #16
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	4611      	mov	r1, r2
 8011e58:	461a      	mov	r2, r3
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	80fb      	strh	r3, [r7, #6]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	653b      	str	r3, [r7, #80]	; 0x50
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e6e:	2300      	movs	r3, #0
 8011e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e72:	2300      	movs	r3, #0
 8011e74:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011e76:	2300      	movs	r3, #0
 8011e78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d109      	bne.n	8011ea8 <tcp_write+0x5c>
 8011e94:	4ba4      	ldr	r3, [pc, #656]	; (8012128 <tcp_write+0x2dc>)
 8011e96:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011e9a:	49a4      	ldr	r1, [pc, #656]	; (801212c <tcp_write+0x2e0>)
 8011e9c:	48a4      	ldr	r0, [pc, #656]	; (8012130 <tcp_write+0x2e4>)
 8011e9e:	f004 fdd5 	bl	8016a4c <iprintf>
 8011ea2:	f06f 030f 	mvn.w	r3, #15
 8011ea6:	e32a      	b.n	80124fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011eae:	085b      	lsrs	r3, r3, #1
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	bf28      	it	cs
 8011eba:	4613      	movcs	r3, r2
 8011ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d102      	bne.n	8011eca <tcp_write+0x7e>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec8:	e000      	b.n	8011ecc <tcp_write+0x80>
 8011eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ecc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d109      	bne.n	8011ee8 <tcp_write+0x9c>
 8011ed4:	4b94      	ldr	r3, [pc, #592]	; (8012128 <tcp_write+0x2dc>)
 8011ed6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011eda:	4996      	ldr	r1, [pc, #600]	; (8012134 <tcp_write+0x2e8>)
 8011edc:	4894      	ldr	r0, [pc, #592]	; (8012130 <tcp_write+0x2e4>)
 8011ede:	f004 fdb5 	bl	8016a4c <iprintf>
 8011ee2:	f06f 030f 	mvn.w	r3, #15
 8011ee6:	e30a      	b.n	80124fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011ee8:	88fb      	ldrh	r3, [r7, #6]
 8011eea:	4619      	mov	r1, r3
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f7ff ff33 	bl	8011d58 <tcp_write_checks>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011ef8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d002      	beq.n	8011f06 <tcp_write+0xba>
    return err;
 8011f00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f04:	e2fb      	b.n	80124fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f10:	2300      	movs	r3, #0
 8011f12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	f000 80f6 	beq.w	801210c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f24:	653b      	str	r3, [r7, #80]	; 0x50
 8011f26:	e002      	b.n	8011f2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1f8      	bne.n	8011f28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f38:	7a9b      	ldrb	r3, [r3, #10]
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	f003 0304 	and.w	r3, r3, #4
 8011f42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f48:	891b      	ldrh	r3, [r3, #8]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	8c3b      	ldrh	r3, [r7, #32]
 8011f4e:	440b      	add	r3, r1
 8011f50:	429a      	cmp	r2, r3
 8011f52:	da06      	bge.n	8011f62 <tcp_write+0x116>
 8011f54:	4b74      	ldr	r3, [pc, #464]	; (8012128 <tcp_write+0x2dc>)
 8011f56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011f5a:	4977      	ldr	r1, [pc, #476]	; (8012138 <tcp_write+0x2ec>)
 8011f5c:	4874      	ldr	r0, [pc, #464]	; (8012130 <tcp_write+0x2e4>)
 8011f5e:	f004 fd75 	bl	8016a4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f64:	891a      	ldrh	r2, [r3, #8]
 8011f66:	8c3b      	ldrh	r3, [r7, #32]
 8011f68:	4413      	add	r3, r2
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f6e:	1ad3      	subs	r3, r2, r3
 8011f70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011f7a:	8a7b      	ldrh	r3, [r7, #18]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d026      	beq.n	8011fce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011f80:	8a7b      	ldrh	r3, [r7, #18]
 8011f82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d206      	bcs.n	8011f96 <tcp_write+0x14a>
 8011f88:	4b67      	ldr	r3, [pc, #412]	; (8012128 <tcp_write+0x2dc>)
 8011f8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011f8e:	496b      	ldr	r1, [pc, #428]	; (801213c <tcp_write+0x2f0>)
 8011f90:	4867      	ldr	r0, [pc, #412]	; (8012130 <tcp_write+0x2e4>)
 8011f92:	f004 fd5b 	bl	8016a4c <iprintf>
      seg = last_unsent;
 8011f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011f9a:	8a7b      	ldrh	r3, [r7, #18]
 8011f9c:	88fa      	ldrh	r2, [r7, #6]
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	bf28      	it	cs
 8011fa2:	4613      	movcs	r3, r2
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	bf28      	it	cs
 8011fac:	4613      	movcs	r3, r2
 8011fae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011fb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fb6:	4413      	add	r3, r2
 8011fb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011fbc:	8a7a      	ldrh	r2, [r7, #18]
 8011fbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011fc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011fce:	8a7b      	ldrh	r3, [r7, #18]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00b      	beq.n	8011fec <tcp_write+0x1a0>
 8011fd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fd8:	88fb      	ldrh	r3, [r7, #6]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d006      	beq.n	8011fec <tcp_write+0x1a0>
 8011fde:	4b52      	ldr	r3, [pc, #328]	; (8012128 <tcp_write+0x2dc>)
 8011fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fe4:	4956      	ldr	r1, [pc, #344]	; (8012140 <tcp_write+0x2f4>)
 8011fe6:	4852      	ldr	r0, [pc, #328]	; (8012130 <tcp_write+0x2e4>)
 8011fe8:	f004 fd30 	bl	8016a4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011fec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ff0:	88fb      	ldrh	r3, [r7, #6]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	f080 8167 	bcs.w	80122c6 <tcp_write+0x47a>
 8011ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	f000 8163 	beq.w	80122c6 <tcp_write+0x47a>
 8012000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012002:	891b      	ldrh	r3, [r3, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	f000 815e 	beq.w	80122c6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801200a:	88fa      	ldrh	r2, [r7, #6]
 801200c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012010:	1ad2      	subs	r2, r2, r3
 8012012:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012014:	4293      	cmp	r3, r2
 8012016:	bfa8      	it	ge
 8012018:	4613      	movge	r3, r2
 801201a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801201c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801201e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012020:	797b      	ldrb	r3, [r7, #5]
 8012022:	f003 0301 	and.w	r3, r3, #1
 8012026:	2b00      	cmp	r3, #0
 8012028:	d027      	beq.n	801207a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801202a:	f107 0012 	add.w	r0, r7, #18
 801202e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012030:	8bf9      	ldrh	r1, [r7, #30]
 8012032:	2301      	movs	r3, #1
 8012034:	9302      	str	r3, [sp, #8]
 8012036:	797b      	ldrb	r3, [r7, #5]
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	4603      	mov	r3, r0
 8012040:	2000      	movs	r0, #0
 8012042:	f7ff fe0f 	bl	8011c64 <tcp_pbuf_prealloc>
 8012046:	6578      	str	r0, [r7, #84]	; 0x54
 8012048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 8225 	beq.w	801249a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012052:	6858      	ldr	r0, [r3, #4]
 8012054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012058:	68ba      	ldr	r2, [r7, #8]
 801205a:	4413      	add	r3, r2
 801205c:	8bfa      	ldrh	r2, [r7, #30]
 801205e:	4619      	mov	r1, r3
 8012060:	f004 fc69 	bl	8016936 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012064:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012066:	f7fb f9ef 	bl	800d448 <pbuf_clen>
 801206a:	4603      	mov	r3, r0
 801206c:	461a      	mov	r2, r3
 801206e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012072:	4413      	add	r3, r2
 8012074:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012078:	e041      	b.n	80120fe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801207a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	637b      	str	r3, [r7, #52]	; 0x34
 8012080:	e002      	b.n	8012088 <tcp_write+0x23c>
 8012082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	637b      	str	r3, [r7, #52]	; 0x34
 8012088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1f8      	bne.n	8012082 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012092:	7b1b      	ldrb	r3, [r3, #12]
 8012094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d115      	bne.n	80120c8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120a2:	8952      	ldrh	r2, [r2, #10]
 80120a4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d10d      	bne.n	80120c8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80120ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d006      	beq.n	80120c2 <tcp_write+0x276>
 80120b4:	4b1c      	ldr	r3, [pc, #112]	; (8012128 <tcp_write+0x2dc>)
 80120b6:	f240 2231 	movw	r2, #561	; 0x231
 80120ba:	4922      	ldr	r1, [pc, #136]	; (8012144 <tcp_write+0x2f8>)
 80120bc:	481c      	ldr	r0, [pc, #112]	; (8012130 <tcp_write+0x2e4>)
 80120be:	f004 fcc5 	bl	8016a4c <iprintf>
          extendlen = seglen;
 80120c2:	8bfb      	ldrh	r3, [r7, #30]
 80120c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80120c6:	e01a      	b.n	80120fe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80120c8:	8bfb      	ldrh	r3, [r7, #30]
 80120ca:	2201      	movs	r2, #1
 80120cc:	4619      	mov	r1, r3
 80120ce:	2000      	movs	r0, #0
 80120d0:	f7fa fe48 	bl	800cd64 <pbuf_alloc>
 80120d4:	6578      	str	r0, [r7, #84]	; 0x54
 80120d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120d8:	2b00      	cmp	r3, #0
 80120da:	f000 81e0 	beq.w	801249e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80120de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	441a      	add	r2, r3
 80120e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120e8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80120ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120ec:	f7fb f9ac 	bl	800d448 <pbuf_clen>
 80120f0:	4603      	mov	r3, r0
 80120f2:	461a      	mov	r2, r3
 80120f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120f8:	4413      	add	r3, r2
 80120fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80120fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012102:	8bfb      	ldrh	r3, [r7, #30]
 8012104:	4413      	add	r3, r2
 8012106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801210a:	e0dc      	b.n	80122c6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 80d7 	beq.w	80122c6 <tcp_write+0x47a>
 8012118:	4b03      	ldr	r3, [pc, #12]	; (8012128 <tcp_write+0x2dc>)
 801211a:	f240 224a 	movw	r2, #586	; 0x24a
 801211e:	490a      	ldr	r1, [pc, #40]	; (8012148 <tcp_write+0x2fc>)
 8012120:	4803      	ldr	r0, [pc, #12]	; (8012130 <tcp_write+0x2e4>)
 8012122:	f004 fc93 	bl	8016a4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012126:	e0ce      	b.n	80122c6 <tcp_write+0x47a>
 8012128:	0801a65c 	.word	0x0801a65c
 801212c:	0801a7fc 	.word	0x0801a7fc
 8012130:	0801a6b0 	.word	0x0801a6b0
 8012134:	0801a814 	.word	0x0801a814
 8012138:	0801a848 	.word	0x0801a848
 801213c:	0801a860 	.word	0x0801a860
 8012140:	0801a880 	.word	0x0801a880
 8012144:	0801a8a0 	.word	0x0801a8a0
 8012148:	0801a8cc 	.word	0x0801a8cc
    struct pbuf *p;
    u16_t left = len - pos;
 801214c:	88fa      	ldrh	r2, [r7, #6]
 801214e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012156:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801215a:	b29b      	uxth	r3, r3
 801215c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012162:	8b7a      	ldrh	r2, [r7, #26]
 8012164:	8bbb      	ldrh	r3, [r7, #28]
 8012166:	4293      	cmp	r3, r2
 8012168:	bf28      	it	cs
 801216a:	4613      	movcs	r3, r2
 801216c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801216e:	797b      	ldrb	r3, [r7, #5]
 8012170:	f003 0301 	and.w	r3, r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	d036      	beq.n	80121e6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801217c:	b29a      	uxth	r2, r3
 801217e:	8b3b      	ldrh	r3, [r7, #24]
 8012180:	4413      	add	r3, r2
 8012182:	b299      	uxth	r1, r3
 8012184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012186:	2b00      	cmp	r3, #0
 8012188:	bf0c      	ite	eq
 801218a:	2301      	moveq	r3, #1
 801218c:	2300      	movne	r3, #0
 801218e:	b2db      	uxtb	r3, r3
 8012190:	f107 0012 	add.w	r0, r7, #18
 8012194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012196:	9302      	str	r3, [sp, #8]
 8012198:	797b      	ldrb	r3, [r7, #5]
 801219a:	9301      	str	r3, [sp, #4]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	4603      	mov	r3, r0
 80121a2:	2036      	movs	r0, #54	; 0x36
 80121a4:	f7ff fd5e 	bl	8011c64 <tcp_pbuf_prealloc>
 80121a8:	6338      	str	r0, [r7, #48]	; 0x30
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f000 8178 	beq.w	80124a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80121b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b4:	895b      	ldrh	r3, [r3, #10]
 80121b6:	8b3a      	ldrh	r2, [r7, #24]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d906      	bls.n	80121ca <tcp_write+0x37e>
 80121bc:	4b8c      	ldr	r3, [pc, #560]	; (80123f0 <tcp_write+0x5a4>)
 80121be:	f240 2266 	movw	r2, #614	; 0x266
 80121c2:	498c      	ldr	r1, [pc, #560]	; (80123f4 <tcp_write+0x5a8>)
 80121c4:	488c      	ldr	r0, [pc, #560]	; (80123f8 <tcp_write+0x5ac>)
 80121c6:	f004 fc41 	bl	8016a4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80121ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121d2:	18d0      	adds	r0, r2, r3
 80121d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121d8:	68ba      	ldr	r2, [r7, #8]
 80121da:	4413      	add	r3, r2
 80121dc:	8b3a      	ldrh	r2, [r7, #24]
 80121de:	4619      	mov	r1, r3
 80121e0:	f004 fba9 	bl	8016936 <memcpy>
 80121e4:	e02f      	b.n	8012246 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80121e6:	8a7b      	ldrh	r3, [r7, #18]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d006      	beq.n	80121fa <tcp_write+0x3ae>
 80121ec:	4b80      	ldr	r3, [pc, #512]	; (80123f0 <tcp_write+0x5a4>)
 80121ee:	f240 2271 	movw	r2, #625	; 0x271
 80121f2:	4982      	ldr	r1, [pc, #520]	; (80123fc <tcp_write+0x5b0>)
 80121f4:	4880      	ldr	r0, [pc, #512]	; (80123f8 <tcp_write+0x5ac>)
 80121f6:	f004 fc29 	bl	8016a4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80121fa:	8b3b      	ldrh	r3, [r7, #24]
 80121fc:	2201      	movs	r2, #1
 80121fe:	4619      	mov	r1, r3
 8012200:	2036      	movs	r0, #54	; 0x36
 8012202:	f7fa fdaf 	bl	800cd64 <pbuf_alloc>
 8012206:	6178      	str	r0, [r7, #20]
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2b00      	cmp	r3, #0
 801220c:	f000 814b 	beq.w	80124a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	441a      	add	r2, r3
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801221c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012220:	b29b      	uxth	r3, r3
 8012222:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012226:	4619      	mov	r1, r3
 8012228:	2036      	movs	r0, #54	; 0x36
 801222a:	f7fa fd9b 	bl	800cd64 <pbuf_alloc>
 801222e:	6338      	str	r0, [r7, #48]	; 0x30
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	2b00      	cmp	r3, #0
 8012234:	d103      	bne.n	801223e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012236:	6978      	ldr	r0, [r7, #20]
 8012238:	f7fb f878 	bl	800d32c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801223c:	e136      	b.n	80124ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801223e:	6979      	ldr	r1, [r7, #20]
 8012240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012242:	f7fb f941 	bl	800d4c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012248:	f7fb f8fe 	bl	800d448 <pbuf_clen>
 801224c:	4603      	mov	r3, r0
 801224e:	461a      	mov	r2, r3
 8012250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012254:	4413      	add	r3, r2
 8012256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801225a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801225e:	2b09      	cmp	r3, #9
 8012260:	d903      	bls.n	801226a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012264:	f7fb f862 	bl	800d32c <pbuf_free>
      goto memerr;
 8012268:	e120      	b.n	80124ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801226e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012272:	441a      	add	r2, r3
 8012274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	4613      	mov	r3, r2
 801227c:	2200      	movs	r2, #0
 801227e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	f7ff fc51 	bl	8011b28 <tcp_create_segment>
 8012286:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801228a:	2b00      	cmp	r3, #0
 801228c:	f000 810d 	beq.w	80124aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012292:	2b00      	cmp	r3, #0
 8012294:	d102      	bne.n	801229c <tcp_write+0x450>
      queue = seg;
 8012296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012298:	647b      	str	r3, [r7, #68]	; 0x44
 801229a:	e00c      	b.n	80122b6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <tcp_write+0x464>
 80122a2:	4b53      	ldr	r3, [pc, #332]	; (80123f0 <tcp_write+0x5a4>)
 80122a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80122a8:	4955      	ldr	r1, [pc, #340]	; (8012400 <tcp_write+0x5b4>)
 80122aa:	4853      	ldr	r0, [pc, #332]	; (80123f8 <tcp_write+0x5ac>)
 80122ac:	f004 fbce 	bl	8016a4c <iprintf>
      prev_seg->next = seg;
 80122b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122b4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80122b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122b8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80122ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122be:	8b3b      	ldrh	r3, [r7, #24]
 80122c0:	4413      	add	r3, r2
 80122c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80122c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122ca:	88fb      	ldrh	r3, [r7, #6]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	f4ff af3d 	bcc.w	801214c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80122d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d02c      	beq.n	8012332 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80122d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122de:	e01e      	b.n	801231e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80122e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e2:	891a      	ldrh	r2, [r3, #8]
 80122e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122e6:	4413      	add	r3, r2
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80122ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d110      	bne.n	8012318 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80122f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122fc:	8952      	ldrh	r2, [r2, #10]
 80122fe:	4413      	add	r3, r2
 8012300:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	4618      	mov	r0, r3
 8012306:	f004 fb16 	bl	8016936 <memcpy>
        p->len += oversize_used;
 801230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230c:	895a      	ldrh	r2, [r3, #10]
 801230e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012310:	4413      	add	r3, r2
 8012312:	b29a      	uxth	r2, r3
 8012314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012316:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1dd      	bne.n	80122e0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012326:	891a      	ldrh	r2, [r3, #8]
 8012328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801232a:	4413      	add	r3, r2
 801232c:	b29a      	uxth	r2, r3
 801232e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012330:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012332:	8a7a      	ldrh	r2, [r7, #18]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801233c:	2b00      	cmp	r3, #0
 801233e:	d018      	beq.n	8012372 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012342:	2b00      	cmp	r3, #0
 8012344:	d106      	bne.n	8012354 <tcp_write+0x508>
 8012346:	4b2a      	ldr	r3, [pc, #168]	; (80123f0 <tcp_write+0x5a4>)
 8012348:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801234c:	492d      	ldr	r1, [pc, #180]	; (8012404 <tcp_write+0x5b8>)
 801234e:	482a      	ldr	r0, [pc, #168]	; (80123f8 <tcp_write+0x5ac>)
 8012350:	f004 fb7c 	bl	8016a4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801235a:	4618      	mov	r0, r3
 801235c:	f7fb f8b4 	bl	800d4c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012362:	891a      	ldrh	r2, [r3, #8]
 8012364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012366:	891b      	ldrh	r3, [r3, #8]
 8012368:	4413      	add	r3, r2
 801236a:	b29a      	uxth	r2, r3
 801236c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801236e:	811a      	strh	r2, [r3, #8]
 8012370:	e037      	b.n	80123e2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012374:	2b00      	cmp	r3, #0
 8012376:	d034      	beq.n	80123e2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801237a:	2b00      	cmp	r3, #0
 801237c:	d003      	beq.n	8012386 <tcp_write+0x53a>
 801237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d106      	bne.n	8012394 <tcp_write+0x548>
 8012386:	4b1a      	ldr	r3, [pc, #104]	; (80123f0 <tcp_write+0x5a4>)
 8012388:	f240 22e6 	movw	r2, #742	; 0x2e6
 801238c:	491e      	ldr	r1, [pc, #120]	; (8012408 <tcp_write+0x5bc>)
 801238e:	481a      	ldr	r0, [pc, #104]	; (80123f8 <tcp_write+0x5ac>)
 8012390:	f004 fb5c 	bl	8016a4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	62bb      	str	r3, [r7, #40]	; 0x28
 801239a:	e009      	b.n	80123b0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239e:	891a      	ldrh	r2, [r3, #8]
 80123a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123a2:	4413      	add	r3, r2
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80123b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d1f1      	bne.n	801239c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80123b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ba:	891a      	ldrh	r2, [r3, #8]
 80123bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123be:	4413      	add	r3, r2
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80123c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c8:	895a      	ldrh	r2, [r3, #10]
 80123ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123cc:	4413      	add	r3, r2
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80123d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d6:	891a      	ldrh	r2, [r3, #8]
 80123d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123da:	4413      	add	r3, r2
 80123dc:	b29a      	uxth	r2, r3
 80123de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80123e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d111      	bne.n	801240c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80123ee:	e010      	b.n	8012412 <tcp_write+0x5c6>
 80123f0:	0801a65c 	.word	0x0801a65c
 80123f4:	0801a8fc 	.word	0x0801a8fc
 80123f8:	0801a6b0 	.word	0x0801a6b0
 80123fc:	0801a93c 	.word	0x0801a93c
 8012400:	0801a94c 	.word	0x0801a94c
 8012404:	0801a960 	.word	0x0801a960
 8012408:	0801a998 	.word	0x0801a998
  } else {
    last_unsent->next = queue;
 801240c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012410:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012416:	88fb      	ldrh	r3, [r7, #6]
 8012418:	441a      	add	r2, r3
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012424:	88fb      	ldrh	r3, [r7, #6]
 8012426:	1ad3      	subs	r3, r2, r3
 8012428:	b29a      	uxth	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012436:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00e      	beq.n	8012462 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10a      	bne.n	8012462 <tcp_write+0x616>
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <tcp_write+0x616>
 8012454:	4b2c      	ldr	r3, [pc, #176]	; (8012508 <tcp_write+0x6bc>)
 8012456:	f240 3212 	movw	r2, #786	; 0x312
 801245a:	492c      	ldr	r1, [pc, #176]	; (801250c <tcp_write+0x6c0>)
 801245c:	482c      	ldr	r0, [pc, #176]	; (8012510 <tcp_write+0x6c4>)
 801245e:	f004 faf5 	bl	8016a4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012464:	2b00      	cmp	r3, #0
 8012466:	d016      	beq.n	8012496 <tcp_write+0x64a>
 8012468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d012      	beq.n	8012496 <tcp_write+0x64a>
 8012470:	797b      	ldrb	r3, [r7, #5]
 8012472:	f003 0302 	and.w	r3, r3, #2
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10d      	bne.n	8012496 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801247a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	899b      	ldrh	r3, [r3, #12]
 8012480:	b29c      	uxth	r4, r3
 8012482:	2008      	movs	r0, #8
 8012484:	f7f9 fac8 	bl	800ba18 <lwip_htons>
 8012488:	4603      	mov	r3, r0
 801248a:	461a      	mov	r2, r3
 801248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	4322      	orrs	r2, r4
 8012492:	b292      	uxth	r2, r2
 8012494:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012496:	2300      	movs	r3, #0
 8012498:	e031      	b.n	80124fe <tcp_write+0x6b2>
          goto memerr;
 801249a:	bf00      	nop
 801249c:	e006      	b.n	80124ac <tcp_write+0x660>
            goto memerr;
 801249e:	bf00      	nop
 80124a0:	e004      	b.n	80124ac <tcp_write+0x660>
        goto memerr;
 80124a2:	bf00      	nop
 80124a4:	e002      	b.n	80124ac <tcp_write+0x660>
        goto memerr;
 80124a6:	bf00      	nop
 80124a8:	e000      	b.n	80124ac <tcp_write+0x660>
      goto memerr;
 80124aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	8b5b      	ldrh	r3, [r3, #26]
 80124b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80124ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80124c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80124c2:	f7fa ff33 	bl	800d32c <pbuf_free>
  }
  if (queue != NULL) {
 80124c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80124cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80124ce:	f7fc fb51 	bl	800eb74 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00e      	beq.n	80124fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10a      	bne.n	80124fa <tcp_write+0x6ae>
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <tcp_write+0x6ae>
 80124ec:	4b06      	ldr	r3, [pc, #24]	; (8012508 <tcp_write+0x6bc>)
 80124ee:	f240 3227 	movw	r2, #807	; 0x327
 80124f2:	4906      	ldr	r1, [pc, #24]	; (801250c <tcp_write+0x6c0>)
 80124f4:	4806      	ldr	r0, [pc, #24]	; (8012510 <tcp_write+0x6c4>)
 80124f6:	f004 faa9 	bl	8016a4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80124fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80124fe:	4618      	mov	r0, r3
 8012500:	375c      	adds	r7, #92	; 0x5c
 8012502:	46bd      	mov	sp, r7
 8012504:	bd90      	pop	{r4, r7, pc}
 8012506:	bf00      	nop
 8012508:	0801a65c 	.word	0x0801a65c
 801250c:	0801a9d0 	.word	0x0801a9d0
 8012510:	0801a6b0 	.word	0x0801a6b0

08012514 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012514:	b590      	push	{r4, r7, lr}
 8012516:	b08b      	sub	sp, #44	; 0x2c
 8012518:	af02      	add	r7, sp, #8
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	460b      	mov	r3, r1
 801251e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012520:	2300      	movs	r3, #0
 8012522:	61fb      	str	r3, [r7, #28]
 8012524:	2300      	movs	r3, #0
 8012526:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012528:	2300      	movs	r3, #0
 801252a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d106      	bne.n	8012540 <tcp_split_unsent_seg+0x2c>
 8012532:	4b95      	ldr	r3, [pc, #596]	; (8012788 <tcp_split_unsent_seg+0x274>)
 8012534:	f240 324b 	movw	r2, #843	; 0x34b
 8012538:	4994      	ldr	r1, [pc, #592]	; (801278c <tcp_split_unsent_seg+0x278>)
 801253a:	4895      	ldr	r0, [pc, #596]	; (8012790 <tcp_split_unsent_seg+0x27c>)
 801253c:	f004 fa86 	bl	8016a4c <iprintf>

  useg = pcb->unsent;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012544:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d102      	bne.n	8012552 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012550:	e116      	b.n	8012780 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012552:	887b      	ldrh	r3, [r7, #2]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d109      	bne.n	801256c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012558:	4b8b      	ldr	r3, [pc, #556]	; (8012788 <tcp_split_unsent_seg+0x274>)
 801255a:	f240 3253 	movw	r2, #851	; 0x353
 801255e:	498d      	ldr	r1, [pc, #564]	; (8012794 <tcp_split_unsent_seg+0x280>)
 8012560:	488b      	ldr	r0, [pc, #556]	; (8012790 <tcp_split_unsent_seg+0x27c>)
 8012562:	f004 fa73 	bl	8016a4c <iprintf>
    return ERR_VAL;
 8012566:	f06f 0305 	mvn.w	r3, #5
 801256a:	e109      	b.n	8012780 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	891b      	ldrh	r3, [r3, #8]
 8012570:	887a      	ldrh	r2, [r7, #2]
 8012572:	429a      	cmp	r2, r3
 8012574:	d301      	bcc.n	801257a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012576:	2300      	movs	r3, #0
 8012578:	e102      	b.n	8012780 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801257e:	887a      	ldrh	r2, [r7, #2]
 8012580:	429a      	cmp	r2, r3
 8012582:	d906      	bls.n	8012592 <tcp_split_unsent_seg+0x7e>
 8012584:	4b80      	ldr	r3, [pc, #512]	; (8012788 <tcp_split_unsent_seg+0x274>)
 8012586:	f240 325b 	movw	r2, #859	; 0x35b
 801258a:	4983      	ldr	r1, [pc, #524]	; (8012798 <tcp_split_unsent_seg+0x284>)
 801258c:	4880      	ldr	r0, [pc, #512]	; (8012790 <tcp_split_unsent_seg+0x27c>)
 801258e:	f004 fa5d 	bl	8016a4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d106      	bne.n	80125a8 <tcp_split_unsent_seg+0x94>
 801259a:	4b7b      	ldr	r3, [pc, #492]	; (8012788 <tcp_split_unsent_seg+0x274>)
 801259c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80125a0:	497e      	ldr	r1, [pc, #504]	; (801279c <tcp_split_unsent_seg+0x288>)
 80125a2:	487b      	ldr	r0, [pc, #492]	; (8012790 <tcp_split_unsent_seg+0x27c>)
 80125a4:	f004 fa52 	bl	8016a4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	7a9b      	ldrb	r3, [r3, #10]
 80125ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80125ae:	7bfb      	ldrb	r3, [r7, #15]
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	f003 0304 	and.w	r3, r3, #4
 80125b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	891a      	ldrh	r2, [r3, #8]
 80125be:	887b      	ldrh	r3, [r7, #2]
 80125c0:	1ad3      	subs	r3, r2, r3
 80125c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80125c4:	7bbb      	ldrb	r3, [r7, #14]
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	89bb      	ldrh	r3, [r7, #12]
 80125ca:	4413      	add	r3, r2
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125d2:	4619      	mov	r1, r3
 80125d4:	2036      	movs	r0, #54	; 0x36
 80125d6:	f7fa fbc5 	bl	800cd64 <pbuf_alloc>
 80125da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	f000 80b7 	beq.w	8012752 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	891a      	ldrh	r2, [r3, #8]
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	891b      	ldrh	r3, [r3, #8]
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	887b      	ldrh	r3, [r7, #2]
 80125f4:	4413      	add	r3, r2
 80125f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	6858      	ldr	r0, [r3, #4]
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	7bbb      	ldrb	r3, [r7, #14]
 8012602:	18d1      	adds	r1, r2, r3
 8012604:	897b      	ldrh	r3, [r7, #10]
 8012606:	89ba      	ldrh	r2, [r7, #12]
 8012608:	f7fb f886 	bl	800d718 <pbuf_copy_partial>
 801260c:	4603      	mov	r3, r0
 801260e:	461a      	mov	r2, r3
 8012610:	89bb      	ldrh	r3, [r7, #12]
 8012612:	4293      	cmp	r3, r2
 8012614:	f040 809f 	bne.w	8012756 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	b29b      	uxth	r3, r3
 8012620:	4618      	mov	r0, r3
 8012622:	f7f9 f9f9 	bl	800ba18 <lwip_htons>
 8012626:	4603      	mov	r3, r0
 8012628:	b2db      	uxtb	r3, r3
 801262a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801262e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012630:	2300      	movs	r3, #0
 8012632:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012634:	7efb      	ldrb	r3, [r7, #27]
 8012636:	f003 0308 	and.w	r3, r3, #8
 801263a:	2b00      	cmp	r3, #0
 801263c:	d007      	beq.n	801264e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801263e:	7efb      	ldrb	r3, [r7, #27]
 8012640:	f023 0308 	bic.w	r3, r3, #8
 8012644:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012646:	7ebb      	ldrb	r3, [r7, #26]
 8012648:	f043 0308 	orr.w	r3, r3, #8
 801264c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801264e:	7efb      	ldrb	r3, [r7, #27]
 8012650:	f003 0301 	and.w	r3, r3, #1
 8012654:	2b00      	cmp	r3, #0
 8012656:	d007      	beq.n	8012668 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012658:	7efb      	ldrb	r3, [r7, #27]
 801265a:	f023 0301 	bic.w	r3, r3, #1
 801265e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012660:	7ebb      	ldrb	r3, [r7, #26]
 8012662:	f043 0301 	orr.w	r3, r3, #1
 8012666:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	4618      	mov	r0, r3
 8012670:	f7f9 f9e7 	bl	800ba42 <lwip_htonl>
 8012674:	4602      	mov	r2, r0
 8012676:	887b      	ldrh	r3, [r7, #2]
 8012678:	18d1      	adds	r1, r2, r3
 801267a:	7eba      	ldrb	r2, [r7, #26]
 801267c:	7bfb      	ldrb	r3, [r7, #15]
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	460b      	mov	r3, r1
 8012682:	6939      	ldr	r1, [r7, #16]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7ff fa4f 	bl	8011b28 <tcp_create_segment>
 801268a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d063      	beq.n	801275a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	f7fa fed6 	bl	800d448 <pbuf_clen>
 801269c:	4603      	mov	r3, r0
 801269e:	461a      	mov	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126a6:	1a9b      	subs	r3, r3, r2
 80126a8:	b29a      	uxth	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	6858      	ldr	r0, [r3, #4]
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	891a      	ldrh	r2, [r3, #8]
 80126ba:	89bb      	ldrh	r3, [r7, #12]
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	b29b      	uxth	r3, r3
 80126c0:	4619      	mov	r1, r3
 80126c2:	f7fa fcad 	bl	800d020 <pbuf_realloc>
  useg->len -= remainder;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	891a      	ldrh	r2, [r3, #8]
 80126ca:	89bb      	ldrh	r3, [r7, #12]
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	899b      	ldrh	r3, [r3, #12]
 80126da:	b29c      	uxth	r4, r3
 80126dc:	7efb      	ldrb	r3, [r7, #27]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7f9 f999 	bl	800ba18 <lwip_htons>
 80126e6:	4603      	mov	r3, r0
 80126e8:	461a      	mov	r2, r3
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	68db      	ldr	r3, [r3, #12]
 80126ee:	4322      	orrs	r2, r4
 80126f0:	b292      	uxth	r2, r2
 80126f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fa fea5 	bl	800d448 <pbuf_clen>
 80126fe:	4603      	mov	r3, r0
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012708:	4413      	add	r3, r2
 801270a:	b29a      	uxth	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	4618      	mov	r0, r3
 8012718:	f7fa fe96 	bl	800d448 <pbuf_clen>
 801271c:	4603      	mov	r3, r0
 801271e:	461a      	mov	r2, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012726:	4413      	add	r3, r2
 8012728:	b29a      	uxth	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	69fa      	ldr	r2, [r7, #28]
 801273c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d103      	bne.n	801274e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2200      	movs	r2, #0
 801274a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801274e:	2300      	movs	r3, #0
 8012750:	e016      	b.n	8012780 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012752:	bf00      	nop
 8012754:	e002      	b.n	801275c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012756:	bf00      	nop
 8012758:	e000      	b.n	801275c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801275a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d006      	beq.n	8012770 <tcp_split_unsent_seg+0x25c>
 8012762:	4b09      	ldr	r3, [pc, #36]	; (8012788 <tcp_split_unsent_seg+0x274>)
 8012764:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012768:	490d      	ldr	r1, [pc, #52]	; (80127a0 <tcp_split_unsent_seg+0x28c>)
 801276a:	4809      	ldr	r0, [pc, #36]	; (8012790 <tcp_split_unsent_seg+0x27c>)
 801276c:	f004 f96e 	bl	8016a4c <iprintf>
  if (p != NULL) {
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d002      	beq.n	801277c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012776:	6938      	ldr	r0, [r7, #16]
 8012778:	f7fa fdd8 	bl	800d32c <pbuf_free>
  }

  return ERR_MEM;
 801277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012780:	4618      	mov	r0, r3
 8012782:	3724      	adds	r7, #36	; 0x24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd90      	pop	{r4, r7, pc}
 8012788:	0801a65c 	.word	0x0801a65c
 801278c:	0801a9f0 	.word	0x0801a9f0
 8012790:	0801a6b0 	.word	0x0801a6b0
 8012794:	0801aa14 	.word	0x0801aa14
 8012798:	0801aa38 	.word	0x0801aa38
 801279c:	0801aa48 	.word	0x0801aa48
 80127a0:	0801aa58 	.word	0x0801aa58

080127a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_send_fin+0x1c>
 80127b2:	4b21      	ldr	r3, [pc, #132]	; (8012838 <tcp_send_fin+0x94>)
 80127b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80127b8:	4920      	ldr	r1, [pc, #128]	; (801283c <tcp_send_fin+0x98>)
 80127ba:	4821      	ldr	r0, [pc, #132]	; (8012840 <tcp_send_fin+0x9c>)
 80127bc:	f004 f946 	bl	8016a4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d02e      	beq.n	8012826 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127cc:	60fb      	str	r3, [r7, #12]
 80127ce:	e002      	b.n	80127d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1f8      	bne.n	80127d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	899b      	ldrh	r3, [r3, #12]
 80127e4:	b29b      	uxth	r3, r3
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7f9 f916 	bl	800ba18 <lwip_htons>
 80127ec:	4603      	mov	r3, r0
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	f003 0307 	and.w	r3, r3, #7
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d116      	bne.n	8012826 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	899b      	ldrh	r3, [r3, #12]
 80127fe:	b29c      	uxth	r4, r3
 8012800:	2001      	movs	r0, #1
 8012802:	f7f9 f909 	bl	800ba18 <lwip_htons>
 8012806:	4603      	mov	r3, r0
 8012808:	461a      	mov	r2, r3
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	4322      	orrs	r2, r4
 8012810:	b292      	uxth	r2, r2
 8012812:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	8b5b      	ldrh	r3, [r3, #26]
 8012818:	f043 0320 	orr.w	r3, r3, #32
 801281c:	b29a      	uxth	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012822:	2300      	movs	r3, #0
 8012824:	e004      	b.n	8012830 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012826:	2101      	movs	r1, #1
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f80b 	bl	8012844 <tcp_enqueue_flags>
 801282e:	4603      	mov	r3, r0
}
 8012830:	4618      	mov	r0, r3
 8012832:	3714      	adds	r7, #20
 8012834:	46bd      	mov	sp, r7
 8012836:	bd90      	pop	{r4, r7, pc}
 8012838:	0801a65c 	.word	0x0801a65c
 801283c:	0801aa64 	.word	0x0801aa64
 8012840:	0801a6b0 	.word	0x0801a6b0

08012844 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b08a      	sub	sp, #40	; 0x28
 8012848:	af02      	add	r7, sp, #8
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012850:	2300      	movs	r3, #0
 8012852:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012854:	2300      	movs	r3, #0
 8012856:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	f003 0303 	and.w	r3, r3, #3
 801285e:	2b00      	cmp	r3, #0
 8012860:	d106      	bne.n	8012870 <tcp_enqueue_flags+0x2c>
 8012862:	4b67      	ldr	r3, [pc, #412]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 8012864:	f240 4211 	movw	r2, #1041	; 0x411
 8012868:	4966      	ldr	r1, [pc, #408]	; (8012a04 <tcp_enqueue_flags+0x1c0>)
 801286a:	4867      	ldr	r0, [pc, #412]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 801286c:	f004 f8ee 	bl	8016a4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d106      	bne.n	8012884 <tcp_enqueue_flags+0x40>
 8012876:	4b62      	ldr	r3, [pc, #392]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 8012878:	f240 4213 	movw	r2, #1043	; 0x413
 801287c:	4963      	ldr	r1, [pc, #396]	; (8012a0c <tcp_enqueue_flags+0x1c8>)
 801287e:	4862      	ldr	r0, [pc, #392]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 8012880:	f004 f8e4 	bl	8016a4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012884:	78fb      	ldrb	r3, [r7, #3]
 8012886:	f003 0302 	and.w	r3, r3, #2
 801288a:	2b00      	cmp	r3, #0
 801288c:	d001      	beq.n	8012892 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801288e:	2301      	movs	r3, #1
 8012890:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012892:	7ffb      	ldrb	r3, [r7, #31]
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	b2db      	uxtb	r3, r3
 8012898:	f003 0304 	and.w	r3, r3, #4
 801289c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801289e:	7dfb      	ldrb	r3, [r7, #23]
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128a6:	4619      	mov	r1, r3
 80128a8:	2036      	movs	r0, #54	; 0x36
 80128aa:	f7fa fa5b 	bl	800cd64 <pbuf_alloc>
 80128ae:	6138      	str	r0, [r7, #16]
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d109      	bne.n	80128ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	8b5b      	ldrh	r3, [r3, #26]
 80128ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128be:	b29a      	uxth	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128c8:	e095      	b.n	80129f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	895a      	ldrh	r2, [r3, #10]
 80128ce:	7dfb      	ldrb	r3, [r7, #23]
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d206      	bcs.n	80128e4 <tcp_enqueue_flags+0xa0>
 80128d6:	4b4a      	ldr	r3, [pc, #296]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 80128d8:	f240 4239 	movw	r2, #1081	; 0x439
 80128dc:	494c      	ldr	r1, [pc, #304]	; (8012a10 <tcp_enqueue_flags+0x1cc>)
 80128de:	484a      	ldr	r0, [pc, #296]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 80128e0:	f004 f8b4 	bl	8016a4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80128e8:	78fa      	ldrb	r2, [r7, #3]
 80128ea:	7ffb      	ldrb	r3, [r7, #31]
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	460b      	mov	r3, r1
 80128f0:	6939      	ldr	r1, [r7, #16]
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f7ff f918 	bl	8011b28 <tcp_create_segment>
 80128f8:	60f8      	str	r0, [r7, #12]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d109      	bne.n	8012914 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	8b5b      	ldrh	r3, [r3, #26]
 8012904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801290e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012912:	e070      	b.n	80129f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	f003 0303 	and.w	r3, r3, #3
 801291c:	2b00      	cmp	r3, #0
 801291e:	d006      	beq.n	801292e <tcp_enqueue_flags+0xea>
 8012920:	4b37      	ldr	r3, [pc, #220]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 8012922:	f240 4242 	movw	r2, #1090	; 0x442
 8012926:	493b      	ldr	r1, [pc, #236]	; (8012a14 <tcp_enqueue_flags+0x1d0>)
 8012928:	4837      	ldr	r0, [pc, #220]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 801292a:	f004 f88f 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	891b      	ldrh	r3, [r3, #8]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d006      	beq.n	8012944 <tcp_enqueue_flags+0x100>
 8012936:	4b32      	ldr	r3, [pc, #200]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 8012938:	f240 4243 	movw	r2, #1091	; 0x443
 801293c:	4936      	ldr	r1, [pc, #216]	; (8012a18 <tcp_enqueue_flags+0x1d4>)
 801293e:	4832      	ldr	r0, [pc, #200]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 8012940:	f004 f884 	bl	8016a4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012948:	2b00      	cmp	r3, #0
 801294a:	d103      	bne.n	8012954 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	66da      	str	r2, [r3, #108]	; 0x6c
 8012952:	e00d      	b.n	8012970 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012958:	61bb      	str	r3, [r7, #24]
 801295a:	e002      	b.n	8012962 <tcp_enqueue_flags+0x11e>
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	61bb      	str	r3, [r7, #24]
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1f8      	bne.n	801295c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	68fa      	ldr	r2, [r7, #12]
 801296e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012978:	78fb      	ldrb	r3, [r7, #3]
 801297a:	f003 0302 	and.w	r3, r3, #2
 801297e:	2b00      	cmp	r3, #0
 8012980:	d104      	bne.n	801298c <tcp_enqueue_flags+0x148>
 8012982:	78fb      	ldrb	r3, [r7, #3]
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d004      	beq.n	8012996 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012990:	1c5a      	adds	r2, r3, #1
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012996:	78fb      	ldrb	r3, [r7, #3]
 8012998:	f003 0301 	and.w	r3, r3, #1
 801299c:	2b00      	cmp	r3, #0
 801299e:	d006      	beq.n	80129ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	8b5b      	ldrh	r3, [r3, #26]
 80129a4:	f043 0320 	orr.w	r3, r3, #32
 80129a8:	b29a      	uxth	r2, r3
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fa fd48 	bl	800d448 <pbuf_clen>
 80129b8:	4603      	mov	r3, r0
 80129ba:	461a      	mov	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129c2:	4413      	add	r3, r2
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d00e      	beq.n	80129f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d10a      	bne.n	80129f4 <tcp_enqueue_flags+0x1b0>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d106      	bne.n	80129f4 <tcp_enqueue_flags+0x1b0>
 80129e6:	4b06      	ldr	r3, [pc, #24]	; (8012a00 <tcp_enqueue_flags+0x1bc>)
 80129e8:	f240 4265 	movw	r2, #1125	; 0x465
 80129ec:	490b      	ldr	r1, [pc, #44]	; (8012a1c <tcp_enqueue_flags+0x1d8>)
 80129ee:	4806      	ldr	r0, [pc, #24]	; (8012a08 <tcp_enqueue_flags+0x1c4>)
 80129f0:	f004 f82c 	bl	8016a4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3720      	adds	r7, #32
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	0801a65c 	.word	0x0801a65c
 8012a04:	0801aa80 	.word	0x0801aa80
 8012a08:	0801a6b0 	.word	0x0801a6b0
 8012a0c:	0801aad8 	.word	0x0801aad8
 8012a10:	0801aaf8 	.word	0x0801aaf8
 8012a14:	0801ab34 	.word	0x0801ab34
 8012a18:	0801ab4c 	.word	0x0801ab4c
 8012a1c:	0801ab78 	.word	0x0801ab78

08012a20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a20:	b5b0      	push	{r4, r5, r7, lr}
 8012a22:	b08a      	sub	sp, #40	; 0x28
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d106      	bne.n	8012a3c <tcp_output+0x1c>
 8012a2e:	4b9e      	ldr	r3, [pc, #632]	; (8012ca8 <tcp_output+0x288>)
 8012a30:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a34:	499d      	ldr	r1, [pc, #628]	; (8012cac <tcp_output+0x28c>)
 8012a36:	489e      	ldr	r0, [pc, #632]	; (8012cb0 <tcp_output+0x290>)
 8012a38:	f004 f808 	bl	8016a4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	7d1b      	ldrb	r3, [r3, #20]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d106      	bne.n	8012a52 <tcp_output+0x32>
 8012a44:	4b98      	ldr	r3, [pc, #608]	; (8012ca8 <tcp_output+0x288>)
 8012a46:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012a4a:	499a      	ldr	r1, [pc, #616]	; (8012cb4 <tcp_output+0x294>)
 8012a4c:	4898      	ldr	r0, [pc, #608]	; (8012cb0 <tcp_output+0x290>)
 8012a4e:	f003 fffd 	bl	8016a4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a52:	4b99      	ldr	r3, [pc, #612]	; (8012cb8 <tcp_output+0x298>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d101      	bne.n	8012a60 <tcp_output+0x40>
    return ERR_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e1ce      	b.n	8012dfe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	bf28      	it	cs
 8012a70:	4613      	movcs	r3, r2
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10b      	bne.n	8012a9a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	8b5b      	ldrh	r3, [r3, #26]
 8012a86:	f003 0302 	and.w	r3, r3, #2
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 81aa 	beq.w	8012de4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 fdcb 	bl	801362c <tcp_send_empty_ack>
 8012a96:	4603      	mov	r3, r0
 8012a98:	e1b1      	b.n	8012dfe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	3304      	adds	r3, #4
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f7ff f824 	bl	8011af0 <tcp_route>
 8012aa8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d102      	bne.n	8012ab6 <tcp_output+0x96>
    return ERR_RTE;
 8012ab0:	f06f 0303 	mvn.w	r3, #3
 8012ab4:	e1a3      	b.n	8012dfe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d003      	beq.n	8012ac4 <tcp_output+0xa4>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d111      	bne.n	8012ae8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d002      	beq.n	8012ad0 <tcp_output+0xb0>
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	3304      	adds	r3, #4
 8012ace:	e000      	b.n	8012ad2 <tcp_output+0xb2>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d102      	bne.n	8012ae0 <tcp_output+0xc0>
      return ERR_RTE;
 8012ada:	f06f 0303 	mvn.w	r3, #3
 8012ade:	e18e      	b.n	8012dfe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f8 ffa7 	bl	800ba42 <lwip_htonl>
 8012af4:	4602      	mov	r2, r0
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012afa:	1ad3      	subs	r3, r2, r3
 8012afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012afe:	8912      	ldrh	r2, [r2, #8]
 8012b00:	4413      	add	r3, r2
 8012b02:	69ba      	ldr	r2, [r7, #24]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d227      	bcs.n	8012b58 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b0e:	461a      	mov	r2, r3
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d114      	bne.n	8012b40 <tcp_output+0x120>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d110      	bne.n	8012b40 <tcp_output+0x120>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10b      	bne.n	8012b40 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	8b5b      	ldrh	r3, [r3, #26]
 8012b44:	f003 0302 	and.w	r3, r3, #2
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f000 814d 	beq.w	8012de8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b4e:	6878      	ldr	r0, [r7, #4]
 8012b50:	f000 fd6c 	bl	801362c <tcp_send_empty_ack>
 8012b54:	4603      	mov	r3, r0
 8012b56:	e152      	b.n	8012dfe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b64:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012b66:	6a3b      	ldr	r3, [r7, #32]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f000 811c 	beq.w	8012da6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012b6e:	e002      	b.n	8012b76 <tcp_output+0x156>
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	623b      	str	r3, [r7, #32]
 8012b76:	6a3b      	ldr	r3, [r7, #32]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d1f8      	bne.n	8012b70 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012b7e:	e112      	b.n	8012da6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f8 ff45 	bl	800ba18 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	f003 0304 	and.w	r3, r3, #4
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d006      	beq.n	8012ba8 <tcp_output+0x188>
 8012b9a:	4b43      	ldr	r3, [pc, #268]	; (8012ca8 <tcp_output+0x288>)
 8012b9c:	f240 5236 	movw	r2, #1334	; 0x536
 8012ba0:	4946      	ldr	r1, [pc, #280]	; (8012cbc <tcp_output+0x29c>)
 8012ba2:	4843      	ldr	r0, [pc, #268]	; (8012cb0 <tcp_output+0x290>)
 8012ba4:	f003 ff52 	bl	8016a4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d01f      	beq.n	8012bf0 <tcp_output+0x1d0>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8b5b      	ldrh	r3, [r3, #26]
 8012bb4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d119      	bne.n	8012bf0 <tcp_output+0x1d0>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00b      	beq.n	8012bdc <tcp_output+0x1bc>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d110      	bne.n	8012bf0 <tcp_output+0x1d0>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bd2:	891a      	ldrh	r2, [r3, #8]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d209      	bcs.n	8012bf0 <tcp_output+0x1d0>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d004      	beq.n	8012bf0 <tcp_output+0x1d0>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bec:	2b08      	cmp	r3, #8
 8012bee:	d901      	bls.n	8012bf4 <tcp_output+0x1d4>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	e000      	b.n	8012bf6 <tcp_output+0x1d6>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d106      	bne.n	8012c08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	8b5b      	ldrh	r3, [r3, #26]
 8012bfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 80e4 	beq.w	8012dd0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	7d1b      	ldrb	r3, [r3, #20]
 8012c0c:	2b02      	cmp	r3, #2
 8012c0e:	d00d      	beq.n	8012c2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	899b      	ldrh	r3, [r3, #12]
 8012c16:	b29c      	uxth	r4, r3
 8012c18:	2010      	movs	r0, #16
 8012c1a:	f7f8 fefd 	bl	800ba18 <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	461a      	mov	r2, r3
 8012c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	4322      	orrs	r2, r4
 8012c28:	b292      	uxth	r2, r2
 8012c2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c2c:	697a      	ldr	r2, [r7, #20]
 8012c2e:	6879      	ldr	r1, [r7, #4]
 8012c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c32:	f000 f909 	bl	8012e48 <tcp_output_segment>
 8012c36:	4603      	mov	r3, r0
 8012c38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d009      	beq.n	8012c56 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	8b5b      	ldrh	r3, [r3, #26]
 8012c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	835a      	strh	r2, [r3, #26]
      return err;
 8012c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c54:	e0d3      	b.n	8012dfe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	7d1b      	ldrb	r3, [r3, #20]
 8012c62:	2b02      	cmp	r3, #2
 8012c64:	d006      	beq.n	8012c74 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8b5b      	ldrh	r3, [r3, #26]
 8012c6a:	f023 0303 	bic.w	r3, r3, #3
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7f8 fee1 	bl	800ba42 <lwip_htonl>
 8012c80:	4604      	mov	r4, r0
 8012c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c84:	891b      	ldrh	r3, [r3, #8]
 8012c86:	461d      	mov	r5, r3
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	899b      	ldrh	r3, [r3, #12]
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7f8 fec1 	bl	800ba18 <lwip_htons>
 8012c96:	4603      	mov	r3, r0
 8012c98:	b2db      	uxtb	r3, r3
 8012c9a:	f003 0303 	and.w	r3, r3, #3
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d00e      	beq.n	8012cc0 <tcp_output+0x2a0>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e00d      	b.n	8012cc2 <tcp_output+0x2a2>
 8012ca6:	bf00      	nop
 8012ca8:	0801a65c 	.word	0x0801a65c
 8012cac:	0801aba0 	.word	0x0801aba0
 8012cb0:	0801a6b0 	.word	0x0801a6b0
 8012cb4:	0801abb8 	.word	0x0801abb8
 8012cb8:	200136c4 	.word	0x200136c4
 8012cbc:	0801abe0 	.word	0x0801abe0
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	442b      	add	r3, r5
 8012cc4:	4423      	add	r3, r4
 8012cc6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	da02      	bge.n	8012cda <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	461c      	mov	r4, r3
 8012ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	899b      	ldrh	r3, [r3, #12]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f8 fe95 	bl	800ba18 <lwip_htons>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	f003 0303 	and.w	r3, r3, #3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <tcp_output+0x2de>
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e000      	b.n	8012d00 <tcp_output+0x2e0>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	4423      	add	r3, r4
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d049      	beq.n	8012d9a <tcp_output+0x37a>
      seg->next = NULL;
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	2200      	movs	r2, #0
 8012d0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d105      	bne.n	8012d20 <tcp_output+0x300>
        pcb->unacked = seg;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	623b      	str	r3, [r7, #32]
 8012d1e:	e03f      	b.n	8012da0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7f8 fe8b 	bl	800ba42 <lwip_htonl>
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	6a3b      	ldr	r3, [r7, #32]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f8 fe84 	bl	800ba42 <lwip_htonl>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	1ae3      	subs	r3, r4, r3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	da24      	bge.n	8012d8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	3370      	adds	r3, #112	; 0x70
 8012d46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d48:	e002      	b.n	8012d50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d011      	beq.n	8012d7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7f8 fe6e 	bl	800ba42 <lwip_htonl>
 8012d66:	4604      	mov	r4, r0
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7f8 fe67 	bl	800ba42 <lwip_htonl>
 8012d74:	4603      	mov	r3, r0
 8012d76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	dbe6      	blt.n	8012d4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d88:	601a      	str	r2, [r3, #0]
 8012d8a:	e009      	b.n	8012da0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012d8c:	6a3b      	ldr	r3, [r7, #32]
 8012d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012d92:	6a3b      	ldr	r3, [r7, #32]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	623b      	str	r3, [r7, #32]
 8012d98:	e002      	b.n	8012da0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d9c:	f7fb feff 	bl	800eb9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d012      	beq.n	8012dd2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7f8 fe45 	bl	800ba42 <lwip_htonl>
 8012db8:	4602      	mov	r2, r0
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dc2:	8912      	ldrh	r2, [r2, #8]
 8012dc4:	4413      	add	r3, r2
  while (seg != NULL &&
 8012dc6:	69ba      	ldr	r2, [r7, #24]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	f4bf aed9 	bcs.w	8012b80 <tcp_output+0x160>
 8012dce:	e000      	b.n	8012dd2 <tcp_output+0x3b2>
      break;
 8012dd0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d108      	bne.n	8012dec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2200      	movs	r2, #0
 8012dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012de2:	e004      	b.n	8012dee <tcp_output+0x3ce>
    goto output_done;
 8012de4:	bf00      	nop
 8012de6:	e002      	b.n	8012dee <tcp_output+0x3ce>
    goto output_done;
 8012de8:	bf00      	nop
 8012dea:	e000      	b.n	8012dee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012dec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	8b5b      	ldrh	r3, [r3, #26]
 8012df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3728      	adds	r7, #40	; 0x28
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bdb0      	pop	{r4, r5, r7, pc}
 8012e06:	bf00      	nop

08012e08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <tcp_output_segment_busy+0x1c>
 8012e16:	4b09      	ldr	r3, [pc, #36]	; (8012e3c <tcp_output_segment_busy+0x34>)
 8012e18:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e1c:	4908      	ldr	r1, [pc, #32]	; (8012e40 <tcp_output_segment_busy+0x38>)
 8012e1e:	4809      	ldr	r0, [pc, #36]	; (8012e44 <tcp_output_segment_busy+0x3c>)
 8012e20:	f003 fe14 	bl	8016a4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	7b9b      	ldrb	r3, [r3, #14]
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d001      	beq.n	8012e32 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e000      	b.n	8012e34 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	0801a65c 	.word	0x0801a65c
 8012e40:	0801abf8 	.word	0x0801abf8
 8012e44:	0801a6b0 	.word	0x0801a6b0

08012e48 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e48:	b5b0      	push	{r4, r5, r7, lr}
 8012e4a:	b08c      	sub	sp, #48	; 0x30
 8012e4c:	af04      	add	r7, sp, #16
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <tcp_output_segment+0x20>
 8012e5a:	4b63      	ldr	r3, [pc, #396]	; (8012fe8 <tcp_output_segment+0x1a0>)
 8012e5c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012e60:	4962      	ldr	r1, [pc, #392]	; (8012fec <tcp_output_segment+0x1a4>)
 8012e62:	4863      	ldr	r0, [pc, #396]	; (8012ff0 <tcp_output_segment+0x1a8>)
 8012e64:	f003 fdf2 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d106      	bne.n	8012e7c <tcp_output_segment+0x34>
 8012e6e:	4b5e      	ldr	r3, [pc, #376]	; (8012fe8 <tcp_output_segment+0x1a0>)
 8012e70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012e74:	495f      	ldr	r1, [pc, #380]	; (8012ff4 <tcp_output_segment+0x1ac>)
 8012e76:	485e      	ldr	r0, [pc, #376]	; (8012ff0 <tcp_output_segment+0x1a8>)
 8012e78:	f003 fde8 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <tcp_output_segment+0x48>
 8012e82:	4b59      	ldr	r3, [pc, #356]	; (8012fe8 <tcp_output_segment+0x1a0>)
 8012e84:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012e88:	495b      	ldr	r1, [pc, #364]	; (8012ff8 <tcp_output_segment+0x1b0>)
 8012e8a:	4859      	ldr	r0, [pc, #356]	; (8012ff0 <tcp_output_segment+0x1a8>)
 8012e8c:	f003 fdde 	bl	8016a4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012e90:	68f8      	ldr	r0, [r7, #12]
 8012e92:	f7ff ffb9 	bl	8012e08 <tcp_output_segment_busy>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d001      	beq.n	8012ea0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	e09f      	b.n	8012fe0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	68dc      	ldr	r4, [r3, #12]
 8012ea8:	4610      	mov	r0, r2
 8012eaa:	f7f8 fdca 	bl	800ba42 <lwip_htonl>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	68dc      	ldr	r4, [r3, #12]
 8012eba:	4610      	mov	r0, r2
 8012ebc:	f7f8 fdac 	bl	800ba18 <lwip_htons>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec8:	68ba      	ldr	r2, [r7, #8]
 8012eca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012ecc:	441a      	add	r2, r3
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	3314      	adds	r3, #20
 8012ed8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	7a9b      	ldrb	r3, [r3, #10]
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d015      	beq.n	8012f12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	3304      	adds	r3, #4
 8012eea:	461a      	mov	r2, r3
 8012eec:	6879      	ldr	r1, [r7, #4]
 8012eee:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012ef2:	f7fc fa37 	bl	800f364 <tcp_eff_send_mss_netif>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012efa:	8b7b      	ldrh	r3, [r7, #26]
 8012efc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7f8 fd9e 	bl	800ba42 <lwip_htonl>
 8012f06:	4602      	mov	r2, r0
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	3304      	adds	r3, #4
 8012f10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	da02      	bge.n	8012f22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10c      	bne.n	8012f44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f2a:	4b34      	ldr	r3, [pc, #208]	; (8012ffc <tcp_output_segment+0x1b4>)
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	68db      	ldr	r3, [r3, #12]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7f8 fd82 	bl	800ba42 <lwip_htonl>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	68da      	ldr	r2, [r3, #12]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	1ad3      	subs	r3, r2, r3
 8012f50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	8959      	ldrh	r1, [r3, #10]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	8b3a      	ldrh	r2, [r7, #24]
 8012f5e:	1a8a      	subs	r2, r1, r2
 8012f60:	b292      	uxth	r2, r2
 8012f62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	8919      	ldrh	r1, [r3, #8]
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	8b3a      	ldrh	r2, [r7, #24]
 8012f70:	1a8a      	subs	r2, r1, r2
 8012f72:	b292      	uxth	r2, r2
 8012f74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	68fa      	ldr	r2, [r7, #12]
 8012f7c:	68d2      	ldr	r2, [r2, #12]
 8012f7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	741a      	strb	r2, [r3, #16]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	68db      	ldr	r3, [r3, #12]
 8012f90:	f103 0214 	add.w	r2, r3, #20
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	7a9b      	ldrb	r3, [r3, #10]
 8012f98:	009b      	lsls	r3, r3, #2
 8012f9a:	f003 0304 	and.w	r3, r3, #4
 8012f9e:	4413      	add	r3, r2
 8012fa0:	69fa      	ldr	r2, [r7, #28]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d006      	beq.n	8012fb4 <tcp_output_segment+0x16c>
 8012fa6:	4b10      	ldr	r3, [pc, #64]	; (8012fe8 <tcp_output_segment+0x1a0>)
 8012fa8:	f240 621c 	movw	r2, #1564	; 0x61c
 8012fac:	4914      	ldr	r1, [pc, #80]	; (8013000 <tcp_output_segment+0x1b8>)
 8012fae:	4810      	ldr	r0, [pc, #64]	; (8012ff0 <tcp_output_segment+0x1a8>)
 8012fb0:	f003 fd4c 	bl	8016a4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	6858      	ldr	r0, [r3, #4]
 8012fb8:	68b9      	ldr	r1, [r7, #8]
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	1d1c      	adds	r4, r3, #4
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	7add      	ldrb	r5, [r3, #11]
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	7a9b      	ldrb	r3, [r3, #10]
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	9202      	str	r2, [sp, #8]
 8012fca:	2206      	movs	r2, #6
 8012fcc:	9201      	str	r2, [sp, #4]
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	462b      	mov	r3, r5
 8012fd2:	4622      	mov	r2, r4
 8012fd4:	f002 fa66 	bl	80154a4 <ip4_output_if>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3720      	adds	r7, #32
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fe8:	0801a65c 	.word	0x0801a65c
 8012fec:	0801ac20 	.word	0x0801ac20
 8012ff0:	0801a6b0 	.word	0x0801a6b0
 8012ff4:	0801ac40 	.word	0x0801ac40
 8012ff8:	0801ac60 	.word	0x0801ac60
 8012ffc:	200136b4 	.word	0x200136b4
 8013000:	0801ac84 	.word	0x0801ac84

08013004 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013004:	b5b0      	push	{r4, r5, r7, lr}
 8013006:	b084      	sub	sp, #16
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d106      	bne.n	8013020 <tcp_rexmit_rto_prepare+0x1c>
 8013012:	4b31      	ldr	r3, [pc, #196]	; (80130d8 <tcp_rexmit_rto_prepare+0xd4>)
 8013014:	f240 6263 	movw	r2, #1635	; 0x663
 8013018:	4930      	ldr	r1, [pc, #192]	; (80130dc <tcp_rexmit_rto_prepare+0xd8>)
 801301a:	4831      	ldr	r0, [pc, #196]	; (80130e0 <tcp_rexmit_rto_prepare+0xdc>)
 801301c:	f003 fd16 	bl	8016a4c <iprintf>

  if (pcb->unacked == NULL) {
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013024:	2b00      	cmp	r3, #0
 8013026:	d102      	bne.n	801302e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013028:	f06f 0305 	mvn.w	r3, #5
 801302c:	e050      	b.n	80130d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013032:	60fb      	str	r3, [r7, #12]
 8013034:	e00b      	b.n	801304e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013036:	68f8      	ldr	r0, [r7, #12]
 8013038:	f7ff fee6 	bl	8012e08 <tcp_output_segment_busy>
 801303c:	4603      	mov	r3, r0
 801303e:	2b00      	cmp	r3, #0
 8013040:	d002      	beq.n	8013048 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013042:	f06f 0305 	mvn.w	r3, #5
 8013046:	e043      	b.n	80130d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	60fb      	str	r3, [r7, #12]
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1ef      	bne.n	8013036 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f7ff fed6 	bl	8012e08 <tcp_output_segment_busy>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d002      	beq.n	8013068 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013062:	f06f 0305 	mvn.w	r3, #5
 8013066:	e033      	b.n	80130d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	8b5b      	ldrh	r3, [r3, #26]
 8013082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013086:	b29a      	uxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	4618      	mov	r0, r3
 8013094:	f7f8 fcd5 	bl	800ba42 <lwip_htonl>
 8013098:	4604      	mov	r4, r0
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	891b      	ldrh	r3, [r3, #8]
 801309e:	461d      	mov	r5, r3
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	899b      	ldrh	r3, [r3, #12]
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f8 fcb5 	bl	800ba18 <lwip_htons>
 80130ae:	4603      	mov	r3, r0
 80130b0:	b2db      	uxtb	r3, r3
 80130b2:	f003 0303 	and.w	r3, r3, #3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d001      	beq.n	80130be <tcp_rexmit_rto_prepare+0xba>
 80130ba:	2301      	movs	r3, #1
 80130bc:	e000      	b.n	80130c0 <tcp_rexmit_rto_prepare+0xbc>
 80130be:	2300      	movs	r3, #0
 80130c0:	442b      	add	r3, r5
 80130c2:	18e2      	adds	r2, r4, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3710      	adds	r7, #16
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bdb0      	pop	{r4, r5, r7, pc}
 80130d8:	0801a65c 	.word	0x0801a65c
 80130dc:	0801ac98 	.word	0x0801ac98
 80130e0:	0801a6b0 	.word	0x0801a6b0

080130e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <tcp_rexmit_rto_commit+0x1c>
 80130f2:	4b0d      	ldr	r3, [pc, #52]	; (8013128 <tcp_rexmit_rto_commit+0x44>)
 80130f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80130f8:	490c      	ldr	r1, [pc, #48]	; (801312c <tcp_rexmit_rto_commit+0x48>)
 80130fa:	480d      	ldr	r0, [pc, #52]	; (8013130 <tcp_rexmit_rto_commit+0x4c>)
 80130fc:	f003 fca6 	bl	8016a4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013106:	2bff      	cmp	r3, #255	; 0xff
 8013108:	d007      	beq.n	801311a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013110:	3301      	adds	r3, #1
 8013112:	b2da      	uxtb	r2, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff fc80 	bl	8012a20 <tcp_output>
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	0801a65c 	.word	0x0801a65c
 801312c:	0801acbc 	.word	0x0801acbc
 8013130:	0801a6b0 	.word	0x0801a6b0

08013134 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <tcp_rexmit_rto+0x1c>
 8013142:	4b0a      	ldr	r3, [pc, #40]	; (801316c <tcp_rexmit_rto+0x38>)
 8013144:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013148:	4909      	ldr	r1, [pc, #36]	; (8013170 <tcp_rexmit_rto+0x3c>)
 801314a:	480a      	ldr	r0, [pc, #40]	; (8013174 <tcp_rexmit_rto+0x40>)
 801314c:	f003 fc7e 	bl	8016a4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f7ff ff57 	bl	8013004 <tcp_rexmit_rto_prepare>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ff ffc1 	bl	80130e4 <tcp_rexmit_rto_commit>
  }
}
 8013162:	bf00      	nop
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	0801a65c 	.word	0x0801a65c
 8013170:	0801ace0 	.word	0x0801ace0
 8013174:	0801a6b0 	.word	0x0801a6b0

08013178 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013178:	b590      	push	{r4, r7, lr}
 801317a:	b085      	sub	sp, #20
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d106      	bne.n	8013194 <tcp_rexmit+0x1c>
 8013186:	4b2f      	ldr	r3, [pc, #188]	; (8013244 <tcp_rexmit+0xcc>)
 8013188:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801318c:	492e      	ldr	r1, [pc, #184]	; (8013248 <tcp_rexmit+0xd0>)
 801318e:	482f      	ldr	r0, [pc, #188]	; (801324c <tcp_rexmit+0xd4>)
 8013190:	f003 fc5c 	bl	8016a4c <iprintf>

  if (pcb->unacked == NULL) {
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801319c:	f06f 0305 	mvn.w	r3, #5
 80131a0:	e04c      	b.n	801323c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80131a8:	68b8      	ldr	r0, [r7, #8]
 80131aa:	f7ff fe2d 	bl	8012e08 <tcp_output_segment_busy>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d002      	beq.n	80131ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80131b4:	f06f 0305 	mvn.w	r3, #5
 80131b8:	e040      	b.n	801323c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	336c      	adds	r3, #108	; 0x6c
 80131c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131c8:	e002      	b.n	80131d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d011      	beq.n	80131fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f8 fc2e 	bl	800ba42 <lwip_htonl>
 80131e6:	4604      	mov	r4, r0
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f8 fc27 	bl	800ba42 <lwip_htonl>
 80131f4:	4603      	mov	r3, r0
 80131f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	dbe6      	blt.n	80131ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	68ba      	ldr	r2, [r7, #8]
 8013208:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d103      	bne.n	801321a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2200      	movs	r2, #0
 8013216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013220:	2bff      	cmp	r3, #255	; 0xff
 8013222:	d007      	beq.n	8013234 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801322a:	3301      	adds	r3, #1
 801322c:	b2da      	uxtb	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2200      	movs	r2, #0
 8013238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801323a:	2300      	movs	r3, #0
}
 801323c:	4618      	mov	r0, r3
 801323e:	3714      	adds	r7, #20
 8013240:	46bd      	mov	sp, r7
 8013242:	bd90      	pop	{r4, r7, pc}
 8013244:	0801a65c 	.word	0x0801a65c
 8013248:	0801acfc 	.word	0x0801acfc
 801324c:	0801a6b0 	.word	0x0801a6b0

08013250 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_rexmit_fast+0x1c>
 801325e:	4b2a      	ldr	r3, [pc, #168]	; (8013308 <tcp_rexmit_fast+0xb8>)
 8013260:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013264:	4929      	ldr	r1, [pc, #164]	; (801330c <tcp_rexmit_fast+0xbc>)
 8013266:	482a      	ldr	r0, [pc, #168]	; (8013310 <tcp_rexmit_fast+0xc0>)
 8013268:	f003 fbf0 	bl	8016a4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013270:	2b00      	cmp	r3, #0
 8013272:	d044      	beq.n	80132fe <tcp_rexmit_fast+0xae>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	8b5b      	ldrh	r3, [r3, #26]
 8013278:	f003 0304 	and.w	r3, r3, #4
 801327c:	2b00      	cmp	r3, #0
 801327e:	d13e      	bne.n	80132fe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7ff ff79 	bl	8013178 <tcp_rexmit>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d138      	bne.n	80132fe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013298:	4293      	cmp	r3, r2
 801329a:	bf28      	it	cs
 801329c:	4613      	movcs	r3, r2
 801329e:	b29b      	uxth	r3, r3
 80132a0:	0fda      	lsrs	r2, r3, #31
 80132a2:	4413      	add	r3, r2
 80132a4:	105b      	asrs	r3, r3, #1
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80132b4:	461a      	mov	r2, r3
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132ba:	005b      	lsls	r3, r3, #1
 80132bc:	429a      	cmp	r2, r3
 80132be:	d206      	bcs.n	80132ce <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132c4:	005b      	lsls	r3, r3, #1
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132d8:	4619      	mov	r1, r3
 80132da:	0049      	lsls	r1, r1, #1
 80132dc:	440b      	add	r3, r1
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4413      	add	r3, r2
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	8b5b      	ldrh	r3, [r3, #26]
 80132ee:	f043 0304 	orr.w	r3, r3, #4
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80132fe:	bf00      	nop
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	0801a65c 	.word	0x0801a65c
 801330c:	0801ad14 	.word	0x0801ad14
 8013310:	0801a6b0 	.word	0x0801a6b0

08013314 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b086      	sub	sp, #24
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	607b      	str	r3, [r7, #4]
 801331e:	460b      	mov	r3, r1
 8013320:	817b      	strh	r3, [r7, #10]
 8013322:	4613      	mov	r3, r2
 8013324:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013326:	897a      	ldrh	r2, [r7, #10]
 8013328:	893b      	ldrh	r3, [r7, #8]
 801332a:	4413      	add	r3, r2
 801332c:	b29b      	uxth	r3, r3
 801332e:	3314      	adds	r3, #20
 8013330:	b29b      	uxth	r3, r3
 8013332:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013336:	4619      	mov	r1, r3
 8013338:	2022      	movs	r0, #34	; 0x22
 801333a:	f7f9 fd13 	bl	800cd64 <pbuf_alloc>
 801333e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d04d      	beq.n	80133e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013346:	897b      	ldrh	r3, [r7, #10]
 8013348:	3313      	adds	r3, #19
 801334a:	697a      	ldr	r2, [r7, #20]
 801334c:	8952      	ldrh	r2, [r2, #10]
 801334e:	4293      	cmp	r3, r2
 8013350:	db06      	blt.n	8013360 <tcp_output_alloc_header_common+0x4c>
 8013352:	4b26      	ldr	r3, [pc, #152]	; (80133ec <tcp_output_alloc_header_common+0xd8>)
 8013354:	f240 7223 	movw	r2, #1827	; 0x723
 8013358:	4925      	ldr	r1, [pc, #148]	; (80133f0 <tcp_output_alloc_header_common+0xdc>)
 801335a:	4826      	ldr	r0, [pc, #152]	; (80133f4 <tcp_output_alloc_header_common+0xe0>)
 801335c:	f003 fb76 	bl	8016a4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013366:	8c3b      	ldrh	r3, [r7, #32]
 8013368:	4618      	mov	r0, r3
 801336a:	f7f8 fb55 	bl	800ba18 <lwip_htons>
 801336e:	4603      	mov	r3, r0
 8013370:	461a      	mov	r2, r3
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013378:	4618      	mov	r0, r3
 801337a:	f7f8 fb4d 	bl	800ba18 <lwip_htons>
 801337e:	4603      	mov	r3, r0
 8013380:	461a      	mov	r2, r3
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f7f8 fb58 	bl	800ba42 <lwip_htonl>
 8013392:	4602      	mov	r2, r0
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013398:	897b      	ldrh	r3, [r7, #10]
 801339a:	089b      	lsrs	r3, r3, #2
 801339c:	b29b      	uxth	r3, r3
 801339e:	3305      	adds	r3, #5
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	031b      	lsls	r3, r3, #12
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	4313      	orrs	r3, r2
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f8 fb31 	bl	800ba18 <lwip_htons>
 80133b6:	4603      	mov	r3, r0
 80133b8:	461a      	mov	r2, r3
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80133be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7f8 fb29 	bl	800ba18 <lwip_htons>
 80133c6:	4603      	mov	r3, r0
 80133c8:	461a      	mov	r2, r3
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	2200      	movs	r2, #0
 80133d2:	741a      	strb	r2, [r3, #16]
 80133d4:	2200      	movs	r2, #0
 80133d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	2200      	movs	r2, #0
 80133dc:	749a      	strb	r2, [r3, #18]
 80133de:	2200      	movs	r2, #0
 80133e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80133e2:	697b      	ldr	r3, [r7, #20]
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3718      	adds	r7, #24
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	0801a65c 	.word	0x0801a65c
 80133f0:	0801ad34 	.word	0x0801ad34
 80133f4:	0801a6b0 	.word	0x0801a6b0

080133f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80133f8:	b5b0      	push	{r4, r5, r7, lr}
 80133fa:	b08a      	sub	sp, #40	; 0x28
 80133fc:	af04      	add	r7, sp, #16
 80133fe:	60f8      	str	r0, [r7, #12]
 8013400:	607b      	str	r3, [r7, #4]
 8013402:	460b      	mov	r3, r1
 8013404:	817b      	strh	r3, [r7, #10]
 8013406:	4613      	mov	r3, r2
 8013408:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d106      	bne.n	801341e <tcp_output_alloc_header+0x26>
 8013410:	4b15      	ldr	r3, [pc, #84]	; (8013468 <tcp_output_alloc_header+0x70>)
 8013412:	f240 7242 	movw	r2, #1858	; 0x742
 8013416:	4915      	ldr	r1, [pc, #84]	; (801346c <tcp_output_alloc_header+0x74>)
 8013418:	4815      	ldr	r0, [pc, #84]	; (8013470 <tcp_output_alloc_header+0x78>)
 801341a:	f003 fb17 	bl	8016a4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	8adb      	ldrh	r3, [r3, #22]
 8013426:	68fa      	ldr	r2, [r7, #12]
 8013428:	8b12      	ldrh	r2, [r2, #24]
 801342a:	68f9      	ldr	r1, [r7, #12]
 801342c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801342e:	893d      	ldrh	r5, [r7, #8]
 8013430:	897c      	ldrh	r4, [r7, #10]
 8013432:	9103      	str	r1, [sp, #12]
 8013434:	2110      	movs	r1, #16
 8013436:	9102      	str	r1, [sp, #8]
 8013438:	9201      	str	r2, [sp, #4]
 801343a:	9300      	str	r3, [sp, #0]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	462a      	mov	r2, r5
 8013440:	4621      	mov	r1, r4
 8013442:	f7ff ff67 	bl	8013314 <tcp_output_alloc_header_common>
 8013446:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d006      	beq.n	801345c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013456:	441a      	add	r2, r3
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801345c:	697b      	ldr	r3, [r7, #20]
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bdb0      	pop	{r4, r5, r7, pc}
 8013466:	bf00      	nop
 8013468:	0801a65c 	.word	0x0801a65c
 801346c:	0801ad64 	.word	0x0801ad64
 8013470:	0801a6b0 	.word	0x0801a6b0

08013474 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b088      	sub	sp, #32
 8013478:	af00      	add	r7, sp, #0
 801347a:	60f8      	str	r0, [r7, #12]
 801347c:	60b9      	str	r1, [r7, #8]
 801347e:	4611      	mov	r1, r2
 8013480:	461a      	mov	r2, r3
 8013482:	460b      	mov	r3, r1
 8013484:	71fb      	strb	r3, [r7, #7]
 8013486:	4613      	mov	r3, r2
 8013488:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801348a:	2300      	movs	r3, #0
 801348c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <tcp_output_fill_options+0x2e>
 8013494:	4b13      	ldr	r3, [pc, #76]	; (80134e4 <tcp_output_fill_options+0x70>)
 8013496:	f240 7256 	movw	r2, #1878	; 0x756
 801349a:	4913      	ldr	r1, [pc, #76]	; (80134e8 <tcp_output_fill_options+0x74>)
 801349c:	4813      	ldr	r0, [pc, #76]	; (80134ec <tcp_output_fill_options+0x78>)
 801349e:	f003 fad5 	bl	8016a4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	3314      	adds	r3, #20
 80134ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	f103 0214 	add.w	r2, r3, #20
 80134b4:	8bfb      	ldrh	r3, [r7, #30]
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4619      	mov	r1, r3
 80134ba:	79fb      	ldrb	r3, [r7, #7]
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	f003 0304 	and.w	r3, r3, #4
 80134c2:	440b      	add	r3, r1
 80134c4:	4413      	add	r3, r2
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d006      	beq.n	80134da <tcp_output_fill_options+0x66>
 80134cc:	4b05      	ldr	r3, [pc, #20]	; (80134e4 <tcp_output_fill_options+0x70>)
 80134ce:	f240 7275 	movw	r2, #1909	; 0x775
 80134d2:	4907      	ldr	r1, [pc, #28]	; (80134f0 <tcp_output_fill_options+0x7c>)
 80134d4:	4805      	ldr	r0, [pc, #20]	; (80134ec <tcp_output_fill_options+0x78>)
 80134d6:	f003 fab9 	bl	8016a4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80134da:	bf00      	nop
 80134dc:	3720      	adds	r7, #32
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	0801a65c 	.word	0x0801a65c
 80134e8:	0801ad8c 	.word	0x0801ad8c
 80134ec:	0801a6b0 	.word	0x0801a6b0
 80134f0:	0801ac84 	.word	0x0801ac84

080134f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08a      	sub	sp, #40	; 0x28
 80134f8:	af04      	add	r7, sp, #16
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d106      	bne.n	8013516 <tcp_output_control_segment+0x22>
 8013508:	4b1c      	ldr	r3, [pc, #112]	; (801357c <tcp_output_control_segment+0x88>)
 801350a:	f240 7287 	movw	r2, #1927	; 0x787
 801350e:	491c      	ldr	r1, [pc, #112]	; (8013580 <tcp_output_control_segment+0x8c>)
 8013510:	481c      	ldr	r0, [pc, #112]	; (8013584 <tcp_output_control_segment+0x90>)
 8013512:	f003 fa9b 	bl	8016a4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013516:	683a      	ldr	r2, [r7, #0]
 8013518:	6879      	ldr	r1, [r7, #4]
 801351a:	68f8      	ldr	r0, [r7, #12]
 801351c:	f7fe fae8 	bl	8011af0 <tcp_route>
 8013520:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d102      	bne.n	801352e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013528:	23fc      	movs	r3, #252	; 0xfc
 801352a:	75fb      	strb	r3, [r7, #23]
 801352c:	e01c      	b.n	8013568 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d006      	beq.n	8013542 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	7adb      	ldrb	r3, [r3, #11]
 8013538:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	7a9b      	ldrb	r3, [r3, #10]
 801353e:	757b      	strb	r3, [r7, #21]
 8013540:	e003      	b.n	801354a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013542:	23ff      	movs	r3, #255	; 0xff
 8013544:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801354a:	7dba      	ldrb	r2, [r7, #22]
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	9302      	str	r3, [sp, #8]
 8013550:	2306      	movs	r3, #6
 8013552:	9301      	str	r3, [sp, #4]
 8013554:	7d7b      	ldrb	r3, [r7, #21]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	4613      	mov	r3, r2
 801355a:	683a      	ldr	r2, [r7, #0]
 801355c:	6879      	ldr	r1, [r7, #4]
 801355e:	68b8      	ldr	r0, [r7, #8]
 8013560:	f001 ffa0 	bl	80154a4 <ip4_output_if>
 8013564:	4603      	mov	r3, r0
 8013566:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013568:	68b8      	ldr	r0, [r7, #8]
 801356a:	f7f9 fedf 	bl	800d32c <pbuf_free>
  return err;
 801356e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	0801a65c 	.word	0x0801a65c
 8013580:	0801adb4 	.word	0x0801adb4
 8013584:	0801a6b0 	.word	0x0801a6b0

08013588 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013588:	b590      	push	{r4, r7, lr}
 801358a:	b08b      	sub	sp, #44	; 0x2c
 801358c:	af04      	add	r7, sp, #16
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
 8013594:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d106      	bne.n	80135aa <tcp_rst+0x22>
 801359c:	4b1f      	ldr	r3, [pc, #124]	; (801361c <tcp_rst+0x94>)
 801359e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80135a2:	491f      	ldr	r1, [pc, #124]	; (8013620 <tcp_rst+0x98>)
 80135a4:	481f      	ldr	r0, [pc, #124]	; (8013624 <tcp_rst+0x9c>)
 80135a6:	f003 fa51 	bl	8016a4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <tcp_rst+0x36>
 80135b0:	4b1a      	ldr	r3, [pc, #104]	; (801361c <tcp_rst+0x94>)
 80135b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80135b6:	491c      	ldr	r1, [pc, #112]	; (8013628 <tcp_rst+0xa0>)
 80135b8:	481a      	ldr	r0, [pc, #104]	; (8013624 <tcp_rst+0x9c>)
 80135ba:	f003 fa47 	bl	8016a4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135be:	2300      	movs	r3, #0
 80135c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80135c2:	f246 0308 	movw	r3, #24584	; 0x6008
 80135c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80135c8:	7dfb      	ldrb	r3, [r7, #23]
 80135ca:	b29c      	uxth	r4, r3
 80135cc:	68b8      	ldr	r0, [r7, #8]
 80135ce:	f7f8 fa38 	bl	800ba42 <lwip_htonl>
 80135d2:	4602      	mov	r2, r0
 80135d4:	8abb      	ldrh	r3, [r7, #20]
 80135d6:	9303      	str	r3, [sp, #12]
 80135d8:	2314      	movs	r3, #20
 80135da:	9302      	str	r3, [sp, #8]
 80135dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135e2:	9300      	str	r3, [sp, #0]
 80135e4:	4613      	mov	r3, r2
 80135e6:	2200      	movs	r2, #0
 80135e8:	4621      	mov	r1, r4
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ff fe92 	bl	8013314 <tcp_output_alloc_header_common>
 80135f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d00c      	beq.n	8013612 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80135f8:	7dfb      	ldrb	r3, [r7, #23]
 80135fa:	2200      	movs	r2, #0
 80135fc:	6939      	ldr	r1, [r7, #16]
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f7ff ff38 	bl	8013474 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013606:	683a      	ldr	r2, [r7, #0]
 8013608:	6939      	ldr	r1, [r7, #16]
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7ff ff72 	bl	80134f4 <tcp_output_control_segment>
 8013610:	e000      	b.n	8013614 <tcp_rst+0x8c>
    return;
 8013612:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013614:	371c      	adds	r7, #28
 8013616:	46bd      	mov	sp, r7
 8013618:	bd90      	pop	{r4, r7, pc}
 801361a:	bf00      	nop
 801361c:	0801a65c 	.word	0x0801a65c
 8013620:	0801ade0 	.word	0x0801ade0
 8013624:	0801a6b0 	.word	0x0801a6b0
 8013628:	0801adfc 	.word	0x0801adfc

0801362c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801362c:	b590      	push	{r4, r7, lr}
 801362e:	b087      	sub	sp, #28
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013634:	2300      	movs	r3, #0
 8013636:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013638:	2300      	movs	r3, #0
 801363a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d106      	bne.n	8013650 <tcp_send_empty_ack+0x24>
 8013642:	4b28      	ldr	r3, [pc, #160]	; (80136e4 <tcp_send_empty_ack+0xb8>)
 8013644:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013648:	4927      	ldr	r1, [pc, #156]	; (80136e8 <tcp_send_empty_ack+0xbc>)
 801364a:	4828      	ldr	r0, [pc, #160]	; (80136ec <tcp_send_empty_ack+0xc0>)
 801364c:	f003 f9fe 	bl	8016a4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013650:	7dfb      	ldrb	r3, [r7, #23]
 8013652:	009b      	lsls	r3, r3, #2
 8013654:	b2db      	uxtb	r3, r3
 8013656:	f003 0304 	and.w	r3, r3, #4
 801365a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801365c:	7d7b      	ldrb	r3, [r7, #21]
 801365e:	b29c      	uxth	r4, r3
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013664:	4618      	mov	r0, r3
 8013666:	f7f8 f9ec 	bl	800ba42 <lwip_htonl>
 801366a:	4603      	mov	r3, r0
 801366c:	2200      	movs	r2, #0
 801366e:	4621      	mov	r1, r4
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7ff fec1 	bl	80133f8 <tcp_output_alloc_header>
 8013676:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d109      	bne.n	8013692 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	8b5b      	ldrh	r3, [r3, #26]
 8013682:	f043 0303 	orr.w	r3, r3, #3
 8013686:	b29a      	uxth	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801368c:	f06f 0301 	mvn.w	r3, #1
 8013690:	e023      	b.n	80136da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013692:	7dbb      	ldrb	r3, [r7, #22]
 8013694:	7dfa      	ldrb	r2, [r7, #23]
 8013696:	6939      	ldr	r1, [r7, #16]
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7ff feeb 	bl	8013474 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	3304      	adds	r3, #4
 80136a4:	6939      	ldr	r1, [r7, #16]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f7ff ff24 	bl	80134f4 <tcp_output_control_segment>
 80136ac:	4603      	mov	r3, r0
 80136ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80136b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d007      	beq.n	80136c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	8b5b      	ldrh	r3, [r3, #26]
 80136bc:	f043 0303 	orr.w	r3, r3, #3
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	835a      	strh	r2, [r3, #26]
 80136c6:	e006      	b.n	80136d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	8b5b      	ldrh	r3, [r3, #26]
 80136cc:	f023 0303 	bic.w	r3, r3, #3
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80136d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	371c      	adds	r7, #28
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd90      	pop	{r4, r7, pc}
 80136e2:	bf00      	nop
 80136e4:	0801a65c 	.word	0x0801a65c
 80136e8:	0801ae18 	.word	0x0801ae18
 80136ec:	0801a6b0 	.word	0x0801a6b0

080136f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80136f0:	b590      	push	{r4, r7, lr}
 80136f2:	b087      	sub	sp, #28
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136f8:	2300      	movs	r3, #0
 80136fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <tcp_keepalive+0x20>
 8013702:	4b18      	ldr	r3, [pc, #96]	; (8013764 <tcp_keepalive+0x74>)
 8013704:	f640 0224 	movw	r2, #2084	; 0x824
 8013708:	4917      	ldr	r1, [pc, #92]	; (8013768 <tcp_keepalive+0x78>)
 801370a:	4818      	ldr	r0, [pc, #96]	; (801376c <tcp_keepalive+0x7c>)
 801370c:	f003 f99e 	bl	8016a4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013710:	7dfb      	ldrb	r3, [r7, #23]
 8013712:	b29c      	uxth	r4, r3
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013718:	3b01      	subs	r3, #1
 801371a:	4618      	mov	r0, r3
 801371c:	f7f8 f991 	bl	800ba42 <lwip_htonl>
 8013720:	4603      	mov	r3, r0
 8013722:	2200      	movs	r2, #0
 8013724:	4621      	mov	r1, r4
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff fe66 	bl	80133f8 <tcp_output_alloc_header>
 801372c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d102      	bne.n	801373a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013738:	e010      	b.n	801375c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801373a:	7dfb      	ldrb	r3, [r7, #23]
 801373c:	2200      	movs	r2, #0
 801373e:	6939      	ldr	r1, [r7, #16]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ff fe97 	bl	8013474 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	3304      	adds	r3, #4
 801374c:	6939      	ldr	r1, [r7, #16]
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7ff fed0 	bl	80134f4 <tcp_output_control_segment>
 8013754:	4603      	mov	r3, r0
 8013756:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801375c:	4618      	mov	r0, r3
 801375e:	371c      	adds	r7, #28
 8013760:	46bd      	mov	sp, r7
 8013762:	bd90      	pop	{r4, r7, pc}
 8013764:	0801a65c 	.word	0x0801a65c
 8013768:	0801ae38 	.word	0x0801ae38
 801376c:	0801a6b0 	.word	0x0801a6b0

08013770 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b08b      	sub	sp, #44	; 0x2c
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013778:	2300      	movs	r3, #0
 801377a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d106      	bne.n	8013792 <tcp_zero_window_probe+0x22>
 8013784:	4b4c      	ldr	r3, [pc, #304]	; (80138b8 <tcp_zero_window_probe+0x148>)
 8013786:	f640 024f 	movw	r2, #2127	; 0x84f
 801378a:	494c      	ldr	r1, [pc, #304]	; (80138bc <tcp_zero_window_probe+0x14c>)
 801378c:	484c      	ldr	r0, [pc, #304]	; (80138c0 <tcp_zero_window_probe+0x150>)
 801378e:	f003 f95d 	bl	8016a4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013796:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013798:	6a3b      	ldr	r3, [r7, #32]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801379e:	2300      	movs	r3, #0
 80137a0:	e086      	b.n	80138b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80137a8:	2bff      	cmp	r3, #255	; 0xff
 80137aa:	d007      	beq.n	80137bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80137b2:	3301      	adds	r3, #1
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137bc:	6a3b      	ldr	r3, [r7, #32]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	899b      	ldrh	r3, [r3, #12]
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 f927 	bl	800ba18 <lwip_htons>
 80137ca:	4603      	mov	r3, r0
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	f003 0301 	and.w	r3, r3, #1
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d005      	beq.n	80137e2 <tcp_zero_window_probe+0x72>
 80137d6:	6a3b      	ldr	r3, [r7, #32]
 80137d8:	891b      	ldrh	r3, [r3, #8]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <tcp_zero_window_probe+0x72>
 80137de:	2301      	movs	r3, #1
 80137e0:	e000      	b.n	80137e4 <tcp_zero_window_probe+0x74>
 80137e2:	2300      	movs	r3, #0
 80137e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80137e6:	7ffb      	ldrb	r3, [r7, #31]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	bf0c      	ite	eq
 80137ec:	2301      	moveq	r3, #1
 80137ee:	2300      	movne	r3, #0
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80137f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137f8:	b299      	uxth	r1, r3
 80137fa:	6a3b      	ldr	r3, [r7, #32]
 80137fc:	68db      	ldr	r3, [r3, #12]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	8bba      	ldrh	r2, [r7, #28]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff fdf8 	bl	80133f8 <tcp_output_alloc_header>
 8013808:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d102      	bne.n	8013816 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013814:	e04c      	b.n	80138b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013816:	69bb      	ldr	r3, [r7, #24]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801381c:	7ffb      	ldrb	r3, [r7, #31]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d011      	beq.n	8013846 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	899b      	ldrh	r3, [r3, #12]
 8013826:	b29b      	uxth	r3, r3
 8013828:	b21b      	sxth	r3, r3
 801382a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801382e:	b21c      	sxth	r4, r3
 8013830:	2011      	movs	r0, #17
 8013832:	f7f8 f8f1 	bl	800ba18 <lwip_htons>
 8013836:	4603      	mov	r3, r0
 8013838:	b21b      	sxth	r3, r3
 801383a:	4323      	orrs	r3, r4
 801383c:	b21b      	sxth	r3, r3
 801383e:	b29a      	uxth	r2, r3
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	819a      	strh	r2, [r3, #12]
 8013844:	e010      	b.n	8013868 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	3314      	adds	r3, #20
 801384c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	6858      	ldr	r0, [r3, #4]
 8013852:	6a3b      	ldr	r3, [r7, #32]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	891a      	ldrh	r2, [r3, #8]
 8013858:	6a3b      	ldr	r3, [r7, #32]
 801385a:	891b      	ldrh	r3, [r3, #8]
 801385c:	1ad3      	subs	r3, r2, r3
 801385e:	b29b      	uxth	r3, r3
 8013860:	2201      	movs	r2, #1
 8013862:	6939      	ldr	r1, [r7, #16]
 8013864:	f7f9 ff58 	bl	800d718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013868:	6a3b      	ldr	r3, [r7, #32]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	f7f8 f8e7 	bl	800ba42 <lwip_htonl>
 8013874:	4603      	mov	r3, r0
 8013876:	3301      	adds	r3, #1
 8013878:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	2b00      	cmp	r3, #0
 8013884:	da02      	bge.n	801388c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801388c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013890:	2200      	movs	r2, #0
 8013892:	69b9      	ldr	r1, [r7, #24]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff fded 	bl	8013474 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	3304      	adds	r3, #4
 80138a0:	69b9      	ldr	r1, [r7, #24]
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7ff fe26 	bl	80134f4 <tcp_output_control_segment>
 80138a8:	4603      	mov	r3, r0
 80138aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80138ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	372c      	adds	r7, #44	; 0x2c
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd90      	pop	{r4, r7, pc}
 80138b8:	0801a65c 	.word	0x0801a65c
 80138bc:	0801ae54 	.word	0x0801ae54
 80138c0:	0801a6b0 	.word	0x0801a6b0

080138c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80138cc:	f7fa f812 	bl	800d8f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80138d0:	4b0a      	ldr	r3, [pc, #40]	; (80138fc <tcpip_tcp_timer+0x38>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d103      	bne.n	80138e0 <tcpip_tcp_timer+0x1c>
 80138d8:	4b09      	ldr	r3, [pc, #36]	; (8013900 <tcpip_tcp_timer+0x3c>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d005      	beq.n	80138ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80138e0:	2200      	movs	r2, #0
 80138e2:	4908      	ldr	r1, [pc, #32]	; (8013904 <tcpip_tcp_timer+0x40>)
 80138e4:	20fa      	movs	r0, #250	; 0xfa
 80138e6:	f000 f8f3 	bl	8013ad0 <sys_timeout>
 80138ea:	e003      	b.n	80138f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80138ec:	4b06      	ldr	r3, [pc, #24]	; (8013908 <tcpip_tcp_timer+0x44>)
 80138ee:	2200      	movs	r2, #0
 80138f0:	601a      	str	r2, [r3, #0]
  }
}
 80138f2:	bf00      	nop
 80138f4:	bf00      	nop
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	200136b0 	.word	0x200136b0
 8013900:	200136c0 	.word	0x200136c0
 8013904:	080138c5 	.word	0x080138c5
 8013908:	20005434 	.word	0x20005434

0801390c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <tcp_timer_needed+0x30>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10f      	bne.n	8013938 <tcp_timer_needed+0x2c>
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <tcp_timer_needed+0x34>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d103      	bne.n	8013928 <tcp_timer_needed+0x1c>
 8013920:	4b08      	ldr	r3, [pc, #32]	; (8013944 <tcp_timer_needed+0x38>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d007      	beq.n	8013938 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013928:	4b04      	ldr	r3, [pc, #16]	; (801393c <tcp_timer_needed+0x30>)
 801392a:	2201      	movs	r2, #1
 801392c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801392e:	2200      	movs	r2, #0
 8013930:	4905      	ldr	r1, [pc, #20]	; (8013948 <tcp_timer_needed+0x3c>)
 8013932:	20fa      	movs	r0, #250	; 0xfa
 8013934:	f000 f8cc 	bl	8013ad0 <sys_timeout>
  }
}
 8013938:	bf00      	nop
 801393a:	bd80      	pop	{r7, pc}
 801393c:	20005434 	.word	0x20005434
 8013940:	200136b0 	.word	0x200136b0
 8013944:	200136c0 	.word	0x200136c0
 8013948:	080138c5 	.word	0x080138c5

0801394c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013958:	200a      	movs	r0, #10
 801395a:	f7f8 fdf1 	bl	800c540 <memp_malloc>
 801395e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d109      	bne.n	801397a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d151      	bne.n	8013a10 <sys_timeout_abs+0xc4>
 801396c:	4b2a      	ldr	r3, [pc, #168]	; (8013a18 <sys_timeout_abs+0xcc>)
 801396e:	22be      	movs	r2, #190	; 0xbe
 8013970:	492a      	ldr	r1, [pc, #168]	; (8013a1c <sys_timeout_abs+0xd0>)
 8013972:	482b      	ldr	r0, [pc, #172]	; (8013a20 <sys_timeout_abs+0xd4>)
 8013974:	f003 f86a 	bl	8016a4c <iprintf>
    return;
 8013978:	e04a      	b.n	8013a10 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	2200      	movs	r2, #0
 801397e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	68ba      	ldr	r2, [r7, #8]
 8013984:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	68fa      	ldr	r2, [r7, #12]
 8013990:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013992:	4b24      	ldr	r3, [pc, #144]	; (8013a24 <sys_timeout_abs+0xd8>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d103      	bne.n	80139a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801399a:	4a22      	ldr	r2, [pc, #136]	; (8013a24 <sys_timeout_abs+0xd8>)
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	6013      	str	r3, [r2, #0]
    return;
 80139a0:	e037      	b.n	8013a12 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	685a      	ldr	r2, [r3, #4]
 80139a6:	4b1f      	ldr	r3, [pc, #124]	; (8013a24 <sys_timeout_abs+0xd8>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	0fdb      	lsrs	r3, r3, #31
 80139b0:	f003 0301 	and.w	r3, r3, #1
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d007      	beq.n	80139ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80139ba:	4b1a      	ldr	r3, [pc, #104]	; (8013a24 <sys_timeout_abs+0xd8>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80139c2:	4a18      	ldr	r2, [pc, #96]	; (8013a24 <sys_timeout_abs+0xd8>)
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	6013      	str	r3, [r2, #0]
 80139c8:	e023      	b.n	8013a12 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80139ca:	4b16      	ldr	r3, [pc, #88]	; (8013a24 <sys_timeout_abs+0xd8>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	617b      	str	r3, [r7, #20]
 80139d0:	e01a      	b.n	8013a08 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d00b      	beq.n	80139f2 <sys_timeout_abs+0xa6>
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	1ad3      	subs	r3, r2, r3
 80139e6:	0fdb      	lsrs	r3, r3, #31
 80139e8:	f003 0301 	and.w	r3, r3, #1
 80139ec:	b2db      	uxtb	r3, r3
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d007      	beq.n	8013a02 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	693a      	ldr	r2, [r7, #16]
 80139fe:	601a      	str	r2, [r3, #0]
        break;
 8013a00:	e007      	b.n	8013a12 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	617b      	str	r3, [r7, #20]
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1e1      	bne.n	80139d2 <sys_timeout_abs+0x86>
 8013a0e:	e000      	b.n	8013a12 <sys_timeout_abs+0xc6>
    return;
 8013a10:	bf00      	nop
      }
    }
  }
}
 8013a12:	3718      	adds	r7, #24
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	0801ae78 	.word	0x0801ae78
 8013a1c:	0801aeac 	.word	0x0801aeac
 8013a20:	0801aeec 	.word	0x0801aeec
 8013a24:	2000542c 	.word	0x2000542c

08013a28 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	4798      	blx	r3

  now = sys_now();
 8013a3a:	f7f1 ff93 	bl	8005964 <sys_now>
 8013a3e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	4b0f      	ldr	r3, [pc, #60]	; (8013a84 <lwip_cyclic_timer+0x5c>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	4413      	add	r3, r2
 8013a4a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	1ad3      	subs	r3, r2, r3
 8013a52:	0fdb      	lsrs	r3, r3, #31
 8013a54:	f003 0301 	and.w	r3, r3, #1
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d009      	beq.n	8013a72 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	681a      	ldr	r2, [r3, #0]
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	4413      	add	r3, r2
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	4907      	ldr	r1, [pc, #28]	; (8013a88 <lwip_cyclic_timer+0x60>)
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7ff ff6e 	bl	801394c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013a70:	e004      	b.n	8013a7c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	4904      	ldr	r1, [pc, #16]	; (8013a88 <lwip_cyclic_timer+0x60>)
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	f7ff ff68 	bl	801394c <sys_timeout_abs>
}
 8013a7c:	bf00      	nop
 8013a7e:	3718      	adds	r7, #24
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	20005430 	.word	0x20005430
 8013a88:	08013a29 	.word	0x08013a29

08013a8c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a92:	2301      	movs	r3, #1
 8013a94:	607b      	str	r3, [r7, #4]
 8013a96:	e00e      	b.n	8013ab6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013a98:	4a0b      	ldr	r2, [pc, #44]	; (8013ac8 <sys_timeouts_init+0x3c>)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	4a08      	ldr	r2, [pc, #32]	; (8013ac8 <sys_timeouts_init+0x3c>)
 8013aa6:	4413      	add	r3, r2
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	4908      	ldr	r1, [pc, #32]	; (8013acc <sys_timeouts_init+0x40>)
 8013aac:	f000 f810 	bl	8013ad0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	607b      	str	r3, [r7, #4]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2b02      	cmp	r3, #2
 8013aba:	d9ed      	bls.n	8013a98 <sys_timeouts_init+0xc>
  }
}
 8013abc:	bf00      	nop
 8013abe:	bf00      	nop
 8013ac0:	3708      	adds	r7, #8
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	080229f4 	.word	0x080229f4
 8013acc:	08013a29 	.word	0x08013a29

08013ad0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ae2:	d306      	bcc.n	8013af2 <sys_timeout+0x22>
 8013ae4:	4b0a      	ldr	r3, [pc, #40]	; (8013b10 <sys_timeout+0x40>)
 8013ae6:	f240 1229 	movw	r2, #297	; 0x129
 8013aea:	490a      	ldr	r1, [pc, #40]	; (8013b14 <sys_timeout+0x44>)
 8013aec:	480a      	ldr	r0, [pc, #40]	; (8013b18 <sys_timeout+0x48>)
 8013aee:	f002 ffad 	bl	8016a4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013af2:	f7f1 ff37 	bl	8005964 <sys_now>
 8013af6:	4602      	mov	r2, r0
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	4413      	add	r3, r2
 8013afc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	68b9      	ldr	r1, [r7, #8]
 8013b02:	6978      	ldr	r0, [r7, #20]
 8013b04:	f7ff ff22 	bl	801394c <sys_timeout_abs>
#endif
}
 8013b08:	bf00      	nop
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	0801ae78 	.word	0x0801ae78
 8013b14:	0801af14 	.word	0x0801af14
 8013b18:	0801aeec 	.word	0x0801aeec

08013b1c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b22:	f7f1 ff1f 	bl	8005964 <sys_now>
 8013b26:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013b28:	4b17      	ldr	r3, [pc, #92]	; (8013b88 <sys_check_timeouts+0x6c>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d022      	beq.n	8013b7a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	0fdb      	lsrs	r3, r3, #31
 8013b3e:	f003 0301 	and.w	r3, r3, #1
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d11a      	bne.n	8013b7e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	4a0e      	ldr	r2, [pc, #56]	; (8013b88 <sys_check_timeouts+0x6c>)
 8013b4e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	4a0a      	ldr	r2, [pc, #40]	; (8013b8c <sys_check_timeouts+0x70>)
 8013b62:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013b64:	68b9      	ldr	r1, [r7, #8]
 8013b66:	200a      	movs	r0, #10
 8013b68:	f7f8 fd3c 	bl	800c5e4 <memp_free>
    if (handler != NULL) {
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d0da      	beq.n	8013b28 <sys_check_timeouts+0xc>
      handler(arg);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6838      	ldr	r0, [r7, #0]
 8013b76:	4798      	blx	r3
  do {
 8013b78:	e7d6      	b.n	8013b28 <sys_check_timeouts+0xc>
      return;
 8013b7a:	bf00      	nop
 8013b7c:	e000      	b.n	8013b80 <sys_check_timeouts+0x64>
      return;
 8013b7e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	2000542c 	.word	0x2000542c
 8013b8c:	20005430 	.word	0x20005430

08013b90 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013b96:	4b16      	ldr	r3, [pc, #88]	; (8013bf0 <sys_timeouts_sleeptime+0x60>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d102      	bne.n	8013ba4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ba2:	e020      	b.n	8013be6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013ba4:	f7f1 fede 	bl	8005964 <sys_now>
 8013ba8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013baa:	4b11      	ldr	r3, [pc, #68]	; (8013bf0 <sys_timeouts_sleeptime+0x60>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	685a      	ldr	r2, [r3, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	0fdb      	lsrs	r3, r3, #31
 8013bb6:	f003 0301 	and.w	r3, r3, #1
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	e010      	b.n	8013be6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013bc4:	4b0a      	ldr	r3, [pc, #40]	; (8013bf0 <sys_timeouts_sleeptime+0x60>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	685a      	ldr	r2, [r3, #4]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	1ad3      	subs	r3, r2, r3
 8013bce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	da06      	bge.n	8013be4 <sys_timeouts_sleeptime+0x54>
 8013bd6:	4b07      	ldr	r3, [pc, #28]	; (8013bf4 <sys_timeouts_sleeptime+0x64>)
 8013bd8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013bdc:	4906      	ldr	r1, [pc, #24]	; (8013bf8 <sys_timeouts_sleeptime+0x68>)
 8013bde:	4807      	ldr	r0, [pc, #28]	; (8013bfc <sys_timeouts_sleeptime+0x6c>)
 8013be0:	f002 ff34 	bl	8016a4c <iprintf>
    return ret;
 8013be4:	683b      	ldr	r3, [r7, #0]
  }
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3708      	adds	r7, #8
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	2000542c 	.word	0x2000542c
 8013bf4:	0801ae78 	.word	0x0801ae78
 8013bf8:	0801af4c 	.word	0x0801af4c
 8013bfc:	0801aeec 	.word	0x0801aeec

08013c00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c04:	f002 ffb0 	bl	8016b68 <rand>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	4b01      	ldr	r3, [pc, #4]	; (8013c20 <udp_init+0x20>)
 8013c1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c1c:	bf00      	nop
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	200004b0 	.word	0x200004b0

08013c24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	4613      	mov	r3, r2
 8013c30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d105      	bne.n	8013c44 <udp_input_local_match+0x20>
 8013c38:	4b27      	ldr	r3, [pc, #156]	; (8013cd8 <udp_input_local_match+0xb4>)
 8013c3a:	2287      	movs	r2, #135	; 0x87
 8013c3c:	4927      	ldr	r1, [pc, #156]	; (8013cdc <udp_input_local_match+0xb8>)
 8013c3e:	4828      	ldr	r0, [pc, #160]	; (8013ce0 <udp_input_local_match+0xbc>)
 8013c40:	f002 ff04 	bl	8016a4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d105      	bne.n	8013c56 <udp_input_local_match+0x32>
 8013c4a:	4b23      	ldr	r3, [pc, #140]	; (8013cd8 <udp_input_local_match+0xb4>)
 8013c4c:	2288      	movs	r2, #136	; 0x88
 8013c4e:	4925      	ldr	r1, [pc, #148]	; (8013ce4 <udp_input_local_match+0xc0>)
 8013c50:	4823      	ldr	r0, [pc, #140]	; (8013ce0 <udp_input_local_match+0xbc>)
 8013c52:	f002 fefb 	bl	8016a4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	7a1b      	ldrb	r3, [r3, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00b      	beq.n	8013c76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	7a1a      	ldrb	r2, [r3, #8]
 8013c62:	4b21      	ldr	r3, [pc, #132]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d001      	beq.n	8013c76 <udp_input_local_match+0x52>
    return 0;
 8013c72:	2300      	movs	r3, #0
 8013c74:	e02b      	b.n	8013cce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d018      	beq.n	8013cae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d013      	beq.n	8013caa <udp_input_local_match+0x86>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00f      	beq.n	8013caa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c8a:	4b17      	ldr	r3, [pc, #92]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c92:	d00a      	beq.n	8013caa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	4b13      	ldr	r3, [pc, #76]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c9a:	695b      	ldr	r3, [r3, #20]
 8013c9c:	405a      	eors	r2, r3
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d110      	bne.n	8013ccc <udp_input_local_match+0xa8>
          return 1;
 8013caa:	2301      	movs	r3, #1
 8013cac:	e00f      	b.n	8013cce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d009      	beq.n	8013cc8 <udp_input_local_match+0xa4>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d005      	beq.n	8013cc8 <udp_input_local_match+0xa4>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013cc2:	695b      	ldr	r3, [r3, #20]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d101      	bne.n	8013ccc <udp_input_local_match+0xa8>
        return 1;
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e000      	b.n	8013cce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	0801af60 	.word	0x0801af60
 8013cdc:	0801af90 	.word	0x0801af90
 8013ce0:	0801afb4 	.word	0x0801afb4
 8013ce4:	0801afdc 	.word	0x0801afdc
 8013ce8:	2000fee0 	.word	0x2000fee0

08013cec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013cec:	b590      	push	{r4, r7, lr}
 8013cee:	b08d      	sub	sp, #52	; 0x34
 8013cf0:	af02      	add	r7, sp, #8
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d105      	bne.n	8013d0c <udp_input+0x20>
 8013d00:	4b7c      	ldr	r3, [pc, #496]	; (8013ef4 <udp_input+0x208>)
 8013d02:	22cf      	movs	r2, #207	; 0xcf
 8013d04:	497c      	ldr	r1, [pc, #496]	; (8013ef8 <udp_input+0x20c>)
 8013d06:	487d      	ldr	r0, [pc, #500]	; (8013efc <udp_input+0x210>)
 8013d08:	f002 fea0 	bl	8016a4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <udp_input+0x32>
 8013d12:	4b78      	ldr	r3, [pc, #480]	; (8013ef4 <udp_input+0x208>)
 8013d14:	22d0      	movs	r2, #208	; 0xd0
 8013d16:	497a      	ldr	r1, [pc, #488]	; (8013f00 <udp_input+0x214>)
 8013d18:	4878      	ldr	r0, [pc, #480]	; (8013efc <udp_input+0x210>)
 8013d1a:	f002 fe97 	bl	8016a4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	895b      	ldrh	r3, [r3, #10]
 8013d22:	2b07      	cmp	r3, #7
 8013d24:	d803      	bhi.n	8013d2e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7f9 fb00 	bl	800d32c <pbuf_free>
    goto end;
 8013d2c:	e0de      	b.n	8013eec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013d34:	4b73      	ldr	r3, [pc, #460]	; (8013f04 <udp_input+0x218>)
 8013d36:	695b      	ldr	r3, [r3, #20]
 8013d38:	4a72      	ldr	r2, [pc, #456]	; (8013f04 <udp_input+0x218>)
 8013d3a:	6812      	ldr	r2, [r2, #0]
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f001 fc88 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8013d44:	4603      	mov	r3, r0
 8013d46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f7 fe62 	bl	800ba18 <lwip_htons>
 8013d54:	4603      	mov	r3, r0
 8013d56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	885b      	ldrh	r3, [r3, #2]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f7 fe5a 	bl	800ba18 <lwip_htons>
 8013d64:	4603      	mov	r3, r0
 8013d66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d70:	2300      	movs	r3, #0
 8013d72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d74:	4b64      	ldr	r3, [pc, #400]	; (8013f08 <udp_input+0x21c>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	627b      	str	r3, [r7, #36]	; 0x24
 8013d7a:	e054      	b.n	8013e26 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7e:	8a5b      	ldrh	r3, [r3, #18]
 8013d80:	89fa      	ldrh	r2, [r7, #14]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d14a      	bne.n	8013e1c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d86:	7cfb      	ldrb	r3, [r7, #19]
 8013d88:	461a      	mov	r2, r3
 8013d8a:	6839      	ldr	r1, [r7, #0]
 8013d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d8e:	f7ff ff49 	bl	8013c24 <udp_input_local_match>
 8013d92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d041      	beq.n	8013e1c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	7c1b      	ldrb	r3, [r3, #16]
 8013d9c:	f003 0304 	and.w	r3, r3, #4
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d11d      	bne.n	8013de0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d102      	bne.n	8013db0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dac:	61fb      	str	r3, [r7, #28]
 8013dae:	e017      	b.n	8013de0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013db0:	7cfb      	ldrb	r3, [r7, #19]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d014      	beq.n	8013de0 <udp_input+0xf4>
 8013db6:	4b53      	ldr	r3, [pc, #332]	; (8013f04 <udp_input+0x218>)
 8013db8:	695b      	ldr	r3, [r3, #20]
 8013dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dbe:	d10f      	bne.n	8013de0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d008      	beq.n	8013de0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d101      	bne.n	8013de0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	8a9b      	ldrh	r3, [r3, #20]
 8013de4:	8a3a      	ldrh	r2, [r7, #16]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d118      	bne.n	8013e1c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d005      	beq.n	8013dfe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	685a      	ldr	r2, [r3, #4]
 8013df6:	4b43      	ldr	r3, [pc, #268]	; (8013f04 <udp_input+0x218>)
 8013df8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d10e      	bne.n	8013e1c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d014      	beq.n	8013e2e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	68da      	ldr	r2, [r3, #12]
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013e0c:	4b3e      	ldr	r3, [pc, #248]	; (8013f08 <udp_input+0x21c>)
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013e14:	4a3c      	ldr	r2, [pc, #240]	; (8013f08 <udp_input+0x21c>)
 8013e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e18:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013e1a:	e008      	b.n	8013e2e <udp_input+0x142>
      }
    }

    prev = pcb;
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	627b      	str	r3, [r7, #36]	; 0x24
 8013e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1a7      	bne.n	8013d7c <udp_input+0x90>
 8013e2c:	e000      	b.n	8013e30 <udp_input+0x144>
        break;
 8013e2e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d101      	bne.n	8013e3a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <udp_input+0x15a>
    for_us = 1;
 8013e40:	2301      	movs	r3, #1
 8013e42:	76fb      	strb	r3, [r7, #27]
 8013e44:	e00a      	b.n	8013e5c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	3304      	adds	r3, #4
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	4b2d      	ldr	r3, [pc, #180]	; (8013f04 <udp_input+0x218>)
 8013e4e:	695b      	ldr	r3, [r3, #20]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	bf0c      	ite	eq
 8013e54:	2301      	moveq	r3, #1
 8013e56:	2300      	movne	r3, #0
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013e5c:	7efb      	ldrb	r3, [r7, #27]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d041      	beq.n	8013ee6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e62:	2108      	movs	r1, #8
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7f9 f9db 	bl	800d220 <pbuf_remove_header>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d00a      	beq.n	8013e86 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e70:	4b20      	ldr	r3, [pc, #128]	; (8013ef4 <udp_input+0x208>)
 8013e72:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013e76:	4925      	ldr	r1, [pc, #148]	; (8013f0c <udp_input+0x220>)
 8013e78:	4820      	ldr	r0, [pc, #128]	; (8013efc <udp_input+0x210>)
 8013e7a:	f002 fde7 	bl	8016a4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7f9 fa54 	bl	800d32c <pbuf_free>
      goto end;
 8013e84:	e032      	b.n	8013eec <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d012      	beq.n	8013eb2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	699b      	ldr	r3, [r3, #24]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d00a      	beq.n	8013eaa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	699c      	ldr	r4, [r3, #24]
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	69d8      	ldr	r0, [r3, #28]
 8013e9c:	8a3b      	ldrh	r3, [r7, #16]
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	4b1b      	ldr	r3, [pc, #108]	; (8013f10 <udp_input+0x224>)
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ea6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013ea8:	e021      	b.n	8013eee <udp_input+0x202>
        pbuf_free(p);
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7f9 fa3e 	bl	800d32c <pbuf_free>
        goto end;
 8013eb0:	e01c      	b.n	8013eec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013eb2:	7cfb      	ldrb	r3, [r7, #19]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d112      	bne.n	8013ede <udp_input+0x1f2>
 8013eb8:	4b12      	ldr	r3, [pc, #72]	; (8013f04 <udp_input+0x218>)
 8013eba:	695b      	ldr	r3, [r3, #20]
 8013ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ec0:	2be0      	cmp	r3, #224	; 0xe0
 8013ec2:	d00c      	beq.n	8013ede <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ec4:	4b0f      	ldr	r3, [pc, #60]	; (8013f04 <udp_input+0x218>)
 8013ec6:	899b      	ldrh	r3, [r3, #12]
 8013ec8:	3308      	adds	r3, #8
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	b21b      	sxth	r3, r3
 8013ece:	4619      	mov	r1, r3
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f7f9 fa18 	bl	800d306 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ed6:	2103      	movs	r1, #3
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f001 f89b 	bl	8015014 <icmp_dest_unreach>
      pbuf_free(p);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7f9 fa24 	bl	800d32c <pbuf_free>
  return;
 8013ee4:	e003      	b.n	8013eee <udp_input+0x202>
    pbuf_free(p);
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7f9 fa20 	bl	800d32c <pbuf_free>
  return;
 8013eec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013eee:	372c      	adds	r7, #44	; 0x2c
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd90      	pop	{r4, r7, pc}
 8013ef4:	0801af60 	.word	0x0801af60
 8013ef8:	0801b004 	.word	0x0801b004
 8013efc:	0801afb4 	.word	0x0801afb4
 8013f00:	0801b01c 	.word	0x0801b01c
 8013f04:	2000fee0 	.word	0x2000fee0
 8013f08:	200136c8 	.word	0x200136c8
 8013f0c:	0801b038 	.word	0x0801b038
 8013f10:	2000fef0 	.word	0x2000fef0

08013f14 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b085      	sub	sp, #20
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d01e      	beq.n	8013f62 <udp_netif_ip_addr_changed+0x4e>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d01a      	beq.n	8013f62 <udp_netif_ip_addr_changed+0x4e>
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d017      	beq.n	8013f62 <udp_netif_ip_addr_changed+0x4e>
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d013      	beq.n	8013f62 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	; (8013f70 <udp_netif_ip_addr_changed+0x5c>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	60fb      	str	r3, [r7, #12]
 8013f40:	e00c      	b.n	8013f5c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d103      	bne.n	8013f56 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	60fb      	str	r3, [r7, #12]
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d1ef      	bne.n	8013f42 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013f62:	bf00      	nop
 8013f64:	3714      	adds	r7, #20
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop
 8013f70:	200136c8 	.word	0x200136c8

08013f74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f7c:	4915      	ldr	r1, [pc, #84]	; (8013fd4 <etharp_free_entry+0x60>)
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	4613      	mov	r3, r2
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	4413      	add	r3, r2
 8013f86:	00db      	lsls	r3, r3, #3
 8013f88:	440b      	add	r3, r1
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d013      	beq.n	8013fb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f90:	4910      	ldr	r1, [pc, #64]	; (8013fd4 <etharp_free_entry+0x60>)
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	4613      	mov	r3, r2
 8013f96:	005b      	lsls	r3, r3, #1
 8013f98:	4413      	add	r3, r2
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	440b      	add	r3, r1
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7f9 f9c3 	bl	800d32c <pbuf_free>
    arp_table[i].q = NULL;
 8013fa6:	490b      	ldr	r1, [pc, #44]	; (8013fd4 <etharp_free_entry+0x60>)
 8013fa8:	687a      	ldr	r2, [r7, #4]
 8013faa:	4613      	mov	r3, r2
 8013fac:	005b      	lsls	r3, r3, #1
 8013fae:	4413      	add	r3, r2
 8013fb0:	00db      	lsls	r3, r3, #3
 8013fb2:	440b      	add	r3, r1
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013fb8:	4906      	ldr	r1, [pc, #24]	; (8013fd4 <etharp_free_entry+0x60>)
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3314      	adds	r3, #20
 8013fc8:	2200      	movs	r2, #0
 8013fca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013fcc:	bf00      	nop
 8013fce:	3708      	adds	r7, #8
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	20005438 	.word	0x20005438

08013fd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fde:	2300      	movs	r3, #0
 8013fe0:	607b      	str	r3, [r7, #4]
 8013fe2:	e096      	b.n	8014112 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013fe4:	494f      	ldr	r1, [pc, #316]	; (8014124 <etharp_tmr+0x14c>)
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3314      	adds	r3, #20
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ff8:	78fb      	ldrb	r3, [r7, #3]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	f000 8086 	beq.w	801410c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014000:	4948      	ldr	r1, [pc, #288]	; (8014124 <etharp_tmr+0x14c>)
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	4613      	mov	r3, r2
 8014006:	005b      	lsls	r3, r3, #1
 8014008:	4413      	add	r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	440b      	add	r3, r1
 801400e:	3312      	adds	r3, #18
 8014010:	881b      	ldrh	r3, [r3, #0]
 8014012:	3301      	adds	r3, #1
 8014014:	b298      	uxth	r0, r3
 8014016:	4943      	ldr	r1, [pc, #268]	; (8014124 <etharp_tmr+0x14c>)
 8014018:	687a      	ldr	r2, [r7, #4]
 801401a:	4613      	mov	r3, r2
 801401c:	005b      	lsls	r3, r3, #1
 801401e:	4413      	add	r3, r2
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	440b      	add	r3, r1
 8014024:	3312      	adds	r3, #18
 8014026:	4602      	mov	r2, r0
 8014028:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801402a:	493e      	ldr	r1, [pc, #248]	; (8014124 <etharp_tmr+0x14c>)
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	4613      	mov	r3, r2
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	4413      	add	r3, r2
 8014034:	00db      	lsls	r3, r3, #3
 8014036:	440b      	add	r3, r1
 8014038:	3312      	adds	r3, #18
 801403a:	881b      	ldrh	r3, [r3, #0]
 801403c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014040:	d215      	bcs.n	801406e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014042:	4938      	ldr	r1, [pc, #224]	; (8014124 <etharp_tmr+0x14c>)
 8014044:	687a      	ldr	r2, [r7, #4]
 8014046:	4613      	mov	r3, r2
 8014048:	005b      	lsls	r3, r3, #1
 801404a:	4413      	add	r3, r2
 801404c:	00db      	lsls	r3, r3, #3
 801404e:	440b      	add	r3, r1
 8014050:	3314      	adds	r3, #20
 8014052:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014054:	2b01      	cmp	r3, #1
 8014056:	d10e      	bne.n	8014076 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014058:	4932      	ldr	r1, [pc, #200]	; (8014124 <etharp_tmr+0x14c>)
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	4613      	mov	r3, r2
 801405e:	005b      	lsls	r3, r3, #1
 8014060:	4413      	add	r3, r2
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	440b      	add	r3, r1
 8014066:	3312      	adds	r3, #18
 8014068:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801406a:	2b04      	cmp	r3, #4
 801406c:	d903      	bls.n	8014076 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f7ff ff80 	bl	8013f74 <etharp_free_entry>
 8014074:	e04a      	b.n	801410c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014076:	492b      	ldr	r1, [pc, #172]	; (8014124 <etharp_tmr+0x14c>)
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4613      	mov	r3, r2
 801407c:	005b      	lsls	r3, r3, #1
 801407e:	4413      	add	r3, r2
 8014080:	00db      	lsls	r3, r3, #3
 8014082:	440b      	add	r3, r1
 8014084:	3314      	adds	r3, #20
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	2b03      	cmp	r3, #3
 801408a:	d10a      	bne.n	80140a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801408c:	4925      	ldr	r1, [pc, #148]	; (8014124 <etharp_tmr+0x14c>)
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	4613      	mov	r3, r2
 8014092:	005b      	lsls	r3, r3, #1
 8014094:	4413      	add	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	440b      	add	r3, r1
 801409a:	3314      	adds	r3, #20
 801409c:	2204      	movs	r2, #4
 801409e:	701a      	strb	r2, [r3, #0]
 80140a0:	e034      	b.n	801410c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80140a2:	4920      	ldr	r1, [pc, #128]	; (8014124 <etharp_tmr+0x14c>)
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	3314      	adds	r3, #20
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	2b04      	cmp	r3, #4
 80140b6:	d10a      	bne.n	80140ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80140b8:	491a      	ldr	r1, [pc, #104]	; (8014124 <etharp_tmr+0x14c>)
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	4613      	mov	r3, r2
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	4413      	add	r3, r2
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	440b      	add	r3, r1
 80140c6:	3314      	adds	r3, #20
 80140c8:	2202      	movs	r2, #2
 80140ca:	701a      	strb	r2, [r3, #0]
 80140cc:	e01e      	b.n	801410c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140ce:	4915      	ldr	r1, [pc, #84]	; (8014124 <etharp_tmr+0x14c>)
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	4613      	mov	r3, r2
 80140d4:	005b      	lsls	r3, r3, #1
 80140d6:	4413      	add	r3, r2
 80140d8:	00db      	lsls	r3, r3, #3
 80140da:	440b      	add	r3, r1
 80140dc:	3314      	adds	r3, #20
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d113      	bne.n	801410c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80140e4:	490f      	ldr	r1, [pc, #60]	; (8014124 <etharp_tmr+0x14c>)
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	4613      	mov	r3, r2
 80140ea:	005b      	lsls	r3, r3, #1
 80140ec:	4413      	add	r3, r2
 80140ee:	00db      	lsls	r3, r3, #3
 80140f0:	440b      	add	r3, r1
 80140f2:	3308      	adds	r3, #8
 80140f4:	6818      	ldr	r0, [r3, #0]
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	4613      	mov	r3, r2
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4413      	add	r3, r2
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	4a08      	ldr	r2, [pc, #32]	; (8014124 <etharp_tmr+0x14c>)
 8014102:	4413      	add	r3, r2
 8014104:	3304      	adds	r3, #4
 8014106:	4619      	mov	r1, r3
 8014108:	f000 fe6e 	bl	8014de8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	3301      	adds	r3, #1
 8014110:	607b      	str	r3, [r7, #4]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2b09      	cmp	r3, #9
 8014116:	f77f af65 	ble.w	8013fe4 <etharp_tmr+0xc>
      }
    }
  }
}
 801411a:	bf00      	nop
 801411c:	bf00      	nop
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	20005438 	.word	0x20005438

08014128 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08a      	sub	sp, #40	; 0x28
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	460b      	mov	r3, r1
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014136:	230a      	movs	r3, #10
 8014138:	84fb      	strh	r3, [r7, #38]	; 0x26
 801413a:	230a      	movs	r3, #10
 801413c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801413e:	230a      	movs	r3, #10
 8014140:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014146:	230a      	movs	r3, #10
 8014148:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801414a:	2300      	movs	r3, #0
 801414c:	83bb      	strh	r3, [r7, #28]
 801414e:	2300      	movs	r3, #0
 8014150:	837b      	strh	r3, [r7, #26]
 8014152:	2300      	movs	r3, #0
 8014154:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014156:	2300      	movs	r3, #0
 8014158:	843b      	strh	r3, [r7, #32]
 801415a:	e0ae      	b.n	80142ba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801415c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014160:	49a6      	ldr	r1, [pc, #664]	; (80143fc <etharp_find_entry+0x2d4>)
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	3314      	adds	r3, #20
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014172:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014176:	2b0a      	cmp	r3, #10
 8014178:	d105      	bne.n	8014186 <etharp_find_entry+0x5e>
 801417a:	7dfb      	ldrb	r3, [r7, #23]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014180:	8c3b      	ldrh	r3, [r7, #32]
 8014182:	847b      	strh	r3, [r7, #34]	; 0x22
 8014184:	e095      	b.n	80142b2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014186:	7dfb      	ldrb	r3, [r7, #23]
 8014188:	2b00      	cmp	r3, #0
 801418a:	f000 8092 	beq.w	80142b2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801418e:	7dfb      	ldrb	r3, [r7, #23]
 8014190:	2b01      	cmp	r3, #1
 8014192:	d009      	beq.n	80141a8 <etharp_find_entry+0x80>
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	2b01      	cmp	r3, #1
 8014198:	d806      	bhi.n	80141a8 <etharp_find_entry+0x80>
 801419a:	4b99      	ldr	r3, [pc, #612]	; (8014400 <etharp_find_entry+0x2d8>)
 801419c:	f240 1223 	movw	r2, #291	; 0x123
 80141a0:	4998      	ldr	r1, [pc, #608]	; (8014404 <etharp_find_entry+0x2dc>)
 80141a2:	4899      	ldr	r0, [pc, #612]	; (8014408 <etharp_find_entry+0x2e0>)
 80141a4:	f002 fc52 	bl	8016a4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d020      	beq.n	80141f0 <etharp_find_entry+0xc8>
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	6819      	ldr	r1, [r3, #0]
 80141b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b6:	4891      	ldr	r0, [pc, #580]	; (80143fc <etharp_find_entry+0x2d4>)
 80141b8:	4613      	mov	r3, r2
 80141ba:	005b      	lsls	r3, r3, #1
 80141bc:	4413      	add	r3, r2
 80141be:	00db      	lsls	r3, r3, #3
 80141c0:	4403      	add	r3, r0
 80141c2:	3304      	adds	r3, #4
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4299      	cmp	r1, r3
 80141c8:	d112      	bne.n	80141f0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d00c      	beq.n	80141ea <etharp_find_entry+0xc2>
 80141d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d4:	4989      	ldr	r1, [pc, #548]	; (80143fc <etharp_find_entry+0x2d4>)
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	440b      	add	r3, r1
 80141e0:	3308      	adds	r3, #8
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d102      	bne.n	80141f0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80141ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141ee:	e100      	b.n	80143f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80141f0:	7dfb      	ldrb	r3, [r7, #23]
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d140      	bne.n	8014278 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141fa:	4980      	ldr	r1, [pc, #512]	; (80143fc <etharp_find_entry+0x2d4>)
 80141fc:	4613      	mov	r3, r2
 80141fe:	005b      	lsls	r3, r3, #1
 8014200:	4413      	add	r3, r2
 8014202:	00db      	lsls	r3, r3, #3
 8014204:	440b      	add	r3, r1
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d01a      	beq.n	8014242 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801420c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014210:	497a      	ldr	r1, [pc, #488]	; (80143fc <etharp_find_entry+0x2d4>)
 8014212:	4613      	mov	r3, r2
 8014214:	005b      	lsls	r3, r3, #1
 8014216:	4413      	add	r3, r2
 8014218:	00db      	lsls	r3, r3, #3
 801421a:	440b      	add	r3, r1
 801421c:	3312      	adds	r3, #18
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	8bba      	ldrh	r2, [r7, #28]
 8014222:	429a      	cmp	r2, r3
 8014224:	d845      	bhi.n	80142b2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014226:	8c3b      	ldrh	r3, [r7, #32]
 8014228:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801422a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801422e:	4973      	ldr	r1, [pc, #460]	; (80143fc <etharp_find_entry+0x2d4>)
 8014230:	4613      	mov	r3, r2
 8014232:	005b      	lsls	r3, r3, #1
 8014234:	4413      	add	r3, r2
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	440b      	add	r3, r1
 801423a:	3312      	adds	r3, #18
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	83bb      	strh	r3, [r7, #28]
 8014240:	e037      	b.n	80142b2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014242:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014246:	496d      	ldr	r1, [pc, #436]	; (80143fc <etharp_find_entry+0x2d4>)
 8014248:	4613      	mov	r3, r2
 801424a:	005b      	lsls	r3, r3, #1
 801424c:	4413      	add	r3, r2
 801424e:	00db      	lsls	r3, r3, #3
 8014250:	440b      	add	r3, r1
 8014252:	3312      	adds	r3, #18
 8014254:	881b      	ldrh	r3, [r3, #0]
 8014256:	8b7a      	ldrh	r2, [r7, #26]
 8014258:	429a      	cmp	r2, r3
 801425a:	d82a      	bhi.n	80142b2 <etharp_find_entry+0x18a>
            old_pending = i;
 801425c:	8c3b      	ldrh	r3, [r7, #32]
 801425e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014264:	4965      	ldr	r1, [pc, #404]	; (80143fc <etharp_find_entry+0x2d4>)
 8014266:	4613      	mov	r3, r2
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	4413      	add	r3, r2
 801426c:	00db      	lsls	r3, r3, #3
 801426e:	440b      	add	r3, r1
 8014270:	3312      	adds	r3, #18
 8014272:	881b      	ldrh	r3, [r3, #0]
 8014274:	837b      	strh	r3, [r7, #26]
 8014276:	e01c      	b.n	80142b2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014278:	7dfb      	ldrb	r3, [r7, #23]
 801427a:	2b01      	cmp	r3, #1
 801427c:	d919      	bls.n	80142b2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801427e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014282:	495e      	ldr	r1, [pc, #376]	; (80143fc <etharp_find_entry+0x2d4>)
 8014284:	4613      	mov	r3, r2
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	4413      	add	r3, r2
 801428a:	00db      	lsls	r3, r3, #3
 801428c:	440b      	add	r3, r1
 801428e:	3312      	adds	r3, #18
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	8b3a      	ldrh	r2, [r7, #24]
 8014294:	429a      	cmp	r2, r3
 8014296:	d80c      	bhi.n	80142b2 <etharp_find_entry+0x18a>
            old_stable = i;
 8014298:	8c3b      	ldrh	r3, [r7, #32]
 801429a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801429c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142a0:	4956      	ldr	r1, [pc, #344]	; (80143fc <etharp_find_entry+0x2d4>)
 80142a2:	4613      	mov	r3, r2
 80142a4:	005b      	lsls	r3, r3, #1
 80142a6:	4413      	add	r3, r2
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	440b      	add	r3, r1
 80142ac:	3312      	adds	r3, #18
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142b2:	8c3b      	ldrh	r3, [r7, #32]
 80142b4:	3301      	adds	r3, #1
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	843b      	strh	r3, [r7, #32]
 80142ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142be:	2b09      	cmp	r3, #9
 80142c0:	f77f af4c 	ble.w	801415c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80142c4:	7afb      	ldrb	r3, [r7, #11]
 80142c6:	f003 0302 	and.w	r3, r3, #2
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d108      	bne.n	80142e0 <etharp_find_entry+0x1b8>
 80142ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142d2:	2b0a      	cmp	r3, #10
 80142d4:	d107      	bne.n	80142e6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80142d6:	7afb      	ldrb	r3, [r7, #11]
 80142d8:	f003 0301 	and.w	r3, r3, #1
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d102      	bne.n	80142e6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80142e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142e4:	e085      	b.n	80143f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80142e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142ea:	2b09      	cmp	r3, #9
 80142ec:	dc02      	bgt.n	80142f4 <etharp_find_entry+0x1cc>
    i = empty;
 80142ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142f0:	843b      	strh	r3, [r7, #32]
 80142f2:	e039      	b.n	8014368 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80142f8:	2b09      	cmp	r3, #9
 80142fa:	dc14      	bgt.n	8014326 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142fe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014304:	493d      	ldr	r1, [pc, #244]	; (80143fc <etharp_find_entry+0x2d4>)
 8014306:	4613      	mov	r3, r2
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	4413      	add	r3, r2
 801430c:	00db      	lsls	r3, r3, #3
 801430e:	440b      	add	r3, r1
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d018      	beq.n	8014348 <etharp_find_entry+0x220>
 8014316:	4b3a      	ldr	r3, [pc, #232]	; (8014400 <etharp_find_entry+0x2d8>)
 8014318:	f240 126d 	movw	r2, #365	; 0x16d
 801431c:	493b      	ldr	r1, [pc, #236]	; (801440c <etharp_find_entry+0x2e4>)
 801431e:	483a      	ldr	r0, [pc, #232]	; (8014408 <etharp_find_entry+0x2e0>)
 8014320:	f002 fb94 	bl	8016a4c <iprintf>
 8014324:	e010      	b.n	8014348 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014326:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801432a:	2b09      	cmp	r3, #9
 801432c:	dc02      	bgt.n	8014334 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801432e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014330:	843b      	strh	r3, [r7, #32]
 8014332:	e009      	b.n	8014348 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014334:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014338:	2b09      	cmp	r3, #9
 801433a:	dc02      	bgt.n	8014342 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801433c:	8bfb      	ldrh	r3, [r7, #30]
 801433e:	843b      	strh	r3, [r7, #32]
 8014340:	e002      	b.n	8014348 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014346:	e054      	b.n	80143f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801434c:	2b09      	cmp	r3, #9
 801434e:	dd06      	ble.n	801435e <etharp_find_entry+0x236>
 8014350:	4b2b      	ldr	r3, [pc, #172]	; (8014400 <etharp_find_entry+0x2d8>)
 8014352:	f240 127f 	movw	r2, #383	; 0x17f
 8014356:	492e      	ldr	r1, [pc, #184]	; (8014410 <etharp_find_entry+0x2e8>)
 8014358:	482b      	ldr	r0, [pc, #172]	; (8014408 <etharp_find_entry+0x2e0>)
 801435a:	f002 fb77 	bl	8016a4c <iprintf>
    etharp_free_entry(i);
 801435e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff fe06 	bl	8013f74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014368:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801436c:	2b09      	cmp	r3, #9
 801436e:	dd06      	ble.n	801437e <etharp_find_entry+0x256>
 8014370:	4b23      	ldr	r3, [pc, #140]	; (8014400 <etharp_find_entry+0x2d8>)
 8014372:	f240 1283 	movw	r2, #387	; 0x183
 8014376:	4926      	ldr	r1, [pc, #152]	; (8014410 <etharp_find_entry+0x2e8>)
 8014378:	4823      	ldr	r0, [pc, #140]	; (8014408 <etharp_find_entry+0x2e0>)
 801437a:	f002 fb67 	bl	8016a4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801437e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014382:	491e      	ldr	r1, [pc, #120]	; (80143fc <etharp_find_entry+0x2d4>)
 8014384:	4613      	mov	r3, r2
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	4413      	add	r3, r2
 801438a:	00db      	lsls	r3, r3, #3
 801438c:	440b      	add	r3, r1
 801438e:	3314      	adds	r3, #20
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d006      	beq.n	80143a4 <etharp_find_entry+0x27c>
 8014396:	4b1a      	ldr	r3, [pc, #104]	; (8014400 <etharp_find_entry+0x2d8>)
 8014398:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801439c:	491d      	ldr	r1, [pc, #116]	; (8014414 <etharp_find_entry+0x2ec>)
 801439e:	481a      	ldr	r0, [pc, #104]	; (8014408 <etharp_find_entry+0x2e0>)
 80143a0:	f002 fb54 	bl	8016a4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00b      	beq.n	80143c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80143aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	6819      	ldr	r1, [r3, #0]
 80143b2:	4812      	ldr	r0, [pc, #72]	; (80143fc <etharp_find_entry+0x2d4>)
 80143b4:	4613      	mov	r3, r2
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	4413      	add	r3, r2
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	4403      	add	r3, r0
 80143be:	3304      	adds	r3, #4
 80143c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80143c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143c6:	490d      	ldr	r1, [pc, #52]	; (80143fc <etharp_find_entry+0x2d4>)
 80143c8:	4613      	mov	r3, r2
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	4413      	add	r3, r2
 80143ce:	00db      	lsls	r3, r3, #3
 80143d0:	440b      	add	r3, r1
 80143d2:	3312      	adds	r3, #18
 80143d4:	2200      	movs	r2, #0
 80143d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80143d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143dc:	4907      	ldr	r1, [pc, #28]	; (80143fc <etharp_find_entry+0x2d4>)
 80143de:	4613      	mov	r3, r2
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	4413      	add	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	440b      	add	r3, r1
 80143e8:	3308      	adds	r3, #8
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80143ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3728      	adds	r7, #40	; 0x28
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	20005438 	.word	0x20005438
 8014400:	0801b2c4 	.word	0x0801b2c4
 8014404:	0801b2fc 	.word	0x0801b2fc
 8014408:	0801b33c 	.word	0x0801b33c
 801440c:	0801b364 	.word	0x0801b364
 8014410:	0801b37c 	.word	0x0801b37c
 8014414:	0801b390 	.word	0x0801b390

08014418 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b088      	sub	sp, #32
 801441c:	af02      	add	r7, sp, #8
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801442c:	2b06      	cmp	r3, #6
 801442e:	d006      	beq.n	801443e <etharp_update_arp_entry+0x26>
 8014430:	4b48      	ldr	r3, [pc, #288]	; (8014554 <etharp_update_arp_entry+0x13c>)
 8014432:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014436:	4948      	ldr	r1, [pc, #288]	; (8014558 <etharp_update_arp_entry+0x140>)
 8014438:	4848      	ldr	r0, [pc, #288]	; (801455c <etharp_update_arp_entry+0x144>)
 801443a:	f002 fb07 	bl	8016a4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d012      	beq.n	801446a <etharp_update_arp_entry+0x52>
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00e      	beq.n	801446a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68f9      	ldr	r1, [r7, #12]
 8014452:	4618      	mov	r0, r3
 8014454:	f001 f8fe 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8014458:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801445a:	2b00      	cmp	r3, #0
 801445c:	d105      	bne.n	801446a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014466:	2be0      	cmp	r3, #224	; 0xe0
 8014468:	d102      	bne.n	8014470 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801446a:	f06f 030f 	mvn.w	r3, #15
 801446e:	e06c      	b.n	801454a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014470:	78fb      	ldrb	r3, [r7, #3]
 8014472:	68fa      	ldr	r2, [r7, #12]
 8014474:	4619      	mov	r1, r3
 8014476:	68b8      	ldr	r0, [r7, #8]
 8014478:	f7ff fe56 	bl	8014128 <etharp_find_entry>
 801447c:	4603      	mov	r3, r0
 801447e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014480:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014484:	2b00      	cmp	r3, #0
 8014486:	da02      	bge.n	801448e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014488:	8afb      	ldrh	r3, [r7, #22]
 801448a:	b25b      	sxtb	r3, r3
 801448c:	e05d      	b.n	801454a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801448e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014492:	4933      	ldr	r1, [pc, #204]	; (8014560 <etharp_update_arp_entry+0x148>)
 8014494:	4613      	mov	r3, r2
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	440b      	add	r3, r1
 801449e:	3314      	adds	r3, #20
 80144a0:	2202      	movs	r2, #2
 80144a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80144a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144a8:	492d      	ldr	r1, [pc, #180]	; (8014560 <etharp_update_arp_entry+0x148>)
 80144aa:	4613      	mov	r3, r2
 80144ac:	005b      	lsls	r3, r3, #1
 80144ae:	4413      	add	r3, r2
 80144b0:	00db      	lsls	r3, r3, #3
 80144b2:	440b      	add	r3, r1
 80144b4:	3308      	adds	r3, #8
 80144b6:	68fa      	ldr	r2, [r7, #12]
 80144b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80144ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144be:	4613      	mov	r3, r2
 80144c0:	005b      	lsls	r3, r3, #1
 80144c2:	4413      	add	r3, r2
 80144c4:	00db      	lsls	r3, r3, #3
 80144c6:	3308      	adds	r3, #8
 80144c8:	4a25      	ldr	r2, [pc, #148]	; (8014560 <etharp_update_arp_entry+0x148>)
 80144ca:	4413      	add	r3, r2
 80144cc:	3304      	adds	r3, #4
 80144ce:	2206      	movs	r2, #6
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	f002 fa2f 	bl	8016936 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144dc:	4920      	ldr	r1, [pc, #128]	; (8014560 <etharp_update_arp_entry+0x148>)
 80144de:	4613      	mov	r3, r2
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	4413      	add	r3, r2
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	440b      	add	r3, r1
 80144e8:	3312      	adds	r3, #18
 80144ea:	2200      	movs	r2, #0
 80144ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80144ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144f2:	491b      	ldr	r1, [pc, #108]	; (8014560 <etharp_update_arp_entry+0x148>)
 80144f4:	4613      	mov	r3, r2
 80144f6:	005b      	lsls	r3, r3, #1
 80144f8:	4413      	add	r3, r2
 80144fa:	00db      	lsls	r3, r3, #3
 80144fc:	440b      	add	r3, r1
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d021      	beq.n	8014548 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014504:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014508:	4915      	ldr	r1, [pc, #84]	; (8014560 <etharp_update_arp_entry+0x148>)
 801450a:	4613      	mov	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	4413      	add	r3, r2
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	440b      	add	r3, r1
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014518:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801451c:	4910      	ldr	r1, [pc, #64]	; (8014560 <etharp_update_arp_entry+0x148>)
 801451e:	4613      	mov	r3, r2
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	4413      	add	r3, r2
 8014524:	00db      	lsls	r3, r3, #3
 8014526:	440b      	add	r3, r1
 8014528:	2200      	movs	r2, #0
 801452a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6939      	ldr	r1, [r7, #16]
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f001 ff91 	bl	8016464 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014542:	6938      	ldr	r0, [r7, #16]
 8014544:	f7f8 fef2 	bl	800d32c <pbuf_free>
  }
  return ERR_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3718      	adds	r7, #24
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	0801b2c4 	.word	0x0801b2c4
 8014558:	0801b3bc 	.word	0x0801b3bc
 801455c:	0801b33c 	.word	0x0801b33c
 8014560:	20005438 	.word	0x20005438

08014564 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801456c:	2300      	movs	r3, #0
 801456e:	60fb      	str	r3, [r7, #12]
 8014570:	e01e      	b.n	80145b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014572:	4913      	ldr	r1, [pc, #76]	; (80145c0 <etharp_cleanup_netif+0x5c>)
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	4613      	mov	r3, r2
 8014578:	005b      	lsls	r3, r3, #1
 801457a:	4413      	add	r3, r2
 801457c:	00db      	lsls	r3, r3, #3
 801457e:	440b      	add	r3, r1
 8014580:	3314      	adds	r3, #20
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014586:	7afb      	ldrb	r3, [r7, #11]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d00e      	beq.n	80145aa <etharp_cleanup_netif+0x46>
 801458c:	490c      	ldr	r1, [pc, #48]	; (80145c0 <etharp_cleanup_netif+0x5c>)
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	4613      	mov	r3, r2
 8014592:	005b      	lsls	r3, r3, #1
 8014594:	4413      	add	r3, r2
 8014596:	00db      	lsls	r3, r3, #3
 8014598:	440b      	add	r3, r1
 801459a:	3308      	adds	r3, #8
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d102      	bne.n	80145aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f7ff fce5 	bl	8013f74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	3301      	adds	r3, #1
 80145ae:	60fb      	str	r3, [r7, #12]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2b09      	cmp	r3, #9
 80145b4:	dddd      	ble.n	8014572 <etharp_cleanup_netif+0xe>
    }
  }
}
 80145b6:	bf00      	nop
 80145b8:	bf00      	nop
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	20005438 	.word	0x20005438

080145c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80145c4:	b5b0      	push	{r4, r5, r7, lr}
 80145c6:	b08a      	sub	sp, #40	; 0x28
 80145c8:	af04      	add	r7, sp, #16
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d107      	bne.n	80145e4 <etharp_input+0x20>
 80145d4:	4b3d      	ldr	r3, [pc, #244]	; (80146cc <etharp_input+0x108>)
 80145d6:	f240 228a 	movw	r2, #650	; 0x28a
 80145da:	493d      	ldr	r1, [pc, #244]	; (80146d0 <etharp_input+0x10c>)
 80145dc:	483d      	ldr	r0, [pc, #244]	; (80146d4 <etharp_input+0x110>)
 80145de:	f002 fa35 	bl	8016a4c <iprintf>
 80145e2:	e06f      	b.n	80146c4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	881b      	ldrh	r3, [r3, #0]
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145f4:	d10c      	bne.n	8014610 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145fa:	2b06      	cmp	r3, #6
 80145fc:	d108      	bne.n	8014610 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014602:	2b04      	cmp	r3, #4
 8014604:	d104      	bne.n	8014610 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	885b      	ldrh	r3, [r3, #2]
 801460a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801460c:	2b08      	cmp	r3, #8
 801460e:	d003      	beq.n	8014618 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7f8 fe8b 	bl	800d32c <pbuf_free>
    return;
 8014616:	e055      	b.n	80146c4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	330e      	adds	r3, #14
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	3318      	adds	r3, #24
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	3304      	adds	r3, #4
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d102      	bne.n	8014638 <etharp_input+0x74>
    for_us = 0;
 8014632:	2300      	movs	r3, #0
 8014634:	75fb      	strb	r3, [r7, #23]
 8014636:	e009      	b.n	801464c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	3304      	adds	r3, #4
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	429a      	cmp	r2, r3
 8014642:	bf0c      	ite	eq
 8014644:	2301      	moveq	r3, #1
 8014646:	2300      	movne	r3, #0
 8014648:	b2db      	uxtb	r3, r3
 801464a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	f103 0208 	add.w	r2, r3, #8
 8014652:	7dfb      	ldrb	r3, [r7, #23]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d001      	beq.n	801465c <etharp_input+0x98>
 8014658:	2301      	movs	r3, #1
 801465a:	e000      	b.n	801465e <etharp_input+0x9a>
 801465c:	2302      	movs	r3, #2
 801465e:	f107 010c 	add.w	r1, r7, #12
 8014662:	6838      	ldr	r0, [r7, #0]
 8014664:	f7ff fed8 	bl	8014418 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	88db      	ldrh	r3, [r3, #6]
 801466c:	b29b      	uxth	r3, r3
 801466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014672:	d003      	beq.n	801467c <etharp_input+0xb8>
 8014674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014678:	d01e      	beq.n	80146b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801467a:	e020      	b.n	80146be <etharp_input+0xfa>
      if (for_us) {
 801467c:	7dfb      	ldrb	r3, [r7, #23]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d01c      	beq.n	80146bc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014698:	693a      	ldr	r2, [r7, #16]
 801469a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801469c:	2102      	movs	r1, #2
 801469e:	9103      	str	r1, [sp, #12]
 80146a0:	f107 010c 	add.w	r1, r7, #12
 80146a4:	9102      	str	r1, [sp, #8]
 80146a6:	9201      	str	r2, [sp, #4]
 80146a8:	9300      	str	r3, [sp, #0]
 80146aa:	462b      	mov	r3, r5
 80146ac:	4622      	mov	r2, r4
 80146ae:	4601      	mov	r1, r0
 80146b0:	6838      	ldr	r0, [r7, #0]
 80146b2:	f000 faeb 	bl	8014c8c <etharp_raw>
      break;
 80146b6:	e001      	b.n	80146bc <etharp_input+0xf8>
      break;
 80146b8:	bf00      	nop
 80146ba:	e000      	b.n	80146be <etharp_input+0xfa>
      break;
 80146bc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f7f8 fe34 	bl	800d32c <pbuf_free>
}
 80146c4:	3718      	adds	r7, #24
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bdb0      	pop	{r4, r5, r7, pc}
 80146ca:	bf00      	nop
 80146cc:	0801b2c4 	.word	0x0801b2c4
 80146d0:	0801b414 	.word	0x0801b414
 80146d4:	0801b33c 	.word	0x0801b33c

080146d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af02      	add	r7, sp, #8
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	4613      	mov	r3, r2
 80146e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80146e6:	79fa      	ldrb	r2, [r7, #7]
 80146e8:	4944      	ldr	r1, [pc, #272]	; (80147fc <etharp_output_to_arp_index+0x124>)
 80146ea:	4613      	mov	r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	440b      	add	r3, r1
 80146f4:	3314      	adds	r3, #20
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	d806      	bhi.n	801470a <etharp_output_to_arp_index+0x32>
 80146fc:	4b40      	ldr	r3, [pc, #256]	; (8014800 <etharp_output_to_arp_index+0x128>)
 80146fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014702:	4940      	ldr	r1, [pc, #256]	; (8014804 <etharp_output_to_arp_index+0x12c>)
 8014704:	4840      	ldr	r0, [pc, #256]	; (8014808 <etharp_output_to_arp_index+0x130>)
 8014706:	f002 f9a1 	bl	8016a4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801470a:	79fa      	ldrb	r2, [r7, #7]
 801470c:	493b      	ldr	r1, [pc, #236]	; (80147fc <etharp_output_to_arp_index+0x124>)
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	00db      	lsls	r3, r3, #3
 8014716:	440b      	add	r3, r1
 8014718:	3314      	adds	r3, #20
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	2b02      	cmp	r3, #2
 801471e:	d153      	bne.n	80147c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014720:	79fa      	ldrb	r2, [r7, #7]
 8014722:	4936      	ldr	r1, [pc, #216]	; (80147fc <etharp_output_to_arp_index+0x124>)
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	440b      	add	r3, r1
 801472e:	3312      	adds	r3, #18
 8014730:	881b      	ldrh	r3, [r3, #0]
 8014732:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014736:	d919      	bls.n	801476c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014738:	79fa      	ldrb	r2, [r7, #7]
 801473a:	4613      	mov	r3, r2
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4413      	add	r3, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	4a2e      	ldr	r2, [pc, #184]	; (80147fc <etharp_output_to_arp_index+0x124>)
 8014744:	4413      	add	r3, r2
 8014746:	3304      	adds	r3, #4
 8014748:	4619      	mov	r1, r3
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f000 fb4c 	bl	8014de8 <etharp_request>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d138      	bne.n	80147c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014756:	79fa      	ldrb	r2, [r7, #7]
 8014758:	4928      	ldr	r1, [pc, #160]	; (80147fc <etharp_output_to_arp_index+0x124>)
 801475a:	4613      	mov	r3, r2
 801475c:	005b      	lsls	r3, r3, #1
 801475e:	4413      	add	r3, r2
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	440b      	add	r3, r1
 8014764:	3314      	adds	r3, #20
 8014766:	2203      	movs	r2, #3
 8014768:	701a      	strb	r2, [r3, #0]
 801476a:	e02d      	b.n	80147c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801476c:	79fa      	ldrb	r2, [r7, #7]
 801476e:	4923      	ldr	r1, [pc, #140]	; (80147fc <etharp_output_to_arp_index+0x124>)
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	3312      	adds	r3, #18
 801477c:	881b      	ldrh	r3, [r3, #0]
 801477e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014782:	d321      	bcc.n	80147c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014784:	79fa      	ldrb	r2, [r7, #7]
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	4a1b      	ldr	r2, [pc, #108]	; (80147fc <etharp_output_to_arp_index+0x124>)
 8014790:	4413      	add	r3, r2
 8014792:	1d19      	adds	r1, r3, #4
 8014794:	79fa      	ldrb	r2, [r7, #7]
 8014796:	4613      	mov	r3, r2
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	4413      	add	r3, r2
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	3308      	adds	r3, #8
 80147a0:	4a16      	ldr	r2, [pc, #88]	; (80147fc <etharp_output_to_arp_index+0x124>)
 80147a2:	4413      	add	r3, r2
 80147a4:	3304      	adds	r3, #4
 80147a6:	461a      	mov	r2, r3
 80147a8:	68f8      	ldr	r0, [r7, #12]
 80147aa:	f000 fafb 	bl	8014da4 <etharp_request_dst>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d109      	bne.n	80147c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147b4:	79fa      	ldrb	r2, [r7, #7]
 80147b6:	4911      	ldr	r1, [pc, #68]	; (80147fc <etharp_output_to_arp_index+0x124>)
 80147b8:	4613      	mov	r3, r2
 80147ba:	005b      	lsls	r3, r3, #1
 80147bc:	4413      	add	r3, r2
 80147be:	00db      	lsls	r3, r3, #3
 80147c0:	440b      	add	r3, r1
 80147c2:	3314      	adds	r3, #20
 80147c4:	2203      	movs	r2, #3
 80147c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80147ce:	79fa      	ldrb	r2, [r7, #7]
 80147d0:	4613      	mov	r3, r2
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	4413      	add	r3, r2
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	3308      	adds	r3, #8
 80147da:	4a08      	ldr	r2, [pc, #32]	; (80147fc <etharp_output_to_arp_index+0x124>)
 80147dc:	4413      	add	r3, r2
 80147de:	3304      	adds	r3, #4
 80147e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80147e4:	9200      	str	r2, [sp, #0]
 80147e6:	460a      	mov	r2, r1
 80147e8:	68b9      	ldr	r1, [r7, #8]
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f001 fe3a 	bl	8016464 <ethernet_output>
 80147f0:	4603      	mov	r3, r0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3710      	adds	r7, #16
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	20005438 	.word	0x20005438
 8014800:	0801b2c4 	.word	0x0801b2c4
 8014804:	0801b434 	.word	0x0801b434
 8014808:	0801b33c 	.word	0x0801b33c

0801480c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af02      	add	r7, sp, #8
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d106      	bne.n	8014830 <etharp_output+0x24>
 8014822:	4b73      	ldr	r3, [pc, #460]	; (80149f0 <etharp_output+0x1e4>)
 8014824:	f240 321e 	movw	r2, #798	; 0x31e
 8014828:	4972      	ldr	r1, [pc, #456]	; (80149f4 <etharp_output+0x1e8>)
 801482a:	4873      	ldr	r0, [pc, #460]	; (80149f8 <etharp_output+0x1ec>)
 801482c:	f002 f90e 	bl	8016a4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <etharp_output+0x38>
 8014836:	4b6e      	ldr	r3, [pc, #440]	; (80149f0 <etharp_output+0x1e4>)
 8014838:	f240 321f 	movw	r2, #799	; 0x31f
 801483c:	496f      	ldr	r1, [pc, #444]	; (80149fc <etharp_output+0x1f0>)
 801483e:	486e      	ldr	r0, [pc, #440]	; (80149f8 <etharp_output+0x1ec>)
 8014840:	f002 f904 	bl	8016a4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d106      	bne.n	8014858 <etharp_output+0x4c>
 801484a:	4b69      	ldr	r3, [pc, #420]	; (80149f0 <etharp_output+0x1e4>)
 801484c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014850:	496b      	ldr	r1, [pc, #428]	; (8014a00 <etharp_output+0x1f4>)
 8014852:	4869      	ldr	r0, [pc, #420]	; (80149f8 <etharp_output+0x1ec>)
 8014854:	f002 f8fa 	bl	8016a4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	68f9      	ldr	r1, [r7, #12]
 801485e:	4618      	mov	r0, r3
 8014860:	f000 fef8 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	d002      	beq.n	8014870 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801486a:	4b66      	ldr	r3, [pc, #408]	; (8014a04 <etharp_output+0x1f8>)
 801486c:	61fb      	str	r3, [r7, #28]
 801486e:	e0af      	b.n	80149d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014878:	2be0      	cmp	r3, #224	; 0xe0
 801487a:	d118      	bne.n	80148ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801487c:	2301      	movs	r3, #1
 801487e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014880:	2300      	movs	r3, #0
 8014882:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014884:	235e      	movs	r3, #94	; 0x5e
 8014886:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	3301      	adds	r3, #1
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014892:	b2db      	uxtb	r3, r3
 8014894:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	3302      	adds	r3, #2
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	3303      	adds	r3, #3
 80148a2:	781b      	ldrb	r3, [r3, #0]
 80148a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80148a6:	f107 0310 	add.w	r3, r7, #16
 80148aa:	61fb      	str	r3, [r7, #28]
 80148ac:	e090      	b.n	80149d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3304      	adds	r3, #4
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	405a      	eors	r2, r3
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	3308      	adds	r3, #8
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4013      	ands	r3, r2
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d012      	beq.n	80148ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80148d0:	4293      	cmp	r3, r2
 80148d2:	d00b      	beq.n	80148ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	330c      	adds	r3, #12
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d003      	beq.n	80148e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	330c      	adds	r3, #12
 80148e2:	61bb      	str	r3, [r7, #24]
 80148e4:	e002      	b.n	80148ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80148e6:	f06f 0303 	mvn.w	r3, #3
 80148ea:	e07d      	b.n	80149e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148ec:	4b46      	ldr	r3, [pc, #280]	; (8014a08 <etharp_output+0x1fc>)
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	4619      	mov	r1, r3
 80148f2:	4a46      	ldr	r2, [pc, #280]	; (8014a0c <etharp_output+0x200>)
 80148f4:	460b      	mov	r3, r1
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	440b      	add	r3, r1
 80148fa:	00db      	lsls	r3, r3, #3
 80148fc:	4413      	add	r3, r2
 80148fe:	3314      	adds	r3, #20
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	2b01      	cmp	r3, #1
 8014904:	d925      	bls.n	8014952 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014906:	4b40      	ldr	r3, [pc, #256]	; (8014a08 <etharp_output+0x1fc>)
 8014908:	781b      	ldrb	r3, [r3, #0]
 801490a:	4619      	mov	r1, r3
 801490c:	4a3f      	ldr	r2, [pc, #252]	; (8014a0c <etharp_output+0x200>)
 801490e:	460b      	mov	r3, r1
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	440b      	add	r3, r1
 8014914:	00db      	lsls	r3, r3, #3
 8014916:	4413      	add	r3, r2
 8014918:	3308      	adds	r3, #8
 801491a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	429a      	cmp	r2, r3
 8014920:	d117      	bne.n	8014952 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014922:	69bb      	ldr	r3, [r7, #24]
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	4b38      	ldr	r3, [pc, #224]	; (8014a08 <etharp_output+0x1fc>)
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	4618      	mov	r0, r3
 801492c:	4937      	ldr	r1, [pc, #220]	; (8014a0c <etharp_output+0x200>)
 801492e:	4603      	mov	r3, r0
 8014930:	005b      	lsls	r3, r3, #1
 8014932:	4403      	add	r3, r0
 8014934:	00db      	lsls	r3, r3, #3
 8014936:	440b      	add	r3, r1
 8014938:	3304      	adds	r3, #4
 801493a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801493c:	429a      	cmp	r2, r3
 801493e:	d108      	bne.n	8014952 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014940:	4b31      	ldr	r3, [pc, #196]	; (8014a08 <etharp_output+0x1fc>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	461a      	mov	r2, r3
 8014946:	68b9      	ldr	r1, [r7, #8]
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f7ff fec5 	bl	80146d8 <etharp_output_to_arp_index>
 801494e:	4603      	mov	r3, r0
 8014950:	e04a      	b.n	80149e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014952:	2300      	movs	r3, #0
 8014954:	75fb      	strb	r3, [r7, #23]
 8014956:	e031      	b.n	80149bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014958:	7dfa      	ldrb	r2, [r7, #23]
 801495a:	492c      	ldr	r1, [pc, #176]	; (8014a0c <etharp_output+0x200>)
 801495c:	4613      	mov	r3, r2
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	4413      	add	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	440b      	add	r3, r1
 8014966:	3314      	adds	r3, #20
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	2b01      	cmp	r3, #1
 801496c:	d923      	bls.n	80149b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801496e:	7dfa      	ldrb	r2, [r7, #23]
 8014970:	4926      	ldr	r1, [pc, #152]	; (8014a0c <etharp_output+0x200>)
 8014972:	4613      	mov	r3, r2
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	4413      	add	r3, r2
 8014978:	00db      	lsls	r3, r3, #3
 801497a:	440b      	add	r3, r1
 801497c:	3308      	adds	r3, #8
 801497e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014980:	68fa      	ldr	r2, [r7, #12]
 8014982:	429a      	cmp	r2, r3
 8014984:	d117      	bne.n	80149b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	6819      	ldr	r1, [r3, #0]
 801498a:	7dfa      	ldrb	r2, [r7, #23]
 801498c:	481f      	ldr	r0, [pc, #124]	; (8014a0c <etharp_output+0x200>)
 801498e:	4613      	mov	r3, r2
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	4413      	add	r3, r2
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	4403      	add	r3, r0
 8014998:	3304      	adds	r3, #4
 801499a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801499c:	4299      	cmp	r1, r3
 801499e:	d10a      	bne.n	80149b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80149a0:	4a19      	ldr	r2, [pc, #100]	; (8014a08 <etharp_output+0x1fc>)
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80149a6:	7dfb      	ldrb	r3, [r7, #23]
 80149a8:	461a      	mov	r2, r3
 80149aa:	68b9      	ldr	r1, [r7, #8]
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f7ff fe93 	bl	80146d8 <etharp_output_to_arp_index>
 80149b2:	4603      	mov	r3, r0
 80149b4:	e018      	b.n	80149e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149b6:	7dfb      	ldrb	r3, [r7, #23]
 80149b8:	3301      	adds	r3, #1
 80149ba:	75fb      	strb	r3, [r7, #23]
 80149bc:	7dfb      	ldrb	r3, [r7, #23]
 80149be:	2b09      	cmp	r3, #9
 80149c0:	d9ca      	bls.n	8014958 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80149c2:	68ba      	ldr	r2, [r7, #8]
 80149c4:	69b9      	ldr	r1, [r7, #24]
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f000 f822 	bl	8014a10 <etharp_query>
 80149cc:	4603      	mov	r3, r0
 80149ce:	e00b      	b.n	80149e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80149d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	69fb      	ldr	r3, [r7, #28]
 80149de:	68b9      	ldr	r1, [r7, #8]
 80149e0:	68f8      	ldr	r0, [r7, #12]
 80149e2:	f001 fd3f 	bl	8016464 <ethernet_output>
 80149e6:	4603      	mov	r3, r0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3720      	adds	r7, #32
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	0801b2c4 	.word	0x0801b2c4
 80149f4:	0801b414 	.word	0x0801b414
 80149f8:	0801b33c 	.word	0x0801b33c
 80149fc:	0801b464 	.word	0x0801b464
 8014a00:	0801b404 	.word	0x0801b404
 8014a04:	08022a10 	.word	0x08022a10
 8014a08:	20005528 	.word	0x20005528
 8014a0c:	20005438 	.word	0x20005438

08014a10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b08c      	sub	sp, #48	; 0x30
 8014a14:	af02      	add	r7, sp, #8
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	60b9      	str	r1, [r7, #8]
 8014a1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	3326      	adds	r3, #38	; 0x26
 8014a20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014a22:	23ff      	movs	r3, #255	; 0xff
 8014a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	68f9      	ldr	r1, [r7, #12]
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 fe0e 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d10c      	bne.n	8014a58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a46:	2be0      	cmp	r3, #224	; 0xe0
 8014a48:	d006      	beq.n	8014a58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d003      	beq.n	8014a58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d102      	bne.n	8014a5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a58:	f06f 030f 	mvn.w	r3, #15
 8014a5c:	e101      	b.n	8014c62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	2101      	movs	r1, #1
 8014a62:	68b8      	ldr	r0, [r7, #8]
 8014a64:	f7ff fb60 	bl	8014128 <etharp_find_entry>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	da02      	bge.n	8014a7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a74:	8a7b      	ldrh	r3, [r7, #18]
 8014a76:	b25b      	sxtb	r3, r3
 8014a78:	e0f3      	b.n	8014c62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a7a:	8a7b      	ldrh	r3, [r7, #18]
 8014a7c:	2b7e      	cmp	r3, #126	; 0x7e
 8014a7e:	d906      	bls.n	8014a8e <etharp_query+0x7e>
 8014a80:	4b7a      	ldr	r3, [pc, #488]	; (8014c6c <etharp_query+0x25c>)
 8014a82:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014a86:	497a      	ldr	r1, [pc, #488]	; (8014c70 <etharp_query+0x260>)
 8014a88:	487a      	ldr	r0, [pc, #488]	; (8014c74 <etharp_query+0x264>)
 8014a8a:	f001 ffdf 	bl	8016a4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a8e:	8a7b      	ldrh	r3, [r7, #18]
 8014a90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a92:	7c7a      	ldrb	r2, [r7, #17]
 8014a94:	4978      	ldr	r1, [pc, #480]	; (8014c78 <etharp_query+0x268>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3314      	adds	r3, #20
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d115      	bne.n	8014ad4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014aac:	7c7a      	ldrb	r2, [r7, #17]
 8014aae:	4972      	ldr	r1, [pc, #456]	; (8014c78 <etharp_query+0x268>)
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	4413      	add	r3, r2
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	440b      	add	r3, r1
 8014aba:	3314      	adds	r3, #20
 8014abc:	2201      	movs	r2, #1
 8014abe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014ac0:	7c7a      	ldrb	r2, [r7, #17]
 8014ac2:	496d      	ldr	r1, [pc, #436]	; (8014c78 <etharp_query+0x268>)
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	440b      	add	r3, r1
 8014ace:	3308      	adds	r3, #8
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ad4:	7c7a      	ldrb	r2, [r7, #17]
 8014ad6:	4968      	ldr	r1, [pc, #416]	; (8014c78 <etharp_query+0x268>)
 8014ad8:	4613      	mov	r3, r2
 8014ada:	005b      	lsls	r3, r3, #1
 8014adc:	4413      	add	r3, r2
 8014ade:	00db      	lsls	r3, r3, #3
 8014ae0:	440b      	add	r3, r1
 8014ae2:	3314      	adds	r3, #20
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	2b01      	cmp	r3, #1
 8014ae8:	d011      	beq.n	8014b0e <etharp_query+0xfe>
 8014aea:	7c7a      	ldrb	r2, [r7, #17]
 8014aec:	4962      	ldr	r1, [pc, #392]	; (8014c78 <etharp_query+0x268>)
 8014aee:	4613      	mov	r3, r2
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	4413      	add	r3, r2
 8014af4:	00db      	lsls	r3, r3, #3
 8014af6:	440b      	add	r3, r1
 8014af8:	3314      	adds	r3, #20
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d806      	bhi.n	8014b0e <etharp_query+0xfe>
 8014b00:	4b5a      	ldr	r3, [pc, #360]	; (8014c6c <etharp_query+0x25c>)
 8014b02:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014b06:	495d      	ldr	r1, [pc, #372]	; (8014c7c <etharp_query+0x26c>)
 8014b08:	485a      	ldr	r0, [pc, #360]	; (8014c74 <etharp_query+0x264>)
 8014b0a:	f001 ff9f 	bl	8016a4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014b0e:	6a3b      	ldr	r3, [r7, #32]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d102      	bne.n	8014b1a <etharp_query+0x10a>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d10c      	bne.n	8014b34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b1a:	68b9      	ldr	r1, [r7, #8]
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 f963 	bl	8014de8 <etharp_request>
 8014b22:	4603      	mov	r3, r0
 8014b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d102      	bne.n	8014b34 <etharp_query+0x124>
      return result;
 8014b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b32:	e096      	b.n	8014c62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d106      	bne.n	8014b48 <etharp_query+0x138>
 8014b3a:	4b4c      	ldr	r3, [pc, #304]	; (8014c6c <etharp_query+0x25c>)
 8014b3c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014b40:	494f      	ldr	r1, [pc, #316]	; (8014c80 <etharp_query+0x270>)
 8014b42:	484c      	ldr	r0, [pc, #304]	; (8014c74 <etharp_query+0x264>)
 8014b44:	f001 ff82 	bl	8016a4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b48:	7c7a      	ldrb	r2, [r7, #17]
 8014b4a:	494b      	ldr	r1, [pc, #300]	; (8014c78 <etharp_query+0x268>)
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	005b      	lsls	r3, r3, #1
 8014b50:	4413      	add	r3, r2
 8014b52:	00db      	lsls	r3, r3, #3
 8014b54:	440b      	add	r3, r1
 8014b56:	3314      	adds	r3, #20
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	d917      	bls.n	8014b8e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b5e:	4a49      	ldr	r2, [pc, #292]	; (8014c84 <etharp_query+0x274>)
 8014b60:	7c7b      	ldrb	r3, [r7, #17]
 8014b62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b64:	7c7a      	ldrb	r2, [r7, #17]
 8014b66:	4613      	mov	r3, r2
 8014b68:	005b      	lsls	r3, r3, #1
 8014b6a:	4413      	add	r3, r2
 8014b6c:	00db      	lsls	r3, r3, #3
 8014b6e:	3308      	adds	r3, #8
 8014b70:	4a41      	ldr	r2, [pc, #260]	; (8014c78 <etharp_query+0x268>)
 8014b72:	4413      	add	r3, r2
 8014b74:	3304      	adds	r3, #4
 8014b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b7a:	9200      	str	r2, [sp, #0]
 8014b7c:	697a      	ldr	r2, [r7, #20]
 8014b7e:	6879      	ldr	r1, [r7, #4]
 8014b80:	68f8      	ldr	r0, [r7, #12]
 8014b82:	f001 fc6f 	bl	8016464 <ethernet_output>
 8014b86:	4603      	mov	r3, r0
 8014b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b8c:	e067      	b.n	8014c5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b8e:	7c7a      	ldrb	r2, [r7, #17]
 8014b90:	4939      	ldr	r1, [pc, #228]	; (8014c78 <etharp_query+0x268>)
 8014b92:	4613      	mov	r3, r2
 8014b94:	005b      	lsls	r3, r3, #1
 8014b96:	4413      	add	r3, r2
 8014b98:	00db      	lsls	r3, r3, #3
 8014b9a:	440b      	add	r3, r1
 8014b9c:	3314      	adds	r3, #20
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d15c      	bne.n	8014c5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014bac:	e01c      	b.n	8014be8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	895a      	ldrh	r2, [r3, #10]
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	891b      	ldrh	r3, [r3, #8]
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d10a      	bne.n	8014bd0 <etharp_query+0x1c0>
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d006      	beq.n	8014bd0 <etharp_query+0x1c0>
 8014bc2:	4b2a      	ldr	r3, [pc, #168]	; (8014c6c <etharp_query+0x25c>)
 8014bc4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014bc8:	492f      	ldr	r1, [pc, #188]	; (8014c88 <etharp_query+0x278>)
 8014bca:	482a      	ldr	r0, [pc, #168]	; (8014c74 <etharp_query+0x264>)
 8014bcc:	f001 ff3e 	bl	8016a4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	7b1b      	ldrb	r3, [r3, #12]
 8014bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d002      	beq.n	8014be2 <etharp_query+0x1d2>
        copy_needed = 1;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	61bb      	str	r3, [r7, #24]
        break;
 8014be0:	e005      	b.n	8014bee <etharp_query+0x1de>
      }
      p = p->next;
 8014be2:	69fb      	ldr	r3, [r7, #28]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d1df      	bne.n	8014bae <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d007      	beq.n	8014c04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014bfa:	200e      	movs	r0, #14
 8014bfc:	f7f8 fdfe 	bl	800d7fc <pbuf_clone>
 8014c00:	61f8      	str	r0, [r7, #28]
 8014c02:	e004      	b.n	8014c0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014c08:	69f8      	ldr	r0, [r7, #28]
 8014c0a:	f7f8 fc35 	bl	800d478 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014c0e:	69fb      	ldr	r3, [r7, #28]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d021      	beq.n	8014c58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c14:	7c7a      	ldrb	r2, [r7, #17]
 8014c16:	4918      	ldr	r1, [pc, #96]	; (8014c78 <etharp_query+0x268>)
 8014c18:	4613      	mov	r3, r2
 8014c1a:	005b      	lsls	r3, r3, #1
 8014c1c:	4413      	add	r3, r2
 8014c1e:	00db      	lsls	r3, r3, #3
 8014c20:	440b      	add	r3, r1
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d00a      	beq.n	8014c3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014c28:	7c7a      	ldrb	r2, [r7, #17]
 8014c2a:	4913      	ldr	r1, [pc, #76]	; (8014c78 <etharp_query+0x268>)
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	005b      	lsls	r3, r3, #1
 8014c30:	4413      	add	r3, r2
 8014c32:	00db      	lsls	r3, r3, #3
 8014c34:	440b      	add	r3, r1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7f8 fb77 	bl	800d32c <pbuf_free>
      }
      arp_table[i].q = p;
 8014c3e:	7c7a      	ldrb	r2, [r7, #17]
 8014c40:	490d      	ldr	r1, [pc, #52]	; (8014c78 <etharp_query+0x268>)
 8014c42:	4613      	mov	r3, r2
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	4413      	add	r3, r2
 8014c48:	00db      	lsls	r3, r3, #3
 8014c4a:	440b      	add	r3, r1
 8014c4c:	69fa      	ldr	r2, [r7, #28]
 8014c4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c50:	2300      	movs	r3, #0
 8014c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c56:	e002      	b.n	8014c5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c58:	23ff      	movs	r3, #255	; 0xff
 8014c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3728      	adds	r7, #40	; 0x28
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	0801b2c4 	.word	0x0801b2c4
 8014c70:	0801b470 	.word	0x0801b470
 8014c74:	0801b33c 	.word	0x0801b33c
 8014c78:	20005438 	.word	0x20005438
 8014c7c:	0801b480 	.word	0x0801b480
 8014c80:	0801b464 	.word	0x0801b464
 8014c84:	20005528 	.word	0x20005528
 8014c88:	0801b4a8 	.word	0x0801b4a8

08014c8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b08a      	sub	sp, #40	; 0x28
 8014c90:	af02      	add	r7, sp, #8
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	607a      	str	r2, [r7, #4]
 8014c98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d106      	bne.n	8014cb2 <etharp_raw+0x26>
 8014ca4:	4b3a      	ldr	r3, [pc, #232]	; (8014d90 <etharp_raw+0x104>)
 8014ca6:	f240 4257 	movw	r2, #1111	; 0x457
 8014caa:	493a      	ldr	r1, [pc, #232]	; (8014d94 <etharp_raw+0x108>)
 8014cac:	483a      	ldr	r0, [pc, #232]	; (8014d98 <etharp_raw+0x10c>)
 8014cae:	f001 fecd 	bl	8016a4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014cb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cb6:	211c      	movs	r1, #28
 8014cb8:	200e      	movs	r0, #14
 8014cba:	f7f8 f853 	bl	800cd64 <pbuf_alloc>
 8014cbe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014cc0:	69bb      	ldr	r3, [r7, #24]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d102      	bne.n	8014ccc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cca:	e05d      	b.n	8014d88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	895b      	ldrh	r3, [r3, #10]
 8014cd0:	2b1b      	cmp	r3, #27
 8014cd2:	d806      	bhi.n	8014ce2 <etharp_raw+0x56>
 8014cd4:	4b2e      	ldr	r3, [pc, #184]	; (8014d90 <etharp_raw+0x104>)
 8014cd6:	f240 4262 	movw	r2, #1122	; 0x462
 8014cda:	4930      	ldr	r1, [pc, #192]	; (8014d9c <etharp_raw+0x110>)
 8014cdc:	482e      	ldr	r0, [pc, #184]	; (8014d98 <etharp_raw+0x10c>)
 8014cde:	f001 feb5 	bl	8016a4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ce8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7f6 fe94 	bl	800ba18 <lwip_htons>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cfe:	2b06      	cmp	r3, #6
 8014d00:	d006      	beq.n	8014d10 <etharp_raw+0x84>
 8014d02:	4b23      	ldr	r3, [pc, #140]	; (8014d90 <etharp_raw+0x104>)
 8014d04:	f240 4269 	movw	r2, #1129	; 0x469
 8014d08:	4925      	ldr	r1, [pc, #148]	; (8014da0 <etharp_raw+0x114>)
 8014d0a:	4823      	ldr	r0, [pc, #140]	; (8014d98 <etharp_raw+0x10c>)
 8014d0c:	f001 fe9e 	bl	8016a4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	3308      	adds	r3, #8
 8014d14:	2206      	movs	r2, #6
 8014d16:	6839      	ldr	r1, [r7, #0]
 8014d18:	4618      	mov	r0, r3
 8014d1a:	f001 fe0c 	bl	8016936 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	3312      	adds	r3, #18
 8014d22:	2206      	movs	r2, #6
 8014d24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d26:	4618      	mov	r0, r3
 8014d28:	f001 fe05 	bl	8016936 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	330e      	adds	r3, #14
 8014d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d32:	6812      	ldr	r2, [r2, #0]
 8014d34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	3318      	adds	r3, #24
 8014d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d3c:	6812      	ldr	r2, [r2, #0]
 8014d3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	2200      	movs	r2, #0
 8014d44:	701a      	strb	r2, [r3, #0]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f042 0201 	orr.w	r2, r2, #1
 8014d4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f042 0208 	orr.w	r2, r2, #8
 8014d56:	709a      	strb	r2, [r3, #2]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	2206      	movs	r2, #6
 8014d60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	2204      	movs	r2, #4
 8014d66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d68:	f640 0306 	movw	r3, #2054	; 0x806
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	69b9      	ldr	r1, [r7, #24]
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f001 fb75 	bl	8016464 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d7a:	69b8      	ldr	r0, [r7, #24]
 8014d7c:	f7f8 fad6 	bl	800d32c <pbuf_free>
  p = NULL;
 8014d80:	2300      	movs	r3, #0
 8014d82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3720      	adds	r7, #32
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	0801b2c4 	.word	0x0801b2c4
 8014d94:	0801b414 	.word	0x0801b414
 8014d98:	0801b33c 	.word	0x0801b33c
 8014d9c:	0801b4c4 	.word	0x0801b4c4
 8014da0:	0801b4f8 	.word	0x0801b4f8

08014da4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b088      	sub	sp, #32
 8014da8:	af04      	add	r7, sp, #16
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	9203      	str	r2, [sp, #12]
 8014dc4:	68ba      	ldr	r2, [r7, #8]
 8014dc6:	9202      	str	r2, [sp, #8]
 8014dc8:	4a06      	ldr	r2, [pc, #24]	; (8014de4 <etharp_request_dst+0x40>)
 8014dca:	9201      	str	r2, [sp, #4]
 8014dcc:	9300      	str	r3, [sp, #0]
 8014dce:	4603      	mov	r3, r0
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7ff ff5a 	bl	8014c8c <etharp_raw>
 8014dd8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3710      	adds	r7, #16
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	08022a18 	.word	0x08022a18

08014de8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014df2:	4a05      	ldr	r2, [pc, #20]	; (8014e08 <etharp_request+0x20>)
 8014df4:	6839      	ldr	r1, [r7, #0]
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f7ff ffd4 	bl	8014da4 <etharp_request_dst>
 8014dfc:	4603      	mov	r3, r0
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	08022a10 	.word	0x08022a10

08014e0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b08e      	sub	sp, #56	; 0x38
 8014e10:	af04      	add	r7, sp, #16
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e16:	4b79      	ldr	r3, [pc, #484]	; (8014ffc <icmp_input+0x1f0>)
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	f003 030f 	and.w	r3, r3, #15
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	b2db      	uxtb	r3, r3
 8014e2a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e2e:	2b13      	cmp	r3, #19
 8014e30:	f240 80cd 	bls.w	8014fce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	895b      	ldrh	r3, [r3, #10]
 8014e38:	2b03      	cmp	r3, #3
 8014e3a:	f240 80ca 	bls.w	8014fd2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f000 80b7 	beq.w	8014fc0 <icmp_input+0x1b4>
 8014e52:	2b08      	cmp	r3, #8
 8014e54:	f040 80b7 	bne.w	8014fc6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e58:	4b69      	ldr	r3, [pc, #420]	; (8015000 <icmp_input+0x1f4>)
 8014e5a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e5c:	4b67      	ldr	r3, [pc, #412]	; (8014ffc <icmp_input+0x1f0>)
 8014e5e:	695b      	ldr	r3, [r3, #20]
 8014e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e64:	2be0      	cmp	r3, #224	; 0xe0
 8014e66:	f000 80bb 	beq.w	8014fe0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e6a:	4b64      	ldr	r3, [pc, #400]	; (8014ffc <icmp_input+0x1f0>)
 8014e6c:	695b      	ldr	r3, [r3, #20]
 8014e6e:	4a63      	ldr	r2, [pc, #396]	; (8014ffc <icmp_input+0x1f0>)
 8014e70:	6812      	ldr	r2, [r2, #0]
 8014e72:	4611      	mov	r1, r2
 8014e74:	4618      	mov	r0, r3
 8014e76:	f000 fbed 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	f040 80b1 	bne.w	8014fe4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	891b      	ldrh	r3, [r3, #8]
 8014e86:	2b07      	cmp	r3, #7
 8014e88:	f240 80a5 	bls.w	8014fd6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e8e:	330e      	adds	r3, #14
 8014e90:	4619      	mov	r1, r3
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7f8 f9b4 	bl	800d200 <pbuf_add_header>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d04b      	beq.n	8014f36 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	891a      	ldrh	r2, [r3, #8]
 8014ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ea4:	4413      	add	r3, r2
 8014ea6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	891b      	ldrh	r3, [r3, #8]
 8014eac:	8b7a      	ldrh	r2, [r7, #26]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	f0c0 809a 	bcc.w	8014fe8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014eb4:	8b7b      	ldrh	r3, [r7, #26]
 8014eb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014eba:	4619      	mov	r1, r3
 8014ebc:	200e      	movs	r0, #14
 8014ebe:	f7f7 ff51 	bl	800cd64 <pbuf_alloc>
 8014ec2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	f000 8090 	beq.w	8014fec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	895b      	ldrh	r3, [r3, #10]
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ed4:	3308      	adds	r3, #8
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d203      	bcs.n	8014ee2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014eda:	6978      	ldr	r0, [r7, #20]
 8014edc:	f7f8 fa26 	bl	800d32c <pbuf_free>
          goto icmperr;
 8014ee0:	e085      	b.n	8014fee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014eea:	4618      	mov	r0, r3
 8014eec:	f001 fd23 	bl	8016936 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6978      	ldr	r0, [r7, #20]
 8014ef6:	f7f8 f993 	bl	800d220 <pbuf_remove_header>
 8014efa:	4603      	mov	r3, r0
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d009      	beq.n	8014f14 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f00:	4b40      	ldr	r3, [pc, #256]	; (8015004 <icmp_input+0x1f8>)
 8014f02:	22b6      	movs	r2, #182	; 0xb6
 8014f04:	4940      	ldr	r1, [pc, #256]	; (8015008 <icmp_input+0x1fc>)
 8014f06:	4841      	ldr	r0, [pc, #260]	; (801500c <icmp_input+0x200>)
 8014f08:	f001 fda0 	bl	8016a4c <iprintf>
          pbuf_free(r);
 8014f0c:	6978      	ldr	r0, [r7, #20]
 8014f0e:	f7f8 fa0d 	bl	800d32c <pbuf_free>
          goto icmperr;
 8014f12:	e06c      	b.n	8014fee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f14:	6879      	ldr	r1, [r7, #4]
 8014f16:	6978      	ldr	r0, [r7, #20]
 8014f18:	f7f8 fb2c 	bl	800d574 <pbuf_copy>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d003      	beq.n	8014f2a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014f22:	6978      	ldr	r0, [r7, #20]
 8014f24:	f7f8 fa02 	bl	800d32c <pbuf_free>
          goto icmperr;
 8014f28:	e061      	b.n	8014fee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f7f8 f9fe 	bl	800d32c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	607b      	str	r3, [r7, #4]
 8014f34:	e00f      	b.n	8014f56 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f38:	330e      	adds	r3, #14
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f7f8 f96f 	bl	800d220 <pbuf_remove_header>
 8014f42:	4603      	mov	r3, r0
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f48:	4b2e      	ldr	r3, [pc, #184]	; (8015004 <icmp_input+0x1f8>)
 8014f4a:	22c7      	movs	r2, #199	; 0xc7
 8014f4c:	4930      	ldr	r1, [pc, #192]	; (8015010 <icmp_input+0x204>)
 8014f4e:	482f      	ldr	r0, [pc, #188]	; (801500c <icmp_input+0x200>)
 8014f50:	f001 fd7c 	bl	8016a4c <iprintf>
          goto icmperr;
 8014f54:	e04b      	b.n	8014fee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f5e:	4619      	mov	r1, r3
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7f8 f94d 	bl	800d200 <pbuf_add_header>
 8014f66:	4603      	mov	r3, r0
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d12b      	bne.n	8014fc4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f72:	69fb      	ldr	r3, [r7, #28]
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f7a:	4b20      	ldr	r3, [pc, #128]	; (8014ffc <icmp_input+0x1f0>)
 8014f7c:	691a      	ldr	r2, [r3, #16]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	2200      	movs	r2, #0
 8014f86:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	709a      	strb	r2, [r3, #2]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	22ff      	movs	r2, #255	; 0xff
 8014f96:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	729a      	strb	r2, [r3, #10]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	9302      	str	r3, [sp, #8]
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	9301      	str	r3, [sp, #4]
 8014faa:	2300      	movs	r3, #0
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	23ff      	movs	r3, #255	; 0xff
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	69f9      	ldr	r1, [r7, #28]
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f000 fa75 	bl	80154a4 <ip4_output_if>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014fbe:	e001      	b.n	8014fc4 <icmp_input+0x1b8>
      break;
 8014fc0:	bf00      	nop
 8014fc2:	e000      	b.n	8014fc6 <icmp_input+0x1ba>
      break;
 8014fc4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7f8 f9b0 	bl	800d32c <pbuf_free>
  return;
 8014fcc:	e013      	b.n	8014ff6 <icmp_input+0x1ea>
    goto lenerr;
 8014fce:	bf00      	nop
 8014fd0:	e002      	b.n	8014fd8 <icmp_input+0x1cc>
    goto lenerr;
 8014fd2:	bf00      	nop
 8014fd4:	e000      	b.n	8014fd8 <icmp_input+0x1cc>
        goto lenerr;
 8014fd6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7f8 f9a7 	bl	800d32c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014fde:	e00a      	b.n	8014ff6 <icmp_input+0x1ea>
        goto icmperr;
 8014fe0:	bf00      	nop
 8014fe2:	e004      	b.n	8014fee <icmp_input+0x1e2>
        goto icmperr;
 8014fe4:	bf00      	nop
 8014fe6:	e002      	b.n	8014fee <icmp_input+0x1e2>
          goto icmperr;
 8014fe8:	bf00      	nop
 8014fea:	e000      	b.n	8014fee <icmp_input+0x1e2>
          goto icmperr;
 8014fec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7f8 f99c 	bl	800d32c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ff4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ff6:	3728      	adds	r7, #40	; 0x28
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}
 8014ffc:	2000fee0 	.word	0x2000fee0
 8015000:	2000fef4 	.word	0x2000fef4
 8015004:	0801b53c 	.word	0x0801b53c
 8015008:	0801b574 	.word	0x0801b574
 801500c:	0801b5ac 	.word	0x0801b5ac
 8015010:	0801b5d4 	.word	0x0801b5d4

08015014 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	460b      	mov	r3, r1
 801501e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015020:	78fb      	ldrb	r3, [r7, #3]
 8015022:	461a      	mov	r2, r3
 8015024:	2103      	movs	r1, #3
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 f814 	bl	8015054 <icmp_send_response>
}
 801502c:	bf00      	nop
 801502e:	3708      	adds	r7, #8
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	460b      	mov	r3, r1
 801503e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015040:	78fb      	ldrb	r3, [r7, #3]
 8015042:	461a      	mov	r2, r3
 8015044:	210b      	movs	r1, #11
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 f804 	bl	8015054 <icmp_send_response>
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b08c      	sub	sp, #48	; 0x30
 8015058:	af04      	add	r7, sp, #16
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	460b      	mov	r3, r1
 801505e:	70fb      	strb	r3, [r7, #3]
 8015060:	4613      	mov	r3, r2
 8015062:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015064:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015068:	2124      	movs	r1, #36	; 0x24
 801506a:	2022      	movs	r0, #34	; 0x22
 801506c:	f7f7 fe7a 	bl	800cd64 <pbuf_alloc>
 8015070:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d04c      	beq.n	8015112 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	895b      	ldrh	r3, [r3, #10]
 801507c:	2b23      	cmp	r3, #35	; 0x23
 801507e:	d806      	bhi.n	801508e <icmp_send_response+0x3a>
 8015080:	4b26      	ldr	r3, [pc, #152]	; (801511c <icmp_send_response+0xc8>)
 8015082:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015086:	4926      	ldr	r1, [pc, #152]	; (8015120 <icmp_send_response+0xcc>)
 8015088:	4826      	ldr	r0, [pc, #152]	; (8015124 <icmp_send_response+0xd0>)
 801508a:	f001 fcdf 	bl	8016a4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	78fa      	ldrb	r2, [r7, #3]
 801509e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	78ba      	ldrb	r2, [r7, #2]
 80150a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	2200      	movs	r2, #0
 80150aa:	711a      	strb	r2, [r3, #4]
 80150ac:	2200      	movs	r2, #0
 80150ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	2200      	movs	r2, #0
 80150b4:	719a      	strb	r2, [r3, #6]
 80150b6:	2200      	movs	r2, #0
 80150b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	f103 0008 	add.w	r0, r3, #8
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	221c      	movs	r2, #28
 80150c8:	4619      	mov	r1, r3
 80150ca:	f001 fc34 	bl	8016936 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80150d4:	f107 030c 	add.w	r3, r7, #12
 80150d8:	4618      	mov	r0, r3
 80150da:	f000 f825 	bl	8015128 <ip4_route>
 80150de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d011      	beq.n	801510a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	2200      	movs	r2, #0
 80150ea:	709a      	strb	r2, [r3, #2]
 80150ec:	2200      	movs	r2, #0
 80150ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80150f0:	f107 020c 	add.w	r2, r7, #12
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	9302      	str	r3, [sp, #8]
 80150f8:	2301      	movs	r3, #1
 80150fa:	9301      	str	r3, [sp, #4]
 80150fc:	2300      	movs	r3, #0
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	23ff      	movs	r3, #255	; 0xff
 8015102:	2100      	movs	r1, #0
 8015104:	69f8      	ldr	r0, [r7, #28]
 8015106:	f000 f9cd 	bl	80154a4 <ip4_output_if>
  }
  pbuf_free(q);
 801510a:	69f8      	ldr	r0, [r7, #28]
 801510c:	f7f8 f90e 	bl	800d32c <pbuf_free>
 8015110:	e000      	b.n	8015114 <icmp_send_response+0xc0>
    return;
 8015112:	bf00      	nop
}
 8015114:	3720      	adds	r7, #32
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	0801b53c 	.word	0x0801b53c
 8015120:	0801b608 	.word	0x0801b608
 8015124:	0801b5ac 	.word	0x0801b5ac

08015128 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015128:	b480      	push	{r7}
 801512a:	b085      	sub	sp, #20
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015130:	4b33      	ldr	r3, [pc, #204]	; (8015200 <ip4_route+0xd8>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	60fb      	str	r3, [r7, #12]
 8015136:	e036      	b.n	80151a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801513e:	f003 0301 	and.w	r3, r3, #1
 8015142:	b2db      	uxtb	r3, r3
 8015144:	2b00      	cmp	r3, #0
 8015146:	d02b      	beq.n	80151a0 <ip4_route+0x78>
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801514e:	089b      	lsrs	r3, r3, #2
 8015150:	f003 0301 	and.w	r3, r3, #1
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b00      	cmp	r3, #0
 8015158:	d022      	beq.n	80151a0 <ip4_route+0x78>
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	3304      	adds	r3, #4
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d01d      	beq.n	80151a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	3304      	adds	r3, #4
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	405a      	eors	r2, r3
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	3308      	adds	r3, #8
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	4013      	ands	r3, r2
 8015178:	2b00      	cmp	r3, #0
 801517a:	d101      	bne.n	8015180 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	e038      	b.n	80151f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015186:	f003 0302 	and.w	r3, r3, #2
 801518a:	2b00      	cmp	r3, #0
 801518c:	d108      	bne.n	80151a0 <ip4_route+0x78>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	330c      	adds	r3, #12
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	429a      	cmp	r2, r3
 801519a:	d101      	bne.n	80151a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	e028      	b.n	80151f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	60fb      	str	r3, [r7, #12]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d1c5      	bne.n	8015138 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151ac:	4b15      	ldr	r3, [pc, #84]	; (8015204 <ip4_route+0xdc>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d01a      	beq.n	80151ea <ip4_route+0xc2>
 80151b4:	4b13      	ldr	r3, [pc, #76]	; (8015204 <ip4_route+0xdc>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151bc:	f003 0301 	and.w	r3, r3, #1
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d012      	beq.n	80151ea <ip4_route+0xc2>
 80151c4:	4b0f      	ldr	r3, [pc, #60]	; (8015204 <ip4_route+0xdc>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151cc:	f003 0304 	and.w	r3, r3, #4
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00a      	beq.n	80151ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151d4:	4b0b      	ldr	r3, [pc, #44]	; (8015204 <ip4_route+0xdc>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	3304      	adds	r3, #4
 80151da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d004      	beq.n	80151ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	2b7f      	cmp	r3, #127	; 0x7f
 80151e8:	d101      	bne.n	80151ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80151ea:	2300      	movs	r3, #0
 80151ec:	e001      	b.n	80151f2 <ip4_route+0xca>
  }

  return netif_default;
 80151ee:	4b05      	ldr	r3, [pc, #20]	; (8015204 <ip4_route+0xdc>)
 80151f0:	681b      	ldr	r3, [r3, #0]
}
 80151f2:	4618      	mov	r0, r3
 80151f4:	3714      	adds	r7, #20
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop
 8015200:	200136a0 	.word	0x200136a0
 8015204:	200136a4 	.word	0x200136a4

08015208 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015216:	f003 0301 	and.w	r3, r3, #1
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b00      	cmp	r3, #0
 801521e:	d016      	beq.n	801524e <ip4_input_accept+0x46>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	3304      	adds	r3, #4
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d011      	beq.n	801524e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801522a:	4b0b      	ldr	r3, [pc, #44]	; (8015258 <ip4_input_accept+0x50>)
 801522c:	695a      	ldr	r2, [r3, #20]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	3304      	adds	r3, #4
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	429a      	cmp	r2, r3
 8015236:	d008      	beq.n	801524a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015238:	4b07      	ldr	r3, [pc, #28]	; (8015258 <ip4_input_accept+0x50>)
 801523a:	695b      	ldr	r3, [r3, #20]
 801523c:	6879      	ldr	r1, [r7, #4]
 801523e:	4618      	mov	r0, r3
 8015240:	f000 fa08 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8015244:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015246:	2b00      	cmp	r3, #0
 8015248:	d001      	beq.n	801524e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801524a:	2301      	movs	r3, #1
 801524c:	e000      	b.n	8015250 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801524e:	2300      	movs	r3, #0
}
 8015250:	4618      	mov	r0, r3
 8015252:	3708      	adds	r7, #8
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}
 8015258:	2000fee0 	.word	0x2000fee0

0801525c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b086      	sub	sp, #24
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	091b      	lsrs	r3, r3, #4
 8015272:	b2db      	uxtb	r3, r3
 8015274:	2b04      	cmp	r3, #4
 8015276:	d004      	beq.n	8015282 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7f8 f857 	bl	800d32c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801527e:	2300      	movs	r3, #0
 8015280:	e107      	b.n	8015492 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	f003 030f 	and.w	r3, r3, #15
 801528a:	b2db      	uxtb	r3, r3
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	b2db      	uxtb	r3, r3
 8015290:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	885b      	ldrh	r3, [r3, #2]
 8015296:	b29b      	uxth	r3, r3
 8015298:	4618      	mov	r0, r3
 801529a:	f7f6 fbbd 	bl	800ba18 <lwip_htons>
 801529e:	4603      	mov	r3, r0
 80152a0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	891b      	ldrh	r3, [r3, #8]
 80152a6:	89ba      	ldrh	r2, [r7, #12]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d204      	bcs.n	80152b6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80152ac:	89bb      	ldrh	r3, [r7, #12]
 80152ae:	4619      	mov	r1, r3
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7f7 feb5 	bl	800d020 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	895b      	ldrh	r3, [r3, #10]
 80152ba:	89fa      	ldrh	r2, [r7, #14]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d807      	bhi.n	80152d0 <ip4_input+0x74>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	891b      	ldrh	r3, [r3, #8]
 80152c4:	89ba      	ldrh	r2, [r7, #12]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d802      	bhi.n	80152d0 <ip4_input+0x74>
 80152ca:	89fb      	ldrh	r3, [r7, #14]
 80152cc:	2b13      	cmp	r3, #19
 80152ce:	d804      	bhi.n	80152da <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f7f8 f82b 	bl	800d32c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80152d6:	2300      	movs	r3, #0
 80152d8:	e0db      	b.n	8015492 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	691b      	ldr	r3, [r3, #16]
 80152de:	4a6f      	ldr	r2, [pc, #444]	; (801549c <ip4_input+0x240>)
 80152e0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80152e2:	697b      	ldr	r3, [r7, #20]
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	4a6d      	ldr	r2, [pc, #436]	; (801549c <ip4_input+0x240>)
 80152e8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152ea:	4b6c      	ldr	r3, [pc, #432]	; (801549c <ip4_input+0x240>)
 80152ec:	695b      	ldr	r3, [r3, #20]
 80152ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152f2:	2be0      	cmp	r3, #224	; 0xe0
 80152f4:	d112      	bne.n	801531c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152fc:	f003 0301 	and.w	r3, r3, #1
 8015300:	b2db      	uxtb	r3, r3
 8015302:	2b00      	cmp	r3, #0
 8015304:	d007      	beq.n	8015316 <ip4_input+0xba>
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	3304      	adds	r3, #4
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d002      	beq.n	8015316 <ip4_input+0xba>
      netif = inp;
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	613b      	str	r3, [r7, #16]
 8015314:	e02a      	b.n	801536c <ip4_input+0x110>
    } else {
      netif = NULL;
 8015316:	2300      	movs	r3, #0
 8015318:	613b      	str	r3, [r7, #16]
 801531a:	e027      	b.n	801536c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801531c:	6838      	ldr	r0, [r7, #0]
 801531e:	f7ff ff73 	bl	8015208 <ip4_input_accept>
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	d002      	beq.n	801532e <ip4_input+0xd2>
      netif = inp;
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	613b      	str	r3, [r7, #16]
 801532c:	e01e      	b.n	801536c <ip4_input+0x110>
    } else {
      netif = NULL;
 801532e:	2300      	movs	r3, #0
 8015330:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015332:	4b5a      	ldr	r3, [pc, #360]	; (801549c <ip4_input+0x240>)
 8015334:	695b      	ldr	r3, [r3, #20]
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b7f      	cmp	r3, #127	; 0x7f
 801533a:	d017      	beq.n	801536c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801533c:	4b58      	ldr	r3, [pc, #352]	; (80154a0 <ip4_input+0x244>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	613b      	str	r3, [r7, #16]
 8015342:	e00e      	b.n	8015362 <ip4_input+0x106>
          if (netif == inp) {
 8015344:	693a      	ldr	r2, [r7, #16]
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	429a      	cmp	r2, r3
 801534a:	d006      	beq.n	801535a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801534c:	6938      	ldr	r0, [r7, #16]
 801534e:	f7ff ff5b 	bl	8015208 <ip4_input_accept>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d108      	bne.n	801536a <ip4_input+0x10e>
 8015358:	e000      	b.n	801535c <ip4_input+0x100>
            continue;
 801535a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	613b      	str	r3, [r7, #16]
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1ed      	bne.n	8015344 <ip4_input+0xe8>
 8015368:	e000      	b.n	801536c <ip4_input+0x110>
            break;
 801536a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801536c:	4b4b      	ldr	r3, [pc, #300]	; (801549c <ip4_input+0x240>)
 801536e:	691b      	ldr	r3, [r3, #16]
 8015370:	6839      	ldr	r1, [r7, #0]
 8015372:	4618      	mov	r0, r3
 8015374:	f000 f96e 	bl	8015654 <ip4_addr_isbroadcast_u32>
 8015378:	4603      	mov	r3, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	d105      	bne.n	801538a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801537e:	4b47      	ldr	r3, [pc, #284]	; (801549c <ip4_input+0x240>)
 8015380:	691b      	ldr	r3, [r3, #16]
 8015382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015386:	2be0      	cmp	r3, #224	; 0xe0
 8015388:	d104      	bne.n	8015394 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f7f7 ffce 	bl	800d32c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015390:	2300      	movs	r3, #0
 8015392:	e07e      	b.n	8015492 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d104      	bne.n	80153a4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7f7 ffc6 	bl	800d32c <pbuf_free>
    return ERR_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	e076      	b.n	8015492 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	88db      	ldrh	r3, [r3, #6]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	461a      	mov	r2, r3
 80153ac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153b0:	4013      	ands	r3, r2
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d00b      	beq.n	80153ce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 fc92 	bl	8015ce0 <ip4_reass>
 80153bc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d101      	bne.n	80153c8 <ip4_input+0x16c>
      return ERR_OK;
 80153c4:	2300      	movs	r3, #0
 80153c6:	e064      	b.n	8015492 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80153ce:	4a33      	ldr	r2, [pc, #204]	; (801549c <ip4_input+0x240>)
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80153d4:	4a31      	ldr	r2, [pc, #196]	; (801549c <ip4_input+0x240>)
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80153da:	4a30      	ldr	r2, [pc, #192]	; (801549c <ip4_input+0x240>)
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	f003 030f 	and.w	r3, r3, #15
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	b2db      	uxtb	r3, r3
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	4b2a      	ldr	r3, [pc, #168]	; (801549c <ip4_input+0x240>)
 80153f2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80153f4:	89fb      	ldrh	r3, [r7, #14]
 80153f6:	4619      	mov	r1, r3
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f7f7 ff11 	bl	800d220 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	7a5b      	ldrb	r3, [r3, #9]
 8015402:	2b11      	cmp	r3, #17
 8015404:	d006      	beq.n	8015414 <ip4_input+0x1b8>
 8015406:	2b11      	cmp	r3, #17
 8015408:	dc13      	bgt.n	8015432 <ip4_input+0x1d6>
 801540a:	2b01      	cmp	r3, #1
 801540c:	d00c      	beq.n	8015428 <ip4_input+0x1cc>
 801540e:	2b06      	cmp	r3, #6
 8015410:	d005      	beq.n	801541e <ip4_input+0x1c2>
 8015412:	e00e      	b.n	8015432 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015414:	6839      	ldr	r1, [r7, #0]
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f7fe fc68 	bl	8013cec <udp_input>
        break;
 801541c:	e026      	b.n	801546c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801541e:	6839      	ldr	r1, [r7, #0]
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f7fa f85d 	bl	800f4e0 <tcp_input>
        break;
 8015426:	e021      	b.n	801546c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015428:	6839      	ldr	r1, [r7, #0]
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f7ff fcee 	bl	8014e0c <icmp_input>
        break;
 8015430:	e01c      	b.n	801546c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015432:	4b1a      	ldr	r3, [pc, #104]	; (801549c <ip4_input+0x240>)
 8015434:	695b      	ldr	r3, [r3, #20]
 8015436:	6939      	ldr	r1, [r7, #16]
 8015438:	4618      	mov	r0, r3
 801543a:	f000 f90b 	bl	8015654 <ip4_addr_isbroadcast_u32>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d10f      	bne.n	8015464 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015444:	4b15      	ldr	r3, [pc, #84]	; (801549c <ip4_input+0x240>)
 8015446:	695b      	ldr	r3, [r3, #20]
 8015448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801544c:	2be0      	cmp	r3, #224	; 0xe0
 801544e:	d009      	beq.n	8015464 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015454:	4619      	mov	r1, r3
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	f7f7 ff55 	bl	800d306 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801545c:	2102      	movs	r1, #2
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f7ff fdd8 	bl	8015014 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7f7 ff61 	bl	800d32c <pbuf_free>
        break;
 801546a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801546c:	4b0b      	ldr	r3, [pc, #44]	; (801549c <ip4_input+0x240>)
 801546e:	2200      	movs	r2, #0
 8015470:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015472:	4b0a      	ldr	r3, [pc, #40]	; (801549c <ip4_input+0x240>)
 8015474:	2200      	movs	r2, #0
 8015476:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015478:	4b08      	ldr	r3, [pc, #32]	; (801549c <ip4_input+0x240>)
 801547a:	2200      	movs	r2, #0
 801547c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801547e:	4b07      	ldr	r3, [pc, #28]	; (801549c <ip4_input+0x240>)
 8015480:	2200      	movs	r2, #0
 8015482:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015484:	4b05      	ldr	r3, [pc, #20]	; (801549c <ip4_input+0x240>)
 8015486:	2200      	movs	r2, #0
 8015488:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801548a:	4b04      	ldr	r3, [pc, #16]	; (801549c <ip4_input+0x240>)
 801548c:	2200      	movs	r2, #0
 801548e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	3718      	adds	r7, #24
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	2000fee0 	.word	0x2000fee0
 80154a0:	200136a0 	.word	0x200136a0

080154a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b08a      	sub	sp, #40	; 0x28
 80154a8:	af04      	add	r7, sp, #16
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d009      	beq.n	80154d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d003      	beq.n	80154ca <ip4_output_if+0x26>
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d102      	bne.n	80154d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80154ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154cc:	3304      	adds	r3, #4
 80154ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154d0:	78fa      	ldrb	r2, [r7, #3]
 80154d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d4:	9302      	str	r3, [sp, #8]
 80154d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154da:	9301      	str	r3, [sp, #4]
 80154dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80154e0:	9300      	str	r3, [sp, #0]
 80154e2:	4613      	mov	r3, r2
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	6979      	ldr	r1, [r7, #20]
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f000 f805 	bl	80154f8 <ip4_output_if_src>
 80154ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3718      	adds	r7, #24
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	7b9b      	ldrb	r3, [r3, #14]
 801550a:	2b01      	cmp	r3, #1
 801550c:	d006      	beq.n	801551c <ip4_output_if_src+0x24>
 801550e:	4b4b      	ldr	r3, [pc, #300]	; (801563c <ip4_output_if_src+0x144>)
 8015510:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015514:	494a      	ldr	r1, [pc, #296]	; (8015640 <ip4_output_if_src+0x148>)
 8015516:	484b      	ldr	r0, [pc, #300]	; (8015644 <ip4_output_if_src+0x14c>)
 8015518:	f001 fa98 	bl	8016a4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d060      	beq.n	80155e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015522:	2314      	movs	r3, #20
 8015524:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015526:	2114      	movs	r1, #20
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	f7f7 fe69 	bl	800d200 <pbuf_add_header>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d002      	beq.n	801553a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015534:	f06f 0301 	mvn.w	r3, #1
 8015538:	e07c      	b.n	8015634 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	895b      	ldrh	r3, [r3, #10]
 8015544:	2b13      	cmp	r3, #19
 8015546:	d806      	bhi.n	8015556 <ip4_output_if_src+0x5e>
 8015548:	4b3c      	ldr	r3, [pc, #240]	; (801563c <ip4_output_if_src+0x144>)
 801554a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801554e:	493e      	ldr	r1, [pc, #248]	; (8015648 <ip4_output_if_src+0x150>)
 8015550:	483c      	ldr	r0, [pc, #240]	; (8015644 <ip4_output_if_src+0x14c>)
 8015552:	f001 fa7b 	bl	8016a4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015556:	69fb      	ldr	r3, [r7, #28]
 8015558:	78fa      	ldrb	r2, [r7, #3]
 801555a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015562:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801556c:	8b7b      	ldrh	r3, [r7, #26]
 801556e:	089b      	lsrs	r3, r3, #2
 8015570:	b29b      	uxth	r3, r3
 8015572:	b2db      	uxtb	r3, r3
 8015574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015578:	b2da      	uxtb	r2, r3
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015584:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	891b      	ldrh	r3, [r3, #8]
 801558a:	4618      	mov	r0, r3
 801558c:	f7f6 fa44 	bl	800ba18 <lwip_htons>
 8015590:	4603      	mov	r3, r0
 8015592:	461a      	mov	r2, r3
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	2200      	movs	r2, #0
 801559c:	719a      	strb	r2, [r3, #6]
 801559e:	2200      	movs	r2, #0
 80155a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80155a2:	4b2a      	ldr	r3, [pc, #168]	; (801564c <ip4_output_if_src+0x154>)
 80155a4:	881b      	ldrh	r3, [r3, #0]
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7f6 fa36 	bl	800ba18 <lwip_htons>
 80155ac:	4603      	mov	r3, r0
 80155ae:	461a      	mov	r2, r3
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80155b4:	4b25      	ldr	r3, [pc, #148]	; (801564c <ip4_output_if_src+0x154>)
 80155b6:	881b      	ldrh	r3, [r3, #0]
 80155b8:	3301      	adds	r3, #1
 80155ba:	b29a      	uxth	r2, r3
 80155bc:	4b23      	ldr	r3, [pc, #140]	; (801564c <ip4_output_if_src+0x154>)
 80155be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d104      	bne.n	80155d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80155c6:	4b22      	ldr	r3, [pc, #136]	; (8015650 <ip4_output_if_src+0x158>)
 80155c8:	681a      	ldr	r2, [r3, #0]
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	60da      	str	r2, [r3, #12]
 80155ce:	e003      	b.n	80155d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	681a      	ldr	r2, [r3, #0]
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	2200      	movs	r2, #0
 80155dc:	729a      	strb	r2, [r3, #10]
 80155de:	2200      	movs	r2, #0
 80155e0:	72da      	strb	r2, [r3, #11]
 80155e2:	e00f      	b.n	8015604 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	895b      	ldrh	r3, [r3, #10]
 80155e8:	2b13      	cmp	r3, #19
 80155ea:	d802      	bhi.n	80155f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155ec:	f06f 0301 	mvn.w	r3, #1
 80155f0:	e020      	b.n	8015634 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	691b      	ldr	r3, [r3, #16]
 80155fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80155fe:	f107 0314 	add.w	r3, r7, #20
 8015602:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015606:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00c      	beq.n	8015626 <ip4_output_if_src+0x12e>
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	891a      	ldrh	r2, [r3, #8]
 8015610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015614:	429a      	cmp	r2, r3
 8015616:	d906      	bls.n	8015626 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f000 fd4d 	bl	80160bc <ip4_frag>
 8015622:	4603      	mov	r3, r0
 8015624:	e006      	b.n	8015634 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	695b      	ldr	r3, [r3, #20]
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	68f9      	ldr	r1, [r7, #12]
 801562e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015630:	4798      	blx	r3
 8015632:	4603      	mov	r3, r0
}
 8015634:	4618      	mov	r0, r3
 8015636:	3720      	adds	r7, #32
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}
 801563c:	0801b634 	.word	0x0801b634
 8015640:	0801b668 	.word	0x0801b668
 8015644:	0801b674 	.word	0x0801b674
 8015648:	0801b69c 	.word	0x0801b69c
 801564c:	2000552a 	.word	0x2000552a
 8015650:	08022a0c 	.word	0x08022a0c

08015654 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015654:	b480      	push	{r7}
 8015656:	b085      	sub	sp, #20
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015668:	d002      	beq.n	8015670 <ip4_addr_isbroadcast_u32+0x1c>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d101      	bne.n	8015674 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015670:	2301      	movs	r3, #1
 8015672:	e02a      	b.n	80156ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801567a:	f003 0302 	and.w	r3, r3, #2
 801567e:	2b00      	cmp	r3, #0
 8015680:	d101      	bne.n	8015686 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015682:	2300      	movs	r3, #0
 8015684:	e021      	b.n	80156ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	3304      	adds	r3, #4
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	429a      	cmp	r2, r3
 8015690:	d101      	bne.n	8015696 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015692:	2300      	movs	r3, #0
 8015694:	e019      	b.n	80156ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015696:	68fa      	ldr	r2, [r7, #12]
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	3304      	adds	r3, #4
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	405a      	eors	r2, r3
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	3308      	adds	r3, #8
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4013      	ands	r3, r2
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d10d      	bne.n	80156c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	3308      	adds	r3, #8
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	43da      	mvns	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	3308      	adds	r3, #8
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d101      	bne.n	80156c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80156c4:	2301      	movs	r3, #1
 80156c6:	e000      	b.n	80156ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80156c8:	2300      	movs	r3, #0
  }
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3714      	adds	r7, #20
 80156ce:	46bd      	mov	sp, r7
 80156d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d4:	4770      	bx	lr
	...

080156d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80156de:	2300      	movs	r3, #0
 80156e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80156e2:	4b12      	ldr	r3, [pc, #72]	; (801572c <ip_reass_tmr+0x54>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80156e8:	e018      	b.n	801571c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	7fdb      	ldrb	r3, [r3, #31]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d00b      	beq.n	801570a <ip_reass_tmr+0x32>
      r->timer--;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	7fdb      	ldrb	r3, [r3, #31]
 80156f6:	3b01      	subs	r3, #1
 80156f8:	b2da      	uxtb	r2, r3
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	60fb      	str	r3, [r7, #12]
 8015708:	e008      	b.n	801571c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015714:	68b9      	ldr	r1, [r7, #8]
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f000 f80a 	bl	8015730 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d1e3      	bne.n	80156ea <ip_reass_tmr+0x12>
    }
  }
}
 8015722:	bf00      	nop
 8015724:	bf00      	nop
 8015726:	3710      	adds	r7, #16
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}
 801572c:	2000552c 	.word	0x2000552c

08015730 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b088      	sub	sp, #32
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801573a:	2300      	movs	r3, #0
 801573c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801573e:	683a      	ldr	r2, [r7, #0]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	429a      	cmp	r2, r3
 8015744:	d105      	bne.n	8015752 <ip_reass_free_complete_datagram+0x22>
 8015746:	4b45      	ldr	r3, [pc, #276]	; (801585c <ip_reass_free_complete_datagram+0x12c>)
 8015748:	22ab      	movs	r2, #171	; 0xab
 801574a:	4945      	ldr	r1, [pc, #276]	; (8015860 <ip_reass_free_complete_datagram+0x130>)
 801574c:	4845      	ldr	r0, [pc, #276]	; (8015864 <ip_reass_free_complete_datagram+0x134>)
 801574e:	f001 f97d 	bl	8016a4c <iprintf>
  if (prev != NULL) {
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d00a      	beq.n	801576e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	429a      	cmp	r2, r3
 8015760:	d005      	beq.n	801576e <ip_reass_free_complete_datagram+0x3e>
 8015762:	4b3e      	ldr	r3, [pc, #248]	; (801585c <ip_reass_free_complete_datagram+0x12c>)
 8015764:	22ad      	movs	r2, #173	; 0xad
 8015766:	4940      	ldr	r1, [pc, #256]	; (8015868 <ip_reass_free_complete_datagram+0x138>)
 8015768:	483e      	ldr	r0, [pc, #248]	; (8015864 <ip_reass_free_complete_datagram+0x134>)
 801576a:	f001 f96f 	bl	8016a4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	889b      	ldrh	r3, [r3, #4]
 801577a:	b29b      	uxth	r3, r3
 801577c:	2b00      	cmp	r3, #0
 801577e:	d12a      	bne.n	80157d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801578e:	69bb      	ldr	r3, [r7, #24]
 8015790:	6858      	ldr	r0, [r3, #4]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	3308      	adds	r3, #8
 8015796:	2214      	movs	r2, #20
 8015798:	4619      	mov	r1, r3
 801579a:	f001 f8cc 	bl	8016936 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801579e:	2101      	movs	r1, #1
 80157a0:	69b8      	ldr	r0, [r7, #24]
 80157a2:	f7ff fc47 	bl	8015034 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80157a6:	69b8      	ldr	r0, [r7, #24]
 80157a8:	f7f7 fe4e 	bl	800d448 <pbuf_clen>
 80157ac:	4603      	mov	r3, r0
 80157ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157b0:	8bfa      	ldrh	r2, [r7, #30]
 80157b2:	8a7b      	ldrh	r3, [r7, #18]
 80157b4:	4413      	add	r3, r2
 80157b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157ba:	db05      	blt.n	80157c8 <ip_reass_free_complete_datagram+0x98>
 80157bc:	4b27      	ldr	r3, [pc, #156]	; (801585c <ip_reass_free_complete_datagram+0x12c>)
 80157be:	22bc      	movs	r2, #188	; 0xbc
 80157c0:	492a      	ldr	r1, [pc, #168]	; (801586c <ip_reass_free_complete_datagram+0x13c>)
 80157c2:	4828      	ldr	r0, [pc, #160]	; (8015864 <ip_reass_free_complete_datagram+0x134>)
 80157c4:	f001 f942 	bl	8016a4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80157c8:	8bfa      	ldrh	r2, [r7, #30]
 80157ca:	8a7b      	ldrh	r3, [r7, #18]
 80157cc:	4413      	add	r3, r2
 80157ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80157d0:	69b8      	ldr	r0, [r7, #24]
 80157d2:	f7f7 fdab 	bl	800d32c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80157dc:	e01f      	b.n	801581e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80157ee:	68f8      	ldr	r0, [r7, #12]
 80157f0:	f7f7 fe2a 	bl	800d448 <pbuf_clen>
 80157f4:	4603      	mov	r3, r0
 80157f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157f8:	8bfa      	ldrh	r2, [r7, #30]
 80157fa:	8a7b      	ldrh	r3, [r7, #18]
 80157fc:	4413      	add	r3, r2
 80157fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015802:	db05      	blt.n	8015810 <ip_reass_free_complete_datagram+0xe0>
 8015804:	4b15      	ldr	r3, [pc, #84]	; (801585c <ip_reass_free_complete_datagram+0x12c>)
 8015806:	22cc      	movs	r2, #204	; 0xcc
 8015808:	4918      	ldr	r1, [pc, #96]	; (801586c <ip_reass_free_complete_datagram+0x13c>)
 801580a:	4816      	ldr	r0, [pc, #88]	; (8015864 <ip_reass_free_complete_datagram+0x134>)
 801580c:	f001 f91e 	bl	8016a4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015810:	8bfa      	ldrh	r2, [r7, #30]
 8015812:	8a7b      	ldrh	r3, [r7, #18]
 8015814:	4413      	add	r3, r2
 8015816:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f7f7 fd87 	bl	800d32c <pbuf_free>
  while (p != NULL) {
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d1dc      	bne.n	80157de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 f8c2 	bl	80159b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801582c:	4b10      	ldr	r3, [pc, #64]	; (8015870 <ip_reass_free_complete_datagram+0x140>)
 801582e:	881b      	ldrh	r3, [r3, #0]
 8015830:	8bfa      	ldrh	r2, [r7, #30]
 8015832:	429a      	cmp	r2, r3
 8015834:	d905      	bls.n	8015842 <ip_reass_free_complete_datagram+0x112>
 8015836:	4b09      	ldr	r3, [pc, #36]	; (801585c <ip_reass_free_complete_datagram+0x12c>)
 8015838:	22d2      	movs	r2, #210	; 0xd2
 801583a:	490e      	ldr	r1, [pc, #56]	; (8015874 <ip_reass_free_complete_datagram+0x144>)
 801583c:	4809      	ldr	r0, [pc, #36]	; (8015864 <ip_reass_free_complete_datagram+0x134>)
 801583e:	f001 f905 	bl	8016a4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015842:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <ip_reass_free_complete_datagram+0x140>)
 8015844:	881a      	ldrh	r2, [r3, #0]
 8015846:	8bfb      	ldrh	r3, [r7, #30]
 8015848:	1ad3      	subs	r3, r2, r3
 801584a:	b29a      	uxth	r2, r3
 801584c:	4b08      	ldr	r3, [pc, #32]	; (8015870 <ip_reass_free_complete_datagram+0x140>)
 801584e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015850:	8bfb      	ldrh	r3, [r7, #30]
}
 8015852:	4618      	mov	r0, r3
 8015854:	3720      	adds	r7, #32
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	0801b6cc 	.word	0x0801b6cc
 8015860:	0801b708 	.word	0x0801b708
 8015864:	0801b714 	.word	0x0801b714
 8015868:	0801b73c 	.word	0x0801b73c
 801586c:	0801b750 	.word	0x0801b750
 8015870:	20005530 	.word	0x20005530
 8015874:	0801b770 	.word	0x0801b770

08015878 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08a      	sub	sp, #40	; 0x28
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015882:	2300      	movs	r3, #0
 8015884:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801588e:	2300      	movs	r3, #0
 8015890:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015892:	2300      	movs	r3, #0
 8015894:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015896:	4b28      	ldr	r3, [pc, #160]	; (8015938 <ip_reass_remove_oldest_datagram+0xc0>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801589c:	e030      	b.n	8015900 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	695a      	ldr	r2, [r3, #20]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d10c      	bne.n	80158c4 <ip_reass_remove_oldest_datagram+0x4c>
 80158aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ac:	699a      	ldr	r2, [r3, #24]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	691b      	ldr	r3, [r3, #16]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d106      	bne.n	80158c4 <ip_reass_remove_oldest_datagram+0x4c>
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	899a      	ldrh	r2, [r3, #12]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	889b      	ldrh	r3, [r3, #4]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d014      	beq.n	80158ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	3301      	adds	r3, #1
 80158c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80158ca:	6a3b      	ldr	r3, [r7, #32]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d104      	bne.n	80158da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80158d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	61bb      	str	r3, [r7, #24]
 80158d8:	e009      	b.n	80158ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80158da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158dc:	7fda      	ldrb	r2, [r3, #31]
 80158de:	6a3b      	ldr	r3, [r7, #32]
 80158e0:	7fdb      	ldrb	r3, [r3, #31]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d803      	bhi.n	80158ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80158e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158ea:	69fb      	ldr	r3, [r7, #28]
 80158ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d001      	beq.n	80158fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80158f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80158fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1cb      	bne.n	801589e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015906:	6a3b      	ldr	r3, [r7, #32]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d008      	beq.n	801591e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801590c:	69b9      	ldr	r1, [r7, #24]
 801590e:	6a38      	ldr	r0, [r7, #32]
 8015910:	f7ff ff0e 	bl	8015730 <ip_reass_free_complete_datagram>
 8015914:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015916:	697a      	ldr	r2, [r7, #20]
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	4413      	add	r3, r2
 801591c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801591e:	697a      	ldr	r2, [r7, #20]
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	429a      	cmp	r2, r3
 8015924:	da02      	bge.n	801592c <ip_reass_remove_oldest_datagram+0xb4>
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	2b01      	cmp	r3, #1
 801592a:	dcac      	bgt.n	8015886 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801592c:	697b      	ldr	r3, [r7, #20]
}
 801592e:	4618      	mov	r0, r3
 8015930:	3728      	adds	r7, #40	; 0x28
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	2000552c 	.word	0x2000552c

0801593c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015946:	2004      	movs	r0, #4
 8015948:	f7f6 fdfa 	bl	800c540 <memp_malloc>
 801594c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d110      	bne.n	8015976 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015954:	6839      	ldr	r1, [r7, #0]
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f7ff ff8e 	bl	8015878 <ip_reass_remove_oldest_datagram>
 801595c:	4602      	mov	r2, r0
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	4293      	cmp	r3, r2
 8015962:	dc03      	bgt.n	801596c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015964:	2004      	movs	r0, #4
 8015966:	f7f6 fdeb 	bl	800c540 <memp_malloc>
 801596a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d101      	bne.n	8015976 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015972:	2300      	movs	r3, #0
 8015974:	e016      	b.n	80159a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015976:	2220      	movs	r2, #32
 8015978:	2100      	movs	r1, #0
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	f001 f803 	bl	8016986 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	220f      	movs	r2, #15
 8015984:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015986:	4b09      	ldr	r3, [pc, #36]	; (80159ac <ip_reass_enqueue_new_datagram+0x70>)
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801598e:	4a07      	ldr	r2, [pc, #28]	; (80159ac <ip_reass_enqueue_new_datagram+0x70>)
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	3308      	adds	r3, #8
 8015998:	2214      	movs	r2, #20
 801599a:	6879      	ldr	r1, [r7, #4]
 801599c:	4618      	mov	r0, r3
 801599e:	f000 ffca 	bl	8016936 <memcpy>
  return ipr;
 80159a2:	68fb      	ldr	r3, [r7, #12]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3710      	adds	r7, #16
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	2000552c 	.word	0x2000552c

080159b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80159ba:	4b10      	ldr	r3, [pc, #64]	; (80159fc <ip_reass_dequeue_datagram+0x4c>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d104      	bne.n	80159ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	4a0c      	ldr	r2, [pc, #48]	; (80159fc <ip_reass_dequeue_datagram+0x4c>)
 80159ca:	6013      	str	r3, [r2, #0]
 80159cc:	e00d      	b.n	80159ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d106      	bne.n	80159e2 <ip_reass_dequeue_datagram+0x32>
 80159d4:	4b0a      	ldr	r3, [pc, #40]	; (8015a00 <ip_reass_dequeue_datagram+0x50>)
 80159d6:	f240 1245 	movw	r2, #325	; 0x145
 80159da:	490a      	ldr	r1, [pc, #40]	; (8015a04 <ip_reass_dequeue_datagram+0x54>)
 80159dc:	480a      	ldr	r0, [pc, #40]	; (8015a08 <ip_reass_dequeue_datagram+0x58>)
 80159de:	f001 f835 	bl	8016a4c <iprintf>
    prev->next = ipr->next;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681a      	ldr	r2, [r3, #0]
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80159ea:	6879      	ldr	r1, [r7, #4]
 80159ec:	2004      	movs	r0, #4
 80159ee:	f7f6 fdf9 	bl	800c5e4 <memp_free>
}
 80159f2:	bf00      	nop
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	2000552c 	.word	0x2000552c
 8015a00:	0801b6cc 	.word	0x0801b6cc
 8015a04:	0801b794 	.word	0x0801b794
 8015a08:	0801b714 	.word	0x0801b714

08015a0c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b08c      	sub	sp, #48	; 0x30
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	885b      	ldrh	r3, [r3, #2]
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f5 fff3 	bl	800ba18 <lwip_htons>
 8015a32:	4603      	mov	r3, r0
 8015a34:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015a36:	69fb      	ldr	r3, [r7, #28]
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	f003 030f 	and.w	r3, r3, #15
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015a44:	7e7b      	ldrb	r3, [r7, #25]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	8b7a      	ldrh	r2, [r7, #26]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d202      	bcs.n	8015a54 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a52:	e135      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a54:	7e7b      	ldrb	r3, [r7, #25]
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	8b7a      	ldrh	r2, [r7, #26]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	88db      	ldrh	r3, [r3, #6]
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f5 ffd7 	bl	800ba18 <lwip_htons>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7e:	2200      	movs	r2, #0
 8015a80:	701a      	strb	r2, [r3, #0]
 8015a82:	2200      	movs	r2, #0
 8015a84:	705a      	strb	r2, [r3, #1]
 8015a86:	2200      	movs	r2, #0
 8015a88:	709a      	strb	r2, [r3, #2]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a90:	8afa      	ldrh	r2, [r7, #22]
 8015a92:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015a94:	8afa      	ldrh	r2, [r7, #22]
 8015a96:	8b7b      	ldrh	r3, [r7, #26]
 8015a98:	4413      	add	r3, r2
 8015a9a:	b29a      	uxth	r2, r3
 8015a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	88db      	ldrh	r3, [r3, #6]
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	8afa      	ldrh	r2, [r7, #22]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d902      	bls.n	8015ab2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ab0:	e106      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8015ab8:	e068      	b.n	8015b8c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac2:	889b      	ldrh	r3, [r3, #4]
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	889b      	ldrh	r3, [r3, #4]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d235      	bcs.n	8015b3c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ad4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d020      	beq.n	8015b1e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ade:	889b      	ldrh	r3, [r3, #4]
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae4:	88db      	ldrh	r3, [r3, #6]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d307      	bcc.n	8015afc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aee:	88db      	ldrh	r3, [r3, #6]
 8015af0:	b29a      	uxth	r2, r3
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	889b      	ldrh	r3, [r3, #4]
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d902      	bls.n	8015b02 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b00:	e0de      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b04:	68ba      	ldr	r2, [r7, #8]
 8015b06:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0a:	88db      	ldrh	r3, [r3, #6]
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b10:	889b      	ldrh	r3, [r3, #4]
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	429a      	cmp	r2, r3
 8015b16:	d03d      	beq.n	8015b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015b1c:	e03a      	b.n	8015b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b20:	88db      	ldrh	r3, [r3, #6]
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	889b      	ldrh	r3, [r3, #4]
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d902      	bls.n	8015b34 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b32:	e0c5      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	68ba      	ldr	r2, [r7, #8]
 8015b38:	605a      	str	r2, [r3, #4]
      break;
 8015b3a:	e02b      	b.n	8015b94 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3e:	889b      	ldrh	r3, [r3, #4]
 8015b40:	b29a      	uxth	r2, r3
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	889b      	ldrh	r3, [r3, #4]
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d102      	bne.n	8015b52 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b50:	e0b6      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	889b      	ldrh	r3, [r3, #4]
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	88db      	ldrh	r3, [r3, #6]
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d202      	bcs.n	8015b68 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b66:	e0ab      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d009      	beq.n	8015b82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b70:	88db      	ldrh	r3, [r3, #6]
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	889b      	ldrh	r3, [r3, #4]
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d001      	beq.n	8015b82 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d193      	bne.n	8015aba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015b92:	e000      	b.n	8015b96 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015b94:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d12d      	bne.n	8015bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d01c      	beq.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba4:	88db      	ldrh	r3, [r3, #6]
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015baa:	889b      	ldrh	r3, [r3, #4]
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d906      	bls.n	8015bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015bb2:	4b45      	ldr	r3, [pc, #276]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bb4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015bb8:	4944      	ldr	r1, [pc, #272]	; (8015ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015bba:	4845      	ldr	r0, [pc, #276]	; (8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bbc:	f000 ff46 	bl	8016a4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc2:	68ba      	ldr	r2, [r7, #8]
 8015bc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc8:	88db      	ldrh	r3, [r3, #6]
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bce:	889b      	ldrh	r3, [r3, #4]
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d010      	beq.n	8015bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	623b      	str	r3, [r7, #32]
 8015bda:	e00d      	b.n	8015bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d006      	beq.n	8015bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015be4:	4b38      	ldr	r3, [pc, #224]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015be6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015bea:	493a      	ldr	r1, [pc, #232]	; (8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015bec:	4838      	ldr	r0, [pc, #224]	; (8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bee:	f000 ff2d 	bl	8016a4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	68ba      	ldr	r2, [r7, #8]
 8015bf6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d105      	bne.n	8015c0a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	7f9b      	ldrb	r3, [r3, #30]
 8015c02:	f003 0301 	and.w	r3, r3, #1
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d059      	beq.n	8015cbe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015c0a:	6a3b      	ldr	r3, [r7, #32]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d04f      	beq.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d006      	beq.n	8015c26 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	889b      	ldrh	r3, [r3, #4]
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d002      	beq.n	8015c2c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015c26:	2300      	movs	r3, #0
 8015c28:	623b      	str	r3, [r7, #32]
 8015c2a:	e041      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c36:	e012      	b.n	8015c5e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c40:	88db      	ldrh	r3, [r3, #6]
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c46:	889b      	ldrh	r3, [r3, #4]
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d002      	beq.n	8015c54 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	623b      	str	r3, [r7, #32]
            break;
 8015c52:	e007      	b.n	8015c64 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c56:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d1e9      	bne.n	8015c38 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c64:	6a3b      	ldr	r3, [r7, #32]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d022      	beq.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	685b      	ldr	r3, [r3, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d106      	bne.n	8015c80 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015c72:	4b15      	ldr	r3, [pc, #84]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c74:	f240 12df 	movw	r2, #479	; 0x1df
 8015c78:	4917      	ldr	r1, [pc, #92]	; (8015cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c7a:	4815      	ldr	r0, [pc, #84]	; (8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c7c:	f000 fee6 	bl	8016a4c <iprintf>
          LWIP_ASSERT("sanity check",
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d106      	bne.n	8015c9a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015c8c:	4b0e      	ldr	r3, [pc, #56]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c92:	4911      	ldr	r1, [pc, #68]	; (8015cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c94:	480e      	ldr	r0, [pc, #56]	; (8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c96:	f000 fed9 	bl	8016a4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d006      	beq.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015ca2:	4b09      	ldr	r3, [pc, #36]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ca4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015ca8:	490c      	ldr	r1, [pc, #48]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015caa:	4809      	ldr	r0, [pc, #36]	; (8015cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cac:	f000 fece 	bl	8016a4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015cb0:	6a3b      	ldr	r3, [r7, #32]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	bf14      	ite	ne
 8015cb6:	2301      	movne	r3, #1
 8015cb8:	2300      	moveq	r3, #0
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	e000      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015cbe:	2300      	movs	r3, #0
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3730      	adds	r7, #48	; 0x30
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	0801b6cc 	.word	0x0801b6cc
 8015ccc:	0801b7b0 	.word	0x0801b7b0
 8015cd0:	0801b714 	.word	0x0801b714
 8015cd4:	0801b7d0 	.word	0x0801b7d0
 8015cd8:	0801b808 	.word	0x0801b808
 8015cdc:	0801b818 	.word	0x0801b818

08015ce0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08e      	sub	sp, #56	; 0x38
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	f003 030f 	and.w	r3, r3, #15
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	b2db      	uxtb	r3, r3
 8015cfc:	2b14      	cmp	r3, #20
 8015cfe:	f040 8167 	bne.w	8015fd0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d04:	88db      	ldrh	r3, [r3, #6]
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7f5 fe85 	bl	800ba18 <lwip_htons>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	00db      	lsls	r3, r3, #3
 8015d18:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1c:	885b      	ldrh	r3, [r3, #2]
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7f5 fe79 	bl	800ba18 <lwip_htons>
 8015d26:	4603      	mov	r3, r0
 8015d28:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2c:	781b      	ldrb	r3, [r3, #0]
 8015d2e:	f003 030f 	and.w	r3, r3, #15
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d42:	429a      	cmp	r2, r3
 8015d44:	f0c0 8146 	bcc.w	8015fd4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d50:	1ad3      	subs	r3, r2, r3
 8015d52:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f7f7 fb77 	bl	800d448 <pbuf_clen>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d5e:	4b9f      	ldr	r3, [pc, #636]	; (8015fdc <ip4_reass+0x2fc>)
 8015d60:	881b      	ldrh	r3, [r3, #0]
 8015d62:	461a      	mov	r2, r3
 8015d64:	8c3b      	ldrh	r3, [r7, #32]
 8015d66:	4413      	add	r3, r2
 8015d68:	2b0a      	cmp	r3, #10
 8015d6a:	dd10      	ble.n	8015d8e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d6c:	8c3b      	ldrh	r3, [r7, #32]
 8015d6e:	4619      	mov	r1, r3
 8015d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d72:	f7ff fd81 	bl	8015878 <ip_reass_remove_oldest_datagram>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 812d 	beq.w	8015fd8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015d7e:	4b97      	ldr	r3, [pc, #604]	; (8015fdc <ip4_reass+0x2fc>)
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	461a      	mov	r2, r3
 8015d84:	8c3b      	ldrh	r3, [r7, #32]
 8015d86:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d88:	2b0a      	cmp	r3, #10
 8015d8a:	f300 8125 	bgt.w	8015fd8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d8e:	4b94      	ldr	r3, [pc, #592]	; (8015fe0 <ip4_reass+0x300>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	633b      	str	r3, [r7, #48]	; 0x30
 8015d94:	e015      	b.n	8015dc2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d98:	695a      	ldr	r2, [r3, #20]
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	68db      	ldr	r3, [r3, #12]
 8015d9e:	429a      	cmp	r2, r3
 8015da0:	d10c      	bne.n	8015dbc <ip4_reass+0xdc>
 8015da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da4:	699a      	ldr	r2, [r3, #24]
 8015da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da8:	691b      	ldr	r3, [r3, #16]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d106      	bne.n	8015dbc <ip4_reass+0xdc>
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	899a      	ldrh	r2, [r3, #12]
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	889b      	ldrh	r3, [r3, #4]
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d006      	beq.n	8015dca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d1e6      	bne.n	8015d96 <ip4_reass+0xb6>
 8015dc8:	e000      	b.n	8015dcc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015dca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d109      	bne.n	8015de6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015dd2:	8c3b      	ldrh	r3, [r7, #32]
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dd8:	f7ff fdb0 	bl	801593c <ip_reass_enqueue_new_datagram>
 8015ddc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d11c      	bne.n	8015e1e <ip4_reass+0x13e>
      goto nullreturn;
 8015de4:	e109      	b.n	8015ffa <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de8:	88db      	ldrh	r3, [r3, #6]
 8015dea:	b29b      	uxth	r3, r3
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7f5 fe13 	bl	800ba18 <lwip_htons>
 8015df2:	4603      	mov	r3, r0
 8015df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d110      	bne.n	8015e1e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfe:	89db      	ldrh	r3, [r3, #14]
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7f5 fe09 	bl	800ba18 <lwip_htons>
 8015e06:	4603      	mov	r3, r0
 8015e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d006      	beq.n	8015e1e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	3308      	adds	r3, #8
 8015e14:	2214      	movs	r2, #20
 8015e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f000 fd8c 	bl	8016936 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	f003 0320 	and.w	r3, r3, #32
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	bf0c      	ite	eq
 8015e2c:	2301      	moveq	r3, #1
 8015e2e:	2300      	movne	r3, #0
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015e34:	69fb      	ldr	r3, [r7, #28]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d00e      	beq.n	8015e58 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e3e:	4413      	add	r3, r2
 8015e40:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015e42:	8b7a      	ldrh	r2, [r7, #26]
 8015e44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e46:	429a      	cmp	r2, r3
 8015e48:	f0c0 80a0 	bcc.w	8015f8c <ip4_reass+0x2ac>
 8015e4c:	8b7b      	ldrh	r3, [r7, #26]
 8015e4e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e52:	4293      	cmp	r3, r2
 8015e54:	f200 809a 	bhi.w	8015f8c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e58:	69fa      	ldr	r2, [r7, #28]
 8015e5a:	6879      	ldr	r1, [r7, #4]
 8015e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e5e:	f7ff fdd5 	bl	8015a0c <ip_reass_chain_frag_into_datagram_and_validate>
 8015e62:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e6a:	f000 8091 	beq.w	8015f90 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e6e:	4b5b      	ldr	r3, [pc, #364]	; (8015fdc <ip4_reass+0x2fc>)
 8015e70:	881a      	ldrh	r2, [r3, #0]
 8015e72:	8c3b      	ldrh	r3, [r7, #32]
 8015e74:	4413      	add	r3, r2
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	4b58      	ldr	r3, [pc, #352]	; (8015fdc <ip4_reass+0x2fc>)
 8015e7a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d00d      	beq.n	8015e9e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e86:	4413      	add	r3, r2
 8015e88:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8c:	8a7a      	ldrh	r2, [r7, #18]
 8015e8e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e92:	7f9b      	ldrb	r3, [r3, #30]
 8015e94:	f043 0301 	orr.w	r3, r3, #1
 8015e98:	b2da      	uxtb	r2, r3
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d171      	bne.n	8015f88 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea6:	8b9b      	ldrh	r3, [r3, #28]
 8015ea8:	3314      	adds	r3, #20
 8015eaa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	3308      	adds	r3, #8
 8015ec2:	2214      	movs	r2, #20
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ec8:	f000 fd35 	bl	8016936 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015ecc:	8a3b      	ldrh	r3, [r7, #16]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7f5 fda2 	bl	800ba18 <lwip_htons>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eda:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ede:	2200      	movs	r2, #0
 8015ee0:	719a      	strb	r2, [r3, #6]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee8:	2200      	movs	r2, #0
 8015eea:	729a      	strb	r2, [r3, #10]
 8015eec:	2200      	movs	r2, #0
 8015eee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015ef6:	e00d      	b.n	8015f14 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015efe:	2114      	movs	r1, #20
 8015f00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f02:	f7f7 f98d 	bl	800d220 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015f06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f7f7 fadd 	bl	800d4c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d1ee      	bne.n	8015ef8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015f1a:	4b31      	ldr	r3, [pc, #196]	; (8015fe0 <ip4_reass+0x300>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d102      	bne.n	8015f2a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015f24:	2300      	movs	r3, #0
 8015f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f28:	e010      	b.n	8015f4c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f2a:	4b2d      	ldr	r3, [pc, #180]	; (8015fe0 <ip4_reass+0x300>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f30:	e007      	b.n	8015f42 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d006      	beq.n	8015f4a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d1f4      	bne.n	8015f32 <ip4_reass+0x252>
 8015f48:	e000      	b.n	8015f4c <ip4_reass+0x26c>
          break;
 8015f4a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f50:	f7ff fd2e 	bl	80159b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f7f7 fa77 	bl	800d448 <pbuf_clen>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015f5e:	4b1f      	ldr	r3, [pc, #124]	; (8015fdc <ip4_reass+0x2fc>)
 8015f60:	881b      	ldrh	r3, [r3, #0]
 8015f62:	8c3a      	ldrh	r2, [r7, #32]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d906      	bls.n	8015f76 <ip4_reass+0x296>
 8015f68:	4b1e      	ldr	r3, [pc, #120]	; (8015fe4 <ip4_reass+0x304>)
 8015f6a:	f240 229b 	movw	r2, #667	; 0x29b
 8015f6e:	491e      	ldr	r1, [pc, #120]	; (8015fe8 <ip4_reass+0x308>)
 8015f70:	481e      	ldr	r0, [pc, #120]	; (8015fec <ip4_reass+0x30c>)
 8015f72:	f000 fd6b 	bl	8016a4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015f76:	4b19      	ldr	r3, [pc, #100]	; (8015fdc <ip4_reass+0x2fc>)
 8015f78:	881a      	ldrh	r2, [r3, #0]
 8015f7a:	8c3b      	ldrh	r3, [r7, #32]
 8015f7c:	1ad3      	subs	r3, r2, r3
 8015f7e:	b29a      	uxth	r2, r3
 8015f80:	4b16      	ldr	r3, [pc, #88]	; (8015fdc <ip4_reass+0x2fc>)
 8015f82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	e03c      	b.n	8016002 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	e03a      	b.n	8016002 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015f8c:	bf00      	nop
 8015f8e:	e000      	b.n	8015f92 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015f90:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d106      	bne.n	8015fa6 <ip4_reass+0x2c6>
 8015f98:	4b12      	ldr	r3, [pc, #72]	; (8015fe4 <ip4_reass+0x304>)
 8015f9a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015f9e:	4914      	ldr	r1, [pc, #80]	; (8015ff0 <ip4_reass+0x310>)
 8015fa0:	4812      	ldr	r0, [pc, #72]	; (8015fec <ip4_reass+0x30c>)
 8015fa2:	f000 fd53 	bl	8016a4c <iprintf>
  if (ipr->p == NULL) {
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d124      	bne.n	8015ff8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015fae:	4b0c      	ldr	r3, [pc, #48]	; (8015fe0 <ip4_reass+0x300>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d006      	beq.n	8015fc6 <ip4_reass+0x2e6>
 8015fb8:	4b0a      	ldr	r3, [pc, #40]	; (8015fe4 <ip4_reass+0x304>)
 8015fba:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015fbe:	490d      	ldr	r1, [pc, #52]	; (8015ff4 <ip4_reass+0x314>)
 8015fc0:	480a      	ldr	r0, [pc, #40]	; (8015fec <ip4_reass+0x30c>)
 8015fc2:	f000 fd43 	bl	8016a4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fca:	f7ff fcf1 	bl	80159b0 <ip_reass_dequeue_datagram>
 8015fce:	e014      	b.n	8015ffa <ip4_reass+0x31a>
    goto nullreturn;
 8015fd0:	bf00      	nop
 8015fd2:	e012      	b.n	8015ffa <ip4_reass+0x31a>
    goto nullreturn;
 8015fd4:	bf00      	nop
 8015fd6:	e010      	b.n	8015ffa <ip4_reass+0x31a>
      goto nullreturn;
 8015fd8:	bf00      	nop
 8015fda:	e00e      	b.n	8015ffa <ip4_reass+0x31a>
 8015fdc:	20005530 	.word	0x20005530
 8015fe0:	2000552c 	.word	0x2000552c
 8015fe4:	0801b6cc 	.word	0x0801b6cc
 8015fe8:	0801b83c 	.word	0x0801b83c
 8015fec:	0801b714 	.word	0x0801b714
 8015ff0:	0801b858 	.word	0x0801b858
 8015ff4:	0801b864 	.word	0x0801b864
  }

nullreturn:
 8015ff8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7f7 f996 	bl	800d32c <pbuf_free>
  return NULL;
 8016000:	2300      	movs	r3, #0
}
 8016002:	4618      	mov	r0, r3
 8016004:	3738      	adds	r7, #56	; 0x38
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop

0801600c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016010:	2005      	movs	r0, #5
 8016012:	f7f6 fa95 	bl	800c540 <memp_malloc>
 8016016:	4603      	mov	r3, r0
}
 8016018:	4618      	mov	r0, r3
 801601a:	bd80      	pop	{r7, pc}

0801601c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d106      	bne.n	8016038 <ip_frag_free_pbuf_custom_ref+0x1c>
 801602a:	4b07      	ldr	r3, [pc, #28]	; (8016048 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801602c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016030:	4906      	ldr	r1, [pc, #24]	; (801604c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016032:	4807      	ldr	r0, [pc, #28]	; (8016050 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016034:	f000 fd0a 	bl	8016a4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016038:	6879      	ldr	r1, [r7, #4]
 801603a:	2005      	movs	r0, #5
 801603c:	f7f6 fad2 	bl	800c5e4 <memp_free>
}
 8016040:	bf00      	nop
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	0801b6cc 	.word	0x0801b6cc
 801604c:	0801b884 	.word	0x0801b884
 8016050:	0801b714 	.word	0x0801b714

08016054 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d106      	bne.n	8016074 <ipfrag_free_pbuf_custom+0x20>
 8016066:	4b11      	ldr	r3, [pc, #68]	; (80160ac <ipfrag_free_pbuf_custom+0x58>)
 8016068:	f240 22ce 	movw	r2, #718	; 0x2ce
 801606c:	4910      	ldr	r1, [pc, #64]	; (80160b0 <ipfrag_free_pbuf_custom+0x5c>)
 801606e:	4811      	ldr	r0, [pc, #68]	; (80160b4 <ipfrag_free_pbuf_custom+0x60>)
 8016070:	f000 fcec 	bl	8016a4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016074:	68fa      	ldr	r2, [r7, #12]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	429a      	cmp	r2, r3
 801607a:	d006      	beq.n	801608a <ipfrag_free_pbuf_custom+0x36>
 801607c:	4b0b      	ldr	r3, [pc, #44]	; (80160ac <ipfrag_free_pbuf_custom+0x58>)
 801607e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016082:	490d      	ldr	r1, [pc, #52]	; (80160b8 <ipfrag_free_pbuf_custom+0x64>)
 8016084:	480b      	ldr	r0, [pc, #44]	; (80160b4 <ipfrag_free_pbuf_custom+0x60>)
 8016086:	f000 fce1 	bl	8016a4c <iprintf>
  if (pcr->original != NULL) {
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	695b      	ldr	r3, [r3, #20]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d004      	beq.n	801609c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	695b      	ldr	r3, [r3, #20]
 8016096:	4618      	mov	r0, r3
 8016098:	f7f7 f948 	bl	800d32c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f7ff ffbd 	bl	801601c <ip_frag_free_pbuf_custom_ref>
}
 80160a2:	bf00      	nop
 80160a4:	3710      	adds	r7, #16
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}
 80160aa:	bf00      	nop
 80160ac:	0801b6cc 	.word	0x0801b6cc
 80160b0:	0801b890 	.word	0x0801b890
 80160b4:	0801b714 	.word	0x0801b714
 80160b8:	0801b89c 	.word	0x0801b89c

080160bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b094      	sub	sp, #80	; 0x50
 80160c0:	af02      	add	r7, sp, #8
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	60b9      	str	r1, [r7, #8]
 80160c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80160c8:	2300      	movs	r3, #0
 80160ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80160d2:	3b14      	subs	r3, #20
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	da00      	bge.n	80160da <ip4_frag+0x1e>
 80160d8:	3307      	adds	r3, #7
 80160da:	10db      	asrs	r3, r3, #3
 80160dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80160de:	2314      	movs	r3, #20
 80160e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80160e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80160ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	f003 030f 	and.w	r3, r3, #15
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b14      	cmp	r3, #20
 80160fc:	d002      	beq.n	8016104 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80160fe:	f06f 0305 	mvn.w	r3, #5
 8016102:	e110      	b.n	8016326 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	895b      	ldrh	r3, [r3, #10]
 8016108:	2b13      	cmp	r3, #19
 801610a:	d809      	bhi.n	8016120 <ip4_frag+0x64>
 801610c:	4b88      	ldr	r3, [pc, #544]	; (8016330 <ip4_frag+0x274>)
 801610e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016112:	4988      	ldr	r1, [pc, #544]	; (8016334 <ip4_frag+0x278>)
 8016114:	4888      	ldr	r0, [pc, #544]	; (8016338 <ip4_frag+0x27c>)
 8016116:	f000 fc99 	bl	8016a4c <iprintf>
 801611a:	f06f 0305 	mvn.w	r3, #5
 801611e:	e102      	b.n	8016326 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016122:	88db      	ldrh	r3, [r3, #6]
 8016124:	b29b      	uxth	r3, r3
 8016126:	4618      	mov	r0, r3
 8016128:	f7f5 fc76 	bl	800ba18 <lwip_htons>
 801612c:	4603      	mov	r3, r0
 801612e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801613a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801613c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016140:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	891b      	ldrh	r3, [r3, #8]
 8016146:	3b14      	subs	r3, #20
 8016148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801614c:	e0e1      	b.n	8016312 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801614e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016150:	00db      	lsls	r3, r3, #3
 8016152:	b29b      	uxth	r3, r3
 8016154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016158:	4293      	cmp	r3, r2
 801615a:	bf28      	it	cs
 801615c:	4613      	movcs	r3, r2
 801615e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016160:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016164:	2114      	movs	r1, #20
 8016166:	200e      	movs	r0, #14
 8016168:	f7f6 fdfc 	bl	800cd64 <pbuf_alloc>
 801616c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016170:	2b00      	cmp	r3, #0
 8016172:	f000 80d5 	beq.w	8016320 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016178:	895b      	ldrh	r3, [r3, #10]
 801617a:	2b13      	cmp	r3, #19
 801617c:	d806      	bhi.n	801618c <ip4_frag+0xd0>
 801617e:	4b6c      	ldr	r3, [pc, #432]	; (8016330 <ip4_frag+0x274>)
 8016180:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016184:	496d      	ldr	r1, [pc, #436]	; (801633c <ip4_frag+0x280>)
 8016186:	486c      	ldr	r0, [pc, #432]	; (8016338 <ip4_frag+0x27c>)
 8016188:	f000 fc60 	bl	8016a4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	2214      	movs	r2, #20
 8016192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016194:	4618      	mov	r0, r3
 8016196:	f000 fbce 	bl	8016936 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80161a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80161a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80161a6:	e064      	b.n	8016272 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	895a      	ldrh	r2, [r3, #10]
 80161ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ae:	1ad3      	subs	r3, r2, r3
 80161b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	895b      	ldrh	r3, [r3, #10]
 80161b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d906      	bls.n	80161ca <ip4_frag+0x10e>
 80161bc:	4b5c      	ldr	r3, [pc, #368]	; (8016330 <ip4_frag+0x274>)
 80161be:	f240 322d 	movw	r2, #813	; 0x32d
 80161c2:	495f      	ldr	r1, [pc, #380]	; (8016340 <ip4_frag+0x284>)
 80161c4:	485c      	ldr	r0, [pc, #368]	; (8016338 <ip4_frag+0x27c>)
 80161c6:	f000 fc41 	bl	8016a4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80161ca:	8bfa      	ldrh	r2, [r7, #30]
 80161cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80161d0:	4293      	cmp	r3, r2
 80161d2:	bf28      	it	cs
 80161d4:	4613      	movcs	r3, r2
 80161d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80161da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d105      	bne.n	80161ee <ip4_frag+0x132>
        poff = 0;
 80161e2:	2300      	movs	r3, #0
 80161e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	60fb      	str	r3, [r7, #12]
        continue;
 80161ec:	e041      	b.n	8016272 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80161ee:	f7ff ff0d 	bl	801600c <ip_frag_alloc_pbuf_custom_ref>
 80161f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80161f4:	69bb      	ldr	r3, [r7, #24]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d103      	bne.n	8016202 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80161fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161fc:	f7f7 f896 	bl	800d32c <pbuf_free>
        goto memerr;
 8016200:	e08f      	b.n	8016322 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016202:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801620a:	4413      	add	r3, r2
 801620c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016210:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016214:	9201      	str	r2, [sp, #4]
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	4603      	mov	r3, r0
 801621a:	2241      	movs	r2, #65	; 0x41
 801621c:	2000      	movs	r0, #0
 801621e:	f7f6 fecb 	bl	800cfb8 <pbuf_alloced_custom>
 8016222:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d106      	bne.n	8016238 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801622a:	69b8      	ldr	r0, [r7, #24]
 801622c:	f7ff fef6 	bl	801601c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016232:	f7f7 f87b 	bl	800d32c <pbuf_free>
        goto memerr;
 8016236:	e074      	b.n	8016322 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f7f7 f91d 	bl	800d478 <pbuf_ref>
      pcr->original = p;
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016244:	69bb      	ldr	r3, [r7, #24]
 8016246:	4a3f      	ldr	r2, [pc, #252]	; (8016344 <ip4_frag+0x288>)
 8016248:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801624a:	6979      	ldr	r1, [r7, #20]
 801624c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801624e:	f7f7 f93b 	bl	800d4c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016252:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016256:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801625a:	1ad3      	subs	r3, r2, r3
 801625c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016260:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016264:	2b00      	cmp	r3, #0
 8016266:	d004      	beq.n	8016272 <ip4_frag+0x1b6>
        poff = 0;
 8016268:	2300      	movs	r3, #0
 801626a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016272:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016276:	2b00      	cmp	r3, #0
 8016278:	d196      	bne.n	80161a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801627a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801627c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016280:	4413      	add	r3, r2
 8016282:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016288:	f1a3 0213 	sub.w	r2, r3, #19
 801628c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016290:	429a      	cmp	r2, r3
 8016292:	bfcc      	ite	gt
 8016294:	2301      	movgt	r3, #1
 8016296:	2300      	movle	r3, #0
 8016298:	b2db      	uxtb	r3, r3
 801629a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801629c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80162a6:	6a3b      	ldr	r3, [r7, #32]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d002      	beq.n	80162b2 <ip4_frag+0x1f6>
 80162ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d003      	beq.n	80162ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80162b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80162b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80162ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162bc:	4618      	mov	r0, r3
 80162be:	f7f5 fbab 	bl	800ba18 <lwip_htons>
 80162c2:	4603      	mov	r3, r0
 80162c4:	461a      	mov	r2, r3
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80162ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162cc:	3314      	adds	r3, #20
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7f5 fba1 	bl	800ba18 <lwip_htons>
 80162d6:	4603      	mov	r3, r0
 80162d8:	461a      	mov	r2, r3
 80162da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80162de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e0:	2200      	movs	r2, #0
 80162e2:	729a      	strb	r2, [r3, #10]
 80162e4:	2200      	movs	r2, #0
 80162e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	695b      	ldr	r3, [r3, #20]
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162f0:	68b8      	ldr	r0, [r7, #8]
 80162f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80162f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162f6:	f7f7 f819 	bl	800d32c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80162fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016300:	1ad3      	subs	r3, r2, r3
 8016302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016306:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801630a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801630c:	4413      	add	r3, r2
 801630e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016316:	2b00      	cmp	r3, #0
 8016318:	f47f af19 	bne.w	801614e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801631c:	2300      	movs	r3, #0
 801631e:	e002      	b.n	8016326 <ip4_frag+0x26a>
      goto memerr;
 8016320:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016326:	4618      	mov	r0, r3
 8016328:	3748      	adds	r7, #72	; 0x48
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	0801b6cc 	.word	0x0801b6cc
 8016334:	0801b8a8 	.word	0x0801b8a8
 8016338:	0801b714 	.word	0x0801b714
 801633c:	0801b8c4 	.word	0x0801b8c4
 8016340:	0801b8e4 	.word	0x0801b8e4
 8016344:	08016055 	.word	0x08016055

08016348 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b086      	sub	sp, #24
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
 8016350:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016352:	230e      	movs	r3, #14
 8016354:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	895b      	ldrh	r3, [r3, #10]
 801635a:	2b0e      	cmp	r3, #14
 801635c:	d96e      	bls.n	801643c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	7bdb      	ldrb	r3, [r3, #15]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d106      	bne.n	8016374 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801636c:	3301      	adds	r3, #1
 801636e:	b2da      	uxtb	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	7b1a      	ldrb	r2, [r3, #12]
 801637e:	7b5b      	ldrb	r3, [r3, #13]
 8016380:	021b      	lsls	r3, r3, #8
 8016382:	4313      	orrs	r3, r2
 8016384:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	f003 0301 	and.w	r3, r3, #1
 801638e:	2b00      	cmp	r3, #0
 8016390:	d023      	beq.n	80163da <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b01      	cmp	r3, #1
 8016398:	d10f      	bne.n	80163ba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	785b      	ldrb	r3, [r3, #1]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d11b      	bne.n	80163da <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80163a6:	2b5e      	cmp	r3, #94	; 0x5e
 80163a8:	d117      	bne.n	80163da <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	7b5b      	ldrb	r3, [r3, #13]
 80163ae:	f043 0310 	orr.w	r3, r3, #16
 80163b2:	b2da      	uxtb	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	735a      	strb	r2, [r3, #13]
 80163b8:	e00f      	b.n	80163da <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	2206      	movs	r2, #6
 80163be:	4928      	ldr	r1, [pc, #160]	; (8016460 <ethernet_input+0x118>)
 80163c0:	4618      	mov	r0, r3
 80163c2:	f000 faaa 	bl	801691a <memcmp>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d106      	bne.n	80163da <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	7b5b      	ldrb	r3, [r3, #13]
 80163d0:	f043 0308 	orr.w	r3, r3, #8
 80163d4:	b2da      	uxtb	r2, r3
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80163da:	89fb      	ldrh	r3, [r7, #14]
 80163dc:	2b08      	cmp	r3, #8
 80163de:	d003      	beq.n	80163e8 <ethernet_input+0xa0>
 80163e0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80163e4:	d014      	beq.n	8016410 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80163e6:	e032      	b.n	801644e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163ee:	f003 0308 	and.w	r3, r3, #8
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d024      	beq.n	8016440 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163f6:	8afb      	ldrh	r3, [r7, #22]
 80163f8:	4619      	mov	r1, r3
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7f6 ff10 	bl	800d220 <pbuf_remove_header>
 8016400:	4603      	mov	r3, r0
 8016402:	2b00      	cmp	r3, #0
 8016404:	d11e      	bne.n	8016444 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016406:	6839      	ldr	r1, [r7, #0]
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f7fe ff27 	bl	801525c <ip4_input>
      break;
 801640e:	e013      	b.n	8016438 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016416:	f003 0308 	and.w	r3, r3, #8
 801641a:	2b00      	cmp	r3, #0
 801641c:	d014      	beq.n	8016448 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801641e:	8afb      	ldrh	r3, [r7, #22]
 8016420:	4619      	mov	r1, r3
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f7f6 fefc 	bl	800d220 <pbuf_remove_header>
 8016428:	4603      	mov	r3, r0
 801642a:	2b00      	cmp	r3, #0
 801642c:	d10e      	bne.n	801644c <ethernet_input+0x104>
        etharp_input(p, netif);
 801642e:	6839      	ldr	r1, [r7, #0]
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f7fe f8c7 	bl	80145c4 <etharp_input>
      break;
 8016436:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016438:	2300      	movs	r3, #0
 801643a:	e00c      	b.n	8016456 <ethernet_input+0x10e>
    goto free_and_return;
 801643c:	bf00      	nop
 801643e:	e006      	b.n	801644e <ethernet_input+0x106>
        goto free_and_return;
 8016440:	bf00      	nop
 8016442:	e004      	b.n	801644e <ethernet_input+0x106>
        goto free_and_return;
 8016444:	bf00      	nop
 8016446:	e002      	b.n	801644e <ethernet_input+0x106>
        goto free_and_return;
 8016448:	bf00      	nop
 801644a:	e000      	b.n	801644e <ethernet_input+0x106>
        goto free_and_return;
 801644c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f7f6 ff6c 	bl	800d32c <pbuf_free>
  return ERR_OK;
 8016454:	2300      	movs	r3, #0
}
 8016456:	4618      	mov	r0, r3
 8016458:	3718      	adds	r7, #24
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	08022a10 	.word	0x08022a10

08016464 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016464:	b580      	push	{r7, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	af00      	add	r7, sp, #0
 801646a:	60f8      	str	r0, [r7, #12]
 801646c:	60b9      	str	r1, [r7, #8]
 801646e:	607a      	str	r2, [r7, #4]
 8016470:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016472:	8c3b      	ldrh	r3, [r7, #32]
 8016474:	4618      	mov	r0, r3
 8016476:	f7f5 facf 	bl	800ba18 <lwip_htons>
 801647a:	4603      	mov	r3, r0
 801647c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801647e:	210e      	movs	r1, #14
 8016480:	68b8      	ldr	r0, [r7, #8]
 8016482:	f7f6 febd 	bl	800d200 <pbuf_add_header>
 8016486:	4603      	mov	r3, r0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d125      	bne.n	80164d8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	8afa      	ldrh	r2, [r7, #22]
 8016496:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	2206      	movs	r2, #6
 801649c:	6839      	ldr	r1, [r7, #0]
 801649e:	4618      	mov	r0, r3
 80164a0:	f000 fa49 	bl	8016936 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	3306      	adds	r3, #6
 80164a8:	2206      	movs	r2, #6
 80164aa:	6879      	ldr	r1, [r7, #4]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f000 fa42 	bl	8016936 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164b8:	2b06      	cmp	r3, #6
 80164ba:	d006      	beq.n	80164ca <ethernet_output+0x66>
 80164bc:	4b0a      	ldr	r3, [pc, #40]	; (80164e8 <ethernet_output+0x84>)
 80164be:	f44f 7299 	mov.w	r2, #306	; 0x132
 80164c2:	490a      	ldr	r1, [pc, #40]	; (80164ec <ethernet_output+0x88>)
 80164c4:	480a      	ldr	r0, [pc, #40]	; (80164f0 <ethernet_output+0x8c>)
 80164c6:	f000 fac1 	bl	8016a4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	699b      	ldr	r3, [r3, #24]
 80164ce:	68b9      	ldr	r1, [r7, #8]
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	4798      	blx	r3
 80164d4:	4603      	mov	r3, r0
 80164d6:	e002      	b.n	80164de <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80164d8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80164da:	f06f 0301 	mvn.w	r3, #1
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3718      	adds	r7, #24
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}
 80164e6:	bf00      	nop
 80164e8:	0801b8f4 	.word	0x0801b8f4
 80164ec:	0801b92c 	.word	0x0801b92c
 80164f0:	0801b960 	.word	0x0801b960

080164f4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	2200      	movs	r2, #0
 8016502:	2104      	movs	r1, #4
 8016504:	4618      	mov	r0, r3
 8016506:	f7ef fe75 	bl	80061f4 <osMessageQueueNew>
 801650a:	4602      	mov	r2, r0
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d102      	bne.n	801651e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801651c:	e000      	b.n	8016520 <sys_mbox_new+0x2c>

  return ERR_OK;
 801651e:	2300      	movs	r3, #0
}
 8016520:	4618      	mov	r0, r3
 8016522:	3708      	adds	r7, #8
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6818      	ldr	r0, [r3, #0]
 8016536:	4639      	mov	r1, r7
 8016538:	2300      	movs	r3, #0
 801653a:	2200      	movs	r2, #0
 801653c:	f7ef fece 	bl	80062dc <osMessageQueuePut>
 8016540:	4603      	mov	r3, r0
 8016542:	2b00      	cmp	r3, #0
 8016544:	d102      	bne.n	801654c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016546:	2300      	movs	r3, #0
 8016548:	73fb      	strb	r3, [r7, #15]
 801654a:	e001      	b.n	8016550 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801654c:	23ff      	movs	r3, #255	; 0xff
 801654e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016550:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3710      	adds	r7, #16
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016568:	f7ef fb54 	bl	8005c14 <osKernelGetTickCount>
 801656c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d013      	beq.n	801659c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	6818      	ldr	r0, [r3, #0]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	68b9      	ldr	r1, [r7, #8]
 801657e:	f7ef ff0d 	bl	800639c <osMessageQueueGet>
 8016582:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d105      	bne.n	8016596 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801658a:	f7ef fb43 	bl	8005c14 <osKernelGetTickCount>
 801658e:	4602      	mov	r2, r0
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	1ad3      	subs	r3, r2, r3
 8016594:	e00f      	b.n	80165b6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801659a:	e00c      	b.n	80165b6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	6818      	ldr	r0, [r3, #0]
 80165a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165a4:	2200      	movs	r2, #0
 80165a6:	68b9      	ldr	r1, [r7, #8]
 80165a8:	f7ef fef8 	bl	800639c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80165ac:	f7ef fb32 	bl	8005c14 <osKernelGetTickCount>
 80165b0:	4602      	mov	r2, r0
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3718      	adds	r7, #24
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}

080165be <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80165be:	b480      	push	{r7}
 80165c0:	b083      	sub	sp, #12
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d101      	bne.n	80165d2 <sys_mbox_valid+0x14>
    return 0;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e000      	b.n	80165d4 <sys_mbox_valid+0x16>
  else
    return 1;
 80165d2:	2301      	movs	r3, #1
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	370c      	adds	r7, #12
 80165d8:	46bd      	mov	sp, r7
 80165da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165de:	4770      	bx	lr

080165e0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80165e4:	2000      	movs	r0, #0
 80165e6:	f7ef fbd7 	bl	8005d98 <osMutexNew>
 80165ea:	4603      	mov	r3, r0
 80165ec:	4a01      	ldr	r2, [pc, #4]	; (80165f4 <sys_init+0x14>)
 80165ee:	6013      	str	r3, [r2, #0]
#endif
}
 80165f0:	bf00      	nop
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	200136d0 	.word	0x200136d0

080165f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b082      	sub	sp, #8
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016600:	2000      	movs	r0, #0
 8016602:	f7ef fbc9 	bl	8005d98 <osMutexNew>
 8016606:	4602      	mov	r2, r0
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d102      	bne.n	801661a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016618:	e000      	b.n	801661c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801661a:	2300      	movs	r3, #0
}
 801661c:	4618      	mov	r0, r3
 801661e:	3708      	adds	r7, #8
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016634:	4618      	mov	r0, r3
 8016636:	f7ef fc35 	bl	8005ea4 <osMutexAcquire>
#endif
}
 801663a:	bf00      	nop
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016642:	b580      	push	{r7, lr}
 8016644:	b082      	sub	sp, #8
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4618      	mov	r0, r3
 8016650:	f7ef fc73 	bl	8005f3a <osMutexRelease>
}
 8016654:	bf00      	nop
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b08e      	sub	sp, #56	; 0x38
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
 8016668:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801666a:	f107 0314 	add.w	r3, r7, #20
 801666e:	2224      	movs	r2, #36	; 0x24
 8016670:	2100      	movs	r1, #0
 8016672:	4618      	mov	r0, r3
 8016674:	f000 f987 	bl	8016986 <memset>
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	617b      	str	r3, [r7, #20]
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016682:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016684:	f107 0314 	add.w	r3, r7, #20
 8016688:	461a      	mov	r2, r3
 801668a:	6879      	ldr	r1, [r7, #4]
 801668c:	68b8      	ldr	r0, [r7, #8]
 801668e:	f7ef fad6 	bl	8005c3e <osThreadNew>
 8016692:	4603      	mov	r3, r0
#endif
}
 8016694:	4618      	mov	r0, r3
 8016696:	3738      	adds	r7, #56	; 0x38
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80166a0:	4b04      	ldr	r3, [pc, #16]	; (80166b4 <sys_arch_protect+0x18>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7ef fbfb 	bl	8005ea4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80166ae:	2301      	movs	r3, #1
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	bd80      	pop	{r7, pc}
 80166b4:	200136d0 	.word	0x200136d0

080166b8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b082      	sub	sp, #8
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80166c0:	4b04      	ldr	r3, [pc, #16]	; (80166d4 <sys_arch_unprotect+0x1c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7ef fc38 	bl	8005f3a <osMutexRelease>
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	200136d0 	.word	0x200136d0

080166d8 <atoi>:
 80166d8:	220a      	movs	r2, #10
 80166da:	2100      	movs	r1, #0
 80166dc:	f000 bca4 	b.w	8017028 <strtol>

080166e0 <std>:
 80166e0:	2300      	movs	r3, #0
 80166e2:	b510      	push	{r4, lr}
 80166e4:	4604      	mov	r4, r0
 80166e6:	e9c0 3300 	strd	r3, r3, [r0]
 80166ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166ee:	6083      	str	r3, [r0, #8]
 80166f0:	8181      	strh	r1, [r0, #12]
 80166f2:	6643      	str	r3, [r0, #100]	; 0x64
 80166f4:	81c2      	strh	r2, [r0, #14]
 80166f6:	6183      	str	r3, [r0, #24]
 80166f8:	4619      	mov	r1, r3
 80166fa:	2208      	movs	r2, #8
 80166fc:	305c      	adds	r0, #92	; 0x5c
 80166fe:	f000 f942 	bl	8016986 <memset>
 8016702:	4b05      	ldr	r3, [pc, #20]	; (8016718 <std+0x38>)
 8016704:	6263      	str	r3, [r4, #36]	; 0x24
 8016706:	4b05      	ldr	r3, [pc, #20]	; (801671c <std+0x3c>)
 8016708:	62a3      	str	r3, [r4, #40]	; 0x28
 801670a:	4b05      	ldr	r3, [pc, #20]	; (8016720 <std+0x40>)
 801670c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801670e:	4b05      	ldr	r3, [pc, #20]	; (8016724 <std+0x44>)
 8016710:	6224      	str	r4, [r4, #32]
 8016712:	6323      	str	r3, [r4, #48]	; 0x30
 8016714:	bd10      	pop	{r4, pc}
 8016716:	bf00      	nop
 8016718:	08016d85 	.word	0x08016d85
 801671c:	08016da7 	.word	0x08016da7
 8016720:	08016ddf 	.word	0x08016ddf
 8016724:	08016e03 	.word	0x08016e03

08016728 <_cleanup_r>:
 8016728:	4901      	ldr	r1, [pc, #4]	; (8016730 <_cleanup_r+0x8>)
 801672a:	f000 b8af 	b.w	801688c <_fwalk_reent>
 801672e:	bf00      	nop
 8016730:	08017355 	.word	0x08017355

08016734 <__sfmoreglue>:
 8016734:	b570      	push	{r4, r5, r6, lr}
 8016736:	1e4a      	subs	r2, r1, #1
 8016738:	2568      	movs	r5, #104	; 0x68
 801673a:	4355      	muls	r5, r2
 801673c:	460e      	mov	r6, r1
 801673e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016742:	f000 f929 	bl	8016998 <_malloc_r>
 8016746:	4604      	mov	r4, r0
 8016748:	b140      	cbz	r0, 801675c <__sfmoreglue+0x28>
 801674a:	2100      	movs	r1, #0
 801674c:	e9c0 1600 	strd	r1, r6, [r0]
 8016750:	300c      	adds	r0, #12
 8016752:	60a0      	str	r0, [r4, #8]
 8016754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016758:	f000 f915 	bl	8016986 <memset>
 801675c:	4620      	mov	r0, r4
 801675e:	bd70      	pop	{r4, r5, r6, pc}

08016760 <__sfp_lock_acquire>:
 8016760:	4801      	ldr	r0, [pc, #4]	; (8016768 <__sfp_lock_acquire+0x8>)
 8016762:	f000 b8d8 	b.w	8016916 <__retarget_lock_acquire_recursive>
 8016766:	bf00      	nop
 8016768:	200136dc 	.word	0x200136dc

0801676c <__sfp_lock_release>:
 801676c:	4801      	ldr	r0, [pc, #4]	; (8016774 <__sfp_lock_release+0x8>)
 801676e:	f000 b8d3 	b.w	8016918 <__retarget_lock_release_recursive>
 8016772:	bf00      	nop
 8016774:	200136dc 	.word	0x200136dc

08016778 <__sinit_lock_acquire>:
 8016778:	4801      	ldr	r0, [pc, #4]	; (8016780 <__sinit_lock_acquire+0x8>)
 801677a:	f000 b8cc 	b.w	8016916 <__retarget_lock_acquire_recursive>
 801677e:	bf00      	nop
 8016780:	200136d7 	.word	0x200136d7

08016784 <__sinit_lock_release>:
 8016784:	4801      	ldr	r0, [pc, #4]	; (801678c <__sinit_lock_release+0x8>)
 8016786:	f000 b8c7 	b.w	8016918 <__retarget_lock_release_recursive>
 801678a:	bf00      	nop
 801678c:	200136d7 	.word	0x200136d7

08016790 <__sinit>:
 8016790:	b510      	push	{r4, lr}
 8016792:	4604      	mov	r4, r0
 8016794:	f7ff fff0 	bl	8016778 <__sinit_lock_acquire>
 8016798:	69a3      	ldr	r3, [r4, #24]
 801679a:	b11b      	cbz	r3, 80167a4 <__sinit+0x14>
 801679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a0:	f7ff bff0 	b.w	8016784 <__sinit_lock_release>
 80167a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80167a8:	6523      	str	r3, [r4, #80]	; 0x50
 80167aa:	4b13      	ldr	r3, [pc, #76]	; (80167f8 <__sinit+0x68>)
 80167ac:	4a13      	ldr	r2, [pc, #76]	; (80167fc <__sinit+0x6c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80167b2:	42a3      	cmp	r3, r4
 80167b4:	bf04      	itt	eq
 80167b6:	2301      	moveq	r3, #1
 80167b8:	61a3      	streq	r3, [r4, #24]
 80167ba:	4620      	mov	r0, r4
 80167bc:	f000 f820 	bl	8016800 <__sfp>
 80167c0:	6060      	str	r0, [r4, #4]
 80167c2:	4620      	mov	r0, r4
 80167c4:	f000 f81c 	bl	8016800 <__sfp>
 80167c8:	60a0      	str	r0, [r4, #8]
 80167ca:	4620      	mov	r0, r4
 80167cc:	f000 f818 	bl	8016800 <__sfp>
 80167d0:	2200      	movs	r2, #0
 80167d2:	60e0      	str	r0, [r4, #12]
 80167d4:	2104      	movs	r1, #4
 80167d6:	6860      	ldr	r0, [r4, #4]
 80167d8:	f7ff ff82 	bl	80166e0 <std>
 80167dc:	68a0      	ldr	r0, [r4, #8]
 80167de:	2201      	movs	r2, #1
 80167e0:	2109      	movs	r1, #9
 80167e2:	f7ff ff7d 	bl	80166e0 <std>
 80167e6:	68e0      	ldr	r0, [r4, #12]
 80167e8:	2202      	movs	r2, #2
 80167ea:	2112      	movs	r1, #18
 80167ec:	f7ff ff78 	bl	80166e0 <std>
 80167f0:	2301      	movs	r3, #1
 80167f2:	61a3      	str	r3, [r4, #24]
 80167f4:	e7d2      	b.n	801679c <__sinit+0xc>
 80167f6:	bf00      	nop
 80167f8:	08022b80 	.word	0x08022b80
 80167fc:	08016729 	.word	0x08016729

08016800 <__sfp>:
 8016800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016802:	4607      	mov	r7, r0
 8016804:	f7ff ffac 	bl	8016760 <__sfp_lock_acquire>
 8016808:	4b1e      	ldr	r3, [pc, #120]	; (8016884 <__sfp+0x84>)
 801680a:	681e      	ldr	r6, [r3, #0]
 801680c:	69b3      	ldr	r3, [r6, #24]
 801680e:	b913      	cbnz	r3, 8016816 <__sfp+0x16>
 8016810:	4630      	mov	r0, r6
 8016812:	f7ff ffbd 	bl	8016790 <__sinit>
 8016816:	3648      	adds	r6, #72	; 0x48
 8016818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801681c:	3b01      	subs	r3, #1
 801681e:	d503      	bpl.n	8016828 <__sfp+0x28>
 8016820:	6833      	ldr	r3, [r6, #0]
 8016822:	b30b      	cbz	r3, 8016868 <__sfp+0x68>
 8016824:	6836      	ldr	r6, [r6, #0]
 8016826:	e7f7      	b.n	8016818 <__sfp+0x18>
 8016828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801682c:	b9d5      	cbnz	r5, 8016864 <__sfp+0x64>
 801682e:	4b16      	ldr	r3, [pc, #88]	; (8016888 <__sfp+0x88>)
 8016830:	60e3      	str	r3, [r4, #12]
 8016832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016836:	6665      	str	r5, [r4, #100]	; 0x64
 8016838:	f000 f86c 	bl	8016914 <__retarget_lock_init_recursive>
 801683c:	f7ff ff96 	bl	801676c <__sfp_lock_release>
 8016840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016848:	6025      	str	r5, [r4, #0]
 801684a:	61a5      	str	r5, [r4, #24]
 801684c:	2208      	movs	r2, #8
 801684e:	4629      	mov	r1, r5
 8016850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016854:	f000 f897 	bl	8016986 <memset>
 8016858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801685c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016860:	4620      	mov	r0, r4
 8016862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016864:	3468      	adds	r4, #104	; 0x68
 8016866:	e7d9      	b.n	801681c <__sfp+0x1c>
 8016868:	2104      	movs	r1, #4
 801686a:	4638      	mov	r0, r7
 801686c:	f7ff ff62 	bl	8016734 <__sfmoreglue>
 8016870:	4604      	mov	r4, r0
 8016872:	6030      	str	r0, [r6, #0]
 8016874:	2800      	cmp	r0, #0
 8016876:	d1d5      	bne.n	8016824 <__sfp+0x24>
 8016878:	f7ff ff78 	bl	801676c <__sfp_lock_release>
 801687c:	230c      	movs	r3, #12
 801687e:	603b      	str	r3, [r7, #0]
 8016880:	e7ee      	b.n	8016860 <__sfp+0x60>
 8016882:	bf00      	nop
 8016884:	08022b80 	.word	0x08022b80
 8016888:	ffff0001 	.word	0xffff0001

0801688c <_fwalk_reent>:
 801688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016890:	4606      	mov	r6, r0
 8016892:	4688      	mov	r8, r1
 8016894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016898:	2700      	movs	r7, #0
 801689a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801689e:	f1b9 0901 	subs.w	r9, r9, #1
 80168a2:	d505      	bpl.n	80168b0 <_fwalk_reent+0x24>
 80168a4:	6824      	ldr	r4, [r4, #0]
 80168a6:	2c00      	cmp	r4, #0
 80168a8:	d1f7      	bne.n	801689a <_fwalk_reent+0xe>
 80168aa:	4638      	mov	r0, r7
 80168ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168b0:	89ab      	ldrh	r3, [r5, #12]
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d907      	bls.n	80168c6 <_fwalk_reent+0x3a>
 80168b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168ba:	3301      	adds	r3, #1
 80168bc:	d003      	beq.n	80168c6 <_fwalk_reent+0x3a>
 80168be:	4629      	mov	r1, r5
 80168c0:	4630      	mov	r0, r6
 80168c2:	47c0      	blx	r8
 80168c4:	4307      	orrs	r7, r0
 80168c6:	3568      	adds	r5, #104	; 0x68
 80168c8:	e7e9      	b.n	801689e <_fwalk_reent+0x12>
	...

080168cc <__libc_init_array>:
 80168cc:	b570      	push	{r4, r5, r6, lr}
 80168ce:	4d0d      	ldr	r5, [pc, #52]	; (8016904 <__libc_init_array+0x38>)
 80168d0:	4c0d      	ldr	r4, [pc, #52]	; (8016908 <__libc_init_array+0x3c>)
 80168d2:	1b64      	subs	r4, r4, r5
 80168d4:	10a4      	asrs	r4, r4, #2
 80168d6:	2600      	movs	r6, #0
 80168d8:	42a6      	cmp	r6, r4
 80168da:	d109      	bne.n	80168f0 <__libc_init_array+0x24>
 80168dc:	4d0b      	ldr	r5, [pc, #44]	; (801690c <__libc_init_array+0x40>)
 80168de:	4c0c      	ldr	r4, [pc, #48]	; (8016910 <__libc_init_array+0x44>)
 80168e0:	f001 fb58 	bl	8017f94 <_init>
 80168e4:	1b64      	subs	r4, r4, r5
 80168e6:	10a4      	asrs	r4, r4, #2
 80168e8:	2600      	movs	r6, #0
 80168ea:	42a6      	cmp	r6, r4
 80168ec:	d105      	bne.n	80168fa <__libc_init_array+0x2e>
 80168ee:	bd70      	pop	{r4, r5, r6, pc}
 80168f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80168f4:	4798      	blx	r3
 80168f6:	3601      	adds	r6, #1
 80168f8:	e7ee      	b.n	80168d8 <__libc_init_array+0xc>
 80168fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80168fe:	4798      	blx	r3
 8016900:	3601      	adds	r6, #1
 8016902:	e7f2      	b.n	80168ea <__libc_init_array+0x1e>
 8016904:	08022c74 	.word	0x08022c74
 8016908:	08022c74 	.word	0x08022c74
 801690c:	08022c74 	.word	0x08022c74
 8016910:	08022c78 	.word	0x08022c78

08016914 <__retarget_lock_init_recursive>:
 8016914:	4770      	bx	lr

08016916 <__retarget_lock_acquire_recursive>:
 8016916:	4770      	bx	lr

08016918 <__retarget_lock_release_recursive>:
 8016918:	4770      	bx	lr

0801691a <memcmp>:
 801691a:	b530      	push	{r4, r5, lr}
 801691c:	3901      	subs	r1, #1
 801691e:	2400      	movs	r4, #0
 8016920:	42a2      	cmp	r2, r4
 8016922:	d101      	bne.n	8016928 <memcmp+0xe>
 8016924:	2000      	movs	r0, #0
 8016926:	e005      	b.n	8016934 <memcmp+0x1a>
 8016928:	5d03      	ldrb	r3, [r0, r4]
 801692a:	3401      	adds	r4, #1
 801692c:	5d0d      	ldrb	r5, [r1, r4]
 801692e:	42ab      	cmp	r3, r5
 8016930:	d0f6      	beq.n	8016920 <memcmp+0x6>
 8016932:	1b58      	subs	r0, r3, r5
 8016934:	bd30      	pop	{r4, r5, pc}

08016936 <memcpy>:
 8016936:	440a      	add	r2, r1
 8016938:	4291      	cmp	r1, r2
 801693a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801693e:	d100      	bne.n	8016942 <memcpy+0xc>
 8016940:	4770      	bx	lr
 8016942:	b510      	push	{r4, lr}
 8016944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016948:	f803 4f01 	strb.w	r4, [r3, #1]!
 801694c:	4291      	cmp	r1, r2
 801694e:	d1f9      	bne.n	8016944 <memcpy+0xe>
 8016950:	bd10      	pop	{r4, pc}

08016952 <memmove>:
 8016952:	4288      	cmp	r0, r1
 8016954:	b510      	push	{r4, lr}
 8016956:	eb01 0402 	add.w	r4, r1, r2
 801695a:	d902      	bls.n	8016962 <memmove+0x10>
 801695c:	4284      	cmp	r4, r0
 801695e:	4623      	mov	r3, r4
 8016960:	d807      	bhi.n	8016972 <memmove+0x20>
 8016962:	1e43      	subs	r3, r0, #1
 8016964:	42a1      	cmp	r1, r4
 8016966:	d008      	beq.n	801697a <memmove+0x28>
 8016968:	f811 2b01 	ldrb.w	r2, [r1], #1
 801696c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016970:	e7f8      	b.n	8016964 <memmove+0x12>
 8016972:	4402      	add	r2, r0
 8016974:	4601      	mov	r1, r0
 8016976:	428a      	cmp	r2, r1
 8016978:	d100      	bne.n	801697c <memmove+0x2a>
 801697a:	bd10      	pop	{r4, pc}
 801697c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016980:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016984:	e7f7      	b.n	8016976 <memmove+0x24>

08016986 <memset>:
 8016986:	4402      	add	r2, r0
 8016988:	4603      	mov	r3, r0
 801698a:	4293      	cmp	r3, r2
 801698c:	d100      	bne.n	8016990 <memset+0xa>
 801698e:	4770      	bx	lr
 8016990:	f803 1b01 	strb.w	r1, [r3], #1
 8016994:	e7f9      	b.n	801698a <memset+0x4>
	...

08016998 <_malloc_r>:
 8016998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699a:	1ccd      	adds	r5, r1, #3
 801699c:	f025 0503 	bic.w	r5, r5, #3
 80169a0:	3508      	adds	r5, #8
 80169a2:	2d0c      	cmp	r5, #12
 80169a4:	bf38      	it	cc
 80169a6:	250c      	movcc	r5, #12
 80169a8:	2d00      	cmp	r5, #0
 80169aa:	4606      	mov	r6, r0
 80169ac:	db01      	blt.n	80169b2 <_malloc_r+0x1a>
 80169ae:	42a9      	cmp	r1, r5
 80169b0:	d903      	bls.n	80169ba <_malloc_r+0x22>
 80169b2:	230c      	movs	r3, #12
 80169b4:	6033      	str	r3, [r6, #0]
 80169b6:	2000      	movs	r0, #0
 80169b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169ba:	f000 fd97 	bl	80174ec <__malloc_lock>
 80169be:	4921      	ldr	r1, [pc, #132]	; (8016a44 <_malloc_r+0xac>)
 80169c0:	680a      	ldr	r2, [r1, #0]
 80169c2:	4614      	mov	r4, r2
 80169c4:	b99c      	cbnz	r4, 80169ee <_malloc_r+0x56>
 80169c6:	4f20      	ldr	r7, [pc, #128]	; (8016a48 <_malloc_r+0xb0>)
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	b923      	cbnz	r3, 80169d6 <_malloc_r+0x3e>
 80169cc:	4621      	mov	r1, r4
 80169ce:	4630      	mov	r0, r6
 80169d0:	f000 f974 	bl	8016cbc <_sbrk_r>
 80169d4:	6038      	str	r0, [r7, #0]
 80169d6:	4629      	mov	r1, r5
 80169d8:	4630      	mov	r0, r6
 80169da:	f000 f96f 	bl	8016cbc <_sbrk_r>
 80169de:	1c43      	adds	r3, r0, #1
 80169e0:	d123      	bne.n	8016a2a <_malloc_r+0x92>
 80169e2:	230c      	movs	r3, #12
 80169e4:	6033      	str	r3, [r6, #0]
 80169e6:	4630      	mov	r0, r6
 80169e8:	f000 fd86 	bl	80174f8 <__malloc_unlock>
 80169ec:	e7e3      	b.n	80169b6 <_malloc_r+0x1e>
 80169ee:	6823      	ldr	r3, [r4, #0]
 80169f0:	1b5b      	subs	r3, r3, r5
 80169f2:	d417      	bmi.n	8016a24 <_malloc_r+0x8c>
 80169f4:	2b0b      	cmp	r3, #11
 80169f6:	d903      	bls.n	8016a00 <_malloc_r+0x68>
 80169f8:	6023      	str	r3, [r4, #0]
 80169fa:	441c      	add	r4, r3
 80169fc:	6025      	str	r5, [r4, #0]
 80169fe:	e004      	b.n	8016a0a <_malloc_r+0x72>
 8016a00:	6863      	ldr	r3, [r4, #4]
 8016a02:	42a2      	cmp	r2, r4
 8016a04:	bf0c      	ite	eq
 8016a06:	600b      	streq	r3, [r1, #0]
 8016a08:	6053      	strne	r3, [r2, #4]
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f000 fd74 	bl	80174f8 <__malloc_unlock>
 8016a10:	f104 000b 	add.w	r0, r4, #11
 8016a14:	1d23      	adds	r3, r4, #4
 8016a16:	f020 0007 	bic.w	r0, r0, #7
 8016a1a:	1ac2      	subs	r2, r0, r3
 8016a1c:	d0cc      	beq.n	80169b8 <_malloc_r+0x20>
 8016a1e:	1a1b      	subs	r3, r3, r0
 8016a20:	50a3      	str	r3, [r4, r2]
 8016a22:	e7c9      	b.n	80169b8 <_malloc_r+0x20>
 8016a24:	4622      	mov	r2, r4
 8016a26:	6864      	ldr	r4, [r4, #4]
 8016a28:	e7cc      	b.n	80169c4 <_malloc_r+0x2c>
 8016a2a:	1cc4      	adds	r4, r0, #3
 8016a2c:	f024 0403 	bic.w	r4, r4, #3
 8016a30:	42a0      	cmp	r0, r4
 8016a32:	d0e3      	beq.n	80169fc <_malloc_r+0x64>
 8016a34:	1a21      	subs	r1, r4, r0
 8016a36:	4630      	mov	r0, r6
 8016a38:	f000 f940 	bl	8016cbc <_sbrk_r>
 8016a3c:	3001      	adds	r0, #1
 8016a3e:	d1dd      	bne.n	80169fc <_malloc_r+0x64>
 8016a40:	e7cf      	b.n	80169e2 <_malloc_r+0x4a>
 8016a42:	bf00      	nop
 8016a44:	20005534 	.word	0x20005534
 8016a48:	20005538 	.word	0x20005538

08016a4c <iprintf>:
 8016a4c:	b40f      	push	{r0, r1, r2, r3}
 8016a4e:	4b0a      	ldr	r3, [pc, #40]	; (8016a78 <iprintf+0x2c>)
 8016a50:	b513      	push	{r0, r1, r4, lr}
 8016a52:	681c      	ldr	r4, [r3, #0]
 8016a54:	b124      	cbz	r4, 8016a60 <iprintf+0x14>
 8016a56:	69a3      	ldr	r3, [r4, #24]
 8016a58:	b913      	cbnz	r3, 8016a60 <iprintf+0x14>
 8016a5a:	4620      	mov	r0, r4
 8016a5c:	f7ff fe98 	bl	8016790 <__sinit>
 8016a60:	ab05      	add	r3, sp, #20
 8016a62:	9a04      	ldr	r2, [sp, #16]
 8016a64:	68a1      	ldr	r1, [r4, #8]
 8016a66:	9301      	str	r3, [sp, #4]
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f000 ff21 	bl	80178b0 <_vfiprintf_r>
 8016a6e:	b002      	add	sp, #8
 8016a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a74:	b004      	add	sp, #16
 8016a76:	4770      	bx	lr
 8016a78:	200004b4 	.word	0x200004b4

08016a7c <_puts_r>:
 8016a7c:	b570      	push	{r4, r5, r6, lr}
 8016a7e:	460e      	mov	r6, r1
 8016a80:	4605      	mov	r5, r0
 8016a82:	b118      	cbz	r0, 8016a8c <_puts_r+0x10>
 8016a84:	6983      	ldr	r3, [r0, #24]
 8016a86:	b90b      	cbnz	r3, 8016a8c <_puts_r+0x10>
 8016a88:	f7ff fe82 	bl	8016790 <__sinit>
 8016a8c:	69ab      	ldr	r3, [r5, #24]
 8016a8e:	68ac      	ldr	r4, [r5, #8]
 8016a90:	b913      	cbnz	r3, 8016a98 <_puts_r+0x1c>
 8016a92:	4628      	mov	r0, r5
 8016a94:	f7ff fe7c 	bl	8016790 <__sinit>
 8016a98:	4b2c      	ldr	r3, [pc, #176]	; (8016b4c <_puts_r+0xd0>)
 8016a9a:	429c      	cmp	r4, r3
 8016a9c:	d120      	bne.n	8016ae0 <_puts_r+0x64>
 8016a9e:	686c      	ldr	r4, [r5, #4]
 8016aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aa2:	07db      	lsls	r3, r3, #31
 8016aa4:	d405      	bmi.n	8016ab2 <_puts_r+0x36>
 8016aa6:	89a3      	ldrh	r3, [r4, #12]
 8016aa8:	0598      	lsls	r0, r3, #22
 8016aaa:	d402      	bmi.n	8016ab2 <_puts_r+0x36>
 8016aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016aae:	f7ff ff32 	bl	8016916 <__retarget_lock_acquire_recursive>
 8016ab2:	89a3      	ldrh	r3, [r4, #12]
 8016ab4:	0719      	lsls	r1, r3, #28
 8016ab6:	d51d      	bpl.n	8016af4 <_puts_r+0x78>
 8016ab8:	6923      	ldr	r3, [r4, #16]
 8016aba:	b1db      	cbz	r3, 8016af4 <_puts_r+0x78>
 8016abc:	3e01      	subs	r6, #1
 8016abe:	68a3      	ldr	r3, [r4, #8]
 8016ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	60a3      	str	r3, [r4, #8]
 8016ac8:	bb39      	cbnz	r1, 8016b1a <_puts_r+0x9e>
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	da38      	bge.n	8016b40 <_puts_r+0xc4>
 8016ace:	4622      	mov	r2, r4
 8016ad0:	210a      	movs	r1, #10
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	f000 fab2 	bl	801703c <__swbuf_r>
 8016ad8:	3001      	adds	r0, #1
 8016ada:	d011      	beq.n	8016b00 <_puts_r+0x84>
 8016adc:	250a      	movs	r5, #10
 8016ade:	e011      	b.n	8016b04 <_puts_r+0x88>
 8016ae0:	4b1b      	ldr	r3, [pc, #108]	; (8016b50 <_puts_r+0xd4>)
 8016ae2:	429c      	cmp	r4, r3
 8016ae4:	d101      	bne.n	8016aea <_puts_r+0x6e>
 8016ae6:	68ac      	ldr	r4, [r5, #8]
 8016ae8:	e7da      	b.n	8016aa0 <_puts_r+0x24>
 8016aea:	4b1a      	ldr	r3, [pc, #104]	; (8016b54 <_puts_r+0xd8>)
 8016aec:	429c      	cmp	r4, r3
 8016aee:	bf08      	it	eq
 8016af0:	68ec      	ldreq	r4, [r5, #12]
 8016af2:	e7d5      	b.n	8016aa0 <_puts_r+0x24>
 8016af4:	4621      	mov	r1, r4
 8016af6:	4628      	mov	r0, r5
 8016af8:	f000 fb04 	bl	8017104 <__swsetup_r>
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d0dd      	beq.n	8016abc <_puts_r+0x40>
 8016b00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b06:	07da      	lsls	r2, r3, #31
 8016b08:	d405      	bmi.n	8016b16 <_puts_r+0x9a>
 8016b0a:	89a3      	ldrh	r3, [r4, #12]
 8016b0c:	059b      	lsls	r3, r3, #22
 8016b0e:	d402      	bmi.n	8016b16 <_puts_r+0x9a>
 8016b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b12:	f7ff ff01 	bl	8016918 <__retarget_lock_release_recursive>
 8016b16:	4628      	mov	r0, r5
 8016b18:	bd70      	pop	{r4, r5, r6, pc}
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	da04      	bge.n	8016b28 <_puts_r+0xac>
 8016b1e:	69a2      	ldr	r2, [r4, #24]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	dc06      	bgt.n	8016b32 <_puts_r+0xb6>
 8016b24:	290a      	cmp	r1, #10
 8016b26:	d004      	beq.n	8016b32 <_puts_r+0xb6>
 8016b28:	6823      	ldr	r3, [r4, #0]
 8016b2a:	1c5a      	adds	r2, r3, #1
 8016b2c:	6022      	str	r2, [r4, #0]
 8016b2e:	7019      	strb	r1, [r3, #0]
 8016b30:	e7c5      	b.n	8016abe <_puts_r+0x42>
 8016b32:	4622      	mov	r2, r4
 8016b34:	4628      	mov	r0, r5
 8016b36:	f000 fa81 	bl	801703c <__swbuf_r>
 8016b3a:	3001      	adds	r0, #1
 8016b3c:	d1bf      	bne.n	8016abe <_puts_r+0x42>
 8016b3e:	e7df      	b.n	8016b00 <_puts_r+0x84>
 8016b40:	6823      	ldr	r3, [r4, #0]
 8016b42:	250a      	movs	r5, #10
 8016b44:	1c5a      	adds	r2, r3, #1
 8016b46:	6022      	str	r2, [r4, #0]
 8016b48:	701d      	strb	r5, [r3, #0]
 8016b4a:	e7db      	b.n	8016b04 <_puts_r+0x88>
 8016b4c:	08022b40 	.word	0x08022b40
 8016b50:	08022b60 	.word	0x08022b60
 8016b54:	08022b20 	.word	0x08022b20

08016b58 <puts>:
 8016b58:	4b02      	ldr	r3, [pc, #8]	; (8016b64 <puts+0xc>)
 8016b5a:	4601      	mov	r1, r0
 8016b5c:	6818      	ldr	r0, [r3, #0]
 8016b5e:	f7ff bf8d 	b.w	8016a7c <_puts_r>
 8016b62:	bf00      	nop
 8016b64:	200004b4 	.word	0x200004b4

08016b68 <rand>:
 8016b68:	4b17      	ldr	r3, [pc, #92]	; (8016bc8 <rand+0x60>)
 8016b6a:	b510      	push	{r4, lr}
 8016b6c:	681c      	ldr	r4, [r3, #0]
 8016b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b70:	b9b3      	cbnz	r3, 8016ba0 <rand+0x38>
 8016b72:	2018      	movs	r0, #24
 8016b74:	f000 fcb2 	bl	80174dc <malloc>
 8016b78:	63a0      	str	r0, [r4, #56]	; 0x38
 8016b7a:	b928      	cbnz	r0, 8016b88 <rand+0x20>
 8016b7c:	4602      	mov	r2, r0
 8016b7e:	4b13      	ldr	r3, [pc, #76]	; (8016bcc <rand+0x64>)
 8016b80:	4813      	ldr	r0, [pc, #76]	; (8016bd0 <rand+0x68>)
 8016b82:	214e      	movs	r1, #78	; 0x4e
 8016b84:	f000 fb2c 	bl	80171e0 <__assert_func>
 8016b88:	4a12      	ldr	r2, [pc, #72]	; (8016bd4 <rand+0x6c>)
 8016b8a:	4b13      	ldr	r3, [pc, #76]	; (8016bd8 <rand+0x70>)
 8016b8c:	e9c0 2300 	strd	r2, r3, [r0]
 8016b90:	4b12      	ldr	r3, [pc, #72]	; (8016bdc <rand+0x74>)
 8016b92:	6083      	str	r3, [r0, #8]
 8016b94:	230b      	movs	r3, #11
 8016b96:	8183      	strh	r3, [r0, #12]
 8016b98:	2201      	movs	r2, #1
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016ba0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016ba2:	480f      	ldr	r0, [pc, #60]	; (8016be0 <rand+0x78>)
 8016ba4:	690a      	ldr	r2, [r1, #16]
 8016ba6:	694b      	ldr	r3, [r1, #20]
 8016ba8:	4c0e      	ldr	r4, [pc, #56]	; (8016be4 <rand+0x7c>)
 8016baa:	4350      	muls	r0, r2
 8016bac:	fb04 0003 	mla	r0, r4, r3, r0
 8016bb0:	fba2 3404 	umull	r3, r4, r2, r4
 8016bb4:	1c5a      	adds	r2, r3, #1
 8016bb6:	4404      	add	r4, r0
 8016bb8:	f144 0000 	adc.w	r0, r4, #0
 8016bbc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016bc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016bc4:	bd10      	pop	{r4, pc}
 8016bc6:	bf00      	nop
 8016bc8:	200004b4 	.word	0x200004b4
 8016bcc:	08022b84 	.word	0x08022b84
 8016bd0:	08022b9b 	.word	0x08022b9b
 8016bd4:	abcd330e 	.word	0xabcd330e
 8016bd8:	e66d1234 	.word	0xe66d1234
 8016bdc:	0005deec 	.word	0x0005deec
 8016be0:	5851f42d 	.word	0x5851f42d
 8016be4:	4c957f2d 	.word	0x4c957f2d

08016be8 <cleanup_glue>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	460c      	mov	r4, r1
 8016bec:	6809      	ldr	r1, [r1, #0]
 8016bee:	4605      	mov	r5, r0
 8016bf0:	b109      	cbz	r1, 8016bf6 <cleanup_glue+0xe>
 8016bf2:	f7ff fff9 	bl	8016be8 <cleanup_glue>
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bfe:	f000 bc81 	b.w	8017504 <_free_r>
	...

08016c04 <_reclaim_reent>:
 8016c04:	4b2c      	ldr	r3, [pc, #176]	; (8016cb8 <_reclaim_reent+0xb4>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4283      	cmp	r3, r0
 8016c0a:	b570      	push	{r4, r5, r6, lr}
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	d051      	beq.n	8016cb4 <_reclaim_reent+0xb0>
 8016c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016c12:	b143      	cbz	r3, 8016c26 <_reclaim_reent+0x22>
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d14a      	bne.n	8016cb0 <_reclaim_reent+0xac>
 8016c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c1c:	6819      	ldr	r1, [r3, #0]
 8016c1e:	b111      	cbz	r1, 8016c26 <_reclaim_reent+0x22>
 8016c20:	4620      	mov	r0, r4
 8016c22:	f000 fc6f 	bl	8017504 <_free_r>
 8016c26:	6961      	ldr	r1, [r4, #20]
 8016c28:	b111      	cbz	r1, 8016c30 <_reclaim_reent+0x2c>
 8016c2a:	4620      	mov	r0, r4
 8016c2c:	f000 fc6a 	bl	8017504 <_free_r>
 8016c30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016c32:	b111      	cbz	r1, 8016c3a <_reclaim_reent+0x36>
 8016c34:	4620      	mov	r0, r4
 8016c36:	f000 fc65 	bl	8017504 <_free_r>
 8016c3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016c3c:	b111      	cbz	r1, 8016c44 <_reclaim_reent+0x40>
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f000 fc60 	bl	8017504 <_free_r>
 8016c44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016c46:	b111      	cbz	r1, 8016c4e <_reclaim_reent+0x4a>
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 fc5b 	bl	8017504 <_free_r>
 8016c4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016c50:	b111      	cbz	r1, 8016c58 <_reclaim_reent+0x54>
 8016c52:	4620      	mov	r0, r4
 8016c54:	f000 fc56 	bl	8017504 <_free_r>
 8016c58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016c5a:	b111      	cbz	r1, 8016c62 <_reclaim_reent+0x5e>
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f000 fc51 	bl	8017504 <_free_r>
 8016c62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016c64:	b111      	cbz	r1, 8016c6c <_reclaim_reent+0x68>
 8016c66:	4620      	mov	r0, r4
 8016c68:	f000 fc4c 	bl	8017504 <_free_r>
 8016c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c6e:	b111      	cbz	r1, 8016c76 <_reclaim_reent+0x72>
 8016c70:	4620      	mov	r0, r4
 8016c72:	f000 fc47 	bl	8017504 <_free_r>
 8016c76:	69a3      	ldr	r3, [r4, #24]
 8016c78:	b1e3      	cbz	r3, 8016cb4 <_reclaim_reent+0xb0>
 8016c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	4798      	blx	r3
 8016c80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016c82:	b1b9      	cbz	r1, 8016cb4 <_reclaim_reent+0xb0>
 8016c84:	4620      	mov	r0, r4
 8016c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c8a:	f7ff bfad 	b.w	8016be8 <cleanup_glue>
 8016c8e:	5949      	ldr	r1, [r1, r5]
 8016c90:	b941      	cbnz	r1, 8016ca4 <_reclaim_reent+0xa0>
 8016c92:	3504      	adds	r5, #4
 8016c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c96:	2d80      	cmp	r5, #128	; 0x80
 8016c98:	68d9      	ldr	r1, [r3, #12]
 8016c9a:	d1f8      	bne.n	8016c8e <_reclaim_reent+0x8a>
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f000 fc31 	bl	8017504 <_free_r>
 8016ca2:	e7ba      	b.n	8016c1a <_reclaim_reent+0x16>
 8016ca4:	680e      	ldr	r6, [r1, #0]
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	f000 fc2c 	bl	8017504 <_free_r>
 8016cac:	4631      	mov	r1, r6
 8016cae:	e7ef      	b.n	8016c90 <_reclaim_reent+0x8c>
 8016cb0:	2500      	movs	r5, #0
 8016cb2:	e7ef      	b.n	8016c94 <_reclaim_reent+0x90>
 8016cb4:	bd70      	pop	{r4, r5, r6, pc}
 8016cb6:	bf00      	nop
 8016cb8:	200004b4 	.word	0x200004b4

08016cbc <_sbrk_r>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4d06      	ldr	r5, [pc, #24]	; (8016cd8 <_sbrk_r+0x1c>)
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	602b      	str	r3, [r5, #0]
 8016cc8:	f7eb fa0c 	bl	80020e4 <_sbrk>
 8016ccc:	1c43      	adds	r3, r0, #1
 8016cce:	d102      	bne.n	8016cd6 <_sbrk_r+0x1a>
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	b103      	cbz	r3, 8016cd6 <_sbrk_r+0x1a>
 8016cd4:	6023      	str	r3, [r4, #0]
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	200136cc 	.word	0x200136cc

08016cdc <sniprintf>:
 8016cdc:	b40c      	push	{r2, r3}
 8016cde:	b530      	push	{r4, r5, lr}
 8016ce0:	4b17      	ldr	r3, [pc, #92]	; (8016d40 <sniprintf+0x64>)
 8016ce2:	1e0c      	subs	r4, r1, #0
 8016ce4:	681d      	ldr	r5, [r3, #0]
 8016ce6:	b09d      	sub	sp, #116	; 0x74
 8016ce8:	da08      	bge.n	8016cfc <sniprintf+0x20>
 8016cea:	238b      	movs	r3, #139	; 0x8b
 8016cec:	602b      	str	r3, [r5, #0]
 8016cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cf2:	b01d      	add	sp, #116	; 0x74
 8016cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cf8:	b002      	add	sp, #8
 8016cfa:	4770      	bx	lr
 8016cfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016d04:	bf14      	ite	ne
 8016d06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016d0a:	4623      	moveq	r3, r4
 8016d0c:	9304      	str	r3, [sp, #16]
 8016d0e:	9307      	str	r3, [sp, #28]
 8016d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d14:	9002      	str	r0, [sp, #8]
 8016d16:	9006      	str	r0, [sp, #24]
 8016d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016d1e:	ab21      	add	r3, sp, #132	; 0x84
 8016d20:	a902      	add	r1, sp, #8
 8016d22:	4628      	mov	r0, r5
 8016d24:	9301      	str	r3, [sp, #4]
 8016d26:	f000 fc99 	bl	801765c <_svfiprintf_r>
 8016d2a:	1c43      	adds	r3, r0, #1
 8016d2c:	bfbc      	itt	lt
 8016d2e:	238b      	movlt	r3, #139	; 0x8b
 8016d30:	602b      	strlt	r3, [r5, #0]
 8016d32:	2c00      	cmp	r4, #0
 8016d34:	d0dd      	beq.n	8016cf2 <sniprintf+0x16>
 8016d36:	9b02      	ldr	r3, [sp, #8]
 8016d38:	2200      	movs	r2, #0
 8016d3a:	701a      	strb	r2, [r3, #0]
 8016d3c:	e7d9      	b.n	8016cf2 <sniprintf+0x16>
 8016d3e:	bf00      	nop
 8016d40:	200004b4 	.word	0x200004b4

08016d44 <siprintf>:
 8016d44:	b40e      	push	{r1, r2, r3}
 8016d46:	b500      	push	{lr}
 8016d48:	b09c      	sub	sp, #112	; 0x70
 8016d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8016d4c:	9002      	str	r0, [sp, #8]
 8016d4e:	9006      	str	r0, [sp, #24]
 8016d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d54:	4809      	ldr	r0, [pc, #36]	; (8016d7c <siprintf+0x38>)
 8016d56:	9107      	str	r1, [sp, #28]
 8016d58:	9104      	str	r1, [sp, #16]
 8016d5a:	4909      	ldr	r1, [pc, #36]	; (8016d80 <siprintf+0x3c>)
 8016d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d60:	9105      	str	r1, [sp, #20]
 8016d62:	6800      	ldr	r0, [r0, #0]
 8016d64:	9301      	str	r3, [sp, #4]
 8016d66:	a902      	add	r1, sp, #8
 8016d68:	f000 fc78 	bl	801765c <_svfiprintf_r>
 8016d6c:	9b02      	ldr	r3, [sp, #8]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	b01c      	add	sp, #112	; 0x70
 8016d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d78:	b003      	add	sp, #12
 8016d7a:	4770      	bx	lr
 8016d7c:	200004b4 	.word	0x200004b4
 8016d80:	ffff0208 	.word	0xffff0208

08016d84 <__sread>:
 8016d84:	b510      	push	{r4, lr}
 8016d86:	460c      	mov	r4, r1
 8016d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d8c:	f001 f854 	bl	8017e38 <_read_r>
 8016d90:	2800      	cmp	r0, #0
 8016d92:	bfab      	itete	ge
 8016d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d96:	89a3      	ldrhlt	r3, [r4, #12]
 8016d98:	181b      	addge	r3, r3, r0
 8016d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d9e:	bfac      	ite	ge
 8016da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016da2:	81a3      	strhlt	r3, [r4, #12]
 8016da4:	bd10      	pop	{r4, pc}

08016da6 <__swrite>:
 8016da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016daa:	461f      	mov	r7, r3
 8016dac:	898b      	ldrh	r3, [r1, #12]
 8016dae:	05db      	lsls	r3, r3, #23
 8016db0:	4605      	mov	r5, r0
 8016db2:	460c      	mov	r4, r1
 8016db4:	4616      	mov	r6, r2
 8016db6:	d505      	bpl.n	8016dc4 <__swrite+0x1e>
 8016db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dbc:	2302      	movs	r3, #2
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	f000 fb16 	bl	80173f0 <_lseek_r>
 8016dc4:	89a3      	ldrh	r3, [r4, #12]
 8016dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016dce:	81a3      	strh	r3, [r4, #12]
 8016dd0:	4632      	mov	r2, r6
 8016dd2:	463b      	mov	r3, r7
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dda:	f000 b981 	b.w	80170e0 <_write_r>

08016dde <__sseek>:
 8016dde:	b510      	push	{r4, lr}
 8016de0:	460c      	mov	r4, r1
 8016de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016de6:	f000 fb03 	bl	80173f0 <_lseek_r>
 8016dea:	1c43      	adds	r3, r0, #1
 8016dec:	89a3      	ldrh	r3, [r4, #12]
 8016dee:	bf15      	itete	ne
 8016df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016dfa:	81a3      	strheq	r3, [r4, #12]
 8016dfc:	bf18      	it	ne
 8016dfe:	81a3      	strhne	r3, [r4, #12]
 8016e00:	bd10      	pop	{r4, pc}

08016e02 <__sclose>:
 8016e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e06:	f000 ba09 	b.w	801721c <_close_r>

08016e0a <strcat>:
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	7814      	ldrb	r4, [r2, #0]
 8016e10:	4613      	mov	r3, r2
 8016e12:	3201      	adds	r2, #1
 8016e14:	2c00      	cmp	r4, #0
 8016e16:	d1fa      	bne.n	8016e0e <strcat+0x4>
 8016e18:	3b01      	subs	r3, #1
 8016e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e22:	2a00      	cmp	r2, #0
 8016e24:	d1f9      	bne.n	8016e1a <strcat+0x10>
 8016e26:	bd10      	pop	{r4, pc}

08016e28 <strchr>:
 8016e28:	b2c9      	uxtb	r1, r1
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e30:	b11a      	cbz	r2, 8016e3a <strchr+0x12>
 8016e32:	428a      	cmp	r2, r1
 8016e34:	d1f9      	bne.n	8016e2a <strchr+0x2>
 8016e36:	4618      	mov	r0, r3
 8016e38:	4770      	bx	lr
 8016e3a:	2900      	cmp	r1, #0
 8016e3c:	bf18      	it	ne
 8016e3e:	2300      	movne	r3, #0
 8016e40:	e7f9      	b.n	8016e36 <strchr+0xe>

08016e42 <strcpy>:
 8016e42:	4603      	mov	r3, r0
 8016e44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e48:	f803 2b01 	strb.w	r2, [r3], #1
 8016e4c:	2a00      	cmp	r2, #0
 8016e4e:	d1f9      	bne.n	8016e44 <strcpy+0x2>
 8016e50:	4770      	bx	lr

08016e52 <strncmp>:
 8016e52:	b510      	push	{r4, lr}
 8016e54:	b16a      	cbz	r2, 8016e72 <strncmp+0x20>
 8016e56:	3901      	subs	r1, #1
 8016e58:	1884      	adds	r4, r0, r2
 8016e5a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016e5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016e62:	4293      	cmp	r3, r2
 8016e64:	d103      	bne.n	8016e6e <strncmp+0x1c>
 8016e66:	42a0      	cmp	r0, r4
 8016e68:	d001      	beq.n	8016e6e <strncmp+0x1c>
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1f5      	bne.n	8016e5a <strncmp+0x8>
 8016e6e:	1a98      	subs	r0, r3, r2
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	4610      	mov	r0, r2
 8016e74:	e7fc      	b.n	8016e70 <strncmp+0x1e>

08016e76 <strncpy>:
 8016e76:	b510      	push	{r4, lr}
 8016e78:	3901      	subs	r1, #1
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	b132      	cbz	r2, 8016e8c <strncpy+0x16>
 8016e7e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016e82:	f803 4b01 	strb.w	r4, [r3], #1
 8016e86:	3a01      	subs	r2, #1
 8016e88:	2c00      	cmp	r4, #0
 8016e8a:	d1f7      	bne.n	8016e7c <strncpy+0x6>
 8016e8c:	441a      	add	r2, r3
 8016e8e:	2100      	movs	r1, #0
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d100      	bne.n	8016e96 <strncpy+0x20>
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	f803 1b01 	strb.w	r1, [r3], #1
 8016e9a:	e7f9      	b.n	8016e90 <strncpy+0x1a>

08016e9c <strstr>:
 8016e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e9e:	780c      	ldrb	r4, [r1, #0]
 8016ea0:	b164      	cbz	r4, 8016ebc <strstr+0x20>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	781a      	ldrb	r2, [r3, #0]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	1c5e      	adds	r6, r3, #1
 8016eaa:	b90a      	cbnz	r2, 8016eb0 <strstr+0x14>
 8016eac:	4610      	mov	r0, r2
 8016eae:	e005      	b.n	8016ebc <strstr+0x20>
 8016eb0:	4294      	cmp	r4, r2
 8016eb2:	d108      	bne.n	8016ec6 <strstr+0x2a>
 8016eb4:	460d      	mov	r5, r1
 8016eb6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8016eba:	b902      	cbnz	r2, 8016ebe <strstr+0x22>
 8016ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ebe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8016ec2:	4297      	cmp	r7, r2
 8016ec4:	d0f7      	beq.n	8016eb6 <strstr+0x1a>
 8016ec6:	4633      	mov	r3, r6
 8016ec8:	e7ec      	b.n	8016ea4 <strstr+0x8>

08016eca <__strtok_r>:
 8016eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ecc:	b908      	cbnz	r0, 8016ed2 <__strtok_r+0x8>
 8016ece:	6810      	ldr	r0, [r2, #0]
 8016ed0:	b188      	cbz	r0, 8016ef6 <__strtok_r+0x2c>
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016eda:	460f      	mov	r7, r1
 8016edc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016ee0:	b91e      	cbnz	r6, 8016eea <__strtok_r+0x20>
 8016ee2:	b965      	cbnz	r5, 8016efe <__strtok_r+0x34>
 8016ee4:	6015      	str	r5, [r2, #0]
 8016ee6:	4628      	mov	r0, r5
 8016ee8:	e005      	b.n	8016ef6 <__strtok_r+0x2c>
 8016eea:	42b5      	cmp	r5, r6
 8016eec:	d1f6      	bne.n	8016edc <__strtok_r+0x12>
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d1f0      	bne.n	8016ed4 <__strtok_r+0xa>
 8016ef2:	6014      	str	r4, [r2, #0]
 8016ef4:	7003      	strb	r3, [r0, #0]
 8016ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef8:	461c      	mov	r4, r3
 8016efa:	e00c      	b.n	8016f16 <__strtok_r+0x4c>
 8016efc:	b915      	cbnz	r5, 8016f04 <__strtok_r+0x3a>
 8016efe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f02:	460e      	mov	r6, r1
 8016f04:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016f08:	42ab      	cmp	r3, r5
 8016f0a:	d1f7      	bne.n	8016efc <__strtok_r+0x32>
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d0f3      	beq.n	8016ef8 <__strtok_r+0x2e>
 8016f10:	2300      	movs	r3, #0
 8016f12:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016f16:	6014      	str	r4, [r2, #0]
 8016f18:	e7ed      	b.n	8016ef6 <__strtok_r+0x2c>

08016f1a <strtok_r>:
 8016f1a:	2301      	movs	r3, #1
 8016f1c:	f7ff bfd5 	b.w	8016eca <__strtok_r>

08016f20 <_strtol_l.isra.0>:
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f26:	d001      	beq.n	8016f2c <_strtol_l.isra.0+0xc>
 8016f28:	2b24      	cmp	r3, #36	; 0x24
 8016f2a:	d906      	bls.n	8016f3a <_strtol_l.isra.0+0x1a>
 8016f2c:	f000 f986 	bl	801723c <__errno>
 8016f30:	2316      	movs	r3, #22
 8016f32:	6003      	str	r3, [r0, #0]
 8016f34:	2000      	movs	r0, #0
 8016f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f3a:	4f3a      	ldr	r7, [pc, #232]	; (8017024 <_strtol_l.isra.0+0x104>)
 8016f3c:	468e      	mov	lr, r1
 8016f3e:	4676      	mov	r6, lr
 8016f40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016f44:	5de5      	ldrb	r5, [r4, r7]
 8016f46:	f015 0508 	ands.w	r5, r5, #8
 8016f4a:	d1f8      	bne.n	8016f3e <_strtol_l.isra.0+0x1e>
 8016f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8016f4e:	d134      	bne.n	8016fba <_strtol_l.isra.0+0x9a>
 8016f50:	f89e 4000 	ldrb.w	r4, [lr]
 8016f54:	f04f 0801 	mov.w	r8, #1
 8016f58:	f106 0e02 	add.w	lr, r6, #2
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d05c      	beq.n	801701a <_strtol_l.isra.0+0xfa>
 8016f60:	2b10      	cmp	r3, #16
 8016f62:	d10c      	bne.n	8016f7e <_strtol_l.isra.0+0x5e>
 8016f64:	2c30      	cmp	r4, #48	; 0x30
 8016f66:	d10a      	bne.n	8016f7e <_strtol_l.isra.0+0x5e>
 8016f68:	f89e 4000 	ldrb.w	r4, [lr]
 8016f6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016f70:	2c58      	cmp	r4, #88	; 0x58
 8016f72:	d14d      	bne.n	8017010 <_strtol_l.isra.0+0xf0>
 8016f74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016f78:	2310      	movs	r3, #16
 8016f7a:	f10e 0e02 	add.w	lr, lr, #2
 8016f7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016f82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016f86:	2600      	movs	r6, #0
 8016f88:	fbbc f9f3 	udiv	r9, ip, r3
 8016f8c:	4635      	mov	r5, r6
 8016f8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8016f92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016f96:	2f09      	cmp	r7, #9
 8016f98:	d818      	bhi.n	8016fcc <_strtol_l.isra.0+0xac>
 8016f9a:	463c      	mov	r4, r7
 8016f9c:	42a3      	cmp	r3, r4
 8016f9e:	dd24      	ble.n	8016fea <_strtol_l.isra.0+0xca>
 8016fa0:	2e00      	cmp	r6, #0
 8016fa2:	db1f      	blt.n	8016fe4 <_strtol_l.isra.0+0xc4>
 8016fa4:	45a9      	cmp	r9, r5
 8016fa6:	d31d      	bcc.n	8016fe4 <_strtol_l.isra.0+0xc4>
 8016fa8:	d101      	bne.n	8016fae <_strtol_l.isra.0+0x8e>
 8016faa:	45a2      	cmp	sl, r4
 8016fac:	db1a      	blt.n	8016fe4 <_strtol_l.isra.0+0xc4>
 8016fae:	fb05 4503 	mla	r5, r5, r3, r4
 8016fb2:	2601      	movs	r6, #1
 8016fb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016fb8:	e7eb      	b.n	8016f92 <_strtol_l.isra.0+0x72>
 8016fba:	2c2b      	cmp	r4, #43	; 0x2b
 8016fbc:	bf08      	it	eq
 8016fbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016fc2:	46a8      	mov	r8, r5
 8016fc4:	bf08      	it	eq
 8016fc6:	f106 0e02 	addeq.w	lr, r6, #2
 8016fca:	e7c7      	b.n	8016f5c <_strtol_l.isra.0+0x3c>
 8016fcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016fd0:	2f19      	cmp	r7, #25
 8016fd2:	d801      	bhi.n	8016fd8 <_strtol_l.isra.0+0xb8>
 8016fd4:	3c37      	subs	r4, #55	; 0x37
 8016fd6:	e7e1      	b.n	8016f9c <_strtol_l.isra.0+0x7c>
 8016fd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016fdc:	2f19      	cmp	r7, #25
 8016fde:	d804      	bhi.n	8016fea <_strtol_l.isra.0+0xca>
 8016fe0:	3c57      	subs	r4, #87	; 0x57
 8016fe2:	e7db      	b.n	8016f9c <_strtol_l.isra.0+0x7c>
 8016fe4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016fe8:	e7e4      	b.n	8016fb4 <_strtol_l.isra.0+0x94>
 8016fea:	2e00      	cmp	r6, #0
 8016fec:	da05      	bge.n	8016ffa <_strtol_l.isra.0+0xda>
 8016fee:	2322      	movs	r3, #34	; 0x22
 8016ff0:	6003      	str	r3, [r0, #0]
 8016ff2:	4665      	mov	r5, ip
 8016ff4:	b942      	cbnz	r2, 8017008 <_strtol_l.isra.0+0xe8>
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	e79d      	b.n	8016f36 <_strtol_l.isra.0+0x16>
 8016ffa:	f1b8 0f00 	cmp.w	r8, #0
 8016ffe:	d000      	beq.n	8017002 <_strtol_l.isra.0+0xe2>
 8017000:	426d      	negs	r5, r5
 8017002:	2a00      	cmp	r2, #0
 8017004:	d0f7      	beq.n	8016ff6 <_strtol_l.isra.0+0xd6>
 8017006:	b10e      	cbz	r6, 801700c <_strtol_l.isra.0+0xec>
 8017008:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801700c:	6011      	str	r1, [r2, #0]
 801700e:	e7f2      	b.n	8016ff6 <_strtol_l.isra.0+0xd6>
 8017010:	2430      	movs	r4, #48	; 0x30
 8017012:	2b00      	cmp	r3, #0
 8017014:	d1b3      	bne.n	8016f7e <_strtol_l.isra.0+0x5e>
 8017016:	2308      	movs	r3, #8
 8017018:	e7b1      	b.n	8016f7e <_strtol_l.isra.0+0x5e>
 801701a:	2c30      	cmp	r4, #48	; 0x30
 801701c:	d0a4      	beq.n	8016f68 <_strtol_l.isra.0+0x48>
 801701e:	230a      	movs	r3, #10
 8017020:	e7ad      	b.n	8016f7e <_strtol_l.isra.0+0x5e>
 8017022:	bf00      	nop
 8017024:	08022a1f 	.word	0x08022a1f

08017028 <strtol>:
 8017028:	4613      	mov	r3, r2
 801702a:	460a      	mov	r2, r1
 801702c:	4601      	mov	r1, r0
 801702e:	4802      	ldr	r0, [pc, #8]	; (8017038 <strtol+0x10>)
 8017030:	6800      	ldr	r0, [r0, #0]
 8017032:	f7ff bf75 	b.w	8016f20 <_strtol_l.isra.0>
 8017036:	bf00      	nop
 8017038:	200004b4 	.word	0x200004b4

0801703c <__swbuf_r>:
 801703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801703e:	460e      	mov	r6, r1
 8017040:	4614      	mov	r4, r2
 8017042:	4605      	mov	r5, r0
 8017044:	b118      	cbz	r0, 801704e <__swbuf_r+0x12>
 8017046:	6983      	ldr	r3, [r0, #24]
 8017048:	b90b      	cbnz	r3, 801704e <__swbuf_r+0x12>
 801704a:	f7ff fba1 	bl	8016790 <__sinit>
 801704e:	4b21      	ldr	r3, [pc, #132]	; (80170d4 <__swbuf_r+0x98>)
 8017050:	429c      	cmp	r4, r3
 8017052:	d12b      	bne.n	80170ac <__swbuf_r+0x70>
 8017054:	686c      	ldr	r4, [r5, #4]
 8017056:	69a3      	ldr	r3, [r4, #24]
 8017058:	60a3      	str	r3, [r4, #8]
 801705a:	89a3      	ldrh	r3, [r4, #12]
 801705c:	071a      	lsls	r2, r3, #28
 801705e:	d52f      	bpl.n	80170c0 <__swbuf_r+0x84>
 8017060:	6923      	ldr	r3, [r4, #16]
 8017062:	b36b      	cbz	r3, 80170c0 <__swbuf_r+0x84>
 8017064:	6923      	ldr	r3, [r4, #16]
 8017066:	6820      	ldr	r0, [r4, #0]
 8017068:	1ac0      	subs	r0, r0, r3
 801706a:	6963      	ldr	r3, [r4, #20]
 801706c:	b2f6      	uxtb	r6, r6
 801706e:	4283      	cmp	r3, r0
 8017070:	4637      	mov	r7, r6
 8017072:	dc04      	bgt.n	801707e <__swbuf_r+0x42>
 8017074:	4621      	mov	r1, r4
 8017076:	4628      	mov	r0, r5
 8017078:	f000 f96c 	bl	8017354 <_fflush_r>
 801707c:	bb30      	cbnz	r0, 80170cc <__swbuf_r+0x90>
 801707e:	68a3      	ldr	r3, [r4, #8]
 8017080:	3b01      	subs	r3, #1
 8017082:	60a3      	str	r3, [r4, #8]
 8017084:	6823      	ldr	r3, [r4, #0]
 8017086:	1c5a      	adds	r2, r3, #1
 8017088:	6022      	str	r2, [r4, #0]
 801708a:	701e      	strb	r6, [r3, #0]
 801708c:	6963      	ldr	r3, [r4, #20]
 801708e:	3001      	adds	r0, #1
 8017090:	4283      	cmp	r3, r0
 8017092:	d004      	beq.n	801709e <__swbuf_r+0x62>
 8017094:	89a3      	ldrh	r3, [r4, #12]
 8017096:	07db      	lsls	r3, r3, #31
 8017098:	d506      	bpl.n	80170a8 <__swbuf_r+0x6c>
 801709a:	2e0a      	cmp	r6, #10
 801709c:	d104      	bne.n	80170a8 <__swbuf_r+0x6c>
 801709e:	4621      	mov	r1, r4
 80170a0:	4628      	mov	r0, r5
 80170a2:	f000 f957 	bl	8017354 <_fflush_r>
 80170a6:	b988      	cbnz	r0, 80170cc <__swbuf_r+0x90>
 80170a8:	4638      	mov	r0, r7
 80170aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ac:	4b0a      	ldr	r3, [pc, #40]	; (80170d8 <__swbuf_r+0x9c>)
 80170ae:	429c      	cmp	r4, r3
 80170b0:	d101      	bne.n	80170b6 <__swbuf_r+0x7a>
 80170b2:	68ac      	ldr	r4, [r5, #8]
 80170b4:	e7cf      	b.n	8017056 <__swbuf_r+0x1a>
 80170b6:	4b09      	ldr	r3, [pc, #36]	; (80170dc <__swbuf_r+0xa0>)
 80170b8:	429c      	cmp	r4, r3
 80170ba:	bf08      	it	eq
 80170bc:	68ec      	ldreq	r4, [r5, #12]
 80170be:	e7ca      	b.n	8017056 <__swbuf_r+0x1a>
 80170c0:	4621      	mov	r1, r4
 80170c2:	4628      	mov	r0, r5
 80170c4:	f000 f81e 	bl	8017104 <__swsetup_r>
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d0cb      	beq.n	8017064 <__swbuf_r+0x28>
 80170cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80170d0:	e7ea      	b.n	80170a8 <__swbuf_r+0x6c>
 80170d2:	bf00      	nop
 80170d4:	08022b40 	.word	0x08022b40
 80170d8:	08022b60 	.word	0x08022b60
 80170dc:	08022b20 	.word	0x08022b20

080170e0 <_write_r>:
 80170e0:	b538      	push	{r3, r4, r5, lr}
 80170e2:	4d07      	ldr	r5, [pc, #28]	; (8017100 <_write_r+0x20>)
 80170e4:	4604      	mov	r4, r0
 80170e6:	4608      	mov	r0, r1
 80170e8:	4611      	mov	r1, r2
 80170ea:	2200      	movs	r2, #0
 80170ec:	602a      	str	r2, [r5, #0]
 80170ee:	461a      	mov	r2, r3
 80170f0:	f7ea fd06 	bl	8001b00 <_write>
 80170f4:	1c43      	adds	r3, r0, #1
 80170f6:	d102      	bne.n	80170fe <_write_r+0x1e>
 80170f8:	682b      	ldr	r3, [r5, #0]
 80170fa:	b103      	cbz	r3, 80170fe <_write_r+0x1e>
 80170fc:	6023      	str	r3, [r4, #0]
 80170fe:	bd38      	pop	{r3, r4, r5, pc}
 8017100:	200136cc 	.word	0x200136cc

08017104 <__swsetup_r>:
 8017104:	4b32      	ldr	r3, [pc, #200]	; (80171d0 <__swsetup_r+0xcc>)
 8017106:	b570      	push	{r4, r5, r6, lr}
 8017108:	681d      	ldr	r5, [r3, #0]
 801710a:	4606      	mov	r6, r0
 801710c:	460c      	mov	r4, r1
 801710e:	b125      	cbz	r5, 801711a <__swsetup_r+0x16>
 8017110:	69ab      	ldr	r3, [r5, #24]
 8017112:	b913      	cbnz	r3, 801711a <__swsetup_r+0x16>
 8017114:	4628      	mov	r0, r5
 8017116:	f7ff fb3b 	bl	8016790 <__sinit>
 801711a:	4b2e      	ldr	r3, [pc, #184]	; (80171d4 <__swsetup_r+0xd0>)
 801711c:	429c      	cmp	r4, r3
 801711e:	d10f      	bne.n	8017140 <__swsetup_r+0x3c>
 8017120:	686c      	ldr	r4, [r5, #4]
 8017122:	89a3      	ldrh	r3, [r4, #12]
 8017124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017128:	0719      	lsls	r1, r3, #28
 801712a:	d42c      	bmi.n	8017186 <__swsetup_r+0x82>
 801712c:	06dd      	lsls	r5, r3, #27
 801712e:	d411      	bmi.n	8017154 <__swsetup_r+0x50>
 8017130:	2309      	movs	r3, #9
 8017132:	6033      	str	r3, [r6, #0]
 8017134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017138:	81a3      	strh	r3, [r4, #12]
 801713a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801713e:	e03e      	b.n	80171be <__swsetup_r+0xba>
 8017140:	4b25      	ldr	r3, [pc, #148]	; (80171d8 <__swsetup_r+0xd4>)
 8017142:	429c      	cmp	r4, r3
 8017144:	d101      	bne.n	801714a <__swsetup_r+0x46>
 8017146:	68ac      	ldr	r4, [r5, #8]
 8017148:	e7eb      	b.n	8017122 <__swsetup_r+0x1e>
 801714a:	4b24      	ldr	r3, [pc, #144]	; (80171dc <__swsetup_r+0xd8>)
 801714c:	429c      	cmp	r4, r3
 801714e:	bf08      	it	eq
 8017150:	68ec      	ldreq	r4, [r5, #12]
 8017152:	e7e6      	b.n	8017122 <__swsetup_r+0x1e>
 8017154:	0758      	lsls	r0, r3, #29
 8017156:	d512      	bpl.n	801717e <__swsetup_r+0x7a>
 8017158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801715a:	b141      	cbz	r1, 801716e <__swsetup_r+0x6a>
 801715c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017160:	4299      	cmp	r1, r3
 8017162:	d002      	beq.n	801716a <__swsetup_r+0x66>
 8017164:	4630      	mov	r0, r6
 8017166:	f000 f9cd 	bl	8017504 <_free_r>
 801716a:	2300      	movs	r3, #0
 801716c:	6363      	str	r3, [r4, #52]	; 0x34
 801716e:	89a3      	ldrh	r3, [r4, #12]
 8017170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017174:	81a3      	strh	r3, [r4, #12]
 8017176:	2300      	movs	r3, #0
 8017178:	6063      	str	r3, [r4, #4]
 801717a:	6923      	ldr	r3, [r4, #16]
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	89a3      	ldrh	r3, [r4, #12]
 8017180:	f043 0308 	orr.w	r3, r3, #8
 8017184:	81a3      	strh	r3, [r4, #12]
 8017186:	6923      	ldr	r3, [r4, #16]
 8017188:	b94b      	cbnz	r3, 801719e <__swsetup_r+0x9a>
 801718a:	89a3      	ldrh	r3, [r4, #12]
 801718c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017194:	d003      	beq.n	801719e <__swsetup_r+0x9a>
 8017196:	4621      	mov	r1, r4
 8017198:	4630      	mov	r0, r6
 801719a:	f000 f95f 	bl	801745c <__smakebuf_r>
 801719e:	89a0      	ldrh	r0, [r4, #12]
 80171a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171a4:	f010 0301 	ands.w	r3, r0, #1
 80171a8:	d00a      	beq.n	80171c0 <__swsetup_r+0xbc>
 80171aa:	2300      	movs	r3, #0
 80171ac:	60a3      	str	r3, [r4, #8]
 80171ae:	6963      	ldr	r3, [r4, #20]
 80171b0:	425b      	negs	r3, r3
 80171b2:	61a3      	str	r3, [r4, #24]
 80171b4:	6923      	ldr	r3, [r4, #16]
 80171b6:	b943      	cbnz	r3, 80171ca <__swsetup_r+0xc6>
 80171b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171bc:	d1ba      	bne.n	8017134 <__swsetup_r+0x30>
 80171be:	bd70      	pop	{r4, r5, r6, pc}
 80171c0:	0781      	lsls	r1, r0, #30
 80171c2:	bf58      	it	pl
 80171c4:	6963      	ldrpl	r3, [r4, #20]
 80171c6:	60a3      	str	r3, [r4, #8]
 80171c8:	e7f4      	b.n	80171b4 <__swsetup_r+0xb0>
 80171ca:	2000      	movs	r0, #0
 80171cc:	e7f7      	b.n	80171be <__swsetup_r+0xba>
 80171ce:	bf00      	nop
 80171d0:	200004b4 	.word	0x200004b4
 80171d4:	08022b40 	.word	0x08022b40
 80171d8:	08022b60 	.word	0x08022b60
 80171dc:	08022b20 	.word	0x08022b20

080171e0 <__assert_func>:
 80171e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171e2:	4614      	mov	r4, r2
 80171e4:	461a      	mov	r2, r3
 80171e6:	4b09      	ldr	r3, [pc, #36]	; (801720c <__assert_func+0x2c>)
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	4605      	mov	r5, r0
 80171ec:	68d8      	ldr	r0, [r3, #12]
 80171ee:	b14c      	cbz	r4, 8017204 <__assert_func+0x24>
 80171f0:	4b07      	ldr	r3, [pc, #28]	; (8017210 <__assert_func+0x30>)
 80171f2:	9100      	str	r1, [sp, #0]
 80171f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171f8:	4906      	ldr	r1, [pc, #24]	; (8017214 <__assert_func+0x34>)
 80171fa:	462b      	mov	r3, r5
 80171fc:	f000 f8e6 	bl	80173cc <fiprintf>
 8017200:	f000 fe2c 	bl	8017e5c <abort>
 8017204:	4b04      	ldr	r3, [pc, #16]	; (8017218 <__assert_func+0x38>)
 8017206:	461c      	mov	r4, r3
 8017208:	e7f3      	b.n	80171f2 <__assert_func+0x12>
 801720a:	bf00      	nop
 801720c:	200004b4 	.word	0x200004b4
 8017210:	08022bfa 	.word	0x08022bfa
 8017214:	08022c07 	.word	0x08022c07
 8017218:	08022c35 	.word	0x08022c35

0801721c <_close_r>:
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4d06      	ldr	r5, [pc, #24]	; (8017238 <_close_r+0x1c>)
 8017220:	2300      	movs	r3, #0
 8017222:	4604      	mov	r4, r0
 8017224:	4608      	mov	r0, r1
 8017226:	602b      	str	r3, [r5, #0]
 8017228:	f7ea ff27 	bl	800207a <_close>
 801722c:	1c43      	adds	r3, r0, #1
 801722e:	d102      	bne.n	8017236 <_close_r+0x1a>
 8017230:	682b      	ldr	r3, [r5, #0]
 8017232:	b103      	cbz	r3, 8017236 <_close_r+0x1a>
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	bd38      	pop	{r3, r4, r5, pc}
 8017238:	200136cc 	.word	0x200136cc

0801723c <__errno>:
 801723c:	4b01      	ldr	r3, [pc, #4]	; (8017244 <__errno+0x8>)
 801723e:	6818      	ldr	r0, [r3, #0]
 8017240:	4770      	bx	lr
 8017242:	bf00      	nop
 8017244:	200004b4 	.word	0x200004b4

08017248 <__sflush_r>:
 8017248:	898a      	ldrh	r2, [r1, #12]
 801724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801724e:	4605      	mov	r5, r0
 8017250:	0710      	lsls	r0, r2, #28
 8017252:	460c      	mov	r4, r1
 8017254:	d458      	bmi.n	8017308 <__sflush_r+0xc0>
 8017256:	684b      	ldr	r3, [r1, #4]
 8017258:	2b00      	cmp	r3, #0
 801725a:	dc05      	bgt.n	8017268 <__sflush_r+0x20>
 801725c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801725e:	2b00      	cmp	r3, #0
 8017260:	dc02      	bgt.n	8017268 <__sflush_r+0x20>
 8017262:	2000      	movs	r0, #0
 8017264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801726a:	2e00      	cmp	r6, #0
 801726c:	d0f9      	beq.n	8017262 <__sflush_r+0x1a>
 801726e:	2300      	movs	r3, #0
 8017270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017274:	682f      	ldr	r7, [r5, #0]
 8017276:	602b      	str	r3, [r5, #0]
 8017278:	d032      	beq.n	80172e0 <__sflush_r+0x98>
 801727a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801727c:	89a3      	ldrh	r3, [r4, #12]
 801727e:	075a      	lsls	r2, r3, #29
 8017280:	d505      	bpl.n	801728e <__sflush_r+0x46>
 8017282:	6863      	ldr	r3, [r4, #4]
 8017284:	1ac0      	subs	r0, r0, r3
 8017286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017288:	b10b      	cbz	r3, 801728e <__sflush_r+0x46>
 801728a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801728c:	1ac0      	subs	r0, r0, r3
 801728e:	2300      	movs	r3, #0
 8017290:	4602      	mov	r2, r0
 8017292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017294:	6a21      	ldr	r1, [r4, #32]
 8017296:	4628      	mov	r0, r5
 8017298:	47b0      	blx	r6
 801729a:	1c43      	adds	r3, r0, #1
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	d106      	bne.n	80172ae <__sflush_r+0x66>
 80172a0:	6829      	ldr	r1, [r5, #0]
 80172a2:	291d      	cmp	r1, #29
 80172a4:	d82c      	bhi.n	8017300 <__sflush_r+0xb8>
 80172a6:	4a2a      	ldr	r2, [pc, #168]	; (8017350 <__sflush_r+0x108>)
 80172a8:	40ca      	lsrs	r2, r1
 80172aa:	07d6      	lsls	r6, r2, #31
 80172ac:	d528      	bpl.n	8017300 <__sflush_r+0xb8>
 80172ae:	2200      	movs	r2, #0
 80172b0:	6062      	str	r2, [r4, #4]
 80172b2:	04d9      	lsls	r1, r3, #19
 80172b4:	6922      	ldr	r2, [r4, #16]
 80172b6:	6022      	str	r2, [r4, #0]
 80172b8:	d504      	bpl.n	80172c4 <__sflush_r+0x7c>
 80172ba:	1c42      	adds	r2, r0, #1
 80172bc:	d101      	bne.n	80172c2 <__sflush_r+0x7a>
 80172be:	682b      	ldr	r3, [r5, #0]
 80172c0:	b903      	cbnz	r3, 80172c4 <__sflush_r+0x7c>
 80172c2:	6560      	str	r0, [r4, #84]	; 0x54
 80172c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172c6:	602f      	str	r7, [r5, #0]
 80172c8:	2900      	cmp	r1, #0
 80172ca:	d0ca      	beq.n	8017262 <__sflush_r+0x1a>
 80172cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172d0:	4299      	cmp	r1, r3
 80172d2:	d002      	beq.n	80172da <__sflush_r+0x92>
 80172d4:	4628      	mov	r0, r5
 80172d6:	f000 f915 	bl	8017504 <_free_r>
 80172da:	2000      	movs	r0, #0
 80172dc:	6360      	str	r0, [r4, #52]	; 0x34
 80172de:	e7c1      	b.n	8017264 <__sflush_r+0x1c>
 80172e0:	6a21      	ldr	r1, [r4, #32]
 80172e2:	2301      	movs	r3, #1
 80172e4:	4628      	mov	r0, r5
 80172e6:	47b0      	blx	r6
 80172e8:	1c41      	adds	r1, r0, #1
 80172ea:	d1c7      	bne.n	801727c <__sflush_r+0x34>
 80172ec:	682b      	ldr	r3, [r5, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d0c4      	beq.n	801727c <__sflush_r+0x34>
 80172f2:	2b1d      	cmp	r3, #29
 80172f4:	d001      	beq.n	80172fa <__sflush_r+0xb2>
 80172f6:	2b16      	cmp	r3, #22
 80172f8:	d101      	bne.n	80172fe <__sflush_r+0xb6>
 80172fa:	602f      	str	r7, [r5, #0]
 80172fc:	e7b1      	b.n	8017262 <__sflush_r+0x1a>
 80172fe:	89a3      	ldrh	r3, [r4, #12]
 8017300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017304:	81a3      	strh	r3, [r4, #12]
 8017306:	e7ad      	b.n	8017264 <__sflush_r+0x1c>
 8017308:	690f      	ldr	r7, [r1, #16]
 801730a:	2f00      	cmp	r7, #0
 801730c:	d0a9      	beq.n	8017262 <__sflush_r+0x1a>
 801730e:	0793      	lsls	r3, r2, #30
 8017310:	680e      	ldr	r6, [r1, #0]
 8017312:	bf08      	it	eq
 8017314:	694b      	ldreq	r3, [r1, #20]
 8017316:	600f      	str	r7, [r1, #0]
 8017318:	bf18      	it	ne
 801731a:	2300      	movne	r3, #0
 801731c:	eba6 0807 	sub.w	r8, r6, r7
 8017320:	608b      	str	r3, [r1, #8]
 8017322:	f1b8 0f00 	cmp.w	r8, #0
 8017326:	dd9c      	ble.n	8017262 <__sflush_r+0x1a>
 8017328:	6a21      	ldr	r1, [r4, #32]
 801732a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801732c:	4643      	mov	r3, r8
 801732e:	463a      	mov	r2, r7
 8017330:	4628      	mov	r0, r5
 8017332:	47b0      	blx	r6
 8017334:	2800      	cmp	r0, #0
 8017336:	dc06      	bgt.n	8017346 <__sflush_r+0xfe>
 8017338:	89a3      	ldrh	r3, [r4, #12]
 801733a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801733e:	81a3      	strh	r3, [r4, #12]
 8017340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017344:	e78e      	b.n	8017264 <__sflush_r+0x1c>
 8017346:	4407      	add	r7, r0
 8017348:	eba8 0800 	sub.w	r8, r8, r0
 801734c:	e7e9      	b.n	8017322 <__sflush_r+0xda>
 801734e:	bf00      	nop
 8017350:	20400001 	.word	0x20400001

08017354 <_fflush_r>:
 8017354:	b538      	push	{r3, r4, r5, lr}
 8017356:	690b      	ldr	r3, [r1, #16]
 8017358:	4605      	mov	r5, r0
 801735a:	460c      	mov	r4, r1
 801735c:	b913      	cbnz	r3, 8017364 <_fflush_r+0x10>
 801735e:	2500      	movs	r5, #0
 8017360:	4628      	mov	r0, r5
 8017362:	bd38      	pop	{r3, r4, r5, pc}
 8017364:	b118      	cbz	r0, 801736e <_fflush_r+0x1a>
 8017366:	6983      	ldr	r3, [r0, #24]
 8017368:	b90b      	cbnz	r3, 801736e <_fflush_r+0x1a>
 801736a:	f7ff fa11 	bl	8016790 <__sinit>
 801736e:	4b14      	ldr	r3, [pc, #80]	; (80173c0 <_fflush_r+0x6c>)
 8017370:	429c      	cmp	r4, r3
 8017372:	d11b      	bne.n	80173ac <_fflush_r+0x58>
 8017374:	686c      	ldr	r4, [r5, #4]
 8017376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d0ef      	beq.n	801735e <_fflush_r+0xa>
 801737e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017380:	07d0      	lsls	r0, r2, #31
 8017382:	d404      	bmi.n	801738e <_fflush_r+0x3a>
 8017384:	0599      	lsls	r1, r3, #22
 8017386:	d402      	bmi.n	801738e <_fflush_r+0x3a>
 8017388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801738a:	f7ff fac4 	bl	8016916 <__retarget_lock_acquire_recursive>
 801738e:	4628      	mov	r0, r5
 8017390:	4621      	mov	r1, r4
 8017392:	f7ff ff59 	bl	8017248 <__sflush_r>
 8017396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017398:	07da      	lsls	r2, r3, #31
 801739a:	4605      	mov	r5, r0
 801739c:	d4e0      	bmi.n	8017360 <_fflush_r+0xc>
 801739e:	89a3      	ldrh	r3, [r4, #12]
 80173a0:	059b      	lsls	r3, r3, #22
 80173a2:	d4dd      	bmi.n	8017360 <_fflush_r+0xc>
 80173a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173a6:	f7ff fab7 	bl	8016918 <__retarget_lock_release_recursive>
 80173aa:	e7d9      	b.n	8017360 <_fflush_r+0xc>
 80173ac:	4b05      	ldr	r3, [pc, #20]	; (80173c4 <_fflush_r+0x70>)
 80173ae:	429c      	cmp	r4, r3
 80173b0:	d101      	bne.n	80173b6 <_fflush_r+0x62>
 80173b2:	68ac      	ldr	r4, [r5, #8]
 80173b4:	e7df      	b.n	8017376 <_fflush_r+0x22>
 80173b6:	4b04      	ldr	r3, [pc, #16]	; (80173c8 <_fflush_r+0x74>)
 80173b8:	429c      	cmp	r4, r3
 80173ba:	bf08      	it	eq
 80173bc:	68ec      	ldreq	r4, [r5, #12]
 80173be:	e7da      	b.n	8017376 <_fflush_r+0x22>
 80173c0:	08022b40 	.word	0x08022b40
 80173c4:	08022b60 	.word	0x08022b60
 80173c8:	08022b20 	.word	0x08022b20

080173cc <fiprintf>:
 80173cc:	b40e      	push	{r1, r2, r3}
 80173ce:	b503      	push	{r0, r1, lr}
 80173d0:	4601      	mov	r1, r0
 80173d2:	ab03      	add	r3, sp, #12
 80173d4:	4805      	ldr	r0, [pc, #20]	; (80173ec <fiprintf+0x20>)
 80173d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80173da:	6800      	ldr	r0, [r0, #0]
 80173dc:	9301      	str	r3, [sp, #4]
 80173de:	f000 fa67 	bl	80178b0 <_vfiprintf_r>
 80173e2:	b002      	add	sp, #8
 80173e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80173e8:	b003      	add	sp, #12
 80173ea:	4770      	bx	lr
 80173ec:	200004b4 	.word	0x200004b4

080173f0 <_lseek_r>:
 80173f0:	b538      	push	{r3, r4, r5, lr}
 80173f2:	4d07      	ldr	r5, [pc, #28]	; (8017410 <_lseek_r+0x20>)
 80173f4:	4604      	mov	r4, r0
 80173f6:	4608      	mov	r0, r1
 80173f8:	4611      	mov	r1, r2
 80173fa:	2200      	movs	r2, #0
 80173fc:	602a      	str	r2, [r5, #0]
 80173fe:	461a      	mov	r2, r3
 8017400:	f7ea fe62 	bl	80020c8 <_lseek>
 8017404:	1c43      	adds	r3, r0, #1
 8017406:	d102      	bne.n	801740e <_lseek_r+0x1e>
 8017408:	682b      	ldr	r3, [r5, #0]
 801740a:	b103      	cbz	r3, 801740e <_lseek_r+0x1e>
 801740c:	6023      	str	r3, [r4, #0]
 801740e:	bd38      	pop	{r3, r4, r5, pc}
 8017410:	200136cc 	.word	0x200136cc

08017414 <__swhatbuf_r>:
 8017414:	b570      	push	{r4, r5, r6, lr}
 8017416:	460e      	mov	r6, r1
 8017418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801741c:	2900      	cmp	r1, #0
 801741e:	b096      	sub	sp, #88	; 0x58
 8017420:	4614      	mov	r4, r2
 8017422:	461d      	mov	r5, r3
 8017424:	da07      	bge.n	8017436 <__swhatbuf_r+0x22>
 8017426:	2300      	movs	r3, #0
 8017428:	602b      	str	r3, [r5, #0]
 801742a:	89b3      	ldrh	r3, [r6, #12]
 801742c:	061a      	lsls	r2, r3, #24
 801742e:	d410      	bmi.n	8017452 <__swhatbuf_r+0x3e>
 8017430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017434:	e00e      	b.n	8017454 <__swhatbuf_r+0x40>
 8017436:	466a      	mov	r2, sp
 8017438:	f000 fd18 	bl	8017e6c <_fstat_r>
 801743c:	2800      	cmp	r0, #0
 801743e:	dbf2      	blt.n	8017426 <__swhatbuf_r+0x12>
 8017440:	9a01      	ldr	r2, [sp, #4]
 8017442:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017446:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801744a:	425a      	negs	r2, r3
 801744c:	415a      	adcs	r2, r3
 801744e:	602a      	str	r2, [r5, #0]
 8017450:	e7ee      	b.n	8017430 <__swhatbuf_r+0x1c>
 8017452:	2340      	movs	r3, #64	; 0x40
 8017454:	2000      	movs	r0, #0
 8017456:	6023      	str	r3, [r4, #0]
 8017458:	b016      	add	sp, #88	; 0x58
 801745a:	bd70      	pop	{r4, r5, r6, pc}

0801745c <__smakebuf_r>:
 801745c:	898b      	ldrh	r3, [r1, #12]
 801745e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017460:	079d      	lsls	r5, r3, #30
 8017462:	4606      	mov	r6, r0
 8017464:	460c      	mov	r4, r1
 8017466:	d507      	bpl.n	8017478 <__smakebuf_r+0x1c>
 8017468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801746c:	6023      	str	r3, [r4, #0]
 801746e:	6123      	str	r3, [r4, #16]
 8017470:	2301      	movs	r3, #1
 8017472:	6163      	str	r3, [r4, #20]
 8017474:	b002      	add	sp, #8
 8017476:	bd70      	pop	{r4, r5, r6, pc}
 8017478:	ab01      	add	r3, sp, #4
 801747a:	466a      	mov	r2, sp
 801747c:	f7ff ffca 	bl	8017414 <__swhatbuf_r>
 8017480:	9900      	ldr	r1, [sp, #0]
 8017482:	4605      	mov	r5, r0
 8017484:	4630      	mov	r0, r6
 8017486:	f7ff fa87 	bl	8016998 <_malloc_r>
 801748a:	b948      	cbnz	r0, 80174a0 <__smakebuf_r+0x44>
 801748c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017490:	059a      	lsls	r2, r3, #22
 8017492:	d4ef      	bmi.n	8017474 <__smakebuf_r+0x18>
 8017494:	f023 0303 	bic.w	r3, r3, #3
 8017498:	f043 0302 	orr.w	r3, r3, #2
 801749c:	81a3      	strh	r3, [r4, #12]
 801749e:	e7e3      	b.n	8017468 <__smakebuf_r+0xc>
 80174a0:	4b0d      	ldr	r3, [pc, #52]	; (80174d8 <__smakebuf_r+0x7c>)
 80174a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80174a4:	89a3      	ldrh	r3, [r4, #12]
 80174a6:	6020      	str	r0, [r4, #0]
 80174a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174ac:	81a3      	strh	r3, [r4, #12]
 80174ae:	9b00      	ldr	r3, [sp, #0]
 80174b0:	6163      	str	r3, [r4, #20]
 80174b2:	9b01      	ldr	r3, [sp, #4]
 80174b4:	6120      	str	r0, [r4, #16]
 80174b6:	b15b      	cbz	r3, 80174d0 <__smakebuf_r+0x74>
 80174b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174bc:	4630      	mov	r0, r6
 80174be:	f000 fce7 	bl	8017e90 <_isatty_r>
 80174c2:	b128      	cbz	r0, 80174d0 <__smakebuf_r+0x74>
 80174c4:	89a3      	ldrh	r3, [r4, #12]
 80174c6:	f023 0303 	bic.w	r3, r3, #3
 80174ca:	f043 0301 	orr.w	r3, r3, #1
 80174ce:	81a3      	strh	r3, [r4, #12]
 80174d0:	89a0      	ldrh	r0, [r4, #12]
 80174d2:	4305      	orrs	r5, r0
 80174d4:	81a5      	strh	r5, [r4, #12]
 80174d6:	e7cd      	b.n	8017474 <__smakebuf_r+0x18>
 80174d8:	08016729 	.word	0x08016729

080174dc <malloc>:
 80174dc:	4b02      	ldr	r3, [pc, #8]	; (80174e8 <malloc+0xc>)
 80174de:	4601      	mov	r1, r0
 80174e0:	6818      	ldr	r0, [r3, #0]
 80174e2:	f7ff ba59 	b.w	8016998 <_malloc_r>
 80174e6:	bf00      	nop
 80174e8:	200004b4 	.word	0x200004b4

080174ec <__malloc_lock>:
 80174ec:	4801      	ldr	r0, [pc, #4]	; (80174f4 <__malloc_lock+0x8>)
 80174ee:	f7ff ba12 	b.w	8016916 <__retarget_lock_acquire_recursive>
 80174f2:	bf00      	nop
 80174f4:	200136d8 	.word	0x200136d8

080174f8 <__malloc_unlock>:
 80174f8:	4801      	ldr	r0, [pc, #4]	; (8017500 <__malloc_unlock+0x8>)
 80174fa:	f7ff ba0d 	b.w	8016918 <__retarget_lock_release_recursive>
 80174fe:	bf00      	nop
 8017500:	200136d8 	.word	0x200136d8

08017504 <_free_r>:
 8017504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017506:	2900      	cmp	r1, #0
 8017508:	d048      	beq.n	801759c <_free_r+0x98>
 801750a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801750e:	9001      	str	r0, [sp, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	f1a1 0404 	sub.w	r4, r1, #4
 8017516:	bfb8      	it	lt
 8017518:	18e4      	addlt	r4, r4, r3
 801751a:	f7ff ffe7 	bl	80174ec <__malloc_lock>
 801751e:	4a20      	ldr	r2, [pc, #128]	; (80175a0 <_free_r+0x9c>)
 8017520:	9801      	ldr	r0, [sp, #4]
 8017522:	6813      	ldr	r3, [r2, #0]
 8017524:	4615      	mov	r5, r2
 8017526:	b933      	cbnz	r3, 8017536 <_free_r+0x32>
 8017528:	6063      	str	r3, [r4, #4]
 801752a:	6014      	str	r4, [r2, #0]
 801752c:	b003      	add	sp, #12
 801752e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017532:	f7ff bfe1 	b.w	80174f8 <__malloc_unlock>
 8017536:	42a3      	cmp	r3, r4
 8017538:	d90b      	bls.n	8017552 <_free_r+0x4e>
 801753a:	6821      	ldr	r1, [r4, #0]
 801753c:	1862      	adds	r2, r4, r1
 801753e:	4293      	cmp	r3, r2
 8017540:	bf04      	itt	eq
 8017542:	681a      	ldreq	r2, [r3, #0]
 8017544:	685b      	ldreq	r3, [r3, #4]
 8017546:	6063      	str	r3, [r4, #4]
 8017548:	bf04      	itt	eq
 801754a:	1852      	addeq	r2, r2, r1
 801754c:	6022      	streq	r2, [r4, #0]
 801754e:	602c      	str	r4, [r5, #0]
 8017550:	e7ec      	b.n	801752c <_free_r+0x28>
 8017552:	461a      	mov	r2, r3
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	b10b      	cbz	r3, 801755c <_free_r+0x58>
 8017558:	42a3      	cmp	r3, r4
 801755a:	d9fa      	bls.n	8017552 <_free_r+0x4e>
 801755c:	6811      	ldr	r1, [r2, #0]
 801755e:	1855      	adds	r5, r2, r1
 8017560:	42a5      	cmp	r5, r4
 8017562:	d10b      	bne.n	801757c <_free_r+0x78>
 8017564:	6824      	ldr	r4, [r4, #0]
 8017566:	4421      	add	r1, r4
 8017568:	1854      	adds	r4, r2, r1
 801756a:	42a3      	cmp	r3, r4
 801756c:	6011      	str	r1, [r2, #0]
 801756e:	d1dd      	bne.n	801752c <_free_r+0x28>
 8017570:	681c      	ldr	r4, [r3, #0]
 8017572:	685b      	ldr	r3, [r3, #4]
 8017574:	6053      	str	r3, [r2, #4]
 8017576:	4421      	add	r1, r4
 8017578:	6011      	str	r1, [r2, #0]
 801757a:	e7d7      	b.n	801752c <_free_r+0x28>
 801757c:	d902      	bls.n	8017584 <_free_r+0x80>
 801757e:	230c      	movs	r3, #12
 8017580:	6003      	str	r3, [r0, #0]
 8017582:	e7d3      	b.n	801752c <_free_r+0x28>
 8017584:	6825      	ldr	r5, [r4, #0]
 8017586:	1961      	adds	r1, r4, r5
 8017588:	428b      	cmp	r3, r1
 801758a:	bf04      	itt	eq
 801758c:	6819      	ldreq	r1, [r3, #0]
 801758e:	685b      	ldreq	r3, [r3, #4]
 8017590:	6063      	str	r3, [r4, #4]
 8017592:	bf04      	itt	eq
 8017594:	1949      	addeq	r1, r1, r5
 8017596:	6021      	streq	r1, [r4, #0]
 8017598:	6054      	str	r4, [r2, #4]
 801759a:	e7c7      	b.n	801752c <_free_r+0x28>
 801759c:	b003      	add	sp, #12
 801759e:	bd30      	pop	{r4, r5, pc}
 80175a0:	20005534 	.word	0x20005534

080175a4 <__ssputs_r>:
 80175a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175a8:	688e      	ldr	r6, [r1, #8]
 80175aa:	429e      	cmp	r6, r3
 80175ac:	4682      	mov	sl, r0
 80175ae:	460c      	mov	r4, r1
 80175b0:	4690      	mov	r8, r2
 80175b2:	461f      	mov	r7, r3
 80175b4:	d838      	bhi.n	8017628 <__ssputs_r+0x84>
 80175b6:	898a      	ldrh	r2, [r1, #12]
 80175b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80175bc:	d032      	beq.n	8017624 <__ssputs_r+0x80>
 80175be:	6825      	ldr	r5, [r4, #0]
 80175c0:	6909      	ldr	r1, [r1, #16]
 80175c2:	eba5 0901 	sub.w	r9, r5, r1
 80175c6:	6965      	ldr	r5, [r4, #20]
 80175c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175d0:	3301      	adds	r3, #1
 80175d2:	444b      	add	r3, r9
 80175d4:	106d      	asrs	r5, r5, #1
 80175d6:	429d      	cmp	r5, r3
 80175d8:	bf38      	it	cc
 80175da:	461d      	movcc	r5, r3
 80175dc:	0553      	lsls	r3, r2, #21
 80175de:	d531      	bpl.n	8017644 <__ssputs_r+0xa0>
 80175e0:	4629      	mov	r1, r5
 80175e2:	f7ff f9d9 	bl	8016998 <_malloc_r>
 80175e6:	4606      	mov	r6, r0
 80175e8:	b950      	cbnz	r0, 8017600 <__ssputs_r+0x5c>
 80175ea:	230c      	movs	r3, #12
 80175ec:	f8ca 3000 	str.w	r3, [sl]
 80175f0:	89a3      	ldrh	r3, [r4, #12]
 80175f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175f6:	81a3      	strh	r3, [r4, #12]
 80175f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017600:	6921      	ldr	r1, [r4, #16]
 8017602:	464a      	mov	r2, r9
 8017604:	f7ff f997 	bl	8016936 <memcpy>
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801760e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017612:	81a3      	strh	r3, [r4, #12]
 8017614:	6126      	str	r6, [r4, #16]
 8017616:	6165      	str	r5, [r4, #20]
 8017618:	444e      	add	r6, r9
 801761a:	eba5 0509 	sub.w	r5, r5, r9
 801761e:	6026      	str	r6, [r4, #0]
 8017620:	60a5      	str	r5, [r4, #8]
 8017622:	463e      	mov	r6, r7
 8017624:	42be      	cmp	r6, r7
 8017626:	d900      	bls.n	801762a <__ssputs_r+0x86>
 8017628:	463e      	mov	r6, r7
 801762a:	4632      	mov	r2, r6
 801762c:	6820      	ldr	r0, [r4, #0]
 801762e:	4641      	mov	r1, r8
 8017630:	f7ff f98f 	bl	8016952 <memmove>
 8017634:	68a3      	ldr	r3, [r4, #8]
 8017636:	6822      	ldr	r2, [r4, #0]
 8017638:	1b9b      	subs	r3, r3, r6
 801763a:	4432      	add	r2, r6
 801763c:	60a3      	str	r3, [r4, #8]
 801763e:	6022      	str	r2, [r4, #0]
 8017640:	2000      	movs	r0, #0
 8017642:	e7db      	b.n	80175fc <__ssputs_r+0x58>
 8017644:	462a      	mov	r2, r5
 8017646:	f000 fc33 	bl	8017eb0 <_realloc_r>
 801764a:	4606      	mov	r6, r0
 801764c:	2800      	cmp	r0, #0
 801764e:	d1e1      	bne.n	8017614 <__ssputs_r+0x70>
 8017650:	6921      	ldr	r1, [r4, #16]
 8017652:	4650      	mov	r0, sl
 8017654:	f7ff ff56 	bl	8017504 <_free_r>
 8017658:	e7c7      	b.n	80175ea <__ssputs_r+0x46>
	...

0801765c <_svfiprintf_r>:
 801765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017660:	4698      	mov	r8, r3
 8017662:	898b      	ldrh	r3, [r1, #12]
 8017664:	061b      	lsls	r3, r3, #24
 8017666:	b09d      	sub	sp, #116	; 0x74
 8017668:	4607      	mov	r7, r0
 801766a:	460d      	mov	r5, r1
 801766c:	4614      	mov	r4, r2
 801766e:	d50e      	bpl.n	801768e <_svfiprintf_r+0x32>
 8017670:	690b      	ldr	r3, [r1, #16]
 8017672:	b963      	cbnz	r3, 801768e <_svfiprintf_r+0x32>
 8017674:	2140      	movs	r1, #64	; 0x40
 8017676:	f7ff f98f 	bl	8016998 <_malloc_r>
 801767a:	6028      	str	r0, [r5, #0]
 801767c:	6128      	str	r0, [r5, #16]
 801767e:	b920      	cbnz	r0, 801768a <_svfiprintf_r+0x2e>
 8017680:	230c      	movs	r3, #12
 8017682:	603b      	str	r3, [r7, #0]
 8017684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017688:	e0d1      	b.n	801782e <_svfiprintf_r+0x1d2>
 801768a:	2340      	movs	r3, #64	; 0x40
 801768c:	616b      	str	r3, [r5, #20]
 801768e:	2300      	movs	r3, #0
 8017690:	9309      	str	r3, [sp, #36]	; 0x24
 8017692:	2320      	movs	r3, #32
 8017694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017698:	f8cd 800c 	str.w	r8, [sp, #12]
 801769c:	2330      	movs	r3, #48	; 0x30
 801769e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017848 <_svfiprintf_r+0x1ec>
 80176a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176a6:	f04f 0901 	mov.w	r9, #1
 80176aa:	4623      	mov	r3, r4
 80176ac:	469a      	mov	sl, r3
 80176ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176b2:	b10a      	cbz	r2, 80176b8 <_svfiprintf_r+0x5c>
 80176b4:	2a25      	cmp	r2, #37	; 0x25
 80176b6:	d1f9      	bne.n	80176ac <_svfiprintf_r+0x50>
 80176b8:	ebba 0b04 	subs.w	fp, sl, r4
 80176bc:	d00b      	beq.n	80176d6 <_svfiprintf_r+0x7a>
 80176be:	465b      	mov	r3, fp
 80176c0:	4622      	mov	r2, r4
 80176c2:	4629      	mov	r1, r5
 80176c4:	4638      	mov	r0, r7
 80176c6:	f7ff ff6d 	bl	80175a4 <__ssputs_r>
 80176ca:	3001      	adds	r0, #1
 80176cc:	f000 80aa 	beq.w	8017824 <_svfiprintf_r+0x1c8>
 80176d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176d2:	445a      	add	r2, fp
 80176d4:	9209      	str	r2, [sp, #36]	; 0x24
 80176d6:	f89a 3000 	ldrb.w	r3, [sl]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	f000 80a2 	beq.w	8017824 <_svfiprintf_r+0x1c8>
 80176e0:	2300      	movs	r3, #0
 80176e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176ea:	f10a 0a01 	add.w	sl, sl, #1
 80176ee:	9304      	str	r3, [sp, #16]
 80176f0:	9307      	str	r3, [sp, #28]
 80176f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176f6:	931a      	str	r3, [sp, #104]	; 0x68
 80176f8:	4654      	mov	r4, sl
 80176fa:	2205      	movs	r2, #5
 80176fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017700:	4851      	ldr	r0, [pc, #324]	; (8017848 <_svfiprintf_r+0x1ec>)
 8017702:	f7e8 fd7d 	bl	8000200 <memchr>
 8017706:	9a04      	ldr	r2, [sp, #16]
 8017708:	b9d8      	cbnz	r0, 8017742 <_svfiprintf_r+0xe6>
 801770a:	06d0      	lsls	r0, r2, #27
 801770c:	bf44      	itt	mi
 801770e:	2320      	movmi	r3, #32
 8017710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017714:	0711      	lsls	r1, r2, #28
 8017716:	bf44      	itt	mi
 8017718:	232b      	movmi	r3, #43	; 0x2b
 801771a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801771e:	f89a 3000 	ldrb.w	r3, [sl]
 8017722:	2b2a      	cmp	r3, #42	; 0x2a
 8017724:	d015      	beq.n	8017752 <_svfiprintf_r+0xf6>
 8017726:	9a07      	ldr	r2, [sp, #28]
 8017728:	4654      	mov	r4, sl
 801772a:	2000      	movs	r0, #0
 801772c:	f04f 0c0a 	mov.w	ip, #10
 8017730:	4621      	mov	r1, r4
 8017732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017736:	3b30      	subs	r3, #48	; 0x30
 8017738:	2b09      	cmp	r3, #9
 801773a:	d94e      	bls.n	80177da <_svfiprintf_r+0x17e>
 801773c:	b1b0      	cbz	r0, 801776c <_svfiprintf_r+0x110>
 801773e:	9207      	str	r2, [sp, #28]
 8017740:	e014      	b.n	801776c <_svfiprintf_r+0x110>
 8017742:	eba0 0308 	sub.w	r3, r0, r8
 8017746:	fa09 f303 	lsl.w	r3, r9, r3
 801774a:	4313      	orrs	r3, r2
 801774c:	9304      	str	r3, [sp, #16]
 801774e:	46a2      	mov	sl, r4
 8017750:	e7d2      	b.n	80176f8 <_svfiprintf_r+0x9c>
 8017752:	9b03      	ldr	r3, [sp, #12]
 8017754:	1d19      	adds	r1, r3, #4
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	9103      	str	r1, [sp, #12]
 801775a:	2b00      	cmp	r3, #0
 801775c:	bfbb      	ittet	lt
 801775e:	425b      	neglt	r3, r3
 8017760:	f042 0202 	orrlt.w	r2, r2, #2
 8017764:	9307      	strge	r3, [sp, #28]
 8017766:	9307      	strlt	r3, [sp, #28]
 8017768:	bfb8      	it	lt
 801776a:	9204      	strlt	r2, [sp, #16]
 801776c:	7823      	ldrb	r3, [r4, #0]
 801776e:	2b2e      	cmp	r3, #46	; 0x2e
 8017770:	d10c      	bne.n	801778c <_svfiprintf_r+0x130>
 8017772:	7863      	ldrb	r3, [r4, #1]
 8017774:	2b2a      	cmp	r3, #42	; 0x2a
 8017776:	d135      	bne.n	80177e4 <_svfiprintf_r+0x188>
 8017778:	9b03      	ldr	r3, [sp, #12]
 801777a:	1d1a      	adds	r2, r3, #4
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	9203      	str	r2, [sp, #12]
 8017780:	2b00      	cmp	r3, #0
 8017782:	bfb8      	it	lt
 8017784:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017788:	3402      	adds	r4, #2
 801778a:	9305      	str	r3, [sp, #20]
 801778c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017858 <_svfiprintf_r+0x1fc>
 8017790:	7821      	ldrb	r1, [r4, #0]
 8017792:	2203      	movs	r2, #3
 8017794:	4650      	mov	r0, sl
 8017796:	f7e8 fd33 	bl	8000200 <memchr>
 801779a:	b140      	cbz	r0, 80177ae <_svfiprintf_r+0x152>
 801779c:	2340      	movs	r3, #64	; 0x40
 801779e:	eba0 000a 	sub.w	r0, r0, sl
 80177a2:	fa03 f000 	lsl.w	r0, r3, r0
 80177a6:	9b04      	ldr	r3, [sp, #16]
 80177a8:	4303      	orrs	r3, r0
 80177aa:	3401      	adds	r4, #1
 80177ac:	9304      	str	r3, [sp, #16]
 80177ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177b2:	4826      	ldr	r0, [pc, #152]	; (801784c <_svfiprintf_r+0x1f0>)
 80177b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177b8:	2206      	movs	r2, #6
 80177ba:	f7e8 fd21 	bl	8000200 <memchr>
 80177be:	2800      	cmp	r0, #0
 80177c0:	d038      	beq.n	8017834 <_svfiprintf_r+0x1d8>
 80177c2:	4b23      	ldr	r3, [pc, #140]	; (8017850 <_svfiprintf_r+0x1f4>)
 80177c4:	bb1b      	cbnz	r3, 801780e <_svfiprintf_r+0x1b2>
 80177c6:	9b03      	ldr	r3, [sp, #12]
 80177c8:	3307      	adds	r3, #7
 80177ca:	f023 0307 	bic.w	r3, r3, #7
 80177ce:	3308      	adds	r3, #8
 80177d0:	9303      	str	r3, [sp, #12]
 80177d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177d4:	4433      	add	r3, r6
 80177d6:	9309      	str	r3, [sp, #36]	; 0x24
 80177d8:	e767      	b.n	80176aa <_svfiprintf_r+0x4e>
 80177da:	fb0c 3202 	mla	r2, ip, r2, r3
 80177de:	460c      	mov	r4, r1
 80177e0:	2001      	movs	r0, #1
 80177e2:	e7a5      	b.n	8017730 <_svfiprintf_r+0xd4>
 80177e4:	2300      	movs	r3, #0
 80177e6:	3401      	adds	r4, #1
 80177e8:	9305      	str	r3, [sp, #20]
 80177ea:	4619      	mov	r1, r3
 80177ec:	f04f 0c0a 	mov.w	ip, #10
 80177f0:	4620      	mov	r0, r4
 80177f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177f6:	3a30      	subs	r2, #48	; 0x30
 80177f8:	2a09      	cmp	r2, #9
 80177fa:	d903      	bls.n	8017804 <_svfiprintf_r+0x1a8>
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d0c5      	beq.n	801778c <_svfiprintf_r+0x130>
 8017800:	9105      	str	r1, [sp, #20]
 8017802:	e7c3      	b.n	801778c <_svfiprintf_r+0x130>
 8017804:	fb0c 2101 	mla	r1, ip, r1, r2
 8017808:	4604      	mov	r4, r0
 801780a:	2301      	movs	r3, #1
 801780c:	e7f0      	b.n	80177f0 <_svfiprintf_r+0x194>
 801780e:	ab03      	add	r3, sp, #12
 8017810:	9300      	str	r3, [sp, #0]
 8017812:	462a      	mov	r2, r5
 8017814:	4b0f      	ldr	r3, [pc, #60]	; (8017854 <_svfiprintf_r+0x1f8>)
 8017816:	a904      	add	r1, sp, #16
 8017818:	4638      	mov	r0, r7
 801781a:	f3af 8000 	nop.w
 801781e:	1c42      	adds	r2, r0, #1
 8017820:	4606      	mov	r6, r0
 8017822:	d1d6      	bne.n	80177d2 <_svfiprintf_r+0x176>
 8017824:	89ab      	ldrh	r3, [r5, #12]
 8017826:	065b      	lsls	r3, r3, #25
 8017828:	f53f af2c 	bmi.w	8017684 <_svfiprintf_r+0x28>
 801782c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801782e:	b01d      	add	sp, #116	; 0x74
 8017830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017834:	ab03      	add	r3, sp, #12
 8017836:	9300      	str	r3, [sp, #0]
 8017838:	462a      	mov	r2, r5
 801783a:	4b06      	ldr	r3, [pc, #24]	; (8017854 <_svfiprintf_r+0x1f8>)
 801783c:	a904      	add	r1, sp, #16
 801783e:	4638      	mov	r0, r7
 8017840:	f000 f9d4 	bl	8017bec <_printf_i>
 8017844:	e7eb      	b.n	801781e <_svfiprintf_r+0x1c2>
 8017846:	bf00      	nop
 8017848:	08022c36 	.word	0x08022c36
 801784c:	08022c40 	.word	0x08022c40
 8017850:	00000000 	.word	0x00000000
 8017854:	080175a5 	.word	0x080175a5
 8017858:	08022c3c 	.word	0x08022c3c

0801785c <__sfputc_r>:
 801785c:	6893      	ldr	r3, [r2, #8]
 801785e:	3b01      	subs	r3, #1
 8017860:	2b00      	cmp	r3, #0
 8017862:	b410      	push	{r4}
 8017864:	6093      	str	r3, [r2, #8]
 8017866:	da08      	bge.n	801787a <__sfputc_r+0x1e>
 8017868:	6994      	ldr	r4, [r2, #24]
 801786a:	42a3      	cmp	r3, r4
 801786c:	db01      	blt.n	8017872 <__sfputc_r+0x16>
 801786e:	290a      	cmp	r1, #10
 8017870:	d103      	bne.n	801787a <__sfputc_r+0x1e>
 8017872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017876:	f7ff bbe1 	b.w	801703c <__swbuf_r>
 801787a:	6813      	ldr	r3, [r2, #0]
 801787c:	1c58      	adds	r0, r3, #1
 801787e:	6010      	str	r0, [r2, #0]
 8017880:	7019      	strb	r1, [r3, #0]
 8017882:	4608      	mov	r0, r1
 8017884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017888:	4770      	bx	lr

0801788a <__sfputs_r>:
 801788a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801788c:	4606      	mov	r6, r0
 801788e:	460f      	mov	r7, r1
 8017890:	4614      	mov	r4, r2
 8017892:	18d5      	adds	r5, r2, r3
 8017894:	42ac      	cmp	r4, r5
 8017896:	d101      	bne.n	801789c <__sfputs_r+0x12>
 8017898:	2000      	movs	r0, #0
 801789a:	e007      	b.n	80178ac <__sfputs_r+0x22>
 801789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178a0:	463a      	mov	r2, r7
 80178a2:	4630      	mov	r0, r6
 80178a4:	f7ff ffda 	bl	801785c <__sfputc_r>
 80178a8:	1c43      	adds	r3, r0, #1
 80178aa:	d1f3      	bne.n	8017894 <__sfputs_r+0xa>
 80178ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178b0 <_vfiprintf_r>:
 80178b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b4:	460d      	mov	r5, r1
 80178b6:	b09d      	sub	sp, #116	; 0x74
 80178b8:	4614      	mov	r4, r2
 80178ba:	4698      	mov	r8, r3
 80178bc:	4606      	mov	r6, r0
 80178be:	b118      	cbz	r0, 80178c8 <_vfiprintf_r+0x18>
 80178c0:	6983      	ldr	r3, [r0, #24]
 80178c2:	b90b      	cbnz	r3, 80178c8 <_vfiprintf_r+0x18>
 80178c4:	f7fe ff64 	bl	8016790 <__sinit>
 80178c8:	4b89      	ldr	r3, [pc, #548]	; (8017af0 <_vfiprintf_r+0x240>)
 80178ca:	429d      	cmp	r5, r3
 80178cc:	d11b      	bne.n	8017906 <_vfiprintf_r+0x56>
 80178ce:	6875      	ldr	r5, [r6, #4]
 80178d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178d2:	07d9      	lsls	r1, r3, #31
 80178d4:	d405      	bmi.n	80178e2 <_vfiprintf_r+0x32>
 80178d6:	89ab      	ldrh	r3, [r5, #12]
 80178d8:	059a      	lsls	r2, r3, #22
 80178da:	d402      	bmi.n	80178e2 <_vfiprintf_r+0x32>
 80178dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178de:	f7ff f81a 	bl	8016916 <__retarget_lock_acquire_recursive>
 80178e2:	89ab      	ldrh	r3, [r5, #12]
 80178e4:	071b      	lsls	r3, r3, #28
 80178e6:	d501      	bpl.n	80178ec <_vfiprintf_r+0x3c>
 80178e8:	692b      	ldr	r3, [r5, #16]
 80178ea:	b9eb      	cbnz	r3, 8017928 <_vfiprintf_r+0x78>
 80178ec:	4629      	mov	r1, r5
 80178ee:	4630      	mov	r0, r6
 80178f0:	f7ff fc08 	bl	8017104 <__swsetup_r>
 80178f4:	b1c0      	cbz	r0, 8017928 <_vfiprintf_r+0x78>
 80178f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178f8:	07dc      	lsls	r4, r3, #31
 80178fa:	d50e      	bpl.n	801791a <_vfiprintf_r+0x6a>
 80178fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017900:	b01d      	add	sp, #116	; 0x74
 8017902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017906:	4b7b      	ldr	r3, [pc, #492]	; (8017af4 <_vfiprintf_r+0x244>)
 8017908:	429d      	cmp	r5, r3
 801790a:	d101      	bne.n	8017910 <_vfiprintf_r+0x60>
 801790c:	68b5      	ldr	r5, [r6, #8]
 801790e:	e7df      	b.n	80178d0 <_vfiprintf_r+0x20>
 8017910:	4b79      	ldr	r3, [pc, #484]	; (8017af8 <_vfiprintf_r+0x248>)
 8017912:	429d      	cmp	r5, r3
 8017914:	bf08      	it	eq
 8017916:	68f5      	ldreq	r5, [r6, #12]
 8017918:	e7da      	b.n	80178d0 <_vfiprintf_r+0x20>
 801791a:	89ab      	ldrh	r3, [r5, #12]
 801791c:	0598      	lsls	r0, r3, #22
 801791e:	d4ed      	bmi.n	80178fc <_vfiprintf_r+0x4c>
 8017920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017922:	f7fe fff9 	bl	8016918 <__retarget_lock_release_recursive>
 8017926:	e7e9      	b.n	80178fc <_vfiprintf_r+0x4c>
 8017928:	2300      	movs	r3, #0
 801792a:	9309      	str	r3, [sp, #36]	; 0x24
 801792c:	2320      	movs	r3, #32
 801792e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017932:	f8cd 800c 	str.w	r8, [sp, #12]
 8017936:	2330      	movs	r3, #48	; 0x30
 8017938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017afc <_vfiprintf_r+0x24c>
 801793c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017940:	f04f 0901 	mov.w	r9, #1
 8017944:	4623      	mov	r3, r4
 8017946:	469a      	mov	sl, r3
 8017948:	f813 2b01 	ldrb.w	r2, [r3], #1
 801794c:	b10a      	cbz	r2, 8017952 <_vfiprintf_r+0xa2>
 801794e:	2a25      	cmp	r2, #37	; 0x25
 8017950:	d1f9      	bne.n	8017946 <_vfiprintf_r+0x96>
 8017952:	ebba 0b04 	subs.w	fp, sl, r4
 8017956:	d00b      	beq.n	8017970 <_vfiprintf_r+0xc0>
 8017958:	465b      	mov	r3, fp
 801795a:	4622      	mov	r2, r4
 801795c:	4629      	mov	r1, r5
 801795e:	4630      	mov	r0, r6
 8017960:	f7ff ff93 	bl	801788a <__sfputs_r>
 8017964:	3001      	adds	r0, #1
 8017966:	f000 80aa 	beq.w	8017abe <_vfiprintf_r+0x20e>
 801796a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801796c:	445a      	add	r2, fp
 801796e:	9209      	str	r2, [sp, #36]	; 0x24
 8017970:	f89a 3000 	ldrb.w	r3, [sl]
 8017974:	2b00      	cmp	r3, #0
 8017976:	f000 80a2 	beq.w	8017abe <_vfiprintf_r+0x20e>
 801797a:	2300      	movs	r3, #0
 801797c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017984:	f10a 0a01 	add.w	sl, sl, #1
 8017988:	9304      	str	r3, [sp, #16]
 801798a:	9307      	str	r3, [sp, #28]
 801798c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017990:	931a      	str	r3, [sp, #104]	; 0x68
 8017992:	4654      	mov	r4, sl
 8017994:	2205      	movs	r2, #5
 8017996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801799a:	4858      	ldr	r0, [pc, #352]	; (8017afc <_vfiprintf_r+0x24c>)
 801799c:	f7e8 fc30 	bl	8000200 <memchr>
 80179a0:	9a04      	ldr	r2, [sp, #16]
 80179a2:	b9d8      	cbnz	r0, 80179dc <_vfiprintf_r+0x12c>
 80179a4:	06d1      	lsls	r1, r2, #27
 80179a6:	bf44      	itt	mi
 80179a8:	2320      	movmi	r3, #32
 80179aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179ae:	0713      	lsls	r3, r2, #28
 80179b0:	bf44      	itt	mi
 80179b2:	232b      	movmi	r3, #43	; 0x2b
 80179b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179b8:	f89a 3000 	ldrb.w	r3, [sl]
 80179bc:	2b2a      	cmp	r3, #42	; 0x2a
 80179be:	d015      	beq.n	80179ec <_vfiprintf_r+0x13c>
 80179c0:	9a07      	ldr	r2, [sp, #28]
 80179c2:	4654      	mov	r4, sl
 80179c4:	2000      	movs	r0, #0
 80179c6:	f04f 0c0a 	mov.w	ip, #10
 80179ca:	4621      	mov	r1, r4
 80179cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179d0:	3b30      	subs	r3, #48	; 0x30
 80179d2:	2b09      	cmp	r3, #9
 80179d4:	d94e      	bls.n	8017a74 <_vfiprintf_r+0x1c4>
 80179d6:	b1b0      	cbz	r0, 8017a06 <_vfiprintf_r+0x156>
 80179d8:	9207      	str	r2, [sp, #28]
 80179da:	e014      	b.n	8017a06 <_vfiprintf_r+0x156>
 80179dc:	eba0 0308 	sub.w	r3, r0, r8
 80179e0:	fa09 f303 	lsl.w	r3, r9, r3
 80179e4:	4313      	orrs	r3, r2
 80179e6:	9304      	str	r3, [sp, #16]
 80179e8:	46a2      	mov	sl, r4
 80179ea:	e7d2      	b.n	8017992 <_vfiprintf_r+0xe2>
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	1d19      	adds	r1, r3, #4
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	9103      	str	r1, [sp, #12]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	bfbb      	ittet	lt
 80179f8:	425b      	neglt	r3, r3
 80179fa:	f042 0202 	orrlt.w	r2, r2, #2
 80179fe:	9307      	strge	r3, [sp, #28]
 8017a00:	9307      	strlt	r3, [sp, #28]
 8017a02:	bfb8      	it	lt
 8017a04:	9204      	strlt	r2, [sp, #16]
 8017a06:	7823      	ldrb	r3, [r4, #0]
 8017a08:	2b2e      	cmp	r3, #46	; 0x2e
 8017a0a:	d10c      	bne.n	8017a26 <_vfiprintf_r+0x176>
 8017a0c:	7863      	ldrb	r3, [r4, #1]
 8017a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8017a10:	d135      	bne.n	8017a7e <_vfiprintf_r+0x1ce>
 8017a12:	9b03      	ldr	r3, [sp, #12]
 8017a14:	1d1a      	adds	r2, r3, #4
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	9203      	str	r2, [sp, #12]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	bfb8      	it	lt
 8017a1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017a22:	3402      	adds	r4, #2
 8017a24:	9305      	str	r3, [sp, #20]
 8017a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b0c <_vfiprintf_r+0x25c>
 8017a2a:	7821      	ldrb	r1, [r4, #0]
 8017a2c:	2203      	movs	r2, #3
 8017a2e:	4650      	mov	r0, sl
 8017a30:	f7e8 fbe6 	bl	8000200 <memchr>
 8017a34:	b140      	cbz	r0, 8017a48 <_vfiprintf_r+0x198>
 8017a36:	2340      	movs	r3, #64	; 0x40
 8017a38:	eba0 000a 	sub.w	r0, r0, sl
 8017a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8017a40:	9b04      	ldr	r3, [sp, #16]
 8017a42:	4303      	orrs	r3, r0
 8017a44:	3401      	adds	r4, #1
 8017a46:	9304      	str	r3, [sp, #16]
 8017a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a4c:	482c      	ldr	r0, [pc, #176]	; (8017b00 <_vfiprintf_r+0x250>)
 8017a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a52:	2206      	movs	r2, #6
 8017a54:	f7e8 fbd4 	bl	8000200 <memchr>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	d03f      	beq.n	8017adc <_vfiprintf_r+0x22c>
 8017a5c:	4b29      	ldr	r3, [pc, #164]	; (8017b04 <_vfiprintf_r+0x254>)
 8017a5e:	bb1b      	cbnz	r3, 8017aa8 <_vfiprintf_r+0x1f8>
 8017a60:	9b03      	ldr	r3, [sp, #12]
 8017a62:	3307      	adds	r3, #7
 8017a64:	f023 0307 	bic.w	r3, r3, #7
 8017a68:	3308      	adds	r3, #8
 8017a6a:	9303      	str	r3, [sp, #12]
 8017a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a6e:	443b      	add	r3, r7
 8017a70:	9309      	str	r3, [sp, #36]	; 0x24
 8017a72:	e767      	b.n	8017944 <_vfiprintf_r+0x94>
 8017a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a78:	460c      	mov	r4, r1
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	e7a5      	b.n	80179ca <_vfiprintf_r+0x11a>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	3401      	adds	r4, #1
 8017a82:	9305      	str	r3, [sp, #20]
 8017a84:	4619      	mov	r1, r3
 8017a86:	f04f 0c0a 	mov.w	ip, #10
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a90:	3a30      	subs	r2, #48	; 0x30
 8017a92:	2a09      	cmp	r2, #9
 8017a94:	d903      	bls.n	8017a9e <_vfiprintf_r+0x1ee>
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d0c5      	beq.n	8017a26 <_vfiprintf_r+0x176>
 8017a9a:	9105      	str	r1, [sp, #20]
 8017a9c:	e7c3      	b.n	8017a26 <_vfiprintf_r+0x176>
 8017a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	e7f0      	b.n	8017a8a <_vfiprintf_r+0x1da>
 8017aa8:	ab03      	add	r3, sp, #12
 8017aaa:	9300      	str	r3, [sp, #0]
 8017aac:	462a      	mov	r2, r5
 8017aae:	4b16      	ldr	r3, [pc, #88]	; (8017b08 <_vfiprintf_r+0x258>)
 8017ab0:	a904      	add	r1, sp, #16
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	f3af 8000 	nop.w
 8017ab8:	4607      	mov	r7, r0
 8017aba:	1c78      	adds	r0, r7, #1
 8017abc:	d1d6      	bne.n	8017a6c <_vfiprintf_r+0x1bc>
 8017abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ac0:	07d9      	lsls	r1, r3, #31
 8017ac2:	d405      	bmi.n	8017ad0 <_vfiprintf_r+0x220>
 8017ac4:	89ab      	ldrh	r3, [r5, #12]
 8017ac6:	059a      	lsls	r2, r3, #22
 8017ac8:	d402      	bmi.n	8017ad0 <_vfiprintf_r+0x220>
 8017aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017acc:	f7fe ff24 	bl	8016918 <__retarget_lock_release_recursive>
 8017ad0:	89ab      	ldrh	r3, [r5, #12]
 8017ad2:	065b      	lsls	r3, r3, #25
 8017ad4:	f53f af12 	bmi.w	80178fc <_vfiprintf_r+0x4c>
 8017ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ada:	e711      	b.n	8017900 <_vfiprintf_r+0x50>
 8017adc:	ab03      	add	r3, sp, #12
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	462a      	mov	r2, r5
 8017ae2:	4b09      	ldr	r3, [pc, #36]	; (8017b08 <_vfiprintf_r+0x258>)
 8017ae4:	a904      	add	r1, sp, #16
 8017ae6:	4630      	mov	r0, r6
 8017ae8:	f000 f880 	bl	8017bec <_printf_i>
 8017aec:	e7e4      	b.n	8017ab8 <_vfiprintf_r+0x208>
 8017aee:	bf00      	nop
 8017af0:	08022b40 	.word	0x08022b40
 8017af4:	08022b60 	.word	0x08022b60
 8017af8:	08022b20 	.word	0x08022b20
 8017afc:	08022c36 	.word	0x08022c36
 8017b00:	08022c40 	.word	0x08022c40
 8017b04:	00000000 	.word	0x00000000
 8017b08:	0801788b 	.word	0x0801788b
 8017b0c:	08022c3c 	.word	0x08022c3c

08017b10 <_printf_common>:
 8017b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b14:	4616      	mov	r6, r2
 8017b16:	4699      	mov	r9, r3
 8017b18:	688a      	ldr	r2, [r1, #8]
 8017b1a:	690b      	ldr	r3, [r1, #16]
 8017b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b20:	4293      	cmp	r3, r2
 8017b22:	bfb8      	it	lt
 8017b24:	4613      	movlt	r3, r2
 8017b26:	6033      	str	r3, [r6, #0]
 8017b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b2c:	4607      	mov	r7, r0
 8017b2e:	460c      	mov	r4, r1
 8017b30:	b10a      	cbz	r2, 8017b36 <_printf_common+0x26>
 8017b32:	3301      	adds	r3, #1
 8017b34:	6033      	str	r3, [r6, #0]
 8017b36:	6823      	ldr	r3, [r4, #0]
 8017b38:	0699      	lsls	r1, r3, #26
 8017b3a:	bf42      	ittt	mi
 8017b3c:	6833      	ldrmi	r3, [r6, #0]
 8017b3e:	3302      	addmi	r3, #2
 8017b40:	6033      	strmi	r3, [r6, #0]
 8017b42:	6825      	ldr	r5, [r4, #0]
 8017b44:	f015 0506 	ands.w	r5, r5, #6
 8017b48:	d106      	bne.n	8017b58 <_printf_common+0x48>
 8017b4a:	f104 0a19 	add.w	sl, r4, #25
 8017b4e:	68e3      	ldr	r3, [r4, #12]
 8017b50:	6832      	ldr	r2, [r6, #0]
 8017b52:	1a9b      	subs	r3, r3, r2
 8017b54:	42ab      	cmp	r3, r5
 8017b56:	dc26      	bgt.n	8017ba6 <_printf_common+0x96>
 8017b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b5c:	1e13      	subs	r3, r2, #0
 8017b5e:	6822      	ldr	r2, [r4, #0]
 8017b60:	bf18      	it	ne
 8017b62:	2301      	movne	r3, #1
 8017b64:	0692      	lsls	r2, r2, #26
 8017b66:	d42b      	bmi.n	8017bc0 <_printf_common+0xb0>
 8017b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b6c:	4649      	mov	r1, r9
 8017b6e:	4638      	mov	r0, r7
 8017b70:	47c0      	blx	r8
 8017b72:	3001      	adds	r0, #1
 8017b74:	d01e      	beq.n	8017bb4 <_printf_common+0xa4>
 8017b76:	6823      	ldr	r3, [r4, #0]
 8017b78:	68e5      	ldr	r5, [r4, #12]
 8017b7a:	6832      	ldr	r2, [r6, #0]
 8017b7c:	f003 0306 	and.w	r3, r3, #6
 8017b80:	2b04      	cmp	r3, #4
 8017b82:	bf08      	it	eq
 8017b84:	1aad      	subeq	r5, r5, r2
 8017b86:	68a3      	ldr	r3, [r4, #8]
 8017b88:	6922      	ldr	r2, [r4, #16]
 8017b8a:	bf0c      	ite	eq
 8017b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b90:	2500      	movne	r5, #0
 8017b92:	4293      	cmp	r3, r2
 8017b94:	bfc4      	itt	gt
 8017b96:	1a9b      	subgt	r3, r3, r2
 8017b98:	18ed      	addgt	r5, r5, r3
 8017b9a:	2600      	movs	r6, #0
 8017b9c:	341a      	adds	r4, #26
 8017b9e:	42b5      	cmp	r5, r6
 8017ba0:	d11a      	bne.n	8017bd8 <_printf_common+0xc8>
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	e008      	b.n	8017bb8 <_printf_common+0xa8>
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	4652      	mov	r2, sl
 8017baa:	4649      	mov	r1, r9
 8017bac:	4638      	mov	r0, r7
 8017bae:	47c0      	blx	r8
 8017bb0:	3001      	adds	r0, #1
 8017bb2:	d103      	bne.n	8017bbc <_printf_common+0xac>
 8017bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bbc:	3501      	adds	r5, #1
 8017bbe:	e7c6      	b.n	8017b4e <_printf_common+0x3e>
 8017bc0:	18e1      	adds	r1, r4, r3
 8017bc2:	1c5a      	adds	r2, r3, #1
 8017bc4:	2030      	movs	r0, #48	; 0x30
 8017bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017bca:	4422      	add	r2, r4
 8017bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017bd4:	3302      	adds	r3, #2
 8017bd6:	e7c7      	b.n	8017b68 <_printf_common+0x58>
 8017bd8:	2301      	movs	r3, #1
 8017bda:	4622      	mov	r2, r4
 8017bdc:	4649      	mov	r1, r9
 8017bde:	4638      	mov	r0, r7
 8017be0:	47c0      	blx	r8
 8017be2:	3001      	adds	r0, #1
 8017be4:	d0e6      	beq.n	8017bb4 <_printf_common+0xa4>
 8017be6:	3601      	adds	r6, #1
 8017be8:	e7d9      	b.n	8017b9e <_printf_common+0x8e>
	...

08017bec <_printf_i>:
 8017bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bf0:	460c      	mov	r4, r1
 8017bf2:	4691      	mov	r9, r2
 8017bf4:	7e27      	ldrb	r7, [r4, #24]
 8017bf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017bf8:	2f78      	cmp	r7, #120	; 0x78
 8017bfa:	4680      	mov	r8, r0
 8017bfc:	469a      	mov	sl, r3
 8017bfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c02:	d807      	bhi.n	8017c14 <_printf_i+0x28>
 8017c04:	2f62      	cmp	r7, #98	; 0x62
 8017c06:	d80a      	bhi.n	8017c1e <_printf_i+0x32>
 8017c08:	2f00      	cmp	r7, #0
 8017c0a:	f000 80d8 	beq.w	8017dbe <_printf_i+0x1d2>
 8017c0e:	2f58      	cmp	r7, #88	; 0x58
 8017c10:	f000 80a3 	beq.w	8017d5a <_printf_i+0x16e>
 8017c14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c1c:	e03a      	b.n	8017c94 <_printf_i+0xa8>
 8017c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c22:	2b15      	cmp	r3, #21
 8017c24:	d8f6      	bhi.n	8017c14 <_printf_i+0x28>
 8017c26:	a001      	add	r0, pc, #4	; (adr r0, 8017c2c <_printf_i+0x40>)
 8017c28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017c2c:	08017c85 	.word	0x08017c85
 8017c30:	08017c99 	.word	0x08017c99
 8017c34:	08017c15 	.word	0x08017c15
 8017c38:	08017c15 	.word	0x08017c15
 8017c3c:	08017c15 	.word	0x08017c15
 8017c40:	08017c15 	.word	0x08017c15
 8017c44:	08017c99 	.word	0x08017c99
 8017c48:	08017c15 	.word	0x08017c15
 8017c4c:	08017c15 	.word	0x08017c15
 8017c50:	08017c15 	.word	0x08017c15
 8017c54:	08017c15 	.word	0x08017c15
 8017c58:	08017da5 	.word	0x08017da5
 8017c5c:	08017cc9 	.word	0x08017cc9
 8017c60:	08017d87 	.word	0x08017d87
 8017c64:	08017c15 	.word	0x08017c15
 8017c68:	08017c15 	.word	0x08017c15
 8017c6c:	08017dc7 	.word	0x08017dc7
 8017c70:	08017c15 	.word	0x08017c15
 8017c74:	08017cc9 	.word	0x08017cc9
 8017c78:	08017c15 	.word	0x08017c15
 8017c7c:	08017c15 	.word	0x08017c15
 8017c80:	08017d8f 	.word	0x08017d8f
 8017c84:	680b      	ldr	r3, [r1, #0]
 8017c86:	1d1a      	adds	r2, r3, #4
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	600a      	str	r2, [r1, #0]
 8017c8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c94:	2301      	movs	r3, #1
 8017c96:	e0a3      	b.n	8017de0 <_printf_i+0x1f4>
 8017c98:	6825      	ldr	r5, [r4, #0]
 8017c9a:	6808      	ldr	r0, [r1, #0]
 8017c9c:	062e      	lsls	r6, r5, #24
 8017c9e:	f100 0304 	add.w	r3, r0, #4
 8017ca2:	d50a      	bpl.n	8017cba <_printf_i+0xce>
 8017ca4:	6805      	ldr	r5, [r0, #0]
 8017ca6:	600b      	str	r3, [r1, #0]
 8017ca8:	2d00      	cmp	r5, #0
 8017caa:	da03      	bge.n	8017cb4 <_printf_i+0xc8>
 8017cac:	232d      	movs	r3, #45	; 0x2d
 8017cae:	426d      	negs	r5, r5
 8017cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cb4:	485e      	ldr	r0, [pc, #376]	; (8017e30 <_printf_i+0x244>)
 8017cb6:	230a      	movs	r3, #10
 8017cb8:	e019      	b.n	8017cee <_printf_i+0x102>
 8017cba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017cbe:	6805      	ldr	r5, [r0, #0]
 8017cc0:	600b      	str	r3, [r1, #0]
 8017cc2:	bf18      	it	ne
 8017cc4:	b22d      	sxthne	r5, r5
 8017cc6:	e7ef      	b.n	8017ca8 <_printf_i+0xbc>
 8017cc8:	680b      	ldr	r3, [r1, #0]
 8017cca:	6825      	ldr	r5, [r4, #0]
 8017ccc:	1d18      	adds	r0, r3, #4
 8017cce:	6008      	str	r0, [r1, #0]
 8017cd0:	0628      	lsls	r0, r5, #24
 8017cd2:	d501      	bpl.n	8017cd8 <_printf_i+0xec>
 8017cd4:	681d      	ldr	r5, [r3, #0]
 8017cd6:	e002      	b.n	8017cde <_printf_i+0xf2>
 8017cd8:	0669      	lsls	r1, r5, #25
 8017cda:	d5fb      	bpl.n	8017cd4 <_printf_i+0xe8>
 8017cdc:	881d      	ldrh	r5, [r3, #0]
 8017cde:	4854      	ldr	r0, [pc, #336]	; (8017e30 <_printf_i+0x244>)
 8017ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8017ce2:	bf0c      	ite	eq
 8017ce4:	2308      	moveq	r3, #8
 8017ce6:	230a      	movne	r3, #10
 8017ce8:	2100      	movs	r1, #0
 8017cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017cee:	6866      	ldr	r6, [r4, #4]
 8017cf0:	60a6      	str	r6, [r4, #8]
 8017cf2:	2e00      	cmp	r6, #0
 8017cf4:	bfa2      	ittt	ge
 8017cf6:	6821      	ldrge	r1, [r4, #0]
 8017cf8:	f021 0104 	bicge.w	r1, r1, #4
 8017cfc:	6021      	strge	r1, [r4, #0]
 8017cfe:	b90d      	cbnz	r5, 8017d04 <_printf_i+0x118>
 8017d00:	2e00      	cmp	r6, #0
 8017d02:	d04d      	beq.n	8017da0 <_printf_i+0x1b4>
 8017d04:	4616      	mov	r6, r2
 8017d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8017d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8017d0e:	5dc7      	ldrb	r7, [r0, r7]
 8017d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017d14:	462f      	mov	r7, r5
 8017d16:	42bb      	cmp	r3, r7
 8017d18:	460d      	mov	r5, r1
 8017d1a:	d9f4      	bls.n	8017d06 <_printf_i+0x11a>
 8017d1c:	2b08      	cmp	r3, #8
 8017d1e:	d10b      	bne.n	8017d38 <_printf_i+0x14c>
 8017d20:	6823      	ldr	r3, [r4, #0]
 8017d22:	07df      	lsls	r7, r3, #31
 8017d24:	d508      	bpl.n	8017d38 <_printf_i+0x14c>
 8017d26:	6923      	ldr	r3, [r4, #16]
 8017d28:	6861      	ldr	r1, [r4, #4]
 8017d2a:	4299      	cmp	r1, r3
 8017d2c:	bfde      	ittt	le
 8017d2e:	2330      	movle	r3, #48	; 0x30
 8017d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d34:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017d38:	1b92      	subs	r2, r2, r6
 8017d3a:	6122      	str	r2, [r4, #16]
 8017d3c:	f8cd a000 	str.w	sl, [sp]
 8017d40:	464b      	mov	r3, r9
 8017d42:	aa03      	add	r2, sp, #12
 8017d44:	4621      	mov	r1, r4
 8017d46:	4640      	mov	r0, r8
 8017d48:	f7ff fee2 	bl	8017b10 <_printf_common>
 8017d4c:	3001      	adds	r0, #1
 8017d4e:	d14c      	bne.n	8017dea <_printf_i+0x1fe>
 8017d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d54:	b004      	add	sp, #16
 8017d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d5a:	4835      	ldr	r0, [pc, #212]	; (8017e30 <_printf_i+0x244>)
 8017d5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	680e      	ldr	r6, [r1, #0]
 8017d64:	061f      	lsls	r7, r3, #24
 8017d66:	f856 5b04 	ldr.w	r5, [r6], #4
 8017d6a:	600e      	str	r6, [r1, #0]
 8017d6c:	d514      	bpl.n	8017d98 <_printf_i+0x1ac>
 8017d6e:	07d9      	lsls	r1, r3, #31
 8017d70:	bf44      	itt	mi
 8017d72:	f043 0320 	orrmi.w	r3, r3, #32
 8017d76:	6023      	strmi	r3, [r4, #0]
 8017d78:	b91d      	cbnz	r5, 8017d82 <_printf_i+0x196>
 8017d7a:	6823      	ldr	r3, [r4, #0]
 8017d7c:	f023 0320 	bic.w	r3, r3, #32
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	2310      	movs	r3, #16
 8017d84:	e7b0      	b.n	8017ce8 <_printf_i+0xfc>
 8017d86:	6823      	ldr	r3, [r4, #0]
 8017d88:	f043 0320 	orr.w	r3, r3, #32
 8017d8c:	6023      	str	r3, [r4, #0]
 8017d8e:	2378      	movs	r3, #120	; 0x78
 8017d90:	4828      	ldr	r0, [pc, #160]	; (8017e34 <_printf_i+0x248>)
 8017d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d96:	e7e3      	b.n	8017d60 <_printf_i+0x174>
 8017d98:	065e      	lsls	r6, r3, #25
 8017d9a:	bf48      	it	mi
 8017d9c:	b2ad      	uxthmi	r5, r5
 8017d9e:	e7e6      	b.n	8017d6e <_printf_i+0x182>
 8017da0:	4616      	mov	r6, r2
 8017da2:	e7bb      	b.n	8017d1c <_printf_i+0x130>
 8017da4:	680b      	ldr	r3, [r1, #0]
 8017da6:	6826      	ldr	r6, [r4, #0]
 8017da8:	6960      	ldr	r0, [r4, #20]
 8017daa:	1d1d      	adds	r5, r3, #4
 8017dac:	600d      	str	r5, [r1, #0]
 8017dae:	0635      	lsls	r5, r6, #24
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	d501      	bpl.n	8017db8 <_printf_i+0x1cc>
 8017db4:	6018      	str	r0, [r3, #0]
 8017db6:	e002      	b.n	8017dbe <_printf_i+0x1d2>
 8017db8:	0671      	lsls	r1, r6, #25
 8017dba:	d5fb      	bpl.n	8017db4 <_printf_i+0x1c8>
 8017dbc:	8018      	strh	r0, [r3, #0]
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	6123      	str	r3, [r4, #16]
 8017dc2:	4616      	mov	r6, r2
 8017dc4:	e7ba      	b.n	8017d3c <_printf_i+0x150>
 8017dc6:	680b      	ldr	r3, [r1, #0]
 8017dc8:	1d1a      	adds	r2, r3, #4
 8017dca:	600a      	str	r2, [r1, #0]
 8017dcc:	681e      	ldr	r6, [r3, #0]
 8017dce:	6862      	ldr	r2, [r4, #4]
 8017dd0:	2100      	movs	r1, #0
 8017dd2:	4630      	mov	r0, r6
 8017dd4:	f7e8 fa14 	bl	8000200 <memchr>
 8017dd8:	b108      	cbz	r0, 8017dde <_printf_i+0x1f2>
 8017dda:	1b80      	subs	r0, r0, r6
 8017ddc:	6060      	str	r0, [r4, #4]
 8017dde:	6863      	ldr	r3, [r4, #4]
 8017de0:	6123      	str	r3, [r4, #16]
 8017de2:	2300      	movs	r3, #0
 8017de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017de8:	e7a8      	b.n	8017d3c <_printf_i+0x150>
 8017dea:	6923      	ldr	r3, [r4, #16]
 8017dec:	4632      	mov	r2, r6
 8017dee:	4649      	mov	r1, r9
 8017df0:	4640      	mov	r0, r8
 8017df2:	47d0      	blx	sl
 8017df4:	3001      	adds	r0, #1
 8017df6:	d0ab      	beq.n	8017d50 <_printf_i+0x164>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	079b      	lsls	r3, r3, #30
 8017dfc:	d413      	bmi.n	8017e26 <_printf_i+0x23a>
 8017dfe:	68e0      	ldr	r0, [r4, #12]
 8017e00:	9b03      	ldr	r3, [sp, #12]
 8017e02:	4298      	cmp	r0, r3
 8017e04:	bfb8      	it	lt
 8017e06:	4618      	movlt	r0, r3
 8017e08:	e7a4      	b.n	8017d54 <_printf_i+0x168>
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	4632      	mov	r2, r6
 8017e0e:	4649      	mov	r1, r9
 8017e10:	4640      	mov	r0, r8
 8017e12:	47d0      	blx	sl
 8017e14:	3001      	adds	r0, #1
 8017e16:	d09b      	beq.n	8017d50 <_printf_i+0x164>
 8017e18:	3501      	adds	r5, #1
 8017e1a:	68e3      	ldr	r3, [r4, #12]
 8017e1c:	9903      	ldr	r1, [sp, #12]
 8017e1e:	1a5b      	subs	r3, r3, r1
 8017e20:	42ab      	cmp	r3, r5
 8017e22:	dcf2      	bgt.n	8017e0a <_printf_i+0x21e>
 8017e24:	e7eb      	b.n	8017dfe <_printf_i+0x212>
 8017e26:	2500      	movs	r5, #0
 8017e28:	f104 0619 	add.w	r6, r4, #25
 8017e2c:	e7f5      	b.n	8017e1a <_printf_i+0x22e>
 8017e2e:	bf00      	nop
 8017e30:	08022c47 	.word	0x08022c47
 8017e34:	08022c58 	.word	0x08022c58

08017e38 <_read_r>:
 8017e38:	b538      	push	{r3, r4, r5, lr}
 8017e3a:	4d07      	ldr	r5, [pc, #28]	; (8017e58 <_read_r+0x20>)
 8017e3c:	4604      	mov	r4, r0
 8017e3e:	4608      	mov	r0, r1
 8017e40:	4611      	mov	r1, r2
 8017e42:	2200      	movs	r2, #0
 8017e44:	602a      	str	r2, [r5, #0]
 8017e46:	461a      	mov	r2, r3
 8017e48:	f7ea f8fa 	bl	8002040 <_read>
 8017e4c:	1c43      	adds	r3, r0, #1
 8017e4e:	d102      	bne.n	8017e56 <_read_r+0x1e>
 8017e50:	682b      	ldr	r3, [r5, #0]
 8017e52:	b103      	cbz	r3, 8017e56 <_read_r+0x1e>
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	bd38      	pop	{r3, r4, r5, pc}
 8017e58:	200136cc 	.word	0x200136cc

08017e5c <abort>:
 8017e5c:	b508      	push	{r3, lr}
 8017e5e:	2006      	movs	r0, #6
 8017e60:	f000 f874 	bl	8017f4c <raise>
 8017e64:	2001      	movs	r0, #1
 8017e66:	f7ea f8e1 	bl	800202c <_exit>
	...

08017e6c <_fstat_r>:
 8017e6c:	b538      	push	{r3, r4, r5, lr}
 8017e6e:	4d07      	ldr	r5, [pc, #28]	; (8017e8c <_fstat_r+0x20>)
 8017e70:	2300      	movs	r3, #0
 8017e72:	4604      	mov	r4, r0
 8017e74:	4608      	mov	r0, r1
 8017e76:	4611      	mov	r1, r2
 8017e78:	602b      	str	r3, [r5, #0]
 8017e7a:	f7ea f90a 	bl	8002092 <_fstat>
 8017e7e:	1c43      	adds	r3, r0, #1
 8017e80:	d102      	bne.n	8017e88 <_fstat_r+0x1c>
 8017e82:	682b      	ldr	r3, [r5, #0]
 8017e84:	b103      	cbz	r3, 8017e88 <_fstat_r+0x1c>
 8017e86:	6023      	str	r3, [r4, #0]
 8017e88:	bd38      	pop	{r3, r4, r5, pc}
 8017e8a:	bf00      	nop
 8017e8c:	200136cc 	.word	0x200136cc

08017e90 <_isatty_r>:
 8017e90:	b538      	push	{r3, r4, r5, lr}
 8017e92:	4d06      	ldr	r5, [pc, #24]	; (8017eac <_isatty_r+0x1c>)
 8017e94:	2300      	movs	r3, #0
 8017e96:	4604      	mov	r4, r0
 8017e98:	4608      	mov	r0, r1
 8017e9a:	602b      	str	r3, [r5, #0]
 8017e9c:	f7ea f909 	bl	80020b2 <_isatty>
 8017ea0:	1c43      	adds	r3, r0, #1
 8017ea2:	d102      	bne.n	8017eaa <_isatty_r+0x1a>
 8017ea4:	682b      	ldr	r3, [r5, #0]
 8017ea6:	b103      	cbz	r3, 8017eaa <_isatty_r+0x1a>
 8017ea8:	6023      	str	r3, [r4, #0]
 8017eaa:	bd38      	pop	{r3, r4, r5, pc}
 8017eac:	200136cc 	.word	0x200136cc

08017eb0 <_realloc_r>:
 8017eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb2:	4607      	mov	r7, r0
 8017eb4:	4614      	mov	r4, r2
 8017eb6:	460e      	mov	r6, r1
 8017eb8:	b921      	cbnz	r1, 8017ec4 <_realloc_r+0x14>
 8017eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ebe:	4611      	mov	r1, r2
 8017ec0:	f7fe bd6a 	b.w	8016998 <_malloc_r>
 8017ec4:	b922      	cbnz	r2, 8017ed0 <_realloc_r+0x20>
 8017ec6:	f7ff fb1d 	bl	8017504 <_free_r>
 8017eca:	4625      	mov	r5, r4
 8017ecc:	4628      	mov	r0, r5
 8017ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ed0:	f000 f858 	bl	8017f84 <_malloc_usable_size_r>
 8017ed4:	42a0      	cmp	r0, r4
 8017ed6:	d20f      	bcs.n	8017ef8 <_realloc_r+0x48>
 8017ed8:	4621      	mov	r1, r4
 8017eda:	4638      	mov	r0, r7
 8017edc:	f7fe fd5c 	bl	8016998 <_malloc_r>
 8017ee0:	4605      	mov	r5, r0
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	d0f2      	beq.n	8017ecc <_realloc_r+0x1c>
 8017ee6:	4631      	mov	r1, r6
 8017ee8:	4622      	mov	r2, r4
 8017eea:	f7fe fd24 	bl	8016936 <memcpy>
 8017eee:	4631      	mov	r1, r6
 8017ef0:	4638      	mov	r0, r7
 8017ef2:	f7ff fb07 	bl	8017504 <_free_r>
 8017ef6:	e7e9      	b.n	8017ecc <_realloc_r+0x1c>
 8017ef8:	4635      	mov	r5, r6
 8017efa:	e7e7      	b.n	8017ecc <_realloc_r+0x1c>

08017efc <_raise_r>:
 8017efc:	291f      	cmp	r1, #31
 8017efe:	b538      	push	{r3, r4, r5, lr}
 8017f00:	4604      	mov	r4, r0
 8017f02:	460d      	mov	r5, r1
 8017f04:	d904      	bls.n	8017f10 <_raise_r+0x14>
 8017f06:	2316      	movs	r3, #22
 8017f08:	6003      	str	r3, [r0, #0]
 8017f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f0e:	bd38      	pop	{r3, r4, r5, pc}
 8017f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017f12:	b112      	cbz	r2, 8017f1a <_raise_r+0x1e>
 8017f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f18:	b94b      	cbnz	r3, 8017f2e <_raise_r+0x32>
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f000 f830 	bl	8017f80 <_getpid_r>
 8017f20:	462a      	mov	r2, r5
 8017f22:	4601      	mov	r1, r0
 8017f24:	4620      	mov	r0, r4
 8017f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f2a:	f000 b817 	b.w	8017f5c <_kill_r>
 8017f2e:	2b01      	cmp	r3, #1
 8017f30:	d00a      	beq.n	8017f48 <_raise_r+0x4c>
 8017f32:	1c59      	adds	r1, r3, #1
 8017f34:	d103      	bne.n	8017f3e <_raise_r+0x42>
 8017f36:	2316      	movs	r3, #22
 8017f38:	6003      	str	r3, [r0, #0]
 8017f3a:	2001      	movs	r0, #1
 8017f3c:	e7e7      	b.n	8017f0e <_raise_r+0x12>
 8017f3e:	2400      	movs	r4, #0
 8017f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017f44:	4628      	mov	r0, r5
 8017f46:	4798      	blx	r3
 8017f48:	2000      	movs	r0, #0
 8017f4a:	e7e0      	b.n	8017f0e <_raise_r+0x12>

08017f4c <raise>:
 8017f4c:	4b02      	ldr	r3, [pc, #8]	; (8017f58 <raise+0xc>)
 8017f4e:	4601      	mov	r1, r0
 8017f50:	6818      	ldr	r0, [r3, #0]
 8017f52:	f7ff bfd3 	b.w	8017efc <_raise_r>
 8017f56:	bf00      	nop
 8017f58:	200004b4 	.word	0x200004b4

08017f5c <_kill_r>:
 8017f5c:	b538      	push	{r3, r4, r5, lr}
 8017f5e:	4d07      	ldr	r5, [pc, #28]	; (8017f7c <_kill_r+0x20>)
 8017f60:	2300      	movs	r3, #0
 8017f62:	4604      	mov	r4, r0
 8017f64:	4608      	mov	r0, r1
 8017f66:	4611      	mov	r1, r2
 8017f68:	602b      	str	r3, [r5, #0]
 8017f6a:	f7ea f84d 	bl	8002008 <_kill>
 8017f6e:	1c43      	adds	r3, r0, #1
 8017f70:	d102      	bne.n	8017f78 <_kill_r+0x1c>
 8017f72:	682b      	ldr	r3, [r5, #0]
 8017f74:	b103      	cbz	r3, 8017f78 <_kill_r+0x1c>
 8017f76:	6023      	str	r3, [r4, #0]
 8017f78:	bd38      	pop	{r3, r4, r5, pc}
 8017f7a:	bf00      	nop
 8017f7c:	200136cc 	.word	0x200136cc

08017f80 <_getpid_r>:
 8017f80:	f7ea b83a 	b.w	8001ff8 <_getpid>

08017f84 <_malloc_usable_size_r>:
 8017f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f88:	1f18      	subs	r0, r3, #4
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	bfbc      	itt	lt
 8017f8e:	580b      	ldrlt	r3, [r1, r0]
 8017f90:	18c0      	addlt	r0, r0, r3
 8017f92:	4770      	bx	lr

08017f94 <_init>:
 8017f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f96:	bf00      	nop
 8017f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f9a:	bc08      	pop	{r3}
 8017f9c:	469e      	mov	lr, r3
 8017f9e:	4770      	bx	lr

08017fa0 <_fini>:
 8017fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fa2:	bf00      	nop
 8017fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fa6:	bc08      	pop	{r3}
 8017fa8:	469e      	mov	lr, r3
 8017faa:	4770      	bx	lr
