
MY_FreeRTOS_application_v1.10.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  90008d08  90008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90008e94  90008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90008e9c  90008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90008ea0  90008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  90008ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b34  24000078  90008f1c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004bac  90008f1c  00024bac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022882  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003caa  00000000  00000000  00042928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  000465d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001738  00000000  00000000  00047e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005375  00000000  00000000  000495a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ca89  00000000  00000000  0004e915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001706ff  00000000  00000000  0006b39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001dba9d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e8c  00000000  00000000  001dbaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24000078 	.word	0x24000078
900002bc:	00000000 	.word	0x00000000
900002c0:	90008cf0 	.word	0x90008cf0

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	2400007c 	.word	0x2400007c
900002dc:	90008cf0 	.word	0x90008cf0

900002e0 <__aeabi_uldivmod>:
900002e0:	b953      	cbnz	r3, 900002f8 <__aeabi_uldivmod+0x18>
900002e2:	b94a      	cbnz	r2, 900002f8 <__aeabi_uldivmod+0x18>
900002e4:	2900      	cmp	r1, #0
900002e6:	bf08      	it	eq
900002e8:	2800      	cmpeq	r0, #0
900002ea:	bf1c      	itt	ne
900002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
900002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
900002f4:	f000 b974 	b.w	900005e0 <__aeabi_idiv0>
900002f8:	f1ad 0c08 	sub.w	ip, sp, #8
900002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000300:	f000 f806 	bl	90000310 <__udivmoddi4>
90000304:	f8dd e004 	ldr.w	lr, [sp, #4]
90000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
9000030c:	b004      	add	sp, #16
9000030e:	4770      	bx	lr

90000310 <__udivmoddi4>:
90000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90000314:	9d08      	ldr	r5, [sp, #32]
90000316:	4604      	mov	r4, r0
90000318:	468e      	mov	lr, r1
9000031a:	2b00      	cmp	r3, #0
9000031c:	d14d      	bne.n	900003ba <__udivmoddi4+0xaa>
9000031e:	428a      	cmp	r2, r1
90000320:	4694      	mov	ip, r2
90000322:	d969      	bls.n	900003f8 <__udivmoddi4+0xe8>
90000324:	fab2 f282 	clz	r2, r2
90000328:	b152      	cbz	r2, 90000340 <__udivmoddi4+0x30>
9000032a:	fa01 f302 	lsl.w	r3, r1, r2
9000032e:	f1c2 0120 	rsb	r1, r2, #32
90000332:	fa20 f101 	lsr.w	r1, r0, r1
90000336:	fa0c fc02 	lsl.w	ip, ip, r2
9000033a:	ea41 0e03 	orr.w	lr, r1, r3
9000033e:	4094      	lsls	r4, r2
90000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
90000344:	0c21      	lsrs	r1, r4, #16
90000346:	fbbe f6f8 	udiv	r6, lr, r8
9000034a:	fa1f f78c 	uxth.w	r7, ip
9000034e:	fb08 e316 	mls	r3, r8, r6, lr
90000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
90000356:	fb06 f107 	mul.w	r1, r6, r7
9000035a:	4299      	cmp	r1, r3
9000035c:	d90a      	bls.n	90000374 <__udivmoddi4+0x64>
9000035e:	eb1c 0303 	adds.w	r3, ip, r3
90000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
90000366:	f080 811f 	bcs.w	900005a8 <__udivmoddi4+0x298>
9000036a:	4299      	cmp	r1, r3
9000036c:	f240 811c 	bls.w	900005a8 <__udivmoddi4+0x298>
90000370:	3e02      	subs	r6, #2
90000372:	4463      	add	r3, ip
90000374:	1a5b      	subs	r3, r3, r1
90000376:	b2a4      	uxth	r4, r4
90000378:	fbb3 f0f8 	udiv	r0, r3, r8
9000037c:	fb08 3310 	mls	r3, r8, r0, r3
90000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000384:	fb00 f707 	mul.w	r7, r0, r7
90000388:	42a7      	cmp	r7, r4
9000038a:	d90a      	bls.n	900003a2 <__udivmoddi4+0x92>
9000038c:	eb1c 0404 	adds.w	r4, ip, r4
90000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
90000394:	f080 810a 	bcs.w	900005ac <__udivmoddi4+0x29c>
90000398:	42a7      	cmp	r7, r4
9000039a:	f240 8107 	bls.w	900005ac <__udivmoddi4+0x29c>
9000039e:	4464      	add	r4, ip
900003a0:	3802      	subs	r0, #2
900003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900003a6:	1be4      	subs	r4, r4, r7
900003a8:	2600      	movs	r6, #0
900003aa:	b11d      	cbz	r5, 900003b4 <__udivmoddi4+0xa4>
900003ac:	40d4      	lsrs	r4, r2
900003ae:	2300      	movs	r3, #0
900003b0:	e9c5 4300 	strd	r4, r3, [r5]
900003b4:	4631      	mov	r1, r6
900003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ba:	428b      	cmp	r3, r1
900003bc:	d909      	bls.n	900003d2 <__udivmoddi4+0xc2>
900003be:	2d00      	cmp	r5, #0
900003c0:	f000 80ef 	beq.w	900005a2 <__udivmoddi4+0x292>
900003c4:	2600      	movs	r6, #0
900003c6:	e9c5 0100 	strd	r0, r1, [r5]
900003ca:	4630      	mov	r0, r6
900003cc:	4631      	mov	r1, r6
900003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003d2:	fab3 f683 	clz	r6, r3
900003d6:	2e00      	cmp	r6, #0
900003d8:	d14a      	bne.n	90000470 <__udivmoddi4+0x160>
900003da:	428b      	cmp	r3, r1
900003dc:	d302      	bcc.n	900003e4 <__udivmoddi4+0xd4>
900003de:	4282      	cmp	r2, r0
900003e0:	f200 80f9 	bhi.w	900005d6 <__udivmoddi4+0x2c6>
900003e4:	1a84      	subs	r4, r0, r2
900003e6:	eb61 0303 	sbc.w	r3, r1, r3
900003ea:	2001      	movs	r0, #1
900003ec:	469e      	mov	lr, r3
900003ee:	2d00      	cmp	r5, #0
900003f0:	d0e0      	beq.n	900003b4 <__udivmoddi4+0xa4>
900003f2:	e9c5 4e00 	strd	r4, lr, [r5]
900003f6:	e7dd      	b.n	900003b4 <__udivmoddi4+0xa4>
900003f8:	b902      	cbnz	r2, 900003fc <__udivmoddi4+0xec>
900003fa:	deff      	udf	#255	; 0xff
900003fc:	fab2 f282 	clz	r2, r2
90000400:	2a00      	cmp	r2, #0
90000402:	f040 8092 	bne.w	9000052a <__udivmoddi4+0x21a>
90000406:	eba1 010c 	sub.w	r1, r1, ip
9000040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
9000040e:	fa1f fe8c 	uxth.w	lr, ip
90000412:	2601      	movs	r6, #1
90000414:	0c20      	lsrs	r0, r4, #16
90000416:	fbb1 f3f7 	udiv	r3, r1, r7
9000041a:	fb07 1113 	mls	r1, r7, r3, r1
9000041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000422:	fb0e f003 	mul.w	r0, lr, r3
90000426:	4288      	cmp	r0, r1
90000428:	d908      	bls.n	9000043c <__udivmoddi4+0x12c>
9000042a:	eb1c 0101 	adds.w	r1, ip, r1
9000042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
90000432:	d202      	bcs.n	9000043a <__udivmoddi4+0x12a>
90000434:	4288      	cmp	r0, r1
90000436:	f200 80cb 	bhi.w	900005d0 <__udivmoddi4+0x2c0>
9000043a:	4643      	mov	r3, r8
9000043c:	1a09      	subs	r1, r1, r0
9000043e:	b2a4      	uxth	r4, r4
90000440:	fbb1 f0f7 	udiv	r0, r1, r7
90000444:	fb07 1110 	mls	r1, r7, r0, r1
90000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
9000044c:	fb0e fe00 	mul.w	lr, lr, r0
90000450:	45a6      	cmp	lr, r4
90000452:	d908      	bls.n	90000466 <__udivmoddi4+0x156>
90000454:	eb1c 0404 	adds.w	r4, ip, r4
90000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
9000045c:	d202      	bcs.n	90000464 <__udivmoddi4+0x154>
9000045e:	45a6      	cmp	lr, r4
90000460:	f200 80bb 	bhi.w	900005da <__udivmoddi4+0x2ca>
90000464:	4608      	mov	r0, r1
90000466:	eba4 040e 	sub.w	r4, r4, lr
9000046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
9000046e:	e79c      	b.n	900003aa <__udivmoddi4+0x9a>
90000470:	f1c6 0720 	rsb	r7, r6, #32
90000474:	40b3      	lsls	r3, r6
90000476:	fa22 fc07 	lsr.w	ip, r2, r7
9000047a:	ea4c 0c03 	orr.w	ip, ip, r3
9000047e:	fa20 f407 	lsr.w	r4, r0, r7
90000482:	fa01 f306 	lsl.w	r3, r1, r6
90000486:	431c      	orrs	r4, r3
90000488:	40f9      	lsrs	r1, r7
9000048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
9000048e:	fa00 f306 	lsl.w	r3, r0, r6
90000492:	fbb1 f8f9 	udiv	r8, r1, r9
90000496:	0c20      	lsrs	r0, r4, #16
90000498:	fa1f fe8c 	uxth.w	lr, ip
9000049c:	fb09 1118 	mls	r1, r9, r8, r1
900004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900004a4:	fb08 f00e 	mul.w	r0, r8, lr
900004a8:	4288      	cmp	r0, r1
900004aa:	fa02 f206 	lsl.w	r2, r2, r6
900004ae:	d90b      	bls.n	900004c8 <__udivmoddi4+0x1b8>
900004b0:	eb1c 0101 	adds.w	r1, ip, r1
900004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
900004b8:	f080 8088 	bcs.w	900005cc <__udivmoddi4+0x2bc>
900004bc:	4288      	cmp	r0, r1
900004be:	f240 8085 	bls.w	900005cc <__udivmoddi4+0x2bc>
900004c2:	f1a8 0802 	sub.w	r8, r8, #2
900004c6:	4461      	add	r1, ip
900004c8:	1a09      	subs	r1, r1, r0
900004ca:	b2a4      	uxth	r4, r4
900004cc:	fbb1 f0f9 	udiv	r0, r1, r9
900004d0:	fb09 1110 	mls	r1, r9, r0, r1
900004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
900004d8:	fb00 fe0e 	mul.w	lr, r0, lr
900004dc:	458e      	cmp	lr, r1
900004de:	d908      	bls.n	900004f2 <__udivmoddi4+0x1e2>
900004e0:	eb1c 0101 	adds.w	r1, ip, r1
900004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
900004e8:	d26c      	bcs.n	900005c4 <__udivmoddi4+0x2b4>
900004ea:	458e      	cmp	lr, r1
900004ec:	d96a      	bls.n	900005c4 <__udivmoddi4+0x2b4>
900004ee:	3802      	subs	r0, #2
900004f0:	4461      	add	r1, ip
900004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900004f6:	fba0 9402 	umull	r9, r4, r0, r2
900004fa:	eba1 010e 	sub.w	r1, r1, lr
900004fe:	42a1      	cmp	r1, r4
90000500:	46c8      	mov	r8, r9
90000502:	46a6      	mov	lr, r4
90000504:	d356      	bcc.n	900005b4 <__udivmoddi4+0x2a4>
90000506:	d053      	beq.n	900005b0 <__udivmoddi4+0x2a0>
90000508:	b15d      	cbz	r5, 90000522 <__udivmoddi4+0x212>
9000050a:	ebb3 0208 	subs.w	r2, r3, r8
9000050e:	eb61 010e 	sbc.w	r1, r1, lr
90000512:	fa01 f707 	lsl.w	r7, r1, r7
90000516:	fa22 f306 	lsr.w	r3, r2, r6
9000051a:	40f1      	lsrs	r1, r6
9000051c:	431f      	orrs	r7, r3
9000051e:	e9c5 7100 	strd	r7, r1, [r5]
90000522:	2600      	movs	r6, #0
90000524:	4631      	mov	r1, r6
90000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000052a:	f1c2 0320 	rsb	r3, r2, #32
9000052e:	40d8      	lsrs	r0, r3
90000530:	fa0c fc02 	lsl.w	ip, ip, r2
90000534:	fa21 f303 	lsr.w	r3, r1, r3
90000538:	4091      	lsls	r1, r2
9000053a:	4301      	orrs	r1, r0
9000053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000540:	fa1f fe8c 	uxth.w	lr, ip
90000544:	fbb3 f0f7 	udiv	r0, r3, r7
90000548:	fb07 3610 	mls	r6, r7, r0, r3
9000054c:	0c0b      	lsrs	r3, r1, #16
9000054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90000552:	fb00 f60e 	mul.w	r6, r0, lr
90000556:	429e      	cmp	r6, r3
90000558:	fa04 f402 	lsl.w	r4, r4, r2
9000055c:	d908      	bls.n	90000570 <__udivmoddi4+0x260>
9000055e:	eb1c 0303 	adds.w	r3, ip, r3
90000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
90000566:	d22f      	bcs.n	900005c8 <__udivmoddi4+0x2b8>
90000568:	429e      	cmp	r6, r3
9000056a:	d92d      	bls.n	900005c8 <__udivmoddi4+0x2b8>
9000056c:	3802      	subs	r0, #2
9000056e:	4463      	add	r3, ip
90000570:	1b9b      	subs	r3, r3, r6
90000572:	b289      	uxth	r1, r1
90000574:	fbb3 f6f7 	udiv	r6, r3, r7
90000578:	fb07 3316 	mls	r3, r7, r6, r3
9000057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000580:	fb06 f30e 	mul.w	r3, r6, lr
90000584:	428b      	cmp	r3, r1
90000586:	d908      	bls.n	9000059a <__udivmoddi4+0x28a>
90000588:	eb1c 0101 	adds.w	r1, ip, r1
9000058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
90000590:	d216      	bcs.n	900005c0 <__udivmoddi4+0x2b0>
90000592:	428b      	cmp	r3, r1
90000594:	d914      	bls.n	900005c0 <__udivmoddi4+0x2b0>
90000596:	3e02      	subs	r6, #2
90000598:	4461      	add	r1, ip
9000059a:	1ac9      	subs	r1, r1, r3
9000059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
900005a0:	e738      	b.n	90000414 <__udivmoddi4+0x104>
900005a2:	462e      	mov	r6, r5
900005a4:	4628      	mov	r0, r5
900005a6:	e705      	b.n	900003b4 <__udivmoddi4+0xa4>
900005a8:	4606      	mov	r6, r0
900005aa:	e6e3      	b.n	90000374 <__udivmoddi4+0x64>
900005ac:	4618      	mov	r0, r3
900005ae:	e6f8      	b.n	900003a2 <__udivmoddi4+0x92>
900005b0:	454b      	cmp	r3, r9
900005b2:	d2a9      	bcs.n	90000508 <__udivmoddi4+0x1f8>
900005b4:	ebb9 0802 	subs.w	r8, r9, r2
900005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
900005bc:	3801      	subs	r0, #1
900005be:	e7a3      	b.n	90000508 <__udivmoddi4+0x1f8>
900005c0:	4646      	mov	r6, r8
900005c2:	e7ea      	b.n	9000059a <__udivmoddi4+0x28a>
900005c4:	4620      	mov	r0, r4
900005c6:	e794      	b.n	900004f2 <__udivmoddi4+0x1e2>
900005c8:	4640      	mov	r0, r8
900005ca:	e7d1      	b.n	90000570 <__udivmoddi4+0x260>
900005cc:	46d0      	mov	r8, sl
900005ce:	e77b      	b.n	900004c8 <__udivmoddi4+0x1b8>
900005d0:	3b02      	subs	r3, #2
900005d2:	4461      	add	r1, ip
900005d4:	e732      	b.n	9000043c <__udivmoddi4+0x12c>
900005d6:	4630      	mov	r0, r6
900005d8:	e709      	b.n	900003ee <__udivmoddi4+0xde>
900005da:	4464      	add	r4, ip
900005dc:	3802      	subs	r0, #2
900005de:	e742      	b.n	90000466 <__udivmoddi4+0x156>

900005e0 <__aeabi_idiv0>:
900005e0:	4770      	bx	lr
900005e2:	bf00      	nop

900005e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
900005e4:	b480      	push	{r7}
900005e6:	b083      	sub	sp, #12
900005e8:	af00      	add	r7, sp, #0
900005ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
900005ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900005f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
900005f4:	f003 0301 	and.w	r3, r3, #1
900005f8:	2b00      	cmp	r3, #0
900005fa:	d013      	beq.n	90000624 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
900005fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
90000600:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
90000604:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
90000608:	2b00      	cmp	r3, #0
9000060a:	d00b      	beq.n	90000624 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
9000060c:	e000      	b.n	90000610 <ITM_SendChar+0x2c>
    {
      __NOP();
9000060e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
90000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
90000614:	681b      	ldr	r3, [r3, #0]
90000616:	2b00      	cmp	r3, #0
90000618:	d0f9      	beq.n	9000060e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
9000061a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
9000061e:	687a      	ldr	r2, [r7, #4]
90000620:	b2d2      	uxtb	r2, r2
90000622:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
90000624:	687b      	ldr	r3, [r7, #4]
}
90000626:	4618      	mov	r0, r3
90000628:	370c      	adds	r7, #12
9000062a:	46bd      	mov	sp, r7
9000062c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000630:	4770      	bx	lr
	...

90000634 <_write>:
void StartDefaultTask(void *argument);
void Start_LED_ON_Task(void *argument);
void Start_LED_OFF_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
90000634:	b580      	push	{r7, lr}
90000636:	b086      	sub	sp, #24
90000638:	af00      	add	r7, sp, #0
9000063a:	60f8      	str	r0, [r7, #12]
9000063c:	60b9      	str	r1, [r7, #8]
9000063e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
90000640:	687b      	ldr	r3, [r7, #4]
90000642:	b29a      	uxth	r2, r3
90000644:	2332      	movs	r3, #50	; 0x32
90000646:	68b9      	ldr	r1, [r7, #8]
90000648:	480c      	ldr	r0, [pc, #48]	; (9000067c <_write+0x48>)
9000064a:	f003 ff2f 	bl	900044ac <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
9000064e:	2300      	movs	r3, #0
90000650:	617b      	str	r3, [r7, #20]
90000652:	e009      	b.n	90000668 <_write+0x34>
		ITM_SendChar(*ptr++);
90000654:	68bb      	ldr	r3, [r7, #8]
90000656:	1c5a      	adds	r2, r3, #1
90000658:	60ba      	str	r2, [r7, #8]
9000065a:	781b      	ldrb	r3, [r3, #0]
9000065c:	4618      	mov	r0, r3
9000065e:	f7ff ffc1 	bl	900005e4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
90000662:	697b      	ldr	r3, [r7, #20]
90000664:	3301      	adds	r3, #1
90000666:	617b      	str	r3, [r7, #20]
90000668:	697a      	ldr	r2, [r7, #20]
9000066a:	687b      	ldr	r3, [r7, #4]
9000066c:	429a      	cmp	r2, r3
9000066e:	dbf1      	blt.n	90000654 <_write+0x20>
	}
	return len;
90000670:	687b      	ldr	r3, [r7, #4]
}
90000672:	4618      	mov	r0, r3
90000674:	3718      	adds	r7, #24
90000676:	46bd      	mov	sp, r7
90000678:	bd80      	pop	{r7, pc}
9000067a:	bf00      	nop
9000067c:	2400009c 	.word	0x2400009c

90000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000680:	b580      	push	{r7, lr}
90000682:	b084      	sub	sp, #16
90000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
90000686:	f000 fa2b 	bl	90000ae0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
9000068a:	4b48      	ldr	r3, [pc, #288]	; (900007ac <main+0x12c>)
9000068c:	695b      	ldr	r3, [r3, #20]
9000068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90000692:	2b00      	cmp	r3, #0
90000694:	d11b      	bne.n	900006ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000696:	f3bf 8f4f 	dsb	sy
}
9000069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000069c:	f3bf 8f6f 	isb	sy
}
900006a0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900006a2:	4b42      	ldr	r3, [pc, #264]	; (900007ac <main+0x12c>)
900006a4:	2200      	movs	r2, #0
900006a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900006aa:	f3bf 8f4f 	dsb	sy
}
900006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006b0:	f3bf 8f6f 	isb	sy
}
900006b4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900006b6:	4b3d      	ldr	r3, [pc, #244]	; (900007ac <main+0x12c>)
900006b8:	695b      	ldr	r3, [r3, #20]
900006ba:	4a3c      	ldr	r2, [pc, #240]	; (900007ac <main+0x12c>)
900006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900006c2:	f3bf 8f4f 	dsb	sy
}
900006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900006c8:	f3bf 8f6f 	isb	sy
}
900006cc:	e000      	b.n	900006d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900006ce:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900006d0:	4b36      	ldr	r3, [pc, #216]	; (900007ac <main+0x12c>)
900006d2:	695b      	ldr	r3, [r3, #20]
900006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900006d8:	2b00      	cmp	r3, #0
900006da:	d138      	bne.n	9000074e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900006dc:	4b33      	ldr	r3, [pc, #204]	; (900007ac <main+0x12c>)
900006de:	2200      	movs	r2, #0
900006e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900006e4:	f3bf 8f4f 	dsb	sy
}
900006e8:	bf00      	nop
    ccsidr = SCB->CCSIDR;
900006ea:	4b30      	ldr	r3, [pc, #192]	; (900007ac <main+0x12c>)
900006ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900006f0:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900006f2:	68fb      	ldr	r3, [r7, #12]
900006f4:	0b5b      	lsrs	r3, r3, #13
900006f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
900006fa:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900006fc:	68fb      	ldr	r3, [r7, #12]
900006fe:	08db      	lsrs	r3, r3, #3
90000700:	f3c3 0309 	ubfx	r3, r3, #0, #10
90000704:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000706:	68bb      	ldr	r3, [r7, #8]
90000708:	015a      	lsls	r2, r3, #5
9000070a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
9000070e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90000710:	687a      	ldr	r2, [r7, #4]
90000712:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90000714:	4925      	ldr	r1, [pc, #148]	; (900007ac <main+0x12c>)
90000716:	4313      	orrs	r3, r2
90000718:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
9000071c:	687b      	ldr	r3, [r7, #4]
9000071e:	1e5a      	subs	r2, r3, #1
90000720:	607a      	str	r2, [r7, #4]
90000722:	2b00      	cmp	r3, #0
90000724:	d1ef      	bne.n	90000706 <main+0x86>
    } while(sets-- != 0U);
90000726:	68bb      	ldr	r3, [r7, #8]
90000728:	1e5a      	subs	r2, r3, #1
9000072a:	60ba      	str	r2, [r7, #8]
9000072c:	2b00      	cmp	r3, #0
9000072e:	d1e5      	bne.n	900006fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
90000730:	f3bf 8f4f 	dsb	sy
}
90000734:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90000736:	4b1d      	ldr	r3, [pc, #116]	; (900007ac <main+0x12c>)
90000738:	695b      	ldr	r3, [r3, #20]
9000073a:	4a1c      	ldr	r2, [pc, #112]	; (900007ac <main+0x12c>)
9000073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90000740:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90000742:	f3bf 8f4f 	dsb	sy
}
90000746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90000748:	f3bf 8f6f 	isb	sy
}
9000074c:	e000      	b.n	90000750 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
9000074e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90000750:	f000 fc56 	bl	90001000 <HAL_Init>

  /* USER CODE BEGIN Init */
	Tim = HAL_GetTick();
90000754:	f000 fca4 	bl	900010a0 <HAL_GetTick>
90000758:	4603      	mov	r3, r0
9000075a:	4a15      	ldr	r2, [pc, #84]	; (900007b0 <main+0x130>)
9000075c:	6013      	str	r3, [r2, #0]
	flag = 1;
9000075e:	4b15      	ldr	r3, [pc, #84]	; (900007b4 <main+0x134>)
90000760:	2201      	movs	r2, #1
90000762:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000764:	f000 f83a 	bl	900007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90000768:	f000 f904 	bl	90000974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
9000076c:	f000 f8b6 	bl	900008dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
90000770:	f004 ff96 	bl	900056a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90000774:	4a10      	ldr	r2, [pc, #64]	; (900007b8 <main+0x138>)
90000776:	2100      	movs	r1, #0
90000778:	4810      	ldr	r0, [pc, #64]	; (900007bc <main+0x13c>)
9000077a:	f004 ffdb 	bl	90005734 <osThreadNew>
9000077e:	4603      	mov	r3, r0
90000780:	4a0f      	ldr	r2, [pc, #60]	; (900007c0 <main+0x140>)
90000782:	6013      	str	r3, [r2, #0]

  /* creation of my_LED_ON_Task */
  my_LED_ON_TaskHandle = osThreadNew(Start_LED_ON_Task, NULL, &my_LED_ON_Task_attributes);
90000784:	4a0f      	ldr	r2, [pc, #60]	; (900007c4 <main+0x144>)
90000786:	2100      	movs	r1, #0
90000788:	480f      	ldr	r0, [pc, #60]	; (900007c8 <main+0x148>)
9000078a:	f004 ffd3 	bl	90005734 <osThreadNew>
9000078e:	4603      	mov	r3, r0
90000790:	4a0e      	ldr	r2, [pc, #56]	; (900007cc <main+0x14c>)
90000792:	6013      	str	r3, [r2, #0]

  /* creation of my_LED_OFF_Task */
  my_LED_OFF_TaskHandle = osThreadNew(Start_LED_OFF_Task, NULL, &my_LED_OFF_Task_attributes);
90000794:	4a0e      	ldr	r2, [pc, #56]	; (900007d0 <main+0x150>)
90000796:	2100      	movs	r1, #0
90000798:	480e      	ldr	r0, [pc, #56]	; (900007d4 <main+0x154>)
9000079a:	f004 ffcb 	bl	90005734 <osThreadNew>
9000079e:	4603      	mov	r3, r0
900007a0:	4a0d      	ldr	r2, [pc, #52]	; (900007d8 <main+0x158>)
900007a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
900007a4:	f004 ffa0 	bl	900056e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
900007a8:	e7fe      	b.n	900007a8 <main+0x128>
900007aa:	bf00      	nop
900007ac:	e000ed00 	.word	0xe000ed00
900007b0:	24000098 	.word	0x24000098
900007b4:	24000094 	.word	0x24000094
900007b8:	90008d8c 	.word	0x90008d8c
900007bc:	90000a1d 	.word	0x90000a1d
900007c0:	2400012c 	.word	0x2400012c
900007c4:	90008db0 	.word	0x90008db0
900007c8:	90000a2d 	.word	0x90000a2d
900007cc:	24000130 	.word	0x24000130
900007d0:	90008dd4 	.word	0x90008dd4
900007d4:	90000a85 	.word	0x90000a85
900007d8:	24000134 	.word	0x24000134

900007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
900007dc:	b580      	push	{r7, lr}
900007de:	b09c      	sub	sp, #112	; 0x70
900007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
900007e6:	224c      	movs	r2, #76	; 0x4c
900007e8:	2100      	movs	r1, #0
900007ea:	4618      	mov	r0, r3
900007ec:	f007 fe07 	bl	900083fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900007f0:	1d3b      	adds	r3, r7, #4
900007f2:	2220      	movs	r2, #32
900007f4:	2100      	movs	r1, #0
900007f6:	4618      	mov	r0, r3
900007f8:	f007 fe01 	bl	900083fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
900007fc:	2002      	movs	r0, #2
900007fe:	f000 ff8d 	bl	9000171c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
90000802:	2300      	movs	r3, #0
90000804:	603b      	str	r3, [r7, #0]
90000806:	4b33      	ldr	r3, [pc, #204]	; (900008d4 <SystemClock_Config+0xf8>)
90000808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000080a:	4a32      	ldr	r2, [pc, #200]	; (900008d4 <SystemClock_Config+0xf8>)
9000080c:	f023 0301 	bic.w	r3, r3, #1
90000810:	62d3      	str	r3, [r2, #44]	; 0x2c
90000812:	4b30      	ldr	r3, [pc, #192]	; (900008d4 <SystemClock_Config+0xf8>)
90000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000816:	f003 0301 	and.w	r3, r3, #1
9000081a:	603b      	str	r3, [r7, #0]
9000081c:	4b2e      	ldr	r3, [pc, #184]	; (900008d8 <SystemClock_Config+0xfc>)
9000081e:	699b      	ldr	r3, [r3, #24]
90000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
90000824:	4a2c      	ldr	r2, [pc, #176]	; (900008d8 <SystemClock_Config+0xfc>)
90000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000082a:	6193      	str	r3, [r2, #24]
9000082c:	4b2a      	ldr	r3, [pc, #168]	; (900008d8 <SystemClock_Config+0xfc>)
9000082e:	699b      	ldr	r3, [r3, #24]
90000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000834:	603b      	str	r3, [r7, #0]
90000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90000838:	bf00      	nop
9000083a:	4b27      	ldr	r3, [pc, #156]	; (900008d8 <SystemClock_Config+0xfc>)
9000083c:	699b      	ldr	r3, [r3, #24]
9000083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90000846:	d1f8      	bne.n	9000083a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
90000848:	2311      	movs	r3, #17
9000084a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
9000084c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
90000852:	2380      	movs	r3, #128	; 0x80
90000854:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
90000856:	2320      	movs	r3, #32
90000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000085a:	2302      	movs	r3, #2
9000085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
9000085e:	2302      	movs	r3, #2
90000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
90000862:	2302      	movs	r3, #2
90000864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
90000866:	2320      	movs	r3, #32
90000868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
9000086a:	2302      	movs	r3, #2
9000086c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
9000086e:	2302      	movs	r3, #2
90000870:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
90000872:	2302      	movs	r3, #2
90000874:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
90000876:	230c      	movs	r3, #12
90000878:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000087a:	2300      	movs	r3, #0
9000087c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000087e:	2300      	movs	r3, #0
90000880:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
90000886:	4618      	mov	r0, r3
90000888:	f000 ff82 	bl	90001790 <HAL_RCC_OscConfig>
9000088c:	4603      	mov	r3, r0
9000088e:	2b00      	cmp	r3, #0
90000890:	d001      	beq.n	90000896 <SystemClock_Config+0xba>
  {
    Error_Handler();
90000892:	f000 f96f 	bl	90000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000896:	233f      	movs	r3, #63	; 0x3f
90000898:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000089a:	2303      	movs	r3, #3
9000089c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
9000089e:	2300      	movs	r3, #0
900008a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
900008a2:	2308      	movs	r3, #8
900008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
900008a6:	2300      	movs	r3, #0
900008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
900008aa:	2300      	movs	r3, #0
900008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
900008ae:	2300      	movs	r3, #0
900008b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
900008b2:	2300      	movs	r3, #0
900008b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900008b6:	1d3b      	adds	r3, r7, #4
900008b8:	2102      	movs	r1, #2
900008ba:	4618      	mov	r0, r3
900008bc:	f001 fb96 	bl	90001fec <HAL_RCC_ClockConfig>
900008c0:	4603      	mov	r3, r0
900008c2:	2b00      	cmp	r3, #0
900008c4:	d001      	beq.n	900008ca <SystemClock_Config+0xee>
  {
    Error_Handler();
900008c6:	f000 f955 	bl	90000b74 <Error_Handler>
  }
}
900008ca:	bf00      	nop
900008cc:	3770      	adds	r7, #112	; 0x70
900008ce:	46bd      	mov	sp, r7
900008d0:	bd80      	pop	{r7, pc}
900008d2:	bf00      	nop
900008d4:	58000400 	.word	0x58000400
900008d8:	58024800 	.word	0x58024800

900008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
900008dc:	b580      	push	{r7, lr}
900008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
900008e0:	4b22      	ldr	r3, [pc, #136]	; (9000096c <MX_USART2_UART_Init+0x90>)
900008e2:	4a23      	ldr	r2, [pc, #140]	; (90000970 <MX_USART2_UART_Init+0x94>)
900008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
900008e6:	4b21      	ldr	r3, [pc, #132]	; (9000096c <MX_USART2_UART_Init+0x90>)
900008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
900008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
900008ee:	4b1f      	ldr	r3, [pc, #124]	; (9000096c <MX_USART2_UART_Init+0x90>)
900008f0:	2200      	movs	r2, #0
900008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
900008f4:	4b1d      	ldr	r3, [pc, #116]	; (9000096c <MX_USART2_UART_Init+0x90>)
900008f6:	2200      	movs	r2, #0
900008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
900008fa:	4b1c      	ldr	r3, [pc, #112]	; (9000096c <MX_USART2_UART_Init+0x90>)
900008fc:	2200      	movs	r2, #0
900008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
90000900:	4b1a      	ldr	r3, [pc, #104]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000902:	220c      	movs	r2, #12
90000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90000906:	4b19      	ldr	r3, [pc, #100]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000908:	2200      	movs	r2, #0
9000090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
9000090c:	4b17      	ldr	r3, [pc, #92]	; (9000096c <MX_USART2_UART_Init+0x90>)
9000090e:	2200      	movs	r2, #0
90000910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
90000912:	4b16      	ldr	r3, [pc, #88]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000914:	2200      	movs	r2, #0
90000916:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
90000918:	4b14      	ldr	r3, [pc, #80]	; (9000096c <MX_USART2_UART_Init+0x90>)
9000091a:	2200      	movs	r2, #0
9000091c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
9000091e:	4b13      	ldr	r3, [pc, #76]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000920:	2200      	movs	r2, #0
90000922:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
90000924:	4811      	ldr	r0, [pc, #68]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000926:	f003 fd71 	bl	9000440c <HAL_UART_Init>
9000092a:	4603      	mov	r3, r0
9000092c:	2b00      	cmp	r3, #0
9000092e:	d001      	beq.n	90000934 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
90000930:	f000 f920 	bl	90000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000934:	2100      	movs	r1, #0
90000936:	480d      	ldr	r0, [pc, #52]	; (9000096c <MX_USART2_UART_Init+0x90>)
90000938:	f004 fda4 	bl	90005484 <HAL_UARTEx_SetTxFifoThreshold>
9000093c:	4603      	mov	r3, r0
9000093e:	2b00      	cmp	r3, #0
90000940:	d001      	beq.n	90000946 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
90000942:	f000 f917 	bl	90000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90000946:	2100      	movs	r1, #0
90000948:	4808      	ldr	r0, [pc, #32]	; (9000096c <MX_USART2_UART_Init+0x90>)
9000094a:	f004 fdd9 	bl	90005500 <HAL_UARTEx_SetRxFifoThreshold>
9000094e:	4603      	mov	r3, r0
90000950:	2b00      	cmp	r3, #0
90000952:	d001      	beq.n	90000958 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
90000954:	f000 f90e 	bl	90000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
90000958:	4804      	ldr	r0, [pc, #16]	; (9000096c <MX_USART2_UART_Init+0x90>)
9000095a:	f004 fd5a 	bl	90005412 <HAL_UARTEx_DisableFifoMode>
9000095e:	4603      	mov	r3, r0
90000960:	2b00      	cmp	r3, #0
90000962:	d001      	beq.n	90000968 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
90000964:	f000 f906 	bl	90000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
90000968:	bf00      	nop
9000096a:	bd80      	pop	{r7, pc}
9000096c:	2400009c 	.word	0x2400009c
90000970:	40004400 	.word	0x40004400

90000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000974:	b580      	push	{r7, lr}
90000976:	b088      	sub	sp, #32
90000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000097a:	f107 030c 	add.w	r3, r7, #12
9000097e:	2200      	movs	r2, #0
90000980:	601a      	str	r2, [r3, #0]
90000982:	605a      	str	r2, [r3, #4]
90000984:	609a      	str	r2, [r3, #8]
90000986:	60da      	str	r2, [r3, #12]
90000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000098a:	4b22      	ldr	r3, [pc, #136]	; (90000a14 <MX_GPIO_Init+0xa0>)
9000098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000990:	4a20      	ldr	r2, [pc, #128]	; (90000a14 <MX_GPIO_Init+0xa0>)
90000992:	f043 0310 	orr.w	r3, r3, #16
90000996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000099a:	4b1e      	ldr	r3, [pc, #120]	; (90000a14 <MX_GPIO_Init+0xa0>)
9000099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900009a0:	f003 0310 	and.w	r3, r3, #16
900009a4:	60bb      	str	r3, [r7, #8]
900009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900009a8:	4b1a      	ldr	r3, [pc, #104]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900009ae:	4a19      	ldr	r2, [pc, #100]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900009b8:	4b16      	ldr	r3, [pc, #88]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
900009c2:	607b      	str	r3, [r7, #4]
900009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
900009c6:	4b13      	ldr	r3, [pc, #76]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900009cc:	4a11      	ldr	r2, [pc, #68]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009ce:	f043 0301 	orr.w	r3, r3, #1
900009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900009d6:	4b0f      	ldr	r3, [pc, #60]	; (90000a14 <MX_GPIO_Init+0xa0>)
900009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900009dc:	f003 0301 	and.w	r3, r3, #1
900009e0:	603b      	str	r3, [r7, #0]
900009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
900009e4:	2200      	movs	r2, #0
900009e6:	2108      	movs	r1, #8
900009e8:	480b      	ldr	r0, [pc, #44]	; (90000a18 <MX_GPIO_Init+0xa4>)
900009ea:	f000 fe7d 	bl	900016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
900009ee:	2308      	movs	r3, #8
900009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009f2:	2301      	movs	r3, #1
900009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009f6:	2300      	movs	r3, #0
900009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009fa:	2300      	movs	r3, #0
900009fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900009fe:	f107 030c 	add.w	r3, r7, #12
90000a02:	4619      	mov	r1, r3
90000a04:	4804      	ldr	r0, [pc, #16]	; (90000a18 <MX_GPIO_Init+0xa4>)
90000a06:	f000 fcbf 	bl	90001388 <HAL_GPIO_Init>

}
90000a0a:	bf00      	nop
90000a0c:	3720      	adds	r7, #32
90000a0e:	46bd      	mov	sp, r7
90000a10:	bd80      	pop	{r7, pc}
90000a12:	bf00      	nop
90000a14:	58024400 	.word	0x58024400
90000a18:	58021000 	.word	0x58021000

90000a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90000a1c:	b580      	push	{r7, lr}
90000a1e:	b082      	sub	sp, #8
90000a20:	af00      	add	r7, sp, #0
90000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
90000a24:	2001      	movs	r0, #1
90000a26:	f004 ff17 	bl	90005858 <osDelay>
90000a2a:	e7fb      	b.n	90000a24 <StartDefaultTask+0x8>

90000a2c <Start_LED_ON_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_ON_Task */
void Start_LED_ON_Task(void *argument)
{
90000a2c:	b580      	push	{r7, lr}
90000a2e:	b082      	sub	sp, #8
90000a30:	af00      	add	r7, sp, #0
90000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_ON_Task */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 1) {
90000a34:	4b0f      	ldr	r3, [pc, #60]	; (90000a74 <Start_LED_ON_Task+0x48>)
90000a36:	781b      	ldrb	r3, [r3, #0]
90000a38:	2b00      	cmp	r3, #0
90000a3a:	d012      	beq.n	90000a62 <Start_LED_ON_Task+0x36>
			if (HAL_GetTick() - Tim >= 250) {
90000a3c:	f000 fb30 	bl	900010a0 <HAL_GetTick>
90000a40:	4602      	mov	r2, r0
90000a42:	4b0d      	ldr	r3, [pc, #52]	; (90000a78 <Start_LED_ON_Task+0x4c>)
90000a44:	681b      	ldr	r3, [r3, #0]
90000a46:	1ad3      	subs	r3, r2, r3
90000a48:	2bf9      	cmp	r3, #249	; 0xf9
90000a4a:	d90a      	bls.n	90000a62 <Start_LED_ON_Task+0x36>
				printf("Hello from QSPI, LED if ON! \r\n");
90000a4c:	480b      	ldr	r0, [pc, #44]	; (90000a7c <Start_LED_ON_Task+0x50>)
90000a4e:	f007 fde1 	bl	90008614 <puts>
				flag = 0;
90000a52:	4b08      	ldr	r3, [pc, #32]	; (90000a74 <Start_LED_ON_Task+0x48>)
90000a54:	2200      	movs	r2, #0
90000a56:	701a      	strb	r2, [r3, #0]
				Tim = HAL_GetTick();
90000a58:	f000 fb22 	bl	900010a0 <HAL_GetTick>
90000a5c:	4603      	mov	r3, r0
90000a5e:	4a06      	ldr	r2, [pc, #24]	; (90000a78 <Start_LED_ON_Task+0x4c>)
90000a60:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, flag);
90000a62:	4b04      	ldr	r3, [pc, #16]	; (90000a74 <Start_LED_ON_Task+0x48>)
90000a64:	781b      	ldrb	r3, [r3, #0]
90000a66:	461a      	mov	r2, r3
90000a68:	2108      	movs	r1, #8
90000a6a:	4805      	ldr	r0, [pc, #20]	; (90000a80 <Start_LED_ON_Task+0x54>)
90000a6c:	f000 fe3c 	bl	900016e8 <HAL_GPIO_WritePin>
		if (flag == 1) {
90000a70:	e7e0      	b.n	90000a34 <Start_LED_ON_Task+0x8>
90000a72:	bf00      	nop
90000a74:	24000094 	.word	0x24000094
90000a78:	24000098 	.word	0x24000098
90000a7c:	90008d34 	.word	0x90008d34
90000a80:	58021000 	.word	0x58021000

90000a84 <Start_LED_OFF_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_OFF_Task */
void Start_LED_OFF_Task(void *argument)
{
90000a84:	b580      	push	{r7, lr}
90000a86:	b082      	sub	sp, #8
90000a88:	af00      	add	r7, sp, #0
90000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_OFF_Task */
  /* Infinite loop */
  for(;;)
  {
		if (flag == 0) {
90000a8c:	4b10      	ldr	r3, [pc, #64]	; (90000ad0 <Start_LED_OFF_Task+0x4c>)
90000a8e:	781b      	ldrb	r3, [r3, #0]
90000a90:	f083 0301 	eor.w	r3, r3, #1
90000a94:	b2db      	uxtb	r3, r3
90000a96:	2b00      	cmp	r3, #0
90000a98:	d012      	beq.n	90000ac0 <Start_LED_OFF_Task+0x3c>
			if (HAL_GetTick() - Tim >= 250) {
90000a9a:	f000 fb01 	bl	900010a0 <HAL_GetTick>
90000a9e:	4602      	mov	r2, r0
90000aa0:	4b0c      	ldr	r3, [pc, #48]	; (90000ad4 <Start_LED_OFF_Task+0x50>)
90000aa2:	681b      	ldr	r3, [r3, #0]
90000aa4:	1ad3      	subs	r3, r2, r3
90000aa6:	2bf9      	cmp	r3, #249	; 0xf9
90000aa8:	d90a      	bls.n	90000ac0 <Start_LED_OFF_Task+0x3c>
				printf("Hello from QSPI, LED if OFF! \r\n");
90000aaa:	480b      	ldr	r0, [pc, #44]	; (90000ad8 <Start_LED_OFF_Task+0x54>)
90000aac:	f007 fdb2 	bl	90008614 <puts>
				flag = 1;
90000ab0:	4b07      	ldr	r3, [pc, #28]	; (90000ad0 <Start_LED_OFF_Task+0x4c>)
90000ab2:	2201      	movs	r2, #1
90000ab4:	701a      	strb	r2, [r3, #0]
				Tim = HAL_GetTick();
90000ab6:	f000 faf3 	bl	900010a0 <HAL_GetTick>
90000aba:	4603      	mov	r3, r0
90000abc:	4a05      	ldr	r2, [pc, #20]	; (90000ad4 <Start_LED_OFF_Task+0x50>)
90000abe:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, flag);
90000ac0:	4b03      	ldr	r3, [pc, #12]	; (90000ad0 <Start_LED_OFF_Task+0x4c>)
90000ac2:	781b      	ldrb	r3, [r3, #0]
90000ac4:	461a      	mov	r2, r3
90000ac6:	2108      	movs	r1, #8
90000ac8:	4804      	ldr	r0, [pc, #16]	; (90000adc <Start_LED_OFF_Task+0x58>)
90000aca:	f000 fe0d 	bl	900016e8 <HAL_GPIO_WritePin>
		if (flag == 0) {
90000ace:	e7dd      	b.n	90000a8c <Start_LED_OFF_Task+0x8>
90000ad0:	24000094 	.word	0x24000094
90000ad4:	24000098 	.word	0x24000098
90000ad8:	90008d54 	.word	0x90008d54
90000adc:	58021000 	.word	0x58021000

90000ae0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
90000ae0:	b580      	push	{r7, lr}
90000ae2:	b084      	sub	sp, #16
90000ae4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90000ae6:	463b      	mov	r3, r7
90000ae8:	2200      	movs	r2, #0
90000aea:	601a      	str	r2, [r3, #0]
90000aec:	605a      	str	r2, [r3, #4]
90000aee:	609a      	str	r2, [r3, #8]
90000af0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90000af2:	f000 fbcd 	bl	90001290 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000af6:	2301      	movs	r3, #1
90000af8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
90000afa:	2300      	movs	r3, #0
90000afc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
90000afe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90000b02:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
90000b04:	2316      	movs	r3, #22
90000b06:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
90000b08:	2300      	movs	r3, #0
90000b0a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90000b0c:	2300      	movs	r3, #0
90000b0e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000b10:	2303      	movs	r3, #3
90000b12:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90000b14:	2301      	movs	r3, #1
90000b16:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000b18:	2300      	movs	r3, #0
90000b1a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90000b1c:	2301      	movs	r3, #1
90000b1e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90000b20:	2301      	movs	r3, #1
90000b22:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000b24:	463b      	mov	r3, r7
90000b26:	4618      	mov	r0, r3
90000b28:	f000 fbea 	bl	90001300 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90000b2c:	2301      	movs	r3, #1
90000b2e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90000b30:	2313      	movs	r3, #19
90000b32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000b34:	2300      	movs	r3, #0
90000b36:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000b38:	463b      	mov	r3, r7
90000b3a:	4618      	mov	r0, r3
90000b3c:	f000 fbe0 	bl	90001300 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000b40:	2004      	movs	r0, #4
90000b42:	f000 fbbd 	bl	900012c0 <HAL_MPU_Enable>

}
90000b46:	bf00      	nop
90000b48:	3710      	adds	r7, #16
90000b4a:	46bd      	mov	sp, r7
90000b4c:	bd80      	pop	{r7, pc}
	...

90000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
90000b50:	b580      	push	{r7, lr}
90000b52:	b082      	sub	sp, #8
90000b54:	af00      	add	r7, sp, #0
90000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
90000b58:	687b      	ldr	r3, [r7, #4]
90000b5a:	681b      	ldr	r3, [r3, #0]
90000b5c:	4a04      	ldr	r2, [pc, #16]	; (90000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
90000b5e:	4293      	cmp	r3, r2
90000b60:	d101      	bne.n	90000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
90000b62:	f000 fa89 	bl	90001078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90000b66:	bf00      	nop
90000b68:	3708      	adds	r7, #8
90000b6a:	46bd      	mov	sp, r7
90000b6c:	bd80      	pop	{r7, pc}
90000b6e:	bf00      	nop
90000b70:	40014800 	.word	0x40014800

90000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000b74:	b480      	push	{r7}
90000b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
90000b78:	b672      	cpsid	i
}
90000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000b7c:	e7fe      	b.n	90000b7c <Error_Handler+0x8>
	...

90000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000b80:	b580      	push	{r7, lr}
90000b82:	b082      	sub	sp, #8
90000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000b86:	4b0c      	ldr	r3, [pc, #48]	; (90000bb8 <HAL_MspInit+0x38>)
90000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000b8c:	4a0a      	ldr	r2, [pc, #40]	; (90000bb8 <HAL_MspInit+0x38>)
90000b8e:	f043 0302 	orr.w	r3, r3, #2
90000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90000b96:	4b08      	ldr	r3, [pc, #32]	; (90000bb8 <HAL_MspInit+0x38>)
90000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000b9c:	f003 0302 	and.w	r3, r3, #2
90000ba0:	607b      	str	r3, [r7, #4]
90000ba2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90000ba4:	2200      	movs	r2, #0
90000ba6:	210f      	movs	r1, #15
90000ba8:	f06f 0001 	mvn.w	r0, #1
90000bac:	f000 fb48 	bl	90001240 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90000bb0:	bf00      	nop
90000bb2:	3708      	adds	r7, #8
90000bb4:	46bd      	mov	sp, r7
90000bb6:	bd80      	pop	{r7, pc}
90000bb8:	58024400 	.word	0x58024400

90000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90000bbc:	b580      	push	{r7, lr}
90000bbe:	b0b8      	sub	sp, #224	; 0xe0
90000bc0:	af00      	add	r7, sp, #0
90000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
90000bc8:	2200      	movs	r2, #0
90000bca:	601a      	str	r2, [r3, #0]
90000bcc:	605a      	str	r2, [r3, #4]
90000bce:	609a      	str	r2, [r3, #8]
90000bd0:	60da      	str	r2, [r3, #12]
90000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90000bd4:	f107 0310 	add.w	r3, r7, #16
90000bd8:	22bc      	movs	r2, #188	; 0xbc
90000bda:	2100      	movs	r1, #0
90000bdc:	4618      	mov	r0, r3
90000bde:	f007 fc0e 	bl	900083fe <memset>
  if(huart->Instance==USART2)
90000be2:	687b      	ldr	r3, [r7, #4]
90000be4:	681b      	ldr	r3, [r3, #0]
90000be6:	4a24      	ldr	r2, [pc, #144]	; (90000c78 <HAL_UART_MspInit+0xbc>)
90000be8:	4293      	cmp	r3, r2
90000bea:	d141      	bne.n	90000c70 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
90000bec:	2302      	movs	r3, #2
90000bee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
90000bf0:	2304      	movs	r3, #4
90000bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90000bf6:	f107 0310 	add.w	r3, r7, #16
90000bfa:	4618      	mov	r0, r3
90000bfc:	f001 fdc4 	bl	90002788 <HAL_RCCEx_PeriphCLKConfig>
90000c00:	4603      	mov	r3, r0
90000c02:	2b00      	cmp	r3, #0
90000c04:	d001      	beq.n	90000c0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
90000c06:	f7ff ffb5 	bl	90000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
90000c0a:	4b1c      	ldr	r3, [pc, #112]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000c10:	4a1a      	ldr	r2, [pc, #104]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90000c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000c1a:	4b18      	ldr	r3, [pc, #96]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90000c24:	60fb      	str	r3, [r7, #12]
90000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
90000c28:	4b14      	ldr	r3, [pc, #80]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c2e:	4a13      	ldr	r2, [pc, #76]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c30:	f043 0301 	orr.w	r3, r3, #1
90000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000c38:	4b10      	ldr	r3, [pc, #64]	; (90000c7c <HAL_UART_MspInit+0xc0>)
90000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000c3e:	f003 0301 	and.w	r3, r3, #1
90000c42:	60bb      	str	r3, [r7, #8]
90000c44:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
90000c46:	230c      	movs	r3, #12
90000c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c4c:	2302      	movs	r3, #2
90000c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c52:	2300      	movs	r3, #0
90000c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000c58:	2300      	movs	r3, #0
90000c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
90000c5e:	2307      	movs	r3, #7
90000c60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000c64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
90000c68:	4619      	mov	r1, r3
90000c6a:	4805      	ldr	r0, [pc, #20]	; (90000c80 <HAL_UART_MspInit+0xc4>)
90000c6c:	f000 fb8c 	bl	90001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
90000c70:	bf00      	nop
90000c72:	37e0      	adds	r7, #224	; 0xe0
90000c74:	46bd      	mov	sp, r7
90000c76:	bd80      	pop	{r7, pc}
90000c78:	40004400 	.word	0x40004400
90000c7c:	58024400 	.word	0x58024400
90000c80:	58020000 	.word	0x58020000

90000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90000c84:	b580      	push	{r7, lr}
90000c86:	b08e      	sub	sp, #56	; 0x38
90000c88:	af00      	add	r7, sp, #0
90000c8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90000c8c:	687b      	ldr	r3, [r7, #4]
90000c8e:	2b0f      	cmp	r3, #15
90000c90:	d842      	bhi.n	90000d18 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
90000c92:	2200      	movs	r2, #0
90000c94:	6879      	ldr	r1, [r7, #4]
90000c96:	2076      	movs	r0, #118	; 0x76
90000c98:	f000 fad2 	bl	90001240 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
90000c9c:	2076      	movs	r0, #118	; 0x76
90000c9e:	f000 fae9 	bl	90001274 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
90000ca2:	4a23      	ldr	r2, [pc, #140]	; (90000d30 <HAL_InitTick+0xac>)
90000ca4:	687b      	ldr	r3, [r7, #4]
90000ca6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
90000ca8:	4b22      	ldr	r3, [pc, #136]	; (90000d34 <HAL_InitTick+0xb0>)
90000caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90000cae:	4a21      	ldr	r2, [pc, #132]	; (90000d34 <HAL_InitTick+0xb0>)
90000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90000cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90000cb8:	4b1e      	ldr	r3, [pc, #120]	; (90000d34 <HAL_InitTick+0xb0>)
90000cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90000cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90000cc2:	60bb      	str	r3, [r7, #8]
90000cc4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90000cc6:	f107 020c 	add.w	r2, r7, #12
90000cca:	f107 0310 	add.w	r3, r7, #16
90000cce:	4611      	mov	r1, r2
90000cd0:	4618      	mov	r0, r3
90000cd2:	f001 fd17 	bl	90002704 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
90000cd6:	f001 fcff 	bl	900026d8 <HAL_RCC_GetPCLK2Freq>
90000cda:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90000cde:	4a16      	ldr	r2, [pc, #88]	; (90000d38 <HAL_InitTick+0xb4>)
90000ce0:	fba2 2303 	umull	r2, r3, r2, r3
90000ce4:	0c9b      	lsrs	r3, r3, #18
90000ce6:	3b01      	subs	r3, #1
90000ce8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
90000cea:	4b14      	ldr	r3, [pc, #80]	; (90000d3c <HAL_InitTick+0xb8>)
90000cec:	4a14      	ldr	r2, [pc, #80]	; (90000d40 <HAL_InitTick+0xbc>)
90000cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
90000cf0:	4b12      	ldr	r3, [pc, #72]	; (90000d3c <HAL_InitTick+0xb8>)
90000cf2:	f240 32e7 	movw	r2, #999	; 0x3e7
90000cf6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
90000cf8:	4a10      	ldr	r2, [pc, #64]	; (90000d3c <HAL_InitTick+0xb8>)
90000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90000cfc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
90000cfe:	4b0f      	ldr	r3, [pc, #60]	; (90000d3c <HAL_InitTick+0xb8>)
90000d00:	2200      	movs	r2, #0
90000d02:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
90000d04:	4b0d      	ldr	r3, [pc, #52]	; (90000d3c <HAL_InitTick+0xb8>)
90000d06:	2200      	movs	r2, #0
90000d08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
90000d0a:	480c      	ldr	r0, [pc, #48]	; (90000d3c <HAL_InitTick+0xb8>)
90000d0c:	f003 f8a4 	bl	90003e58 <HAL_TIM_Base_Init>
90000d10:	4603      	mov	r3, r0
90000d12:	2b00      	cmp	r3, #0
90000d14:	d107      	bne.n	90000d26 <HAL_InitTick+0xa2>
90000d16:	e001      	b.n	90000d1c <HAL_InitTick+0x98>
    return HAL_ERROR;
90000d18:	2301      	movs	r3, #1
90000d1a:	e005      	b.n	90000d28 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
90000d1c:	4807      	ldr	r0, [pc, #28]	; (90000d3c <HAL_InitTick+0xb8>)
90000d1e:	f003 f8fd 	bl	90003f1c <HAL_TIM_Base_Start_IT>
90000d22:	4603      	mov	r3, r0
90000d24:	e000      	b.n	90000d28 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
90000d26:	2301      	movs	r3, #1
}
90000d28:	4618      	mov	r0, r3
90000d2a:	3738      	adds	r7, #56	; 0x38
90000d2c:	46bd      	mov	sp, r7
90000d2e:	bd80      	pop	{r7, pc}
90000d30:	24000008 	.word	0x24000008
90000d34:	58024400 	.word	0x58024400
90000d38:	431bde83 	.word	0x431bde83
90000d3c:	24000138 	.word	0x24000138
90000d40:	40014800 	.word	0x40014800

90000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000d44:	b480      	push	{r7}
90000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90000d48:	e7fe      	b.n	90000d48 <NMI_Handler+0x4>

90000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90000d4a:	b480      	push	{r7}
90000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000d4e:	e7fe      	b.n	90000d4e <HardFault_Handler+0x4>

90000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000d50:	b480      	push	{r7}
90000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000d54:	e7fe      	b.n	90000d54 <MemManage_Handler+0x4>

90000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90000d56:	b480      	push	{r7}
90000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90000d5a:	e7fe      	b.n	90000d5a <BusFault_Handler+0x4>

90000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000d5c:	b480      	push	{r7}
90000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000d60:	e7fe      	b.n	90000d60 <UsageFault_Handler+0x4>

90000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000d62:	b480      	push	{r7}
90000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000d66:	bf00      	nop
90000d68:	46bd      	mov	sp, r7
90000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000d6e:	4770      	bx	lr

90000d70 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
90000d70:	b580      	push	{r7, lr}
90000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
90000d74:	4802      	ldr	r0, [pc, #8]	; (90000d80 <TIM17_IRQHandler+0x10>)
90000d76:	f003 f949 	bl	9000400c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
90000d7a:	bf00      	nop
90000d7c:	bd80      	pop	{r7, pc}
90000d7e:	bf00      	nop
90000d80:	24000138 	.word	0x24000138

90000d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000d84:	b580      	push	{r7, lr}
90000d86:	b086      	sub	sp, #24
90000d88:	af00      	add	r7, sp, #0
90000d8a:	60f8      	str	r0, [r7, #12]
90000d8c:	60b9      	str	r1, [r7, #8]
90000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000d90:	2300      	movs	r3, #0
90000d92:	617b      	str	r3, [r7, #20]
90000d94:	e00a      	b.n	90000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
90000d96:	f3af 8000 	nop.w
90000d9a:	4601      	mov	r1, r0
90000d9c:	68bb      	ldr	r3, [r7, #8]
90000d9e:	1c5a      	adds	r2, r3, #1
90000da0:	60ba      	str	r2, [r7, #8]
90000da2:	b2ca      	uxtb	r2, r1
90000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000da6:	697b      	ldr	r3, [r7, #20]
90000da8:	3301      	adds	r3, #1
90000daa:	617b      	str	r3, [r7, #20]
90000dac:	697a      	ldr	r2, [r7, #20]
90000dae:	687b      	ldr	r3, [r7, #4]
90000db0:	429a      	cmp	r2, r3
90000db2:	dbf0      	blt.n	90000d96 <_read+0x12>
	}

return len;
90000db4:	687b      	ldr	r3, [r7, #4]
}
90000db6:	4618      	mov	r0, r3
90000db8:	3718      	adds	r7, #24
90000dba:	46bd      	mov	sp, r7
90000dbc:	bd80      	pop	{r7, pc}

90000dbe <_close>:
	}
	return len;
}

int _close(int file)
{
90000dbe:	b480      	push	{r7}
90000dc0:	b083      	sub	sp, #12
90000dc2:	af00      	add	r7, sp, #0
90000dc4:	6078      	str	r0, [r7, #4]
	return -1;
90000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90000dca:	4618      	mov	r0, r3
90000dcc:	370c      	adds	r7, #12
90000dce:	46bd      	mov	sp, r7
90000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000dd4:	4770      	bx	lr

90000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
90000dd6:	b480      	push	{r7}
90000dd8:	b083      	sub	sp, #12
90000dda:	af00      	add	r7, sp, #0
90000ddc:	6078      	str	r0, [r7, #4]
90000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90000de0:	683b      	ldr	r3, [r7, #0]
90000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90000de6:	605a      	str	r2, [r3, #4]
	return 0;
90000de8:	2300      	movs	r3, #0
}
90000dea:	4618      	mov	r0, r3
90000dec:	370c      	adds	r7, #12
90000dee:	46bd      	mov	sp, r7
90000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000df4:	4770      	bx	lr

90000df6 <_isatty>:

int _isatty(int file)
{
90000df6:	b480      	push	{r7}
90000df8:	b083      	sub	sp, #12
90000dfa:	af00      	add	r7, sp, #0
90000dfc:	6078      	str	r0, [r7, #4]
	return 1;
90000dfe:	2301      	movs	r3, #1
}
90000e00:	4618      	mov	r0, r3
90000e02:	370c      	adds	r7, #12
90000e04:	46bd      	mov	sp, r7
90000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e0a:	4770      	bx	lr

90000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000e0c:	b480      	push	{r7}
90000e0e:	b085      	sub	sp, #20
90000e10:	af00      	add	r7, sp, #0
90000e12:	60f8      	str	r0, [r7, #12]
90000e14:	60b9      	str	r1, [r7, #8]
90000e16:	607a      	str	r2, [r7, #4]
	return 0;
90000e18:	2300      	movs	r3, #0
}
90000e1a:	4618      	mov	r0, r3
90000e1c:	3714      	adds	r7, #20
90000e1e:	46bd      	mov	sp, r7
90000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e24:	4770      	bx	lr
	...

90000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000e28:	b580      	push	{r7, lr}
90000e2a:	b086      	sub	sp, #24
90000e2c:	af00      	add	r7, sp, #0
90000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000e30:	4a14      	ldr	r2, [pc, #80]	; (90000e84 <_sbrk+0x5c>)
90000e32:	4b15      	ldr	r3, [pc, #84]	; (90000e88 <_sbrk+0x60>)
90000e34:	1ad3      	subs	r3, r2, r3
90000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000e38:	697b      	ldr	r3, [r7, #20]
90000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000e3c:	4b13      	ldr	r3, [pc, #76]	; (90000e8c <_sbrk+0x64>)
90000e3e:	681b      	ldr	r3, [r3, #0]
90000e40:	2b00      	cmp	r3, #0
90000e42:	d102      	bne.n	90000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000e44:	4b11      	ldr	r3, [pc, #68]	; (90000e8c <_sbrk+0x64>)
90000e46:	4a12      	ldr	r2, [pc, #72]	; (90000e90 <_sbrk+0x68>)
90000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000e4a:	4b10      	ldr	r3, [pc, #64]	; (90000e8c <_sbrk+0x64>)
90000e4c:	681a      	ldr	r2, [r3, #0]
90000e4e:	687b      	ldr	r3, [r7, #4]
90000e50:	4413      	add	r3, r2
90000e52:	693a      	ldr	r2, [r7, #16]
90000e54:	429a      	cmp	r2, r3
90000e56:	d207      	bcs.n	90000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
90000e58:	f007 f9a0 	bl	9000819c <__errno>
90000e5c:	4603      	mov	r3, r0
90000e5e:	220c      	movs	r2, #12
90000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000e66:	e009      	b.n	90000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90000e68:	4b08      	ldr	r3, [pc, #32]	; (90000e8c <_sbrk+0x64>)
90000e6a:	681b      	ldr	r3, [r3, #0]
90000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000e6e:	4b07      	ldr	r3, [pc, #28]	; (90000e8c <_sbrk+0x64>)
90000e70:	681a      	ldr	r2, [r3, #0]
90000e72:	687b      	ldr	r3, [r7, #4]
90000e74:	4413      	add	r3, r2
90000e76:	4a05      	ldr	r2, [pc, #20]	; (90000e8c <_sbrk+0x64>)
90000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000e7a:	68fb      	ldr	r3, [r7, #12]
}
90000e7c:	4618      	mov	r0, r3
90000e7e:	3718      	adds	r7, #24
90000e80:	46bd      	mov	sp, r7
90000e82:	bd80      	pop	{r7, pc}
90000e84:	24080000 	.word	0x24080000
90000e88:	00000400 	.word	0x00000400
90000e8c:	24000184 	.word	0x24000184
90000e90:	24004bb0 	.word	0x24004bb0

90000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90000e94:	b480      	push	{r7}
90000e96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90000e98:	4b39      	ldr	r3, [pc, #228]	; (90000f80 <SystemInit+0xec>)
90000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000e9e:	4a38      	ldr	r2, [pc, #224]	; (90000f80 <SystemInit+0xec>)
90000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90000ea8:	4b36      	ldr	r3, [pc, #216]	; (90000f84 <SystemInit+0xf0>)
90000eaa:	681b      	ldr	r3, [r3, #0]
90000eac:	f003 030f 	and.w	r3, r3, #15
90000eb0:	2b06      	cmp	r3, #6
90000eb2:	d807      	bhi.n	90000ec4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90000eb4:	4b33      	ldr	r3, [pc, #204]	; (90000f84 <SystemInit+0xf0>)
90000eb6:	681b      	ldr	r3, [r3, #0]
90000eb8:	f023 030f 	bic.w	r3, r3, #15
90000ebc:	4a31      	ldr	r2, [pc, #196]	; (90000f84 <SystemInit+0xf0>)
90000ebe:	f043 0307 	orr.w	r3, r3, #7
90000ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90000ec4:	4b30      	ldr	r3, [pc, #192]	; (90000f88 <SystemInit+0xf4>)
90000ec6:	681b      	ldr	r3, [r3, #0]
90000ec8:	4a2f      	ldr	r2, [pc, #188]	; (90000f88 <SystemInit+0xf4>)
90000eca:	f043 0301 	orr.w	r3, r3, #1
90000ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000ed0:	4b2d      	ldr	r3, [pc, #180]	; (90000f88 <SystemInit+0xf4>)
90000ed2:	2200      	movs	r2, #0
90000ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90000ed6:	4b2c      	ldr	r3, [pc, #176]	; (90000f88 <SystemInit+0xf4>)
90000ed8:	681a      	ldr	r2, [r3, #0]
90000eda:	492b      	ldr	r1, [pc, #172]	; (90000f88 <SystemInit+0xf4>)
90000edc:	4b2b      	ldr	r3, [pc, #172]	; (90000f8c <SystemInit+0xf8>)
90000ede:	4013      	ands	r3, r2
90000ee0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90000ee2:	4b28      	ldr	r3, [pc, #160]	; (90000f84 <SystemInit+0xf0>)
90000ee4:	681b      	ldr	r3, [r3, #0]
90000ee6:	f003 0308 	and.w	r3, r3, #8
90000eea:	2b00      	cmp	r3, #0
90000eec:	d007      	beq.n	90000efe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90000eee:	4b25      	ldr	r3, [pc, #148]	; (90000f84 <SystemInit+0xf0>)
90000ef0:	681b      	ldr	r3, [r3, #0]
90000ef2:	f023 030f 	bic.w	r3, r3, #15
90000ef6:	4a23      	ldr	r2, [pc, #140]	; (90000f84 <SystemInit+0xf0>)
90000ef8:	f043 0307 	orr.w	r3, r3, #7
90000efc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90000efe:	4b22      	ldr	r3, [pc, #136]	; (90000f88 <SystemInit+0xf4>)
90000f00:	2200      	movs	r2, #0
90000f02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90000f04:	4b20      	ldr	r3, [pc, #128]	; (90000f88 <SystemInit+0xf4>)
90000f06:	2200      	movs	r2, #0
90000f08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90000f0a:	4b1f      	ldr	r3, [pc, #124]	; (90000f88 <SystemInit+0xf4>)
90000f0c:	2200      	movs	r2, #0
90000f0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90000f10:	4b1d      	ldr	r3, [pc, #116]	; (90000f88 <SystemInit+0xf4>)
90000f12:	4a1f      	ldr	r2, [pc, #124]	; (90000f90 <SystemInit+0xfc>)
90000f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
90000f16:	4b1c      	ldr	r3, [pc, #112]	; (90000f88 <SystemInit+0xf4>)
90000f18:	4a1e      	ldr	r2, [pc, #120]	; (90000f94 <SystemInit+0x100>)
90000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90000f1c:	4b1a      	ldr	r3, [pc, #104]	; (90000f88 <SystemInit+0xf4>)
90000f1e:	4a1e      	ldr	r2, [pc, #120]	; (90000f98 <SystemInit+0x104>)
90000f20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90000f22:	4b19      	ldr	r3, [pc, #100]	; (90000f88 <SystemInit+0xf4>)
90000f24:	2200      	movs	r2, #0
90000f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
90000f28:	4b17      	ldr	r3, [pc, #92]	; (90000f88 <SystemInit+0xf4>)
90000f2a:	4a1b      	ldr	r2, [pc, #108]	; (90000f98 <SystemInit+0x104>)
90000f2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90000f2e:	4b16      	ldr	r3, [pc, #88]	; (90000f88 <SystemInit+0xf4>)
90000f30:	2200      	movs	r2, #0
90000f32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
90000f34:	4b14      	ldr	r3, [pc, #80]	; (90000f88 <SystemInit+0xf4>)
90000f36:	4a18      	ldr	r2, [pc, #96]	; (90000f98 <SystemInit+0x104>)
90000f38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90000f3a:	4b13      	ldr	r3, [pc, #76]	; (90000f88 <SystemInit+0xf4>)
90000f3c:	2200      	movs	r2, #0
90000f3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90000f40:	4b11      	ldr	r3, [pc, #68]	; (90000f88 <SystemInit+0xf4>)
90000f42:	681b      	ldr	r3, [r3, #0]
90000f44:	4a10      	ldr	r2, [pc, #64]	; (90000f88 <SystemInit+0xf4>)
90000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90000f4c:	4b0e      	ldr	r3, [pc, #56]	; (90000f88 <SystemInit+0xf4>)
90000f4e:	2200      	movs	r2, #0
90000f50:	661a      	str	r2, [r3, #96]	; 0x60

  SCB->VTOR = QSPI_BASE; /* Я добавил */
90000f52:	4b0b      	ldr	r3, [pc, #44]	; (90000f80 <SystemInit+0xec>)
90000f54:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000f58:	609a      	str	r2, [r3, #8]

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90000f5a:	4b10      	ldr	r3, [pc, #64]	; (90000f9c <SystemInit+0x108>)
90000f5c:	681a      	ldr	r2, [r3, #0]
90000f5e:	4b10      	ldr	r3, [pc, #64]	; (90000fa0 <SystemInit+0x10c>)
90000f60:	4013      	ands	r3, r2
90000f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90000f66:	d202      	bcs.n	90000f6e <SystemInit+0xda>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90000f68:	4b0e      	ldr	r3, [pc, #56]	; (90000fa4 <SystemInit+0x110>)
90000f6a:	2201      	movs	r2, #1
90000f6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
90000f6e:	4b0e      	ldr	r3, [pc, #56]	; (90000fa8 <SystemInit+0x114>)
90000f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
90000f74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
90000f76:	bf00      	nop
90000f78:	46bd      	mov	sp, r7
90000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f7e:	4770      	bx	lr
90000f80:	e000ed00 	.word	0xe000ed00
90000f84:	52002000 	.word	0x52002000
90000f88:	58024400 	.word	0x58024400
90000f8c:	eaf6ed7f 	.word	0xeaf6ed7f
90000f90:	02020200 	.word	0x02020200
90000f94:	01ff0000 	.word	0x01ff0000
90000f98:	01010280 	.word	0x01010280
90000f9c:	5c001000 	.word	0x5c001000
90000fa0:	ffff0000 	.word	0xffff0000
90000fa4:	51008108 	.word	0x51008108
90000fa8:	52004000 	.word	0x52004000

90000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90000fb0:	f7ff ff70 	bl	90000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000fb4:	480c      	ldr	r0, [pc, #48]	; (90000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90000fb6:	490d      	ldr	r1, [pc, #52]	; (90000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000fb8:	4a0d      	ldr	r2, [pc, #52]	; (90000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
90000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000fbc:	e002      	b.n	90000fc4 <LoopCopyDataInit>

90000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000fc2:	3304      	adds	r3, #4

90000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000fc8:	d3f9      	bcc.n	90000fbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000fca:	4a0a      	ldr	r2, [pc, #40]	; (90000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000fcc:	4c0a      	ldr	r4, [pc, #40]	; (90000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
90000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
90000fd0:	e001      	b.n	90000fd6 <LoopFillZerobss>

90000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000fd4:	3204      	adds	r2, #4

90000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000fd8:	d3fb      	bcc.n	90000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000fda:	f007 f9db 	bl	90008394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000fde:	f7ff fb4f 	bl	90000680 <main>
  bx  lr
90000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000fe4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90000fe8:	24000000 	.word	0x24000000
  ldr r1, =_edata
90000fec:	24000078 	.word	0x24000078
  ldr r2, =_sidata
90000ff0:	90008ea4 	.word	0x90008ea4
  ldr r2, =_sbss
90000ff4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
90000ff8:	24004bac 	.word	0x24004bac

90000ffc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000ffc:	e7fe      	b.n	90000ffc <ADC3_IRQHandler>
	...

90001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90001000:	b580      	push	{r7, lr}
90001002:	b082      	sub	sp, #8
90001004:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90001006:	2003      	movs	r0, #3
90001008:	f000 f90f 	bl	9000122a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000100c:	f001 f9a4 	bl	90002358 <HAL_RCC_GetSysClockFreq>
90001010:	4602      	mov	r2, r0
90001012:	4b15      	ldr	r3, [pc, #84]	; (90001068 <HAL_Init+0x68>)
90001014:	699b      	ldr	r3, [r3, #24]
90001016:	0a1b      	lsrs	r3, r3, #8
90001018:	f003 030f 	and.w	r3, r3, #15
9000101c:	4913      	ldr	r1, [pc, #76]	; (9000106c <HAL_Init+0x6c>)
9000101e:	5ccb      	ldrb	r3, [r1, r3]
90001020:	f003 031f 	and.w	r3, r3, #31
90001024:	fa22 f303 	lsr.w	r3, r2, r3
90001028:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000102a:	4b0f      	ldr	r3, [pc, #60]	; (90001068 <HAL_Init+0x68>)
9000102c:	699b      	ldr	r3, [r3, #24]
9000102e:	f003 030f 	and.w	r3, r3, #15
90001032:	4a0e      	ldr	r2, [pc, #56]	; (9000106c <HAL_Init+0x6c>)
90001034:	5cd3      	ldrb	r3, [r2, r3]
90001036:	f003 031f 	and.w	r3, r3, #31
9000103a:	687a      	ldr	r2, [r7, #4]
9000103c:	fa22 f303 	lsr.w	r3, r2, r3
90001040:	4a0b      	ldr	r2, [pc, #44]	; (90001070 <HAL_Init+0x70>)
90001042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90001044:	4a0b      	ldr	r2, [pc, #44]	; (90001074 <HAL_Init+0x74>)
90001046:	687b      	ldr	r3, [r7, #4]
90001048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000104a:	200f      	movs	r0, #15
9000104c:	f7ff fe1a 	bl	90000c84 <HAL_InitTick>
90001050:	4603      	mov	r3, r0
90001052:	2b00      	cmp	r3, #0
90001054:	d001      	beq.n	9000105a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90001056:	2301      	movs	r3, #1
90001058:	e002      	b.n	90001060 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
9000105a:	f7ff fd91 	bl	90000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
9000105e:	2300      	movs	r3, #0
}
90001060:	4618      	mov	r0, r3
90001062:	3708      	adds	r7, #8
90001064:	46bd      	mov	sp, r7
90001066:	bd80      	pop	{r7, pc}
90001068:	58024400 	.word	0x58024400
9000106c:	90008df8 	.word	0x90008df8
90001070:	24000004 	.word	0x24000004
90001074:	24000000 	.word	0x24000000

90001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90001078:	b480      	push	{r7}
9000107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
9000107c:	4b06      	ldr	r3, [pc, #24]	; (90001098 <HAL_IncTick+0x20>)
9000107e:	781b      	ldrb	r3, [r3, #0]
90001080:	461a      	mov	r2, r3
90001082:	4b06      	ldr	r3, [pc, #24]	; (9000109c <HAL_IncTick+0x24>)
90001084:	681b      	ldr	r3, [r3, #0]
90001086:	4413      	add	r3, r2
90001088:	4a04      	ldr	r2, [pc, #16]	; (9000109c <HAL_IncTick+0x24>)
9000108a:	6013      	str	r3, [r2, #0]
}
9000108c:	bf00      	nop
9000108e:	46bd      	mov	sp, r7
90001090:	f85d 7b04 	ldr.w	r7, [sp], #4
90001094:	4770      	bx	lr
90001096:	bf00      	nop
90001098:	2400000c 	.word	0x2400000c
9000109c:	24000188 	.word	0x24000188

900010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900010a0:	b480      	push	{r7}
900010a2:	af00      	add	r7, sp, #0
  return uwTick;
900010a4:	4b03      	ldr	r3, [pc, #12]	; (900010b4 <HAL_GetTick+0x14>)
900010a6:	681b      	ldr	r3, [r3, #0]
}
900010a8:	4618      	mov	r0, r3
900010aa:	46bd      	mov	sp, r7
900010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900010b0:	4770      	bx	lr
900010b2:	bf00      	nop
900010b4:	24000188 	.word	0x24000188

900010b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
900010b8:	b480      	push	{r7}
900010ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
900010bc:	4b03      	ldr	r3, [pc, #12]	; (900010cc <HAL_GetREVID+0x14>)
900010be:	681b      	ldr	r3, [r3, #0]
900010c0:	0c1b      	lsrs	r3, r3, #16
}
900010c2:	4618      	mov	r0, r3
900010c4:	46bd      	mov	sp, r7
900010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
900010ca:	4770      	bx	lr
900010cc:	5c001000 	.word	0x5c001000

900010d0 <__NVIC_SetPriorityGrouping>:
{
900010d0:	b480      	push	{r7}
900010d2:	b085      	sub	sp, #20
900010d4:	af00      	add	r7, sp, #0
900010d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900010d8:	687b      	ldr	r3, [r7, #4]
900010da:	f003 0307 	and.w	r3, r3, #7
900010de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900010e0:	4b0b      	ldr	r3, [pc, #44]	; (90001110 <__NVIC_SetPriorityGrouping+0x40>)
900010e2:	68db      	ldr	r3, [r3, #12]
900010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900010e6:	68ba      	ldr	r2, [r7, #8]
900010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
900010ec:	4013      	ands	r3, r2
900010ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900010f0:	68fb      	ldr	r3, [r7, #12]
900010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900010f4:	68bb      	ldr	r3, [r7, #8]
900010f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900010f8:	4b06      	ldr	r3, [pc, #24]	; (90001114 <__NVIC_SetPriorityGrouping+0x44>)
900010fa:	4313      	orrs	r3, r2
900010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900010fe:	4a04      	ldr	r2, [pc, #16]	; (90001110 <__NVIC_SetPriorityGrouping+0x40>)
90001100:	68bb      	ldr	r3, [r7, #8]
90001102:	60d3      	str	r3, [r2, #12]
}
90001104:	bf00      	nop
90001106:	3714      	adds	r7, #20
90001108:	46bd      	mov	sp, r7
9000110a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000110e:	4770      	bx	lr
90001110:	e000ed00 	.word	0xe000ed00
90001114:	05fa0000 	.word	0x05fa0000

90001118 <__NVIC_GetPriorityGrouping>:
{
90001118:	b480      	push	{r7}
9000111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000111c:	4b04      	ldr	r3, [pc, #16]	; (90001130 <__NVIC_GetPriorityGrouping+0x18>)
9000111e:	68db      	ldr	r3, [r3, #12]
90001120:	0a1b      	lsrs	r3, r3, #8
90001122:	f003 0307 	and.w	r3, r3, #7
}
90001126:	4618      	mov	r0, r3
90001128:	46bd      	mov	sp, r7
9000112a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000112e:	4770      	bx	lr
90001130:	e000ed00 	.word	0xe000ed00

90001134 <__NVIC_EnableIRQ>:
{
90001134:	b480      	push	{r7}
90001136:	b083      	sub	sp, #12
90001138:	af00      	add	r7, sp, #0
9000113a:	4603      	mov	r3, r0
9000113c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90001142:	2b00      	cmp	r3, #0
90001144:	db0b      	blt.n	9000115e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001146:	88fb      	ldrh	r3, [r7, #6]
90001148:	f003 021f 	and.w	r2, r3, #31
9000114c:	4907      	ldr	r1, [pc, #28]	; (9000116c <__NVIC_EnableIRQ+0x38>)
9000114e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90001152:	095b      	lsrs	r3, r3, #5
90001154:	2001      	movs	r0, #1
90001156:	fa00 f202 	lsl.w	r2, r0, r2
9000115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
9000115e:	bf00      	nop
90001160:	370c      	adds	r7, #12
90001162:	46bd      	mov	sp, r7
90001164:	f85d 7b04 	ldr.w	r7, [sp], #4
90001168:	4770      	bx	lr
9000116a:	bf00      	nop
9000116c:	e000e100 	.word	0xe000e100

90001170 <__NVIC_SetPriority>:
{
90001170:	b480      	push	{r7}
90001172:	b083      	sub	sp, #12
90001174:	af00      	add	r7, sp, #0
90001176:	4603      	mov	r3, r0
90001178:	6039      	str	r1, [r7, #0]
9000117a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
9000117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90001180:	2b00      	cmp	r3, #0
90001182:	db0a      	blt.n	9000119a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001184:	683b      	ldr	r3, [r7, #0]
90001186:	b2da      	uxtb	r2, r3
90001188:	490c      	ldr	r1, [pc, #48]	; (900011bc <__NVIC_SetPriority+0x4c>)
9000118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000118e:	0112      	lsls	r2, r2, #4
90001190:	b2d2      	uxtb	r2, r2
90001192:	440b      	add	r3, r1
90001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90001198:	e00a      	b.n	900011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000119a:	683b      	ldr	r3, [r7, #0]
9000119c:	b2da      	uxtb	r2, r3
9000119e:	4908      	ldr	r1, [pc, #32]	; (900011c0 <__NVIC_SetPriority+0x50>)
900011a0:	88fb      	ldrh	r3, [r7, #6]
900011a2:	f003 030f 	and.w	r3, r3, #15
900011a6:	3b04      	subs	r3, #4
900011a8:	0112      	lsls	r2, r2, #4
900011aa:	b2d2      	uxtb	r2, r2
900011ac:	440b      	add	r3, r1
900011ae:	761a      	strb	r2, [r3, #24]
}
900011b0:	bf00      	nop
900011b2:	370c      	adds	r7, #12
900011b4:	46bd      	mov	sp, r7
900011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900011ba:	4770      	bx	lr
900011bc:	e000e100 	.word	0xe000e100
900011c0:	e000ed00 	.word	0xe000ed00

900011c4 <NVIC_EncodePriority>:
{
900011c4:	b480      	push	{r7}
900011c6:	b089      	sub	sp, #36	; 0x24
900011c8:	af00      	add	r7, sp, #0
900011ca:	60f8      	str	r0, [r7, #12]
900011cc:	60b9      	str	r1, [r7, #8]
900011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900011d0:	68fb      	ldr	r3, [r7, #12]
900011d2:	f003 0307 	and.w	r3, r3, #7
900011d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900011d8:	69fb      	ldr	r3, [r7, #28]
900011da:	f1c3 0307 	rsb	r3, r3, #7
900011de:	2b04      	cmp	r3, #4
900011e0:	bf28      	it	cs
900011e2:	2304      	movcs	r3, #4
900011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900011e6:	69fb      	ldr	r3, [r7, #28]
900011e8:	3304      	adds	r3, #4
900011ea:	2b06      	cmp	r3, #6
900011ec:	d902      	bls.n	900011f4 <NVIC_EncodePriority+0x30>
900011ee:	69fb      	ldr	r3, [r7, #28]
900011f0:	3b03      	subs	r3, #3
900011f2:	e000      	b.n	900011f6 <NVIC_EncodePriority+0x32>
900011f4:	2300      	movs	r3, #0
900011f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
900011fc:	69bb      	ldr	r3, [r7, #24]
900011fe:	fa02 f303 	lsl.w	r3, r2, r3
90001202:	43da      	mvns	r2, r3
90001204:	68bb      	ldr	r3, [r7, #8]
90001206:	401a      	ands	r2, r3
90001208:	697b      	ldr	r3, [r7, #20]
9000120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
9000120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90001210:	697b      	ldr	r3, [r7, #20]
90001212:	fa01 f303 	lsl.w	r3, r1, r3
90001216:	43d9      	mvns	r1, r3
90001218:	687b      	ldr	r3, [r7, #4]
9000121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000121c:	4313      	orrs	r3, r2
}
9000121e:	4618      	mov	r0, r3
90001220:	3724      	adds	r7, #36	; 0x24
90001222:	46bd      	mov	sp, r7
90001224:	f85d 7b04 	ldr.w	r7, [sp], #4
90001228:	4770      	bx	lr

9000122a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
9000122a:	b580      	push	{r7, lr}
9000122c:	b082      	sub	sp, #8
9000122e:	af00      	add	r7, sp, #0
90001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001232:	6878      	ldr	r0, [r7, #4]
90001234:	f7ff ff4c 	bl	900010d0 <__NVIC_SetPriorityGrouping>
}
90001238:	bf00      	nop
9000123a:	3708      	adds	r7, #8
9000123c:	46bd      	mov	sp, r7
9000123e:	bd80      	pop	{r7, pc}

90001240 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90001240:	b580      	push	{r7, lr}
90001242:	b086      	sub	sp, #24
90001244:	af00      	add	r7, sp, #0
90001246:	4603      	mov	r3, r0
90001248:	60b9      	str	r1, [r7, #8]
9000124a:	607a      	str	r2, [r7, #4]
9000124c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
9000124e:	f7ff ff63 	bl	90001118 <__NVIC_GetPriorityGrouping>
90001252:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001254:	687a      	ldr	r2, [r7, #4]
90001256:	68b9      	ldr	r1, [r7, #8]
90001258:	6978      	ldr	r0, [r7, #20]
9000125a:	f7ff ffb3 	bl	900011c4 <NVIC_EncodePriority>
9000125e:	4602      	mov	r2, r0
90001260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90001264:	4611      	mov	r1, r2
90001266:	4618      	mov	r0, r3
90001268:	f7ff ff82 	bl	90001170 <__NVIC_SetPriority>
}
9000126c:	bf00      	nop
9000126e:	3718      	adds	r7, #24
90001270:	46bd      	mov	sp, r7
90001272:	bd80      	pop	{r7, pc}

90001274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001274:	b580      	push	{r7, lr}
90001276:	b082      	sub	sp, #8
90001278:	af00      	add	r7, sp, #0
9000127a:	4603      	mov	r3, r0
9000127c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
9000127e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90001282:	4618      	mov	r0, r3
90001284:	f7ff ff56 	bl	90001134 <__NVIC_EnableIRQ>
}
90001288:	bf00      	nop
9000128a:	3708      	adds	r7, #8
9000128c:	46bd      	mov	sp, r7
9000128e:	bd80      	pop	{r7, pc}

90001290 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90001290:	b480      	push	{r7}
90001292:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90001294:	f3bf 8f5f 	dmb	sy
}
90001298:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000129a:	4b07      	ldr	r3, [pc, #28]	; (900012b8 <HAL_MPU_Disable+0x28>)
9000129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000129e:	4a06      	ldr	r2, [pc, #24]	; (900012b8 <HAL_MPU_Disable+0x28>)
900012a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900012a4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900012a6:	4b05      	ldr	r3, [pc, #20]	; (900012bc <HAL_MPU_Disable+0x2c>)
900012a8:	2200      	movs	r2, #0
900012aa:	605a      	str	r2, [r3, #4]
}
900012ac:	bf00      	nop
900012ae:	46bd      	mov	sp, r7
900012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900012b4:	4770      	bx	lr
900012b6:	bf00      	nop
900012b8:	e000ed00 	.word	0xe000ed00
900012bc:	e000ed90 	.word	0xe000ed90

900012c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900012c0:	b480      	push	{r7}
900012c2:	b083      	sub	sp, #12
900012c4:	af00      	add	r7, sp, #0
900012c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900012c8:	4a0b      	ldr	r2, [pc, #44]	; (900012f8 <HAL_MPU_Enable+0x38>)
900012ca:	687b      	ldr	r3, [r7, #4]
900012cc:	f043 0301 	orr.w	r3, r3, #1
900012d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900012d2:	4b0a      	ldr	r3, [pc, #40]	; (900012fc <HAL_MPU_Enable+0x3c>)
900012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900012d6:	4a09      	ldr	r2, [pc, #36]	; (900012fc <HAL_MPU_Enable+0x3c>)
900012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900012dc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900012de:	f3bf 8f4f 	dsb	sy
}
900012e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900012e4:	f3bf 8f6f 	isb	sy
}
900012e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900012ea:	bf00      	nop
900012ec:	370c      	adds	r7, #12
900012ee:	46bd      	mov	sp, r7
900012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900012f4:	4770      	bx	lr
900012f6:	bf00      	nop
900012f8:	e000ed90 	.word	0xe000ed90
900012fc:	e000ed00 	.word	0xe000ed00

90001300 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
90001300:	b480      	push	{r7}
90001302:	b083      	sub	sp, #12
90001304:	af00      	add	r7, sp, #0
90001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90001308:	687b      	ldr	r3, [r7, #4]
9000130a:	785a      	ldrb	r2, [r3, #1]
9000130c:	4b1d      	ldr	r3, [pc, #116]	; (90001384 <HAL_MPU_ConfigRegion+0x84>)
9000130e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
90001310:	687b      	ldr	r3, [r7, #4]
90001312:	781b      	ldrb	r3, [r3, #0]
90001314:	2b00      	cmp	r3, #0
90001316:	d029      	beq.n	9000136c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90001318:	4a1a      	ldr	r2, [pc, #104]	; (90001384 <HAL_MPU_ConfigRegion+0x84>)
9000131a:	687b      	ldr	r3, [r7, #4]
9000131c:	685b      	ldr	r3, [r3, #4]
9000131e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001320:	687b      	ldr	r3, [r7, #4]
90001322:	7b1b      	ldrb	r3, [r3, #12]
90001324:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001326:	687b      	ldr	r3, [r7, #4]
90001328:	7adb      	ldrb	r3, [r3, #11]
9000132a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000132c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000132e:	687b      	ldr	r3, [r7, #4]
90001330:	7a9b      	ldrb	r3, [r3, #10]
90001332:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001336:	687b      	ldr	r3, [r7, #4]
90001338:	7b5b      	ldrb	r3, [r3, #13]
9000133a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000133c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000133e:	687b      	ldr	r3, [r7, #4]
90001340:	7b9b      	ldrb	r3, [r3, #14]
90001342:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001344:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001346:	687b      	ldr	r3, [r7, #4]
90001348:	7bdb      	ldrb	r3, [r3, #15]
9000134a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000134c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000134e:	687b      	ldr	r3, [r7, #4]
90001350:	7a5b      	ldrb	r3, [r3, #9]
90001352:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001354:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001356:	687b      	ldr	r3, [r7, #4]
90001358:	7a1b      	ldrb	r3, [r3, #8]
9000135a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000135c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000135e:	687a      	ldr	r2, [r7, #4]
90001360:	7812      	ldrb	r2, [r2, #0]
90001362:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001364:	4a07      	ldr	r2, [pc, #28]	; (90001384 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001366:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001368:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
9000136a:	e005      	b.n	90001378 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
9000136c:	4b05      	ldr	r3, [pc, #20]	; (90001384 <HAL_MPU_ConfigRegion+0x84>)
9000136e:	2200      	movs	r2, #0
90001370:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
90001372:	4b04      	ldr	r3, [pc, #16]	; (90001384 <HAL_MPU_ConfigRegion+0x84>)
90001374:	2200      	movs	r2, #0
90001376:	611a      	str	r2, [r3, #16]
}
90001378:	bf00      	nop
9000137a:	370c      	adds	r7, #12
9000137c:	46bd      	mov	sp, r7
9000137e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001382:	4770      	bx	lr
90001384:	e000ed90 	.word	0xe000ed90

90001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001388:	b480      	push	{r7}
9000138a:	b089      	sub	sp, #36	; 0x24
9000138c:	af00      	add	r7, sp, #0
9000138e:	6078      	str	r0, [r7, #4]
90001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90001392:	2300      	movs	r3, #0
90001394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90001396:	4b89      	ldr	r3, [pc, #548]	; (900015bc <HAL_GPIO_Init+0x234>)
90001398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000139a:	e194      	b.n	900016c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000139c:	683b      	ldr	r3, [r7, #0]
9000139e:	681a      	ldr	r2, [r3, #0]
900013a0:	2101      	movs	r1, #1
900013a2:	69fb      	ldr	r3, [r7, #28]
900013a4:	fa01 f303 	lsl.w	r3, r1, r3
900013a8:	4013      	ands	r3, r2
900013aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900013ac:	693b      	ldr	r3, [r7, #16]
900013ae:	2b00      	cmp	r3, #0
900013b0:	f000 8186 	beq.w	900016c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900013b4:	683b      	ldr	r3, [r7, #0]
900013b6:	685b      	ldr	r3, [r3, #4]
900013b8:	f003 0303 	and.w	r3, r3, #3
900013bc:	2b01      	cmp	r3, #1
900013be:	d005      	beq.n	900013cc <HAL_GPIO_Init+0x44>
900013c0:	683b      	ldr	r3, [r7, #0]
900013c2:	685b      	ldr	r3, [r3, #4]
900013c4:	f003 0303 	and.w	r3, r3, #3
900013c8:	2b02      	cmp	r3, #2
900013ca:	d130      	bne.n	9000142e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900013cc:	687b      	ldr	r3, [r7, #4]
900013ce:	689b      	ldr	r3, [r3, #8]
900013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900013d2:	69fb      	ldr	r3, [r7, #28]
900013d4:	005b      	lsls	r3, r3, #1
900013d6:	2203      	movs	r2, #3
900013d8:	fa02 f303 	lsl.w	r3, r2, r3
900013dc:	43db      	mvns	r3, r3
900013de:	69ba      	ldr	r2, [r7, #24]
900013e0:	4013      	ands	r3, r2
900013e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900013e4:	683b      	ldr	r3, [r7, #0]
900013e6:	68da      	ldr	r2, [r3, #12]
900013e8:	69fb      	ldr	r3, [r7, #28]
900013ea:	005b      	lsls	r3, r3, #1
900013ec:	fa02 f303 	lsl.w	r3, r2, r3
900013f0:	69ba      	ldr	r2, [r7, #24]
900013f2:	4313      	orrs	r3, r2
900013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900013f6:	687b      	ldr	r3, [r7, #4]
900013f8:	69ba      	ldr	r2, [r7, #24]
900013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900013fc:	687b      	ldr	r3, [r7, #4]
900013fe:	685b      	ldr	r3, [r3, #4]
90001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90001402:	2201      	movs	r2, #1
90001404:	69fb      	ldr	r3, [r7, #28]
90001406:	fa02 f303 	lsl.w	r3, r2, r3
9000140a:	43db      	mvns	r3, r3
9000140c:	69ba      	ldr	r2, [r7, #24]
9000140e:	4013      	ands	r3, r2
90001410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90001412:	683b      	ldr	r3, [r7, #0]
90001414:	685b      	ldr	r3, [r3, #4]
90001416:	091b      	lsrs	r3, r3, #4
90001418:	f003 0201 	and.w	r2, r3, #1
9000141c:	69fb      	ldr	r3, [r7, #28]
9000141e:	fa02 f303 	lsl.w	r3, r2, r3
90001422:	69ba      	ldr	r2, [r7, #24]
90001424:	4313      	orrs	r3, r2
90001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90001428:	687b      	ldr	r3, [r7, #4]
9000142a:	69ba      	ldr	r2, [r7, #24]
9000142c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000142e:	683b      	ldr	r3, [r7, #0]
90001430:	685b      	ldr	r3, [r3, #4]
90001432:	f003 0303 	and.w	r3, r3, #3
90001436:	2b03      	cmp	r3, #3
90001438:	d017      	beq.n	9000146a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
9000143a:	687b      	ldr	r3, [r7, #4]
9000143c:	68db      	ldr	r3, [r3, #12]
9000143e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90001440:	69fb      	ldr	r3, [r7, #28]
90001442:	005b      	lsls	r3, r3, #1
90001444:	2203      	movs	r2, #3
90001446:	fa02 f303 	lsl.w	r3, r2, r3
9000144a:	43db      	mvns	r3, r3
9000144c:	69ba      	ldr	r2, [r7, #24]
9000144e:	4013      	ands	r3, r2
90001450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90001452:	683b      	ldr	r3, [r7, #0]
90001454:	689a      	ldr	r2, [r3, #8]
90001456:	69fb      	ldr	r3, [r7, #28]
90001458:	005b      	lsls	r3, r3, #1
9000145a:	fa02 f303 	lsl.w	r3, r2, r3
9000145e:	69ba      	ldr	r2, [r7, #24]
90001460:	4313      	orrs	r3, r2
90001462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90001464:	687b      	ldr	r3, [r7, #4]
90001466:	69ba      	ldr	r2, [r7, #24]
90001468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000146a:	683b      	ldr	r3, [r7, #0]
9000146c:	685b      	ldr	r3, [r3, #4]
9000146e:	f003 0303 	and.w	r3, r3, #3
90001472:	2b02      	cmp	r3, #2
90001474:	d123      	bne.n	900014be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90001476:	69fb      	ldr	r3, [r7, #28]
90001478:	08da      	lsrs	r2, r3, #3
9000147a:	687b      	ldr	r3, [r7, #4]
9000147c:	3208      	adds	r2, #8
9000147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90001484:	69fb      	ldr	r3, [r7, #28]
90001486:	f003 0307 	and.w	r3, r3, #7
9000148a:	009b      	lsls	r3, r3, #2
9000148c:	220f      	movs	r2, #15
9000148e:	fa02 f303 	lsl.w	r3, r2, r3
90001492:	43db      	mvns	r3, r3
90001494:	69ba      	ldr	r2, [r7, #24]
90001496:	4013      	ands	r3, r2
90001498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000149a:	683b      	ldr	r3, [r7, #0]
9000149c:	691a      	ldr	r2, [r3, #16]
9000149e:	69fb      	ldr	r3, [r7, #28]
900014a0:	f003 0307 	and.w	r3, r3, #7
900014a4:	009b      	lsls	r3, r3, #2
900014a6:	fa02 f303 	lsl.w	r3, r2, r3
900014aa:	69ba      	ldr	r2, [r7, #24]
900014ac:	4313      	orrs	r3, r2
900014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900014b0:	69fb      	ldr	r3, [r7, #28]
900014b2:	08da      	lsrs	r2, r3, #3
900014b4:	687b      	ldr	r3, [r7, #4]
900014b6:	3208      	adds	r2, #8
900014b8:	69b9      	ldr	r1, [r7, #24]
900014ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900014be:	687b      	ldr	r3, [r7, #4]
900014c0:	681b      	ldr	r3, [r3, #0]
900014c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900014c4:	69fb      	ldr	r3, [r7, #28]
900014c6:	005b      	lsls	r3, r3, #1
900014c8:	2203      	movs	r2, #3
900014ca:	fa02 f303 	lsl.w	r3, r2, r3
900014ce:	43db      	mvns	r3, r3
900014d0:	69ba      	ldr	r2, [r7, #24]
900014d2:	4013      	ands	r3, r2
900014d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900014d6:	683b      	ldr	r3, [r7, #0]
900014d8:	685b      	ldr	r3, [r3, #4]
900014da:	f003 0203 	and.w	r2, r3, #3
900014de:	69fb      	ldr	r3, [r7, #28]
900014e0:	005b      	lsls	r3, r3, #1
900014e2:	fa02 f303 	lsl.w	r3, r2, r3
900014e6:	69ba      	ldr	r2, [r7, #24]
900014e8:	4313      	orrs	r3, r2
900014ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900014ec:	687b      	ldr	r3, [r7, #4]
900014ee:	69ba      	ldr	r2, [r7, #24]
900014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900014f2:	683b      	ldr	r3, [r7, #0]
900014f4:	685b      	ldr	r3, [r3, #4]
900014f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900014fa:	2b00      	cmp	r3, #0
900014fc:	f000 80e0 	beq.w	900016c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001500:	4b2f      	ldr	r3, [pc, #188]	; (900015c0 <HAL_GPIO_Init+0x238>)
90001502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001506:	4a2e      	ldr	r2, [pc, #184]	; (900015c0 <HAL_GPIO_Init+0x238>)
90001508:	f043 0302 	orr.w	r3, r3, #2
9000150c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001510:	4b2b      	ldr	r3, [pc, #172]	; (900015c0 <HAL_GPIO_Init+0x238>)
90001512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001516:	f003 0302 	and.w	r3, r3, #2
9000151a:	60fb      	str	r3, [r7, #12]
9000151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
9000151e:	4a29      	ldr	r2, [pc, #164]	; (900015c4 <HAL_GPIO_Init+0x23c>)
90001520:	69fb      	ldr	r3, [r7, #28]
90001522:	089b      	lsrs	r3, r3, #2
90001524:	3302      	adds	r3, #2
90001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000152c:	69fb      	ldr	r3, [r7, #28]
9000152e:	f003 0303 	and.w	r3, r3, #3
90001532:	009b      	lsls	r3, r3, #2
90001534:	220f      	movs	r2, #15
90001536:	fa02 f303 	lsl.w	r3, r2, r3
9000153a:	43db      	mvns	r3, r3
9000153c:	69ba      	ldr	r2, [r7, #24]
9000153e:	4013      	ands	r3, r2
90001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90001542:	687b      	ldr	r3, [r7, #4]
90001544:	4a20      	ldr	r2, [pc, #128]	; (900015c8 <HAL_GPIO_Init+0x240>)
90001546:	4293      	cmp	r3, r2
90001548:	d052      	beq.n	900015f0 <HAL_GPIO_Init+0x268>
9000154a:	687b      	ldr	r3, [r7, #4]
9000154c:	4a1f      	ldr	r2, [pc, #124]	; (900015cc <HAL_GPIO_Init+0x244>)
9000154e:	4293      	cmp	r3, r2
90001550:	d031      	beq.n	900015b6 <HAL_GPIO_Init+0x22e>
90001552:	687b      	ldr	r3, [r7, #4]
90001554:	4a1e      	ldr	r2, [pc, #120]	; (900015d0 <HAL_GPIO_Init+0x248>)
90001556:	4293      	cmp	r3, r2
90001558:	d02b      	beq.n	900015b2 <HAL_GPIO_Init+0x22a>
9000155a:	687b      	ldr	r3, [r7, #4]
9000155c:	4a1d      	ldr	r2, [pc, #116]	; (900015d4 <HAL_GPIO_Init+0x24c>)
9000155e:	4293      	cmp	r3, r2
90001560:	d025      	beq.n	900015ae <HAL_GPIO_Init+0x226>
90001562:	687b      	ldr	r3, [r7, #4]
90001564:	4a1c      	ldr	r2, [pc, #112]	; (900015d8 <HAL_GPIO_Init+0x250>)
90001566:	4293      	cmp	r3, r2
90001568:	d01f      	beq.n	900015aa <HAL_GPIO_Init+0x222>
9000156a:	687b      	ldr	r3, [r7, #4]
9000156c:	4a1b      	ldr	r2, [pc, #108]	; (900015dc <HAL_GPIO_Init+0x254>)
9000156e:	4293      	cmp	r3, r2
90001570:	d019      	beq.n	900015a6 <HAL_GPIO_Init+0x21e>
90001572:	687b      	ldr	r3, [r7, #4]
90001574:	4a1a      	ldr	r2, [pc, #104]	; (900015e0 <HAL_GPIO_Init+0x258>)
90001576:	4293      	cmp	r3, r2
90001578:	d013      	beq.n	900015a2 <HAL_GPIO_Init+0x21a>
9000157a:	687b      	ldr	r3, [r7, #4]
9000157c:	4a19      	ldr	r2, [pc, #100]	; (900015e4 <HAL_GPIO_Init+0x25c>)
9000157e:	4293      	cmp	r3, r2
90001580:	d00d      	beq.n	9000159e <HAL_GPIO_Init+0x216>
90001582:	687b      	ldr	r3, [r7, #4]
90001584:	4a18      	ldr	r2, [pc, #96]	; (900015e8 <HAL_GPIO_Init+0x260>)
90001586:	4293      	cmp	r3, r2
90001588:	d007      	beq.n	9000159a <HAL_GPIO_Init+0x212>
9000158a:	687b      	ldr	r3, [r7, #4]
9000158c:	4a17      	ldr	r2, [pc, #92]	; (900015ec <HAL_GPIO_Init+0x264>)
9000158e:	4293      	cmp	r3, r2
90001590:	d101      	bne.n	90001596 <HAL_GPIO_Init+0x20e>
90001592:	2309      	movs	r3, #9
90001594:	e02d      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
90001596:	230a      	movs	r3, #10
90001598:	e02b      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
9000159a:	2308      	movs	r3, #8
9000159c:	e029      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
9000159e:	2307      	movs	r3, #7
900015a0:	e027      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015a2:	2306      	movs	r3, #6
900015a4:	e025      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015a6:	2305      	movs	r3, #5
900015a8:	e023      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015aa:	2304      	movs	r3, #4
900015ac:	e021      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015ae:	2303      	movs	r3, #3
900015b0:	e01f      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015b2:	2302      	movs	r3, #2
900015b4:	e01d      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015b6:	2301      	movs	r3, #1
900015b8:	e01b      	b.n	900015f2 <HAL_GPIO_Init+0x26a>
900015ba:	bf00      	nop
900015bc:	58000080 	.word	0x58000080
900015c0:	58024400 	.word	0x58024400
900015c4:	58000400 	.word	0x58000400
900015c8:	58020000 	.word	0x58020000
900015cc:	58020400 	.word	0x58020400
900015d0:	58020800 	.word	0x58020800
900015d4:	58020c00 	.word	0x58020c00
900015d8:	58021000 	.word	0x58021000
900015dc:	58021400 	.word	0x58021400
900015e0:	58021800 	.word	0x58021800
900015e4:	58021c00 	.word	0x58021c00
900015e8:	58022000 	.word	0x58022000
900015ec:	58022400 	.word	0x58022400
900015f0:	2300      	movs	r3, #0
900015f2:	69fa      	ldr	r2, [r7, #28]
900015f4:	f002 0203 	and.w	r2, r2, #3
900015f8:	0092      	lsls	r2, r2, #2
900015fa:	4093      	lsls	r3, r2
900015fc:	69ba      	ldr	r2, [r7, #24]
900015fe:	4313      	orrs	r3, r2
90001600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90001602:	4938      	ldr	r1, [pc, #224]	; (900016e4 <HAL_GPIO_Init+0x35c>)
90001604:	69fb      	ldr	r3, [r7, #28]
90001606:	089b      	lsrs	r3, r3, #2
90001608:	3302      	adds	r3, #2
9000160a:	69ba      	ldr	r2, [r7, #24]
9000160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90001614:	681b      	ldr	r3, [r3, #0]
90001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001618:	693b      	ldr	r3, [r7, #16]
9000161a:	43db      	mvns	r3, r3
9000161c:	69ba      	ldr	r2, [r7, #24]
9000161e:	4013      	ands	r3, r2
90001620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90001622:	683b      	ldr	r3, [r7, #0]
90001624:	685b      	ldr	r3, [r3, #4]
90001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000162a:	2b00      	cmp	r3, #0
9000162c:	d003      	beq.n	90001636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
9000162e:	69ba      	ldr	r2, [r7, #24]
90001630:	693b      	ldr	r3, [r7, #16]
90001632:	4313      	orrs	r3, r2
90001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90001636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000163a:	69bb      	ldr	r3, [r7, #24]
9000163c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
9000163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90001642:	685b      	ldr	r3, [r3, #4]
90001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001646:	693b      	ldr	r3, [r7, #16]
90001648:	43db      	mvns	r3, r3
9000164a:	69ba      	ldr	r2, [r7, #24]
9000164c:	4013      	ands	r3, r2
9000164e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90001650:	683b      	ldr	r3, [r7, #0]
90001652:	685b      	ldr	r3, [r3, #4]
90001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90001658:	2b00      	cmp	r3, #0
9000165a:	d003      	beq.n	90001664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
9000165c:	69ba      	ldr	r2, [r7, #24]
9000165e:	693b      	ldr	r3, [r7, #16]
90001660:	4313      	orrs	r3, r2
90001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90001668:	69bb      	ldr	r3, [r7, #24]
9000166a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
9000166c:	697b      	ldr	r3, [r7, #20]
9000166e:	685b      	ldr	r3, [r3, #4]
90001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001672:	693b      	ldr	r3, [r7, #16]
90001674:	43db      	mvns	r3, r3
90001676:	69ba      	ldr	r2, [r7, #24]
90001678:	4013      	ands	r3, r2
9000167a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000167c:	683b      	ldr	r3, [r7, #0]
9000167e:	685b      	ldr	r3, [r3, #4]
90001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001684:	2b00      	cmp	r3, #0
90001686:	d003      	beq.n	90001690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90001688:	69ba      	ldr	r2, [r7, #24]
9000168a:	693b      	ldr	r3, [r7, #16]
9000168c:	4313      	orrs	r3, r2
9000168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90001690:	697b      	ldr	r3, [r7, #20]
90001692:	69ba      	ldr	r2, [r7, #24]
90001694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90001696:	697b      	ldr	r3, [r7, #20]
90001698:	681b      	ldr	r3, [r3, #0]
9000169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000169c:	693b      	ldr	r3, [r7, #16]
9000169e:	43db      	mvns	r3, r3
900016a0:	69ba      	ldr	r2, [r7, #24]
900016a2:	4013      	ands	r3, r2
900016a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900016a6:	683b      	ldr	r3, [r7, #0]
900016a8:	685b      	ldr	r3, [r3, #4]
900016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900016ae:	2b00      	cmp	r3, #0
900016b0:	d003      	beq.n	900016ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900016b2:	69ba      	ldr	r2, [r7, #24]
900016b4:	693b      	ldr	r3, [r7, #16]
900016b6:	4313      	orrs	r3, r2
900016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900016ba:	697b      	ldr	r3, [r7, #20]
900016bc:	69ba      	ldr	r2, [r7, #24]
900016be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900016c0:	69fb      	ldr	r3, [r7, #28]
900016c2:	3301      	adds	r3, #1
900016c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900016c6:	683b      	ldr	r3, [r7, #0]
900016c8:	681a      	ldr	r2, [r3, #0]
900016ca:	69fb      	ldr	r3, [r7, #28]
900016cc:	fa22 f303 	lsr.w	r3, r2, r3
900016d0:	2b00      	cmp	r3, #0
900016d2:	f47f ae63 	bne.w	9000139c <HAL_GPIO_Init+0x14>
  }
}
900016d6:	bf00      	nop
900016d8:	bf00      	nop
900016da:	3724      	adds	r7, #36	; 0x24
900016dc:	46bd      	mov	sp, r7
900016de:	f85d 7b04 	ldr.w	r7, [sp], #4
900016e2:	4770      	bx	lr
900016e4:	58000400 	.word	0x58000400

900016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900016e8:	b480      	push	{r7}
900016ea:	b083      	sub	sp, #12
900016ec:	af00      	add	r7, sp, #0
900016ee:	6078      	str	r0, [r7, #4]
900016f0:	460b      	mov	r3, r1
900016f2:	807b      	strh	r3, [r7, #2]
900016f4:	4613      	mov	r3, r2
900016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900016f8:	787b      	ldrb	r3, [r7, #1]
900016fa:	2b00      	cmp	r3, #0
900016fc:	d003      	beq.n	90001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900016fe:	887a      	ldrh	r2, [r7, #2]
90001700:	687b      	ldr	r3, [r7, #4]
90001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90001704:	e003      	b.n	9000170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90001706:	887b      	ldrh	r3, [r7, #2]
90001708:	041a      	lsls	r2, r3, #16
9000170a:	687b      	ldr	r3, [r7, #4]
9000170c:	619a      	str	r2, [r3, #24]
}
9000170e:	bf00      	nop
90001710:	370c      	adds	r7, #12
90001712:	46bd      	mov	sp, r7
90001714:	f85d 7b04 	ldr.w	r7, [sp], #4
90001718:	4770      	bx	lr
	...

9000171c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000171c:	b580      	push	{r7, lr}
9000171e:	b084      	sub	sp, #16
90001720:	af00      	add	r7, sp, #0
90001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90001724:	4b19      	ldr	r3, [pc, #100]	; (9000178c <HAL_PWREx_ConfigSupply+0x70>)
90001726:	68db      	ldr	r3, [r3, #12]
90001728:	f003 0304 	and.w	r3, r3, #4
9000172c:	2b04      	cmp	r3, #4
9000172e:	d00a      	beq.n	90001746 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90001730:	4b16      	ldr	r3, [pc, #88]	; (9000178c <HAL_PWREx_ConfigSupply+0x70>)
90001732:	68db      	ldr	r3, [r3, #12]
90001734:	f003 0307 	and.w	r3, r3, #7
90001738:	687a      	ldr	r2, [r7, #4]
9000173a:	429a      	cmp	r2, r3
9000173c:	d001      	beq.n	90001742 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000173e:	2301      	movs	r3, #1
90001740:	e01f      	b.n	90001782 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
90001742:	2300      	movs	r3, #0
90001744:	e01d      	b.n	90001782 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
90001746:	4b11      	ldr	r3, [pc, #68]	; (9000178c <HAL_PWREx_ConfigSupply+0x70>)
90001748:	68db      	ldr	r3, [r3, #12]
9000174a:	f023 0207 	bic.w	r2, r3, #7
9000174e:	490f      	ldr	r1, [pc, #60]	; (9000178c <HAL_PWREx_ConfigSupply+0x70>)
90001750:	687b      	ldr	r3, [r7, #4]
90001752:	4313      	orrs	r3, r2
90001754:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
90001756:	f7ff fca3 	bl	900010a0 <HAL_GetTick>
9000175a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000175c:	e009      	b.n	90001772 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000175e:	f7ff fc9f 	bl	900010a0 <HAL_GetTick>
90001762:	4602      	mov	r2, r0
90001764:	68fb      	ldr	r3, [r7, #12]
90001766:	1ad3      	subs	r3, r2, r3
90001768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
9000176c:	d901      	bls.n	90001772 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
9000176e:	2301      	movs	r3, #1
90001770:	e007      	b.n	90001782 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90001772:	4b06      	ldr	r3, [pc, #24]	; (9000178c <HAL_PWREx_ConfigSupply+0x70>)
90001774:	685b      	ldr	r3, [r3, #4]
90001776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
9000177a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000177e:	d1ee      	bne.n	9000175e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
90001780:	2300      	movs	r3, #0
}
90001782:	4618      	mov	r0, r3
90001784:	3710      	adds	r7, #16
90001786:	46bd      	mov	sp, r7
90001788:	bd80      	pop	{r7, pc}
9000178a:	bf00      	nop
9000178c:	58024800 	.word	0x58024800

90001790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90001790:	b580      	push	{r7, lr}
90001792:	b08c      	sub	sp, #48	; 0x30
90001794:	af00      	add	r7, sp, #0
90001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
90001798:	687b      	ldr	r3, [r7, #4]
9000179a:	2b00      	cmp	r3, #0
9000179c:	d102      	bne.n	900017a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
9000179e:	2301      	movs	r3, #1
900017a0:	f000 bc1d 	b.w	90001fde <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900017a4:	687b      	ldr	r3, [r7, #4]
900017a6:	681b      	ldr	r3, [r3, #0]
900017a8:	f003 0301 	and.w	r3, r3, #1
900017ac:	2b00      	cmp	r3, #0
900017ae:	f000 8087 	beq.w	900018c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900017b2:	4b99      	ldr	r3, [pc, #612]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900017b4:	691b      	ldr	r3, [r3, #16]
900017b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
900017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900017bc:	4b96      	ldr	r3, [pc, #600]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900017c4:	2b10      	cmp	r3, #16
900017c6:	d007      	beq.n	900017d8 <HAL_RCC_OscConfig+0x48>
900017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900017ca:	2b18      	cmp	r3, #24
900017cc:	d110      	bne.n	900017f0 <HAL_RCC_OscConfig+0x60>
900017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
900017d0:	f003 0303 	and.w	r3, r3, #3
900017d4:	2b02      	cmp	r3, #2
900017d6:	d10b      	bne.n	900017f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900017d8:	4b8f      	ldr	r3, [pc, #572]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900017da:	681b      	ldr	r3, [r3, #0]
900017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900017e0:	2b00      	cmp	r3, #0
900017e2:	d06c      	beq.n	900018be <HAL_RCC_OscConfig+0x12e>
900017e4:	687b      	ldr	r3, [r7, #4]
900017e6:	685b      	ldr	r3, [r3, #4]
900017e8:	2b00      	cmp	r3, #0
900017ea:	d168      	bne.n	900018be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
900017ec:	2301      	movs	r3, #1
900017ee:	e3f6      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
900017f0:	687b      	ldr	r3, [r7, #4]
900017f2:	685b      	ldr	r3, [r3, #4]
900017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900017f8:	d106      	bne.n	90001808 <HAL_RCC_OscConfig+0x78>
900017fa:	4b87      	ldr	r3, [pc, #540]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900017fc:	681b      	ldr	r3, [r3, #0]
900017fe:	4a86      	ldr	r2, [pc, #536]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001804:	6013      	str	r3, [r2, #0]
90001806:	e02e      	b.n	90001866 <HAL_RCC_OscConfig+0xd6>
90001808:	687b      	ldr	r3, [r7, #4]
9000180a:	685b      	ldr	r3, [r3, #4]
9000180c:	2b00      	cmp	r3, #0
9000180e:	d10c      	bne.n	9000182a <HAL_RCC_OscConfig+0x9a>
90001810:	4b81      	ldr	r3, [pc, #516]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001812:	681b      	ldr	r3, [r3, #0]
90001814:	4a80      	ldr	r2, [pc, #512]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000181a:	6013      	str	r3, [r2, #0]
9000181c:	4b7e      	ldr	r3, [pc, #504]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000181e:	681b      	ldr	r3, [r3, #0]
90001820:	4a7d      	ldr	r2, [pc, #500]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001826:	6013      	str	r3, [r2, #0]
90001828:	e01d      	b.n	90001866 <HAL_RCC_OscConfig+0xd6>
9000182a:	687b      	ldr	r3, [r7, #4]
9000182c:	685b      	ldr	r3, [r3, #4]
9000182e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90001832:	d10c      	bne.n	9000184e <HAL_RCC_OscConfig+0xbe>
90001834:	4b78      	ldr	r3, [pc, #480]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001836:	681b      	ldr	r3, [r3, #0]
90001838:	4a77      	ldr	r2, [pc, #476]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000183a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000183e:	6013      	str	r3, [r2, #0]
90001840:	4b75      	ldr	r3, [pc, #468]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001842:	681b      	ldr	r3, [r3, #0]
90001844:	4a74      	ldr	r2, [pc, #464]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000184a:	6013      	str	r3, [r2, #0]
9000184c:	e00b      	b.n	90001866 <HAL_RCC_OscConfig+0xd6>
9000184e:	4b72      	ldr	r3, [pc, #456]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001850:	681b      	ldr	r3, [r3, #0]
90001852:	4a71      	ldr	r2, [pc, #452]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90001858:	6013      	str	r3, [r2, #0]
9000185a:	4b6f      	ldr	r3, [pc, #444]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000185c:	681b      	ldr	r3, [r3, #0]
9000185e:	4a6e      	ldr	r2, [pc, #440]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001864:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
90001866:	687b      	ldr	r3, [r7, #4]
90001868:	685b      	ldr	r3, [r3, #4]
9000186a:	2b00      	cmp	r3, #0
9000186c:	d013      	beq.n	90001896 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000186e:	f7ff fc17 	bl	900010a0 <HAL_GetTick>
90001872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90001874:	e008      	b.n	90001888 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
90001876:	f7ff fc13 	bl	900010a0 <HAL_GetTick>
9000187a:	4602      	mov	r2, r0
9000187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000187e:	1ad3      	subs	r3, r2, r3
90001880:	2b64      	cmp	r3, #100	; 0x64
90001882:	d901      	bls.n	90001888 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
90001884:	2303      	movs	r3, #3
90001886:	e3aa      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90001888:	4b63      	ldr	r3, [pc, #396]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000188a:	681b      	ldr	r3, [r3, #0]
9000188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001890:	2b00      	cmp	r3, #0
90001892:	d0f0      	beq.n	90001876 <HAL_RCC_OscConfig+0xe6>
90001894:	e014      	b.n	900018c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001896:	f7ff fc03 	bl	900010a0 <HAL_GetTick>
9000189a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000189c:	e008      	b.n	900018b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
9000189e:	f7ff fbff 	bl	900010a0 <HAL_GetTick>
900018a2:	4602      	mov	r2, r0
900018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900018a6:	1ad3      	subs	r3, r2, r3
900018a8:	2b64      	cmp	r3, #100	; 0x64
900018aa:	d901      	bls.n	900018b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
900018ac:	2303      	movs	r3, #3
900018ae:	e396      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900018b0:	4b59      	ldr	r3, [pc, #356]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900018b2:	681b      	ldr	r3, [r3, #0]
900018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900018b8:	2b00      	cmp	r3, #0
900018ba:	d1f0      	bne.n	9000189e <HAL_RCC_OscConfig+0x10e>
900018bc:	e000      	b.n	900018c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900018be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900018c0:	687b      	ldr	r3, [r7, #4]
900018c2:	681b      	ldr	r3, [r3, #0]
900018c4:	f003 0302 	and.w	r3, r3, #2
900018c8:	2b00      	cmp	r3, #0
900018ca:	f000 80cb 	beq.w	90001a64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900018ce:	4b52      	ldr	r3, [pc, #328]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900018d0:	691b      	ldr	r3, [r3, #16]
900018d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
900018d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900018d8:	4b4f      	ldr	r3, [pc, #316]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900018dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
900018de:	6a3b      	ldr	r3, [r7, #32]
900018e0:	2b00      	cmp	r3, #0
900018e2:	d007      	beq.n	900018f4 <HAL_RCC_OscConfig+0x164>
900018e4:	6a3b      	ldr	r3, [r7, #32]
900018e6:	2b18      	cmp	r3, #24
900018e8:	d156      	bne.n	90001998 <HAL_RCC_OscConfig+0x208>
900018ea:	69fb      	ldr	r3, [r7, #28]
900018ec:	f003 0303 	and.w	r3, r3, #3
900018f0:	2b00      	cmp	r3, #0
900018f2:	d151      	bne.n	90001998 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900018f4:	4b48      	ldr	r3, [pc, #288]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900018f6:	681b      	ldr	r3, [r3, #0]
900018f8:	f003 0304 	and.w	r3, r3, #4
900018fc:	2b00      	cmp	r3, #0
900018fe:	d005      	beq.n	9000190c <HAL_RCC_OscConfig+0x17c>
90001900:	687b      	ldr	r3, [r7, #4]
90001902:	68db      	ldr	r3, [r3, #12]
90001904:	2b00      	cmp	r3, #0
90001906:	d101      	bne.n	9000190c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
90001908:	2301      	movs	r3, #1
9000190a:	e368      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000190c:	4b42      	ldr	r3, [pc, #264]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000190e:	681b      	ldr	r3, [r3, #0]
90001910:	f023 0219 	bic.w	r2, r3, #25
90001914:	687b      	ldr	r3, [r7, #4]
90001916:	68db      	ldr	r3, [r3, #12]
90001918:	493f      	ldr	r1, [pc, #252]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000191a:	4313      	orrs	r3, r2
9000191c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
9000191e:	f7ff fbbf 	bl	900010a0 <HAL_GetTick>
90001922:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90001924:	e008      	b.n	90001938 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90001926:	f7ff fbbb 	bl	900010a0 <HAL_GetTick>
9000192a:	4602      	mov	r2, r0
9000192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000192e:	1ad3      	subs	r3, r2, r3
90001930:	2b02      	cmp	r3, #2
90001932:	d901      	bls.n	90001938 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
90001934:	2303      	movs	r3, #3
90001936:	e352      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90001938:	4b37      	ldr	r3, [pc, #220]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000193a:	681b      	ldr	r3, [r3, #0]
9000193c:	f003 0304 	and.w	r3, r3, #4
90001940:	2b00      	cmp	r3, #0
90001942:	d0f0      	beq.n	90001926 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001944:	f7ff fbb8 	bl	900010b8 <HAL_GetREVID>
90001948:	4603      	mov	r3, r0
9000194a:	f241 0203 	movw	r2, #4099	; 0x1003
9000194e:	4293      	cmp	r3, r2
90001950:	d817      	bhi.n	90001982 <HAL_RCC_OscConfig+0x1f2>
90001952:	687b      	ldr	r3, [r7, #4]
90001954:	691b      	ldr	r3, [r3, #16]
90001956:	2b40      	cmp	r3, #64	; 0x40
90001958:	d108      	bne.n	9000196c <HAL_RCC_OscConfig+0x1dc>
9000195a:	4b2f      	ldr	r3, [pc, #188]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000195c:	685b      	ldr	r3, [r3, #4]
9000195e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90001962:	4a2d      	ldr	r2, [pc, #180]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001968:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000196a:	e07b      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000196c:	4b2a      	ldr	r3, [pc, #168]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000196e:	685b      	ldr	r3, [r3, #4]
90001970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90001974:	687b      	ldr	r3, [r7, #4]
90001976:	691b      	ldr	r3, [r3, #16]
90001978:	031b      	lsls	r3, r3, #12
9000197a:	4927      	ldr	r1, [pc, #156]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
9000197c:	4313      	orrs	r3, r2
9000197e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90001980:	e070      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001982:	4b25      	ldr	r3, [pc, #148]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001984:	685b      	ldr	r3, [r3, #4]
90001986:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
9000198a:	687b      	ldr	r3, [r7, #4]
9000198c:	691b      	ldr	r3, [r3, #16]
9000198e:	061b      	lsls	r3, r3, #24
90001990:	4921      	ldr	r1, [pc, #132]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001992:	4313      	orrs	r3, r2
90001994:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90001996:	e065      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
90001998:	687b      	ldr	r3, [r7, #4]
9000199a:	68db      	ldr	r3, [r3, #12]
9000199c:	2b00      	cmp	r3, #0
9000199e:	d048      	beq.n	90001a32 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900019a0:	4b1d      	ldr	r3, [pc, #116]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900019a2:	681b      	ldr	r3, [r3, #0]
900019a4:	f023 0219 	bic.w	r2, r3, #25
900019a8:	687b      	ldr	r3, [r7, #4]
900019aa:	68db      	ldr	r3, [r3, #12]
900019ac:	491a      	ldr	r1, [pc, #104]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900019ae:	4313      	orrs	r3, r2
900019b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900019b2:	f7ff fb75 	bl	900010a0 <HAL_GetTick>
900019b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900019b8:	e008      	b.n	900019cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
900019ba:	f7ff fb71 	bl	900010a0 <HAL_GetTick>
900019be:	4602      	mov	r2, r0
900019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900019c2:	1ad3      	subs	r3, r2, r3
900019c4:	2b02      	cmp	r3, #2
900019c6:	d901      	bls.n	900019cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
900019c8:	2303      	movs	r3, #3
900019ca:	e308      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900019cc:	4b12      	ldr	r3, [pc, #72]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900019ce:	681b      	ldr	r3, [r3, #0]
900019d0:	f003 0304 	and.w	r3, r3, #4
900019d4:	2b00      	cmp	r3, #0
900019d6:	d0f0      	beq.n	900019ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900019d8:	f7ff fb6e 	bl	900010b8 <HAL_GetREVID>
900019dc:	4603      	mov	r3, r0
900019de:	f241 0203 	movw	r2, #4099	; 0x1003
900019e2:	4293      	cmp	r3, r2
900019e4:	d81a      	bhi.n	90001a1c <HAL_RCC_OscConfig+0x28c>
900019e6:	687b      	ldr	r3, [r7, #4]
900019e8:	691b      	ldr	r3, [r3, #16]
900019ea:	2b40      	cmp	r3, #64	; 0x40
900019ec:	d108      	bne.n	90001a00 <HAL_RCC_OscConfig+0x270>
900019ee:	4b0a      	ldr	r3, [pc, #40]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900019f0:	685b      	ldr	r3, [r3, #4]
900019f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
900019f6:	4a08      	ldr	r2, [pc, #32]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
900019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900019fc:	6053      	str	r3, [r2, #4]
900019fe:	e031      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
90001a00:	4b05      	ldr	r3, [pc, #20]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001a02:	685b      	ldr	r3, [r3, #4]
90001a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90001a08:	687b      	ldr	r3, [r7, #4]
90001a0a:	691b      	ldr	r3, [r3, #16]
90001a0c:	031b      	lsls	r3, r3, #12
90001a0e:	4902      	ldr	r1, [pc, #8]	; (90001a18 <HAL_RCC_OscConfig+0x288>)
90001a10:	4313      	orrs	r3, r2
90001a12:	604b      	str	r3, [r1, #4]
90001a14:	e026      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
90001a16:	bf00      	nop
90001a18:	58024400 	.word	0x58024400
90001a1c:	4b9a      	ldr	r3, [pc, #616]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a1e:	685b      	ldr	r3, [r3, #4]
90001a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90001a24:	687b      	ldr	r3, [r7, #4]
90001a26:	691b      	ldr	r3, [r3, #16]
90001a28:	061b      	lsls	r3, r3, #24
90001a2a:	4997      	ldr	r1, [pc, #604]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a2c:	4313      	orrs	r3, r2
90001a2e:	604b      	str	r3, [r1, #4]
90001a30:	e018      	b.n	90001a64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90001a32:	4b95      	ldr	r3, [pc, #596]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a34:	681b      	ldr	r3, [r3, #0]
90001a36:	4a94      	ldr	r2, [pc, #592]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a38:	f023 0301 	bic.w	r3, r3, #1
90001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001a3e:	f7ff fb2f 	bl	900010a0 <HAL_GetTick>
90001a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90001a44:	e008      	b.n	90001a58 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
90001a46:	f7ff fb2b 	bl	900010a0 <HAL_GetTick>
90001a4a:	4602      	mov	r2, r0
90001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001a4e:	1ad3      	subs	r3, r2, r3
90001a50:	2b02      	cmp	r3, #2
90001a52:	d901      	bls.n	90001a58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90001a54:	2303      	movs	r3, #3
90001a56:	e2c2      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90001a58:	4b8b      	ldr	r3, [pc, #556]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a5a:	681b      	ldr	r3, [r3, #0]
90001a5c:	f003 0304 	and.w	r3, r3, #4
90001a60:	2b00      	cmp	r3, #0
90001a62:	d1f0      	bne.n	90001a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90001a64:	687b      	ldr	r3, [r7, #4]
90001a66:	681b      	ldr	r3, [r3, #0]
90001a68:	f003 0310 	and.w	r3, r3, #16
90001a6c:	2b00      	cmp	r3, #0
90001a6e:	f000 80a9 	beq.w	90001bc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90001a72:	4b85      	ldr	r3, [pc, #532]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a74:	691b      	ldr	r3, [r3, #16]
90001a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
90001a7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
90001a7c:	4b82      	ldr	r3, [pc, #520]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001a80:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
90001a82:	69bb      	ldr	r3, [r7, #24]
90001a84:	2b08      	cmp	r3, #8
90001a86:	d007      	beq.n	90001a98 <HAL_RCC_OscConfig+0x308>
90001a88:	69bb      	ldr	r3, [r7, #24]
90001a8a:	2b18      	cmp	r3, #24
90001a8c:	d13a      	bne.n	90001b04 <HAL_RCC_OscConfig+0x374>
90001a8e:	697b      	ldr	r3, [r7, #20]
90001a90:	f003 0303 	and.w	r3, r3, #3
90001a94:	2b01      	cmp	r3, #1
90001a96:	d135      	bne.n	90001b04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001a98:	4b7b      	ldr	r3, [pc, #492]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001a9a:	681b      	ldr	r3, [r3, #0]
90001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001aa0:	2b00      	cmp	r3, #0
90001aa2:	d005      	beq.n	90001ab0 <HAL_RCC_OscConfig+0x320>
90001aa4:	687b      	ldr	r3, [r7, #4]
90001aa6:	69db      	ldr	r3, [r3, #28]
90001aa8:	2b80      	cmp	r3, #128	; 0x80
90001aaa:	d001      	beq.n	90001ab0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
90001aac:	2301      	movs	r3, #1
90001aae:	e296      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001ab0:	f7ff fb02 	bl	900010b8 <HAL_GetREVID>
90001ab4:	4603      	mov	r3, r0
90001ab6:	f241 0203 	movw	r2, #4099	; 0x1003
90001aba:	4293      	cmp	r3, r2
90001abc:	d817      	bhi.n	90001aee <HAL_RCC_OscConfig+0x35e>
90001abe:	687b      	ldr	r3, [r7, #4]
90001ac0:	6a1b      	ldr	r3, [r3, #32]
90001ac2:	2b20      	cmp	r3, #32
90001ac4:	d108      	bne.n	90001ad8 <HAL_RCC_OscConfig+0x348>
90001ac6:	4b70      	ldr	r3, [pc, #448]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001ac8:	685b      	ldr	r3, [r3, #4]
90001aca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90001ace:	4a6e      	ldr	r2, [pc, #440]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90001ad4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001ad6:	e075      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001ad8:	4b6b      	ldr	r3, [pc, #428]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001ada:	685b      	ldr	r3, [r3, #4]
90001adc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90001ae0:	687b      	ldr	r3, [r7, #4]
90001ae2:	6a1b      	ldr	r3, [r3, #32]
90001ae4:	069b      	lsls	r3, r3, #26
90001ae6:	4968      	ldr	r1, [pc, #416]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001ae8:	4313      	orrs	r3, r2
90001aea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001aec:	e06a      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001aee:	4b66      	ldr	r3, [pc, #408]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001af0:	68db      	ldr	r3, [r3, #12]
90001af2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90001af6:	687b      	ldr	r3, [r7, #4]
90001af8:	6a1b      	ldr	r3, [r3, #32]
90001afa:	061b      	lsls	r3, r3, #24
90001afc:	4962      	ldr	r1, [pc, #392]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001afe:	4313      	orrs	r3, r2
90001b00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001b02:	e05f      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
90001b04:	687b      	ldr	r3, [r7, #4]
90001b06:	69db      	ldr	r3, [r3, #28]
90001b08:	2b00      	cmp	r3, #0
90001b0a:	d042      	beq.n	90001b92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90001b0c:	4b5e      	ldr	r3, [pc, #376]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b0e:	681b      	ldr	r3, [r3, #0]
90001b10:	4a5d      	ldr	r2, [pc, #372]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001b18:	f7ff fac2 	bl	900010a0 <HAL_GetTick>
90001b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90001b1e:	e008      	b.n	90001b32 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
90001b20:	f7ff fabe 	bl	900010a0 <HAL_GetTick>
90001b24:	4602      	mov	r2, r0
90001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001b28:	1ad3      	subs	r3, r2, r3
90001b2a:	2b02      	cmp	r3, #2
90001b2c:	d901      	bls.n	90001b32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90001b2e:	2303      	movs	r3, #3
90001b30:	e255      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90001b32:	4b55      	ldr	r3, [pc, #340]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b34:	681b      	ldr	r3, [r3, #0]
90001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001b3a:	2b00      	cmp	r3, #0
90001b3c:	d0f0      	beq.n	90001b20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001b3e:	f7ff fabb 	bl	900010b8 <HAL_GetREVID>
90001b42:	4603      	mov	r3, r0
90001b44:	f241 0203 	movw	r2, #4099	; 0x1003
90001b48:	4293      	cmp	r3, r2
90001b4a:	d817      	bhi.n	90001b7c <HAL_RCC_OscConfig+0x3ec>
90001b4c:	687b      	ldr	r3, [r7, #4]
90001b4e:	6a1b      	ldr	r3, [r3, #32]
90001b50:	2b20      	cmp	r3, #32
90001b52:	d108      	bne.n	90001b66 <HAL_RCC_OscConfig+0x3d6>
90001b54:	4b4c      	ldr	r3, [pc, #304]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b56:	685b      	ldr	r3, [r3, #4]
90001b58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90001b5c:	4a4a      	ldr	r2, [pc, #296]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90001b62:	6053      	str	r3, [r2, #4]
90001b64:	e02e      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
90001b66:	4b48      	ldr	r3, [pc, #288]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b68:	685b      	ldr	r3, [r3, #4]
90001b6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90001b6e:	687b      	ldr	r3, [r7, #4]
90001b70:	6a1b      	ldr	r3, [r3, #32]
90001b72:	069b      	lsls	r3, r3, #26
90001b74:	4944      	ldr	r1, [pc, #272]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b76:	4313      	orrs	r3, r2
90001b78:	604b      	str	r3, [r1, #4]
90001b7a:	e023      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
90001b7c:	4b42      	ldr	r3, [pc, #264]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b7e:	68db      	ldr	r3, [r3, #12]
90001b80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
90001b84:	687b      	ldr	r3, [r7, #4]
90001b86:	6a1b      	ldr	r3, [r3, #32]
90001b88:	061b      	lsls	r3, r3, #24
90001b8a:	493f      	ldr	r1, [pc, #252]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b8c:	4313      	orrs	r3, r2
90001b8e:	60cb      	str	r3, [r1, #12]
90001b90:	e018      	b.n	90001bc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
90001b92:	4b3d      	ldr	r3, [pc, #244]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b94:	681b      	ldr	r3, [r3, #0]
90001b96:	4a3c      	ldr	r2, [pc, #240]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001b98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001b9e:	f7ff fa7f 	bl	900010a0 <HAL_GetTick>
90001ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90001ba4:	e008      	b.n	90001bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
90001ba6:	f7ff fa7b 	bl	900010a0 <HAL_GetTick>
90001baa:	4602      	mov	r2, r0
90001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001bae:	1ad3      	subs	r3, r2, r3
90001bb0:	2b02      	cmp	r3, #2
90001bb2:	d901      	bls.n	90001bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
90001bb4:	2303      	movs	r3, #3
90001bb6:	e212      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
90001bb8:	4b33      	ldr	r3, [pc, #204]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001bba:	681b      	ldr	r3, [r3, #0]
90001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001bc0:	2b00      	cmp	r3, #0
90001bc2:	d1f0      	bne.n	90001ba6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90001bc4:	687b      	ldr	r3, [r7, #4]
90001bc6:	681b      	ldr	r3, [r3, #0]
90001bc8:	f003 0308 	and.w	r3, r3, #8
90001bcc:	2b00      	cmp	r3, #0
90001bce:	d036      	beq.n	90001c3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
90001bd0:	687b      	ldr	r3, [r7, #4]
90001bd2:	695b      	ldr	r3, [r3, #20]
90001bd4:	2b00      	cmp	r3, #0
90001bd6:	d019      	beq.n	90001c0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90001bd8:	4b2b      	ldr	r3, [pc, #172]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001bdc:	4a2a      	ldr	r2, [pc, #168]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001bde:	f043 0301 	orr.w	r3, r3, #1
90001be2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001be4:	f7ff fa5c 	bl	900010a0 <HAL_GetTick>
90001be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90001bea:	e008      	b.n	90001bfe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90001bec:	f7ff fa58 	bl	900010a0 <HAL_GetTick>
90001bf0:	4602      	mov	r2, r0
90001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001bf4:	1ad3      	subs	r3, r2, r3
90001bf6:	2b02      	cmp	r3, #2
90001bf8:	d901      	bls.n	90001bfe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90001bfa:	2303      	movs	r3, #3
90001bfc:	e1ef      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90001bfe:	4b22      	ldr	r3, [pc, #136]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001c02:	f003 0302 	and.w	r3, r3, #2
90001c06:	2b00      	cmp	r3, #0
90001c08:	d0f0      	beq.n	90001bec <HAL_RCC_OscConfig+0x45c>
90001c0a:	e018      	b.n	90001c3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90001c0c:	4b1e      	ldr	r3, [pc, #120]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001c10:	4a1d      	ldr	r2, [pc, #116]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c12:	f023 0301 	bic.w	r3, r3, #1
90001c16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001c18:	f7ff fa42 	bl	900010a0 <HAL_GetTick>
90001c1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90001c1e:	e008      	b.n	90001c32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90001c20:	f7ff fa3e 	bl	900010a0 <HAL_GetTick>
90001c24:	4602      	mov	r2, r0
90001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001c28:	1ad3      	subs	r3, r2, r3
90001c2a:	2b02      	cmp	r3, #2
90001c2c:	d901      	bls.n	90001c32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90001c2e:	2303      	movs	r3, #3
90001c30:	e1d5      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90001c32:	4b15      	ldr	r3, [pc, #84]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001c36:	f003 0302 	and.w	r3, r3, #2
90001c3a:	2b00      	cmp	r3, #0
90001c3c:	d1f0      	bne.n	90001c20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90001c3e:	687b      	ldr	r3, [r7, #4]
90001c40:	681b      	ldr	r3, [r3, #0]
90001c42:	f003 0320 	and.w	r3, r3, #32
90001c46:	2b00      	cmp	r3, #0
90001c48:	d039      	beq.n	90001cbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
90001c4a:	687b      	ldr	r3, [r7, #4]
90001c4c:	699b      	ldr	r3, [r3, #24]
90001c4e:	2b00      	cmp	r3, #0
90001c50:	d01c      	beq.n	90001c8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90001c52:	4b0d      	ldr	r3, [pc, #52]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c54:	681b      	ldr	r3, [r3, #0]
90001c56:	4a0c      	ldr	r2, [pc, #48]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90001c5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90001c5e:	f7ff fa1f 	bl	900010a0 <HAL_GetTick>
90001c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90001c64:	e008      	b.n	90001c78 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90001c66:	f7ff fa1b 	bl	900010a0 <HAL_GetTick>
90001c6a:	4602      	mov	r2, r0
90001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001c6e:	1ad3      	subs	r3, r2, r3
90001c70:	2b02      	cmp	r3, #2
90001c72:	d901      	bls.n	90001c78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90001c74:	2303      	movs	r3, #3
90001c76:	e1b2      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90001c78:	4b03      	ldr	r3, [pc, #12]	; (90001c88 <HAL_RCC_OscConfig+0x4f8>)
90001c7a:	681b      	ldr	r3, [r3, #0]
90001c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001c80:	2b00      	cmp	r3, #0
90001c82:	d0f0      	beq.n	90001c66 <HAL_RCC_OscConfig+0x4d6>
90001c84:	e01b      	b.n	90001cbe <HAL_RCC_OscConfig+0x52e>
90001c86:	bf00      	nop
90001c88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90001c8c:	4b9b      	ldr	r3, [pc, #620]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001c8e:	681b      	ldr	r3, [r3, #0]
90001c90:	4a9a      	ldr	r2, [pc, #616]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90001c96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90001c98:	f7ff fa02 	bl	900010a0 <HAL_GetTick>
90001c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90001c9e:	e008      	b.n	90001cb2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90001ca0:	f7ff f9fe 	bl	900010a0 <HAL_GetTick>
90001ca4:	4602      	mov	r2, r0
90001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001ca8:	1ad3      	subs	r3, r2, r3
90001caa:	2b02      	cmp	r3, #2
90001cac:	d901      	bls.n	90001cb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90001cae:	2303      	movs	r3, #3
90001cb0:	e195      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90001cb2:	4b92      	ldr	r3, [pc, #584]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001cb4:	681b      	ldr	r3, [r3, #0]
90001cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001cba:	2b00      	cmp	r3, #0
90001cbc:	d1f0      	bne.n	90001ca0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90001cbe:	687b      	ldr	r3, [r7, #4]
90001cc0:	681b      	ldr	r3, [r3, #0]
90001cc2:	f003 0304 	and.w	r3, r3, #4
90001cc6:	2b00      	cmp	r3, #0
90001cc8:	f000 8081 	beq.w	90001dce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90001ccc:	4b8c      	ldr	r3, [pc, #560]	; (90001f00 <HAL_RCC_OscConfig+0x770>)
90001cce:	681b      	ldr	r3, [r3, #0]
90001cd0:	4a8b      	ldr	r2, [pc, #556]	; (90001f00 <HAL_RCC_OscConfig+0x770>)
90001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90001cd8:	f7ff f9e2 	bl	900010a0 <HAL_GetTick>
90001cdc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90001cde:	e008      	b.n	90001cf2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
90001ce0:	f7ff f9de 	bl	900010a0 <HAL_GetTick>
90001ce4:	4602      	mov	r2, r0
90001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001ce8:	1ad3      	subs	r3, r2, r3
90001cea:	2b64      	cmp	r3, #100	; 0x64
90001cec:	d901      	bls.n	90001cf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90001cee:	2303      	movs	r3, #3
90001cf0:	e175      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90001cf2:	4b83      	ldr	r3, [pc, #524]	; (90001f00 <HAL_RCC_OscConfig+0x770>)
90001cf4:	681b      	ldr	r3, [r3, #0]
90001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001cfa:	2b00      	cmp	r3, #0
90001cfc:	d0f0      	beq.n	90001ce0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001cfe:	687b      	ldr	r3, [r7, #4]
90001d00:	689b      	ldr	r3, [r3, #8]
90001d02:	2b01      	cmp	r3, #1
90001d04:	d106      	bne.n	90001d14 <HAL_RCC_OscConfig+0x584>
90001d06:	4b7d      	ldr	r3, [pc, #500]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d0a:	4a7c      	ldr	r2, [pc, #496]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d0c:	f043 0301 	orr.w	r3, r3, #1
90001d10:	6713      	str	r3, [r2, #112]	; 0x70
90001d12:	e02d      	b.n	90001d70 <HAL_RCC_OscConfig+0x5e0>
90001d14:	687b      	ldr	r3, [r7, #4]
90001d16:	689b      	ldr	r3, [r3, #8]
90001d18:	2b00      	cmp	r3, #0
90001d1a:	d10c      	bne.n	90001d36 <HAL_RCC_OscConfig+0x5a6>
90001d1c:	4b77      	ldr	r3, [pc, #476]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d20:	4a76      	ldr	r2, [pc, #472]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d22:	f023 0301 	bic.w	r3, r3, #1
90001d26:	6713      	str	r3, [r2, #112]	; 0x70
90001d28:	4b74      	ldr	r3, [pc, #464]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d2c:	4a73      	ldr	r2, [pc, #460]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d2e:	f023 0304 	bic.w	r3, r3, #4
90001d32:	6713      	str	r3, [r2, #112]	; 0x70
90001d34:	e01c      	b.n	90001d70 <HAL_RCC_OscConfig+0x5e0>
90001d36:	687b      	ldr	r3, [r7, #4]
90001d38:	689b      	ldr	r3, [r3, #8]
90001d3a:	2b05      	cmp	r3, #5
90001d3c:	d10c      	bne.n	90001d58 <HAL_RCC_OscConfig+0x5c8>
90001d3e:	4b6f      	ldr	r3, [pc, #444]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d42:	4a6e      	ldr	r2, [pc, #440]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d44:	f043 0304 	orr.w	r3, r3, #4
90001d48:	6713      	str	r3, [r2, #112]	; 0x70
90001d4a:	4b6c      	ldr	r3, [pc, #432]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d4e:	4a6b      	ldr	r2, [pc, #428]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d50:	f043 0301 	orr.w	r3, r3, #1
90001d54:	6713      	str	r3, [r2, #112]	; 0x70
90001d56:	e00b      	b.n	90001d70 <HAL_RCC_OscConfig+0x5e0>
90001d58:	4b68      	ldr	r3, [pc, #416]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d5c:	4a67      	ldr	r2, [pc, #412]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d5e:	f023 0301 	bic.w	r3, r3, #1
90001d62:	6713      	str	r3, [r2, #112]	; 0x70
90001d64:	4b65      	ldr	r3, [pc, #404]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d68:	4a64      	ldr	r2, [pc, #400]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d6a:	f023 0304 	bic.w	r3, r3, #4
90001d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90001d70:	687b      	ldr	r3, [r7, #4]
90001d72:	689b      	ldr	r3, [r3, #8]
90001d74:	2b00      	cmp	r3, #0
90001d76:	d015      	beq.n	90001da4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001d78:	f7ff f992 	bl	900010a0 <HAL_GetTick>
90001d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90001d7e:	e00a      	b.n	90001d96 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90001d80:	f7ff f98e 	bl	900010a0 <HAL_GetTick>
90001d84:	4602      	mov	r2, r0
90001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001d88:	1ad3      	subs	r3, r2, r3
90001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
90001d8e:	4293      	cmp	r3, r2
90001d90:	d901      	bls.n	90001d96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90001d92:	2303      	movs	r3, #3
90001d94:	e123      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90001d96:	4b59      	ldr	r3, [pc, #356]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001d9a:	f003 0302 	and.w	r3, r3, #2
90001d9e:	2b00      	cmp	r3, #0
90001da0:	d0ee      	beq.n	90001d80 <HAL_RCC_OscConfig+0x5f0>
90001da2:	e014      	b.n	90001dce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001da4:	f7ff f97c 	bl	900010a0 <HAL_GetTick>
90001da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90001daa:	e00a      	b.n	90001dc2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90001dac:	f7ff f978 	bl	900010a0 <HAL_GetTick>
90001db0:	4602      	mov	r2, r0
90001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001db4:	1ad3      	subs	r3, r2, r3
90001db6:	f241 3288 	movw	r2, #5000	; 0x1388
90001dba:	4293      	cmp	r3, r2
90001dbc:	d901      	bls.n	90001dc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90001dbe:	2303      	movs	r3, #3
90001dc0:	e10d      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90001dc2:	4b4e      	ldr	r3, [pc, #312]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001dc6:	f003 0302 	and.w	r3, r3, #2
90001dca:	2b00      	cmp	r3, #0
90001dcc:	d1ee      	bne.n	90001dac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90001dce:	687b      	ldr	r3, [r7, #4]
90001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001dd2:	2b00      	cmp	r3, #0
90001dd4:	f000 8102 	beq.w	90001fdc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90001dd8:	4b48      	ldr	r3, [pc, #288]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001dda:	691b      	ldr	r3, [r3, #16]
90001ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
90001de0:	2b18      	cmp	r3, #24
90001de2:	f000 80bd 	beq.w	90001f60 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001de6:	687b      	ldr	r3, [r7, #4]
90001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001dea:	2b02      	cmp	r3, #2
90001dec:	f040 809e 	bne.w	90001f2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001df0:	4b42      	ldr	r3, [pc, #264]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001df2:	681b      	ldr	r3, [r3, #0]
90001df4:	4a41      	ldr	r2, [pc, #260]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001dfc:	f7ff f950 	bl	900010a0 <HAL_GetTick>
90001e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001e02:	e008      	b.n	90001e16 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001e04:	f7ff f94c 	bl	900010a0 <HAL_GetTick>
90001e08:	4602      	mov	r2, r0
90001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001e0c:	1ad3      	subs	r3, r2, r3
90001e0e:	2b02      	cmp	r3, #2
90001e10:	d901      	bls.n	90001e16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90001e12:	2303      	movs	r3, #3
90001e14:	e0e3      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001e16:	4b39      	ldr	r3, [pc, #228]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e18:	681b      	ldr	r3, [r3, #0]
90001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001e1e:	2b00      	cmp	r3, #0
90001e20:	d1f0      	bne.n	90001e04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90001e22:	4b36      	ldr	r3, [pc, #216]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001e26:	4b37      	ldr	r3, [pc, #220]	; (90001f04 <HAL_RCC_OscConfig+0x774>)
90001e28:	4013      	ands	r3, r2
90001e2a:	687a      	ldr	r2, [r7, #4]
90001e2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
90001e2e:	687a      	ldr	r2, [r7, #4]
90001e30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90001e32:	0112      	lsls	r2, r2, #4
90001e34:	430a      	orrs	r2, r1
90001e36:	4931      	ldr	r1, [pc, #196]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e38:	4313      	orrs	r3, r2
90001e3a:	628b      	str	r3, [r1, #40]	; 0x28
90001e3c:	687b      	ldr	r3, [r7, #4]
90001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001e40:	3b01      	subs	r3, #1
90001e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
90001e46:	687b      	ldr	r3, [r7, #4]
90001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90001e4a:	3b01      	subs	r3, #1
90001e4c:	025b      	lsls	r3, r3, #9
90001e4e:	b29b      	uxth	r3, r3
90001e50:	431a      	orrs	r2, r3
90001e52:	687b      	ldr	r3, [r7, #4]
90001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001e56:	3b01      	subs	r3, #1
90001e58:	041b      	lsls	r3, r3, #16
90001e5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90001e5e:	431a      	orrs	r2, r3
90001e60:	687b      	ldr	r3, [r7, #4]
90001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90001e64:	3b01      	subs	r3, #1
90001e66:	061b      	lsls	r3, r3, #24
90001e68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90001e6c:	4923      	ldr	r1, [pc, #140]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e6e:	4313      	orrs	r3, r2
90001e70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
90001e72:	4b22      	ldr	r3, [pc, #136]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001e76:	4a21      	ldr	r2, [pc, #132]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e78:	f023 0301 	bic.w	r3, r3, #1
90001e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90001e7e:	4b1f      	ldr	r3, [pc, #124]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90001e82:	4b21      	ldr	r3, [pc, #132]	; (90001f08 <HAL_RCC_OscConfig+0x778>)
90001e84:	4013      	ands	r3, r2
90001e86:	687a      	ldr	r2, [r7, #4]
90001e88:	6c92      	ldr	r2, [r2, #72]	; 0x48
90001e8a:	00d2      	lsls	r2, r2, #3
90001e8c:	491b      	ldr	r1, [pc, #108]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e8e:	4313      	orrs	r3, r2
90001e90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90001e92:	4b1a      	ldr	r3, [pc, #104]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001e96:	f023 020c 	bic.w	r2, r3, #12
90001e9a:	687b      	ldr	r3, [r7, #4]
90001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001e9e:	4917      	ldr	r1, [pc, #92]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ea0:	4313      	orrs	r3, r2
90001ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90001ea4:	4b15      	ldr	r3, [pc, #84]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001ea8:	f023 0202 	bic.w	r2, r3, #2
90001eac:	687b      	ldr	r3, [r7, #4]
90001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001eb0:	4912      	ldr	r1, [pc, #72]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001eb2:	4313      	orrs	r3, r2
90001eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90001eb6:	4b11      	ldr	r3, [pc, #68]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001eba:	4a10      	ldr	r2, [pc, #64]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90001ec2:	4b0e      	ldr	r3, [pc, #56]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001ec6:	4a0d      	ldr	r2, [pc, #52]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90001ece:	4b0b      	ldr	r3, [pc, #44]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001ed2:	4a0a      	ldr	r2, [pc, #40]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
90001eda:	4b08      	ldr	r3, [pc, #32]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001ede:	4a07      	ldr	r2, [pc, #28]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ee0:	f043 0301 	orr.w	r3, r3, #1
90001ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90001ee6:	4b05      	ldr	r3, [pc, #20]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001ee8:	681b      	ldr	r3, [r3, #0]
90001eea:	4a04      	ldr	r2, [pc, #16]	; (90001efc <HAL_RCC_OscConfig+0x76c>)
90001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001ef2:	f7ff f8d5 	bl	900010a0 <HAL_GetTick>
90001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90001ef8:	e011      	b.n	90001f1e <HAL_RCC_OscConfig+0x78e>
90001efa:	bf00      	nop
90001efc:	58024400 	.word	0x58024400
90001f00:	58024800 	.word	0x58024800
90001f04:	fffffc0c 	.word	0xfffffc0c
90001f08:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001f0c:	f7ff f8c8 	bl	900010a0 <HAL_GetTick>
90001f10:	4602      	mov	r2, r0
90001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001f14:	1ad3      	subs	r3, r2, r3
90001f16:	2b02      	cmp	r3, #2
90001f18:	d901      	bls.n	90001f1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90001f1a:	2303      	movs	r3, #3
90001f1c:	e05f      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90001f1e:	4b32      	ldr	r3, [pc, #200]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f20:	681b      	ldr	r3, [r3, #0]
90001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001f26:	2b00      	cmp	r3, #0
90001f28:	d0f0      	beq.n	90001f0c <HAL_RCC_OscConfig+0x77c>
90001f2a:	e057      	b.n	90001fdc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001f2c:	4b2e      	ldr	r3, [pc, #184]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f2e:	681b      	ldr	r3, [r3, #0]
90001f30:	4a2d      	ldr	r2, [pc, #180]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001f38:	f7ff f8b2 	bl	900010a0 <HAL_GetTick>
90001f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001f3e:	e008      	b.n	90001f52 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001f40:	f7ff f8ae 	bl	900010a0 <HAL_GetTick>
90001f44:	4602      	mov	r2, r0
90001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001f48:	1ad3      	subs	r3, r2, r3
90001f4a:	2b02      	cmp	r3, #2
90001f4c:	d901      	bls.n	90001f52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90001f4e:	2303      	movs	r3, #3
90001f50:	e045      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001f52:	4b25      	ldr	r3, [pc, #148]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f54:	681b      	ldr	r3, [r3, #0]
90001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001f5a:	2b00      	cmp	r3, #0
90001f5c:	d1f0      	bne.n	90001f40 <HAL_RCC_OscConfig+0x7b0>
90001f5e:	e03d      	b.n	90001fdc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90001f60:	4b21      	ldr	r3, [pc, #132]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001f64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90001f66:	4b20      	ldr	r3, [pc, #128]	; (90001fe8 <HAL_RCC_OscConfig+0x858>)
90001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001f6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001f6c:	687b      	ldr	r3, [r7, #4]
90001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001f70:	2b01      	cmp	r3, #1
90001f72:	d031      	beq.n	90001fd8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001f74:	693b      	ldr	r3, [r7, #16]
90001f76:	f003 0203 	and.w	r2, r3, #3
90001f7a:	687b      	ldr	r3, [r7, #4]
90001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001f7e:	429a      	cmp	r2, r3
90001f80:	d12a      	bne.n	90001fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90001f82:	693b      	ldr	r3, [r7, #16]
90001f84:	091b      	lsrs	r3, r3, #4
90001f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90001f8a:	687b      	ldr	r3, [r7, #4]
90001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001f8e:	429a      	cmp	r2, r3
90001f90:	d122      	bne.n	90001fd8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90001f92:	68fb      	ldr	r3, [r7, #12]
90001f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
90001f98:	687b      	ldr	r3, [r7, #4]
90001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001f9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90001f9e:	429a      	cmp	r2, r3
90001fa0:	d11a      	bne.n	90001fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90001fa2:	68fb      	ldr	r3, [r7, #12]
90001fa4:	0a5b      	lsrs	r3, r3, #9
90001fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001faa:	687b      	ldr	r3, [r7, #4]
90001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90001fae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90001fb0:	429a      	cmp	r2, r3
90001fb2:	d111      	bne.n	90001fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90001fb4:	68fb      	ldr	r3, [r7, #12]
90001fb6:	0c1b      	lsrs	r3, r3, #16
90001fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001fbc:	687b      	ldr	r3, [r7, #4]
90001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90001fc2:	429a      	cmp	r2, r3
90001fc4:	d108      	bne.n	90001fd8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90001fc6:	68fb      	ldr	r3, [r7, #12]
90001fc8:	0e1b      	lsrs	r3, r3, #24
90001fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001fce:	687b      	ldr	r3, [r7, #4]
90001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90001fd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90001fd4:	429a      	cmp	r2, r3
90001fd6:	d001      	beq.n	90001fdc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90001fd8:	2301      	movs	r3, #1
90001fda:	e000      	b.n	90001fde <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
90001fdc:	2300      	movs	r3, #0
}
90001fde:	4618      	mov	r0, r3
90001fe0:	3730      	adds	r7, #48	; 0x30
90001fe2:	46bd      	mov	sp, r7
90001fe4:	bd80      	pop	{r7, pc}
90001fe6:	bf00      	nop
90001fe8:	58024400 	.word	0x58024400

90001fec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90001fec:	b580      	push	{r7, lr}
90001fee:	b086      	sub	sp, #24
90001ff0:	af00      	add	r7, sp, #0
90001ff2:	6078      	str	r0, [r7, #4]
90001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
90001ff6:	687b      	ldr	r3, [r7, #4]
90001ff8:	2b00      	cmp	r3, #0
90001ffa:	d101      	bne.n	90002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90001ffc:	2301      	movs	r3, #1
90001ffe:	e19c      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
90002000:	4b8a      	ldr	r3, [pc, #552]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
90002002:	681b      	ldr	r3, [r3, #0]
90002004:	f003 030f 	and.w	r3, r3, #15
90002008:	683a      	ldr	r2, [r7, #0]
9000200a:	429a      	cmp	r2, r3
9000200c:	d910      	bls.n	90002030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000200e:	4b87      	ldr	r3, [pc, #540]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
90002010:	681b      	ldr	r3, [r3, #0]
90002012:	f023 020f 	bic.w	r2, r3, #15
90002016:	4985      	ldr	r1, [pc, #532]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
90002018:	683b      	ldr	r3, [r7, #0]
9000201a:	4313      	orrs	r3, r2
9000201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
9000201e:	4b83      	ldr	r3, [pc, #524]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
90002020:	681b      	ldr	r3, [r3, #0]
90002022:	f003 030f 	and.w	r3, r3, #15
90002026:	683a      	ldr	r2, [r7, #0]
90002028:	429a      	cmp	r2, r3
9000202a:	d001      	beq.n	90002030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
9000202c:	2301      	movs	r3, #1
9000202e:	e184      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90002030:	687b      	ldr	r3, [r7, #4]
90002032:	681b      	ldr	r3, [r3, #0]
90002034:	f003 0304 	and.w	r3, r3, #4
90002038:	2b00      	cmp	r3, #0
9000203a:	d010      	beq.n	9000205e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000203c:	687b      	ldr	r3, [r7, #4]
9000203e:	691a      	ldr	r2, [r3, #16]
90002040:	4b7b      	ldr	r3, [pc, #492]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002042:	699b      	ldr	r3, [r3, #24]
90002044:	f003 0370 	and.w	r3, r3, #112	; 0x70
90002048:	429a      	cmp	r2, r3
9000204a:	d908      	bls.n	9000205e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000204c:	4b78      	ldr	r3, [pc, #480]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000204e:	699b      	ldr	r3, [r3, #24]
90002050:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90002054:	687b      	ldr	r3, [r7, #4]
90002056:	691b      	ldr	r3, [r3, #16]
90002058:	4975      	ldr	r1, [pc, #468]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000205a:	4313      	orrs	r3, r2
9000205c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000205e:	687b      	ldr	r3, [r7, #4]
90002060:	681b      	ldr	r3, [r3, #0]
90002062:	f003 0308 	and.w	r3, r3, #8
90002066:	2b00      	cmp	r3, #0
90002068:	d010      	beq.n	9000208c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000206a:	687b      	ldr	r3, [r7, #4]
9000206c:	695a      	ldr	r2, [r3, #20]
9000206e:	4b70      	ldr	r3, [pc, #448]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002070:	69db      	ldr	r3, [r3, #28]
90002072:	f003 0370 	and.w	r3, r3, #112	; 0x70
90002076:	429a      	cmp	r2, r3
90002078:	d908      	bls.n	9000208c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000207a:	4b6d      	ldr	r3, [pc, #436]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000207c:	69db      	ldr	r3, [r3, #28]
9000207e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90002082:	687b      	ldr	r3, [r7, #4]
90002084:	695b      	ldr	r3, [r3, #20]
90002086:	496a      	ldr	r1, [pc, #424]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002088:	4313      	orrs	r3, r2
9000208a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000208c:	687b      	ldr	r3, [r7, #4]
9000208e:	681b      	ldr	r3, [r3, #0]
90002090:	f003 0310 	and.w	r3, r3, #16
90002094:	2b00      	cmp	r3, #0
90002096:	d010      	beq.n	900020ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90002098:	687b      	ldr	r3, [r7, #4]
9000209a:	699a      	ldr	r2, [r3, #24]
9000209c:	4b64      	ldr	r3, [pc, #400]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000209e:	69db      	ldr	r3, [r3, #28]
900020a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
900020a4:	429a      	cmp	r2, r3
900020a6:	d908      	bls.n	900020ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900020a8:	4b61      	ldr	r3, [pc, #388]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020aa:	69db      	ldr	r3, [r3, #28]
900020ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
900020b0:	687b      	ldr	r3, [r7, #4]
900020b2:	699b      	ldr	r3, [r3, #24]
900020b4:	495e      	ldr	r1, [pc, #376]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020b6:	4313      	orrs	r3, r2
900020b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900020ba:	687b      	ldr	r3, [r7, #4]
900020bc:	681b      	ldr	r3, [r3, #0]
900020be:	f003 0320 	and.w	r3, r3, #32
900020c2:	2b00      	cmp	r3, #0
900020c4:	d010      	beq.n	900020e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900020c6:	687b      	ldr	r3, [r7, #4]
900020c8:	69da      	ldr	r2, [r3, #28]
900020ca:	4b59      	ldr	r3, [pc, #356]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020cc:	6a1b      	ldr	r3, [r3, #32]
900020ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
900020d2:	429a      	cmp	r2, r3
900020d4:	d908      	bls.n	900020e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
900020d6:	4b56      	ldr	r3, [pc, #344]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020d8:	6a1b      	ldr	r3, [r3, #32]
900020da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900020de:	687b      	ldr	r3, [r7, #4]
900020e0:	69db      	ldr	r3, [r3, #28]
900020e2:	4953      	ldr	r1, [pc, #332]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020e4:	4313      	orrs	r3, r2
900020e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	681b      	ldr	r3, [r3, #0]
900020ec:	f003 0302 	and.w	r3, r3, #2
900020f0:	2b00      	cmp	r3, #0
900020f2:	d010      	beq.n	90002116 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900020f4:	687b      	ldr	r3, [r7, #4]
900020f6:	68da      	ldr	r2, [r3, #12]
900020f8:	4b4d      	ldr	r3, [pc, #308]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900020fa:	699b      	ldr	r3, [r3, #24]
900020fc:	f003 030f 	and.w	r3, r3, #15
90002100:	429a      	cmp	r2, r3
90002102:	d908      	bls.n	90002116 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90002104:	4b4a      	ldr	r3, [pc, #296]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002106:	699b      	ldr	r3, [r3, #24]
90002108:	f023 020f 	bic.w	r2, r3, #15
9000210c:	687b      	ldr	r3, [r7, #4]
9000210e:	68db      	ldr	r3, [r3, #12]
90002110:	4947      	ldr	r1, [pc, #284]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002112:	4313      	orrs	r3, r2
90002114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90002116:	687b      	ldr	r3, [r7, #4]
90002118:	681b      	ldr	r3, [r3, #0]
9000211a:	f003 0301 	and.w	r3, r3, #1
9000211e:	2b00      	cmp	r3, #0
90002120:	d055      	beq.n	900021ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90002122:	4b43      	ldr	r3, [pc, #268]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002124:	699b      	ldr	r3, [r3, #24]
90002126:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
9000212a:	687b      	ldr	r3, [r7, #4]
9000212c:	689b      	ldr	r3, [r3, #8]
9000212e:	4940      	ldr	r1, [pc, #256]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002130:	4313      	orrs	r3, r2
90002132:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90002134:	687b      	ldr	r3, [r7, #4]
90002136:	685b      	ldr	r3, [r3, #4]
90002138:	2b02      	cmp	r3, #2
9000213a:	d107      	bne.n	9000214c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000213c:	4b3c      	ldr	r3, [pc, #240]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000213e:	681b      	ldr	r3, [r3, #0]
90002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90002144:	2b00      	cmp	r3, #0
90002146:	d121      	bne.n	9000218c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90002148:	2301      	movs	r3, #1
9000214a:	e0f6      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000214c:	687b      	ldr	r3, [r7, #4]
9000214e:	685b      	ldr	r3, [r3, #4]
90002150:	2b03      	cmp	r3, #3
90002152:	d107      	bne.n	90002164 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90002154:	4b36      	ldr	r3, [pc, #216]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
90002156:	681b      	ldr	r3, [r3, #0]
90002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000215c:	2b00      	cmp	r3, #0
9000215e:	d115      	bne.n	9000218c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90002160:	2301      	movs	r3, #1
90002162:	e0ea      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90002164:	687b      	ldr	r3, [r7, #4]
90002166:	685b      	ldr	r3, [r3, #4]
90002168:	2b01      	cmp	r3, #1
9000216a:	d107      	bne.n	9000217c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000216c:	4b30      	ldr	r3, [pc, #192]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000216e:	681b      	ldr	r3, [r3, #0]
90002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002174:	2b00      	cmp	r3, #0
90002176:	d109      	bne.n	9000218c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90002178:	2301      	movs	r3, #1
9000217a:	e0de      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000217c:	4b2c      	ldr	r3, [pc, #176]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000217e:	681b      	ldr	r3, [r3, #0]
90002180:	f003 0304 	and.w	r3, r3, #4
90002184:	2b00      	cmp	r3, #0
90002186:	d101      	bne.n	9000218c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90002188:	2301      	movs	r3, #1
9000218a:	e0d6      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000218c:	4b28      	ldr	r3, [pc, #160]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000218e:	691b      	ldr	r3, [r3, #16]
90002190:	f023 0207 	bic.w	r2, r3, #7
90002194:	687b      	ldr	r3, [r7, #4]
90002196:	685b      	ldr	r3, [r3, #4]
90002198:	4925      	ldr	r1, [pc, #148]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
9000219a:	4313      	orrs	r3, r2
9000219c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
9000219e:	f7fe ff7f 	bl	900010a0 <HAL_GetTick>
900021a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900021a4:	e00a      	b.n	900021bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
900021a6:	f7fe ff7b 	bl	900010a0 <HAL_GetTick>
900021aa:	4602      	mov	r2, r0
900021ac:	697b      	ldr	r3, [r7, #20]
900021ae:	1ad3      	subs	r3, r2, r3
900021b0:	f241 3288 	movw	r2, #5000	; 0x1388
900021b4:	4293      	cmp	r3, r2
900021b6:	d901      	bls.n	900021bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
900021b8:	2303      	movs	r3, #3
900021ba:	e0be      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
900021bc:	4b1c      	ldr	r3, [pc, #112]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900021be:	691b      	ldr	r3, [r3, #16]
900021c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
900021c4:	687b      	ldr	r3, [r7, #4]
900021c6:	685b      	ldr	r3, [r3, #4]
900021c8:	00db      	lsls	r3, r3, #3
900021ca:	429a      	cmp	r2, r3
900021cc:	d1eb      	bne.n	900021a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900021ce:	687b      	ldr	r3, [r7, #4]
900021d0:	681b      	ldr	r3, [r3, #0]
900021d2:	f003 0302 	and.w	r3, r3, #2
900021d6:	2b00      	cmp	r3, #0
900021d8:	d010      	beq.n	900021fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
900021da:	687b      	ldr	r3, [r7, #4]
900021dc:	68da      	ldr	r2, [r3, #12]
900021de:	4b14      	ldr	r3, [pc, #80]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900021e0:	699b      	ldr	r3, [r3, #24]
900021e2:	f003 030f 	and.w	r3, r3, #15
900021e6:	429a      	cmp	r2, r3
900021e8:	d208      	bcs.n	900021fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
900021ea:	4b11      	ldr	r3, [pc, #68]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900021ec:	699b      	ldr	r3, [r3, #24]
900021ee:	f023 020f 	bic.w	r2, r3, #15
900021f2:	687b      	ldr	r3, [r7, #4]
900021f4:	68db      	ldr	r3, [r3, #12]
900021f6:	490e      	ldr	r1, [pc, #56]	; (90002230 <HAL_RCC_ClockConfig+0x244>)
900021f8:	4313      	orrs	r3, r2
900021fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
900021fc:	4b0b      	ldr	r3, [pc, #44]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
900021fe:	681b      	ldr	r3, [r3, #0]
90002200:	f003 030f 	and.w	r3, r3, #15
90002204:	683a      	ldr	r2, [r7, #0]
90002206:	429a      	cmp	r2, r3
90002208:	d214      	bcs.n	90002234 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000220a:	4b08      	ldr	r3, [pc, #32]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
9000220c:	681b      	ldr	r3, [r3, #0]
9000220e:	f023 020f 	bic.w	r2, r3, #15
90002212:	4906      	ldr	r1, [pc, #24]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
90002214:	683b      	ldr	r3, [r7, #0]
90002216:	4313      	orrs	r3, r2
90002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
9000221a:	4b04      	ldr	r3, [pc, #16]	; (9000222c <HAL_RCC_ClockConfig+0x240>)
9000221c:	681b      	ldr	r3, [r3, #0]
9000221e:	f003 030f 	and.w	r3, r3, #15
90002222:	683a      	ldr	r2, [r7, #0]
90002224:	429a      	cmp	r2, r3
90002226:	d005      	beq.n	90002234 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
90002228:	2301      	movs	r3, #1
9000222a:	e086      	b.n	9000233a <HAL_RCC_ClockConfig+0x34e>
9000222c:	52002000 	.word	0x52002000
90002230:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90002234:	687b      	ldr	r3, [r7, #4]
90002236:	681b      	ldr	r3, [r3, #0]
90002238:	f003 0304 	and.w	r3, r3, #4
9000223c:	2b00      	cmp	r3, #0
9000223e:	d010      	beq.n	90002262 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90002240:	687b      	ldr	r3, [r7, #4]
90002242:	691a      	ldr	r2, [r3, #16]
90002244:	4b3f      	ldr	r3, [pc, #252]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
90002246:	699b      	ldr	r3, [r3, #24]
90002248:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000224c:	429a      	cmp	r2, r3
9000224e:	d208      	bcs.n	90002262 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90002250:	4b3c      	ldr	r3, [pc, #240]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
90002252:	699b      	ldr	r3, [r3, #24]
90002254:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90002258:	687b      	ldr	r3, [r7, #4]
9000225a:	691b      	ldr	r3, [r3, #16]
9000225c:	4939      	ldr	r1, [pc, #228]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
9000225e:	4313      	orrs	r3, r2
90002260:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90002262:	687b      	ldr	r3, [r7, #4]
90002264:	681b      	ldr	r3, [r3, #0]
90002266:	f003 0308 	and.w	r3, r3, #8
9000226a:	2b00      	cmp	r3, #0
9000226c:	d010      	beq.n	90002290 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000226e:	687b      	ldr	r3, [r7, #4]
90002270:	695a      	ldr	r2, [r3, #20]
90002272:	4b34      	ldr	r3, [pc, #208]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
90002274:	69db      	ldr	r3, [r3, #28]
90002276:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000227a:	429a      	cmp	r2, r3
9000227c:	d208      	bcs.n	90002290 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000227e:	4b31      	ldr	r3, [pc, #196]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
90002280:	69db      	ldr	r3, [r3, #28]
90002282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90002286:	687b      	ldr	r3, [r7, #4]
90002288:	695b      	ldr	r3, [r3, #20]
9000228a:	492e      	ldr	r1, [pc, #184]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
9000228c:	4313      	orrs	r3, r2
9000228e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90002290:	687b      	ldr	r3, [r7, #4]
90002292:	681b      	ldr	r3, [r3, #0]
90002294:	f003 0310 	and.w	r3, r3, #16
90002298:	2b00      	cmp	r3, #0
9000229a:	d010      	beq.n	900022be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000229c:	687b      	ldr	r3, [r7, #4]
9000229e:	699a      	ldr	r2, [r3, #24]
900022a0:	4b28      	ldr	r3, [pc, #160]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022a2:	69db      	ldr	r3, [r3, #28]
900022a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
900022a8:	429a      	cmp	r2, r3
900022aa:	d208      	bcs.n	900022be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900022ac:	4b25      	ldr	r3, [pc, #148]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022ae:	69db      	ldr	r3, [r3, #28]
900022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
900022b4:	687b      	ldr	r3, [r7, #4]
900022b6:	699b      	ldr	r3, [r3, #24]
900022b8:	4922      	ldr	r1, [pc, #136]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022ba:	4313      	orrs	r3, r2
900022bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900022be:	687b      	ldr	r3, [r7, #4]
900022c0:	681b      	ldr	r3, [r3, #0]
900022c2:	f003 0320 	and.w	r3, r3, #32
900022c6:	2b00      	cmp	r3, #0
900022c8:	d010      	beq.n	900022ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900022ca:	687b      	ldr	r3, [r7, #4]
900022cc:	69da      	ldr	r2, [r3, #28]
900022ce:	4b1d      	ldr	r3, [pc, #116]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022d0:	6a1b      	ldr	r3, [r3, #32]
900022d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
900022d6:	429a      	cmp	r2, r3
900022d8:	d208      	bcs.n	900022ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
900022da:	4b1a      	ldr	r3, [pc, #104]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022dc:	6a1b      	ldr	r3, [r3, #32]
900022de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900022e2:	687b      	ldr	r3, [r7, #4]
900022e4:	69db      	ldr	r3, [r3, #28]
900022e6:	4917      	ldr	r1, [pc, #92]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022e8:	4313      	orrs	r3, r2
900022ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900022ec:	f000 f834 	bl	90002358 <HAL_RCC_GetSysClockFreq>
900022f0:	4602      	mov	r2, r0
900022f2:	4b14      	ldr	r3, [pc, #80]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
900022f4:	699b      	ldr	r3, [r3, #24]
900022f6:	0a1b      	lsrs	r3, r3, #8
900022f8:	f003 030f 	and.w	r3, r3, #15
900022fc:	4912      	ldr	r1, [pc, #72]	; (90002348 <HAL_RCC_ClockConfig+0x35c>)
900022fe:	5ccb      	ldrb	r3, [r1, r3]
90002300:	f003 031f 	and.w	r3, r3, #31
90002304:	fa22 f303 	lsr.w	r3, r2, r3
90002308:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000230a:	4b0e      	ldr	r3, [pc, #56]	; (90002344 <HAL_RCC_ClockConfig+0x358>)
9000230c:	699b      	ldr	r3, [r3, #24]
9000230e:	f003 030f 	and.w	r3, r3, #15
90002312:	4a0d      	ldr	r2, [pc, #52]	; (90002348 <HAL_RCC_ClockConfig+0x35c>)
90002314:	5cd3      	ldrb	r3, [r2, r3]
90002316:	f003 031f 	and.w	r3, r3, #31
9000231a:	693a      	ldr	r2, [r7, #16]
9000231c:	fa22 f303 	lsr.w	r3, r2, r3
90002320:	4a0a      	ldr	r2, [pc, #40]	; (9000234c <HAL_RCC_ClockConfig+0x360>)
90002322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002324:	4a0a      	ldr	r2, [pc, #40]	; (90002350 <HAL_RCC_ClockConfig+0x364>)
90002326:	693b      	ldr	r3, [r7, #16]
90002328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
9000232a:	4b0a      	ldr	r3, [pc, #40]	; (90002354 <HAL_RCC_ClockConfig+0x368>)
9000232c:	681b      	ldr	r3, [r3, #0]
9000232e:	4618      	mov	r0, r3
90002330:	f7fe fca8 	bl	90000c84 <HAL_InitTick>
90002334:	4603      	mov	r3, r0
90002336:	73fb      	strb	r3, [r7, #15]

  return halstatus;
90002338:	7bfb      	ldrb	r3, [r7, #15]
}
9000233a:	4618      	mov	r0, r3
9000233c:	3718      	adds	r7, #24
9000233e:	46bd      	mov	sp, r7
90002340:	bd80      	pop	{r7, pc}
90002342:	bf00      	nop
90002344:	58024400 	.word	0x58024400
90002348:	90008df8 	.word	0x90008df8
9000234c:	24000004 	.word	0x24000004
90002350:	24000000 	.word	0x24000000
90002354:	24000008 	.word	0x24000008

90002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90002358:	b480      	push	{r7}
9000235a:	b089      	sub	sp, #36	; 0x24
9000235c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
9000235e:	4bb3      	ldr	r3, [pc, #716]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
90002360:	691b      	ldr	r3, [r3, #16]
90002362:	f003 0338 	and.w	r3, r3, #56	; 0x38
90002366:	2b18      	cmp	r3, #24
90002368:	f200 8155 	bhi.w	90002616 <HAL_RCC_GetSysClockFreq+0x2be>
9000236c:	a201      	add	r2, pc, #4	; (adr r2, 90002374 <HAL_RCC_GetSysClockFreq+0x1c>)
9000236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002372:	bf00      	nop
90002374:	900023d9 	.word	0x900023d9
90002378:	90002617 	.word	0x90002617
9000237c:	90002617 	.word	0x90002617
90002380:	90002617 	.word	0x90002617
90002384:	90002617 	.word	0x90002617
90002388:	90002617 	.word	0x90002617
9000238c:	90002617 	.word	0x90002617
90002390:	90002617 	.word	0x90002617
90002394:	900023ff 	.word	0x900023ff
90002398:	90002617 	.word	0x90002617
9000239c:	90002617 	.word	0x90002617
900023a0:	90002617 	.word	0x90002617
900023a4:	90002617 	.word	0x90002617
900023a8:	90002617 	.word	0x90002617
900023ac:	90002617 	.word	0x90002617
900023b0:	90002617 	.word	0x90002617
900023b4:	90002405 	.word	0x90002405
900023b8:	90002617 	.word	0x90002617
900023bc:	90002617 	.word	0x90002617
900023c0:	90002617 	.word	0x90002617
900023c4:	90002617 	.word	0x90002617
900023c8:	90002617 	.word	0x90002617
900023cc:	90002617 	.word	0x90002617
900023d0:	90002617 	.word	0x90002617
900023d4:	9000240b 	.word	0x9000240b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900023d8:	4b94      	ldr	r3, [pc, #592]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900023da:	681b      	ldr	r3, [r3, #0]
900023dc:	f003 0320 	and.w	r3, r3, #32
900023e0:	2b00      	cmp	r3, #0
900023e2:	d009      	beq.n	900023f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900023e4:	4b91      	ldr	r3, [pc, #580]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900023e6:	681b      	ldr	r3, [r3, #0]
900023e8:	08db      	lsrs	r3, r3, #3
900023ea:	f003 0303 	and.w	r3, r3, #3
900023ee:	4a90      	ldr	r2, [pc, #576]	; (90002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
900023f0:	fa22 f303 	lsr.w	r3, r2, r3
900023f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
900023f6:	e111      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900023f8:	4b8d      	ldr	r3, [pc, #564]	; (90002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
900023fa:	61bb      	str	r3, [r7, #24]
    break;
900023fc:	e10e      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
900023fe:	4b8d      	ldr	r3, [pc, #564]	; (90002634 <HAL_RCC_GetSysClockFreq+0x2dc>)
90002400:	61bb      	str	r3, [r7, #24]
    break;
90002402:	e10b      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
90002404:	4b8c      	ldr	r3, [pc, #560]	; (90002638 <HAL_RCC_GetSysClockFreq+0x2e0>)
90002406:	61bb      	str	r3, [r7, #24]
    break;
90002408:	e108      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000240a:	4b88      	ldr	r3, [pc, #544]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000240e:	f003 0303 	and.w	r3, r3, #3
90002412:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
90002414:	4b85      	ldr	r3, [pc, #532]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
90002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002418:	091b      	lsrs	r3, r3, #4
9000241a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000241e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90002420:	4b82      	ldr	r3, [pc, #520]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
90002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002424:	f003 0301 	and.w	r3, r3, #1
90002428:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
9000242a:	4b80      	ldr	r3, [pc, #512]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000242e:	08db      	lsrs	r3, r3, #3
90002430:	f3c3 030c 	ubfx	r3, r3, #0, #13
90002434:	68fa      	ldr	r2, [r7, #12]
90002436:	fb02 f303 	mul.w	r3, r2, r3
9000243a:	ee07 3a90 	vmov	s15, r3
9000243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002442:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
90002446:	693b      	ldr	r3, [r7, #16]
90002448:	2b00      	cmp	r3, #0
9000244a:	f000 80e1 	beq.w	90002610 <HAL_RCC_GetSysClockFreq+0x2b8>
9000244e:	697b      	ldr	r3, [r7, #20]
90002450:	2b02      	cmp	r3, #2
90002452:	f000 8083 	beq.w	9000255c <HAL_RCC_GetSysClockFreq+0x204>
90002456:	697b      	ldr	r3, [r7, #20]
90002458:	2b02      	cmp	r3, #2
9000245a:	f200 80a1 	bhi.w	900025a0 <HAL_RCC_GetSysClockFreq+0x248>
9000245e:	697b      	ldr	r3, [r7, #20]
90002460:	2b00      	cmp	r3, #0
90002462:	d003      	beq.n	9000246c <HAL_RCC_GetSysClockFreq+0x114>
90002464:	697b      	ldr	r3, [r7, #20]
90002466:	2b01      	cmp	r3, #1
90002468:	d056      	beq.n	90002518 <HAL_RCC_GetSysClockFreq+0x1c0>
9000246a:	e099      	b.n	900025a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000246c:	4b6f      	ldr	r3, [pc, #444]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000246e:	681b      	ldr	r3, [r3, #0]
90002470:	f003 0320 	and.w	r3, r3, #32
90002474:	2b00      	cmp	r3, #0
90002476:	d02d      	beq.n	900024d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90002478:	4b6c      	ldr	r3, [pc, #432]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000247a:	681b      	ldr	r3, [r3, #0]
9000247c:	08db      	lsrs	r3, r3, #3
9000247e:	f003 0303 	and.w	r3, r3, #3
90002482:	4a6b      	ldr	r2, [pc, #428]	; (90002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
90002484:	fa22 f303 	lsr.w	r3, r2, r3
90002488:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000248a:	687b      	ldr	r3, [r7, #4]
9000248c:	ee07 3a90 	vmov	s15, r3
90002490:	eef8 6a67 	vcvt.f32.u32	s13, s15
90002494:	693b      	ldr	r3, [r7, #16]
90002496:	ee07 3a90 	vmov	s15, r3
9000249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900024a2:	4b62      	ldr	r3, [pc, #392]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900024aa:	ee07 3a90 	vmov	s15, r3
900024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900024b2:	ed97 6a02 	vldr	s12, [r7, #8]
900024b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 9000263c <HAL_RCC_GetSysClockFreq+0x2e4>
900024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900024ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
900024d2:	e087      	b.n	900025e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900024d4:	693b      	ldr	r3, [r7, #16]
900024d6:	ee07 3a90 	vmov	s15, r3
900024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900024de:	eddf 6a58 	vldr	s13, [pc, #352]	; 90002640 <HAL_RCC_GetSysClockFreq+0x2e8>
900024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900024e6:	4b51      	ldr	r3, [pc, #324]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900024ee:	ee07 3a90 	vmov	s15, r3
900024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900024f6:	ed97 6a02 	vldr	s12, [r7, #8]
900024fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 9000263c <HAL_RCC_GetSysClockFreq+0x2e4>
900024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
90002506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000250e:	ee67 7a27 	vmul.f32	s15, s14, s15
90002512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90002516:	e065      	b.n	900025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90002518:	693b      	ldr	r3, [r7, #16]
9000251a:	ee07 3a90 	vmov	s15, r3
9000251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002522:	eddf 6a48 	vldr	s13, [pc, #288]	; 90002644 <HAL_RCC_GetSysClockFreq+0x2ec>
90002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000252a:	4b40      	ldr	r3, [pc, #256]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
9000252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90002532:	ee07 3a90 	vmov	s15, r3
90002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000253a:	ed97 6a02 	vldr	s12, [r7, #8]
9000253e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 9000263c <HAL_RCC_GetSysClockFreq+0x2e4>
90002542:	eec6 7a25 	vdiv.f32	s15, s12, s11
90002546:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000254a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90002552:	ee67 7a27 	vmul.f32	s15, s14, s15
90002556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000255a:	e043      	b.n	900025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000255c:	693b      	ldr	r3, [r7, #16]
9000255e:	ee07 3a90 	vmov	s15, r3
90002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002566:	eddf 6a38 	vldr	s13, [pc, #224]	; 90002648 <HAL_RCC_GetSysClockFreq+0x2f0>
9000256a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000256e:	4b2f      	ldr	r3, [pc, #188]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
90002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002572:	f3c3 0308 	ubfx	r3, r3, #0, #9
90002576:	ee07 3a90 	vmov	s15, r3
9000257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000257e:	ed97 6a02 	vldr	s12, [r7, #8]
90002582:	eddf 5a2e 	vldr	s11, [pc, #184]	; 9000263c <HAL_RCC_GetSysClockFreq+0x2e4>
90002586:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000258a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000258e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90002592:	ee77 7aa6 	vadd.f32	s15, s15, s13
90002596:	ee67 7a27 	vmul.f32	s15, s14, s15
9000259a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000259e:	e021      	b.n	900025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900025a0:	693b      	ldr	r3, [r7, #16]
900025a2:	ee07 3a90 	vmov	s15, r3
900025a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900025aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 90002644 <HAL_RCC_GetSysClockFreq+0x2ec>
900025ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900025b2:	4b1e      	ldr	r3, [pc, #120]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900025b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900025ba:	ee07 3a90 	vmov	s15, r3
900025be:	eef8 6a67 	vcvt.f32.u32	s13, s15
900025c2:	ed97 6a02 	vldr	s12, [r7, #8]
900025c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 9000263c <HAL_RCC_GetSysClockFreq+0x2e4>
900025ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
900025ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
900025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900025d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900025da:	ee67 7a27 	vmul.f32	s15, s14, s15
900025de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900025e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
900025e4:	4b11      	ldr	r3, [pc, #68]	; (9000262c <HAL_RCC_GetSysClockFreq+0x2d4>)
900025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900025e8:	0a5b      	lsrs	r3, r3, #9
900025ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900025ee:	3301      	adds	r3, #1
900025f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
900025f2:	683b      	ldr	r3, [r7, #0]
900025f4:	ee07 3a90 	vmov	s15, r3
900025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
900025fc:	edd7 6a07 	vldr	s13, [r7, #28]
90002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
90002604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90002608:	ee17 3a90 	vmov	r3, s15
9000260c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
9000260e:	e005      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
90002610:	2300      	movs	r3, #0
90002612:	61bb      	str	r3, [r7, #24]
    break;
90002614:	e002      	b.n	9000261c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
90002616:	4b07      	ldr	r3, [pc, #28]	; (90002634 <HAL_RCC_GetSysClockFreq+0x2dc>)
90002618:	61bb      	str	r3, [r7, #24]
    break;
9000261a:	bf00      	nop
  }

  return sysclockfreq;
9000261c:	69bb      	ldr	r3, [r7, #24]
}
9000261e:	4618      	mov	r0, r3
90002620:	3724      	adds	r7, #36	; 0x24
90002622:	46bd      	mov	sp, r7
90002624:	f85d 7b04 	ldr.w	r7, [sp], #4
90002628:	4770      	bx	lr
9000262a:	bf00      	nop
9000262c:	58024400 	.word	0x58024400
90002630:	03d09000 	.word	0x03d09000
90002634:	003d0900 	.word	0x003d0900
90002638:	017d7840 	.word	0x017d7840
9000263c:	46000000 	.word	0x46000000
90002640:	4c742400 	.word	0x4c742400
90002644:	4a742400 	.word	0x4a742400
90002648:	4bbebc20 	.word	0x4bbebc20

9000264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000264c:	b580      	push	{r7, lr}
9000264e:	b082      	sub	sp, #8
90002650:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90002652:	f7ff fe81 	bl	90002358 <HAL_RCC_GetSysClockFreq>
90002656:	4602      	mov	r2, r0
90002658:	4b10      	ldr	r3, [pc, #64]	; (9000269c <HAL_RCC_GetHCLKFreq+0x50>)
9000265a:	699b      	ldr	r3, [r3, #24]
9000265c:	0a1b      	lsrs	r3, r3, #8
9000265e:	f003 030f 	and.w	r3, r3, #15
90002662:	490f      	ldr	r1, [pc, #60]	; (900026a0 <HAL_RCC_GetHCLKFreq+0x54>)
90002664:	5ccb      	ldrb	r3, [r1, r3]
90002666:	f003 031f 	and.w	r3, r3, #31
9000266a:	fa22 f303 	lsr.w	r3, r2, r3
9000266e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002670:	4b0a      	ldr	r3, [pc, #40]	; (9000269c <HAL_RCC_GetHCLKFreq+0x50>)
90002672:	699b      	ldr	r3, [r3, #24]
90002674:	f003 030f 	and.w	r3, r3, #15
90002678:	4a09      	ldr	r2, [pc, #36]	; (900026a0 <HAL_RCC_GetHCLKFreq+0x54>)
9000267a:	5cd3      	ldrb	r3, [r2, r3]
9000267c:	f003 031f 	and.w	r3, r3, #31
90002680:	687a      	ldr	r2, [r7, #4]
90002682:	fa22 f303 	lsr.w	r3, r2, r3
90002686:	4a07      	ldr	r2, [pc, #28]	; (900026a4 <HAL_RCC_GetHCLKFreq+0x58>)
90002688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000268a:	4a07      	ldr	r2, [pc, #28]	; (900026a8 <HAL_RCC_GetHCLKFreq+0x5c>)
9000268c:	687b      	ldr	r3, [r7, #4]
9000268e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90002690:	4b04      	ldr	r3, [pc, #16]	; (900026a4 <HAL_RCC_GetHCLKFreq+0x58>)
90002692:	681b      	ldr	r3, [r3, #0]
}
90002694:	4618      	mov	r0, r3
90002696:	3708      	adds	r7, #8
90002698:	46bd      	mov	sp, r7
9000269a:	bd80      	pop	{r7, pc}
9000269c:	58024400 	.word	0x58024400
900026a0:	90008df8 	.word	0x90008df8
900026a4:	24000004 	.word	0x24000004
900026a8:	24000000 	.word	0x24000000

900026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900026ac:	b580      	push	{r7, lr}
900026ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
900026b0:	f7ff ffcc 	bl	9000264c <HAL_RCC_GetHCLKFreq>
900026b4:	4602      	mov	r2, r0
900026b6:	4b06      	ldr	r3, [pc, #24]	; (900026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
900026b8:	69db      	ldr	r3, [r3, #28]
900026ba:	091b      	lsrs	r3, r3, #4
900026bc:	f003 0307 	and.w	r3, r3, #7
900026c0:	4904      	ldr	r1, [pc, #16]	; (900026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
900026c2:	5ccb      	ldrb	r3, [r1, r3]
900026c4:	f003 031f 	and.w	r3, r3, #31
900026c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
900026cc:	4618      	mov	r0, r3
900026ce:	bd80      	pop	{r7, pc}
900026d0:	58024400 	.word	0x58024400
900026d4:	90008df8 	.word	0x90008df8

900026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900026d8:	b580      	push	{r7, lr}
900026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
900026dc:	f7ff ffb6 	bl	9000264c <HAL_RCC_GetHCLKFreq>
900026e0:	4602      	mov	r2, r0
900026e2:	4b06      	ldr	r3, [pc, #24]	; (900026fc <HAL_RCC_GetPCLK2Freq+0x24>)
900026e4:	69db      	ldr	r3, [r3, #28]
900026e6:	0a1b      	lsrs	r3, r3, #8
900026e8:	f003 0307 	and.w	r3, r3, #7
900026ec:	4904      	ldr	r1, [pc, #16]	; (90002700 <HAL_RCC_GetPCLK2Freq+0x28>)
900026ee:	5ccb      	ldrb	r3, [r1, r3]
900026f0:	f003 031f 	and.w	r3, r3, #31
900026f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
900026f8:	4618      	mov	r0, r3
900026fa:	bd80      	pop	{r7, pc}
900026fc:	58024400 	.word	0x58024400
90002700:	90008df8 	.word	0x90008df8

90002704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90002704:	b480      	push	{r7}
90002706:	b083      	sub	sp, #12
90002708:	af00      	add	r7, sp, #0
9000270a:	6078      	str	r0, [r7, #4]
9000270c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000270e:	687b      	ldr	r3, [r7, #4]
90002710:	223f      	movs	r2, #63	; 0x3f
90002712:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90002714:	4b1a      	ldr	r3, [pc, #104]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
90002716:	691b      	ldr	r3, [r3, #16]
90002718:	f003 0207 	and.w	r2, r3, #7
9000271c:	687b      	ldr	r3, [r7, #4]
9000271e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
90002720:	4b17      	ldr	r3, [pc, #92]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
90002722:	699b      	ldr	r3, [r3, #24]
90002724:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90002728:	687b      	ldr	r3, [r7, #4]
9000272a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000272c:	4b14      	ldr	r3, [pc, #80]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
9000272e:	699b      	ldr	r3, [r3, #24]
90002730:	f003 020f 	and.w	r2, r3, #15
90002734:	687b      	ldr	r3, [r7, #4]
90002736:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
90002738:	4b11      	ldr	r3, [pc, #68]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
9000273a:	699b      	ldr	r3, [r3, #24]
9000273c:	f003 0270 	and.w	r2, r3, #112	; 0x70
90002740:	687b      	ldr	r3, [r7, #4]
90002742:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
90002744:	4b0e      	ldr	r3, [pc, #56]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
90002746:	69db      	ldr	r3, [r3, #28]
90002748:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000274c:	687b      	ldr	r3, [r7, #4]
9000274e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
90002750:	4b0b      	ldr	r3, [pc, #44]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
90002752:	69db      	ldr	r3, [r3, #28]
90002754:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90002758:	687b      	ldr	r3, [r7, #4]
9000275a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000275c:	4b08      	ldr	r3, [pc, #32]	; (90002780 <HAL_RCC_GetClockConfig+0x7c>)
9000275e:	6a1b      	ldr	r3, [r3, #32]
90002760:	f003 0270 	and.w	r2, r3, #112	; 0x70
90002764:	687b      	ldr	r3, [r7, #4]
90002766:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90002768:	4b06      	ldr	r3, [pc, #24]	; (90002784 <HAL_RCC_GetClockConfig+0x80>)
9000276a:	681b      	ldr	r3, [r3, #0]
9000276c:	f003 020f 	and.w	r2, r3, #15
90002770:	683b      	ldr	r3, [r7, #0]
90002772:	601a      	str	r2, [r3, #0]
}
90002774:	bf00      	nop
90002776:	370c      	adds	r7, #12
90002778:	46bd      	mov	sp, r7
9000277a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000277e:	4770      	bx	lr
90002780:	58024400 	.word	0x58024400
90002784:	52002000 	.word	0x52002000

90002788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90002788:	b580      	push	{r7, lr}
9000278a:	b086      	sub	sp, #24
9000278c:	af00      	add	r7, sp, #0
9000278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90002790:	2300      	movs	r3, #0
90002792:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90002794:	2300      	movs	r3, #0
90002796:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90002798:	687b      	ldr	r3, [r7, #4]
9000279a:	681b      	ldr	r3, [r3, #0]
9000279c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
900027a0:	2b00      	cmp	r3, #0
900027a2:	d03f      	beq.n	90002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
900027a4:	687b      	ldr	r3, [r7, #4]
900027a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900027a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900027ac:	d02a      	beq.n	90002804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
900027ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900027b2:	d824      	bhi.n	900027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
900027b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900027b8:	d018      	beq.n	900027ec <HAL_RCCEx_PeriphCLKConfig+0x64>
900027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900027be:	d81e      	bhi.n	900027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
900027c0:	2b00      	cmp	r3, #0
900027c2:	d003      	beq.n	900027cc <HAL_RCCEx_PeriphCLKConfig+0x44>
900027c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900027c8:	d007      	beq.n	900027da <HAL_RCCEx_PeriphCLKConfig+0x52>
900027ca:	e018      	b.n	900027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900027cc:	4ba3      	ldr	r3, [pc, #652]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900027d0:	4aa2      	ldr	r2, [pc, #648]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900027d8:	e015      	b.n	90002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
900027da:	687b      	ldr	r3, [r7, #4]
900027dc:	3304      	adds	r3, #4
900027de:	2102      	movs	r1, #2
900027e0:	4618      	mov	r0, r3
900027e2:	f001 f9d5 	bl	90003b90 <RCCEx_PLL2_Config>
900027e6:	4603      	mov	r3, r0
900027e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900027ea:	e00c      	b.n	90002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
900027ec:	687b      	ldr	r3, [r7, #4]
900027ee:	3324      	adds	r3, #36	; 0x24
900027f0:	2102      	movs	r1, #2
900027f2:	4618      	mov	r0, r3
900027f4:	f001 fa7e 	bl	90003cf4 <RCCEx_PLL3_Config>
900027f8:	4603      	mov	r3, r0
900027fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900027fc:	e003      	b.n	90002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900027fe:	2301      	movs	r3, #1
90002800:	75fb      	strb	r3, [r7, #23]
      break;
90002802:	e000      	b.n	90002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
90002804:	bf00      	nop
    }

    if(ret == HAL_OK)
90002806:	7dfb      	ldrb	r3, [r7, #23]
90002808:	2b00      	cmp	r3, #0
9000280a:	d109      	bne.n	90002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000280c:	4b93      	ldr	r3, [pc, #588]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90002814:	687b      	ldr	r3, [r7, #4]
90002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002818:	4990      	ldr	r1, [pc, #576]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000281a:	4313      	orrs	r3, r2
9000281c:	650b      	str	r3, [r1, #80]	; 0x50
9000281e:	e001      	b.n	90002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002820:	7dfb      	ldrb	r3, [r7, #23]
90002822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
90002824:	687b      	ldr	r3, [r7, #4]
90002826:	681b      	ldr	r3, [r3, #0]
90002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000282c:	2b00      	cmp	r3, #0
9000282e:	d03d      	beq.n	900028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
90002830:	687b      	ldr	r3, [r7, #4]
90002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002834:	2b04      	cmp	r3, #4
90002836:	d826      	bhi.n	90002886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
90002838:	a201      	add	r2, pc, #4	; (adr r2, 90002840 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
9000283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000283e:	bf00      	nop
90002840:	90002855 	.word	0x90002855
90002844:	90002863 	.word	0x90002863
90002848:	90002875 	.word	0x90002875
9000284c:	9000288d 	.word	0x9000288d
90002850:	9000288d 	.word	0x9000288d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002854:	4b81      	ldr	r3, [pc, #516]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002858:	4a80      	ldr	r2, [pc, #512]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000285e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002860:	e015      	b.n	9000288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002862:	687b      	ldr	r3, [r7, #4]
90002864:	3304      	adds	r3, #4
90002866:	2100      	movs	r1, #0
90002868:	4618      	mov	r0, r3
9000286a:	f001 f991 	bl	90003b90 <RCCEx_PLL2_Config>
9000286e:	4603      	mov	r3, r0
90002870:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002872:	e00c      	b.n	9000288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002874:	687b      	ldr	r3, [r7, #4]
90002876:	3324      	adds	r3, #36	; 0x24
90002878:	2100      	movs	r1, #0
9000287a:	4618      	mov	r0, r3
9000287c:	f001 fa3a 	bl	90003cf4 <RCCEx_PLL3_Config>
90002880:	4603      	mov	r3, r0
90002882:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002884:	e003      	b.n	9000288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002886:	2301      	movs	r3, #1
90002888:	75fb      	strb	r3, [r7, #23]
      break;
9000288a:	e000      	b.n	9000288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
9000288c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000288e:	7dfb      	ldrb	r3, [r7, #23]
90002890:	2b00      	cmp	r3, #0
90002892:	d109      	bne.n	900028a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002894:	4b71      	ldr	r3, [pc, #452]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002898:	f023 0207 	bic.w	r2, r3, #7
9000289c:	687b      	ldr	r3, [r7, #4]
9000289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900028a0:	496e      	ldr	r1, [pc, #440]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900028a2:	4313      	orrs	r3, r2
900028a4:	650b      	str	r3, [r1, #80]	; 0x50
900028a6:	e001      	b.n	900028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
900028a8:	7dfb      	ldrb	r3, [r7, #23]
900028aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
900028ac:	687b      	ldr	r3, [r7, #4]
900028ae:	681b      	ldr	r3, [r3, #0]
900028b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
900028b4:	2b00      	cmp	r3, #0
900028b6:	d042      	beq.n	9000293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
900028b8:	687b      	ldr	r3, [r7, #4]
900028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900028c0:	d02b      	beq.n	9000291a <HAL_RCCEx_PeriphCLKConfig+0x192>
900028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900028c6:	d825      	bhi.n	90002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
900028c8:	2bc0      	cmp	r3, #192	; 0xc0
900028ca:	d028      	beq.n	9000291e <HAL_RCCEx_PeriphCLKConfig+0x196>
900028cc:	2bc0      	cmp	r3, #192	; 0xc0
900028ce:	d821      	bhi.n	90002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
900028d0:	2b80      	cmp	r3, #128	; 0x80
900028d2:	d016      	beq.n	90002902 <HAL_RCCEx_PeriphCLKConfig+0x17a>
900028d4:	2b80      	cmp	r3, #128	; 0x80
900028d6:	d81d      	bhi.n	90002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
900028d8:	2b00      	cmp	r3, #0
900028da:	d002      	beq.n	900028e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
900028dc:	2b40      	cmp	r3, #64	; 0x40
900028de:	d007      	beq.n	900028f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
900028e0:	e018      	b.n	90002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900028e2:	4b5e      	ldr	r3, [pc, #376]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900028e6:	4a5d      	ldr	r2, [pc, #372]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900028ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
900028ee:	e017      	b.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900028f0:	687b      	ldr	r3, [r7, #4]
900028f2:	3304      	adds	r3, #4
900028f4:	2100      	movs	r1, #0
900028f6:	4618      	mov	r0, r3
900028f8:	f001 f94a 	bl	90003b90 <RCCEx_PLL2_Config>
900028fc:	4603      	mov	r3, r0
900028fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90002900:	e00e      	b.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002902:	687b      	ldr	r3, [r7, #4]
90002904:	3324      	adds	r3, #36	; 0x24
90002906:	2100      	movs	r1, #0
90002908:	4618      	mov	r0, r3
9000290a:	f001 f9f3 	bl	90003cf4 <RCCEx_PLL3_Config>
9000290e:	4603      	mov	r3, r0
90002910:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
90002912:	e005      	b.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002914:	2301      	movs	r3, #1
90002916:	75fb      	strb	r3, [r7, #23]
      break;
90002918:	e002      	b.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
9000291a:	bf00      	nop
9000291c:	e000      	b.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
9000291e:	bf00      	nop
    }

    if(ret == HAL_OK)
90002920:	7dfb      	ldrb	r3, [r7, #23]
90002922:	2b00      	cmp	r3, #0
90002924:	d109      	bne.n	9000293a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
90002926:	4b4d      	ldr	r3, [pc, #308]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000292a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
9000292e:	687b      	ldr	r3, [r7, #4]
90002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002932:	494a      	ldr	r1, [pc, #296]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002934:	4313      	orrs	r3, r2
90002936:	650b      	str	r3, [r1, #80]	; 0x50
90002938:	e001      	b.n	9000293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000293a:	7dfb      	ldrb	r3, [r7, #23]
9000293c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000293e:	687b      	ldr	r3, [r7, #4]
90002940:	681b      	ldr	r3, [r3, #0]
90002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90002946:	2b00      	cmp	r3, #0
90002948:	d049      	beq.n	900029de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
9000294a:	687b      	ldr	r3, [r7, #4]
9000294c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90002950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90002954:	d030      	beq.n	900029b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
90002956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000295a:	d82a      	bhi.n	900029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000295c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90002960:	d02c      	beq.n	900029bc <HAL_RCCEx_PeriphCLKConfig+0x234>
90002962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90002966:	d824      	bhi.n	900029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
90002968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000296c:	d018      	beq.n	900029a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
9000296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002972:	d81e      	bhi.n	900029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
90002974:	2b00      	cmp	r3, #0
90002976:	d003      	beq.n	90002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
90002978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000297c:	d007      	beq.n	9000298e <HAL_RCCEx_PeriphCLKConfig+0x206>
9000297e:	e018      	b.n	900029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002980:	4b36      	ldr	r3, [pc, #216]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002984:	4a35      	ldr	r2, [pc, #212]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000298a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000298c:	e017      	b.n	900029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000298e:	687b      	ldr	r3, [r7, #4]
90002990:	3304      	adds	r3, #4
90002992:	2100      	movs	r1, #0
90002994:	4618      	mov	r0, r3
90002996:	f001 f8fb 	bl	90003b90 <RCCEx_PLL2_Config>
9000299a:	4603      	mov	r3, r0
9000299c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
9000299e:	e00e      	b.n	900029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900029a0:	687b      	ldr	r3, [r7, #4]
900029a2:	3324      	adds	r3, #36	; 0x24
900029a4:	2100      	movs	r1, #0
900029a6:	4618      	mov	r0, r3
900029a8:	f001 f9a4 	bl	90003cf4 <RCCEx_PLL3_Config>
900029ac:	4603      	mov	r3, r0
900029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900029b0:	e005      	b.n	900029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
900029b2:	2301      	movs	r3, #1
900029b4:	75fb      	strb	r3, [r7, #23]
      break;
900029b6:	e002      	b.n	900029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
900029b8:	bf00      	nop
900029ba:	e000      	b.n	900029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
900029bc:	bf00      	nop
    }

    if(ret == HAL_OK)
900029be:	7dfb      	ldrb	r3, [r7, #23]
900029c0:	2b00      	cmp	r3, #0
900029c2:	d10a      	bne.n	900029da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
900029c4:	4b25      	ldr	r3, [pc, #148]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900029c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
900029cc:	687b      	ldr	r3, [r7, #4]
900029ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
900029d2:	4922      	ldr	r1, [pc, #136]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900029d4:	4313      	orrs	r3, r2
900029d6:	658b      	str	r3, [r1, #88]	; 0x58
900029d8:	e001      	b.n	900029de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
900029da:	7dfb      	ldrb	r3, [r7, #23]
900029dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
900029de:	687b      	ldr	r3, [r7, #4]
900029e0:	681b      	ldr	r3, [r3, #0]
900029e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
900029e6:	2b00      	cmp	r3, #0
900029e8:	d04b      	beq.n	90002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
900029ea:	687b      	ldr	r3, [r7, #4]
900029ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900029f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900029f4:	d030      	beq.n	90002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
900029f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900029fa:	d82a      	bhi.n	90002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
900029fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90002a00:	d02e      	beq.n	90002a60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
90002a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
90002a06:	d824      	bhi.n	90002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90002a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90002a0c:	d018      	beq.n	90002a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
90002a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
90002a12:	d81e      	bhi.n	90002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
90002a14:	2b00      	cmp	r3, #0
90002a16:	d003      	beq.n	90002a20 <HAL_RCCEx_PeriphCLKConfig+0x298>
90002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90002a1c:	d007      	beq.n	90002a2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
90002a1e:	e018      	b.n	90002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002a20:	4b0e      	ldr	r3, [pc, #56]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002a24:	4a0d      	ldr	r2, [pc, #52]	; (90002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002a2c:	e019      	b.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002a2e:	687b      	ldr	r3, [r7, #4]
90002a30:	3304      	adds	r3, #4
90002a32:	2100      	movs	r1, #0
90002a34:	4618      	mov	r0, r3
90002a36:	f001 f8ab 	bl	90003b90 <RCCEx_PLL2_Config>
90002a3a:	4603      	mov	r3, r0
90002a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
90002a3e:	e010      	b.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
90002a40:	687b      	ldr	r3, [r7, #4]
90002a42:	3324      	adds	r3, #36	; 0x24
90002a44:	2100      	movs	r1, #0
90002a46:	4618      	mov	r0, r3
90002a48:	f001 f954 	bl	90003cf4 <RCCEx_PLL3_Config>
90002a4c:	4603      	mov	r3, r0
90002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002a50:	e007      	b.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
90002a52:	2301      	movs	r3, #1
90002a54:	75fb      	strb	r3, [r7, #23]
      break;
90002a56:	e004      	b.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
90002a58:	bf00      	nop
90002a5a:	e002      	b.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
90002a5c:	58024400 	.word	0x58024400
      break;
90002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
90002a62:	7dfb      	ldrb	r3, [r7, #23]
90002a64:	2b00      	cmp	r3, #0
90002a66:	d10a      	bne.n	90002a7e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90002a68:	4b99      	ldr	r3, [pc, #612]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002a6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
90002a70:	687b      	ldr	r3, [r7, #4]
90002a72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90002a76:	4996      	ldr	r1, [pc, #600]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002a78:	4313      	orrs	r3, r2
90002a7a:	658b      	str	r3, [r1, #88]	; 0x58
90002a7c:	e001      	b.n	90002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002a7e:	7dfb      	ldrb	r3, [r7, #23]
90002a80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90002a82:	687b      	ldr	r3, [r7, #4]
90002a84:	681b      	ldr	r3, [r3, #0]
90002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90002a8a:	2b00      	cmp	r3, #0
90002a8c:	d032      	beq.n	90002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
90002a8e:	687b      	ldr	r3, [r7, #4]
90002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90002a92:	2b30      	cmp	r3, #48	; 0x30
90002a94:	d01c      	beq.n	90002ad0 <HAL_RCCEx_PeriphCLKConfig+0x348>
90002a96:	2b30      	cmp	r3, #48	; 0x30
90002a98:	d817      	bhi.n	90002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
90002a9a:	2b20      	cmp	r3, #32
90002a9c:	d00c      	beq.n	90002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
90002a9e:	2b20      	cmp	r3, #32
90002aa0:	d813      	bhi.n	90002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
90002aa2:	2b00      	cmp	r3, #0
90002aa4:	d016      	beq.n	90002ad4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
90002aa6:	2b10      	cmp	r3, #16
90002aa8:	d10f      	bne.n	90002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002aaa:	4b89      	ldr	r3, [pc, #548]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002aae:	4a88      	ldr	r2, [pc, #544]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
90002ab6:	e00e      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90002ab8:	687b      	ldr	r3, [r7, #4]
90002aba:	3304      	adds	r3, #4
90002abc:	2102      	movs	r1, #2
90002abe:	4618      	mov	r0, r3
90002ac0:	f001 f866 	bl	90003b90 <RCCEx_PLL2_Config>
90002ac4:	4603      	mov	r3, r0
90002ac6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
90002ac8:	e005      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
90002aca:	2301      	movs	r3, #1
90002acc:	75fb      	strb	r3, [r7, #23]
      break;
90002ace:	e002      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90002ad0:	bf00      	nop
90002ad2:	e000      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
90002ad6:	7dfb      	ldrb	r3, [r7, #23]
90002ad8:	2b00      	cmp	r3, #0
90002ada:	d109      	bne.n	90002af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
90002adc:	4b7c      	ldr	r3, [pc, #496]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90002ae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90002ae4:	687b      	ldr	r3, [r7, #4]
90002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90002ae8:	4979      	ldr	r1, [pc, #484]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002aea:	4313      	orrs	r3, r2
90002aec:	64cb      	str	r3, [r1, #76]	; 0x4c
90002aee:	e001      	b.n	90002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002af0:	7dfb      	ldrb	r3, [r7, #23]
90002af2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
90002af4:	687b      	ldr	r3, [r7, #4]
90002af6:	681b      	ldr	r3, [r3, #0]
90002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90002afc:	2b00      	cmp	r3, #0
90002afe:	d047      	beq.n	90002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
90002b00:	687b      	ldr	r3, [r7, #4]
90002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90002b08:	d030      	beq.n	90002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
90002b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90002b0e:	d82a      	bhi.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
90002b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90002b14:	d02c      	beq.n	90002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
90002b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90002b1a:	d824      	bhi.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
90002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90002b20:	d018      	beq.n	90002b54 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
90002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90002b26:	d81e      	bhi.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
90002b28:	2b00      	cmp	r3, #0
90002b2a:	d003      	beq.n	90002b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
90002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90002b30:	d007      	beq.n	90002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
90002b32:	e018      	b.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002b34:	4b66      	ldr	r3, [pc, #408]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002b38:	4a65      	ldr	r2, [pc, #404]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90002b40:	e017      	b.n	90002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002b42:	687b      	ldr	r3, [r7, #4]
90002b44:	3304      	adds	r3, #4
90002b46:	2100      	movs	r1, #0
90002b48:	4618      	mov	r0, r3
90002b4a:	f001 f821 	bl	90003b90 <RCCEx_PLL2_Config>
90002b4e:	4603      	mov	r3, r0
90002b50:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90002b52:	e00e      	b.n	90002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002b54:	687b      	ldr	r3, [r7, #4]
90002b56:	3324      	adds	r3, #36	; 0x24
90002b58:	2100      	movs	r1, #0
90002b5a:	4618      	mov	r0, r3
90002b5c:	f001 f8ca 	bl	90003cf4 <RCCEx_PLL3_Config>
90002b60:	4603      	mov	r3, r0
90002b62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90002b64:	e005      	b.n	90002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002b66:	2301      	movs	r3, #1
90002b68:	75fb      	strb	r3, [r7, #23]
      break;
90002b6a:	e002      	b.n	90002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
90002b6c:	bf00      	nop
90002b6e:	e000      	b.n	90002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
90002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
90002b72:	7dfb      	ldrb	r3, [r7, #23]
90002b74:	2b00      	cmp	r3, #0
90002b76:	d109      	bne.n	90002b8c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90002b78:	4b55      	ldr	r3, [pc, #340]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002b7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
90002b80:	687b      	ldr	r3, [r7, #4]
90002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002b84:	4952      	ldr	r1, [pc, #328]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002b86:	4313      	orrs	r3, r2
90002b88:	650b      	str	r3, [r1, #80]	; 0x50
90002b8a:	e001      	b.n	90002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002b8c:	7dfb      	ldrb	r3, [r7, #23]
90002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90002b90:	687b      	ldr	r3, [r7, #4]
90002b92:	681b      	ldr	r3, [r3, #0]
90002b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90002b98:	2b00      	cmp	r3, #0
90002b9a:	d049      	beq.n	90002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
90002b9c:	687b      	ldr	r3, [r7, #4]
90002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90002ba4:	d02e      	beq.n	90002c04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
90002ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90002baa:	d828      	bhi.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
90002bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90002bb0:	d02a      	beq.n	90002c08 <HAL_RCCEx_PeriphCLKConfig+0x480>
90002bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90002bb6:	d822      	bhi.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
90002bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002bbc:	d026      	beq.n	90002c0c <HAL_RCCEx_PeriphCLKConfig+0x484>
90002bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002bc2:	d81c      	bhi.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
90002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90002bc8:	d010      	beq.n	90002bec <HAL_RCCEx_PeriphCLKConfig+0x464>
90002bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90002bce:	d816      	bhi.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
90002bd0:	2b00      	cmp	r3, #0
90002bd2:	d01d      	beq.n	90002c10 <HAL_RCCEx_PeriphCLKConfig+0x488>
90002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002bd8:	d111      	bne.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002bda:	687b      	ldr	r3, [r7, #4]
90002bdc:	3304      	adds	r3, #4
90002bde:	2101      	movs	r1, #1
90002be0:	4618      	mov	r0, r3
90002be2:	f000 ffd5 	bl	90003b90 <RCCEx_PLL2_Config>
90002be6:	4603      	mov	r3, r0
90002be8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
90002bea:	e012      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002bec:	687b      	ldr	r3, [r7, #4]
90002bee:	3324      	adds	r3, #36	; 0x24
90002bf0:	2101      	movs	r1, #1
90002bf2:	4618      	mov	r0, r3
90002bf4:	f001 f87e 	bl	90003cf4 <RCCEx_PLL3_Config>
90002bf8:	4603      	mov	r3, r0
90002bfa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
90002bfc:	e009      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002bfe:	2301      	movs	r3, #1
90002c00:	75fb      	strb	r3, [r7, #23]
      break;
90002c02:	e006      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90002c04:	bf00      	nop
90002c06:	e004      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90002c08:	bf00      	nop
90002c0a:	e002      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90002c0c:	bf00      	nop
90002c0e:	e000      	b.n	90002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
90002c10:	bf00      	nop
    }

    if(ret == HAL_OK)
90002c12:	7dfb      	ldrb	r3, [r7, #23]
90002c14:	2b00      	cmp	r3, #0
90002c16:	d109      	bne.n	90002c2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
90002c18:	4b2d      	ldr	r3, [pc, #180]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002c1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
90002c20:	687b      	ldr	r3, [r7, #4]
90002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002c24:	492a      	ldr	r1, [pc, #168]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002c26:	4313      	orrs	r3, r2
90002c28:	650b      	str	r3, [r1, #80]	; 0x50
90002c2a:	e001      	b.n	90002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002c2c:	7dfb      	ldrb	r3, [r7, #23]
90002c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
90002c30:	687b      	ldr	r3, [r7, #4]
90002c32:	681b      	ldr	r3, [r3, #0]
90002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90002c38:	2b00      	cmp	r3, #0
90002c3a:	d04d      	beq.n	90002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
90002c3c:	687b      	ldr	r3, [r7, #4]
90002c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90002c46:	d02e      	beq.n	90002ca6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
90002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90002c4c:	d828      	bhi.n	90002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002c52:	d02a      	beq.n	90002caa <HAL_RCCEx_PeriphCLKConfig+0x522>
90002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002c58:	d822      	bhi.n	90002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002c5e:	d026      	beq.n	90002cae <HAL_RCCEx_PeriphCLKConfig+0x526>
90002c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002c64:	d81c      	bhi.n	90002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002c6a:	d010      	beq.n	90002c8e <HAL_RCCEx_PeriphCLKConfig+0x506>
90002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002c70:	d816      	bhi.n	90002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002c72:	2b00      	cmp	r3, #0
90002c74:	d01d      	beq.n	90002cb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
90002c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90002c7a:	d111      	bne.n	90002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002c7c:	687b      	ldr	r3, [r7, #4]
90002c7e:	3304      	adds	r3, #4
90002c80:	2101      	movs	r1, #1
90002c82:	4618      	mov	r0, r3
90002c84:	f000 ff84 	bl	90003b90 <RCCEx_PLL2_Config>
90002c88:	4603      	mov	r3, r0
90002c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
90002c8c:	e012      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002c8e:	687b      	ldr	r3, [r7, #4]
90002c90:	3324      	adds	r3, #36	; 0x24
90002c92:	2101      	movs	r1, #1
90002c94:	4618      	mov	r0, r3
90002c96:	f001 f82d 	bl	90003cf4 <RCCEx_PLL3_Config>
90002c9a:	4603      	mov	r3, r0
90002c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
90002c9e:	e009      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
90002ca0:	2301      	movs	r3, #1
90002ca2:	75fb      	strb	r3, [r7, #23]
      break;
90002ca4:	e006      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002ca6:	bf00      	nop
90002ca8:	e004      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002caa:	bf00      	nop
90002cac:	e002      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002cae:	bf00      	nop
90002cb0:	e000      	b.n	90002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
90002cb4:	7dfb      	ldrb	r3, [r7, #23]
90002cb6:	2b00      	cmp	r3, #0
90002cb8:	d10c      	bne.n	90002cd4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90002cba:	4b05      	ldr	r3, [pc, #20]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90002cc2:	687b      	ldr	r3, [r7, #4]
90002cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90002cc8:	4901      	ldr	r1, [pc, #4]	; (90002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002cca:	4313      	orrs	r3, r2
90002ccc:	658b      	str	r3, [r1, #88]	; 0x58
90002cce:	e003      	b.n	90002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
90002cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90002cd4:	7dfb      	ldrb	r3, [r7, #23]
90002cd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90002cd8:	687b      	ldr	r3, [r7, #4]
90002cda:	681b      	ldr	r3, [r3, #0]
90002cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90002ce0:	2b00      	cmp	r3, #0
90002ce2:	d02f      	beq.n	90002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
90002ce4:	687b      	ldr	r3, [r7, #4]
90002ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002cec:	d00e      	beq.n	90002d0c <HAL_RCCEx_PeriphCLKConfig+0x584>
90002cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002cf2:	d814      	bhi.n	90002d1e <HAL_RCCEx_PeriphCLKConfig+0x596>
90002cf4:	2b00      	cmp	r3, #0
90002cf6:	d015      	beq.n	90002d24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
90002cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90002cfc:	d10f      	bne.n	90002d1e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002cfe:	4baf      	ldr	r3, [pc, #700]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002d02:	4aae      	ldr	r2, [pc, #696]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90002d0a:	e00c      	b.n	90002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	3304      	adds	r3, #4
90002d10:	2101      	movs	r1, #1
90002d12:	4618      	mov	r0, r3
90002d14:	f000 ff3c 	bl	90003b90 <RCCEx_PLL2_Config>
90002d18:	4603      	mov	r3, r0
90002d1a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90002d1c:	e003      	b.n	90002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002d1e:	2301      	movs	r3, #1
90002d20:	75fb      	strb	r3, [r7, #23]
      break;
90002d22:	e000      	b.n	90002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
90002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
90002d26:	7dfb      	ldrb	r3, [r7, #23]
90002d28:	2b00      	cmp	r3, #0
90002d2a:	d109      	bne.n	90002d40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90002d2c:	4ba3      	ldr	r3, [pc, #652]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002d30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90002d34:	687b      	ldr	r3, [r7, #4]
90002d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002d38:	49a0      	ldr	r1, [pc, #640]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d3a:	4313      	orrs	r3, r2
90002d3c:	650b      	str	r3, [r1, #80]	; 0x50
90002d3e:	e001      	b.n	90002d44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002d40:	7dfb      	ldrb	r3, [r7, #23]
90002d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90002d44:	687b      	ldr	r3, [r7, #4]
90002d46:	681b      	ldr	r3, [r3, #0]
90002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002d4c:	2b00      	cmp	r3, #0
90002d4e:	d032      	beq.n	90002db6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
90002d50:	687b      	ldr	r3, [r7, #4]
90002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002d54:	2b03      	cmp	r3, #3
90002d56:	d81b      	bhi.n	90002d90 <HAL_RCCEx_PeriphCLKConfig+0x608>
90002d58:	a201      	add	r2, pc, #4	; (adr r2, 90002d60 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
90002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002d5e:	bf00      	nop
90002d60:	90002d97 	.word	0x90002d97
90002d64:	90002d71 	.word	0x90002d71
90002d68:	90002d7f 	.word	0x90002d7f
90002d6c:	90002d97 	.word	0x90002d97
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002d70:	4b92      	ldr	r3, [pc, #584]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002d74:	4a91      	ldr	r2, [pc, #580]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
90002d7c:	e00c      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90002d7e:	687b      	ldr	r3, [r7, #4]
90002d80:	3304      	adds	r3, #4
90002d82:	2102      	movs	r1, #2
90002d84:	4618      	mov	r0, r3
90002d86:	f000 ff03 	bl	90003b90 <RCCEx_PLL2_Config>
90002d8a:	4603      	mov	r3, r0
90002d8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
90002d8e:	e003      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
90002d90:	2301      	movs	r3, #1
90002d92:	75fb      	strb	r3, [r7, #23]
      break;
90002d94:	e000      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
90002d96:	bf00      	nop
    }

    if(ret == HAL_OK)
90002d98:	7dfb      	ldrb	r3, [r7, #23]
90002d9a:	2b00      	cmp	r3, #0
90002d9c:	d109      	bne.n	90002db2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90002d9e:	4b87      	ldr	r3, [pc, #540]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90002da2:	f023 0203 	bic.w	r2, r3, #3
90002da6:	687b      	ldr	r3, [r7, #4]
90002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002daa:	4984      	ldr	r1, [pc, #528]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002dac:	4313      	orrs	r3, r2
90002dae:	64cb      	str	r3, [r1, #76]	; 0x4c
90002db0:	e001      	b.n	90002db6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002db2:	7dfb      	ldrb	r3, [r7, #23]
90002db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90002db6:	687b      	ldr	r3, [r7, #4]
90002db8:	681b      	ldr	r3, [r3, #0]
90002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002dbe:	2b00      	cmp	r3, #0
90002dc0:	f000 8086 	beq.w	90002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90002dc4:	4b7e      	ldr	r3, [pc, #504]	; (90002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002dc6:	681b      	ldr	r3, [r3, #0]
90002dc8:	4a7d      	ldr	r2, [pc, #500]	; (90002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90002dd0:	f7fe f966 	bl	900010a0 <HAL_GetTick>
90002dd4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90002dd6:	e009      	b.n	90002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002dd8:	f7fe f962 	bl	900010a0 <HAL_GetTick>
90002ddc:	4602      	mov	r2, r0
90002dde:	693b      	ldr	r3, [r7, #16]
90002de0:	1ad3      	subs	r3, r2, r3
90002de2:	2b64      	cmp	r3, #100	; 0x64
90002de4:	d902      	bls.n	90002dec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
90002de6:	2303      	movs	r3, #3
90002de8:	75fb      	strb	r3, [r7, #23]
        break;
90002dea:	e005      	b.n	90002df8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90002dec:	4b74      	ldr	r3, [pc, #464]	; (90002fc0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002dee:	681b      	ldr	r3, [r3, #0]
90002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002df4:	2b00      	cmp	r3, #0
90002df6:	d0ef      	beq.n	90002dd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
90002df8:	7dfb      	ldrb	r3, [r7, #23]
90002dfa:	2b00      	cmp	r3, #0
90002dfc:	d166      	bne.n	90002ecc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90002dfe:	4b6f      	ldr	r3, [pc, #444]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90002e02:	687b      	ldr	r3, [r7, #4]
90002e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002e08:	4053      	eors	r3, r2
90002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
90002e0e:	2b00      	cmp	r3, #0
90002e10:	d013      	beq.n	90002e3a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002e12:	4b6a      	ldr	r3, [pc, #424]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90002e1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90002e1c:	4b67      	ldr	r3, [pc, #412]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e20:	4a66      	ldr	r2, [pc, #408]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002e26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90002e28:	4b64      	ldr	r3, [pc, #400]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e2c:	4a63      	ldr	r2, [pc, #396]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002e32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90002e34:	4a61      	ldr	r2, [pc, #388]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e36:	68fb      	ldr	r3, [r7, #12]
90002e38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90002e3a:	687b      	ldr	r3, [r7, #4]
90002e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90002e44:	d115      	bne.n	90002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002e46:	f7fe f92b 	bl	900010a0 <HAL_GetTick>
90002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90002e4c:	e00b      	b.n	90002e66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002e4e:	f7fe f927 	bl	900010a0 <HAL_GetTick>
90002e52:	4602      	mov	r2, r0
90002e54:	693b      	ldr	r3, [r7, #16]
90002e56:	1ad3      	subs	r3, r2, r3
90002e58:	f241 3288 	movw	r2, #5000	; 0x1388
90002e5c:	4293      	cmp	r3, r2
90002e5e:	d902      	bls.n	90002e66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
90002e60:	2303      	movs	r3, #3
90002e62:	75fb      	strb	r3, [r7, #23]
            break;
90002e64:	e005      	b.n	90002e72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90002e66:	4b55      	ldr	r3, [pc, #340]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002e6a:	f003 0302 	and.w	r3, r3, #2
90002e6e:	2b00      	cmp	r3, #0
90002e70:	d0ed      	beq.n	90002e4e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
90002e72:	7dfb      	ldrb	r3, [r7, #23]
90002e74:	2b00      	cmp	r3, #0
90002e76:	d126      	bne.n	90002ec6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90002e78:	687b      	ldr	r3, [r7, #4]
90002e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90002e86:	d10d      	bne.n	90002ea4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
90002e88:	4b4c      	ldr	r3, [pc, #304]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e8a:	691b      	ldr	r3, [r3, #16]
90002e8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
90002e90:	687b      	ldr	r3, [r7, #4]
90002e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002e96:	0919      	lsrs	r1, r3, #4
90002e98:	4b4a      	ldr	r3, [pc, #296]	; (90002fc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
90002e9a:	400b      	ands	r3, r1
90002e9c:	4947      	ldr	r1, [pc, #284]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002e9e:	4313      	orrs	r3, r2
90002ea0:	610b      	str	r3, [r1, #16]
90002ea2:	e005      	b.n	90002eb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
90002ea4:	4b45      	ldr	r3, [pc, #276]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002ea6:	691b      	ldr	r3, [r3, #16]
90002ea8:	4a44      	ldr	r2, [pc, #272]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002eaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90002eae:	6113      	str	r3, [r2, #16]
90002eb0:	4b42      	ldr	r3, [pc, #264]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90002eb4:	687b      	ldr	r3, [r7, #4]
90002eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002ebe:	493f      	ldr	r1, [pc, #252]	; (90002fbc <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002ec0:	4313      	orrs	r3, r2
90002ec2:	670b      	str	r3, [r1, #112]	; 0x70
90002ec4:	e004      	b.n	90002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
90002ec6:	7dfb      	ldrb	r3, [r7, #23]
90002ec8:	75bb      	strb	r3, [r7, #22]
90002eca:	e001      	b.n	90002ed0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90002ecc:	7dfb      	ldrb	r3, [r7, #23]
90002ece:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90002ed0:	687b      	ldr	r3, [r7, #4]
90002ed2:	681b      	ldr	r3, [r3, #0]
90002ed4:	f003 0301 	and.w	r3, r3, #1
90002ed8:	2b00      	cmp	r3, #0
90002eda:	f000 8085 	beq.w	90002fe8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
90002ede:	687b      	ldr	r3, [r7, #4]
90002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90002ee2:	2b28      	cmp	r3, #40	; 0x28
90002ee4:	d866      	bhi.n	90002fb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
90002ee6:	a201      	add	r2, pc, #4	; (adr r2, 90002eec <HAL_RCCEx_PeriphCLKConfig+0x764>)
90002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002eec:	90002fc9 	.word	0x90002fc9
90002ef0:	90002fb5 	.word	0x90002fb5
90002ef4:	90002fb5 	.word	0x90002fb5
90002ef8:	90002fb5 	.word	0x90002fb5
90002efc:	90002fb5 	.word	0x90002fb5
90002f00:	90002fb5 	.word	0x90002fb5
90002f04:	90002fb5 	.word	0x90002fb5
90002f08:	90002fb5 	.word	0x90002fb5
90002f0c:	90002f91 	.word	0x90002f91
90002f10:	90002fb5 	.word	0x90002fb5
90002f14:	90002fb5 	.word	0x90002fb5
90002f18:	90002fb5 	.word	0x90002fb5
90002f1c:	90002fb5 	.word	0x90002fb5
90002f20:	90002fb5 	.word	0x90002fb5
90002f24:	90002fb5 	.word	0x90002fb5
90002f28:	90002fb5 	.word	0x90002fb5
90002f2c:	90002fa3 	.word	0x90002fa3
90002f30:	90002fb5 	.word	0x90002fb5
90002f34:	90002fb5 	.word	0x90002fb5
90002f38:	90002fb5 	.word	0x90002fb5
90002f3c:	90002fb5 	.word	0x90002fb5
90002f40:	90002fb5 	.word	0x90002fb5
90002f44:	90002fb5 	.word	0x90002fb5
90002f48:	90002fb5 	.word	0x90002fb5
90002f4c:	90002fc9 	.word	0x90002fc9
90002f50:	90002fb5 	.word	0x90002fb5
90002f54:	90002fb5 	.word	0x90002fb5
90002f58:	90002fb5 	.word	0x90002fb5
90002f5c:	90002fb5 	.word	0x90002fb5
90002f60:	90002fb5 	.word	0x90002fb5
90002f64:	90002fb5 	.word	0x90002fb5
90002f68:	90002fb5 	.word	0x90002fb5
90002f6c:	90002fc9 	.word	0x90002fc9
90002f70:	90002fb5 	.word	0x90002fb5
90002f74:	90002fb5 	.word	0x90002fb5
90002f78:	90002fb5 	.word	0x90002fb5
90002f7c:	90002fb5 	.word	0x90002fb5
90002f80:	90002fb5 	.word	0x90002fb5
90002f84:	90002fb5 	.word	0x90002fb5
90002f88:	90002fb5 	.word	0x90002fb5
90002f8c:	90002fc9 	.word	0x90002fc9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002f90:	687b      	ldr	r3, [r7, #4]
90002f92:	3304      	adds	r3, #4
90002f94:	2101      	movs	r1, #1
90002f96:	4618      	mov	r0, r3
90002f98:	f000 fdfa 	bl	90003b90 <RCCEx_PLL2_Config>
90002f9c:	4603      	mov	r3, r0
90002f9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90002fa0:	e013      	b.n	90002fca <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002fa2:	687b      	ldr	r3, [r7, #4]
90002fa4:	3324      	adds	r3, #36	; 0x24
90002fa6:	2101      	movs	r1, #1
90002fa8:	4618      	mov	r0, r3
90002faa:	f000 fea3 	bl	90003cf4 <RCCEx_PLL3_Config>
90002fae:	4603      	mov	r3, r0
90002fb0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90002fb2:	e00a      	b.n	90002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002fb4:	2301      	movs	r3, #1
90002fb6:	75fb      	strb	r3, [r7, #23]
      break;
90002fb8:	e007      	b.n	90002fca <HAL_RCCEx_PeriphCLKConfig+0x842>
90002fba:	bf00      	nop
90002fbc:	58024400 	.word	0x58024400
90002fc0:	58024800 	.word	0x58024800
90002fc4:	00ffffcf 	.word	0x00ffffcf
      break;
90002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
90002fca:	7dfb      	ldrb	r3, [r7, #23]
90002fcc:	2b00      	cmp	r3, #0
90002fce:	d109      	bne.n	90002fe4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90002fd0:	4b96      	ldr	r3, [pc, #600]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002fd4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
90002fd8:	687b      	ldr	r3, [r7, #4]
90002fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90002fdc:	4993      	ldr	r1, [pc, #588]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002fde:	4313      	orrs	r3, r2
90002fe0:	654b      	str	r3, [r1, #84]	; 0x54
90002fe2:	e001      	b.n	90002fe8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002fe4:	7dfb      	ldrb	r3, [r7, #23]
90002fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90002fe8:	687b      	ldr	r3, [r7, #4]
90002fea:	681b      	ldr	r3, [r3, #0]
90002fec:	f003 0302 	and.w	r3, r3, #2
90002ff0:	2b00      	cmp	r3, #0
90002ff2:	d038      	beq.n	90003066 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
90002ff4:	687b      	ldr	r3, [r7, #4]
90002ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002ff8:	2b05      	cmp	r3, #5
90002ffa:	d821      	bhi.n	90003040 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
90002ffc:	a201      	add	r2, pc, #4	; (adr r2, 90003004 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
90002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003002:	bf00      	nop
90003004:	90003047 	.word	0x90003047
90003008:	9000301d 	.word	0x9000301d
9000300c:	9000302f 	.word	0x9000302f
90003010:	90003047 	.word	0x90003047
90003014:	90003047 	.word	0x90003047
90003018:	90003047 	.word	0x90003047
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
9000301c:	687b      	ldr	r3, [r7, #4]
9000301e:	3304      	adds	r3, #4
90003020:	2101      	movs	r1, #1
90003022:	4618      	mov	r0, r3
90003024:	f000 fdb4 	bl	90003b90 <RCCEx_PLL2_Config>
90003028:	4603      	mov	r3, r0
9000302a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
9000302c:	e00c      	b.n	90003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
9000302e:	687b      	ldr	r3, [r7, #4]
90003030:	3324      	adds	r3, #36	; 0x24
90003032:	2101      	movs	r1, #1
90003034:	4618      	mov	r0, r3
90003036:	f000 fe5d 	bl	90003cf4 <RCCEx_PLL3_Config>
9000303a:	4603      	mov	r3, r0
9000303c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
9000303e:	e003      	b.n	90003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90003040:	2301      	movs	r3, #1
90003042:	75fb      	strb	r3, [r7, #23]
      break;
90003044:	e000      	b.n	90003048 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
90003046:	bf00      	nop
    }

    if(ret == HAL_OK)
90003048:	7dfb      	ldrb	r3, [r7, #23]
9000304a:	2b00      	cmp	r3, #0
9000304c:	d109      	bne.n	90003062 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000304e:	4b77      	ldr	r3, [pc, #476]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003052:	f023 0207 	bic.w	r2, r3, #7
90003056:	687b      	ldr	r3, [r7, #4]
90003058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000305a:	4974      	ldr	r1, [pc, #464]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
9000305c:	4313      	orrs	r3, r2
9000305e:	654b      	str	r3, [r1, #84]	; 0x54
90003060:	e001      	b.n	90003066 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90003062:	7dfb      	ldrb	r3, [r7, #23]
90003064:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90003066:	687b      	ldr	r3, [r7, #4]
90003068:	681b      	ldr	r3, [r3, #0]
9000306a:	f003 0304 	and.w	r3, r3, #4
9000306e:	2b00      	cmp	r3, #0
90003070:	d03a      	beq.n	900030e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
90003072:	687b      	ldr	r3, [r7, #4]
90003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003078:	2b05      	cmp	r3, #5
9000307a:	d821      	bhi.n	900030c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
9000307c:	a201      	add	r2, pc, #4	; (adr r2, 90003084 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
9000307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003082:	bf00      	nop
90003084:	900030c7 	.word	0x900030c7
90003088:	9000309d 	.word	0x9000309d
9000308c:	900030af 	.word	0x900030af
90003090:	900030c7 	.word	0x900030c7
90003094:	900030c7 	.word	0x900030c7
90003098:	900030c7 	.word	0x900030c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
9000309c:	687b      	ldr	r3, [r7, #4]
9000309e:	3304      	adds	r3, #4
900030a0:	2101      	movs	r1, #1
900030a2:	4618      	mov	r0, r3
900030a4:	f000 fd74 	bl	90003b90 <RCCEx_PLL2_Config>
900030a8:	4603      	mov	r3, r0
900030aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
900030ac:	e00c      	b.n	900030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900030ae:	687b      	ldr	r3, [r7, #4]
900030b0:	3324      	adds	r3, #36	; 0x24
900030b2:	2101      	movs	r1, #1
900030b4:	4618      	mov	r0, r3
900030b6:	f000 fe1d 	bl	90003cf4 <RCCEx_PLL3_Config>
900030ba:	4603      	mov	r3, r0
900030bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
900030be:	e003      	b.n	900030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900030c0:	2301      	movs	r3, #1
900030c2:	75fb      	strb	r3, [r7, #23]
      break;
900030c4:	e000      	b.n	900030c8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
900030c6:	bf00      	nop
    }

    if(ret == HAL_OK)
900030c8:	7dfb      	ldrb	r3, [r7, #23]
900030ca:	2b00      	cmp	r3, #0
900030cc:	d10a      	bne.n	900030e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
900030ce:	4b57      	ldr	r3, [pc, #348]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
900030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900030d2:	f023 0207 	bic.w	r2, r3, #7
900030d6:	687b      	ldr	r3, [r7, #4]
900030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900030dc:	4953      	ldr	r1, [pc, #332]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
900030de:	4313      	orrs	r3, r2
900030e0:	658b      	str	r3, [r1, #88]	; 0x58
900030e2:	e001      	b.n	900030e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
900030e4:	7dfb      	ldrb	r3, [r7, #23]
900030e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900030e8:	687b      	ldr	r3, [r7, #4]
900030ea:	681b      	ldr	r3, [r3, #0]
900030ec:	f003 0320 	and.w	r3, r3, #32
900030f0:	2b00      	cmp	r3, #0
900030f2:	d04b      	beq.n	9000318c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
900030f4:	687b      	ldr	r3, [r7, #4]
900030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
900030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900030fe:	d02e      	beq.n	9000315e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
90003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90003104:	d828      	bhi.n	90003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000310a:	d02a      	beq.n	90003162 <HAL_RCCEx_PeriphCLKConfig+0x9da>
9000310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90003110:	d822      	bhi.n	90003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90003112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90003116:	d026      	beq.n	90003166 <HAL_RCCEx_PeriphCLKConfig+0x9de>
90003118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000311c:	d81c      	bhi.n	90003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
9000311e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90003122:	d010      	beq.n	90003146 <HAL_RCCEx_PeriphCLKConfig+0x9be>
90003124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90003128:	d816      	bhi.n	90003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
9000312a:	2b00      	cmp	r3, #0
9000312c:	d01d      	beq.n	9000316a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
9000312e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90003132:	d111      	bne.n	90003158 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90003134:	687b      	ldr	r3, [r7, #4]
90003136:	3304      	adds	r3, #4
90003138:	2100      	movs	r1, #0
9000313a:	4618      	mov	r0, r3
9000313c:	f000 fd28 	bl	90003b90 <RCCEx_PLL2_Config>
90003140:	4603      	mov	r3, r0
90003142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90003144:	e012      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90003146:	687b      	ldr	r3, [r7, #4]
90003148:	3324      	adds	r3, #36	; 0x24
9000314a:	2102      	movs	r1, #2
9000314c:	4618      	mov	r0, r3
9000314e:	f000 fdd1 	bl	90003cf4 <RCCEx_PLL3_Config>
90003152:	4603      	mov	r3, r0
90003154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90003156:	e009      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90003158:	2301      	movs	r3, #1
9000315a:	75fb      	strb	r3, [r7, #23]
      break;
9000315c:	e006      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
9000315e:	bf00      	nop
90003160:	e004      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90003162:	bf00      	nop
90003164:	e002      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90003166:	bf00      	nop
90003168:	e000      	b.n	9000316c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
9000316a:	bf00      	nop
    }

    if(ret == HAL_OK)
9000316c:	7dfb      	ldrb	r3, [r7, #23]
9000316e:	2b00      	cmp	r3, #0
90003170:	d10a      	bne.n	90003188 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90003172:	4b2e      	ldr	r3, [pc, #184]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003176:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
9000317a:	687b      	ldr	r3, [r7, #4]
9000317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90003180:	492a      	ldr	r1, [pc, #168]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90003182:	4313      	orrs	r3, r2
90003184:	654b      	str	r3, [r1, #84]	; 0x54
90003186:	e001      	b.n	9000318c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
90003188:	7dfb      	ldrb	r3, [r7, #23]
9000318a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000318c:	687b      	ldr	r3, [r7, #4]
9000318e:	681b      	ldr	r3, [r3, #0]
90003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003194:	2b00      	cmp	r3, #0
90003196:	d04d      	beq.n	90003234 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
90003198:	687b      	ldr	r3, [r7, #4]
9000319a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
9000319e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
900031a2:	d02e      	beq.n	90003202 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
900031a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
900031a8:	d828      	bhi.n	900031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
900031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900031ae:	d02a      	beq.n	90003206 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
900031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900031b4:	d822      	bhi.n	900031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
900031b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
900031ba:	d026      	beq.n	9000320a <HAL_RCCEx_PeriphCLKConfig+0xa82>
900031bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
900031c0:	d81c      	bhi.n	900031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
900031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900031c6:	d010      	beq.n	900031ea <HAL_RCCEx_PeriphCLKConfig+0xa62>
900031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
900031cc:	d816      	bhi.n	900031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
900031ce:	2b00      	cmp	r3, #0
900031d0:	d01d      	beq.n	9000320e <HAL_RCCEx_PeriphCLKConfig+0xa86>
900031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
900031d6:	d111      	bne.n	900031fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900031d8:	687b      	ldr	r3, [r7, #4]
900031da:	3304      	adds	r3, #4
900031dc:	2100      	movs	r1, #0
900031de:	4618      	mov	r0, r3
900031e0:	f000 fcd6 	bl	90003b90 <RCCEx_PLL2_Config>
900031e4:	4603      	mov	r3, r0
900031e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
900031e8:	e012      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
900031ea:	687b      	ldr	r3, [r7, #4]
900031ec:	3324      	adds	r3, #36	; 0x24
900031ee:	2102      	movs	r1, #2
900031f0:	4618      	mov	r0, r3
900031f2:	f000 fd7f 	bl	90003cf4 <RCCEx_PLL3_Config>
900031f6:	4603      	mov	r3, r0
900031f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
900031fa:	e009      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900031fc:	2301      	movs	r3, #1
900031fe:	75fb      	strb	r3, [r7, #23]
      break;
90003200:	e006      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90003202:	bf00      	nop
90003204:	e004      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90003206:	bf00      	nop
90003208:	e002      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
9000320a:	bf00      	nop
9000320c:	e000      	b.n	90003210 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
9000320e:	bf00      	nop
    }

    if(ret == HAL_OK)
90003210:	7dfb      	ldrb	r3, [r7, #23]
90003212:	2b00      	cmp	r3, #0
90003214:	d10c      	bne.n	90003230 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90003216:	4b05      	ldr	r3, [pc, #20]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000321a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
9000321e:	687b      	ldr	r3, [r7, #4]
90003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90003224:	4901      	ldr	r1, [pc, #4]	; (9000322c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90003226:	4313      	orrs	r3, r2
90003228:	658b      	str	r3, [r1, #88]	; 0x58
9000322a:	e003      	b.n	90003234 <HAL_RCCEx_PeriphCLKConfig+0xaac>
9000322c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90003230:	7dfb      	ldrb	r3, [r7, #23]
90003232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90003234:	687b      	ldr	r3, [r7, #4]
90003236:	681b      	ldr	r3, [r3, #0]
90003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000323c:	2b00      	cmp	r3, #0
9000323e:	d04b      	beq.n	900032d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
90003240:	687b      	ldr	r3, [r7, #4]
90003242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90003246:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
9000324a:	d02e      	beq.n	900032aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
9000324c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90003250:	d828      	bhi.n	900032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90003252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90003256:	d02a      	beq.n	900032ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
90003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000325c:	d822      	bhi.n	900032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
9000325e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90003262:	d026      	beq.n	900032b2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
90003264:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90003268:	d81c      	bhi.n	900032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
9000326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000326e:	d010      	beq.n	90003292 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
90003270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90003274:	d816      	bhi.n	900032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90003276:	2b00      	cmp	r3, #0
90003278:	d01d      	beq.n	900032b6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
9000327a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000327e:	d111      	bne.n	900032a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90003280:	687b      	ldr	r3, [r7, #4]
90003282:	3304      	adds	r3, #4
90003284:	2100      	movs	r1, #0
90003286:	4618      	mov	r0, r3
90003288:	f000 fc82 	bl	90003b90 <RCCEx_PLL2_Config>
9000328c:	4603      	mov	r3, r0
9000328e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90003290:	e012      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90003292:	687b      	ldr	r3, [r7, #4]
90003294:	3324      	adds	r3, #36	; 0x24
90003296:	2102      	movs	r1, #2
90003298:	4618      	mov	r0, r3
9000329a:	f000 fd2b 	bl	90003cf4 <RCCEx_PLL3_Config>
9000329e:	4603      	mov	r3, r0
900032a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
900032a2:	e009      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900032a4:	2301      	movs	r3, #1
900032a6:	75fb      	strb	r3, [r7, #23]
      break;
900032a8:	e006      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
900032aa:	bf00      	nop
900032ac:	e004      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
900032ae:	bf00      	nop
900032b0:	e002      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
900032b2:	bf00      	nop
900032b4:	e000      	b.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
900032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
900032b8:	7dfb      	ldrb	r3, [r7, #23]
900032ba:	2b00      	cmp	r3, #0
900032bc:	d10a      	bne.n	900032d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
900032be:	4b9d      	ldr	r3, [pc, #628]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900032c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
900032c6:	687b      	ldr	r3, [r7, #4]
900032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900032cc:	4999      	ldr	r1, [pc, #612]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032ce:	4313      	orrs	r3, r2
900032d0:	658b      	str	r3, [r1, #88]	; 0x58
900032d2:	e001      	b.n	900032d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
900032d4:	7dfb      	ldrb	r3, [r7, #23]
900032d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
900032d8:	687b      	ldr	r3, [r7, #4]
900032da:	681b      	ldr	r3, [r3, #0]
900032dc:	f003 0308 	and.w	r3, r3, #8
900032e0:	2b00      	cmp	r3, #0
900032e2:	d01a      	beq.n	9000331a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
900032e4:	687b      	ldr	r3, [r7, #4]
900032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900032ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900032ee:	d10a      	bne.n	90003306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
900032f0:	687b      	ldr	r3, [r7, #4]
900032f2:	3324      	adds	r3, #36	; 0x24
900032f4:	2102      	movs	r1, #2
900032f6:	4618      	mov	r0, r3
900032f8:	f000 fcfc 	bl	90003cf4 <RCCEx_PLL3_Config>
900032fc:	4603      	mov	r3, r0
900032fe:	2b00      	cmp	r3, #0
90003300:	d001      	beq.n	90003306 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
90003302:	2301      	movs	r3, #1
90003304:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
90003306:	4b8b      	ldr	r3, [pc, #556]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000330a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
9000330e:	687b      	ldr	r3, [r7, #4]
90003310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90003314:	4987      	ldr	r1, [pc, #540]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003316:	4313      	orrs	r3, r2
90003318:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000331a:	687b      	ldr	r3, [r7, #4]
9000331c:	681b      	ldr	r3, [r3, #0]
9000331e:	f003 0310 	and.w	r3, r3, #16
90003322:	2b00      	cmp	r3, #0
90003324:	d01a      	beq.n	9000335c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
90003326:	687b      	ldr	r3, [r7, #4]
90003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
9000332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90003330:	d10a      	bne.n	90003348 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
90003332:	687b      	ldr	r3, [r7, #4]
90003334:	3324      	adds	r3, #36	; 0x24
90003336:	2102      	movs	r1, #2
90003338:	4618      	mov	r0, r3
9000333a:	f000 fcdb 	bl	90003cf4 <RCCEx_PLL3_Config>
9000333e:	4603      	mov	r3, r0
90003340:	2b00      	cmp	r3, #0
90003342:	d001      	beq.n	90003348 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
90003344:	2301      	movs	r3, #1
90003346:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
90003348:	4b7a      	ldr	r3, [pc, #488]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90003350:	687b      	ldr	r3, [r7, #4]
90003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90003356:	4977      	ldr	r1, [pc, #476]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003358:	4313      	orrs	r3, r2
9000335a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000335c:	687b      	ldr	r3, [r7, #4]
9000335e:	681b      	ldr	r3, [r3, #0]
90003360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003364:	2b00      	cmp	r3, #0
90003366:	d034      	beq.n	900033d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
90003368:	687b      	ldr	r3, [r7, #4]
9000336a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
9000336e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003372:	d01d      	beq.n	900033b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
90003374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003378:	d817      	bhi.n	900033aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
9000337a:	2b00      	cmp	r3, #0
9000337c:	d003      	beq.n	90003386 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
9000337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003382:	d009      	beq.n	90003398 <HAL_RCCEx_PeriphCLKConfig+0xc10>
90003384:	e011      	b.n	900033aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90003386:	687b      	ldr	r3, [r7, #4]
90003388:	3304      	adds	r3, #4
9000338a:	2100      	movs	r1, #0
9000338c:	4618      	mov	r0, r3
9000338e:	f000 fbff 	bl	90003b90 <RCCEx_PLL2_Config>
90003392:	4603      	mov	r3, r0
90003394:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90003396:	e00c      	b.n	900033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90003398:	687b      	ldr	r3, [r7, #4]
9000339a:	3324      	adds	r3, #36	; 0x24
9000339c:	2102      	movs	r1, #2
9000339e:	4618      	mov	r0, r3
900033a0:	f000 fca8 	bl	90003cf4 <RCCEx_PLL3_Config>
900033a4:	4603      	mov	r3, r0
900033a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
900033a8:	e003      	b.n	900033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900033aa:	2301      	movs	r3, #1
900033ac:	75fb      	strb	r3, [r7, #23]
      break;
900033ae:	e000      	b.n	900033b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
900033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
900033b2:	7dfb      	ldrb	r3, [r7, #23]
900033b4:	2b00      	cmp	r3, #0
900033b6:	d10a      	bne.n	900033ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
900033b8:	4b5e      	ldr	r3, [pc, #376]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900033bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
900033c0:	687b      	ldr	r3, [r7, #4]
900033c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
900033c6:	495b      	ldr	r1, [pc, #364]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900033c8:	4313      	orrs	r3, r2
900033ca:	658b      	str	r3, [r1, #88]	; 0x58
900033cc:	e001      	b.n	900033d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
900033ce:	7dfb      	ldrb	r3, [r7, #23]
900033d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
900033d2:	687b      	ldr	r3, [r7, #4]
900033d4:	681b      	ldr	r3, [r3, #0]
900033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
900033da:	2b00      	cmp	r3, #0
900033dc:	d033      	beq.n	90003446 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
900033de:	687b      	ldr	r3, [r7, #4]
900033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900033e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900033e8:	d01c      	beq.n	90003424 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
900033ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
900033ee:	d816      	bhi.n	9000341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
900033f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900033f4:	d003      	beq.n	900033fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
900033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900033fa:	d007      	beq.n	9000340c <HAL_RCCEx_PeriphCLKConfig+0xc84>
900033fc:	e00f      	b.n	9000341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900033fe:	4b4d      	ldr	r3, [pc, #308]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003402:	4a4c      	ldr	r2, [pc, #304]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90003408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
9000340a:	e00c      	b.n	90003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
9000340c:	687b      	ldr	r3, [r7, #4]
9000340e:	3324      	adds	r3, #36	; 0x24
90003410:	2101      	movs	r1, #1
90003412:	4618      	mov	r0, r3
90003414:	f000 fc6e 	bl	90003cf4 <RCCEx_PLL3_Config>
90003418:	4603      	mov	r3, r0
9000341a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
9000341c:	e003      	b.n	90003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000341e:	2301      	movs	r3, #1
90003420:	75fb      	strb	r3, [r7, #23]
      break;
90003422:	e000      	b.n	90003426 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
90003424:	bf00      	nop
    }

    if(ret == HAL_OK)
90003426:	7dfb      	ldrb	r3, [r7, #23]
90003428:	2b00      	cmp	r3, #0
9000342a:	d10a      	bne.n	90003442 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000342c:	4b41      	ldr	r3, [pc, #260]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
90003434:	687b      	ldr	r3, [r7, #4]
90003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000343a:	493e      	ldr	r1, [pc, #248]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000343c:	4313      	orrs	r3, r2
9000343e:	654b      	str	r3, [r1, #84]	; 0x54
90003440:	e001      	b.n	90003446 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
90003442:	7dfb      	ldrb	r3, [r7, #23]
90003444:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
90003446:	687b      	ldr	r3, [r7, #4]
90003448:	681b      	ldr	r3, [r3, #0]
9000344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000344e:	2b00      	cmp	r3, #0
90003450:	d029      	beq.n	900034a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
90003452:	687b      	ldr	r3, [r7, #4]
90003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003456:	2b00      	cmp	r3, #0
90003458:	d003      	beq.n	90003462 <HAL_RCCEx_PeriphCLKConfig+0xcda>
9000345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000345e:	d007      	beq.n	90003470 <HAL_RCCEx_PeriphCLKConfig+0xce8>
90003460:	e00f      	b.n	90003482 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90003462:	4b34      	ldr	r3, [pc, #208]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003466:	4a33      	ldr	r2, [pc, #204]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000346c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
9000346e:	e00b      	b.n	90003488 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90003470:	687b      	ldr	r3, [r7, #4]
90003472:	3304      	adds	r3, #4
90003474:	2102      	movs	r1, #2
90003476:	4618      	mov	r0, r3
90003478:	f000 fb8a 	bl	90003b90 <RCCEx_PLL2_Config>
9000347c:	4603      	mov	r3, r0
9000347e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90003480:	e002      	b.n	90003488 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
90003482:	2301      	movs	r3, #1
90003484:	75fb      	strb	r3, [r7, #23]
      break;
90003486:	bf00      	nop
    }

    if(ret == HAL_OK)
90003488:	7dfb      	ldrb	r3, [r7, #23]
9000348a:	2b00      	cmp	r3, #0
9000348c:	d109      	bne.n	900034a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000348e:	4b29      	ldr	r3, [pc, #164]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
90003496:	687b      	ldr	r3, [r7, #4]
90003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000349a:	4926      	ldr	r1, [pc, #152]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000349c:	4313      	orrs	r3, r2
9000349e:	64cb      	str	r3, [r1, #76]	; 0x4c
900034a0:	e001      	b.n	900034a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
900034a2:	7dfb      	ldrb	r3, [r7, #23]
900034a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
900034a6:	687b      	ldr	r3, [r7, #4]
900034a8:	681b      	ldr	r3, [r3, #0]
900034aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
900034ae:	2b00      	cmp	r3, #0
900034b0:	d00a      	beq.n	900034c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
900034b2:	687b      	ldr	r3, [r7, #4]
900034b4:	3324      	adds	r3, #36	; 0x24
900034b6:	2102      	movs	r1, #2
900034b8:	4618      	mov	r0, r3
900034ba:	f000 fc1b 	bl	90003cf4 <RCCEx_PLL3_Config>
900034be:	4603      	mov	r3, r0
900034c0:	2b00      	cmp	r3, #0
900034c2:	d001      	beq.n	900034c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
900034c4:	2301      	movs	r3, #1
900034c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	681b      	ldr	r3, [r3, #0]
900034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900034d0:	2b00      	cmp	r3, #0
900034d2:	d033      	beq.n	9000353c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
900034d4:	687b      	ldr	r3, [r7, #4]
900034d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900034d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900034dc:	d017      	beq.n	9000350e <HAL_RCCEx_PeriphCLKConfig+0xd86>
900034de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900034e2:	d811      	bhi.n	90003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
900034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900034e8:	d013      	beq.n	90003512 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
900034ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900034ee:	d80b      	bhi.n	90003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
900034f0:	2b00      	cmp	r3, #0
900034f2:	d010      	beq.n	90003516 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
900034f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900034f8:	d106      	bne.n	90003508 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900034fa:	4b0e      	ldr	r3, [pc, #56]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900034fe:	4a0d      	ldr	r2, [pc, #52]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90003504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
90003506:	e007      	b.n	90003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90003508:	2301      	movs	r3, #1
9000350a:	75fb      	strb	r3, [r7, #23]
      break;
9000350c:	e004      	b.n	90003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
9000350e:	bf00      	nop
90003510:	e002      	b.n	90003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90003512:	bf00      	nop
90003514:	e000      	b.n	90003518 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
90003516:	bf00      	nop
    }

    if(ret == HAL_OK)
90003518:	7dfb      	ldrb	r3, [r7, #23]
9000351a:	2b00      	cmp	r3, #0
9000351c:	d10c      	bne.n	90003538 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000351e:	4b05      	ldr	r3, [pc, #20]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90003526:	687b      	ldr	r3, [r7, #4]
90003528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000352a:	4902      	ldr	r1, [pc, #8]	; (90003534 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000352c:	4313      	orrs	r3, r2
9000352e:	654b      	str	r3, [r1, #84]	; 0x54
90003530:	e004      	b.n	9000353c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
90003532:	bf00      	nop
90003534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90003538:	7dfb      	ldrb	r3, [r7, #23]
9000353a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000353c:	687b      	ldr	r3, [r7, #4]
9000353e:	681b      	ldr	r3, [r3, #0]
90003540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
90003544:	2b00      	cmp	r3, #0
90003546:	d008      	beq.n	9000355a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
90003548:	4b31      	ldr	r3, [pc, #196]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000354c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90003550:	687b      	ldr	r3, [r7, #4]
90003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003554:	492e      	ldr	r1, [pc, #184]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003556:	4313      	orrs	r3, r2
90003558:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000355a:	687b      	ldr	r3, [r7, #4]
9000355c:	681b      	ldr	r3, [r3, #0]
9000355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003562:	2b00      	cmp	r3, #0
90003564:	d009      	beq.n	9000357a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90003566:	4b2a      	ldr	r3, [pc, #168]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003568:	691b      	ldr	r3, [r3, #16]
9000356a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
9000356e:	687b      	ldr	r3, [r7, #4]
90003570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90003574:	4926      	ldr	r1, [pc, #152]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003576:	4313      	orrs	r3, r2
90003578:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000357a:	687b      	ldr	r3, [r7, #4]
9000357c:	681b      	ldr	r3, [r3, #0]
9000357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003582:	2b00      	cmp	r3, #0
90003584:	d008      	beq.n	90003598 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90003586:	4b22      	ldr	r3, [pc, #136]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000358a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
9000358e:	687b      	ldr	r3, [r7, #4]
90003590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90003592:	491f      	ldr	r1, [pc, #124]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003594:	4313      	orrs	r3, r2
90003596:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90003598:	687b      	ldr	r3, [r7, #4]
9000359a:	681b      	ldr	r3, [r3, #0]
9000359c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
900035a0:	2b00      	cmp	r3, #0
900035a2:	d00d      	beq.n	900035c0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
900035a4:	4b1a      	ldr	r3, [pc, #104]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035a6:	691b      	ldr	r3, [r3, #16]
900035a8:	4a19      	ldr	r2, [pc, #100]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
900035ae:	6113      	str	r3, [r2, #16]
900035b0:	4b17      	ldr	r3, [pc, #92]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035b2:	691a      	ldr	r2, [r3, #16]
900035b4:	687b      	ldr	r3, [r7, #4]
900035b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
900035ba:	4915      	ldr	r1, [pc, #84]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035bc:	4313      	orrs	r3, r2
900035be:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
900035c0:	687b      	ldr	r3, [r7, #4]
900035c2:	681b      	ldr	r3, [r3, #0]
900035c4:	2b00      	cmp	r3, #0
900035c6:	da08      	bge.n	900035da <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
900035c8:	4b11      	ldr	r3, [pc, #68]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900035cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
900035d0:	687b      	ldr	r3, [r7, #4]
900035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900035d4:	490e      	ldr	r1, [pc, #56]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035d6:	4313      	orrs	r3, r2
900035d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
900035da:	687b      	ldr	r3, [r7, #4]
900035dc:	681b      	ldr	r3, [r3, #0]
900035de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900035e2:	2b00      	cmp	r3, #0
900035e4:	d009      	beq.n	900035fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
900035e6:	4b0a      	ldr	r3, [pc, #40]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900035ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
900035ee:	687b      	ldr	r3, [r7, #4]
900035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900035f4:	4906      	ldr	r1, [pc, #24]	; (90003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900035f6:	4313      	orrs	r3, r2
900035f8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
900035fa:	7dbb      	ldrb	r3, [r7, #22]
900035fc:	2b00      	cmp	r3, #0
900035fe:	d101      	bne.n	90003604 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
90003600:	2300      	movs	r3, #0
90003602:	e000      	b.n	90003606 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
90003604:	2301      	movs	r3, #1
}
90003606:	4618      	mov	r0, r3
90003608:	3718      	adds	r7, #24
9000360a:	46bd      	mov	sp, r7
9000360c:	bd80      	pop	{r7, pc}
9000360e:	bf00      	nop
90003610:	58024400 	.word	0x58024400

90003614 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
90003614:	b580      	push	{r7, lr}
90003616:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
90003618:	f7ff f818 	bl	9000264c <HAL_RCC_GetHCLKFreq>
9000361c:	4602      	mov	r2, r0
9000361e:	4b06      	ldr	r3, [pc, #24]	; (90003638 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
90003620:	6a1b      	ldr	r3, [r3, #32]
90003622:	091b      	lsrs	r3, r3, #4
90003624:	f003 0307 	and.w	r3, r3, #7
90003628:	4904      	ldr	r1, [pc, #16]	; (9000363c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
9000362a:	5ccb      	ldrb	r3, [r1, r3]
9000362c:	f003 031f 	and.w	r3, r3, #31
90003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
90003634:	4618      	mov	r0, r3
90003636:	bd80      	pop	{r7, pc}
90003638:	58024400 	.word	0x58024400
9000363c:	90008df8 	.word	0x90008df8

90003640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
90003640:	b480      	push	{r7}
90003642:	b089      	sub	sp, #36	; 0x24
90003644:	af00      	add	r7, sp, #0
90003646:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
90003648:	4ba1      	ldr	r3, [pc, #644]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000364c:	f003 0303 	and.w	r3, r3, #3
90003650:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
90003652:	4b9f      	ldr	r3, [pc, #636]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003656:	0b1b      	lsrs	r3, r3, #12
90003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000365c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000365e:	4b9c      	ldr	r3, [pc, #624]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003662:	091b      	lsrs	r3, r3, #4
90003664:	f003 0301 	and.w	r3, r3, #1
90003668:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
9000366a:	4b99      	ldr	r3, [pc, #612]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000366e:	08db      	lsrs	r3, r3, #3
90003670:	f3c3 030c 	ubfx	r3, r3, #0, #13
90003674:	693a      	ldr	r2, [r7, #16]
90003676:	fb02 f303 	mul.w	r3, r2, r3
9000367a:	ee07 3a90 	vmov	s15, r3
9000367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90003686:	697b      	ldr	r3, [r7, #20]
90003688:	2b00      	cmp	r3, #0
9000368a:	f000 8111 	beq.w	900038b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
9000368e:	69bb      	ldr	r3, [r7, #24]
90003690:	2b02      	cmp	r3, #2
90003692:	f000 8083 	beq.w	9000379c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90003696:	69bb      	ldr	r3, [r7, #24]
90003698:	2b02      	cmp	r3, #2
9000369a:	f200 80a1 	bhi.w	900037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000369e:	69bb      	ldr	r3, [r7, #24]
900036a0:	2b00      	cmp	r3, #0
900036a2:	d003      	beq.n	900036ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
900036a4:	69bb      	ldr	r3, [r7, #24]
900036a6:	2b01      	cmp	r3, #1
900036a8:	d056      	beq.n	90003758 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
900036aa:	e099      	b.n	900037e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900036ac:	4b88      	ldr	r3, [pc, #544]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900036ae:	681b      	ldr	r3, [r3, #0]
900036b0:	f003 0320 	and.w	r3, r3, #32
900036b4:	2b00      	cmp	r3, #0
900036b6:	d02d      	beq.n	90003714 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900036b8:	4b85      	ldr	r3, [pc, #532]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900036ba:	681b      	ldr	r3, [r3, #0]
900036bc:	08db      	lsrs	r3, r3, #3
900036be:	f003 0303 	and.w	r3, r3, #3
900036c2:	4a84      	ldr	r2, [pc, #528]	; (900038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
900036c4:	fa22 f303 	lsr.w	r3, r2, r3
900036c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
900036ca:	68bb      	ldr	r3, [r7, #8]
900036cc:	ee07 3a90 	vmov	s15, r3
900036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
900036d4:	697b      	ldr	r3, [r7, #20]
900036d6:	ee07 3a90 	vmov	s15, r3
900036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900036e2:	4b7b      	ldr	r3, [pc, #492]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900036ea:	ee07 3a90 	vmov	s15, r3
900036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
900036f2:	ed97 6a03 	vldr	s12, [r7, #12]
900036f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 900038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000370a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000370e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
90003712:	e087      	b.n	90003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90003714:	697b      	ldr	r3, [r7, #20]
90003716:	ee07 3a90 	vmov	s15, r3
9000371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000371e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 900038dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
90003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003726:	4b6a      	ldr	r3, [pc, #424]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000372e:	ee07 3a90 	vmov	s15, r3
90003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003736:	ed97 6a03 	vldr	s12, [r7, #12]
9000373a:	eddf 5a67 	vldr	s11, [pc, #412]	; 900038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000374e:	ee67 7a27 	vmul.f32	s15, s14, s15
90003752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003756:	e065      	b.n	90003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90003758:	697b      	ldr	r3, [r7, #20]
9000375a:	ee07 3a90 	vmov	s15, r3
9000375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 900038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000376a:	4b59      	ldr	r3, [pc, #356]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003772:	ee07 3a90 	vmov	s15, r3
90003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000377a:	ed97 6a03 	vldr	s12, [r7, #12]
9000377e:	eddf 5a56 	vldr	s11, [pc, #344]	; 900038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000378a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003792:	ee67 7a27 	vmul.f32	s15, s14, s15
90003796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000379a:	e043      	b.n	90003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000379c:	697b      	ldr	r3, [r7, #20]
9000379e:	ee07 3a90 	vmov	s15, r3
900037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900037a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 900038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
900037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900037ae:	4b48      	ldr	r3, [pc, #288]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900037b6:	ee07 3a90 	vmov	s15, r3
900037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
900037be:	ed97 6a03 	vldr	s12, [r7, #12]
900037c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 900038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
900037ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
900037da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900037de:	e021      	b.n	90003824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
900037e0:	697b      	ldr	r3, [r7, #20]
900037e2:	ee07 3a90 	vmov	s15, r3
900037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900037ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 900038e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
900037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900037f2:	4b37      	ldr	r3, [pc, #220]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900037fa:	ee07 3a90 	vmov	s15, r3
900037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003802:	ed97 6a03 	vldr	s12, [r7, #12]
90003806:	eddf 5a34 	vldr	s11, [pc, #208]	; 900038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
9000380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000381a:	ee67 7a27 	vmul.f32	s15, s14, s15
9000381e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003822:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
90003824:	4b2a      	ldr	r3, [pc, #168]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003828:	0a5b      	lsrs	r3, r3, #9
9000382a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000382e:	ee07 3a90 	vmov	s15, r3
90003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9000383a:	ee37 7a87 	vadd.f32	s14, s15, s14
9000383e:	edd7 6a07 	vldr	s13, [r7, #28]
90003842:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000384a:	ee17 2a90 	vmov	r2, s15
9000384e:	687b      	ldr	r3, [r7, #4]
90003850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
90003852:	4b1f      	ldr	r3, [pc, #124]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003856:	0c1b      	lsrs	r3, r3, #16
90003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000385c:	ee07 3a90 	vmov	s15, r3
90003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003868:	ee37 7a87 	vadd.f32	s14, s15, s14
9000386c:	edd7 6a07 	vldr	s13, [r7, #28]
90003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003878:	ee17 2a90 	vmov	r2, s15
9000387c:	687b      	ldr	r3, [r7, #4]
9000387e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
90003880:	4b13      	ldr	r3, [pc, #76]	; (900038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003884:	0e1b      	lsrs	r3, r3, #24
90003886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000388a:	ee07 3a90 	vmov	s15, r3
9000388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003896:	ee37 7a87 	vadd.f32	s14, s15, s14
9000389a:	edd7 6a07 	vldr	s13, [r7, #28]
9000389e:	eec6 7a87 	vdiv.f32	s15, s13, s14
900038a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900038a6:	ee17 2a90 	vmov	r2, s15
900038aa:	687b      	ldr	r3, [r7, #4]
900038ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
900038ae:	e008      	b.n	900038c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
900038b0:	687b      	ldr	r3, [r7, #4]
900038b2:	2200      	movs	r2, #0
900038b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
900038b6:	687b      	ldr	r3, [r7, #4]
900038b8:	2200      	movs	r2, #0
900038ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
900038bc:	687b      	ldr	r3, [r7, #4]
900038be:	2200      	movs	r2, #0
900038c0:	609a      	str	r2, [r3, #8]
}
900038c2:	bf00      	nop
900038c4:	3724      	adds	r7, #36	; 0x24
900038c6:	46bd      	mov	sp, r7
900038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900038cc:	4770      	bx	lr
900038ce:	bf00      	nop
900038d0:	58024400 	.word	0x58024400
900038d4:	03d09000 	.word	0x03d09000
900038d8:	46000000 	.word	0x46000000
900038dc:	4c742400 	.word	0x4c742400
900038e0:	4a742400 	.word	0x4a742400
900038e4:	4bbebc20 	.word	0x4bbebc20

900038e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
900038e8:	b480      	push	{r7}
900038ea:	b089      	sub	sp, #36	; 0x24
900038ec:	af00      	add	r7, sp, #0
900038ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900038f0:	4ba1      	ldr	r3, [pc, #644]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900038f4:	f003 0303 	and.w	r3, r3, #3
900038f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
900038fa:	4b9f      	ldr	r3, [pc, #636]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900038fe:	0d1b      	lsrs	r3, r3, #20
90003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90003904:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
90003906:	4b9c      	ldr	r3, [pc, #624]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000390a:	0a1b      	lsrs	r3, r3, #8
9000390c:	f003 0301 	and.w	r3, r3, #1
90003910:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
90003912:	4b99      	ldr	r3, [pc, #612]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90003916:	08db      	lsrs	r3, r3, #3
90003918:	f3c3 030c 	ubfx	r3, r3, #0, #13
9000391c:	693a      	ldr	r2, [r7, #16]
9000391e:	fb02 f303 	mul.w	r3, r2, r3
90003922:	ee07 3a90 	vmov	s15, r3
90003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000392a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
9000392e:	697b      	ldr	r3, [r7, #20]
90003930:	2b00      	cmp	r3, #0
90003932:	f000 8111 	beq.w	90003b58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
90003936:	69bb      	ldr	r3, [r7, #24]
90003938:	2b02      	cmp	r3, #2
9000393a:	f000 8083 	beq.w	90003a44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
9000393e:	69bb      	ldr	r3, [r7, #24]
90003940:	2b02      	cmp	r3, #2
90003942:	f200 80a1 	bhi.w	90003a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
90003946:	69bb      	ldr	r3, [r7, #24]
90003948:	2b00      	cmp	r3, #0
9000394a:	d003      	beq.n	90003954 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
9000394c:	69bb      	ldr	r3, [r7, #24]
9000394e:	2b01      	cmp	r3, #1
90003950:	d056      	beq.n	90003a00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90003952:	e099      	b.n	90003a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90003954:	4b88      	ldr	r3, [pc, #544]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003956:	681b      	ldr	r3, [r3, #0]
90003958:	f003 0320 	and.w	r3, r3, #32
9000395c:	2b00      	cmp	r3, #0
9000395e:	d02d      	beq.n	900039bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90003960:	4b85      	ldr	r3, [pc, #532]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003962:	681b      	ldr	r3, [r3, #0]
90003964:	08db      	lsrs	r3, r3, #3
90003966:	f003 0303 	and.w	r3, r3, #3
9000396a:	4a84      	ldr	r2, [pc, #528]	; (90003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
9000396c:	fa22 f303 	lsr.w	r3, r2, r3
90003970:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003972:	68bb      	ldr	r3, [r7, #8]
90003974:	ee07 3a90 	vmov	s15, r3
90003978:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000397c:	697b      	ldr	r3, [r7, #20]
9000397e:	ee07 3a90 	vmov	s15, r3
90003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000398a:	4b7b      	ldr	r3, [pc, #492]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003992:	ee07 3a90 	vmov	s15, r3
90003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000399a:	ed97 6a03 	vldr	s12, [r7, #12]
9000399e:	eddf 5a78 	vldr	s11, [pc, #480]	; 90003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
900039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
900039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
900039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
900039b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
900039ba:	e087      	b.n	90003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900039bc:	697b      	ldr	r3, [r7, #20]
900039be:	ee07 3a90 	vmov	s15, r3
900039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900039c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
900039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900039ce:	4b6a      	ldr	r3, [pc, #424]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
900039d6:	ee07 3a90 	vmov	s15, r3
900039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
900039de:	ed97 6a03 	vldr	s12, [r7, #12]
900039e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 90003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
900039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
900039fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900039fe:	e065      	b.n	90003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003a00:	697b      	ldr	r3, [r7, #20]
90003a02:	ee07 3a90 	vmov	s15, r3
90003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90003b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003a12:	4b59      	ldr	r3, [pc, #356]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003a1a:	ee07 3a90 	vmov	s15, r3
90003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003a22:	ed97 6a03 	vldr	s12, [r7, #12]
90003a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 90003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
90003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003a42:	e043      	b.n	90003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003a44:	697b      	ldr	r3, [r7, #20]
90003a46:	ee07 3a90 	vmov	s15, r3
90003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003a56:	4b48      	ldr	r3, [pc, #288]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003a5e:	ee07 3a90 	vmov	s15, r3
90003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003a66:	ed97 6a03 	vldr	s12, [r7, #12]
90003a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 90003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
90003a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003a86:	e021      	b.n	90003acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003a88:	697b      	ldr	r3, [r7, #20]
90003a8a:	ee07 3a90 	vmov	s15, r3
90003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90003b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90003a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003a9a:	4b37      	ldr	r3, [pc, #220]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003aa2:	ee07 3a90 	vmov	s15, r3
90003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003aaa:	ed97 6a03 	vldr	s12, [r7, #12]
90003aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 90003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
90003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003aca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
90003acc:	4b2a      	ldr	r3, [pc, #168]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003ad0:	0a5b      	lsrs	r3, r3, #9
90003ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90003ad6:	ee07 3a90 	vmov	s15, r3
90003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
90003ae6:	edd7 6a07 	vldr	s13, [r7, #28]
90003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003af2:	ee17 2a90 	vmov	r2, s15
90003af6:	687b      	ldr	r3, [r7, #4]
90003af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
90003afa:	4b1f      	ldr	r3, [pc, #124]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003afe:	0c1b      	lsrs	r3, r3, #16
90003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90003b04:	ee07 3a90 	vmov	s15, r3
90003b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003b10:	ee37 7a87 	vadd.f32	s14, s15, s14
90003b14:	edd7 6a07 	vldr	s13, [r7, #28]
90003b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003b20:	ee17 2a90 	vmov	r2, s15
90003b24:	687b      	ldr	r3, [r7, #4]
90003b26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
90003b28:	4b13      	ldr	r3, [pc, #76]	; (90003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003b2c:	0e1b      	lsrs	r3, r3, #24
90003b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90003b32:	ee07 3a90 	vmov	s15, r3
90003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
90003b42:	edd7 6a07 	vldr	s13, [r7, #28]
90003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003b4e:	ee17 2a90 	vmov	r2, s15
90003b52:	687b      	ldr	r3, [r7, #4]
90003b54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90003b56:	e008      	b.n	90003b6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90003b58:	687b      	ldr	r3, [r7, #4]
90003b5a:	2200      	movs	r2, #0
90003b5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
90003b5e:	687b      	ldr	r3, [r7, #4]
90003b60:	2200      	movs	r2, #0
90003b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90003b64:	687b      	ldr	r3, [r7, #4]
90003b66:	2200      	movs	r2, #0
90003b68:	609a      	str	r2, [r3, #8]
}
90003b6a:	bf00      	nop
90003b6c:	3724      	adds	r7, #36	; 0x24
90003b6e:	46bd      	mov	sp, r7
90003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b74:	4770      	bx	lr
90003b76:	bf00      	nop
90003b78:	58024400 	.word	0x58024400
90003b7c:	03d09000 	.word	0x03d09000
90003b80:	46000000 	.word	0x46000000
90003b84:	4c742400 	.word	0x4c742400
90003b88:	4a742400 	.word	0x4a742400
90003b8c:	4bbebc20 	.word	0x4bbebc20

90003b90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90003b90:	b580      	push	{r7, lr}
90003b92:	b084      	sub	sp, #16
90003b94:	af00      	add	r7, sp, #0
90003b96:	6078      	str	r0, [r7, #4]
90003b98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90003b9a:	2300      	movs	r3, #0
90003b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90003b9e:	4b53      	ldr	r3, [pc, #332]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003ba2:	f003 0303 	and.w	r3, r3, #3
90003ba6:	2b03      	cmp	r3, #3
90003ba8:	d101      	bne.n	90003bae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
90003baa:	2301      	movs	r3, #1
90003bac:	e099      	b.n	90003ce2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
90003bae:	4b4f      	ldr	r3, [pc, #316]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003bb0:	681b      	ldr	r3, [r3, #0]
90003bb2:	4a4e      	ldr	r2, [pc, #312]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003bb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90003bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003bba:	f7fd fa71 	bl	900010a0 <HAL_GetTick>
90003bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90003bc0:	e008      	b.n	90003bd4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90003bc2:	f7fd fa6d 	bl	900010a0 <HAL_GetTick>
90003bc6:	4602      	mov	r2, r0
90003bc8:	68bb      	ldr	r3, [r7, #8]
90003bca:	1ad3      	subs	r3, r2, r3
90003bcc:	2b02      	cmp	r3, #2
90003bce:	d901      	bls.n	90003bd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90003bd0:	2303      	movs	r3, #3
90003bd2:	e086      	b.n	90003ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90003bd4:	4b45      	ldr	r3, [pc, #276]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003bd6:	681b      	ldr	r3, [r3, #0]
90003bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003bdc:	2b00      	cmp	r3, #0
90003bde:	d1f0      	bne.n	90003bc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90003be0:	4b42      	ldr	r3, [pc, #264]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90003be8:	687b      	ldr	r3, [r7, #4]
90003bea:	681b      	ldr	r3, [r3, #0]
90003bec:	031b      	lsls	r3, r3, #12
90003bee:	493f      	ldr	r1, [pc, #252]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003bf0:	4313      	orrs	r3, r2
90003bf2:	628b      	str	r3, [r1, #40]	; 0x28
90003bf4:	687b      	ldr	r3, [r7, #4]
90003bf6:	685b      	ldr	r3, [r3, #4]
90003bf8:	3b01      	subs	r3, #1
90003bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
90003bfe:	687b      	ldr	r3, [r7, #4]
90003c00:	689b      	ldr	r3, [r3, #8]
90003c02:	3b01      	subs	r3, #1
90003c04:	025b      	lsls	r3, r3, #9
90003c06:	b29b      	uxth	r3, r3
90003c08:	431a      	orrs	r2, r3
90003c0a:	687b      	ldr	r3, [r7, #4]
90003c0c:	68db      	ldr	r3, [r3, #12]
90003c0e:	3b01      	subs	r3, #1
90003c10:	041b      	lsls	r3, r3, #16
90003c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90003c16:	431a      	orrs	r2, r3
90003c18:	687b      	ldr	r3, [r7, #4]
90003c1a:	691b      	ldr	r3, [r3, #16]
90003c1c:	3b01      	subs	r3, #1
90003c1e:	061b      	lsls	r3, r3, #24
90003c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90003c24:	4931      	ldr	r1, [pc, #196]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c26:	4313      	orrs	r3, r2
90003c28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
90003c2a:	4b30      	ldr	r3, [pc, #192]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
90003c32:	687b      	ldr	r3, [r7, #4]
90003c34:	695b      	ldr	r3, [r3, #20]
90003c36:	492d      	ldr	r1, [pc, #180]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c38:	4313      	orrs	r3, r2
90003c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
90003c3c:	4b2b      	ldr	r3, [pc, #172]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c40:	f023 0220 	bic.w	r2, r3, #32
90003c44:	687b      	ldr	r3, [r7, #4]
90003c46:	699b      	ldr	r3, [r3, #24]
90003c48:	4928      	ldr	r1, [pc, #160]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c4a:	4313      	orrs	r3, r2
90003c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
90003c4e:	4b27      	ldr	r3, [pc, #156]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c52:	4a26      	ldr	r2, [pc, #152]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c54:	f023 0310 	bic.w	r3, r3, #16
90003c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90003c5a:	4b24      	ldr	r3, [pc, #144]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90003c5e:	4b24      	ldr	r3, [pc, #144]	; (90003cf0 <RCCEx_PLL2_Config+0x160>)
90003c60:	4013      	ands	r3, r2
90003c62:	687a      	ldr	r2, [r7, #4]
90003c64:	69d2      	ldr	r2, [r2, #28]
90003c66:	00d2      	lsls	r2, r2, #3
90003c68:	4920      	ldr	r1, [pc, #128]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c6a:	4313      	orrs	r3, r2
90003c6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90003c6e:	4b1f      	ldr	r3, [pc, #124]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c72:	4a1e      	ldr	r2, [pc, #120]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c74:	f043 0310 	orr.w	r3, r3, #16
90003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90003c7a:	683b      	ldr	r3, [r7, #0]
90003c7c:	2b00      	cmp	r3, #0
90003c7e:	d106      	bne.n	90003c8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90003c80:	4b1a      	ldr	r3, [pc, #104]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c84:	4a19      	ldr	r2, [pc, #100]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
90003c8c:	e00f      	b.n	90003cae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90003c8e:	683b      	ldr	r3, [r7, #0]
90003c90:	2b01      	cmp	r3, #1
90003c92:	d106      	bne.n	90003ca2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90003c94:	4b15      	ldr	r3, [pc, #84]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003c98:	4a14      	ldr	r2, [pc, #80]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
90003ca0:	e005      	b.n	90003cae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90003ca2:	4b12      	ldr	r3, [pc, #72]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003ca6:	4a11      	ldr	r2, [pc, #68]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90003cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90003cae:	4b0f      	ldr	r3, [pc, #60]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003cb0:	681b      	ldr	r3, [r3, #0]
90003cb2:	4a0e      	ldr	r2, [pc, #56]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90003cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003cba:	f7fd f9f1 	bl	900010a0 <HAL_GetTick>
90003cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90003cc0:	e008      	b.n	90003cd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90003cc2:	f7fd f9ed 	bl	900010a0 <HAL_GetTick>
90003cc6:	4602      	mov	r2, r0
90003cc8:	68bb      	ldr	r3, [r7, #8]
90003cca:	1ad3      	subs	r3, r2, r3
90003ccc:	2b02      	cmp	r3, #2
90003cce:	d901      	bls.n	90003cd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90003cd0:	2303      	movs	r3, #3
90003cd2:	e006      	b.n	90003ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90003cd4:	4b05      	ldr	r3, [pc, #20]	; (90003cec <RCCEx_PLL2_Config+0x15c>)
90003cd6:	681b      	ldr	r3, [r3, #0]
90003cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003cdc:	2b00      	cmp	r3, #0
90003cde:	d0f0      	beq.n	90003cc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
90003ce2:	4618      	mov	r0, r3
90003ce4:	3710      	adds	r7, #16
90003ce6:	46bd      	mov	sp, r7
90003ce8:	bd80      	pop	{r7, pc}
90003cea:	bf00      	nop
90003cec:	58024400 	.word	0x58024400
90003cf0:	ffff0007 	.word	0xffff0007

90003cf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90003cf4:	b580      	push	{r7, lr}
90003cf6:	b084      	sub	sp, #16
90003cf8:	af00      	add	r7, sp, #0
90003cfa:	6078      	str	r0, [r7, #4]
90003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90003cfe:	2300      	movs	r3, #0
90003d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90003d02:	4b53      	ldr	r3, [pc, #332]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003d06:	f003 0303 	and.w	r3, r3, #3
90003d0a:	2b03      	cmp	r3, #3
90003d0c:	d101      	bne.n	90003d12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90003d0e:	2301      	movs	r3, #1
90003d10:	e099      	b.n	90003e46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90003d12:	4b4f      	ldr	r3, [pc, #316]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d14:	681b      	ldr	r3, [r3, #0]
90003d16:	4a4e      	ldr	r2, [pc, #312]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003d1e:	f7fd f9bf 	bl	900010a0 <HAL_GetTick>
90003d22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90003d24:	e008      	b.n	90003d38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90003d26:	f7fd f9bb 	bl	900010a0 <HAL_GetTick>
90003d2a:	4602      	mov	r2, r0
90003d2c:	68bb      	ldr	r3, [r7, #8]
90003d2e:	1ad3      	subs	r3, r2, r3
90003d30:	2b02      	cmp	r3, #2
90003d32:	d901      	bls.n	90003d38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90003d34:	2303      	movs	r3, #3
90003d36:	e086      	b.n	90003e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90003d38:	4b45      	ldr	r3, [pc, #276]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d3a:	681b      	ldr	r3, [r3, #0]
90003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003d40:	2b00      	cmp	r3, #0
90003d42:	d1f0      	bne.n	90003d26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90003d44:	4b42      	ldr	r3, [pc, #264]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003d48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90003d4c:	687b      	ldr	r3, [r7, #4]
90003d4e:	681b      	ldr	r3, [r3, #0]
90003d50:	051b      	lsls	r3, r3, #20
90003d52:	493f      	ldr	r1, [pc, #252]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d54:	4313      	orrs	r3, r2
90003d56:	628b      	str	r3, [r1, #40]	; 0x28
90003d58:	687b      	ldr	r3, [r7, #4]
90003d5a:	685b      	ldr	r3, [r3, #4]
90003d5c:	3b01      	subs	r3, #1
90003d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90003d62:	687b      	ldr	r3, [r7, #4]
90003d64:	689b      	ldr	r3, [r3, #8]
90003d66:	3b01      	subs	r3, #1
90003d68:	025b      	lsls	r3, r3, #9
90003d6a:	b29b      	uxth	r3, r3
90003d6c:	431a      	orrs	r2, r3
90003d6e:	687b      	ldr	r3, [r7, #4]
90003d70:	68db      	ldr	r3, [r3, #12]
90003d72:	3b01      	subs	r3, #1
90003d74:	041b      	lsls	r3, r3, #16
90003d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90003d7a:	431a      	orrs	r2, r3
90003d7c:	687b      	ldr	r3, [r7, #4]
90003d7e:	691b      	ldr	r3, [r3, #16]
90003d80:	3b01      	subs	r3, #1
90003d82:	061b      	lsls	r3, r3, #24
90003d84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90003d88:	4931      	ldr	r1, [pc, #196]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d8a:	4313      	orrs	r3, r2
90003d8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90003d8e:	4b30      	ldr	r3, [pc, #192]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90003d96:	687b      	ldr	r3, [r7, #4]
90003d98:	695b      	ldr	r3, [r3, #20]
90003d9a:	492d      	ldr	r1, [pc, #180]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003d9c:	4313      	orrs	r3, r2
90003d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90003da0:	4b2b      	ldr	r3, [pc, #172]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003da4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
90003da8:	687b      	ldr	r3, [r7, #4]
90003daa:	699b      	ldr	r3, [r3, #24]
90003dac:	4928      	ldr	r1, [pc, #160]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dae:	4313      	orrs	r3, r2
90003db0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90003db2:	4b27      	ldr	r3, [pc, #156]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003db6:	4a26      	ldr	r2, [pc, #152]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90003dbe:	4b24      	ldr	r3, [pc, #144]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90003dc2:	4b24      	ldr	r3, [pc, #144]	; (90003e54 <RCCEx_PLL3_Config+0x160>)
90003dc4:	4013      	ands	r3, r2
90003dc6:	687a      	ldr	r2, [r7, #4]
90003dc8:	69d2      	ldr	r2, [r2, #28]
90003dca:	00d2      	lsls	r2, r2, #3
90003dcc:	4920      	ldr	r1, [pc, #128]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dce:	4313      	orrs	r3, r2
90003dd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90003dd2:	4b1f      	ldr	r3, [pc, #124]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003dd6:	4a1e      	ldr	r2, [pc, #120]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90003dde:	683b      	ldr	r3, [r7, #0]
90003de0:	2b00      	cmp	r3, #0
90003de2:	d106      	bne.n	90003df2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90003de4:	4b1a      	ldr	r3, [pc, #104]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003de8:	4a19      	ldr	r2, [pc, #100]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90003dee:	62d3      	str	r3, [r2, #44]	; 0x2c
90003df0:	e00f      	b.n	90003e12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90003df2:	683b      	ldr	r3, [r7, #0]
90003df4:	2b01      	cmp	r3, #1
90003df6:	d106      	bne.n	90003e06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90003df8:	4b15      	ldr	r3, [pc, #84]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003dfc:	4a14      	ldr	r2, [pc, #80]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90003e02:	62d3      	str	r3, [r2, #44]	; 0x2c
90003e04:	e005      	b.n	90003e12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90003e06:	4b12      	ldr	r3, [pc, #72]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003e0a:	4a11      	ldr	r2, [pc, #68]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90003e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90003e12:	4b0f      	ldr	r3, [pc, #60]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003e14:	681b      	ldr	r3, [r3, #0]
90003e16:	4a0e      	ldr	r2, [pc, #56]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003e1e:	f7fd f93f 	bl	900010a0 <HAL_GetTick>
90003e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90003e24:	e008      	b.n	90003e38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90003e26:	f7fd f93b 	bl	900010a0 <HAL_GetTick>
90003e2a:	4602      	mov	r2, r0
90003e2c:	68bb      	ldr	r3, [r7, #8]
90003e2e:	1ad3      	subs	r3, r2, r3
90003e30:	2b02      	cmp	r3, #2
90003e32:	d901      	bls.n	90003e38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90003e34:	2303      	movs	r3, #3
90003e36:	e006      	b.n	90003e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90003e38:	4b05      	ldr	r3, [pc, #20]	; (90003e50 <RCCEx_PLL3_Config+0x15c>)
90003e3a:	681b      	ldr	r3, [r3, #0]
90003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003e40:	2b00      	cmp	r3, #0
90003e42:	d0f0      	beq.n	90003e26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90003e44:	7bfb      	ldrb	r3, [r7, #15]
}
90003e46:	4618      	mov	r0, r3
90003e48:	3710      	adds	r7, #16
90003e4a:	46bd      	mov	sp, r7
90003e4c:	bd80      	pop	{r7, pc}
90003e4e:	bf00      	nop
90003e50:	58024400 	.word	0x58024400
90003e54:	ffff0007 	.word	0xffff0007

90003e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
90003e58:	b580      	push	{r7, lr}
90003e5a:	b082      	sub	sp, #8
90003e5c:	af00      	add	r7, sp, #0
90003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90003e60:	687b      	ldr	r3, [r7, #4]
90003e62:	2b00      	cmp	r3, #0
90003e64:	d101      	bne.n	90003e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
90003e66:	2301      	movs	r3, #1
90003e68:	e049      	b.n	90003efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90003e6a:	687b      	ldr	r3, [r7, #4]
90003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90003e70:	b2db      	uxtb	r3, r3
90003e72:	2b00      	cmp	r3, #0
90003e74:	d106      	bne.n	90003e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90003e76:	687b      	ldr	r3, [r7, #4]
90003e78:	2200      	movs	r2, #0
90003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
90003e7e:	6878      	ldr	r0, [r7, #4]
90003e80:	f000 f841 	bl	90003f06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90003e84:	687b      	ldr	r3, [r7, #4]
90003e86:	2202      	movs	r2, #2
90003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90003e8c:	687b      	ldr	r3, [r7, #4]
90003e8e:	681a      	ldr	r2, [r3, #0]
90003e90:	687b      	ldr	r3, [r7, #4]
90003e92:	3304      	adds	r3, #4
90003e94:	4619      	mov	r1, r3
90003e96:	4610      	mov	r0, r2
90003e98:	f000 fa00 	bl	9000429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90003e9c:	687b      	ldr	r3, [r7, #4]
90003e9e:	2201      	movs	r2, #1
90003ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90003ea4:	687b      	ldr	r3, [r7, #4]
90003ea6:	2201      	movs	r2, #1
90003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
90003eac:	687b      	ldr	r3, [r7, #4]
90003eae:	2201      	movs	r2, #1
90003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
90003eb4:	687b      	ldr	r3, [r7, #4]
90003eb6:	2201      	movs	r2, #1
90003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
90003ebc:	687b      	ldr	r3, [r7, #4]
90003ebe:	2201      	movs	r2, #1
90003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90003ec4:	687b      	ldr	r3, [r7, #4]
90003ec6:	2201      	movs	r2, #1
90003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
90003ecc:	687b      	ldr	r3, [r7, #4]
90003ece:	2201      	movs	r2, #1
90003ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90003ed4:	687b      	ldr	r3, [r7, #4]
90003ed6:	2201      	movs	r2, #1
90003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90003edc:	687b      	ldr	r3, [r7, #4]
90003ede:	2201      	movs	r2, #1
90003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90003ee4:	687b      	ldr	r3, [r7, #4]
90003ee6:	2201      	movs	r2, #1
90003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
90003eec:	687b      	ldr	r3, [r7, #4]
90003eee:	2201      	movs	r2, #1
90003ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90003ef4:	687b      	ldr	r3, [r7, #4]
90003ef6:	2201      	movs	r2, #1
90003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
90003efc:	2300      	movs	r3, #0
}
90003efe:	4618      	mov	r0, r3
90003f00:	3708      	adds	r7, #8
90003f02:	46bd      	mov	sp, r7
90003f04:	bd80      	pop	{r7, pc}

90003f06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
90003f06:	b480      	push	{r7}
90003f08:	b083      	sub	sp, #12
90003f0a:	af00      	add	r7, sp, #0
90003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
90003f0e:	bf00      	nop
90003f10:	370c      	adds	r7, #12
90003f12:	46bd      	mov	sp, r7
90003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
90003f18:	4770      	bx	lr
	...

90003f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
90003f1c:	b480      	push	{r7}
90003f1e:	b085      	sub	sp, #20
90003f20:	af00      	add	r7, sp, #0
90003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
90003f24:	687b      	ldr	r3, [r7, #4]
90003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90003f2a:	b2db      	uxtb	r3, r3
90003f2c:	2b01      	cmp	r3, #1
90003f2e:	d001      	beq.n	90003f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
90003f30:	2301      	movs	r3, #1
90003f32:	e054      	b.n	90003fde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90003f34:	687b      	ldr	r3, [r7, #4]
90003f36:	2202      	movs	r2, #2
90003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90003f3c:	687b      	ldr	r3, [r7, #4]
90003f3e:	681b      	ldr	r3, [r3, #0]
90003f40:	68da      	ldr	r2, [r3, #12]
90003f42:	687b      	ldr	r3, [r7, #4]
90003f44:	681b      	ldr	r3, [r3, #0]
90003f46:	f042 0201 	orr.w	r2, r2, #1
90003f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
90003f4c:	687b      	ldr	r3, [r7, #4]
90003f4e:	681b      	ldr	r3, [r3, #0]
90003f50:	4a26      	ldr	r2, [pc, #152]	; (90003fec <HAL_TIM_Base_Start_IT+0xd0>)
90003f52:	4293      	cmp	r3, r2
90003f54:	d022      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f56:	687b      	ldr	r3, [r7, #4]
90003f58:	681b      	ldr	r3, [r3, #0]
90003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90003f5e:	d01d      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f60:	687b      	ldr	r3, [r7, #4]
90003f62:	681b      	ldr	r3, [r3, #0]
90003f64:	4a22      	ldr	r2, [pc, #136]	; (90003ff0 <HAL_TIM_Base_Start_IT+0xd4>)
90003f66:	4293      	cmp	r3, r2
90003f68:	d018      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f6a:	687b      	ldr	r3, [r7, #4]
90003f6c:	681b      	ldr	r3, [r3, #0]
90003f6e:	4a21      	ldr	r2, [pc, #132]	; (90003ff4 <HAL_TIM_Base_Start_IT+0xd8>)
90003f70:	4293      	cmp	r3, r2
90003f72:	d013      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f74:	687b      	ldr	r3, [r7, #4]
90003f76:	681b      	ldr	r3, [r3, #0]
90003f78:	4a1f      	ldr	r2, [pc, #124]	; (90003ff8 <HAL_TIM_Base_Start_IT+0xdc>)
90003f7a:	4293      	cmp	r3, r2
90003f7c:	d00e      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f7e:	687b      	ldr	r3, [r7, #4]
90003f80:	681b      	ldr	r3, [r3, #0]
90003f82:	4a1e      	ldr	r2, [pc, #120]	; (90003ffc <HAL_TIM_Base_Start_IT+0xe0>)
90003f84:	4293      	cmp	r3, r2
90003f86:	d009      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f88:	687b      	ldr	r3, [r7, #4]
90003f8a:	681b      	ldr	r3, [r3, #0]
90003f8c:	4a1c      	ldr	r2, [pc, #112]	; (90004000 <HAL_TIM_Base_Start_IT+0xe4>)
90003f8e:	4293      	cmp	r3, r2
90003f90:	d004      	beq.n	90003f9c <HAL_TIM_Base_Start_IT+0x80>
90003f92:	687b      	ldr	r3, [r7, #4]
90003f94:	681b      	ldr	r3, [r3, #0]
90003f96:	4a1b      	ldr	r2, [pc, #108]	; (90004004 <HAL_TIM_Base_Start_IT+0xe8>)
90003f98:	4293      	cmp	r3, r2
90003f9a:	d115      	bne.n	90003fc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90003f9c:	687b      	ldr	r3, [r7, #4]
90003f9e:	681b      	ldr	r3, [r3, #0]
90003fa0:	689a      	ldr	r2, [r3, #8]
90003fa2:	4b19      	ldr	r3, [pc, #100]	; (90004008 <HAL_TIM_Base_Start_IT+0xec>)
90003fa4:	4013      	ands	r3, r2
90003fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90003fa8:	68fb      	ldr	r3, [r7, #12]
90003faa:	2b06      	cmp	r3, #6
90003fac:	d015      	beq.n	90003fda <HAL_TIM_Base_Start_IT+0xbe>
90003fae:	68fb      	ldr	r3, [r7, #12]
90003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003fb4:	d011      	beq.n	90003fda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
90003fb6:	687b      	ldr	r3, [r7, #4]
90003fb8:	681b      	ldr	r3, [r3, #0]
90003fba:	681a      	ldr	r2, [r3, #0]
90003fbc:	687b      	ldr	r3, [r7, #4]
90003fbe:	681b      	ldr	r3, [r3, #0]
90003fc0:	f042 0201 	orr.w	r2, r2, #1
90003fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90003fc6:	e008      	b.n	90003fda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90003fc8:	687b      	ldr	r3, [r7, #4]
90003fca:	681b      	ldr	r3, [r3, #0]
90003fcc:	681a      	ldr	r2, [r3, #0]
90003fce:	687b      	ldr	r3, [r7, #4]
90003fd0:	681b      	ldr	r3, [r3, #0]
90003fd2:	f042 0201 	orr.w	r2, r2, #1
90003fd6:	601a      	str	r2, [r3, #0]
90003fd8:	e000      	b.n	90003fdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90003fda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
90003fdc:	2300      	movs	r3, #0
}
90003fde:	4618      	mov	r0, r3
90003fe0:	3714      	adds	r7, #20
90003fe2:	46bd      	mov	sp, r7
90003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
90003fe8:	4770      	bx	lr
90003fea:	bf00      	nop
90003fec:	40010000 	.word	0x40010000
90003ff0:	40000400 	.word	0x40000400
90003ff4:	40000800 	.word	0x40000800
90003ff8:	40000c00 	.word	0x40000c00
90003ffc:	40010400 	.word	0x40010400
90004000:	40001800 	.word	0x40001800
90004004:	40014000 	.word	0x40014000
90004008:	00010007 	.word	0x00010007

9000400c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
9000400c:	b580      	push	{r7, lr}
9000400e:	b082      	sub	sp, #8
90004010:	af00      	add	r7, sp, #0
90004012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
90004014:	687b      	ldr	r3, [r7, #4]
90004016:	681b      	ldr	r3, [r3, #0]
90004018:	691b      	ldr	r3, [r3, #16]
9000401a:	f003 0302 	and.w	r3, r3, #2
9000401e:	2b02      	cmp	r3, #2
90004020:	d122      	bne.n	90004068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
90004022:	687b      	ldr	r3, [r7, #4]
90004024:	681b      	ldr	r3, [r3, #0]
90004026:	68db      	ldr	r3, [r3, #12]
90004028:	f003 0302 	and.w	r3, r3, #2
9000402c:	2b02      	cmp	r3, #2
9000402e:	d11b      	bne.n	90004068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
90004030:	687b      	ldr	r3, [r7, #4]
90004032:	681b      	ldr	r3, [r3, #0]
90004034:	f06f 0202 	mvn.w	r2, #2
90004038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000403a:	687b      	ldr	r3, [r7, #4]
9000403c:	2201      	movs	r2, #1
9000403e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
90004040:	687b      	ldr	r3, [r7, #4]
90004042:	681b      	ldr	r3, [r3, #0]
90004044:	699b      	ldr	r3, [r3, #24]
90004046:	f003 0303 	and.w	r3, r3, #3
9000404a:	2b00      	cmp	r3, #0
9000404c:	d003      	beq.n	90004056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
9000404e:	6878      	ldr	r0, [r7, #4]
90004050:	f000 f905 	bl	9000425e <HAL_TIM_IC_CaptureCallback>
90004054:	e005      	b.n	90004062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
90004056:	6878      	ldr	r0, [r7, #4]
90004058:	f000 f8f7 	bl	9000424a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000405c:	6878      	ldr	r0, [r7, #4]
9000405e:	f000 f908 	bl	90004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90004062:	687b      	ldr	r3, [r7, #4]
90004064:	2200      	movs	r2, #0
90004066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
90004068:	687b      	ldr	r3, [r7, #4]
9000406a:	681b      	ldr	r3, [r3, #0]
9000406c:	691b      	ldr	r3, [r3, #16]
9000406e:	f003 0304 	and.w	r3, r3, #4
90004072:	2b04      	cmp	r3, #4
90004074:	d122      	bne.n	900040bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
90004076:	687b      	ldr	r3, [r7, #4]
90004078:	681b      	ldr	r3, [r3, #0]
9000407a:	68db      	ldr	r3, [r3, #12]
9000407c:	f003 0304 	and.w	r3, r3, #4
90004080:	2b04      	cmp	r3, #4
90004082:	d11b      	bne.n	900040bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
90004084:	687b      	ldr	r3, [r7, #4]
90004086:	681b      	ldr	r3, [r3, #0]
90004088:	f06f 0204 	mvn.w	r2, #4
9000408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000408e:	687b      	ldr	r3, [r7, #4]
90004090:	2202      	movs	r2, #2
90004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
90004094:	687b      	ldr	r3, [r7, #4]
90004096:	681b      	ldr	r3, [r3, #0]
90004098:	699b      	ldr	r3, [r3, #24]
9000409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
9000409e:	2b00      	cmp	r3, #0
900040a0:	d003      	beq.n	900040aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900040a2:	6878      	ldr	r0, [r7, #4]
900040a4:	f000 f8db 	bl	9000425e <HAL_TIM_IC_CaptureCallback>
900040a8:	e005      	b.n	900040b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900040aa:	6878      	ldr	r0, [r7, #4]
900040ac:	f000 f8cd 	bl	9000424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900040b0:	6878      	ldr	r0, [r7, #4]
900040b2:	f000 f8de 	bl	90004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900040b6:	687b      	ldr	r3, [r7, #4]
900040b8:	2200      	movs	r2, #0
900040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
900040bc:	687b      	ldr	r3, [r7, #4]
900040be:	681b      	ldr	r3, [r3, #0]
900040c0:	691b      	ldr	r3, [r3, #16]
900040c2:	f003 0308 	and.w	r3, r3, #8
900040c6:	2b08      	cmp	r3, #8
900040c8:	d122      	bne.n	90004110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
900040ca:	687b      	ldr	r3, [r7, #4]
900040cc:	681b      	ldr	r3, [r3, #0]
900040ce:	68db      	ldr	r3, [r3, #12]
900040d0:	f003 0308 	and.w	r3, r3, #8
900040d4:	2b08      	cmp	r3, #8
900040d6:	d11b      	bne.n	90004110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
900040d8:	687b      	ldr	r3, [r7, #4]
900040da:	681b      	ldr	r3, [r3, #0]
900040dc:	f06f 0208 	mvn.w	r2, #8
900040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
900040e2:	687b      	ldr	r3, [r7, #4]
900040e4:	2204      	movs	r2, #4
900040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
900040e8:	687b      	ldr	r3, [r7, #4]
900040ea:	681b      	ldr	r3, [r3, #0]
900040ec:	69db      	ldr	r3, [r3, #28]
900040ee:	f003 0303 	and.w	r3, r3, #3
900040f2:	2b00      	cmp	r3, #0
900040f4:	d003      	beq.n	900040fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900040f6:	6878      	ldr	r0, [r7, #4]
900040f8:	f000 f8b1 	bl	9000425e <HAL_TIM_IC_CaptureCallback>
900040fc:	e005      	b.n	9000410a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
900040fe:	6878      	ldr	r0, [r7, #4]
90004100:	f000 f8a3 	bl	9000424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90004104:	6878      	ldr	r0, [r7, #4]
90004106:	f000 f8b4 	bl	90004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000410a:	687b      	ldr	r3, [r7, #4]
9000410c:	2200      	movs	r2, #0
9000410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
90004110:	687b      	ldr	r3, [r7, #4]
90004112:	681b      	ldr	r3, [r3, #0]
90004114:	691b      	ldr	r3, [r3, #16]
90004116:	f003 0310 	and.w	r3, r3, #16
9000411a:	2b10      	cmp	r3, #16
9000411c:	d122      	bne.n	90004164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000411e:	687b      	ldr	r3, [r7, #4]
90004120:	681b      	ldr	r3, [r3, #0]
90004122:	68db      	ldr	r3, [r3, #12]
90004124:	f003 0310 	and.w	r3, r3, #16
90004128:	2b10      	cmp	r3, #16
9000412a:	d11b      	bne.n	90004164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000412c:	687b      	ldr	r3, [r7, #4]
9000412e:	681b      	ldr	r3, [r3, #0]
90004130:	f06f 0210 	mvn.w	r2, #16
90004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
90004136:	687b      	ldr	r3, [r7, #4]
90004138:	2208      	movs	r2, #8
9000413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000413c:	687b      	ldr	r3, [r7, #4]
9000413e:	681b      	ldr	r3, [r3, #0]
90004140:	69db      	ldr	r3, [r3, #28]
90004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
90004146:	2b00      	cmp	r3, #0
90004148:	d003      	beq.n	90004152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
9000414a:	6878      	ldr	r0, [r7, #4]
9000414c:	f000 f887 	bl	9000425e <HAL_TIM_IC_CaptureCallback>
90004150:	e005      	b.n	9000415e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
90004152:	6878      	ldr	r0, [r7, #4]
90004154:	f000 f879 	bl	9000424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90004158:	6878      	ldr	r0, [r7, #4]
9000415a:	f000 f88a 	bl	90004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000415e:	687b      	ldr	r3, [r7, #4]
90004160:	2200      	movs	r2, #0
90004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
90004164:	687b      	ldr	r3, [r7, #4]
90004166:	681b      	ldr	r3, [r3, #0]
90004168:	691b      	ldr	r3, [r3, #16]
9000416a:	f003 0301 	and.w	r3, r3, #1
9000416e:	2b01      	cmp	r3, #1
90004170:	d10e      	bne.n	90004190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
90004172:	687b      	ldr	r3, [r7, #4]
90004174:	681b      	ldr	r3, [r3, #0]
90004176:	68db      	ldr	r3, [r3, #12]
90004178:	f003 0301 	and.w	r3, r3, #1
9000417c:	2b01      	cmp	r3, #1
9000417e:	d107      	bne.n	90004190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
90004180:	687b      	ldr	r3, [r7, #4]
90004182:	681b      	ldr	r3, [r3, #0]
90004184:	f06f 0201 	mvn.w	r2, #1
90004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
9000418a:	6878      	ldr	r0, [r7, #4]
9000418c:	f7fc fce0 	bl	90000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
90004190:	687b      	ldr	r3, [r7, #4]
90004192:	681b      	ldr	r3, [r3, #0]
90004194:	691b      	ldr	r3, [r3, #16]
90004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000419a:	2b80      	cmp	r3, #128	; 0x80
9000419c:	d10e      	bne.n	900041bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000419e:	687b      	ldr	r3, [r7, #4]
900041a0:	681b      	ldr	r3, [r3, #0]
900041a2:	68db      	ldr	r3, [r3, #12]
900041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
900041a8:	2b80      	cmp	r3, #128	; 0x80
900041aa:	d107      	bne.n	900041bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
900041ac:	687b      	ldr	r3, [r7, #4]
900041ae:	681b      	ldr	r3, [r3, #0]
900041b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
900041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
900041b6:	6878      	ldr	r0, [r7, #4]
900041b8:	f000 f914 	bl	900043e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
900041bc:	687b      	ldr	r3, [r7, #4]
900041be:	681b      	ldr	r3, [r3, #0]
900041c0:	691b      	ldr	r3, [r3, #16]
900041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900041ca:	d10e      	bne.n	900041ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
900041cc:	687b      	ldr	r3, [r7, #4]
900041ce:	681b      	ldr	r3, [r3, #0]
900041d0:	68db      	ldr	r3, [r3, #12]
900041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900041d6:	2b80      	cmp	r3, #128	; 0x80
900041d8:	d107      	bne.n	900041ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
900041da:	687b      	ldr	r3, [r7, #4]
900041dc:	681b      	ldr	r3, [r3, #0]
900041de:	f46f 7280 	mvn.w	r2, #256	; 0x100
900041e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
900041e4:	6878      	ldr	r0, [r7, #4]
900041e6:	f000 f907 	bl	900043f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
900041ea:	687b      	ldr	r3, [r7, #4]
900041ec:	681b      	ldr	r3, [r3, #0]
900041ee:	691b      	ldr	r3, [r3, #16]
900041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
900041f4:	2b40      	cmp	r3, #64	; 0x40
900041f6:	d10e      	bne.n	90004216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
900041f8:	687b      	ldr	r3, [r7, #4]
900041fa:	681b      	ldr	r3, [r3, #0]
900041fc:	68db      	ldr	r3, [r3, #12]
900041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004202:	2b40      	cmp	r3, #64	; 0x40
90004204:	d107      	bne.n	90004216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
90004206:	687b      	ldr	r3, [r7, #4]
90004208:	681b      	ldr	r3, [r3, #0]
9000420a:	f06f 0240 	mvn.w	r2, #64	; 0x40
9000420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
90004210:	6878      	ldr	r0, [r7, #4]
90004212:	f000 f838 	bl	90004286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
90004216:	687b      	ldr	r3, [r7, #4]
90004218:	681b      	ldr	r3, [r3, #0]
9000421a:	691b      	ldr	r3, [r3, #16]
9000421c:	f003 0320 	and.w	r3, r3, #32
90004220:	2b20      	cmp	r3, #32
90004222:	d10e      	bne.n	90004242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
90004224:	687b      	ldr	r3, [r7, #4]
90004226:	681b      	ldr	r3, [r3, #0]
90004228:	68db      	ldr	r3, [r3, #12]
9000422a:	f003 0320 	and.w	r3, r3, #32
9000422e:	2b20      	cmp	r3, #32
90004230:	d107      	bne.n	90004242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
90004232:	687b      	ldr	r3, [r7, #4]
90004234:	681b      	ldr	r3, [r3, #0]
90004236:	f06f 0220 	mvn.w	r2, #32
9000423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
9000423c:	6878      	ldr	r0, [r7, #4]
9000423e:	f000 f8c7 	bl	900043d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
90004242:	bf00      	nop
90004244:	3708      	adds	r7, #8
90004246:	46bd      	mov	sp, r7
90004248:	bd80      	pop	{r7, pc}

9000424a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
9000424a:	b480      	push	{r7}
9000424c:	b083      	sub	sp, #12
9000424e:	af00      	add	r7, sp, #0
90004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
90004252:	bf00      	nop
90004254:	370c      	adds	r7, #12
90004256:	46bd      	mov	sp, r7
90004258:	f85d 7b04 	ldr.w	r7, [sp], #4
9000425c:	4770      	bx	lr

9000425e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
9000425e:	b480      	push	{r7}
90004260:	b083      	sub	sp, #12
90004262:	af00      	add	r7, sp, #0
90004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
90004266:	bf00      	nop
90004268:	370c      	adds	r7, #12
9000426a:	46bd      	mov	sp, r7
9000426c:	f85d 7b04 	ldr.w	r7, [sp], #4
90004270:	4770      	bx	lr

90004272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
90004272:	b480      	push	{r7}
90004274:	b083      	sub	sp, #12
90004276:	af00      	add	r7, sp, #0
90004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
9000427a:	bf00      	nop
9000427c:	370c      	adds	r7, #12
9000427e:	46bd      	mov	sp, r7
90004280:	f85d 7b04 	ldr.w	r7, [sp], #4
90004284:	4770      	bx	lr

90004286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
90004286:	b480      	push	{r7}
90004288:	b083      	sub	sp, #12
9000428a:	af00      	add	r7, sp, #0
9000428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
9000428e:	bf00      	nop
90004290:	370c      	adds	r7, #12
90004292:	46bd      	mov	sp, r7
90004294:	f85d 7b04 	ldr.w	r7, [sp], #4
90004298:	4770      	bx	lr
	...

9000429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
9000429c:	b480      	push	{r7}
9000429e:	b085      	sub	sp, #20
900042a0:	af00      	add	r7, sp, #0
900042a2:	6078      	str	r0, [r7, #4]
900042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
900042a6:	687b      	ldr	r3, [r7, #4]
900042a8:	681b      	ldr	r3, [r3, #0]
900042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
900042ac:	687b      	ldr	r3, [r7, #4]
900042ae:	4a40      	ldr	r2, [pc, #256]	; (900043b0 <TIM_Base_SetConfig+0x114>)
900042b0:	4293      	cmp	r3, r2
900042b2:	d013      	beq.n	900042dc <TIM_Base_SetConfig+0x40>
900042b4:	687b      	ldr	r3, [r7, #4]
900042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900042ba:	d00f      	beq.n	900042dc <TIM_Base_SetConfig+0x40>
900042bc:	687b      	ldr	r3, [r7, #4]
900042be:	4a3d      	ldr	r2, [pc, #244]	; (900043b4 <TIM_Base_SetConfig+0x118>)
900042c0:	4293      	cmp	r3, r2
900042c2:	d00b      	beq.n	900042dc <TIM_Base_SetConfig+0x40>
900042c4:	687b      	ldr	r3, [r7, #4]
900042c6:	4a3c      	ldr	r2, [pc, #240]	; (900043b8 <TIM_Base_SetConfig+0x11c>)
900042c8:	4293      	cmp	r3, r2
900042ca:	d007      	beq.n	900042dc <TIM_Base_SetConfig+0x40>
900042cc:	687b      	ldr	r3, [r7, #4]
900042ce:	4a3b      	ldr	r2, [pc, #236]	; (900043bc <TIM_Base_SetConfig+0x120>)
900042d0:	4293      	cmp	r3, r2
900042d2:	d003      	beq.n	900042dc <TIM_Base_SetConfig+0x40>
900042d4:	687b      	ldr	r3, [r7, #4]
900042d6:	4a3a      	ldr	r2, [pc, #232]	; (900043c0 <TIM_Base_SetConfig+0x124>)
900042d8:	4293      	cmp	r3, r2
900042da:	d108      	bne.n	900042ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
900042dc:	68fb      	ldr	r3, [r7, #12]
900042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
900042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
900042e4:	683b      	ldr	r3, [r7, #0]
900042e6:	685b      	ldr	r3, [r3, #4]
900042e8:	68fa      	ldr	r2, [r7, #12]
900042ea:	4313      	orrs	r3, r2
900042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
900042ee:	687b      	ldr	r3, [r7, #4]
900042f0:	4a2f      	ldr	r2, [pc, #188]	; (900043b0 <TIM_Base_SetConfig+0x114>)
900042f2:	4293      	cmp	r3, r2
900042f4:	d01f      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
900042f6:	687b      	ldr	r3, [r7, #4]
900042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
900042fc:	d01b      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
900042fe:	687b      	ldr	r3, [r7, #4]
90004300:	4a2c      	ldr	r2, [pc, #176]	; (900043b4 <TIM_Base_SetConfig+0x118>)
90004302:	4293      	cmp	r3, r2
90004304:	d017      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
90004306:	687b      	ldr	r3, [r7, #4]
90004308:	4a2b      	ldr	r2, [pc, #172]	; (900043b8 <TIM_Base_SetConfig+0x11c>)
9000430a:	4293      	cmp	r3, r2
9000430c:	d013      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
9000430e:	687b      	ldr	r3, [r7, #4]
90004310:	4a2a      	ldr	r2, [pc, #168]	; (900043bc <TIM_Base_SetConfig+0x120>)
90004312:	4293      	cmp	r3, r2
90004314:	d00f      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
90004316:	687b      	ldr	r3, [r7, #4]
90004318:	4a29      	ldr	r2, [pc, #164]	; (900043c0 <TIM_Base_SetConfig+0x124>)
9000431a:	4293      	cmp	r3, r2
9000431c:	d00b      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
9000431e:	687b      	ldr	r3, [r7, #4]
90004320:	4a28      	ldr	r2, [pc, #160]	; (900043c4 <TIM_Base_SetConfig+0x128>)
90004322:	4293      	cmp	r3, r2
90004324:	d007      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
90004326:	687b      	ldr	r3, [r7, #4]
90004328:	4a27      	ldr	r2, [pc, #156]	; (900043c8 <TIM_Base_SetConfig+0x12c>)
9000432a:	4293      	cmp	r3, r2
9000432c:	d003      	beq.n	90004336 <TIM_Base_SetConfig+0x9a>
9000432e:	687b      	ldr	r3, [r7, #4]
90004330:	4a26      	ldr	r2, [pc, #152]	; (900043cc <TIM_Base_SetConfig+0x130>)
90004332:	4293      	cmp	r3, r2
90004334:	d108      	bne.n	90004348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90004336:	68fb      	ldr	r3, [r7, #12]
90004338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
9000433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000433e:	683b      	ldr	r3, [r7, #0]
90004340:	68db      	ldr	r3, [r3, #12]
90004342:	68fa      	ldr	r2, [r7, #12]
90004344:	4313      	orrs	r3, r2
90004346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90004348:	68fb      	ldr	r3, [r7, #12]
9000434a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
9000434e:	683b      	ldr	r3, [r7, #0]
90004350:	695b      	ldr	r3, [r3, #20]
90004352:	4313      	orrs	r3, r2
90004354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
90004356:	687b      	ldr	r3, [r7, #4]
90004358:	68fa      	ldr	r2, [r7, #12]
9000435a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000435c:	683b      	ldr	r3, [r7, #0]
9000435e:	689a      	ldr	r2, [r3, #8]
90004360:	687b      	ldr	r3, [r7, #4]
90004362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90004364:	683b      	ldr	r3, [r7, #0]
90004366:	681a      	ldr	r2, [r3, #0]
90004368:	687b      	ldr	r3, [r7, #4]
9000436a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000436c:	687b      	ldr	r3, [r7, #4]
9000436e:	4a10      	ldr	r2, [pc, #64]	; (900043b0 <TIM_Base_SetConfig+0x114>)
90004370:	4293      	cmp	r3, r2
90004372:	d00f      	beq.n	90004394 <TIM_Base_SetConfig+0xf8>
90004374:	687b      	ldr	r3, [r7, #4]
90004376:	4a12      	ldr	r2, [pc, #72]	; (900043c0 <TIM_Base_SetConfig+0x124>)
90004378:	4293      	cmp	r3, r2
9000437a:	d00b      	beq.n	90004394 <TIM_Base_SetConfig+0xf8>
9000437c:	687b      	ldr	r3, [r7, #4]
9000437e:	4a11      	ldr	r2, [pc, #68]	; (900043c4 <TIM_Base_SetConfig+0x128>)
90004380:	4293      	cmp	r3, r2
90004382:	d007      	beq.n	90004394 <TIM_Base_SetConfig+0xf8>
90004384:	687b      	ldr	r3, [r7, #4]
90004386:	4a10      	ldr	r2, [pc, #64]	; (900043c8 <TIM_Base_SetConfig+0x12c>)
90004388:	4293      	cmp	r3, r2
9000438a:	d003      	beq.n	90004394 <TIM_Base_SetConfig+0xf8>
9000438c:	687b      	ldr	r3, [r7, #4]
9000438e:	4a0f      	ldr	r2, [pc, #60]	; (900043cc <TIM_Base_SetConfig+0x130>)
90004390:	4293      	cmp	r3, r2
90004392:	d103      	bne.n	9000439c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90004394:	683b      	ldr	r3, [r7, #0]
90004396:	691a      	ldr	r2, [r3, #16]
90004398:	687b      	ldr	r3, [r7, #4]
9000439a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000439c:	687b      	ldr	r3, [r7, #4]
9000439e:	2201      	movs	r2, #1
900043a0:	615a      	str	r2, [r3, #20]
}
900043a2:	bf00      	nop
900043a4:	3714      	adds	r7, #20
900043a6:	46bd      	mov	sp, r7
900043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900043ac:	4770      	bx	lr
900043ae:	bf00      	nop
900043b0:	40010000 	.word	0x40010000
900043b4:	40000400 	.word	0x40000400
900043b8:	40000800 	.word	0x40000800
900043bc:	40000c00 	.word	0x40000c00
900043c0:	40010400 	.word	0x40010400
900043c4:	40014000 	.word	0x40014000
900043c8:	40014400 	.word	0x40014400
900043cc:	40014800 	.word	0x40014800

900043d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
900043d0:	b480      	push	{r7}
900043d2:	b083      	sub	sp, #12
900043d4:	af00      	add	r7, sp, #0
900043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
900043d8:	bf00      	nop
900043da:	370c      	adds	r7, #12
900043dc:	46bd      	mov	sp, r7
900043de:	f85d 7b04 	ldr.w	r7, [sp], #4
900043e2:	4770      	bx	lr

900043e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
900043e4:	b480      	push	{r7}
900043e6:	b083      	sub	sp, #12
900043e8:	af00      	add	r7, sp, #0
900043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
900043ec:	bf00      	nop
900043ee:	370c      	adds	r7, #12
900043f0:	46bd      	mov	sp, r7
900043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
900043f6:	4770      	bx	lr

900043f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
900043f8:	b480      	push	{r7}
900043fa:	b083      	sub	sp, #12
900043fc:	af00      	add	r7, sp, #0
900043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
90004400:	bf00      	nop
90004402:	370c      	adds	r7, #12
90004404:	46bd      	mov	sp, r7
90004406:	f85d 7b04 	ldr.w	r7, [sp], #4
9000440a:	4770      	bx	lr

9000440c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
9000440c:	b580      	push	{r7, lr}
9000440e:	b082      	sub	sp, #8
90004410:	af00      	add	r7, sp, #0
90004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	2b00      	cmp	r3, #0
90004418:	d101      	bne.n	9000441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
9000441a:	2301      	movs	r3, #1
9000441c:	e042      	b.n	900044a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000441e:	687b      	ldr	r3, [r7, #4]
90004420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90004424:	2b00      	cmp	r3, #0
90004426:	d106      	bne.n	90004436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90004428:	687b      	ldr	r3, [r7, #4]
9000442a:	2200      	movs	r2, #0
9000442c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90004430:	6878      	ldr	r0, [r7, #4]
90004432:	f7fc fbc3 	bl	90000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90004436:	687b      	ldr	r3, [r7, #4]
90004438:	2224      	movs	r2, #36	; 0x24
9000443a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
9000443e:	687b      	ldr	r3, [r7, #4]
90004440:	681b      	ldr	r3, [r3, #0]
90004442:	681a      	ldr	r2, [r3, #0]
90004444:	687b      	ldr	r3, [r7, #4]
90004446:	681b      	ldr	r3, [r3, #0]
90004448:	f022 0201 	bic.w	r2, r2, #1
9000444c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
9000444e:	6878      	ldr	r0, [r7, #4]
90004450:	f000 f8c2 	bl	900045d8 <UART_SetConfig>
90004454:	4603      	mov	r3, r0
90004456:	2b01      	cmp	r3, #1
90004458:	d101      	bne.n	9000445e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
9000445a:	2301      	movs	r3, #1
9000445c:	e022      	b.n	900044a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
9000445e:	687b      	ldr	r3, [r7, #4]
90004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004462:	2b00      	cmp	r3, #0
90004464:	d002      	beq.n	9000446c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
90004466:	6878      	ldr	r0, [r7, #4]
90004468:	f000 fe1e 	bl	900050a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000446c:	687b      	ldr	r3, [r7, #4]
9000446e:	681b      	ldr	r3, [r3, #0]
90004470:	685a      	ldr	r2, [r3, #4]
90004472:	687b      	ldr	r3, [r7, #4]
90004474:	681b      	ldr	r3, [r3, #0]
90004476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
9000447a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
9000447c:	687b      	ldr	r3, [r7, #4]
9000447e:	681b      	ldr	r3, [r3, #0]
90004480:	689a      	ldr	r2, [r3, #8]
90004482:	687b      	ldr	r3, [r7, #4]
90004484:	681b      	ldr	r3, [r3, #0]
90004486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
9000448a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
9000448c:	687b      	ldr	r3, [r7, #4]
9000448e:	681b      	ldr	r3, [r3, #0]
90004490:	681a      	ldr	r2, [r3, #0]
90004492:	687b      	ldr	r3, [r7, #4]
90004494:	681b      	ldr	r3, [r3, #0]
90004496:	f042 0201 	orr.w	r2, r2, #1
9000449a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
9000449c:	6878      	ldr	r0, [r7, #4]
9000449e:	f000 fea5 	bl	900051ec <UART_CheckIdleState>
900044a2:	4603      	mov	r3, r0
}
900044a4:	4618      	mov	r0, r3
900044a6:	3708      	adds	r7, #8
900044a8:	46bd      	mov	sp, r7
900044aa:	bd80      	pop	{r7, pc}

900044ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900044ac:	b580      	push	{r7, lr}
900044ae:	b08a      	sub	sp, #40	; 0x28
900044b0:	af02      	add	r7, sp, #8
900044b2:	60f8      	str	r0, [r7, #12]
900044b4:	60b9      	str	r1, [r7, #8]
900044b6:	603b      	str	r3, [r7, #0]
900044b8:	4613      	mov	r3, r2
900044ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
900044bc:	68fb      	ldr	r3, [r7, #12]
900044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900044c2:	2b20      	cmp	r3, #32
900044c4:	f040 8083 	bne.w	900045ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
900044c8:	68bb      	ldr	r3, [r7, #8]
900044ca:	2b00      	cmp	r3, #0
900044cc:	d002      	beq.n	900044d4 <HAL_UART_Transmit+0x28>
900044ce:	88fb      	ldrh	r3, [r7, #6]
900044d0:	2b00      	cmp	r3, #0
900044d2:	d101      	bne.n	900044d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
900044d4:	2301      	movs	r3, #1
900044d6:	e07b      	b.n	900045d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
900044d8:	68fb      	ldr	r3, [r7, #12]
900044da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
900044de:	2b01      	cmp	r3, #1
900044e0:	d101      	bne.n	900044e6 <HAL_UART_Transmit+0x3a>
900044e2:	2302      	movs	r3, #2
900044e4:	e074      	b.n	900045d0 <HAL_UART_Transmit+0x124>
900044e6:	68fb      	ldr	r3, [r7, #12]
900044e8:	2201      	movs	r2, #1
900044ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
900044ee:	68fb      	ldr	r3, [r7, #12]
900044f0:	2200      	movs	r2, #0
900044f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
900044f6:	68fb      	ldr	r3, [r7, #12]
900044f8:	2221      	movs	r2, #33	; 0x21
900044fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
900044fe:	f7fc fdcf 	bl	900010a0 <HAL_GetTick>
90004502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90004504:	68fb      	ldr	r3, [r7, #12]
90004506:	88fa      	ldrh	r2, [r7, #6]
90004508:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
9000450c:	68fb      	ldr	r3, [r7, #12]
9000450e:	88fa      	ldrh	r2, [r7, #6]
90004510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90004514:	68fb      	ldr	r3, [r7, #12]
90004516:	689b      	ldr	r3, [r3, #8]
90004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000451c:	d108      	bne.n	90004530 <HAL_UART_Transmit+0x84>
9000451e:	68fb      	ldr	r3, [r7, #12]
90004520:	691b      	ldr	r3, [r3, #16]
90004522:	2b00      	cmp	r3, #0
90004524:	d104      	bne.n	90004530 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
90004526:	2300      	movs	r3, #0
90004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
9000452a:	68bb      	ldr	r3, [r7, #8]
9000452c:	61bb      	str	r3, [r7, #24]
9000452e:	e003      	b.n	90004538 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
90004530:	68bb      	ldr	r3, [r7, #8]
90004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90004534:	2300      	movs	r3, #0
90004536:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
90004538:	68fb      	ldr	r3, [r7, #12]
9000453a:	2200      	movs	r2, #0
9000453c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
90004540:	e02c      	b.n	9000459c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90004542:	683b      	ldr	r3, [r7, #0]
90004544:	9300      	str	r3, [sp, #0]
90004546:	697b      	ldr	r3, [r7, #20]
90004548:	2200      	movs	r2, #0
9000454a:	2180      	movs	r1, #128	; 0x80
9000454c:	68f8      	ldr	r0, [r7, #12]
9000454e:	f000 fe98 	bl	90005282 <UART_WaitOnFlagUntilTimeout>
90004552:	4603      	mov	r3, r0
90004554:	2b00      	cmp	r3, #0
90004556:	d001      	beq.n	9000455c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
90004558:	2303      	movs	r3, #3
9000455a:	e039      	b.n	900045d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
9000455c:	69fb      	ldr	r3, [r7, #28]
9000455e:	2b00      	cmp	r3, #0
90004560:	d10b      	bne.n	9000457a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90004562:	69bb      	ldr	r3, [r7, #24]
90004564:	881b      	ldrh	r3, [r3, #0]
90004566:	461a      	mov	r2, r3
90004568:	68fb      	ldr	r3, [r7, #12]
9000456a:	681b      	ldr	r3, [r3, #0]
9000456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
90004570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
90004572:	69bb      	ldr	r3, [r7, #24]
90004574:	3302      	adds	r3, #2
90004576:	61bb      	str	r3, [r7, #24]
90004578:	e007      	b.n	9000458a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000457a:	69fb      	ldr	r3, [r7, #28]
9000457c:	781a      	ldrb	r2, [r3, #0]
9000457e:	68fb      	ldr	r3, [r7, #12]
90004580:	681b      	ldr	r3, [r3, #0]
90004582:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
90004584:	69fb      	ldr	r3, [r7, #28]
90004586:	3301      	adds	r3, #1
90004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000458a:	68fb      	ldr	r3, [r7, #12]
9000458c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
90004590:	b29b      	uxth	r3, r3
90004592:	3b01      	subs	r3, #1
90004594:	b29a      	uxth	r2, r3
90004596:	68fb      	ldr	r3, [r7, #12]
90004598:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
9000459c:	68fb      	ldr	r3, [r7, #12]
9000459e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
900045a2:	b29b      	uxth	r3, r3
900045a4:	2b00      	cmp	r3, #0
900045a6:	d1cc      	bne.n	90004542 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
900045a8:	683b      	ldr	r3, [r7, #0]
900045aa:	9300      	str	r3, [sp, #0]
900045ac:	697b      	ldr	r3, [r7, #20]
900045ae:	2200      	movs	r2, #0
900045b0:	2140      	movs	r1, #64	; 0x40
900045b2:	68f8      	ldr	r0, [r7, #12]
900045b4:	f000 fe65 	bl	90005282 <UART_WaitOnFlagUntilTimeout>
900045b8:	4603      	mov	r3, r0
900045ba:	2b00      	cmp	r3, #0
900045bc:	d001      	beq.n	900045c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
900045be:	2303      	movs	r3, #3
900045c0:	e006      	b.n	900045d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
900045c2:	68fb      	ldr	r3, [r7, #12]
900045c4:	2220      	movs	r2, #32
900045c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
900045ca:	2300      	movs	r3, #0
900045cc:	e000      	b.n	900045d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
900045ce:	2302      	movs	r3, #2
  }
}
900045d0:	4618      	mov	r0, r3
900045d2:	3720      	adds	r7, #32
900045d4:	46bd      	mov	sp, r7
900045d6:	bd80      	pop	{r7, pc}

900045d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
900045d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
900045dc:	b092      	sub	sp, #72	; 0x48
900045de:	af00      	add	r7, sp, #0
900045e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
900045e2:	2300      	movs	r3, #0
900045e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
900045e8:	697b      	ldr	r3, [r7, #20]
900045ea:	689a      	ldr	r2, [r3, #8]
900045ec:	697b      	ldr	r3, [r7, #20]
900045ee:	691b      	ldr	r3, [r3, #16]
900045f0:	431a      	orrs	r2, r3
900045f2:	697b      	ldr	r3, [r7, #20]
900045f4:	695b      	ldr	r3, [r3, #20]
900045f6:	431a      	orrs	r2, r3
900045f8:	697b      	ldr	r3, [r7, #20]
900045fa:	69db      	ldr	r3, [r3, #28]
900045fc:	4313      	orrs	r3, r2
900045fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90004600:	697b      	ldr	r3, [r7, #20]
90004602:	681b      	ldr	r3, [r3, #0]
90004604:	681a      	ldr	r2, [r3, #0]
90004606:	4bbe      	ldr	r3, [pc, #760]	; (90004900 <UART_SetConfig+0x328>)
90004608:	4013      	ands	r3, r2
9000460a:	697a      	ldr	r2, [r7, #20]
9000460c:	6812      	ldr	r2, [r2, #0]
9000460e:	6c79      	ldr	r1, [r7, #68]	; 0x44
90004610:	430b      	orrs	r3, r1
90004612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90004614:	697b      	ldr	r3, [r7, #20]
90004616:	681b      	ldr	r3, [r3, #0]
90004618:	685b      	ldr	r3, [r3, #4]
9000461a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
9000461e:	697b      	ldr	r3, [r7, #20]
90004620:	68da      	ldr	r2, [r3, #12]
90004622:	697b      	ldr	r3, [r7, #20]
90004624:	681b      	ldr	r3, [r3, #0]
90004626:	430a      	orrs	r2, r1
90004628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000462a:	697b      	ldr	r3, [r7, #20]
9000462c:	699b      	ldr	r3, [r3, #24]
9000462e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90004630:	697b      	ldr	r3, [r7, #20]
90004632:	681b      	ldr	r3, [r3, #0]
90004634:	4ab3      	ldr	r2, [pc, #716]	; (90004904 <UART_SetConfig+0x32c>)
90004636:	4293      	cmp	r3, r2
90004638:	d004      	beq.n	90004644 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
9000463a:	697b      	ldr	r3, [r7, #20]
9000463c:	6a1b      	ldr	r3, [r3, #32]
9000463e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90004640:	4313      	orrs	r3, r2
90004642:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90004644:	697b      	ldr	r3, [r7, #20]
90004646:	681b      	ldr	r3, [r3, #0]
90004648:	689a      	ldr	r2, [r3, #8]
9000464a:	4baf      	ldr	r3, [pc, #700]	; (90004908 <UART_SetConfig+0x330>)
9000464c:	4013      	ands	r3, r2
9000464e:	697a      	ldr	r2, [r7, #20]
90004650:	6812      	ldr	r2, [r2, #0]
90004652:	6c79      	ldr	r1, [r7, #68]	; 0x44
90004654:	430b      	orrs	r3, r1
90004656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90004658:	697b      	ldr	r3, [r7, #20]
9000465a:	681b      	ldr	r3, [r3, #0]
9000465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000465e:	f023 010f 	bic.w	r1, r3, #15
90004662:	697b      	ldr	r3, [r7, #20]
90004664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90004666:	697b      	ldr	r3, [r7, #20]
90004668:	681b      	ldr	r3, [r3, #0]
9000466a:	430a      	orrs	r2, r1
9000466c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000466e:	697b      	ldr	r3, [r7, #20]
90004670:	681b      	ldr	r3, [r3, #0]
90004672:	4aa6      	ldr	r2, [pc, #664]	; (9000490c <UART_SetConfig+0x334>)
90004674:	4293      	cmp	r3, r2
90004676:	d177      	bne.n	90004768 <UART_SetConfig+0x190>
90004678:	4ba5      	ldr	r3, [pc, #660]	; (90004910 <UART_SetConfig+0x338>)
9000467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000467c:	f003 0338 	and.w	r3, r3, #56	; 0x38
90004680:	2b28      	cmp	r3, #40	; 0x28
90004682:	d86d      	bhi.n	90004760 <UART_SetConfig+0x188>
90004684:	a201      	add	r2, pc, #4	; (adr r2, 9000468c <UART_SetConfig+0xb4>)
90004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000468a:	bf00      	nop
9000468c:	90004731 	.word	0x90004731
90004690:	90004761 	.word	0x90004761
90004694:	90004761 	.word	0x90004761
90004698:	90004761 	.word	0x90004761
9000469c:	90004761 	.word	0x90004761
900046a0:	90004761 	.word	0x90004761
900046a4:	90004761 	.word	0x90004761
900046a8:	90004761 	.word	0x90004761
900046ac:	90004739 	.word	0x90004739
900046b0:	90004761 	.word	0x90004761
900046b4:	90004761 	.word	0x90004761
900046b8:	90004761 	.word	0x90004761
900046bc:	90004761 	.word	0x90004761
900046c0:	90004761 	.word	0x90004761
900046c4:	90004761 	.word	0x90004761
900046c8:	90004761 	.word	0x90004761
900046cc:	90004741 	.word	0x90004741
900046d0:	90004761 	.word	0x90004761
900046d4:	90004761 	.word	0x90004761
900046d8:	90004761 	.word	0x90004761
900046dc:	90004761 	.word	0x90004761
900046e0:	90004761 	.word	0x90004761
900046e4:	90004761 	.word	0x90004761
900046e8:	90004761 	.word	0x90004761
900046ec:	90004749 	.word	0x90004749
900046f0:	90004761 	.word	0x90004761
900046f4:	90004761 	.word	0x90004761
900046f8:	90004761 	.word	0x90004761
900046fc:	90004761 	.word	0x90004761
90004700:	90004761 	.word	0x90004761
90004704:	90004761 	.word	0x90004761
90004708:	90004761 	.word	0x90004761
9000470c:	90004751 	.word	0x90004751
90004710:	90004761 	.word	0x90004761
90004714:	90004761 	.word	0x90004761
90004718:	90004761 	.word	0x90004761
9000471c:	90004761 	.word	0x90004761
90004720:	90004761 	.word	0x90004761
90004724:	90004761 	.word	0x90004761
90004728:	90004761 	.word	0x90004761
9000472c:	90004759 	.word	0x90004759
90004730:	2301      	movs	r3, #1
90004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004736:	e222      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004738:	2304      	movs	r3, #4
9000473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000473e:	e21e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004740:	2308      	movs	r3, #8
90004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004746:	e21a      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004748:	2310      	movs	r3, #16
9000474a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000474e:	e216      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004750:	2320      	movs	r3, #32
90004752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004756:	e212      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004758:	2340      	movs	r3, #64	; 0x40
9000475a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000475e:	e20e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004760:	2380      	movs	r3, #128	; 0x80
90004762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004766:	e20a      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004768:	697b      	ldr	r3, [r7, #20]
9000476a:	681b      	ldr	r3, [r3, #0]
9000476c:	4a69      	ldr	r2, [pc, #420]	; (90004914 <UART_SetConfig+0x33c>)
9000476e:	4293      	cmp	r3, r2
90004770:	d130      	bne.n	900047d4 <UART_SetConfig+0x1fc>
90004772:	4b67      	ldr	r3, [pc, #412]	; (90004910 <UART_SetConfig+0x338>)
90004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004776:	f003 0307 	and.w	r3, r3, #7
9000477a:	2b05      	cmp	r3, #5
9000477c:	d826      	bhi.n	900047cc <UART_SetConfig+0x1f4>
9000477e:	a201      	add	r2, pc, #4	; (adr r2, 90004784 <UART_SetConfig+0x1ac>)
90004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004784:	9000479d 	.word	0x9000479d
90004788:	900047a5 	.word	0x900047a5
9000478c:	900047ad 	.word	0x900047ad
90004790:	900047b5 	.word	0x900047b5
90004794:	900047bd 	.word	0x900047bd
90004798:	900047c5 	.word	0x900047c5
9000479c:	2300      	movs	r3, #0
9000479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047a2:	e1ec      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047a4:	2304      	movs	r3, #4
900047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047aa:	e1e8      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047ac:	2308      	movs	r3, #8
900047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047b2:	e1e4      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047b4:	2310      	movs	r3, #16
900047b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047ba:	e1e0      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047bc:	2320      	movs	r3, #32
900047be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047c2:	e1dc      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047c4:	2340      	movs	r3, #64	; 0x40
900047c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047ca:	e1d8      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047cc:	2380      	movs	r3, #128	; 0x80
900047ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900047d2:	e1d4      	b.n	90004b7e <UART_SetConfig+0x5a6>
900047d4:	697b      	ldr	r3, [r7, #20]
900047d6:	681b      	ldr	r3, [r3, #0]
900047d8:	4a4f      	ldr	r2, [pc, #316]	; (90004918 <UART_SetConfig+0x340>)
900047da:	4293      	cmp	r3, r2
900047dc:	d130      	bne.n	90004840 <UART_SetConfig+0x268>
900047de:	4b4c      	ldr	r3, [pc, #304]	; (90004910 <UART_SetConfig+0x338>)
900047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900047e2:	f003 0307 	and.w	r3, r3, #7
900047e6:	2b05      	cmp	r3, #5
900047e8:	d826      	bhi.n	90004838 <UART_SetConfig+0x260>
900047ea:	a201      	add	r2, pc, #4	; (adr r2, 900047f0 <UART_SetConfig+0x218>)
900047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900047f0:	90004809 	.word	0x90004809
900047f4:	90004811 	.word	0x90004811
900047f8:	90004819 	.word	0x90004819
900047fc:	90004821 	.word	0x90004821
90004800:	90004829 	.word	0x90004829
90004804:	90004831 	.word	0x90004831
90004808:	2300      	movs	r3, #0
9000480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000480e:	e1b6      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004810:	2304      	movs	r3, #4
90004812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004816:	e1b2      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004818:	2308      	movs	r3, #8
9000481a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000481e:	e1ae      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004820:	2310      	movs	r3, #16
90004822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004826:	e1aa      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004828:	2320      	movs	r3, #32
9000482a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000482e:	e1a6      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004830:	2340      	movs	r3, #64	; 0x40
90004832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004836:	e1a2      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004838:	2380      	movs	r3, #128	; 0x80
9000483a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000483e:	e19e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004840:	697b      	ldr	r3, [r7, #20]
90004842:	681b      	ldr	r3, [r3, #0]
90004844:	4a35      	ldr	r2, [pc, #212]	; (9000491c <UART_SetConfig+0x344>)
90004846:	4293      	cmp	r3, r2
90004848:	d130      	bne.n	900048ac <UART_SetConfig+0x2d4>
9000484a:	4b31      	ldr	r3, [pc, #196]	; (90004910 <UART_SetConfig+0x338>)
9000484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000484e:	f003 0307 	and.w	r3, r3, #7
90004852:	2b05      	cmp	r3, #5
90004854:	d826      	bhi.n	900048a4 <UART_SetConfig+0x2cc>
90004856:	a201      	add	r2, pc, #4	; (adr r2, 9000485c <UART_SetConfig+0x284>)
90004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000485c:	90004875 	.word	0x90004875
90004860:	9000487d 	.word	0x9000487d
90004864:	90004885 	.word	0x90004885
90004868:	9000488d 	.word	0x9000488d
9000486c:	90004895 	.word	0x90004895
90004870:	9000489d 	.word	0x9000489d
90004874:	2300      	movs	r3, #0
90004876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000487a:	e180      	b.n	90004b7e <UART_SetConfig+0x5a6>
9000487c:	2304      	movs	r3, #4
9000487e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004882:	e17c      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004884:	2308      	movs	r3, #8
90004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000488a:	e178      	b.n	90004b7e <UART_SetConfig+0x5a6>
9000488c:	2310      	movs	r3, #16
9000488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004892:	e174      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004894:	2320      	movs	r3, #32
90004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000489a:	e170      	b.n	90004b7e <UART_SetConfig+0x5a6>
9000489c:	2340      	movs	r3, #64	; 0x40
9000489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048a2:	e16c      	b.n	90004b7e <UART_SetConfig+0x5a6>
900048a4:	2380      	movs	r3, #128	; 0x80
900048a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048aa:	e168      	b.n	90004b7e <UART_SetConfig+0x5a6>
900048ac:	697b      	ldr	r3, [r7, #20]
900048ae:	681b      	ldr	r3, [r3, #0]
900048b0:	4a1b      	ldr	r2, [pc, #108]	; (90004920 <UART_SetConfig+0x348>)
900048b2:	4293      	cmp	r3, r2
900048b4:	d142      	bne.n	9000493c <UART_SetConfig+0x364>
900048b6:	4b16      	ldr	r3, [pc, #88]	; (90004910 <UART_SetConfig+0x338>)
900048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900048ba:	f003 0307 	and.w	r3, r3, #7
900048be:	2b05      	cmp	r3, #5
900048c0:	d838      	bhi.n	90004934 <UART_SetConfig+0x35c>
900048c2:	a201      	add	r2, pc, #4	; (adr r2, 900048c8 <UART_SetConfig+0x2f0>)
900048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900048c8:	900048e1 	.word	0x900048e1
900048cc:	900048e9 	.word	0x900048e9
900048d0:	900048f1 	.word	0x900048f1
900048d4:	900048f9 	.word	0x900048f9
900048d8:	90004925 	.word	0x90004925
900048dc:	9000492d 	.word	0x9000492d
900048e0:	2300      	movs	r3, #0
900048e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048e6:	e14a      	b.n	90004b7e <UART_SetConfig+0x5a6>
900048e8:	2304      	movs	r3, #4
900048ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048ee:	e146      	b.n	90004b7e <UART_SetConfig+0x5a6>
900048f0:	2308      	movs	r3, #8
900048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048f6:	e142      	b.n	90004b7e <UART_SetConfig+0x5a6>
900048f8:	2310      	movs	r3, #16
900048fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900048fe:	e13e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004900:	cfff69f3 	.word	0xcfff69f3
90004904:	58000c00 	.word	0x58000c00
90004908:	11fff4ff 	.word	0x11fff4ff
9000490c:	40011000 	.word	0x40011000
90004910:	58024400 	.word	0x58024400
90004914:	40004400 	.word	0x40004400
90004918:	40004800 	.word	0x40004800
9000491c:	40004c00 	.word	0x40004c00
90004920:	40005000 	.word	0x40005000
90004924:	2320      	movs	r3, #32
90004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000492a:	e128      	b.n	90004b7e <UART_SetConfig+0x5a6>
9000492c:	2340      	movs	r3, #64	; 0x40
9000492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004932:	e124      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004934:	2380      	movs	r3, #128	; 0x80
90004936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000493a:	e120      	b.n	90004b7e <UART_SetConfig+0x5a6>
9000493c:	697b      	ldr	r3, [r7, #20]
9000493e:	681b      	ldr	r3, [r3, #0]
90004940:	4acb      	ldr	r2, [pc, #812]	; (90004c70 <UART_SetConfig+0x698>)
90004942:	4293      	cmp	r3, r2
90004944:	d176      	bne.n	90004a34 <UART_SetConfig+0x45c>
90004946:	4bcb      	ldr	r3, [pc, #812]	; (90004c74 <UART_SetConfig+0x69c>)
90004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000494a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000494e:	2b28      	cmp	r3, #40	; 0x28
90004950:	d86c      	bhi.n	90004a2c <UART_SetConfig+0x454>
90004952:	a201      	add	r2, pc, #4	; (adr r2, 90004958 <UART_SetConfig+0x380>)
90004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004958:	900049fd 	.word	0x900049fd
9000495c:	90004a2d 	.word	0x90004a2d
90004960:	90004a2d 	.word	0x90004a2d
90004964:	90004a2d 	.word	0x90004a2d
90004968:	90004a2d 	.word	0x90004a2d
9000496c:	90004a2d 	.word	0x90004a2d
90004970:	90004a2d 	.word	0x90004a2d
90004974:	90004a2d 	.word	0x90004a2d
90004978:	90004a05 	.word	0x90004a05
9000497c:	90004a2d 	.word	0x90004a2d
90004980:	90004a2d 	.word	0x90004a2d
90004984:	90004a2d 	.word	0x90004a2d
90004988:	90004a2d 	.word	0x90004a2d
9000498c:	90004a2d 	.word	0x90004a2d
90004990:	90004a2d 	.word	0x90004a2d
90004994:	90004a2d 	.word	0x90004a2d
90004998:	90004a0d 	.word	0x90004a0d
9000499c:	90004a2d 	.word	0x90004a2d
900049a0:	90004a2d 	.word	0x90004a2d
900049a4:	90004a2d 	.word	0x90004a2d
900049a8:	90004a2d 	.word	0x90004a2d
900049ac:	90004a2d 	.word	0x90004a2d
900049b0:	90004a2d 	.word	0x90004a2d
900049b4:	90004a2d 	.word	0x90004a2d
900049b8:	90004a15 	.word	0x90004a15
900049bc:	90004a2d 	.word	0x90004a2d
900049c0:	90004a2d 	.word	0x90004a2d
900049c4:	90004a2d 	.word	0x90004a2d
900049c8:	90004a2d 	.word	0x90004a2d
900049cc:	90004a2d 	.word	0x90004a2d
900049d0:	90004a2d 	.word	0x90004a2d
900049d4:	90004a2d 	.word	0x90004a2d
900049d8:	90004a1d 	.word	0x90004a1d
900049dc:	90004a2d 	.word	0x90004a2d
900049e0:	90004a2d 	.word	0x90004a2d
900049e4:	90004a2d 	.word	0x90004a2d
900049e8:	90004a2d 	.word	0x90004a2d
900049ec:	90004a2d 	.word	0x90004a2d
900049f0:	90004a2d 	.word	0x90004a2d
900049f4:	90004a2d 	.word	0x90004a2d
900049f8:	90004a25 	.word	0x90004a25
900049fc:	2301      	movs	r3, #1
900049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a02:	e0bc      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a04:	2304      	movs	r3, #4
90004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a0a:	e0b8      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a0c:	2308      	movs	r3, #8
90004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a12:	e0b4      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a14:	2310      	movs	r3, #16
90004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a1a:	e0b0      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a1c:	2320      	movs	r3, #32
90004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a22:	e0ac      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a24:	2340      	movs	r3, #64	; 0x40
90004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a2a:	e0a8      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a2c:	2380      	movs	r3, #128	; 0x80
90004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a32:	e0a4      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a34:	697b      	ldr	r3, [r7, #20]
90004a36:	681b      	ldr	r3, [r3, #0]
90004a38:	4a8f      	ldr	r2, [pc, #572]	; (90004c78 <UART_SetConfig+0x6a0>)
90004a3a:	4293      	cmp	r3, r2
90004a3c:	d130      	bne.n	90004aa0 <UART_SetConfig+0x4c8>
90004a3e:	4b8d      	ldr	r3, [pc, #564]	; (90004c74 <UART_SetConfig+0x69c>)
90004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004a42:	f003 0307 	and.w	r3, r3, #7
90004a46:	2b05      	cmp	r3, #5
90004a48:	d826      	bhi.n	90004a98 <UART_SetConfig+0x4c0>
90004a4a:	a201      	add	r2, pc, #4	; (adr r2, 90004a50 <UART_SetConfig+0x478>)
90004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004a50:	90004a69 	.word	0x90004a69
90004a54:	90004a71 	.word	0x90004a71
90004a58:	90004a79 	.word	0x90004a79
90004a5c:	90004a81 	.word	0x90004a81
90004a60:	90004a89 	.word	0x90004a89
90004a64:	90004a91 	.word	0x90004a91
90004a68:	2300      	movs	r3, #0
90004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a6e:	e086      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a70:	2304      	movs	r3, #4
90004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a76:	e082      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a78:	2308      	movs	r3, #8
90004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a7e:	e07e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a80:	2310      	movs	r3, #16
90004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a86:	e07a      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a88:	2320      	movs	r3, #32
90004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a8e:	e076      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a90:	2340      	movs	r3, #64	; 0x40
90004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a96:	e072      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004a98:	2380      	movs	r3, #128	; 0x80
90004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004a9e:	e06e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004aa0:	697b      	ldr	r3, [r7, #20]
90004aa2:	681b      	ldr	r3, [r3, #0]
90004aa4:	4a75      	ldr	r2, [pc, #468]	; (90004c7c <UART_SetConfig+0x6a4>)
90004aa6:	4293      	cmp	r3, r2
90004aa8:	d130      	bne.n	90004b0c <UART_SetConfig+0x534>
90004aaa:	4b72      	ldr	r3, [pc, #456]	; (90004c74 <UART_SetConfig+0x69c>)
90004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004aae:	f003 0307 	and.w	r3, r3, #7
90004ab2:	2b05      	cmp	r3, #5
90004ab4:	d826      	bhi.n	90004b04 <UART_SetConfig+0x52c>
90004ab6:	a201      	add	r2, pc, #4	; (adr r2, 90004abc <UART_SetConfig+0x4e4>)
90004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004abc:	90004ad5 	.word	0x90004ad5
90004ac0:	90004add 	.word	0x90004add
90004ac4:	90004ae5 	.word	0x90004ae5
90004ac8:	90004aed 	.word	0x90004aed
90004acc:	90004af5 	.word	0x90004af5
90004ad0:	90004afd 	.word	0x90004afd
90004ad4:	2300      	movs	r3, #0
90004ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004ada:	e050      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004adc:	2304      	movs	r3, #4
90004ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004ae2:	e04c      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004ae4:	2308      	movs	r3, #8
90004ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004aea:	e048      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004aec:	2310      	movs	r3, #16
90004aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004af2:	e044      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004af4:	2320      	movs	r3, #32
90004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004afa:	e040      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004afc:	2340      	movs	r3, #64	; 0x40
90004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b02:	e03c      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b04:	2380      	movs	r3, #128	; 0x80
90004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b0a:	e038      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b0c:	697b      	ldr	r3, [r7, #20]
90004b0e:	681b      	ldr	r3, [r3, #0]
90004b10:	4a5b      	ldr	r2, [pc, #364]	; (90004c80 <UART_SetConfig+0x6a8>)
90004b12:	4293      	cmp	r3, r2
90004b14:	d130      	bne.n	90004b78 <UART_SetConfig+0x5a0>
90004b16:	4b57      	ldr	r3, [pc, #348]	; (90004c74 <UART_SetConfig+0x69c>)
90004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90004b1a:	f003 0307 	and.w	r3, r3, #7
90004b1e:	2b05      	cmp	r3, #5
90004b20:	d826      	bhi.n	90004b70 <UART_SetConfig+0x598>
90004b22:	a201      	add	r2, pc, #4	; (adr r2, 90004b28 <UART_SetConfig+0x550>)
90004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004b28:	90004b41 	.word	0x90004b41
90004b2c:	90004b49 	.word	0x90004b49
90004b30:	90004b51 	.word	0x90004b51
90004b34:	90004b59 	.word	0x90004b59
90004b38:	90004b61 	.word	0x90004b61
90004b3c:	90004b69 	.word	0x90004b69
90004b40:	2302      	movs	r3, #2
90004b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b46:	e01a      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b48:	2304      	movs	r3, #4
90004b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b4e:	e016      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b50:	2308      	movs	r3, #8
90004b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b56:	e012      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b58:	2310      	movs	r3, #16
90004b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b5e:	e00e      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b60:	2320      	movs	r3, #32
90004b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b66:	e00a      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b68:	2340      	movs	r3, #64	; 0x40
90004b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b6e:	e006      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b70:	2380      	movs	r3, #128	; 0x80
90004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004b76:	e002      	b.n	90004b7e <UART_SetConfig+0x5a6>
90004b78:	2380      	movs	r3, #128	; 0x80
90004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
90004b7e:	697b      	ldr	r3, [r7, #20]
90004b80:	681b      	ldr	r3, [r3, #0]
90004b82:	4a3f      	ldr	r2, [pc, #252]	; (90004c80 <UART_SetConfig+0x6a8>)
90004b84:	4293      	cmp	r3, r2
90004b86:	f040 80f8 	bne.w	90004d7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90004b8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90004b8e:	2b20      	cmp	r3, #32
90004b90:	dc46      	bgt.n	90004c20 <UART_SetConfig+0x648>
90004b92:	2b02      	cmp	r3, #2
90004b94:	f2c0 8082 	blt.w	90004c9c <UART_SetConfig+0x6c4>
90004b98:	3b02      	subs	r3, #2
90004b9a:	2b1e      	cmp	r3, #30
90004b9c:	d87e      	bhi.n	90004c9c <UART_SetConfig+0x6c4>
90004b9e:	a201      	add	r2, pc, #4	; (adr r2, 90004ba4 <UART_SetConfig+0x5cc>)
90004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004ba4:	90004c27 	.word	0x90004c27
90004ba8:	90004c9d 	.word	0x90004c9d
90004bac:	90004c2f 	.word	0x90004c2f
90004bb0:	90004c9d 	.word	0x90004c9d
90004bb4:	90004c9d 	.word	0x90004c9d
90004bb8:	90004c9d 	.word	0x90004c9d
90004bbc:	90004c3f 	.word	0x90004c3f
90004bc0:	90004c9d 	.word	0x90004c9d
90004bc4:	90004c9d 	.word	0x90004c9d
90004bc8:	90004c9d 	.word	0x90004c9d
90004bcc:	90004c9d 	.word	0x90004c9d
90004bd0:	90004c9d 	.word	0x90004c9d
90004bd4:	90004c9d 	.word	0x90004c9d
90004bd8:	90004c9d 	.word	0x90004c9d
90004bdc:	90004c4f 	.word	0x90004c4f
90004be0:	90004c9d 	.word	0x90004c9d
90004be4:	90004c9d 	.word	0x90004c9d
90004be8:	90004c9d 	.word	0x90004c9d
90004bec:	90004c9d 	.word	0x90004c9d
90004bf0:	90004c9d 	.word	0x90004c9d
90004bf4:	90004c9d 	.word	0x90004c9d
90004bf8:	90004c9d 	.word	0x90004c9d
90004bfc:	90004c9d 	.word	0x90004c9d
90004c00:	90004c9d 	.word	0x90004c9d
90004c04:	90004c9d 	.word	0x90004c9d
90004c08:	90004c9d 	.word	0x90004c9d
90004c0c:	90004c9d 	.word	0x90004c9d
90004c10:	90004c9d 	.word	0x90004c9d
90004c14:	90004c9d 	.word	0x90004c9d
90004c18:	90004c9d 	.word	0x90004c9d
90004c1c:	90004c8f 	.word	0x90004c8f
90004c20:	2b40      	cmp	r3, #64	; 0x40
90004c22:	d037      	beq.n	90004c94 <UART_SetConfig+0x6bc>
90004c24:	e03a      	b.n	90004c9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
90004c26:	f7fe fcf5 	bl	90003614 <HAL_RCCEx_GetD3PCLK1Freq>
90004c2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004c2c:	e03c      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90004c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004c32:	4618      	mov	r0, r3
90004c34:	f7fe fd04 	bl	90003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004c3c:	e034      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90004c3e:	f107 0318 	add.w	r3, r7, #24
90004c42:	4618      	mov	r0, r3
90004c44:	f7fe fe50 	bl	900038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90004c48:	69fb      	ldr	r3, [r7, #28]
90004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004c4c:	e02c      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004c4e:	4b09      	ldr	r3, [pc, #36]	; (90004c74 <UART_SetConfig+0x69c>)
90004c50:	681b      	ldr	r3, [r3, #0]
90004c52:	f003 0320 	and.w	r3, r3, #32
90004c56:	2b00      	cmp	r3, #0
90004c58:	d016      	beq.n	90004c88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90004c5a:	4b06      	ldr	r3, [pc, #24]	; (90004c74 <UART_SetConfig+0x69c>)
90004c5c:	681b      	ldr	r3, [r3, #0]
90004c5e:	08db      	lsrs	r3, r3, #3
90004c60:	f003 0303 	and.w	r3, r3, #3
90004c64:	4a07      	ldr	r2, [pc, #28]	; (90004c84 <UART_SetConfig+0x6ac>)
90004c66:	fa22 f303 	lsr.w	r3, r2, r3
90004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90004c6c:	e01c      	b.n	90004ca8 <UART_SetConfig+0x6d0>
90004c6e:	bf00      	nop
90004c70:	40011400 	.word	0x40011400
90004c74:	58024400 	.word	0x58024400
90004c78:	40007800 	.word	0x40007800
90004c7c:	40007c00 	.word	0x40007c00
90004c80:	58000c00 	.word	0x58000c00
90004c84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
90004c88:	4b9d      	ldr	r3, [pc, #628]	; (90004f00 <UART_SetConfig+0x928>)
90004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004c8c:	e00c      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90004c8e:	4b9d      	ldr	r3, [pc, #628]	; (90004f04 <UART_SetConfig+0x92c>)
90004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004c92:	e009      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90004c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004c9a:	e005      	b.n	90004ca8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
90004c9c:	2300      	movs	r3, #0
90004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90004ca0:	2301      	movs	r3, #1
90004ca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90004ca6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
90004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004caa:	2b00      	cmp	r3, #0
90004cac:	f000 81de 	beq.w	9000506c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90004cb0:	697b      	ldr	r3, [r7, #20]
90004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004cb4:	4a94      	ldr	r2, [pc, #592]	; (90004f08 <UART_SetConfig+0x930>)
90004cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90004cba:	461a      	mov	r2, r3
90004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004cbe:	fbb3 f3f2 	udiv	r3, r3, r2
90004cc2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90004cc4:	697b      	ldr	r3, [r7, #20]
90004cc6:	685a      	ldr	r2, [r3, #4]
90004cc8:	4613      	mov	r3, r2
90004cca:	005b      	lsls	r3, r3, #1
90004ccc:	4413      	add	r3, r2
90004cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90004cd0:	429a      	cmp	r2, r3
90004cd2:	d305      	bcc.n	90004ce0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
90004cd4:	697b      	ldr	r3, [r7, #20]
90004cd6:	685b      	ldr	r3, [r3, #4]
90004cd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90004cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90004cdc:	429a      	cmp	r2, r3
90004cde:	d903      	bls.n	90004ce8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
90004ce0:	2301      	movs	r3, #1
90004ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90004ce6:	e1c1      	b.n	9000506c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004cea:	2200      	movs	r2, #0
90004cec:	60bb      	str	r3, [r7, #8]
90004cee:	60fa      	str	r2, [r7, #12]
90004cf0:	697b      	ldr	r3, [r7, #20]
90004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004cf4:	4a84      	ldr	r2, [pc, #528]	; (90004f08 <UART_SetConfig+0x930>)
90004cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90004cfa:	b29b      	uxth	r3, r3
90004cfc:	2200      	movs	r2, #0
90004cfe:	603b      	str	r3, [r7, #0]
90004d00:	607a      	str	r2, [r7, #4]
90004d02:	e9d7 2300 	ldrd	r2, r3, [r7]
90004d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
90004d0a:	f7fb fae9 	bl	900002e0 <__aeabi_uldivmod>
90004d0e:	4602      	mov	r2, r0
90004d10:	460b      	mov	r3, r1
90004d12:	4610      	mov	r0, r2
90004d14:	4619      	mov	r1, r3
90004d16:	f04f 0200 	mov.w	r2, #0
90004d1a:	f04f 0300 	mov.w	r3, #0
90004d1e:	020b      	lsls	r3, r1, #8
90004d20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
90004d24:	0202      	lsls	r2, r0, #8
90004d26:	6979      	ldr	r1, [r7, #20]
90004d28:	6849      	ldr	r1, [r1, #4]
90004d2a:	0849      	lsrs	r1, r1, #1
90004d2c:	2000      	movs	r0, #0
90004d2e:	460c      	mov	r4, r1
90004d30:	4605      	mov	r5, r0
90004d32:	eb12 0804 	adds.w	r8, r2, r4
90004d36:	eb43 0905 	adc.w	r9, r3, r5
90004d3a:	697b      	ldr	r3, [r7, #20]
90004d3c:	685b      	ldr	r3, [r3, #4]
90004d3e:	2200      	movs	r2, #0
90004d40:	469a      	mov	sl, r3
90004d42:	4693      	mov	fp, r2
90004d44:	4652      	mov	r2, sl
90004d46:	465b      	mov	r3, fp
90004d48:	4640      	mov	r0, r8
90004d4a:	4649      	mov	r1, r9
90004d4c:	f7fb fac8 	bl	900002e0 <__aeabi_uldivmod>
90004d50:	4602      	mov	r2, r0
90004d52:	460b      	mov	r3, r1
90004d54:	4613      	mov	r3, r2
90004d56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
90004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90004d5e:	d308      	bcc.n	90004d72 <UART_SetConfig+0x79a>
90004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004d66:	d204      	bcs.n	90004d72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
90004d68:	697b      	ldr	r3, [r7, #20]
90004d6a:	681b      	ldr	r3, [r3, #0]
90004d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
90004d6e:	60da      	str	r2, [r3, #12]
90004d70:	e17c      	b.n	9000506c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
90004d72:	2301      	movs	r3, #1
90004d74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90004d78:	e178      	b.n	9000506c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90004d7a:	697b      	ldr	r3, [r7, #20]
90004d7c:	69db      	ldr	r3, [r3, #28]
90004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90004d82:	f040 80c5 	bne.w	90004f10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
90004d86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90004d8a:	2b20      	cmp	r3, #32
90004d8c:	dc48      	bgt.n	90004e20 <UART_SetConfig+0x848>
90004d8e:	2b00      	cmp	r3, #0
90004d90:	db7b      	blt.n	90004e8a <UART_SetConfig+0x8b2>
90004d92:	2b20      	cmp	r3, #32
90004d94:	d879      	bhi.n	90004e8a <UART_SetConfig+0x8b2>
90004d96:	a201      	add	r2, pc, #4	; (adr r2, 90004d9c <UART_SetConfig+0x7c4>)
90004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004d9c:	90004e27 	.word	0x90004e27
90004da0:	90004e2f 	.word	0x90004e2f
90004da4:	90004e8b 	.word	0x90004e8b
90004da8:	90004e8b 	.word	0x90004e8b
90004dac:	90004e37 	.word	0x90004e37
90004db0:	90004e8b 	.word	0x90004e8b
90004db4:	90004e8b 	.word	0x90004e8b
90004db8:	90004e8b 	.word	0x90004e8b
90004dbc:	90004e47 	.word	0x90004e47
90004dc0:	90004e8b 	.word	0x90004e8b
90004dc4:	90004e8b 	.word	0x90004e8b
90004dc8:	90004e8b 	.word	0x90004e8b
90004dcc:	90004e8b 	.word	0x90004e8b
90004dd0:	90004e8b 	.word	0x90004e8b
90004dd4:	90004e8b 	.word	0x90004e8b
90004dd8:	90004e8b 	.word	0x90004e8b
90004ddc:	90004e57 	.word	0x90004e57
90004de0:	90004e8b 	.word	0x90004e8b
90004de4:	90004e8b 	.word	0x90004e8b
90004de8:	90004e8b 	.word	0x90004e8b
90004dec:	90004e8b 	.word	0x90004e8b
90004df0:	90004e8b 	.word	0x90004e8b
90004df4:	90004e8b 	.word	0x90004e8b
90004df8:	90004e8b 	.word	0x90004e8b
90004dfc:	90004e8b 	.word	0x90004e8b
90004e00:	90004e8b 	.word	0x90004e8b
90004e04:	90004e8b 	.word	0x90004e8b
90004e08:	90004e8b 	.word	0x90004e8b
90004e0c:	90004e8b 	.word	0x90004e8b
90004e10:	90004e8b 	.word	0x90004e8b
90004e14:	90004e8b 	.word	0x90004e8b
90004e18:	90004e8b 	.word	0x90004e8b
90004e1c:	90004e7d 	.word	0x90004e7d
90004e20:	2b40      	cmp	r3, #64	; 0x40
90004e22:	d02e      	beq.n	90004e82 <UART_SetConfig+0x8aa>
90004e24:	e031      	b.n	90004e8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90004e26:	f7fd fc41 	bl	900026ac <HAL_RCC_GetPCLK1Freq>
90004e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004e2c:	e033      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90004e2e:	f7fd fc53 	bl	900026d8 <HAL_RCC_GetPCLK2Freq>
90004e32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004e34:	e02f      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90004e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004e3a:	4618      	mov	r0, r3
90004e3c:	f7fe fc00 	bl	90003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004e44:	e027      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90004e46:	f107 0318 	add.w	r3, r7, #24
90004e4a:	4618      	mov	r0, r3
90004e4c:	f7fe fd4c 	bl	900038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90004e50:	69fb      	ldr	r3, [r7, #28]
90004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004e54:	e01f      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004e56:	4b2d      	ldr	r3, [pc, #180]	; (90004f0c <UART_SetConfig+0x934>)
90004e58:	681b      	ldr	r3, [r3, #0]
90004e5a:	f003 0320 	and.w	r3, r3, #32
90004e5e:	2b00      	cmp	r3, #0
90004e60:	d009      	beq.n	90004e76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90004e62:	4b2a      	ldr	r3, [pc, #168]	; (90004f0c <UART_SetConfig+0x934>)
90004e64:	681b      	ldr	r3, [r3, #0]
90004e66:	08db      	lsrs	r3, r3, #3
90004e68:	f003 0303 	and.w	r3, r3, #3
90004e6c:	4a24      	ldr	r2, [pc, #144]	; (90004f00 <UART_SetConfig+0x928>)
90004e6e:	fa22 f303 	lsr.w	r3, r2, r3
90004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90004e74:	e00f      	b.n	90004e96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
90004e76:	4b22      	ldr	r3, [pc, #136]	; (90004f00 <UART_SetConfig+0x928>)
90004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004e7a:	e00c      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90004e7c:	4b21      	ldr	r3, [pc, #132]	; (90004f04 <UART_SetConfig+0x92c>)
90004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004e80:	e009      	b.n	90004e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004e88:	e005      	b.n	90004e96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
90004e8a:	2300      	movs	r3, #0
90004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90004e8e:	2301      	movs	r3, #1
90004e90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90004e94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
90004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004e98:	2b00      	cmp	r3, #0
90004e9a:	f000 80e7 	beq.w	9000506c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90004e9e:	697b      	ldr	r3, [r7, #20]
90004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004ea2:	4a19      	ldr	r2, [pc, #100]	; (90004f08 <UART_SetConfig+0x930>)
90004ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90004ea8:	461a      	mov	r2, r3
90004eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004eac:	fbb3 f3f2 	udiv	r3, r3, r2
90004eb0:	005a      	lsls	r2, r3, #1
90004eb2:	697b      	ldr	r3, [r7, #20]
90004eb4:	685b      	ldr	r3, [r3, #4]
90004eb6:	085b      	lsrs	r3, r3, #1
90004eb8:	441a      	add	r2, r3
90004eba:	697b      	ldr	r3, [r7, #20]
90004ebc:	685b      	ldr	r3, [r3, #4]
90004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
90004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004ec6:	2b0f      	cmp	r3, #15
90004ec8:	d916      	bls.n	90004ef8 <UART_SetConfig+0x920>
90004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004ed0:	d212      	bcs.n	90004ef8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004ed4:	b29b      	uxth	r3, r3
90004ed6:	f023 030f 	bic.w	r3, r3, #15
90004eda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004ede:	085b      	lsrs	r3, r3, #1
90004ee0:	b29b      	uxth	r3, r3
90004ee2:	f003 0307 	and.w	r3, r3, #7
90004ee6:	b29a      	uxth	r2, r3
90004ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
90004eea:	4313      	orrs	r3, r2
90004eec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
90004eee:	697b      	ldr	r3, [r7, #20]
90004ef0:	681b      	ldr	r3, [r3, #0]
90004ef2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
90004ef4:	60da      	str	r2, [r3, #12]
90004ef6:	e0b9      	b.n	9000506c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90004ef8:	2301      	movs	r3, #1
90004efa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90004efe:	e0b5      	b.n	9000506c <UART_SetConfig+0xa94>
90004f00:	03d09000 	.word	0x03d09000
90004f04:	003d0900 	.word	0x003d0900
90004f08:	90008e08 	.word	0x90008e08
90004f0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
90004f10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90004f14:	2b20      	cmp	r3, #32
90004f16:	dc49      	bgt.n	90004fac <UART_SetConfig+0x9d4>
90004f18:	2b00      	cmp	r3, #0
90004f1a:	db7c      	blt.n	90005016 <UART_SetConfig+0xa3e>
90004f1c:	2b20      	cmp	r3, #32
90004f1e:	d87a      	bhi.n	90005016 <UART_SetConfig+0xa3e>
90004f20:	a201      	add	r2, pc, #4	; (adr r2, 90004f28 <UART_SetConfig+0x950>)
90004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004f26:	bf00      	nop
90004f28:	90004fb3 	.word	0x90004fb3
90004f2c:	90004fbb 	.word	0x90004fbb
90004f30:	90005017 	.word	0x90005017
90004f34:	90005017 	.word	0x90005017
90004f38:	90004fc3 	.word	0x90004fc3
90004f3c:	90005017 	.word	0x90005017
90004f40:	90005017 	.word	0x90005017
90004f44:	90005017 	.word	0x90005017
90004f48:	90004fd3 	.word	0x90004fd3
90004f4c:	90005017 	.word	0x90005017
90004f50:	90005017 	.word	0x90005017
90004f54:	90005017 	.word	0x90005017
90004f58:	90005017 	.word	0x90005017
90004f5c:	90005017 	.word	0x90005017
90004f60:	90005017 	.word	0x90005017
90004f64:	90005017 	.word	0x90005017
90004f68:	90004fe3 	.word	0x90004fe3
90004f6c:	90005017 	.word	0x90005017
90004f70:	90005017 	.word	0x90005017
90004f74:	90005017 	.word	0x90005017
90004f78:	90005017 	.word	0x90005017
90004f7c:	90005017 	.word	0x90005017
90004f80:	90005017 	.word	0x90005017
90004f84:	90005017 	.word	0x90005017
90004f88:	90005017 	.word	0x90005017
90004f8c:	90005017 	.word	0x90005017
90004f90:	90005017 	.word	0x90005017
90004f94:	90005017 	.word	0x90005017
90004f98:	90005017 	.word	0x90005017
90004f9c:	90005017 	.word	0x90005017
90004fa0:	90005017 	.word	0x90005017
90004fa4:	90005017 	.word	0x90005017
90004fa8:	90005009 	.word	0x90005009
90004fac:	2b40      	cmp	r3, #64	; 0x40
90004fae:	d02e      	beq.n	9000500e <UART_SetConfig+0xa36>
90004fb0:	e031      	b.n	90005016 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90004fb2:	f7fd fb7b 	bl	900026ac <HAL_RCC_GetPCLK1Freq>
90004fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004fb8:	e033      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90004fba:	f7fd fb8d 	bl	900026d8 <HAL_RCC_GetPCLK2Freq>
90004fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004fc0:	e02f      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90004fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004fc6:	4618      	mov	r0, r3
90004fc8:	f7fe fb3a 	bl	90003640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004fd0:	e027      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90004fd2:	f107 0318 	add.w	r3, r7, #24
90004fd6:	4618      	mov	r0, r3
90004fd8:	f7fe fc86 	bl	900038e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90004fdc:	69fb      	ldr	r3, [r7, #28]
90004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004fe0:	e01f      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004fe2:	4b2d      	ldr	r3, [pc, #180]	; (90005098 <UART_SetConfig+0xac0>)
90004fe4:	681b      	ldr	r3, [r3, #0]
90004fe6:	f003 0320 	and.w	r3, r3, #32
90004fea:	2b00      	cmp	r3, #0
90004fec:	d009      	beq.n	90005002 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90004fee:	4b2a      	ldr	r3, [pc, #168]	; (90005098 <UART_SetConfig+0xac0>)
90004ff0:	681b      	ldr	r3, [r3, #0]
90004ff2:	08db      	lsrs	r3, r3, #3
90004ff4:	f003 0303 	and.w	r3, r3, #3
90004ff8:	4a28      	ldr	r2, [pc, #160]	; (9000509c <UART_SetConfig+0xac4>)
90004ffa:	fa22 f303 	lsr.w	r3, r2, r3
90004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90005000:	e00f      	b.n	90005022 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
90005002:	4b26      	ldr	r3, [pc, #152]	; (9000509c <UART_SetConfig+0xac4>)
90005004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90005006:	e00c      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90005008:	4b25      	ldr	r3, [pc, #148]	; (900050a0 <UART_SetConfig+0xac8>)
9000500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000500c:	e009      	b.n	90005022 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000500e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90005012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90005014:	e005      	b.n	90005022 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
90005016:	2300      	movs	r3, #0
90005018:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000501a:	2301      	movs	r3, #1
9000501c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90005020:	bf00      	nop
    }

    if (pclk != 0U)
90005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005024:	2b00      	cmp	r3, #0
90005026:	d021      	beq.n	9000506c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90005028:	697b      	ldr	r3, [r7, #20]
9000502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000502c:	4a1d      	ldr	r2, [pc, #116]	; (900050a4 <UART_SetConfig+0xacc>)
9000502e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
90005032:	461a      	mov	r2, r3
90005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90005036:	fbb3 f2f2 	udiv	r2, r3, r2
9000503a:	697b      	ldr	r3, [r7, #20]
9000503c:	685b      	ldr	r3, [r3, #4]
9000503e:	085b      	lsrs	r3, r3, #1
90005040:	441a      	add	r2, r3
90005042:	697b      	ldr	r3, [r7, #20]
90005044:	685b      	ldr	r3, [r3, #4]
90005046:	fbb2 f3f3 	udiv	r3, r2, r3
9000504a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000504e:	2b0f      	cmp	r3, #15
90005050:	d909      	bls.n	90005066 <UART_SetConfig+0xa8e>
90005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90005058:	d205      	bcs.n	90005066 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
9000505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000505c:	b29a      	uxth	r2, r3
9000505e:	697b      	ldr	r3, [r7, #20]
90005060:	681b      	ldr	r3, [r3, #0]
90005062:	60da      	str	r2, [r3, #12]
90005064:	e002      	b.n	9000506c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90005066:	2301      	movs	r3, #1
90005068:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
9000506c:	697b      	ldr	r3, [r7, #20]
9000506e:	2201      	movs	r2, #1
90005070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
90005074:	697b      	ldr	r3, [r7, #20]
90005076:	2201      	movs	r2, #1
90005078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000507c:	697b      	ldr	r3, [r7, #20]
9000507e:	2200      	movs	r2, #0
90005080:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
90005082:	697b      	ldr	r3, [r7, #20]
90005084:	2200      	movs	r2, #0
90005086:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
90005088:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
9000508c:	4618      	mov	r0, r3
9000508e:	3748      	adds	r7, #72	; 0x48
90005090:	46bd      	mov	sp, r7
90005092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90005096:	bf00      	nop
90005098:	58024400 	.word	0x58024400
9000509c:	03d09000 	.word	0x03d09000
900050a0:	003d0900 	.word	0x003d0900
900050a4:	90008e08 	.word	0x90008e08

900050a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
900050a8:	b480      	push	{r7}
900050aa:	b083      	sub	sp, #12
900050ac:	af00      	add	r7, sp, #0
900050ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
900050b0:	687b      	ldr	r3, [r7, #4]
900050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900050b4:	f003 0301 	and.w	r3, r3, #1
900050b8:	2b00      	cmp	r3, #0
900050ba:	d00a      	beq.n	900050d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
900050bc:	687b      	ldr	r3, [r7, #4]
900050be:	681b      	ldr	r3, [r3, #0]
900050c0:	685b      	ldr	r3, [r3, #4]
900050c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
900050c6:	687b      	ldr	r3, [r7, #4]
900050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900050ca:	687b      	ldr	r3, [r7, #4]
900050cc:	681b      	ldr	r3, [r3, #0]
900050ce:	430a      	orrs	r2, r1
900050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
900050d2:	687b      	ldr	r3, [r7, #4]
900050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900050d6:	f003 0302 	and.w	r3, r3, #2
900050da:	2b00      	cmp	r3, #0
900050dc:	d00a      	beq.n	900050f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
900050de:	687b      	ldr	r3, [r7, #4]
900050e0:	681b      	ldr	r3, [r3, #0]
900050e2:	685b      	ldr	r3, [r3, #4]
900050e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
900050e8:	687b      	ldr	r3, [r7, #4]
900050ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900050ec:	687b      	ldr	r3, [r7, #4]
900050ee:	681b      	ldr	r3, [r3, #0]
900050f0:	430a      	orrs	r2, r1
900050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
900050f4:	687b      	ldr	r3, [r7, #4]
900050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900050f8:	f003 0304 	and.w	r3, r3, #4
900050fc:	2b00      	cmp	r3, #0
900050fe:	d00a      	beq.n	90005116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90005100:	687b      	ldr	r3, [r7, #4]
90005102:	681b      	ldr	r3, [r3, #0]
90005104:	685b      	ldr	r3, [r3, #4]
90005106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
9000510a:	687b      	ldr	r3, [r7, #4]
9000510c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000510e:	687b      	ldr	r3, [r7, #4]
90005110:	681b      	ldr	r3, [r3, #0]
90005112:	430a      	orrs	r2, r1
90005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90005116:	687b      	ldr	r3, [r7, #4]
90005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000511a:	f003 0308 	and.w	r3, r3, #8
9000511e:	2b00      	cmp	r3, #0
90005120:	d00a      	beq.n	90005138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90005122:	687b      	ldr	r3, [r7, #4]
90005124:	681b      	ldr	r3, [r3, #0]
90005126:	685b      	ldr	r3, [r3, #4]
90005128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
9000512c:	687b      	ldr	r3, [r7, #4]
9000512e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90005130:	687b      	ldr	r3, [r7, #4]
90005132:	681b      	ldr	r3, [r3, #0]
90005134:	430a      	orrs	r2, r1
90005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90005138:	687b      	ldr	r3, [r7, #4]
9000513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000513c:	f003 0310 	and.w	r3, r3, #16
90005140:	2b00      	cmp	r3, #0
90005142:	d00a      	beq.n	9000515a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90005144:	687b      	ldr	r3, [r7, #4]
90005146:	681b      	ldr	r3, [r3, #0]
90005148:	689b      	ldr	r3, [r3, #8]
9000514a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
9000514e:	687b      	ldr	r3, [r7, #4]
90005150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90005152:	687b      	ldr	r3, [r7, #4]
90005154:	681b      	ldr	r3, [r3, #0]
90005156:	430a      	orrs	r2, r1
90005158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000515a:	687b      	ldr	r3, [r7, #4]
9000515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000515e:	f003 0320 	and.w	r3, r3, #32
90005162:	2b00      	cmp	r3, #0
90005164:	d00a      	beq.n	9000517c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90005166:	687b      	ldr	r3, [r7, #4]
90005168:	681b      	ldr	r3, [r3, #0]
9000516a:	689b      	ldr	r3, [r3, #8]
9000516c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
90005170:	687b      	ldr	r3, [r7, #4]
90005172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90005174:	687b      	ldr	r3, [r7, #4]
90005176:	681b      	ldr	r3, [r3, #0]
90005178:	430a      	orrs	r2, r1
9000517a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000517c:	687b      	ldr	r3, [r7, #4]
9000517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
90005184:	2b00      	cmp	r3, #0
90005186:	d01a      	beq.n	900051be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90005188:	687b      	ldr	r3, [r7, #4]
9000518a:	681b      	ldr	r3, [r3, #0]
9000518c:	685b      	ldr	r3, [r3, #4]
9000518e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
90005192:	687b      	ldr	r3, [r7, #4]
90005194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90005196:	687b      	ldr	r3, [r7, #4]
90005198:	681b      	ldr	r3, [r3, #0]
9000519a:	430a      	orrs	r2, r1
9000519c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000519e:	687b      	ldr	r3, [r7, #4]
900051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900051a6:	d10a      	bne.n	900051be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
900051a8:	687b      	ldr	r3, [r7, #4]
900051aa:	681b      	ldr	r3, [r3, #0]
900051ac:	685b      	ldr	r3, [r3, #4]
900051ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
900051b2:	687b      	ldr	r3, [r7, #4]
900051b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
900051b6:	687b      	ldr	r3, [r7, #4]
900051b8:	681b      	ldr	r3, [r3, #0]
900051ba:	430a      	orrs	r2, r1
900051bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900051be:	687b      	ldr	r3, [r7, #4]
900051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900051c6:	2b00      	cmp	r3, #0
900051c8:	d00a      	beq.n	900051e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900051ca:	687b      	ldr	r3, [r7, #4]
900051cc:	681b      	ldr	r3, [r3, #0]
900051ce:	685b      	ldr	r3, [r3, #4]
900051d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
900051d4:	687b      	ldr	r3, [r7, #4]
900051d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
900051d8:	687b      	ldr	r3, [r7, #4]
900051da:	681b      	ldr	r3, [r3, #0]
900051dc:	430a      	orrs	r2, r1
900051de:	605a      	str	r2, [r3, #4]
  }
}
900051e0:	bf00      	nop
900051e2:	370c      	adds	r7, #12
900051e4:	46bd      	mov	sp, r7
900051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
900051ea:	4770      	bx	lr

900051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
900051ec:	b580      	push	{r7, lr}
900051ee:	b086      	sub	sp, #24
900051f0:	af02      	add	r7, sp, #8
900051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900051f4:	687b      	ldr	r3, [r7, #4]
900051f6:	2200      	movs	r2, #0
900051f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
900051fc:	f7fb ff50 	bl	900010a0 <HAL_GetTick>
90005200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
90005202:	687b      	ldr	r3, [r7, #4]
90005204:	681b      	ldr	r3, [r3, #0]
90005206:	681b      	ldr	r3, [r3, #0]
90005208:	f003 0308 	and.w	r3, r3, #8
9000520c:	2b08      	cmp	r3, #8
9000520e:	d10e      	bne.n	9000522e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90005210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90005214:	9300      	str	r3, [sp, #0]
90005216:	68fb      	ldr	r3, [r7, #12]
90005218:	2200      	movs	r2, #0
9000521a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
9000521e:	6878      	ldr	r0, [r7, #4]
90005220:	f000 f82f 	bl	90005282 <UART_WaitOnFlagUntilTimeout>
90005224:	4603      	mov	r3, r0
90005226:	2b00      	cmp	r3, #0
90005228:	d001      	beq.n	9000522e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
9000522a:	2303      	movs	r3, #3
9000522c:	e025      	b.n	9000527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
9000522e:	687b      	ldr	r3, [r7, #4]
90005230:	681b      	ldr	r3, [r3, #0]
90005232:	681b      	ldr	r3, [r3, #0]
90005234:	f003 0304 	and.w	r3, r3, #4
90005238:	2b04      	cmp	r3, #4
9000523a:	d10e      	bne.n	9000525a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000523c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90005240:	9300      	str	r3, [sp, #0]
90005242:	68fb      	ldr	r3, [r7, #12]
90005244:	2200      	movs	r2, #0
90005246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
9000524a:	6878      	ldr	r0, [r7, #4]
9000524c:	f000 f819 	bl	90005282 <UART_WaitOnFlagUntilTimeout>
90005250:	4603      	mov	r3, r0
90005252:	2b00      	cmp	r3, #0
90005254:	d001      	beq.n	9000525a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90005256:	2303      	movs	r3, #3
90005258:	e00f      	b.n	9000527a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
9000525a:	687b      	ldr	r3, [r7, #4]
9000525c:	2220      	movs	r2, #32
9000525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
90005262:	687b      	ldr	r3, [r7, #4]
90005264:	2220      	movs	r2, #32
90005266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000526a:	687b      	ldr	r3, [r7, #4]
9000526c:	2200      	movs	r2, #0
9000526e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
90005270:	687b      	ldr	r3, [r7, #4]
90005272:	2200      	movs	r2, #0
90005274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90005278:	2300      	movs	r3, #0
}
9000527a:	4618      	mov	r0, r3
9000527c:	3710      	adds	r7, #16
9000527e:	46bd      	mov	sp, r7
90005280:	bd80      	pop	{r7, pc}

90005282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90005282:	b580      	push	{r7, lr}
90005284:	b09c      	sub	sp, #112	; 0x70
90005286:	af00      	add	r7, sp, #0
90005288:	60f8      	str	r0, [r7, #12]
9000528a:	60b9      	str	r1, [r7, #8]
9000528c:	603b      	str	r3, [r7, #0]
9000528e:	4613      	mov	r3, r2
90005290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90005292:	e0a9      	b.n	900053e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90005294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
90005296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000529a:	f000 80a5 	beq.w	900053e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000529e:	f7fb feff 	bl	900010a0 <HAL_GetTick>
900052a2:	4602      	mov	r2, r0
900052a4:	683b      	ldr	r3, [r7, #0]
900052a6:	1ad3      	subs	r3, r2, r3
900052a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
900052aa:	429a      	cmp	r2, r3
900052ac:	d302      	bcc.n	900052b4 <UART_WaitOnFlagUntilTimeout+0x32>
900052ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
900052b0:	2b00      	cmp	r3, #0
900052b2:	d140      	bne.n	90005336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
900052b4:	68fb      	ldr	r3, [r7, #12]
900052b6:	681b      	ldr	r3, [r3, #0]
900052b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900052bc:	e853 3f00 	ldrex	r3, [r3]
900052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
900052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900052c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
900052c8:	667b      	str	r3, [r7, #100]	; 0x64
900052ca:	68fb      	ldr	r3, [r7, #12]
900052cc:	681b      	ldr	r3, [r3, #0]
900052ce:	461a      	mov	r2, r3
900052d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
900052d2:	65fb      	str	r3, [r7, #92]	; 0x5c
900052d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900052d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
900052d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
900052da:	e841 2300 	strex	r3, r2, [r1]
900052de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
900052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900052e2:	2b00      	cmp	r3, #0
900052e4:	d1e6      	bne.n	900052b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
900052e6:	68fb      	ldr	r3, [r7, #12]
900052e8:	681b      	ldr	r3, [r3, #0]
900052ea:	3308      	adds	r3, #8
900052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900052f0:	e853 3f00 	ldrex	r3, [r3]
900052f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
900052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900052f8:	f023 0301 	bic.w	r3, r3, #1
900052fc:	663b      	str	r3, [r7, #96]	; 0x60
900052fe:	68fb      	ldr	r3, [r7, #12]
90005300:	681b      	ldr	r3, [r3, #0]
90005302:	3308      	adds	r3, #8
90005304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
90005306:	64ba      	str	r2, [r7, #72]	; 0x48
90005308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000530a:	6c79      	ldr	r1, [r7, #68]	; 0x44
9000530c:	6cba      	ldr	r2, [r7, #72]	; 0x48
9000530e:	e841 2300 	strex	r3, r2, [r1]
90005312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
90005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90005316:	2b00      	cmp	r3, #0
90005318:	d1e5      	bne.n	900052e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
9000531a:	68fb      	ldr	r3, [r7, #12]
9000531c:	2220      	movs	r2, #32
9000531e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
90005322:	68fb      	ldr	r3, [r7, #12]
90005324:	2220      	movs	r2, #32
90005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
9000532a:	68fb      	ldr	r3, [r7, #12]
9000532c:	2200      	movs	r2, #0
9000532e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
90005332:	2303      	movs	r3, #3
90005334:	e069      	b.n	9000540a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90005336:	68fb      	ldr	r3, [r7, #12]
90005338:	681b      	ldr	r3, [r3, #0]
9000533a:	681b      	ldr	r3, [r3, #0]
9000533c:	f003 0304 	and.w	r3, r3, #4
90005340:	2b00      	cmp	r3, #0
90005342:	d051      	beq.n	900053e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90005344:	68fb      	ldr	r3, [r7, #12]
90005346:	681b      	ldr	r3, [r3, #0]
90005348:	69db      	ldr	r3, [r3, #28]
9000534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000534e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90005352:	d149      	bne.n	900053e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90005354:	68fb      	ldr	r3, [r7, #12]
90005356:	681b      	ldr	r3, [r3, #0]
90005358:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000535c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
9000535e:	68fb      	ldr	r3, [r7, #12]
90005360:	681b      	ldr	r3, [r3, #0]
90005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005366:	e853 3f00 	ldrex	r3, [r3]
9000536a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
9000536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000536e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
90005372:	66fb      	str	r3, [r7, #108]	; 0x6c
90005374:	68fb      	ldr	r3, [r7, #12]
90005376:	681b      	ldr	r3, [r3, #0]
90005378:	461a      	mov	r2, r3
9000537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
9000537c:	637b      	str	r3, [r7, #52]	; 0x34
9000537e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90005380:	6b39      	ldr	r1, [r7, #48]	; 0x30
90005382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90005384:	e841 2300 	strex	r3, r2, [r1]
90005388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
9000538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000538c:	2b00      	cmp	r3, #0
9000538e:	d1e6      	bne.n	9000535e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90005390:	68fb      	ldr	r3, [r7, #12]
90005392:	681b      	ldr	r3, [r3, #0]
90005394:	3308      	adds	r3, #8
90005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90005398:	697b      	ldr	r3, [r7, #20]
9000539a:	e853 3f00 	ldrex	r3, [r3]
9000539e:	613b      	str	r3, [r7, #16]
   return(result);
900053a0:	693b      	ldr	r3, [r7, #16]
900053a2:	f023 0301 	bic.w	r3, r3, #1
900053a6:	66bb      	str	r3, [r7, #104]	; 0x68
900053a8:	68fb      	ldr	r3, [r7, #12]
900053aa:	681b      	ldr	r3, [r3, #0]
900053ac:	3308      	adds	r3, #8
900053ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
900053b0:	623a      	str	r2, [r7, #32]
900053b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900053b4:	69f9      	ldr	r1, [r7, #28]
900053b6:	6a3a      	ldr	r2, [r7, #32]
900053b8:	e841 2300 	strex	r3, r2, [r1]
900053bc:	61bb      	str	r3, [r7, #24]
   return(result);
900053be:	69bb      	ldr	r3, [r7, #24]
900053c0:	2b00      	cmp	r3, #0
900053c2:	d1e5      	bne.n	90005390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
900053c4:	68fb      	ldr	r3, [r7, #12]
900053c6:	2220      	movs	r2, #32
900053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
900053cc:	68fb      	ldr	r3, [r7, #12]
900053ce:	2220      	movs	r2, #32
900053d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
900053d4:	68fb      	ldr	r3, [r7, #12]
900053d6:	2220      	movs	r2, #32
900053d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
900053dc:	68fb      	ldr	r3, [r7, #12]
900053de:	2200      	movs	r2, #0
900053e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
900053e4:	2303      	movs	r3, #3
900053e6:	e010      	b.n	9000540a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
900053e8:	68fb      	ldr	r3, [r7, #12]
900053ea:	681b      	ldr	r3, [r3, #0]
900053ec:	69da      	ldr	r2, [r3, #28]
900053ee:	68bb      	ldr	r3, [r7, #8]
900053f0:	4013      	ands	r3, r2
900053f2:	68ba      	ldr	r2, [r7, #8]
900053f4:	429a      	cmp	r2, r3
900053f6:	bf0c      	ite	eq
900053f8:	2301      	moveq	r3, #1
900053fa:	2300      	movne	r3, #0
900053fc:	b2db      	uxtb	r3, r3
900053fe:	461a      	mov	r2, r3
90005400:	79fb      	ldrb	r3, [r7, #7]
90005402:	429a      	cmp	r2, r3
90005404:	f43f af46 	beq.w	90005294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90005408:	2300      	movs	r3, #0
}
9000540a:	4618      	mov	r0, r3
9000540c:	3770      	adds	r7, #112	; 0x70
9000540e:	46bd      	mov	sp, r7
90005410:	bd80      	pop	{r7, pc}

90005412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
90005412:	b480      	push	{r7}
90005414:	b085      	sub	sp, #20
90005416:	af00      	add	r7, sp, #0
90005418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
9000541a:	687b      	ldr	r3, [r7, #4]
9000541c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90005420:	2b01      	cmp	r3, #1
90005422:	d101      	bne.n	90005428 <HAL_UARTEx_DisableFifoMode+0x16>
90005424:	2302      	movs	r3, #2
90005426:	e027      	b.n	90005478 <HAL_UARTEx_DisableFifoMode+0x66>
90005428:	687b      	ldr	r3, [r7, #4]
9000542a:	2201      	movs	r2, #1
9000542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
90005430:	687b      	ldr	r3, [r7, #4]
90005432:	2224      	movs	r2, #36	; 0x24
90005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90005438:	687b      	ldr	r3, [r7, #4]
9000543a:	681b      	ldr	r3, [r3, #0]
9000543c:	681b      	ldr	r3, [r3, #0]
9000543e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90005440:	687b      	ldr	r3, [r7, #4]
90005442:	681b      	ldr	r3, [r3, #0]
90005444:	681a      	ldr	r2, [r3, #0]
90005446:	687b      	ldr	r3, [r7, #4]
90005448:	681b      	ldr	r3, [r3, #0]
9000544a:	f022 0201 	bic.w	r2, r2, #1
9000544e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
90005450:	68fb      	ldr	r3, [r7, #12]
90005452:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
90005456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
90005458:	687b      	ldr	r3, [r7, #4]
9000545a:	2200      	movs	r2, #0
9000545c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000545e:	687b      	ldr	r3, [r7, #4]
90005460:	681b      	ldr	r3, [r3, #0]
90005462:	68fa      	ldr	r2, [r7, #12]
90005464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90005466:	687b      	ldr	r3, [r7, #4]
90005468:	2220      	movs	r2, #32
9000546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000546e:	687b      	ldr	r3, [r7, #4]
90005470:	2200      	movs	r2, #0
90005472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90005476:	2300      	movs	r3, #0
}
90005478:	4618      	mov	r0, r3
9000547a:	3714      	adds	r7, #20
9000547c:	46bd      	mov	sp, r7
9000547e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005482:	4770      	bx	lr

90005484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90005484:	b580      	push	{r7, lr}
90005486:	b084      	sub	sp, #16
90005488:	af00      	add	r7, sp, #0
9000548a:	6078      	str	r0, [r7, #4]
9000548c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000548e:	687b      	ldr	r3, [r7, #4]
90005490:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90005494:	2b01      	cmp	r3, #1
90005496:	d101      	bne.n	9000549c <HAL_UARTEx_SetTxFifoThreshold+0x18>
90005498:	2302      	movs	r3, #2
9000549a:	e02d      	b.n	900054f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
9000549c:	687b      	ldr	r3, [r7, #4]
9000549e:	2201      	movs	r2, #1
900054a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
900054a4:	687b      	ldr	r3, [r7, #4]
900054a6:	2224      	movs	r2, #36	; 0x24
900054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
900054ac:	687b      	ldr	r3, [r7, #4]
900054ae:	681b      	ldr	r3, [r3, #0]
900054b0:	681b      	ldr	r3, [r3, #0]
900054b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
900054b4:	687b      	ldr	r3, [r7, #4]
900054b6:	681b      	ldr	r3, [r3, #0]
900054b8:	681a      	ldr	r2, [r3, #0]
900054ba:	687b      	ldr	r3, [r7, #4]
900054bc:	681b      	ldr	r3, [r3, #0]
900054be:	f022 0201 	bic.w	r2, r2, #1
900054c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
900054c4:	687b      	ldr	r3, [r7, #4]
900054c6:	681b      	ldr	r3, [r3, #0]
900054c8:	689b      	ldr	r3, [r3, #8]
900054ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
900054ce:	687b      	ldr	r3, [r7, #4]
900054d0:	681b      	ldr	r3, [r3, #0]
900054d2:	683a      	ldr	r2, [r7, #0]
900054d4:	430a      	orrs	r2, r1
900054d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
900054d8:	6878      	ldr	r0, [r7, #4]
900054da:	f000 f84f 	bl	9000557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
900054de:	687b      	ldr	r3, [r7, #4]
900054e0:	681b      	ldr	r3, [r3, #0]
900054e2:	68fa      	ldr	r2, [r7, #12]
900054e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
900054e6:	687b      	ldr	r3, [r7, #4]
900054e8:	2220      	movs	r2, #32
900054ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
900054ee:	687b      	ldr	r3, [r7, #4]
900054f0:	2200      	movs	r2, #0
900054f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
900054f6:	2300      	movs	r3, #0
}
900054f8:	4618      	mov	r0, r3
900054fa:	3710      	adds	r7, #16
900054fc:	46bd      	mov	sp, r7
900054fe:	bd80      	pop	{r7, pc}

90005500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90005500:	b580      	push	{r7, lr}
90005502:	b084      	sub	sp, #16
90005504:	af00      	add	r7, sp, #0
90005506:	6078      	str	r0, [r7, #4]
90005508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
9000550a:	687b      	ldr	r3, [r7, #4]
9000550c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90005510:	2b01      	cmp	r3, #1
90005512:	d101      	bne.n	90005518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
90005514:	2302      	movs	r3, #2
90005516:	e02d      	b.n	90005574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
90005518:	687b      	ldr	r3, [r7, #4]
9000551a:	2201      	movs	r2, #1
9000551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
90005520:	687b      	ldr	r3, [r7, #4]
90005522:	2224      	movs	r2, #36	; 0x24
90005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90005528:	687b      	ldr	r3, [r7, #4]
9000552a:	681b      	ldr	r3, [r3, #0]
9000552c:	681b      	ldr	r3, [r3, #0]
9000552e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90005530:	687b      	ldr	r3, [r7, #4]
90005532:	681b      	ldr	r3, [r3, #0]
90005534:	681a      	ldr	r2, [r3, #0]
90005536:	687b      	ldr	r3, [r7, #4]
90005538:	681b      	ldr	r3, [r3, #0]
9000553a:	f022 0201 	bic.w	r2, r2, #1
9000553e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
90005540:	687b      	ldr	r3, [r7, #4]
90005542:	681b      	ldr	r3, [r3, #0]
90005544:	689b      	ldr	r3, [r3, #8]
90005546:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
9000554a:	687b      	ldr	r3, [r7, #4]
9000554c:	681b      	ldr	r3, [r3, #0]
9000554e:	683a      	ldr	r2, [r7, #0]
90005550:	430a      	orrs	r2, r1
90005552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90005554:	6878      	ldr	r0, [r7, #4]
90005556:	f000 f811 	bl	9000557c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9000555a:	687b      	ldr	r3, [r7, #4]
9000555c:	681b      	ldr	r3, [r3, #0]
9000555e:	68fa      	ldr	r2, [r7, #12]
90005560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90005562:	687b      	ldr	r3, [r7, #4]
90005564:	2220      	movs	r2, #32
90005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
9000556a:	687b      	ldr	r3, [r7, #4]
9000556c:	2200      	movs	r2, #0
9000556e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90005572:	2300      	movs	r3, #0
}
90005574:	4618      	mov	r0, r3
90005576:	3710      	adds	r7, #16
90005578:	46bd      	mov	sp, r7
9000557a:	bd80      	pop	{r7, pc}

9000557c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
9000557c:	b480      	push	{r7}
9000557e:	b085      	sub	sp, #20
90005580:	af00      	add	r7, sp, #0
90005582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
90005584:	687b      	ldr	r3, [r7, #4]
90005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90005588:	2b00      	cmp	r3, #0
9000558a:	d108      	bne.n	9000559e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
9000558c:	687b      	ldr	r3, [r7, #4]
9000558e:	2201      	movs	r2, #1
90005590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
90005594:	687b      	ldr	r3, [r7, #4]
90005596:	2201      	movs	r2, #1
90005598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
9000559c:	e031      	b.n	90005602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
9000559e:	2310      	movs	r3, #16
900055a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
900055a2:	2310      	movs	r3, #16
900055a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
900055a6:	687b      	ldr	r3, [r7, #4]
900055a8:	681b      	ldr	r3, [r3, #0]
900055aa:	689b      	ldr	r3, [r3, #8]
900055ac:	0e5b      	lsrs	r3, r3, #25
900055ae:	b2db      	uxtb	r3, r3
900055b0:	f003 0307 	and.w	r3, r3, #7
900055b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
900055b6:	687b      	ldr	r3, [r7, #4]
900055b8:	681b      	ldr	r3, [r3, #0]
900055ba:	689b      	ldr	r3, [r3, #8]
900055bc:	0f5b      	lsrs	r3, r3, #29
900055be:	b2db      	uxtb	r3, r3
900055c0:	f003 0307 	and.w	r3, r3, #7
900055c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900055c6:	7bbb      	ldrb	r3, [r7, #14]
900055c8:	7b3a      	ldrb	r2, [r7, #12]
900055ca:	4911      	ldr	r1, [pc, #68]	; (90005610 <UARTEx_SetNbDataToProcess+0x94>)
900055cc:	5c8a      	ldrb	r2, [r1, r2]
900055ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
900055d2:	7b3a      	ldrb	r2, [r7, #12]
900055d4:	490f      	ldr	r1, [pc, #60]	; (90005614 <UARTEx_SetNbDataToProcess+0x98>)
900055d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900055d8:	fb93 f3f2 	sdiv	r3, r3, r2
900055dc:	b29a      	uxth	r2, r3
900055de:	687b      	ldr	r3, [r7, #4]
900055e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900055e4:	7bfb      	ldrb	r3, [r7, #15]
900055e6:	7b7a      	ldrb	r2, [r7, #13]
900055e8:	4909      	ldr	r1, [pc, #36]	; (90005610 <UARTEx_SetNbDataToProcess+0x94>)
900055ea:	5c8a      	ldrb	r2, [r1, r2]
900055ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
900055f0:	7b7a      	ldrb	r2, [r7, #13]
900055f2:	4908      	ldr	r1, [pc, #32]	; (90005614 <UARTEx_SetNbDataToProcess+0x98>)
900055f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900055f6:	fb93 f3f2 	sdiv	r3, r3, r2
900055fa:	b29a      	uxth	r2, r3
900055fc:	687b      	ldr	r3, [r7, #4]
900055fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
90005602:	bf00      	nop
90005604:	3714      	adds	r7, #20
90005606:	46bd      	mov	sp, r7
90005608:	f85d 7b04 	ldr.w	r7, [sp], #4
9000560c:	4770      	bx	lr
9000560e:	bf00      	nop
90005610:	90008e20 	.word	0x90008e20
90005614:	90008e28 	.word	0x90008e28

90005618 <__NVIC_SetPriority>:
{
90005618:	b480      	push	{r7}
9000561a:	b083      	sub	sp, #12
9000561c:	af00      	add	r7, sp, #0
9000561e:	4603      	mov	r3, r0
90005620:	6039      	str	r1, [r7, #0]
90005622:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90005624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90005628:	2b00      	cmp	r3, #0
9000562a:	db0a      	blt.n	90005642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000562c:	683b      	ldr	r3, [r7, #0]
9000562e:	b2da      	uxtb	r2, r3
90005630:	490c      	ldr	r1, [pc, #48]	; (90005664 <__NVIC_SetPriority+0x4c>)
90005632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90005636:	0112      	lsls	r2, r2, #4
90005638:	b2d2      	uxtb	r2, r2
9000563a:	440b      	add	r3, r1
9000563c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90005640:	e00a      	b.n	90005658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90005642:	683b      	ldr	r3, [r7, #0]
90005644:	b2da      	uxtb	r2, r3
90005646:	4908      	ldr	r1, [pc, #32]	; (90005668 <__NVIC_SetPriority+0x50>)
90005648:	88fb      	ldrh	r3, [r7, #6]
9000564a:	f003 030f 	and.w	r3, r3, #15
9000564e:	3b04      	subs	r3, #4
90005650:	0112      	lsls	r2, r2, #4
90005652:	b2d2      	uxtb	r2, r2
90005654:	440b      	add	r3, r1
90005656:	761a      	strb	r2, [r3, #24]
}
90005658:	bf00      	nop
9000565a:	370c      	adds	r7, #12
9000565c:	46bd      	mov	sp, r7
9000565e:	f85d 7b04 	ldr.w	r7, [sp], #4
90005662:	4770      	bx	lr
90005664:	e000e100 	.word	0xe000e100
90005668:	e000ed00 	.word	0xe000ed00

9000566c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000566c:	b580      	push	{r7, lr}
9000566e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
90005670:	4b05      	ldr	r3, [pc, #20]	; (90005688 <SysTick_Handler+0x1c>)
90005672:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
90005674:	f001 fd28 	bl	900070c8 <xTaskGetSchedulerState>
90005678:	4603      	mov	r3, r0
9000567a:	2b01      	cmp	r3, #1
9000567c:	d001      	beq.n	90005682 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
9000567e:	f002 fb13 	bl	90007ca8 <xPortSysTickHandler>
  }
}
90005682:	bf00      	nop
90005684:	bd80      	pop	{r7, pc}
90005686:	bf00      	nop
90005688:	e000e010 	.word	0xe000e010

9000568c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
9000568c:	b580      	push	{r7, lr}
9000568e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
90005690:	2100      	movs	r1, #0
90005692:	f06f 0004 	mvn.w	r0, #4
90005696:	f7ff ffbf 	bl	90005618 <__NVIC_SetPriority>
#endif
}
9000569a:	bf00      	nop
9000569c:	bd80      	pop	{r7, pc}
	...

900056a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
900056a0:	b480      	push	{r7}
900056a2:	b083      	sub	sp, #12
900056a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900056a6:	f3ef 8305 	mrs	r3, IPSR
900056aa:	603b      	str	r3, [r7, #0]
  return(result);
900056ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
900056ae:	2b00      	cmp	r3, #0
900056b0:	d003      	beq.n	900056ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
900056b2:	f06f 0305 	mvn.w	r3, #5
900056b6:	607b      	str	r3, [r7, #4]
900056b8:	e00c      	b.n	900056d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
900056ba:	4b0a      	ldr	r3, [pc, #40]	; (900056e4 <osKernelInitialize+0x44>)
900056bc:	681b      	ldr	r3, [r3, #0]
900056be:	2b00      	cmp	r3, #0
900056c0:	d105      	bne.n	900056ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
900056c2:	4b08      	ldr	r3, [pc, #32]	; (900056e4 <osKernelInitialize+0x44>)
900056c4:	2201      	movs	r2, #1
900056c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
900056c8:	2300      	movs	r3, #0
900056ca:	607b      	str	r3, [r7, #4]
900056cc:	e002      	b.n	900056d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
900056ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900056d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
900056d4:	687b      	ldr	r3, [r7, #4]
}
900056d6:	4618      	mov	r0, r3
900056d8:	370c      	adds	r7, #12
900056da:	46bd      	mov	sp, r7
900056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
900056e0:	4770      	bx	lr
900056e2:	bf00      	nop
900056e4:	2400018c 	.word	0x2400018c

900056e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
900056e8:	b580      	push	{r7, lr}
900056ea:	b082      	sub	sp, #8
900056ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900056ee:	f3ef 8305 	mrs	r3, IPSR
900056f2:	603b      	str	r3, [r7, #0]
  return(result);
900056f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
900056f6:	2b00      	cmp	r3, #0
900056f8:	d003      	beq.n	90005702 <osKernelStart+0x1a>
    stat = osErrorISR;
900056fa:	f06f 0305 	mvn.w	r3, #5
900056fe:	607b      	str	r3, [r7, #4]
90005700:	e010      	b.n	90005724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
90005702:	4b0b      	ldr	r3, [pc, #44]	; (90005730 <osKernelStart+0x48>)
90005704:	681b      	ldr	r3, [r3, #0]
90005706:	2b01      	cmp	r3, #1
90005708:	d109      	bne.n	9000571e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
9000570a:	f7ff ffbf 	bl	9000568c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000570e:	4b08      	ldr	r3, [pc, #32]	; (90005730 <osKernelStart+0x48>)
90005710:	2202      	movs	r2, #2
90005712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
90005714:	f001 f87c 	bl	90006810 <vTaskStartScheduler>
      stat = osOK;
90005718:	2300      	movs	r3, #0
9000571a:	607b      	str	r3, [r7, #4]
9000571c:	e002      	b.n	90005724 <osKernelStart+0x3c>
    } else {
      stat = osError;
9000571e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
90005724:	687b      	ldr	r3, [r7, #4]
}
90005726:	4618      	mov	r0, r3
90005728:	3708      	adds	r7, #8
9000572a:	46bd      	mov	sp, r7
9000572c:	bd80      	pop	{r7, pc}
9000572e:	bf00      	nop
90005730:	2400018c 	.word	0x2400018c

90005734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90005734:	b580      	push	{r7, lr}
90005736:	b08e      	sub	sp, #56	; 0x38
90005738:	af04      	add	r7, sp, #16
9000573a:	60f8      	str	r0, [r7, #12]
9000573c:	60b9      	str	r1, [r7, #8]
9000573e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
90005740:	2300      	movs	r3, #0
90005742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005744:	f3ef 8305 	mrs	r3, IPSR
90005748:	617b      	str	r3, [r7, #20]
  return(result);
9000574a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
9000574c:	2b00      	cmp	r3, #0
9000574e:	d17e      	bne.n	9000584e <osThreadNew+0x11a>
90005750:	68fb      	ldr	r3, [r7, #12]
90005752:	2b00      	cmp	r3, #0
90005754:	d07b      	beq.n	9000584e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
90005756:	2380      	movs	r3, #128	; 0x80
90005758:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
9000575a:	2318      	movs	r3, #24
9000575c:	61fb      	str	r3, [r7, #28]

    name = NULL;
9000575e:	2300      	movs	r3, #0
90005760:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
90005762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005766:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
90005768:	687b      	ldr	r3, [r7, #4]
9000576a:	2b00      	cmp	r3, #0
9000576c:	d045      	beq.n	900057fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
9000576e:	687b      	ldr	r3, [r7, #4]
90005770:	681b      	ldr	r3, [r3, #0]
90005772:	2b00      	cmp	r3, #0
90005774:	d002      	beq.n	9000577c <osThreadNew+0x48>
        name = attr->name;
90005776:	687b      	ldr	r3, [r7, #4]
90005778:	681b      	ldr	r3, [r3, #0]
9000577a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
9000577c:	687b      	ldr	r3, [r7, #4]
9000577e:	699b      	ldr	r3, [r3, #24]
90005780:	2b00      	cmp	r3, #0
90005782:	d002      	beq.n	9000578a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
90005784:	687b      	ldr	r3, [r7, #4]
90005786:	699b      	ldr	r3, [r3, #24]
90005788:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000578a:	69fb      	ldr	r3, [r7, #28]
9000578c:	2b00      	cmp	r3, #0
9000578e:	d008      	beq.n	900057a2 <osThreadNew+0x6e>
90005790:	69fb      	ldr	r3, [r7, #28]
90005792:	2b38      	cmp	r3, #56	; 0x38
90005794:	d805      	bhi.n	900057a2 <osThreadNew+0x6e>
90005796:	687b      	ldr	r3, [r7, #4]
90005798:	685b      	ldr	r3, [r3, #4]
9000579a:	f003 0301 	and.w	r3, r3, #1
9000579e:	2b00      	cmp	r3, #0
900057a0:	d001      	beq.n	900057a6 <osThreadNew+0x72>
        return (NULL);
900057a2:	2300      	movs	r3, #0
900057a4:	e054      	b.n	90005850 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
900057a6:	687b      	ldr	r3, [r7, #4]
900057a8:	695b      	ldr	r3, [r3, #20]
900057aa:	2b00      	cmp	r3, #0
900057ac:	d003      	beq.n	900057b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
900057ae:	687b      	ldr	r3, [r7, #4]
900057b0:	695b      	ldr	r3, [r3, #20]
900057b2:	089b      	lsrs	r3, r3, #2
900057b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900057b6:	687b      	ldr	r3, [r7, #4]
900057b8:	689b      	ldr	r3, [r3, #8]
900057ba:	2b00      	cmp	r3, #0
900057bc:	d00e      	beq.n	900057dc <osThreadNew+0xa8>
900057be:	687b      	ldr	r3, [r7, #4]
900057c0:	68db      	ldr	r3, [r3, #12]
900057c2:	2bbb      	cmp	r3, #187	; 0xbb
900057c4:	d90a      	bls.n	900057dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900057c6:	687b      	ldr	r3, [r7, #4]
900057c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900057ca:	2b00      	cmp	r3, #0
900057cc:	d006      	beq.n	900057dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900057ce:	687b      	ldr	r3, [r7, #4]
900057d0:	695b      	ldr	r3, [r3, #20]
900057d2:	2b00      	cmp	r3, #0
900057d4:	d002      	beq.n	900057dc <osThreadNew+0xa8>
        mem = 1;
900057d6:	2301      	movs	r3, #1
900057d8:	61bb      	str	r3, [r7, #24]
900057da:	e010      	b.n	900057fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
900057dc:	687b      	ldr	r3, [r7, #4]
900057de:	689b      	ldr	r3, [r3, #8]
900057e0:	2b00      	cmp	r3, #0
900057e2:	d10c      	bne.n	900057fe <osThreadNew+0xca>
900057e4:	687b      	ldr	r3, [r7, #4]
900057e6:	68db      	ldr	r3, [r3, #12]
900057e8:	2b00      	cmp	r3, #0
900057ea:	d108      	bne.n	900057fe <osThreadNew+0xca>
900057ec:	687b      	ldr	r3, [r7, #4]
900057ee:	691b      	ldr	r3, [r3, #16]
900057f0:	2b00      	cmp	r3, #0
900057f2:	d104      	bne.n	900057fe <osThreadNew+0xca>
          mem = 0;
900057f4:	2300      	movs	r3, #0
900057f6:	61bb      	str	r3, [r7, #24]
900057f8:	e001      	b.n	900057fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
900057fa:	2300      	movs	r3, #0
900057fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
900057fe:	69bb      	ldr	r3, [r7, #24]
90005800:	2b01      	cmp	r3, #1
90005802:	d110      	bne.n	90005826 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
90005804:	687b      	ldr	r3, [r7, #4]
90005806:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
90005808:	687a      	ldr	r2, [r7, #4]
9000580a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000580c:	9202      	str	r2, [sp, #8]
9000580e:	9301      	str	r3, [sp, #4]
90005810:	69fb      	ldr	r3, [r7, #28]
90005812:	9300      	str	r3, [sp, #0]
90005814:	68bb      	ldr	r3, [r7, #8]
90005816:	6a3a      	ldr	r2, [r7, #32]
90005818:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000581a:	68f8      	ldr	r0, [r7, #12]
9000581c:	f000 fe0c 	bl	90006438 <xTaskCreateStatic>
90005820:	4603      	mov	r3, r0
90005822:	613b      	str	r3, [r7, #16]
90005824:	e013      	b.n	9000584e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
90005826:	69bb      	ldr	r3, [r7, #24]
90005828:	2b00      	cmp	r3, #0
9000582a:	d110      	bne.n	9000584e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000582c:	6a3b      	ldr	r3, [r7, #32]
9000582e:	b29a      	uxth	r2, r3
90005830:	f107 0310 	add.w	r3, r7, #16
90005834:	9301      	str	r3, [sp, #4]
90005836:	69fb      	ldr	r3, [r7, #28]
90005838:	9300      	str	r3, [sp, #0]
9000583a:	68bb      	ldr	r3, [r7, #8]
9000583c:	6a79      	ldr	r1, [r7, #36]	; 0x24
9000583e:	68f8      	ldr	r0, [r7, #12]
90005840:	f000 fe57 	bl	900064f2 <xTaskCreate>
90005844:	4603      	mov	r3, r0
90005846:	2b01      	cmp	r3, #1
90005848:	d001      	beq.n	9000584e <osThreadNew+0x11a>
            hTask = NULL;
9000584a:	2300      	movs	r3, #0
9000584c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
9000584e:	693b      	ldr	r3, [r7, #16]
}
90005850:	4618      	mov	r0, r3
90005852:	3728      	adds	r7, #40	; 0x28
90005854:	46bd      	mov	sp, r7
90005856:	bd80      	pop	{r7, pc}

90005858 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
90005858:	b580      	push	{r7, lr}
9000585a:	b084      	sub	sp, #16
9000585c:	af00      	add	r7, sp, #0
9000585e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005860:	f3ef 8305 	mrs	r3, IPSR
90005864:	60bb      	str	r3, [r7, #8]
  return(result);
90005866:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
90005868:	2b00      	cmp	r3, #0
9000586a:	d003      	beq.n	90005874 <osDelay+0x1c>
    stat = osErrorISR;
9000586c:	f06f 0305 	mvn.w	r3, #5
90005870:	60fb      	str	r3, [r7, #12]
90005872:	e007      	b.n	90005884 <osDelay+0x2c>
  }
  else {
    stat = osOK;
90005874:	2300      	movs	r3, #0
90005876:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
90005878:	687b      	ldr	r3, [r7, #4]
9000587a:	2b00      	cmp	r3, #0
9000587c:	d002      	beq.n	90005884 <osDelay+0x2c>
      vTaskDelay(ticks);
9000587e:	6878      	ldr	r0, [r7, #4]
90005880:	f000 ff92 	bl	900067a8 <vTaskDelay>
    }
  }

  return (stat);
90005884:	68fb      	ldr	r3, [r7, #12]
}
90005886:	4618      	mov	r0, r3
90005888:	3710      	adds	r7, #16
9000588a:	46bd      	mov	sp, r7
9000588c:	bd80      	pop	{r7, pc}
	...

90005890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
90005890:	b480      	push	{r7}
90005892:	b085      	sub	sp, #20
90005894:	af00      	add	r7, sp, #0
90005896:	60f8      	str	r0, [r7, #12]
90005898:	60b9      	str	r1, [r7, #8]
9000589a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000589c:	68fb      	ldr	r3, [r7, #12]
9000589e:	4a07      	ldr	r2, [pc, #28]	; (900058bc <vApplicationGetIdleTaskMemory+0x2c>)
900058a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
900058a2:	68bb      	ldr	r3, [r7, #8]
900058a4:	4a06      	ldr	r2, [pc, #24]	; (900058c0 <vApplicationGetIdleTaskMemory+0x30>)
900058a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
900058a8:	687b      	ldr	r3, [r7, #4]
900058aa:	2280      	movs	r2, #128	; 0x80
900058ac:	601a      	str	r2, [r3, #0]
}
900058ae:	bf00      	nop
900058b0:	3714      	adds	r7, #20
900058b2:	46bd      	mov	sp, r7
900058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900058b8:	4770      	bx	lr
900058ba:	bf00      	nop
900058bc:	24000190 	.word	0x24000190
900058c0:	2400024c 	.word	0x2400024c

900058c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
900058c4:	b480      	push	{r7}
900058c6:	b085      	sub	sp, #20
900058c8:	af00      	add	r7, sp, #0
900058ca:	60f8      	str	r0, [r7, #12]
900058cc:	60b9      	str	r1, [r7, #8]
900058ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
900058d0:	68fb      	ldr	r3, [r7, #12]
900058d2:	4a07      	ldr	r2, [pc, #28]	; (900058f0 <vApplicationGetTimerTaskMemory+0x2c>)
900058d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
900058d6:	68bb      	ldr	r3, [r7, #8]
900058d8:	4a06      	ldr	r2, [pc, #24]	; (900058f4 <vApplicationGetTimerTaskMemory+0x30>)
900058da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
900058dc:	687b      	ldr	r3, [r7, #4]
900058de:	f44f 7280 	mov.w	r2, #256	; 0x100
900058e2:	601a      	str	r2, [r3, #0]
}
900058e4:	bf00      	nop
900058e6:	3714      	adds	r7, #20
900058e8:	46bd      	mov	sp, r7
900058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
900058ee:	4770      	bx	lr
900058f0:	2400044c 	.word	0x2400044c
900058f4:	24000508 	.word	0x24000508

900058f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
900058f8:	b480      	push	{r7}
900058fa:	b083      	sub	sp, #12
900058fc:	af00      	add	r7, sp, #0
900058fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90005900:	687b      	ldr	r3, [r7, #4]
90005902:	f103 0208 	add.w	r2, r3, #8
90005906:	687b      	ldr	r3, [r7, #4]
90005908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000590a:	687b      	ldr	r3, [r7, #4]
9000590c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90005910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90005912:	687b      	ldr	r3, [r7, #4]
90005914:	f103 0208 	add.w	r2, r3, #8
90005918:	687b      	ldr	r3, [r7, #4]
9000591a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000591c:	687b      	ldr	r3, [r7, #4]
9000591e:	f103 0208 	add.w	r2, r3, #8
90005922:	687b      	ldr	r3, [r7, #4]
90005924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
90005926:	687b      	ldr	r3, [r7, #4]
90005928:	2200      	movs	r2, #0
9000592a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000592c:	bf00      	nop
9000592e:	370c      	adds	r7, #12
90005930:	46bd      	mov	sp, r7
90005932:	f85d 7b04 	ldr.w	r7, [sp], #4
90005936:	4770      	bx	lr

90005938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
90005938:	b480      	push	{r7}
9000593a:	b083      	sub	sp, #12
9000593c:	af00      	add	r7, sp, #0
9000593e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90005940:	687b      	ldr	r3, [r7, #4]
90005942:	2200      	movs	r2, #0
90005944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
90005946:	bf00      	nop
90005948:	370c      	adds	r7, #12
9000594a:	46bd      	mov	sp, r7
9000594c:	f85d 7b04 	ldr.w	r7, [sp], #4
90005950:	4770      	bx	lr

90005952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90005952:	b480      	push	{r7}
90005954:	b085      	sub	sp, #20
90005956:	af00      	add	r7, sp, #0
90005958:	6078      	str	r0, [r7, #4]
9000595a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
9000595c:	687b      	ldr	r3, [r7, #4]
9000595e:	685b      	ldr	r3, [r3, #4]
90005960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
90005962:	683b      	ldr	r3, [r7, #0]
90005964:	68fa      	ldr	r2, [r7, #12]
90005966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90005968:	68fb      	ldr	r3, [r7, #12]
9000596a:	689a      	ldr	r2, [r3, #8]
9000596c:	683b      	ldr	r3, [r7, #0]
9000596e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
90005970:	68fb      	ldr	r3, [r7, #12]
90005972:	689b      	ldr	r3, [r3, #8]
90005974:	683a      	ldr	r2, [r7, #0]
90005976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
90005978:	68fb      	ldr	r3, [r7, #12]
9000597a:	683a      	ldr	r2, [r7, #0]
9000597c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
9000597e:	683b      	ldr	r3, [r7, #0]
90005980:	687a      	ldr	r2, [r7, #4]
90005982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
90005984:	687b      	ldr	r3, [r7, #4]
90005986:	681b      	ldr	r3, [r3, #0]
90005988:	1c5a      	adds	r2, r3, #1
9000598a:	687b      	ldr	r3, [r7, #4]
9000598c:	601a      	str	r2, [r3, #0]
}
9000598e:	bf00      	nop
90005990:	3714      	adds	r7, #20
90005992:	46bd      	mov	sp, r7
90005994:	f85d 7b04 	ldr.w	r7, [sp], #4
90005998:	4770      	bx	lr

9000599a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000599a:	b480      	push	{r7}
9000599c:	b085      	sub	sp, #20
9000599e:	af00      	add	r7, sp, #0
900059a0:	6078      	str	r0, [r7, #4]
900059a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
900059a4:	683b      	ldr	r3, [r7, #0]
900059a6:	681b      	ldr	r3, [r3, #0]
900059a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
900059aa:	68bb      	ldr	r3, [r7, #8]
900059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900059b0:	d103      	bne.n	900059ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
900059b2:	687b      	ldr	r3, [r7, #4]
900059b4:	691b      	ldr	r3, [r3, #16]
900059b6:	60fb      	str	r3, [r7, #12]
900059b8:	e00c      	b.n	900059d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
900059ba:	687b      	ldr	r3, [r7, #4]
900059bc:	3308      	adds	r3, #8
900059be:	60fb      	str	r3, [r7, #12]
900059c0:	e002      	b.n	900059c8 <vListInsert+0x2e>
900059c2:	68fb      	ldr	r3, [r7, #12]
900059c4:	685b      	ldr	r3, [r3, #4]
900059c6:	60fb      	str	r3, [r7, #12]
900059c8:	68fb      	ldr	r3, [r7, #12]
900059ca:	685b      	ldr	r3, [r3, #4]
900059cc:	681b      	ldr	r3, [r3, #0]
900059ce:	68ba      	ldr	r2, [r7, #8]
900059d0:	429a      	cmp	r2, r3
900059d2:	d2f6      	bcs.n	900059c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
900059d4:	68fb      	ldr	r3, [r7, #12]
900059d6:	685a      	ldr	r2, [r3, #4]
900059d8:	683b      	ldr	r3, [r7, #0]
900059da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
900059dc:	683b      	ldr	r3, [r7, #0]
900059de:	685b      	ldr	r3, [r3, #4]
900059e0:	683a      	ldr	r2, [r7, #0]
900059e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
900059e4:	683b      	ldr	r3, [r7, #0]
900059e6:	68fa      	ldr	r2, [r7, #12]
900059e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
900059ea:	68fb      	ldr	r3, [r7, #12]
900059ec:	683a      	ldr	r2, [r7, #0]
900059ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
900059f0:	683b      	ldr	r3, [r7, #0]
900059f2:	687a      	ldr	r2, [r7, #4]
900059f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
900059f6:	687b      	ldr	r3, [r7, #4]
900059f8:	681b      	ldr	r3, [r3, #0]
900059fa:	1c5a      	adds	r2, r3, #1
900059fc:	687b      	ldr	r3, [r7, #4]
900059fe:	601a      	str	r2, [r3, #0]
}
90005a00:	bf00      	nop
90005a02:	3714      	adds	r7, #20
90005a04:	46bd      	mov	sp, r7
90005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a0a:	4770      	bx	lr

90005a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
90005a0c:	b480      	push	{r7}
90005a0e:	b085      	sub	sp, #20
90005a10:	af00      	add	r7, sp, #0
90005a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90005a14:	687b      	ldr	r3, [r7, #4]
90005a16:	691b      	ldr	r3, [r3, #16]
90005a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90005a1a:	687b      	ldr	r3, [r7, #4]
90005a1c:	685b      	ldr	r3, [r3, #4]
90005a1e:	687a      	ldr	r2, [r7, #4]
90005a20:	6892      	ldr	r2, [r2, #8]
90005a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90005a24:	687b      	ldr	r3, [r7, #4]
90005a26:	689b      	ldr	r3, [r3, #8]
90005a28:	687a      	ldr	r2, [r7, #4]
90005a2a:	6852      	ldr	r2, [r2, #4]
90005a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90005a2e:	68fb      	ldr	r3, [r7, #12]
90005a30:	685b      	ldr	r3, [r3, #4]
90005a32:	687a      	ldr	r2, [r7, #4]
90005a34:	429a      	cmp	r2, r3
90005a36:	d103      	bne.n	90005a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90005a38:	687b      	ldr	r3, [r7, #4]
90005a3a:	689a      	ldr	r2, [r3, #8]
90005a3c:	68fb      	ldr	r3, [r7, #12]
90005a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90005a40:	687b      	ldr	r3, [r7, #4]
90005a42:	2200      	movs	r2, #0
90005a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
90005a46:	68fb      	ldr	r3, [r7, #12]
90005a48:	681b      	ldr	r3, [r3, #0]
90005a4a:	1e5a      	subs	r2, r3, #1
90005a4c:	68fb      	ldr	r3, [r7, #12]
90005a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90005a50:	68fb      	ldr	r3, [r7, #12]
90005a52:	681b      	ldr	r3, [r3, #0]
}
90005a54:	4618      	mov	r0, r3
90005a56:	3714      	adds	r7, #20
90005a58:	46bd      	mov	sp, r7
90005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a5e:	4770      	bx	lr

90005a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
90005a60:	b580      	push	{r7, lr}
90005a62:	b084      	sub	sp, #16
90005a64:	af00      	add	r7, sp, #0
90005a66:	6078      	str	r0, [r7, #4]
90005a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
90005a6a:	687b      	ldr	r3, [r7, #4]
90005a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
90005a6e:	68fb      	ldr	r3, [r7, #12]
90005a70:	2b00      	cmp	r3, #0
90005a72:	d10a      	bne.n	90005a8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
90005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
90005a78:	f383 8811 	msr	BASEPRI, r3
90005a7c:	f3bf 8f6f 	isb	sy
90005a80:	f3bf 8f4f 	dsb	sy
90005a84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
90005a86:	bf00      	nop
90005a88:	e7fe      	b.n	90005a88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
90005a8a:	f002 f87b 	bl	90007b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90005a8e:	68fb      	ldr	r3, [r7, #12]
90005a90:	681a      	ldr	r2, [r3, #0]
90005a92:	68fb      	ldr	r3, [r7, #12]
90005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005a96:	68f9      	ldr	r1, [r7, #12]
90005a98:	6c09      	ldr	r1, [r1, #64]	; 0x40
90005a9a:	fb01 f303 	mul.w	r3, r1, r3
90005a9e:	441a      	add	r2, r3
90005aa0:	68fb      	ldr	r3, [r7, #12]
90005aa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90005aa4:	68fb      	ldr	r3, [r7, #12]
90005aa6:	2200      	movs	r2, #0
90005aa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
90005aaa:	68fb      	ldr	r3, [r7, #12]
90005aac:	681a      	ldr	r2, [r3, #0]
90005aae:	68fb      	ldr	r3, [r7, #12]
90005ab0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90005ab2:	68fb      	ldr	r3, [r7, #12]
90005ab4:	681a      	ldr	r2, [r3, #0]
90005ab6:	68fb      	ldr	r3, [r7, #12]
90005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005aba:	3b01      	subs	r3, #1
90005abc:	68f9      	ldr	r1, [r7, #12]
90005abe:	6c09      	ldr	r1, [r1, #64]	; 0x40
90005ac0:	fb01 f303 	mul.w	r3, r1, r3
90005ac4:	441a      	add	r2, r3
90005ac6:	68fb      	ldr	r3, [r7, #12]
90005ac8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
90005aca:	68fb      	ldr	r3, [r7, #12]
90005acc:	22ff      	movs	r2, #255	; 0xff
90005ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90005ad2:	68fb      	ldr	r3, [r7, #12]
90005ad4:	22ff      	movs	r2, #255	; 0xff
90005ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
90005ada:	683b      	ldr	r3, [r7, #0]
90005adc:	2b00      	cmp	r3, #0
90005ade:	d114      	bne.n	90005b0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90005ae0:	68fb      	ldr	r3, [r7, #12]
90005ae2:	691b      	ldr	r3, [r3, #16]
90005ae4:	2b00      	cmp	r3, #0
90005ae6:	d01a      	beq.n	90005b1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90005ae8:	68fb      	ldr	r3, [r7, #12]
90005aea:	3310      	adds	r3, #16
90005aec:	4618      	mov	r0, r3
90005aee:	f001 f929 	bl	90006d44 <xTaskRemoveFromEventList>
90005af2:	4603      	mov	r3, r0
90005af4:	2b00      	cmp	r3, #0
90005af6:	d012      	beq.n	90005b1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
90005af8:	4b0c      	ldr	r3, [pc, #48]	; (90005b2c <xQueueGenericReset+0xcc>)
90005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005afe:	601a      	str	r2, [r3, #0]
90005b00:	f3bf 8f4f 	dsb	sy
90005b04:	f3bf 8f6f 	isb	sy
90005b08:	e009      	b.n	90005b1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90005b0a:	68fb      	ldr	r3, [r7, #12]
90005b0c:	3310      	adds	r3, #16
90005b0e:	4618      	mov	r0, r3
90005b10:	f7ff fef2 	bl	900058f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90005b14:	68fb      	ldr	r3, [r7, #12]
90005b16:	3324      	adds	r3, #36	; 0x24
90005b18:	4618      	mov	r0, r3
90005b1a:	f7ff feed 	bl	900058f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
90005b1e:	f002 f861 	bl	90007be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
90005b22:	2301      	movs	r3, #1
}
90005b24:	4618      	mov	r0, r3
90005b26:	3710      	adds	r7, #16
90005b28:	46bd      	mov	sp, r7
90005b2a:	bd80      	pop	{r7, pc}
90005b2c:	e000ed04 	.word	0xe000ed04

90005b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
90005b30:	b580      	push	{r7, lr}
90005b32:	b08e      	sub	sp, #56	; 0x38
90005b34:	af02      	add	r7, sp, #8
90005b36:	60f8      	str	r0, [r7, #12]
90005b38:	60b9      	str	r1, [r7, #8]
90005b3a:	607a      	str	r2, [r7, #4]
90005b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90005b3e:	68fb      	ldr	r3, [r7, #12]
90005b40:	2b00      	cmp	r3, #0
90005b42:	d10a      	bne.n	90005b5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
90005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
90005b48:	f383 8811 	msr	BASEPRI, r3
90005b4c:	f3bf 8f6f 	isb	sy
90005b50:	f3bf 8f4f 	dsb	sy
90005b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
90005b56:	bf00      	nop
90005b58:	e7fe      	b.n	90005b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
90005b5a:	683b      	ldr	r3, [r7, #0]
90005b5c:	2b00      	cmp	r3, #0
90005b5e:	d10a      	bne.n	90005b76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
90005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
90005b64:	f383 8811 	msr	BASEPRI, r3
90005b68:	f3bf 8f6f 	isb	sy
90005b6c:	f3bf 8f4f 	dsb	sy
90005b70:	627b      	str	r3, [r7, #36]	; 0x24
}
90005b72:	bf00      	nop
90005b74:	e7fe      	b.n	90005b74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
90005b76:	687b      	ldr	r3, [r7, #4]
90005b78:	2b00      	cmp	r3, #0
90005b7a:	d002      	beq.n	90005b82 <xQueueGenericCreateStatic+0x52>
90005b7c:	68bb      	ldr	r3, [r7, #8]
90005b7e:	2b00      	cmp	r3, #0
90005b80:	d001      	beq.n	90005b86 <xQueueGenericCreateStatic+0x56>
90005b82:	2301      	movs	r3, #1
90005b84:	e000      	b.n	90005b88 <xQueueGenericCreateStatic+0x58>
90005b86:	2300      	movs	r3, #0
90005b88:	2b00      	cmp	r3, #0
90005b8a:	d10a      	bne.n	90005ba2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
90005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
90005b90:	f383 8811 	msr	BASEPRI, r3
90005b94:	f3bf 8f6f 	isb	sy
90005b98:	f3bf 8f4f 	dsb	sy
90005b9c:	623b      	str	r3, [r7, #32]
}
90005b9e:	bf00      	nop
90005ba0:	e7fe      	b.n	90005ba0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
90005ba2:	687b      	ldr	r3, [r7, #4]
90005ba4:	2b00      	cmp	r3, #0
90005ba6:	d102      	bne.n	90005bae <xQueueGenericCreateStatic+0x7e>
90005ba8:	68bb      	ldr	r3, [r7, #8]
90005baa:	2b00      	cmp	r3, #0
90005bac:	d101      	bne.n	90005bb2 <xQueueGenericCreateStatic+0x82>
90005bae:	2301      	movs	r3, #1
90005bb0:	e000      	b.n	90005bb4 <xQueueGenericCreateStatic+0x84>
90005bb2:	2300      	movs	r3, #0
90005bb4:	2b00      	cmp	r3, #0
90005bb6:	d10a      	bne.n	90005bce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
90005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
90005bbc:	f383 8811 	msr	BASEPRI, r3
90005bc0:	f3bf 8f6f 	isb	sy
90005bc4:	f3bf 8f4f 	dsb	sy
90005bc8:	61fb      	str	r3, [r7, #28]
}
90005bca:	bf00      	nop
90005bcc:	e7fe      	b.n	90005bcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
90005bce:	2350      	movs	r3, #80	; 0x50
90005bd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
90005bd2:	697b      	ldr	r3, [r7, #20]
90005bd4:	2b50      	cmp	r3, #80	; 0x50
90005bd6:	d00a      	beq.n	90005bee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
90005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
90005bdc:	f383 8811 	msr	BASEPRI, r3
90005be0:	f3bf 8f6f 	isb	sy
90005be4:	f3bf 8f4f 	dsb	sy
90005be8:	61bb      	str	r3, [r7, #24]
}
90005bea:	bf00      	nop
90005bec:	e7fe      	b.n	90005bec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90005bee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90005bf0:	683b      	ldr	r3, [r7, #0]
90005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
90005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005bf6:	2b00      	cmp	r3, #0
90005bf8:	d00d      	beq.n	90005c16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005bfc:	2201      	movs	r2, #1
90005bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90005c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
90005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c08:	9300      	str	r3, [sp, #0]
90005c0a:	4613      	mov	r3, r2
90005c0c:	687a      	ldr	r2, [r7, #4]
90005c0e:	68b9      	ldr	r1, [r7, #8]
90005c10:	68f8      	ldr	r0, [r7, #12]
90005c12:	f000 f805 	bl	90005c20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
90005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
90005c18:	4618      	mov	r0, r3
90005c1a:	3730      	adds	r7, #48	; 0x30
90005c1c:	46bd      	mov	sp, r7
90005c1e:	bd80      	pop	{r7, pc}

90005c20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
90005c20:	b580      	push	{r7, lr}
90005c22:	b084      	sub	sp, #16
90005c24:	af00      	add	r7, sp, #0
90005c26:	60f8      	str	r0, [r7, #12]
90005c28:	60b9      	str	r1, [r7, #8]
90005c2a:	607a      	str	r2, [r7, #4]
90005c2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
90005c2e:	68bb      	ldr	r3, [r7, #8]
90005c30:	2b00      	cmp	r3, #0
90005c32:	d103      	bne.n	90005c3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90005c34:	69bb      	ldr	r3, [r7, #24]
90005c36:	69ba      	ldr	r2, [r7, #24]
90005c38:	601a      	str	r2, [r3, #0]
90005c3a:	e002      	b.n	90005c42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
90005c3c:	69bb      	ldr	r3, [r7, #24]
90005c3e:	687a      	ldr	r2, [r7, #4]
90005c40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
90005c42:	69bb      	ldr	r3, [r7, #24]
90005c44:	68fa      	ldr	r2, [r7, #12]
90005c46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
90005c48:	69bb      	ldr	r3, [r7, #24]
90005c4a:	68ba      	ldr	r2, [r7, #8]
90005c4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
90005c4e:	2101      	movs	r1, #1
90005c50:	69b8      	ldr	r0, [r7, #24]
90005c52:	f7ff ff05 	bl	90005a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
90005c56:	69bb      	ldr	r3, [r7, #24]
90005c58:	78fa      	ldrb	r2, [r7, #3]
90005c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
90005c5e:	bf00      	nop
90005c60:	3710      	adds	r7, #16
90005c62:	46bd      	mov	sp, r7
90005c64:	bd80      	pop	{r7, pc}
	...

90005c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
90005c68:	b580      	push	{r7, lr}
90005c6a:	b08e      	sub	sp, #56	; 0x38
90005c6c:	af00      	add	r7, sp, #0
90005c6e:	60f8      	str	r0, [r7, #12]
90005c70:	60b9      	str	r1, [r7, #8]
90005c72:	607a      	str	r2, [r7, #4]
90005c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
90005c76:	2300      	movs	r3, #0
90005c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90005c7a:	68fb      	ldr	r3, [r7, #12]
90005c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
90005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005c80:	2b00      	cmp	r3, #0
90005c82:	d10a      	bne.n	90005c9a <xQueueGenericSend+0x32>
	__asm volatile
90005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
90005c88:	f383 8811 	msr	BASEPRI, r3
90005c8c:	f3bf 8f6f 	isb	sy
90005c90:	f3bf 8f4f 	dsb	sy
90005c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
90005c96:	bf00      	nop
90005c98:	e7fe      	b.n	90005c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90005c9a:	68bb      	ldr	r3, [r7, #8]
90005c9c:	2b00      	cmp	r3, #0
90005c9e:	d103      	bne.n	90005ca8 <xQueueGenericSend+0x40>
90005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005ca4:	2b00      	cmp	r3, #0
90005ca6:	d101      	bne.n	90005cac <xQueueGenericSend+0x44>
90005ca8:	2301      	movs	r3, #1
90005caa:	e000      	b.n	90005cae <xQueueGenericSend+0x46>
90005cac:	2300      	movs	r3, #0
90005cae:	2b00      	cmp	r3, #0
90005cb0:	d10a      	bne.n	90005cc8 <xQueueGenericSend+0x60>
	__asm volatile
90005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
90005cb6:	f383 8811 	msr	BASEPRI, r3
90005cba:	f3bf 8f6f 	isb	sy
90005cbe:	f3bf 8f4f 	dsb	sy
90005cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
90005cc4:	bf00      	nop
90005cc6:	e7fe      	b.n	90005cc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90005cc8:	683b      	ldr	r3, [r7, #0]
90005cca:	2b02      	cmp	r3, #2
90005ccc:	d103      	bne.n	90005cd6 <xQueueGenericSend+0x6e>
90005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005cd2:	2b01      	cmp	r3, #1
90005cd4:	d101      	bne.n	90005cda <xQueueGenericSend+0x72>
90005cd6:	2301      	movs	r3, #1
90005cd8:	e000      	b.n	90005cdc <xQueueGenericSend+0x74>
90005cda:	2300      	movs	r3, #0
90005cdc:	2b00      	cmp	r3, #0
90005cde:	d10a      	bne.n	90005cf6 <xQueueGenericSend+0x8e>
	__asm volatile
90005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
90005ce4:	f383 8811 	msr	BASEPRI, r3
90005ce8:	f3bf 8f6f 	isb	sy
90005cec:	f3bf 8f4f 	dsb	sy
90005cf0:	623b      	str	r3, [r7, #32]
}
90005cf2:	bf00      	nop
90005cf4:	e7fe      	b.n	90005cf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90005cf6:	f001 f9e7 	bl	900070c8 <xTaskGetSchedulerState>
90005cfa:	4603      	mov	r3, r0
90005cfc:	2b00      	cmp	r3, #0
90005cfe:	d102      	bne.n	90005d06 <xQueueGenericSend+0x9e>
90005d00:	687b      	ldr	r3, [r7, #4]
90005d02:	2b00      	cmp	r3, #0
90005d04:	d101      	bne.n	90005d0a <xQueueGenericSend+0xa2>
90005d06:	2301      	movs	r3, #1
90005d08:	e000      	b.n	90005d0c <xQueueGenericSend+0xa4>
90005d0a:	2300      	movs	r3, #0
90005d0c:	2b00      	cmp	r3, #0
90005d0e:	d10a      	bne.n	90005d26 <xQueueGenericSend+0xbe>
	__asm volatile
90005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
90005d14:	f383 8811 	msr	BASEPRI, r3
90005d18:	f3bf 8f6f 	isb	sy
90005d1c:	f3bf 8f4f 	dsb	sy
90005d20:	61fb      	str	r3, [r7, #28]
}
90005d22:	bf00      	nop
90005d24:	e7fe      	b.n	90005d24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90005d26:	f001 ff2d 	bl	90007b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005d32:	429a      	cmp	r2, r3
90005d34:	d302      	bcc.n	90005d3c <xQueueGenericSend+0xd4>
90005d36:	683b      	ldr	r3, [r7, #0]
90005d38:	2b02      	cmp	r3, #2
90005d3a:	d129      	bne.n	90005d90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90005d3c:	683a      	ldr	r2, [r7, #0]
90005d3e:	68b9      	ldr	r1, [r7, #8]
90005d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005d42:	f000 fa0b 	bl	9000615c <prvCopyDataToQueue>
90005d46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005d4c:	2b00      	cmp	r3, #0
90005d4e:	d010      	beq.n	90005d72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005d52:	3324      	adds	r3, #36	; 0x24
90005d54:	4618      	mov	r0, r3
90005d56:	f000 fff5 	bl	90006d44 <xTaskRemoveFromEventList>
90005d5a:	4603      	mov	r3, r0
90005d5c:	2b00      	cmp	r3, #0
90005d5e:	d013      	beq.n	90005d88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
90005d60:	4b3f      	ldr	r3, [pc, #252]	; (90005e60 <xQueueGenericSend+0x1f8>)
90005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005d66:	601a      	str	r2, [r3, #0]
90005d68:	f3bf 8f4f 	dsb	sy
90005d6c:	f3bf 8f6f 	isb	sy
90005d70:	e00a      	b.n	90005d88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
90005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005d74:	2b00      	cmp	r3, #0
90005d76:	d007      	beq.n	90005d88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
90005d78:	4b39      	ldr	r3, [pc, #228]	; (90005e60 <xQueueGenericSend+0x1f8>)
90005d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005d7e:	601a      	str	r2, [r3, #0]
90005d80:	f3bf 8f4f 	dsb	sy
90005d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
90005d88:	f001 ff2c 	bl	90007be4 <vPortExitCritical>
				return pdPASS;
90005d8c:	2301      	movs	r3, #1
90005d8e:	e063      	b.n	90005e58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90005d90:	687b      	ldr	r3, [r7, #4]
90005d92:	2b00      	cmp	r3, #0
90005d94:	d103      	bne.n	90005d9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
90005d96:	f001 ff25 	bl	90007be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
90005d9a:	2300      	movs	r3, #0
90005d9c:	e05c      	b.n	90005e58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
90005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005da0:	2b00      	cmp	r3, #0
90005da2:	d106      	bne.n	90005db2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90005da4:	f107 0314 	add.w	r3, r7, #20
90005da8:	4618      	mov	r0, r3
90005daa:	f001 f82f 	bl	90006e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90005dae:	2301      	movs	r3, #1
90005db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90005db2:	f001 ff17 	bl	90007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
90005db6:	f000 fd9b 	bl	900068f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90005dba:	f001 fee3 	bl	90007b84 <vPortEnterCritical>
90005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90005dc4:	b25b      	sxtb	r3, r3
90005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005dca:	d103      	bne.n	90005dd4 <xQueueGenericSend+0x16c>
90005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dce:	2200      	movs	r2, #0
90005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005dda:	b25b      	sxtb	r3, r3
90005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005de0:	d103      	bne.n	90005dea <xQueueGenericSend+0x182>
90005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005de4:	2200      	movs	r2, #0
90005de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90005dea:	f001 fefb 	bl	90007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90005dee:	1d3a      	adds	r2, r7, #4
90005df0:	f107 0314 	add.w	r3, r7, #20
90005df4:	4611      	mov	r1, r2
90005df6:	4618      	mov	r0, r3
90005df8:	f001 f81e 	bl	90006e38 <xTaskCheckForTimeOut>
90005dfc:	4603      	mov	r3, r0
90005dfe:	2b00      	cmp	r3, #0
90005e00:	d124      	bne.n	90005e4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
90005e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005e04:	f000 faa2 	bl	9000634c <prvIsQueueFull>
90005e08:	4603      	mov	r3, r0
90005e0a:	2b00      	cmp	r3, #0
90005e0c:	d018      	beq.n	90005e40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
90005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90005e10:	3310      	adds	r3, #16
90005e12:	687a      	ldr	r2, [r7, #4]
90005e14:	4611      	mov	r1, r2
90005e16:	4618      	mov	r0, r3
90005e18:	f000 ff44 	bl	90006ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
90005e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005e1e:	f000 fa2d 	bl	9000627c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
90005e22:	f000 fd73 	bl	9000690c <xTaskResumeAll>
90005e26:	4603      	mov	r3, r0
90005e28:	2b00      	cmp	r3, #0
90005e2a:	f47f af7c 	bne.w	90005d26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
90005e2e:	4b0c      	ldr	r3, [pc, #48]	; (90005e60 <xQueueGenericSend+0x1f8>)
90005e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005e34:	601a      	str	r2, [r3, #0]
90005e36:	f3bf 8f4f 	dsb	sy
90005e3a:	f3bf 8f6f 	isb	sy
90005e3e:	e772      	b.n	90005d26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
90005e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005e42:	f000 fa1b 	bl	9000627c <prvUnlockQueue>
				( void ) xTaskResumeAll();
90005e46:	f000 fd61 	bl	9000690c <xTaskResumeAll>
90005e4a:	e76c      	b.n	90005d26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
90005e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
90005e4e:	f000 fa15 	bl	9000627c <prvUnlockQueue>
			( void ) xTaskResumeAll();
90005e52:	f000 fd5b 	bl	9000690c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
90005e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
90005e58:	4618      	mov	r0, r3
90005e5a:	3738      	adds	r7, #56	; 0x38
90005e5c:	46bd      	mov	sp, r7
90005e5e:	bd80      	pop	{r7, pc}
90005e60:	e000ed04 	.word	0xe000ed04

90005e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
90005e64:	b580      	push	{r7, lr}
90005e66:	b090      	sub	sp, #64	; 0x40
90005e68:	af00      	add	r7, sp, #0
90005e6a:	60f8      	str	r0, [r7, #12]
90005e6c:	60b9      	str	r1, [r7, #8]
90005e6e:	607a      	str	r2, [r7, #4]
90005e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
90005e72:	68fb      	ldr	r3, [r7, #12]
90005e74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
90005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005e78:	2b00      	cmp	r3, #0
90005e7a:	d10a      	bne.n	90005e92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
90005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
90005e80:	f383 8811 	msr	BASEPRI, r3
90005e84:	f3bf 8f6f 	isb	sy
90005e88:	f3bf 8f4f 	dsb	sy
90005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
90005e8e:	bf00      	nop
90005e90:	e7fe      	b.n	90005e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90005e92:	68bb      	ldr	r3, [r7, #8]
90005e94:	2b00      	cmp	r3, #0
90005e96:	d103      	bne.n	90005ea0 <xQueueGenericSendFromISR+0x3c>
90005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005e9c:	2b00      	cmp	r3, #0
90005e9e:	d101      	bne.n	90005ea4 <xQueueGenericSendFromISR+0x40>
90005ea0:	2301      	movs	r3, #1
90005ea2:	e000      	b.n	90005ea6 <xQueueGenericSendFromISR+0x42>
90005ea4:	2300      	movs	r3, #0
90005ea6:	2b00      	cmp	r3, #0
90005ea8:	d10a      	bne.n	90005ec0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
90005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
90005eae:	f383 8811 	msr	BASEPRI, r3
90005eb2:	f3bf 8f6f 	isb	sy
90005eb6:	f3bf 8f4f 	dsb	sy
90005eba:	627b      	str	r3, [r7, #36]	; 0x24
}
90005ebc:	bf00      	nop
90005ebe:	e7fe      	b.n	90005ebe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90005ec0:	683b      	ldr	r3, [r7, #0]
90005ec2:	2b02      	cmp	r3, #2
90005ec4:	d103      	bne.n	90005ece <xQueueGenericSendFromISR+0x6a>
90005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005eca:	2b01      	cmp	r3, #1
90005ecc:	d101      	bne.n	90005ed2 <xQueueGenericSendFromISR+0x6e>
90005ece:	2301      	movs	r3, #1
90005ed0:	e000      	b.n	90005ed4 <xQueueGenericSendFromISR+0x70>
90005ed2:	2300      	movs	r3, #0
90005ed4:	2b00      	cmp	r3, #0
90005ed6:	d10a      	bne.n	90005eee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
90005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
90005edc:	f383 8811 	msr	BASEPRI, r3
90005ee0:	f3bf 8f6f 	isb	sy
90005ee4:	f3bf 8f4f 	dsb	sy
90005ee8:	623b      	str	r3, [r7, #32]
}
90005eea:	bf00      	nop
90005eec:	e7fe      	b.n	90005eec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90005eee:	f001 ff2b 	bl	90007d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
90005ef2:	f3ef 8211 	mrs	r2, BASEPRI
90005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
90005efa:	f383 8811 	msr	BASEPRI, r3
90005efe:	f3bf 8f6f 	isb	sy
90005f02:	f3bf 8f4f 	dsb	sy
90005f06:	61fa      	str	r2, [r7, #28]
90005f08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
90005f0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90005f0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005f16:	429a      	cmp	r2, r3
90005f18:	d302      	bcc.n	90005f20 <xQueueGenericSendFromISR+0xbc>
90005f1a:	683b      	ldr	r3, [r7, #0]
90005f1c:	2b02      	cmp	r3, #2
90005f1e:	d12f      	bne.n	90005f80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90005f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
90005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90005f30:	683a      	ldr	r2, [r7, #0]
90005f32:	68b9      	ldr	r1, [r7, #8]
90005f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
90005f36:	f000 f911 	bl	9000615c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90005f3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
90005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005f42:	d112      	bne.n	90005f6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005f48:	2b00      	cmp	r3, #0
90005f4a:	d016      	beq.n	90005f7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f4e:	3324      	adds	r3, #36	; 0x24
90005f50:	4618      	mov	r0, r3
90005f52:	f000 fef7 	bl	90006d44 <xTaskRemoveFromEventList>
90005f56:	4603      	mov	r3, r0
90005f58:	2b00      	cmp	r3, #0
90005f5a:	d00e      	beq.n	90005f7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
90005f5c:	687b      	ldr	r3, [r7, #4]
90005f5e:	2b00      	cmp	r3, #0
90005f60:	d00b      	beq.n	90005f7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
90005f62:	687b      	ldr	r3, [r7, #4]
90005f64:	2201      	movs	r2, #1
90005f66:	601a      	str	r2, [r3, #0]
90005f68:	e007      	b.n	90005f7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90005f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
90005f6e:	3301      	adds	r3, #1
90005f70:	b2db      	uxtb	r3, r3
90005f72:	b25a      	sxtb	r2, r3
90005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
90005f7a:	2301      	movs	r3, #1
90005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
90005f7e:	e001      	b.n	90005f84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
90005f80:	2300      	movs	r3, #0
90005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
90005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90005f86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
90005f88:	697b      	ldr	r3, [r7, #20]
90005f8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
90005f8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
90005f92:	4618      	mov	r0, r3
90005f94:	3740      	adds	r7, #64	; 0x40
90005f96:	46bd      	mov	sp, r7
90005f98:	bd80      	pop	{r7, pc}
	...

90005f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
90005f9c:	b580      	push	{r7, lr}
90005f9e:	b08c      	sub	sp, #48	; 0x30
90005fa0:	af00      	add	r7, sp, #0
90005fa2:	60f8      	str	r0, [r7, #12]
90005fa4:	60b9      	str	r1, [r7, #8]
90005fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
90005fa8:	2300      	movs	r3, #0
90005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90005fac:	68fb      	ldr	r3, [r7, #12]
90005fae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
90005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005fb2:	2b00      	cmp	r3, #0
90005fb4:	d10a      	bne.n	90005fcc <xQueueReceive+0x30>
	__asm volatile
90005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
90005fba:	f383 8811 	msr	BASEPRI, r3
90005fbe:	f3bf 8f6f 	isb	sy
90005fc2:	f3bf 8f4f 	dsb	sy
90005fc6:	623b      	str	r3, [r7, #32]
}
90005fc8:	bf00      	nop
90005fca:	e7fe      	b.n	90005fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90005fcc:	68bb      	ldr	r3, [r7, #8]
90005fce:	2b00      	cmp	r3, #0
90005fd0:	d103      	bne.n	90005fda <xQueueReceive+0x3e>
90005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005fd6:	2b00      	cmp	r3, #0
90005fd8:	d101      	bne.n	90005fde <xQueueReceive+0x42>
90005fda:	2301      	movs	r3, #1
90005fdc:	e000      	b.n	90005fe0 <xQueueReceive+0x44>
90005fde:	2300      	movs	r3, #0
90005fe0:	2b00      	cmp	r3, #0
90005fe2:	d10a      	bne.n	90005ffa <xQueueReceive+0x5e>
	__asm volatile
90005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
90005fe8:	f383 8811 	msr	BASEPRI, r3
90005fec:	f3bf 8f6f 	isb	sy
90005ff0:	f3bf 8f4f 	dsb	sy
90005ff4:	61fb      	str	r3, [r7, #28]
}
90005ff6:	bf00      	nop
90005ff8:	e7fe      	b.n	90005ff8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90005ffa:	f001 f865 	bl	900070c8 <xTaskGetSchedulerState>
90005ffe:	4603      	mov	r3, r0
90006000:	2b00      	cmp	r3, #0
90006002:	d102      	bne.n	9000600a <xQueueReceive+0x6e>
90006004:	687b      	ldr	r3, [r7, #4]
90006006:	2b00      	cmp	r3, #0
90006008:	d101      	bne.n	9000600e <xQueueReceive+0x72>
9000600a:	2301      	movs	r3, #1
9000600c:	e000      	b.n	90006010 <xQueueReceive+0x74>
9000600e:	2300      	movs	r3, #0
90006010:	2b00      	cmp	r3, #0
90006012:	d10a      	bne.n	9000602a <xQueueReceive+0x8e>
	__asm volatile
90006014:	f04f 0350 	mov.w	r3, #80	; 0x50
90006018:	f383 8811 	msr	BASEPRI, r3
9000601c:	f3bf 8f6f 	isb	sy
90006020:	f3bf 8f4f 	dsb	sy
90006024:	61bb      	str	r3, [r7, #24]
}
90006026:	bf00      	nop
90006028:	e7fe      	b.n	90006028 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000602a:	f001 fdab 	bl	90007b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006036:	2b00      	cmp	r3, #0
90006038:	d01f      	beq.n	9000607a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
9000603a:	68b9      	ldr	r1, [r7, #8]
9000603c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000603e:	f000 f8f7 	bl	90006230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006044:	1e5a      	subs	r2, r3, #1
90006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000604c:	691b      	ldr	r3, [r3, #16]
9000604e:	2b00      	cmp	r3, #0
90006050:	d00f      	beq.n	90006072 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006054:	3310      	adds	r3, #16
90006056:	4618      	mov	r0, r3
90006058:	f000 fe74 	bl	90006d44 <xTaskRemoveFromEventList>
9000605c:	4603      	mov	r3, r0
9000605e:	2b00      	cmp	r3, #0
90006060:	d007      	beq.n	90006072 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
90006062:	4b3d      	ldr	r3, [pc, #244]	; (90006158 <xQueueReceive+0x1bc>)
90006064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006068:	601a      	str	r2, [r3, #0]
9000606a:	f3bf 8f4f 	dsb	sy
9000606e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
90006072:	f001 fdb7 	bl	90007be4 <vPortExitCritical>
				return pdPASS;
90006076:	2301      	movs	r3, #1
90006078:	e069      	b.n	9000614e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
9000607a:	687b      	ldr	r3, [r7, #4]
9000607c:	2b00      	cmp	r3, #0
9000607e:	d103      	bne.n	90006088 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
90006080:	f001 fdb0 	bl	90007be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90006084:	2300      	movs	r3, #0
90006086:	e062      	b.n	9000614e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
90006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000608a:	2b00      	cmp	r3, #0
9000608c:	d106      	bne.n	9000609c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
9000608e:	f107 0310 	add.w	r3, r7, #16
90006092:	4618      	mov	r0, r3
90006094:	f000 feba 	bl	90006e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90006098:	2301      	movs	r3, #1
9000609a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
9000609c:	f001 fda2 	bl	90007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
900060a0:	f000 fc26 	bl	900068f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900060a4:	f001 fd6e 	bl	90007b84 <vPortEnterCritical>
900060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900060ae:	b25b      	sxtb	r3, r3
900060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900060b4:	d103      	bne.n	900060be <xQueueReceive+0x122>
900060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060b8:	2200      	movs	r2, #0
900060ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
900060c4:	b25b      	sxtb	r3, r3
900060c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900060ca:	d103      	bne.n	900060d4 <xQueueReceive+0x138>
900060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060ce:	2200      	movs	r2, #0
900060d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
900060d4:	f001 fd86 	bl	90007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900060d8:	1d3a      	adds	r2, r7, #4
900060da:	f107 0310 	add.w	r3, r7, #16
900060de:	4611      	mov	r1, r2
900060e0:	4618      	mov	r0, r3
900060e2:	f000 fea9 	bl	90006e38 <xTaskCheckForTimeOut>
900060e6:	4603      	mov	r3, r0
900060e8:	2b00      	cmp	r3, #0
900060ea:	d123      	bne.n	90006134 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
900060ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900060ee:	f000 f917 	bl	90006320 <prvIsQueueEmpty>
900060f2:	4603      	mov	r3, r0
900060f4:	2b00      	cmp	r3, #0
900060f6:	d017      	beq.n	90006128 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900060fa:	3324      	adds	r3, #36	; 0x24
900060fc:	687a      	ldr	r2, [r7, #4]
900060fe:	4611      	mov	r1, r2
90006100:	4618      	mov	r0, r3
90006102:	f000 fdcf 	bl	90006ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006108:	f000 f8b8 	bl	9000627c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
9000610c:	f000 fbfe 	bl	9000690c <xTaskResumeAll>
90006110:	4603      	mov	r3, r0
90006112:	2b00      	cmp	r3, #0
90006114:	d189      	bne.n	9000602a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
90006116:	4b10      	ldr	r3, [pc, #64]	; (90006158 <xQueueReceive+0x1bc>)
90006118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000611c:	601a      	str	r2, [r3, #0]
9000611e:	f3bf 8f4f 	dsb	sy
90006122:	f3bf 8f6f 	isb	sy
90006126:	e780      	b.n	9000602a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
90006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000612a:	f000 f8a7 	bl	9000627c <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000612e:	f000 fbed 	bl	9000690c <xTaskResumeAll>
90006132:	e77a      	b.n	9000602a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
90006134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006136:	f000 f8a1 	bl	9000627c <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000613a:	f000 fbe7 	bl	9000690c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
9000613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006140:	f000 f8ee 	bl	90006320 <prvIsQueueEmpty>
90006144:	4603      	mov	r3, r0
90006146:	2b00      	cmp	r3, #0
90006148:	f43f af6f 	beq.w	9000602a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
9000614c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
9000614e:	4618      	mov	r0, r3
90006150:	3730      	adds	r7, #48	; 0x30
90006152:	46bd      	mov	sp, r7
90006154:	bd80      	pop	{r7, pc}
90006156:	bf00      	nop
90006158:	e000ed04 	.word	0xe000ed04

9000615c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000615c:	b580      	push	{r7, lr}
9000615e:	b086      	sub	sp, #24
90006160:	af00      	add	r7, sp, #0
90006162:	60f8      	str	r0, [r7, #12]
90006164:	60b9      	str	r1, [r7, #8]
90006166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
90006168:	2300      	movs	r3, #0
9000616a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000616c:	68fb      	ldr	r3, [r7, #12]
9000616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
90006172:	68fb      	ldr	r3, [r7, #12]
90006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006176:	2b00      	cmp	r3, #0
90006178:	d10d      	bne.n	90006196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000617a:	68fb      	ldr	r3, [r7, #12]
9000617c:	681b      	ldr	r3, [r3, #0]
9000617e:	2b00      	cmp	r3, #0
90006180:	d14d      	bne.n	9000621e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
90006182:	68fb      	ldr	r3, [r7, #12]
90006184:	689b      	ldr	r3, [r3, #8]
90006186:	4618      	mov	r0, r3
90006188:	f000 ffbc 	bl	90007104 <xTaskPriorityDisinherit>
9000618c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000618e:	68fb      	ldr	r3, [r7, #12]
90006190:	2200      	movs	r2, #0
90006192:	609a      	str	r2, [r3, #8]
90006194:	e043      	b.n	9000621e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
90006196:	687b      	ldr	r3, [r7, #4]
90006198:	2b00      	cmp	r3, #0
9000619a:	d119      	bne.n	900061d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000619c:	68fb      	ldr	r3, [r7, #12]
9000619e:	6858      	ldr	r0, [r3, #4]
900061a0:	68fb      	ldr	r3, [r7, #12]
900061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900061a4:	461a      	mov	r2, r3
900061a6:	68b9      	ldr	r1, [r7, #8]
900061a8:	f002 f91b 	bl	900083e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900061ac:	68fb      	ldr	r3, [r7, #12]
900061ae:	685a      	ldr	r2, [r3, #4]
900061b0:	68fb      	ldr	r3, [r7, #12]
900061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900061b4:	441a      	add	r2, r3
900061b6:	68fb      	ldr	r3, [r7, #12]
900061b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
900061ba:	68fb      	ldr	r3, [r7, #12]
900061bc:	685a      	ldr	r2, [r3, #4]
900061be:	68fb      	ldr	r3, [r7, #12]
900061c0:	689b      	ldr	r3, [r3, #8]
900061c2:	429a      	cmp	r2, r3
900061c4:	d32b      	bcc.n	9000621e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
900061c6:	68fb      	ldr	r3, [r7, #12]
900061c8:	681a      	ldr	r2, [r3, #0]
900061ca:	68fb      	ldr	r3, [r7, #12]
900061cc:	605a      	str	r2, [r3, #4]
900061ce:	e026      	b.n	9000621e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
900061d0:	68fb      	ldr	r3, [r7, #12]
900061d2:	68d8      	ldr	r0, [r3, #12]
900061d4:	68fb      	ldr	r3, [r7, #12]
900061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900061d8:	461a      	mov	r2, r3
900061da:	68b9      	ldr	r1, [r7, #8]
900061dc:	f002 f901 	bl	900083e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
900061e0:	68fb      	ldr	r3, [r7, #12]
900061e2:	68da      	ldr	r2, [r3, #12]
900061e4:	68fb      	ldr	r3, [r7, #12]
900061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900061e8:	425b      	negs	r3, r3
900061ea:	441a      	add	r2, r3
900061ec:	68fb      	ldr	r3, [r7, #12]
900061ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
900061f0:	68fb      	ldr	r3, [r7, #12]
900061f2:	68da      	ldr	r2, [r3, #12]
900061f4:	68fb      	ldr	r3, [r7, #12]
900061f6:	681b      	ldr	r3, [r3, #0]
900061f8:	429a      	cmp	r2, r3
900061fa:	d207      	bcs.n	9000620c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
900061fc:	68fb      	ldr	r3, [r7, #12]
900061fe:	689a      	ldr	r2, [r3, #8]
90006200:	68fb      	ldr	r3, [r7, #12]
90006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006204:	425b      	negs	r3, r3
90006206:	441a      	add	r2, r3
90006208:	68fb      	ldr	r3, [r7, #12]
9000620a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
9000620c:	687b      	ldr	r3, [r7, #4]
9000620e:	2b02      	cmp	r3, #2
90006210:	d105      	bne.n	9000621e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006212:	693b      	ldr	r3, [r7, #16]
90006214:	2b00      	cmp	r3, #0
90006216:	d002      	beq.n	9000621e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
90006218:	693b      	ldr	r3, [r7, #16]
9000621a:	3b01      	subs	r3, #1
9000621c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000621e:	693b      	ldr	r3, [r7, #16]
90006220:	1c5a      	adds	r2, r3, #1
90006222:	68fb      	ldr	r3, [r7, #12]
90006224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
90006226:	697b      	ldr	r3, [r7, #20]
}
90006228:	4618      	mov	r0, r3
9000622a:	3718      	adds	r7, #24
9000622c:	46bd      	mov	sp, r7
9000622e:	bd80      	pop	{r7, pc}

90006230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
90006230:	b580      	push	{r7, lr}
90006232:	b082      	sub	sp, #8
90006234:	af00      	add	r7, sp, #0
90006236:	6078      	str	r0, [r7, #4]
90006238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000623a:	687b      	ldr	r3, [r7, #4]
9000623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000623e:	2b00      	cmp	r3, #0
90006240:	d018      	beq.n	90006274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90006242:	687b      	ldr	r3, [r7, #4]
90006244:	68da      	ldr	r2, [r3, #12]
90006246:	687b      	ldr	r3, [r7, #4]
90006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000624a:	441a      	add	r2, r3
9000624c:	687b      	ldr	r3, [r7, #4]
9000624e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90006250:	687b      	ldr	r3, [r7, #4]
90006252:	68da      	ldr	r2, [r3, #12]
90006254:	687b      	ldr	r3, [r7, #4]
90006256:	689b      	ldr	r3, [r3, #8]
90006258:	429a      	cmp	r2, r3
9000625a:	d303      	bcc.n	90006264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000625c:	687b      	ldr	r3, [r7, #4]
9000625e:	681a      	ldr	r2, [r3, #0]
90006260:	687b      	ldr	r3, [r7, #4]
90006262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90006264:	687b      	ldr	r3, [r7, #4]
90006266:	68d9      	ldr	r1, [r3, #12]
90006268:	687b      	ldr	r3, [r7, #4]
9000626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000626c:	461a      	mov	r2, r3
9000626e:	6838      	ldr	r0, [r7, #0]
90006270:	f002 f8b7 	bl	900083e2 <memcpy>
	}
}
90006274:	bf00      	nop
90006276:	3708      	adds	r7, #8
90006278:	46bd      	mov	sp, r7
9000627a:	bd80      	pop	{r7, pc}

9000627c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
9000627c:	b580      	push	{r7, lr}
9000627e:	b084      	sub	sp, #16
90006280:	af00      	add	r7, sp, #0
90006282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
90006284:	f001 fc7e 	bl	90007b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
90006288:	687b      	ldr	r3, [r7, #4]
9000628a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000628e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
90006290:	e011      	b.n	900062b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90006292:	687b      	ldr	r3, [r7, #4]
90006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006296:	2b00      	cmp	r3, #0
90006298:	d012      	beq.n	900062c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000629a:	687b      	ldr	r3, [r7, #4]
9000629c:	3324      	adds	r3, #36	; 0x24
9000629e:	4618      	mov	r0, r3
900062a0:	f000 fd50 	bl	90006d44 <xTaskRemoveFromEventList>
900062a4:	4603      	mov	r3, r0
900062a6:	2b00      	cmp	r3, #0
900062a8:	d001      	beq.n	900062ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
900062aa:	f000 fe27 	bl	90006efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
900062ae:	7bfb      	ldrb	r3, [r7, #15]
900062b0:	3b01      	subs	r3, #1
900062b2:	b2db      	uxtb	r3, r3
900062b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
900062b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
900062ba:	2b00      	cmp	r3, #0
900062bc:	dce9      	bgt.n	90006292 <prvUnlockQueue+0x16>
900062be:	e000      	b.n	900062c2 <prvUnlockQueue+0x46>
					break;
900062c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
900062c2:	687b      	ldr	r3, [r7, #4]
900062c4:	22ff      	movs	r2, #255	; 0xff
900062c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
900062ca:	f001 fc8b 	bl	90007be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
900062ce:	f001 fc59 	bl	90007b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
900062d2:	687b      	ldr	r3, [r7, #4]
900062d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900062d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
900062da:	e011      	b.n	90006300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900062dc:	687b      	ldr	r3, [r7, #4]
900062de:	691b      	ldr	r3, [r3, #16]
900062e0:	2b00      	cmp	r3, #0
900062e2:	d012      	beq.n	9000630a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900062e4:	687b      	ldr	r3, [r7, #4]
900062e6:	3310      	adds	r3, #16
900062e8:	4618      	mov	r0, r3
900062ea:	f000 fd2b 	bl	90006d44 <xTaskRemoveFromEventList>
900062ee:	4603      	mov	r3, r0
900062f0:	2b00      	cmp	r3, #0
900062f2:	d001      	beq.n	900062f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
900062f4:	f000 fe02 	bl	90006efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
900062f8:	7bbb      	ldrb	r3, [r7, #14]
900062fa:	3b01      	subs	r3, #1
900062fc:	b2db      	uxtb	r3, r3
900062fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
90006300:	f997 300e 	ldrsb.w	r3, [r7, #14]
90006304:	2b00      	cmp	r3, #0
90006306:	dce9      	bgt.n	900062dc <prvUnlockQueue+0x60>
90006308:	e000      	b.n	9000630c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
9000630a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
9000630c:	687b      	ldr	r3, [r7, #4]
9000630e:	22ff      	movs	r2, #255	; 0xff
90006310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
90006314:	f001 fc66 	bl	90007be4 <vPortExitCritical>
}
90006318:	bf00      	nop
9000631a:	3710      	adds	r7, #16
9000631c:	46bd      	mov	sp, r7
9000631e:	bd80      	pop	{r7, pc}

90006320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
90006320:	b580      	push	{r7, lr}
90006322:	b084      	sub	sp, #16
90006324:	af00      	add	r7, sp, #0
90006326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90006328:	f001 fc2c 	bl	90007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000632c:	687b      	ldr	r3, [r7, #4]
9000632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006330:	2b00      	cmp	r3, #0
90006332:	d102      	bne.n	9000633a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
90006334:	2301      	movs	r3, #1
90006336:	60fb      	str	r3, [r7, #12]
90006338:	e001      	b.n	9000633e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
9000633a:	2300      	movs	r3, #0
9000633c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
9000633e:	f001 fc51 	bl	90007be4 <vPortExitCritical>

	return xReturn;
90006342:	68fb      	ldr	r3, [r7, #12]
}
90006344:	4618      	mov	r0, r3
90006346:	3710      	adds	r7, #16
90006348:	46bd      	mov	sp, r7
9000634a:	bd80      	pop	{r7, pc}

9000634c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
9000634c:	b580      	push	{r7, lr}
9000634e:	b084      	sub	sp, #16
90006350:	af00      	add	r7, sp, #0
90006352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
90006354:	f001 fc16 	bl	90007b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
90006358:	687b      	ldr	r3, [r7, #4]
9000635a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000635c:	687b      	ldr	r3, [r7, #4]
9000635e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006360:	429a      	cmp	r2, r3
90006362:	d102      	bne.n	9000636a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
90006364:	2301      	movs	r3, #1
90006366:	60fb      	str	r3, [r7, #12]
90006368:	e001      	b.n	9000636e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
9000636a:	2300      	movs	r3, #0
9000636c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
9000636e:	f001 fc39 	bl	90007be4 <vPortExitCritical>

	return xReturn;
90006372:	68fb      	ldr	r3, [r7, #12]
}
90006374:	4618      	mov	r0, r3
90006376:	3710      	adds	r7, #16
90006378:	46bd      	mov	sp, r7
9000637a:	bd80      	pop	{r7, pc}

9000637c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
9000637c:	b480      	push	{r7}
9000637e:	b085      	sub	sp, #20
90006380:	af00      	add	r7, sp, #0
90006382:	6078      	str	r0, [r7, #4]
90006384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90006386:	2300      	movs	r3, #0
90006388:	60fb      	str	r3, [r7, #12]
9000638a:	e014      	b.n	900063b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000638c:	4a0f      	ldr	r2, [pc, #60]	; (900063cc <vQueueAddToRegistry+0x50>)
9000638e:	68fb      	ldr	r3, [r7, #12]
90006390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
90006394:	2b00      	cmp	r3, #0
90006396:	d10b      	bne.n	900063b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
90006398:	490c      	ldr	r1, [pc, #48]	; (900063cc <vQueueAddToRegistry+0x50>)
9000639a:	68fb      	ldr	r3, [r7, #12]
9000639c:	683a      	ldr	r2, [r7, #0]
9000639e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
900063a2:	4a0a      	ldr	r2, [pc, #40]	; (900063cc <vQueueAddToRegistry+0x50>)
900063a4:	68fb      	ldr	r3, [r7, #12]
900063a6:	00db      	lsls	r3, r3, #3
900063a8:	4413      	add	r3, r2
900063aa:	687a      	ldr	r2, [r7, #4]
900063ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
900063ae:	e006      	b.n	900063be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900063b0:	68fb      	ldr	r3, [r7, #12]
900063b2:	3301      	adds	r3, #1
900063b4:	60fb      	str	r3, [r7, #12]
900063b6:	68fb      	ldr	r3, [r7, #12]
900063b8:	2b07      	cmp	r3, #7
900063ba:	d9e7      	bls.n	9000638c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
900063bc:	bf00      	nop
900063be:	bf00      	nop
900063c0:	3714      	adds	r7, #20
900063c2:	46bd      	mov	sp, r7
900063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900063c8:	4770      	bx	lr
900063ca:	bf00      	nop
900063cc:	24000908 	.word	0x24000908

900063d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
900063d0:	b580      	push	{r7, lr}
900063d2:	b086      	sub	sp, #24
900063d4:	af00      	add	r7, sp, #0
900063d6:	60f8      	str	r0, [r7, #12]
900063d8:	60b9      	str	r1, [r7, #8]
900063da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
900063dc:	68fb      	ldr	r3, [r7, #12]
900063de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
900063e0:	f001 fbd0 	bl	90007b84 <vPortEnterCritical>
900063e4:	697b      	ldr	r3, [r7, #20]
900063e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900063ea:	b25b      	sxtb	r3, r3
900063ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900063f0:	d103      	bne.n	900063fa <vQueueWaitForMessageRestricted+0x2a>
900063f2:	697b      	ldr	r3, [r7, #20]
900063f4:	2200      	movs	r2, #0
900063f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
900063fa:	697b      	ldr	r3, [r7, #20]
900063fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006400:	b25b      	sxtb	r3, r3
90006402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006406:	d103      	bne.n	90006410 <vQueueWaitForMessageRestricted+0x40>
90006408:	697b      	ldr	r3, [r7, #20]
9000640a:	2200      	movs	r2, #0
9000640c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006410:	f001 fbe8 	bl	90007be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90006414:	697b      	ldr	r3, [r7, #20]
90006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006418:	2b00      	cmp	r3, #0
9000641a:	d106      	bne.n	9000642a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000641c:	697b      	ldr	r3, [r7, #20]
9000641e:	3324      	adds	r3, #36	; 0x24
90006420:	687a      	ldr	r2, [r7, #4]
90006422:	68b9      	ldr	r1, [r7, #8]
90006424:	4618      	mov	r0, r3
90006426:	f000 fc61 	bl	90006cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
9000642a:	6978      	ldr	r0, [r7, #20]
9000642c:	f7ff ff26 	bl	9000627c <prvUnlockQueue>
	}
90006430:	bf00      	nop
90006432:	3718      	adds	r7, #24
90006434:	46bd      	mov	sp, r7
90006436:	bd80      	pop	{r7, pc}

90006438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
90006438:	b580      	push	{r7, lr}
9000643a:	b08e      	sub	sp, #56	; 0x38
9000643c:	af04      	add	r7, sp, #16
9000643e:	60f8      	str	r0, [r7, #12]
90006440:	60b9      	str	r1, [r7, #8]
90006442:	607a      	str	r2, [r7, #4]
90006444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
90006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006448:	2b00      	cmp	r3, #0
9000644a:	d10a      	bne.n	90006462 <xTaskCreateStatic+0x2a>
	__asm volatile
9000644c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006450:	f383 8811 	msr	BASEPRI, r3
90006454:	f3bf 8f6f 	isb	sy
90006458:	f3bf 8f4f 	dsb	sy
9000645c:	623b      	str	r3, [r7, #32]
}
9000645e:	bf00      	nop
90006460:	e7fe      	b.n	90006460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
90006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006464:	2b00      	cmp	r3, #0
90006466:	d10a      	bne.n	9000647e <xTaskCreateStatic+0x46>
	__asm volatile
90006468:	f04f 0350 	mov.w	r3, #80	; 0x50
9000646c:	f383 8811 	msr	BASEPRI, r3
90006470:	f3bf 8f6f 	isb	sy
90006474:	f3bf 8f4f 	dsb	sy
90006478:	61fb      	str	r3, [r7, #28]
}
9000647a:	bf00      	nop
9000647c:	e7fe      	b.n	9000647c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
9000647e:	23bc      	movs	r3, #188	; 0xbc
90006480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
90006482:	693b      	ldr	r3, [r7, #16]
90006484:	2bbc      	cmp	r3, #188	; 0xbc
90006486:	d00a      	beq.n	9000649e <xTaskCreateStatic+0x66>
	__asm volatile
90006488:	f04f 0350 	mov.w	r3, #80	; 0x50
9000648c:	f383 8811 	msr	BASEPRI, r3
90006490:	f3bf 8f6f 	isb	sy
90006494:	f3bf 8f4f 	dsb	sy
90006498:	61bb      	str	r3, [r7, #24]
}
9000649a:	bf00      	nop
9000649c:	e7fe      	b.n	9000649c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000649e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
900064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064a2:	2b00      	cmp	r3, #0
900064a4:	d01e      	beq.n	900064e4 <xTaskCreateStatic+0xac>
900064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900064a8:	2b00      	cmp	r3, #0
900064aa:	d01b      	beq.n	900064e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
900064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900064ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
900064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900064b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
900064b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
900064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900064b8:	2202      	movs	r2, #2
900064ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
900064be:	2300      	movs	r3, #0
900064c0:	9303      	str	r3, [sp, #12]
900064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900064c4:	9302      	str	r3, [sp, #8]
900064c6:	f107 0314 	add.w	r3, r7, #20
900064ca:	9301      	str	r3, [sp, #4]
900064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900064ce:	9300      	str	r3, [sp, #0]
900064d0:	683b      	ldr	r3, [r7, #0]
900064d2:	687a      	ldr	r2, [r7, #4]
900064d4:	68b9      	ldr	r1, [r7, #8]
900064d6:	68f8      	ldr	r0, [r7, #12]
900064d8:	f000 f850 	bl	9000657c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
900064dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
900064de:	f000 f8f3 	bl	900066c8 <prvAddNewTaskToReadyList>
900064e2:	e001      	b.n	900064e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
900064e4:	2300      	movs	r3, #0
900064e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
900064e8:	697b      	ldr	r3, [r7, #20]
	}
900064ea:	4618      	mov	r0, r3
900064ec:	3728      	adds	r7, #40	; 0x28
900064ee:	46bd      	mov	sp, r7
900064f0:	bd80      	pop	{r7, pc}

900064f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
900064f2:	b580      	push	{r7, lr}
900064f4:	b08c      	sub	sp, #48	; 0x30
900064f6:	af04      	add	r7, sp, #16
900064f8:	60f8      	str	r0, [r7, #12]
900064fa:	60b9      	str	r1, [r7, #8]
900064fc:	603b      	str	r3, [r7, #0]
900064fe:	4613      	mov	r3, r2
90006500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90006502:	88fb      	ldrh	r3, [r7, #6]
90006504:	009b      	lsls	r3, r3, #2
90006506:	4618      	mov	r0, r3
90006508:	f001 fc5e 	bl	90007dc8 <pvPortMalloc>
9000650c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
9000650e:	697b      	ldr	r3, [r7, #20]
90006510:	2b00      	cmp	r3, #0
90006512:	d00e      	beq.n	90006532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90006514:	20bc      	movs	r0, #188	; 0xbc
90006516:	f001 fc57 	bl	90007dc8 <pvPortMalloc>
9000651a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
9000651c:	69fb      	ldr	r3, [r7, #28]
9000651e:	2b00      	cmp	r3, #0
90006520:	d003      	beq.n	9000652a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
90006522:	69fb      	ldr	r3, [r7, #28]
90006524:	697a      	ldr	r2, [r7, #20]
90006526:	631a      	str	r2, [r3, #48]	; 0x30
90006528:	e005      	b.n	90006536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
9000652a:	6978      	ldr	r0, [r7, #20]
9000652c:	f001 fd18 	bl	90007f60 <vPortFree>
90006530:	e001      	b.n	90006536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
90006532:	2300      	movs	r3, #0
90006534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
90006536:	69fb      	ldr	r3, [r7, #28]
90006538:	2b00      	cmp	r3, #0
9000653a:	d017      	beq.n	9000656c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000653c:	69fb      	ldr	r3, [r7, #28]
9000653e:	2200      	movs	r2, #0
90006540:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90006544:	88fa      	ldrh	r2, [r7, #6]
90006546:	2300      	movs	r3, #0
90006548:	9303      	str	r3, [sp, #12]
9000654a:	69fb      	ldr	r3, [r7, #28]
9000654c:	9302      	str	r3, [sp, #8]
9000654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006550:	9301      	str	r3, [sp, #4]
90006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006554:	9300      	str	r3, [sp, #0]
90006556:	683b      	ldr	r3, [r7, #0]
90006558:	68b9      	ldr	r1, [r7, #8]
9000655a:	68f8      	ldr	r0, [r7, #12]
9000655c:	f000 f80e 	bl	9000657c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
90006560:	69f8      	ldr	r0, [r7, #28]
90006562:	f000 f8b1 	bl	900066c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90006566:	2301      	movs	r3, #1
90006568:	61bb      	str	r3, [r7, #24]
9000656a:	e002      	b.n	90006572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000656c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90006570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
90006572:	69bb      	ldr	r3, [r7, #24]
	}
90006574:	4618      	mov	r0, r3
90006576:	3720      	adds	r7, #32
90006578:	46bd      	mov	sp, r7
9000657a:	bd80      	pop	{r7, pc}

9000657c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
9000657c:	b580      	push	{r7, lr}
9000657e:	b088      	sub	sp, #32
90006580:	af00      	add	r7, sp, #0
90006582:	60f8      	str	r0, [r7, #12]
90006584:	60b9      	str	r1, [r7, #8]
90006586:	607a      	str	r2, [r7, #4]
90006588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000658c:	6b18      	ldr	r0, [r3, #48]	; 0x30
9000658e:	687b      	ldr	r3, [r7, #4]
90006590:	009b      	lsls	r3, r3, #2
90006592:	461a      	mov	r2, r3
90006594:	21a5      	movs	r1, #165	; 0xa5
90006596:	f001 ff32 	bl	900083fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000659c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000659e:	6879      	ldr	r1, [r7, #4]
900065a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
900065a4:	440b      	add	r3, r1
900065a6:	009b      	lsls	r3, r3, #2
900065a8:	4413      	add	r3, r2
900065aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
900065ac:	69bb      	ldr	r3, [r7, #24]
900065ae:	f023 0307 	bic.w	r3, r3, #7
900065b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
900065b4:	69bb      	ldr	r3, [r7, #24]
900065b6:	f003 0307 	and.w	r3, r3, #7
900065ba:	2b00      	cmp	r3, #0
900065bc:	d00a      	beq.n	900065d4 <prvInitialiseNewTask+0x58>
	__asm volatile
900065be:	f04f 0350 	mov.w	r3, #80	; 0x50
900065c2:	f383 8811 	msr	BASEPRI, r3
900065c6:	f3bf 8f6f 	isb	sy
900065ca:	f3bf 8f4f 	dsb	sy
900065ce:	617b      	str	r3, [r7, #20]
}
900065d0:	bf00      	nop
900065d2:	e7fe      	b.n	900065d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
900065d4:	68bb      	ldr	r3, [r7, #8]
900065d6:	2b00      	cmp	r3, #0
900065d8:	d01f      	beq.n	9000661a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
900065da:	2300      	movs	r3, #0
900065dc:	61fb      	str	r3, [r7, #28]
900065de:	e012      	b.n	90006606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900065e0:	68ba      	ldr	r2, [r7, #8]
900065e2:	69fb      	ldr	r3, [r7, #28]
900065e4:	4413      	add	r3, r2
900065e6:	7819      	ldrb	r1, [r3, #0]
900065e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900065ea:	69fb      	ldr	r3, [r7, #28]
900065ec:	4413      	add	r3, r2
900065ee:	3334      	adds	r3, #52	; 0x34
900065f0:	460a      	mov	r2, r1
900065f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
900065f4:	68ba      	ldr	r2, [r7, #8]
900065f6:	69fb      	ldr	r3, [r7, #28]
900065f8:	4413      	add	r3, r2
900065fa:	781b      	ldrb	r3, [r3, #0]
900065fc:	2b00      	cmp	r3, #0
900065fe:	d006      	beq.n	9000660e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90006600:	69fb      	ldr	r3, [r7, #28]
90006602:	3301      	adds	r3, #1
90006604:	61fb      	str	r3, [r7, #28]
90006606:	69fb      	ldr	r3, [r7, #28]
90006608:	2b0f      	cmp	r3, #15
9000660a:	d9e9      	bls.n	900065e0 <prvInitialiseNewTask+0x64>
9000660c:	e000      	b.n	90006610 <prvInitialiseNewTask+0x94>
			{
				break;
9000660e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006612:	2200      	movs	r2, #0
90006614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
90006618:	e003      	b.n	90006622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000661c:	2200      	movs	r2, #0
9000661e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006624:	2b37      	cmp	r3, #55	; 0x37
90006626:	d901      	bls.n	9000662c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
90006628:	2337      	movs	r3, #55	; 0x37
9000662a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
9000662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000662e:	6aba      	ldr	r2, [r7, #40]	; 0x28
90006630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
90006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006634:	6aba      	ldr	r2, [r7, #40]	; 0x28
90006636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
90006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000663a:	2200      	movs	r2, #0
9000663c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006640:	3304      	adds	r3, #4
90006642:	4618      	mov	r0, r3
90006644:	f7ff f978 	bl	90005938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000664a:	3318      	adds	r3, #24
9000664c:	4618      	mov	r0, r3
9000664e:	f7ff f973 	bl	90005938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90006656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000665a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
9000665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90006666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
90006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000666a:	2200      	movs	r2, #0
9000666c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006672:	2200      	movs	r2, #0
90006674:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
90006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000667a:	3354      	adds	r3, #84	; 0x54
9000667c:	2260      	movs	r2, #96	; 0x60
9000667e:	2100      	movs	r1, #0
90006680:	4618      	mov	r0, r3
90006682:	f001 febc 	bl	900083fe <memset>
90006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006688:	4a0c      	ldr	r2, [pc, #48]	; (900066bc <prvInitialiseNewTask+0x140>)
9000668a:	659a      	str	r2, [r3, #88]	; 0x58
9000668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000668e:	4a0c      	ldr	r2, [pc, #48]	; (900066c0 <prvInitialiseNewTask+0x144>)
90006690:	65da      	str	r2, [r3, #92]	; 0x5c
90006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006694:	4a0b      	ldr	r2, [pc, #44]	; (900066c4 <prvInitialiseNewTask+0x148>)
90006696:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90006698:	683a      	ldr	r2, [r7, #0]
9000669a:	68f9      	ldr	r1, [r7, #12]
9000669c:	69b8      	ldr	r0, [r7, #24]
9000669e:	f001 f941 	bl	90007924 <pxPortInitialiseStack>
900066a2:	4602      	mov	r2, r0
900066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900066a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
900066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900066aa:	2b00      	cmp	r3, #0
900066ac:	d002      	beq.n	900066b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
900066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900066b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900066b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
900066b4:	bf00      	nop
900066b6:	3720      	adds	r7, #32
900066b8:	46bd      	mov	sp, r7
900066ba:	bd80      	pop	{r7, pc}
900066bc:	90008e50 	.word	0x90008e50
900066c0:	90008e70 	.word	0x90008e70
900066c4:	90008e30 	.word	0x90008e30

900066c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
900066c8:	b580      	push	{r7, lr}
900066ca:	b082      	sub	sp, #8
900066cc:	af00      	add	r7, sp, #0
900066ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
900066d0:	f001 fa58 	bl	90007b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
900066d4:	4b2d      	ldr	r3, [pc, #180]	; (9000678c <prvAddNewTaskToReadyList+0xc4>)
900066d6:	681b      	ldr	r3, [r3, #0]
900066d8:	3301      	adds	r3, #1
900066da:	4a2c      	ldr	r2, [pc, #176]	; (9000678c <prvAddNewTaskToReadyList+0xc4>)
900066dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
900066de:	4b2c      	ldr	r3, [pc, #176]	; (90006790 <prvAddNewTaskToReadyList+0xc8>)
900066e0:	681b      	ldr	r3, [r3, #0]
900066e2:	2b00      	cmp	r3, #0
900066e4:	d109      	bne.n	900066fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
900066e6:	4a2a      	ldr	r2, [pc, #168]	; (90006790 <prvAddNewTaskToReadyList+0xc8>)
900066e8:	687b      	ldr	r3, [r7, #4]
900066ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
900066ec:	4b27      	ldr	r3, [pc, #156]	; (9000678c <prvAddNewTaskToReadyList+0xc4>)
900066ee:	681b      	ldr	r3, [r3, #0]
900066f0:	2b01      	cmp	r3, #1
900066f2:	d110      	bne.n	90006716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
900066f4:	f000 fc26 	bl	90006f44 <prvInitialiseTaskLists>
900066f8:	e00d      	b.n	90006716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
900066fa:	4b26      	ldr	r3, [pc, #152]	; (90006794 <prvAddNewTaskToReadyList+0xcc>)
900066fc:	681b      	ldr	r3, [r3, #0]
900066fe:	2b00      	cmp	r3, #0
90006700:	d109      	bne.n	90006716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90006702:	4b23      	ldr	r3, [pc, #140]	; (90006790 <prvAddNewTaskToReadyList+0xc8>)
90006704:	681b      	ldr	r3, [r3, #0]
90006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006708:	687b      	ldr	r3, [r7, #4]
9000670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000670c:	429a      	cmp	r2, r3
9000670e:	d802      	bhi.n	90006716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
90006710:	4a1f      	ldr	r2, [pc, #124]	; (90006790 <prvAddNewTaskToReadyList+0xc8>)
90006712:	687b      	ldr	r3, [r7, #4]
90006714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
90006716:	4b20      	ldr	r3, [pc, #128]	; (90006798 <prvAddNewTaskToReadyList+0xd0>)
90006718:	681b      	ldr	r3, [r3, #0]
9000671a:	3301      	adds	r3, #1
9000671c:	4a1e      	ldr	r2, [pc, #120]	; (90006798 <prvAddNewTaskToReadyList+0xd0>)
9000671e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
90006720:	4b1d      	ldr	r3, [pc, #116]	; (90006798 <prvAddNewTaskToReadyList+0xd0>)
90006722:	681a      	ldr	r2, [r3, #0]
90006724:	687b      	ldr	r3, [r7, #4]
90006726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
90006728:	687b      	ldr	r3, [r7, #4]
9000672a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000672c:	4b1b      	ldr	r3, [pc, #108]	; (9000679c <prvAddNewTaskToReadyList+0xd4>)
9000672e:	681b      	ldr	r3, [r3, #0]
90006730:	429a      	cmp	r2, r3
90006732:	d903      	bls.n	9000673c <prvAddNewTaskToReadyList+0x74>
90006734:	687b      	ldr	r3, [r7, #4]
90006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006738:	4a18      	ldr	r2, [pc, #96]	; (9000679c <prvAddNewTaskToReadyList+0xd4>)
9000673a:	6013      	str	r3, [r2, #0]
9000673c:	687b      	ldr	r3, [r7, #4]
9000673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006740:	4613      	mov	r3, r2
90006742:	009b      	lsls	r3, r3, #2
90006744:	4413      	add	r3, r2
90006746:	009b      	lsls	r3, r3, #2
90006748:	4a15      	ldr	r2, [pc, #84]	; (900067a0 <prvAddNewTaskToReadyList+0xd8>)
9000674a:	441a      	add	r2, r3
9000674c:	687b      	ldr	r3, [r7, #4]
9000674e:	3304      	adds	r3, #4
90006750:	4619      	mov	r1, r3
90006752:	4610      	mov	r0, r2
90006754:	f7ff f8fd 	bl	90005952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90006758:	f001 fa44 	bl	90007be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000675c:	4b0d      	ldr	r3, [pc, #52]	; (90006794 <prvAddNewTaskToReadyList+0xcc>)
9000675e:	681b      	ldr	r3, [r3, #0]
90006760:	2b00      	cmp	r3, #0
90006762:	d00e      	beq.n	90006782 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
90006764:	4b0a      	ldr	r3, [pc, #40]	; (90006790 <prvAddNewTaskToReadyList+0xc8>)
90006766:	681b      	ldr	r3, [r3, #0]
90006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000676a:	687b      	ldr	r3, [r7, #4]
9000676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000676e:	429a      	cmp	r2, r3
90006770:	d207      	bcs.n	90006782 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
90006772:	4b0c      	ldr	r3, [pc, #48]	; (900067a4 <prvAddNewTaskToReadyList+0xdc>)
90006774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006778:	601a      	str	r2, [r3, #0]
9000677a:	f3bf 8f4f 	dsb	sy
9000677e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90006782:	bf00      	nop
90006784:	3708      	adds	r7, #8
90006786:	46bd      	mov	sp, r7
90006788:	bd80      	pop	{r7, pc}
9000678a:	bf00      	nop
9000678c:	24000e1c 	.word	0x24000e1c
90006790:	24000948 	.word	0x24000948
90006794:	24000e28 	.word	0x24000e28
90006798:	24000e38 	.word	0x24000e38
9000679c:	24000e24 	.word	0x24000e24
900067a0:	2400094c 	.word	0x2400094c
900067a4:	e000ed04 	.word	0xe000ed04

900067a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
900067a8:	b580      	push	{r7, lr}
900067aa:	b084      	sub	sp, #16
900067ac:	af00      	add	r7, sp, #0
900067ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
900067b0:	2300      	movs	r3, #0
900067b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
900067b4:	687b      	ldr	r3, [r7, #4]
900067b6:	2b00      	cmp	r3, #0
900067b8:	d017      	beq.n	900067ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
900067ba:	4b13      	ldr	r3, [pc, #76]	; (90006808 <vTaskDelay+0x60>)
900067bc:	681b      	ldr	r3, [r3, #0]
900067be:	2b00      	cmp	r3, #0
900067c0:	d00a      	beq.n	900067d8 <vTaskDelay+0x30>
	__asm volatile
900067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900067c6:	f383 8811 	msr	BASEPRI, r3
900067ca:	f3bf 8f6f 	isb	sy
900067ce:	f3bf 8f4f 	dsb	sy
900067d2:	60bb      	str	r3, [r7, #8]
}
900067d4:	bf00      	nop
900067d6:	e7fe      	b.n	900067d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
900067d8:	f000 f88a 	bl	900068f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
900067dc:	2100      	movs	r1, #0
900067de:	6878      	ldr	r0, [r7, #4]
900067e0:	f000 fcfe 	bl	900071e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
900067e4:	f000 f892 	bl	9000690c <xTaskResumeAll>
900067e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
900067ea:	68fb      	ldr	r3, [r7, #12]
900067ec:	2b00      	cmp	r3, #0
900067ee:	d107      	bne.n	90006800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
900067f0:	4b06      	ldr	r3, [pc, #24]	; (9000680c <vTaskDelay+0x64>)
900067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900067f6:	601a      	str	r2, [r3, #0]
900067f8:	f3bf 8f4f 	dsb	sy
900067fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
90006800:	bf00      	nop
90006802:	3710      	adds	r7, #16
90006804:	46bd      	mov	sp, r7
90006806:	bd80      	pop	{r7, pc}
90006808:	24000e44 	.word	0x24000e44
9000680c:	e000ed04 	.word	0xe000ed04

90006810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
90006810:	b580      	push	{r7, lr}
90006812:	b08a      	sub	sp, #40	; 0x28
90006814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90006816:	2300      	movs	r3, #0
90006818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000681a:	2300      	movs	r3, #0
9000681c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000681e:	463a      	mov	r2, r7
90006820:	1d39      	adds	r1, r7, #4
90006822:	f107 0308 	add.w	r3, r7, #8
90006826:	4618      	mov	r0, r3
90006828:	f7ff f832 	bl	90005890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000682c:	6839      	ldr	r1, [r7, #0]
9000682e:	687b      	ldr	r3, [r7, #4]
90006830:	68ba      	ldr	r2, [r7, #8]
90006832:	9202      	str	r2, [sp, #8]
90006834:	9301      	str	r3, [sp, #4]
90006836:	2300      	movs	r3, #0
90006838:	9300      	str	r3, [sp, #0]
9000683a:	2300      	movs	r3, #0
9000683c:	460a      	mov	r2, r1
9000683e:	4924      	ldr	r1, [pc, #144]	; (900068d0 <vTaskStartScheduler+0xc0>)
90006840:	4824      	ldr	r0, [pc, #144]	; (900068d4 <vTaskStartScheduler+0xc4>)
90006842:	f7ff fdf9 	bl	90006438 <xTaskCreateStatic>
90006846:	4603      	mov	r3, r0
90006848:	4a23      	ldr	r2, [pc, #140]	; (900068d8 <vTaskStartScheduler+0xc8>)
9000684a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
9000684c:	4b22      	ldr	r3, [pc, #136]	; (900068d8 <vTaskStartScheduler+0xc8>)
9000684e:	681b      	ldr	r3, [r3, #0]
90006850:	2b00      	cmp	r3, #0
90006852:	d002      	beq.n	9000685a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
90006854:	2301      	movs	r3, #1
90006856:	617b      	str	r3, [r7, #20]
90006858:	e001      	b.n	9000685e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
9000685a:	2300      	movs	r3, #0
9000685c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
9000685e:	697b      	ldr	r3, [r7, #20]
90006860:	2b01      	cmp	r3, #1
90006862:	d102      	bne.n	9000686a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
90006864:	f000 fd10 	bl	90007288 <xTimerCreateTimerTask>
90006868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
9000686a:	697b      	ldr	r3, [r7, #20]
9000686c:	2b01      	cmp	r3, #1
9000686e:	d11b      	bne.n	900068a8 <vTaskStartScheduler+0x98>
	__asm volatile
90006870:	f04f 0350 	mov.w	r3, #80	; 0x50
90006874:	f383 8811 	msr	BASEPRI, r3
90006878:	f3bf 8f6f 	isb	sy
9000687c:	f3bf 8f4f 	dsb	sy
90006880:	613b      	str	r3, [r7, #16]
}
90006882:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90006884:	4b15      	ldr	r3, [pc, #84]	; (900068dc <vTaskStartScheduler+0xcc>)
90006886:	681b      	ldr	r3, [r3, #0]
90006888:	3354      	adds	r3, #84	; 0x54
9000688a:	4a15      	ldr	r2, [pc, #84]	; (900068e0 <vTaskStartScheduler+0xd0>)
9000688c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
9000688e:	4b15      	ldr	r3, [pc, #84]	; (900068e4 <vTaskStartScheduler+0xd4>)
90006890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90006894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
90006896:	4b14      	ldr	r3, [pc, #80]	; (900068e8 <vTaskStartScheduler+0xd8>)
90006898:	2201      	movs	r2, #1
9000689a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000689c:	4b13      	ldr	r3, [pc, #76]	; (900068ec <vTaskStartScheduler+0xdc>)
9000689e:	2200      	movs	r2, #0
900068a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
900068a2:	f001 f8cd 	bl	90007a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
900068a6:	e00e      	b.n	900068c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
900068a8:	697b      	ldr	r3, [r7, #20]
900068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900068ae:	d10a      	bne.n	900068c6 <vTaskStartScheduler+0xb6>
	__asm volatile
900068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
900068b4:	f383 8811 	msr	BASEPRI, r3
900068b8:	f3bf 8f6f 	isb	sy
900068bc:	f3bf 8f4f 	dsb	sy
900068c0:	60fb      	str	r3, [r7, #12]
}
900068c2:	bf00      	nop
900068c4:	e7fe      	b.n	900068c4 <vTaskStartScheduler+0xb4>
}
900068c6:	bf00      	nop
900068c8:	3718      	adds	r7, #24
900068ca:	46bd      	mov	sp, r7
900068cc:	bd80      	pop	{r7, pc}
900068ce:	bf00      	nop
900068d0:	90008d74 	.word	0x90008d74
900068d4:	90006f15 	.word	0x90006f15
900068d8:	24000e40 	.word	0x24000e40
900068dc:	24000948 	.word	0x24000948
900068e0:	24000014 	.word	0x24000014
900068e4:	24000e3c 	.word	0x24000e3c
900068e8:	24000e28 	.word	0x24000e28
900068ec:	24000e20 	.word	0x24000e20

900068f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
900068f0:	b480      	push	{r7}
900068f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
900068f4:	4b04      	ldr	r3, [pc, #16]	; (90006908 <vTaskSuspendAll+0x18>)
900068f6:	681b      	ldr	r3, [r3, #0]
900068f8:	3301      	adds	r3, #1
900068fa:	4a03      	ldr	r2, [pc, #12]	; (90006908 <vTaskSuspendAll+0x18>)
900068fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
900068fe:	bf00      	nop
90006900:	46bd      	mov	sp, r7
90006902:	f85d 7b04 	ldr.w	r7, [sp], #4
90006906:	4770      	bx	lr
90006908:	24000e44 	.word	0x24000e44

9000690c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
9000690c:	b580      	push	{r7, lr}
9000690e:	b084      	sub	sp, #16
90006910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
90006912:	2300      	movs	r3, #0
90006914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
90006916:	2300      	movs	r3, #0
90006918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
9000691a:	4b42      	ldr	r3, [pc, #264]	; (90006a24 <xTaskResumeAll+0x118>)
9000691c:	681b      	ldr	r3, [r3, #0]
9000691e:	2b00      	cmp	r3, #0
90006920:	d10a      	bne.n	90006938 <xTaskResumeAll+0x2c>
	__asm volatile
90006922:	f04f 0350 	mov.w	r3, #80	; 0x50
90006926:	f383 8811 	msr	BASEPRI, r3
9000692a:	f3bf 8f6f 	isb	sy
9000692e:	f3bf 8f4f 	dsb	sy
90006932:	603b      	str	r3, [r7, #0]
}
90006934:	bf00      	nop
90006936:	e7fe      	b.n	90006936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
90006938:	f001 f924 	bl	90007b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
9000693c:	4b39      	ldr	r3, [pc, #228]	; (90006a24 <xTaskResumeAll+0x118>)
9000693e:	681b      	ldr	r3, [r3, #0]
90006940:	3b01      	subs	r3, #1
90006942:	4a38      	ldr	r2, [pc, #224]	; (90006a24 <xTaskResumeAll+0x118>)
90006944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90006946:	4b37      	ldr	r3, [pc, #220]	; (90006a24 <xTaskResumeAll+0x118>)
90006948:	681b      	ldr	r3, [r3, #0]
9000694a:	2b00      	cmp	r3, #0
9000694c:	d162      	bne.n	90006a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000694e:	4b36      	ldr	r3, [pc, #216]	; (90006a28 <xTaskResumeAll+0x11c>)
90006950:	681b      	ldr	r3, [r3, #0]
90006952:	2b00      	cmp	r3, #0
90006954:	d05e      	beq.n	90006a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90006956:	e02f      	b.n	900069b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006958:	4b34      	ldr	r3, [pc, #208]	; (90006a2c <xTaskResumeAll+0x120>)
9000695a:	68db      	ldr	r3, [r3, #12]
9000695c:	68db      	ldr	r3, [r3, #12]
9000695e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90006960:	68fb      	ldr	r3, [r7, #12]
90006962:	3318      	adds	r3, #24
90006964:	4618      	mov	r0, r3
90006966:	f7ff f851 	bl	90005a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000696a:	68fb      	ldr	r3, [r7, #12]
9000696c:	3304      	adds	r3, #4
9000696e:	4618      	mov	r0, r3
90006970:	f7ff f84c 	bl	90005a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90006974:	68fb      	ldr	r3, [r7, #12]
90006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006978:	4b2d      	ldr	r3, [pc, #180]	; (90006a30 <xTaskResumeAll+0x124>)
9000697a:	681b      	ldr	r3, [r3, #0]
9000697c:	429a      	cmp	r2, r3
9000697e:	d903      	bls.n	90006988 <xTaskResumeAll+0x7c>
90006980:	68fb      	ldr	r3, [r7, #12]
90006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006984:	4a2a      	ldr	r2, [pc, #168]	; (90006a30 <xTaskResumeAll+0x124>)
90006986:	6013      	str	r3, [r2, #0]
90006988:	68fb      	ldr	r3, [r7, #12]
9000698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000698c:	4613      	mov	r3, r2
9000698e:	009b      	lsls	r3, r3, #2
90006990:	4413      	add	r3, r2
90006992:	009b      	lsls	r3, r3, #2
90006994:	4a27      	ldr	r2, [pc, #156]	; (90006a34 <xTaskResumeAll+0x128>)
90006996:	441a      	add	r2, r3
90006998:	68fb      	ldr	r3, [r7, #12]
9000699a:	3304      	adds	r3, #4
9000699c:	4619      	mov	r1, r3
9000699e:	4610      	mov	r0, r2
900069a0:	f7fe ffd7 	bl	90005952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
900069a4:	68fb      	ldr	r3, [r7, #12]
900069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900069a8:	4b23      	ldr	r3, [pc, #140]	; (90006a38 <xTaskResumeAll+0x12c>)
900069aa:	681b      	ldr	r3, [r3, #0]
900069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900069ae:	429a      	cmp	r2, r3
900069b0:	d302      	bcc.n	900069b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
900069b2:	4b22      	ldr	r3, [pc, #136]	; (90006a3c <xTaskResumeAll+0x130>)
900069b4:	2201      	movs	r2, #1
900069b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900069b8:	4b1c      	ldr	r3, [pc, #112]	; (90006a2c <xTaskResumeAll+0x120>)
900069ba:	681b      	ldr	r3, [r3, #0]
900069bc:	2b00      	cmp	r3, #0
900069be:	d1cb      	bne.n	90006958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
900069c0:	68fb      	ldr	r3, [r7, #12]
900069c2:	2b00      	cmp	r3, #0
900069c4:	d001      	beq.n	900069ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
900069c6:	f000 fb5f 	bl	90007088 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
900069ca:	4b1d      	ldr	r3, [pc, #116]	; (90006a40 <xTaskResumeAll+0x134>)
900069cc:	681b      	ldr	r3, [r3, #0]
900069ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
900069d0:	687b      	ldr	r3, [r7, #4]
900069d2:	2b00      	cmp	r3, #0
900069d4:	d010      	beq.n	900069f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
900069d6:	f000 f847 	bl	90006a68 <xTaskIncrementTick>
900069da:	4603      	mov	r3, r0
900069dc:	2b00      	cmp	r3, #0
900069de:	d002      	beq.n	900069e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
900069e0:	4b16      	ldr	r3, [pc, #88]	; (90006a3c <xTaskResumeAll+0x130>)
900069e2:	2201      	movs	r2, #1
900069e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
900069e6:	687b      	ldr	r3, [r7, #4]
900069e8:	3b01      	subs	r3, #1
900069ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
900069ec:	687b      	ldr	r3, [r7, #4]
900069ee:	2b00      	cmp	r3, #0
900069f0:	d1f1      	bne.n	900069d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
900069f2:	4b13      	ldr	r3, [pc, #76]	; (90006a40 <xTaskResumeAll+0x134>)
900069f4:	2200      	movs	r2, #0
900069f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
900069f8:	4b10      	ldr	r3, [pc, #64]	; (90006a3c <xTaskResumeAll+0x130>)
900069fa:	681b      	ldr	r3, [r3, #0]
900069fc:	2b00      	cmp	r3, #0
900069fe:	d009      	beq.n	90006a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
90006a00:	2301      	movs	r3, #1
90006a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
90006a04:	4b0f      	ldr	r3, [pc, #60]	; (90006a44 <xTaskResumeAll+0x138>)
90006a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006a0a:	601a      	str	r2, [r3, #0]
90006a0c:	f3bf 8f4f 	dsb	sy
90006a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
90006a14:	f001 f8e6 	bl	90007be4 <vPortExitCritical>

	return xAlreadyYielded;
90006a18:	68bb      	ldr	r3, [r7, #8]
}
90006a1a:	4618      	mov	r0, r3
90006a1c:	3710      	adds	r7, #16
90006a1e:	46bd      	mov	sp, r7
90006a20:	bd80      	pop	{r7, pc}
90006a22:	bf00      	nop
90006a24:	24000e44 	.word	0x24000e44
90006a28:	24000e1c 	.word	0x24000e1c
90006a2c:	24000ddc 	.word	0x24000ddc
90006a30:	24000e24 	.word	0x24000e24
90006a34:	2400094c 	.word	0x2400094c
90006a38:	24000948 	.word	0x24000948
90006a3c:	24000e30 	.word	0x24000e30
90006a40:	24000e2c 	.word	0x24000e2c
90006a44:	e000ed04 	.word	0xe000ed04

90006a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
90006a48:	b480      	push	{r7}
90006a4a:	b083      	sub	sp, #12
90006a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
90006a4e:	4b05      	ldr	r3, [pc, #20]	; (90006a64 <xTaskGetTickCount+0x1c>)
90006a50:	681b      	ldr	r3, [r3, #0]
90006a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
90006a54:	687b      	ldr	r3, [r7, #4]
}
90006a56:	4618      	mov	r0, r3
90006a58:	370c      	adds	r7, #12
90006a5a:	46bd      	mov	sp, r7
90006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90006a60:	4770      	bx	lr
90006a62:	bf00      	nop
90006a64:	24000e20 	.word	0x24000e20

90006a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
90006a68:	b580      	push	{r7, lr}
90006a6a:	b086      	sub	sp, #24
90006a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
90006a6e:	2300      	movs	r3, #0
90006a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90006a72:	4b4f      	ldr	r3, [pc, #316]	; (90006bb0 <xTaskIncrementTick+0x148>)
90006a74:	681b      	ldr	r3, [r3, #0]
90006a76:	2b00      	cmp	r3, #0
90006a78:	f040 808f 	bne.w	90006b9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90006a7c:	4b4d      	ldr	r3, [pc, #308]	; (90006bb4 <xTaskIncrementTick+0x14c>)
90006a7e:	681b      	ldr	r3, [r3, #0]
90006a80:	3301      	adds	r3, #1
90006a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
90006a84:	4a4b      	ldr	r2, [pc, #300]	; (90006bb4 <xTaskIncrementTick+0x14c>)
90006a86:	693b      	ldr	r3, [r7, #16]
90006a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90006a8a:	693b      	ldr	r3, [r7, #16]
90006a8c:	2b00      	cmp	r3, #0
90006a8e:	d120      	bne.n	90006ad2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
90006a90:	4b49      	ldr	r3, [pc, #292]	; (90006bb8 <xTaskIncrementTick+0x150>)
90006a92:	681b      	ldr	r3, [r3, #0]
90006a94:	681b      	ldr	r3, [r3, #0]
90006a96:	2b00      	cmp	r3, #0
90006a98:	d00a      	beq.n	90006ab0 <xTaskIncrementTick+0x48>
	__asm volatile
90006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
90006a9e:	f383 8811 	msr	BASEPRI, r3
90006aa2:	f3bf 8f6f 	isb	sy
90006aa6:	f3bf 8f4f 	dsb	sy
90006aaa:	603b      	str	r3, [r7, #0]
}
90006aac:	bf00      	nop
90006aae:	e7fe      	b.n	90006aae <xTaskIncrementTick+0x46>
90006ab0:	4b41      	ldr	r3, [pc, #260]	; (90006bb8 <xTaskIncrementTick+0x150>)
90006ab2:	681b      	ldr	r3, [r3, #0]
90006ab4:	60fb      	str	r3, [r7, #12]
90006ab6:	4b41      	ldr	r3, [pc, #260]	; (90006bbc <xTaskIncrementTick+0x154>)
90006ab8:	681b      	ldr	r3, [r3, #0]
90006aba:	4a3f      	ldr	r2, [pc, #252]	; (90006bb8 <xTaskIncrementTick+0x150>)
90006abc:	6013      	str	r3, [r2, #0]
90006abe:	4a3f      	ldr	r2, [pc, #252]	; (90006bbc <xTaskIncrementTick+0x154>)
90006ac0:	68fb      	ldr	r3, [r7, #12]
90006ac2:	6013      	str	r3, [r2, #0]
90006ac4:	4b3e      	ldr	r3, [pc, #248]	; (90006bc0 <xTaskIncrementTick+0x158>)
90006ac6:	681b      	ldr	r3, [r3, #0]
90006ac8:	3301      	adds	r3, #1
90006aca:	4a3d      	ldr	r2, [pc, #244]	; (90006bc0 <xTaskIncrementTick+0x158>)
90006acc:	6013      	str	r3, [r2, #0]
90006ace:	f000 fadb 	bl	90007088 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
90006ad2:	4b3c      	ldr	r3, [pc, #240]	; (90006bc4 <xTaskIncrementTick+0x15c>)
90006ad4:	681b      	ldr	r3, [r3, #0]
90006ad6:	693a      	ldr	r2, [r7, #16]
90006ad8:	429a      	cmp	r2, r3
90006ada:	d349      	bcc.n	90006b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90006adc:	4b36      	ldr	r3, [pc, #216]	; (90006bb8 <xTaskIncrementTick+0x150>)
90006ade:	681b      	ldr	r3, [r3, #0]
90006ae0:	681b      	ldr	r3, [r3, #0]
90006ae2:	2b00      	cmp	r3, #0
90006ae4:	d104      	bne.n	90006af0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90006ae6:	4b37      	ldr	r3, [pc, #220]	; (90006bc4 <xTaskIncrementTick+0x15c>)
90006ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90006aec:	601a      	str	r2, [r3, #0]
					break;
90006aee:	e03f      	b.n	90006b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006af0:	4b31      	ldr	r3, [pc, #196]	; (90006bb8 <xTaskIncrementTick+0x150>)
90006af2:	681b      	ldr	r3, [r3, #0]
90006af4:	68db      	ldr	r3, [r3, #12]
90006af6:	68db      	ldr	r3, [r3, #12]
90006af8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
90006afa:	68bb      	ldr	r3, [r7, #8]
90006afc:	685b      	ldr	r3, [r3, #4]
90006afe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
90006b00:	693a      	ldr	r2, [r7, #16]
90006b02:	687b      	ldr	r3, [r7, #4]
90006b04:	429a      	cmp	r2, r3
90006b06:	d203      	bcs.n	90006b10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
90006b08:	4a2e      	ldr	r2, [pc, #184]	; (90006bc4 <xTaskIncrementTick+0x15c>)
90006b0a:	687b      	ldr	r3, [r7, #4]
90006b0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
90006b0e:	e02f      	b.n	90006b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90006b10:	68bb      	ldr	r3, [r7, #8]
90006b12:	3304      	adds	r3, #4
90006b14:	4618      	mov	r0, r3
90006b16:	f7fe ff79 	bl	90005a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90006b1a:	68bb      	ldr	r3, [r7, #8]
90006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90006b1e:	2b00      	cmp	r3, #0
90006b20:	d004      	beq.n	90006b2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90006b22:	68bb      	ldr	r3, [r7, #8]
90006b24:	3318      	adds	r3, #24
90006b26:	4618      	mov	r0, r3
90006b28:	f7fe ff70 	bl	90005a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
90006b2c:	68bb      	ldr	r3, [r7, #8]
90006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006b30:	4b25      	ldr	r3, [pc, #148]	; (90006bc8 <xTaskIncrementTick+0x160>)
90006b32:	681b      	ldr	r3, [r3, #0]
90006b34:	429a      	cmp	r2, r3
90006b36:	d903      	bls.n	90006b40 <xTaskIncrementTick+0xd8>
90006b38:	68bb      	ldr	r3, [r7, #8]
90006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006b3c:	4a22      	ldr	r2, [pc, #136]	; (90006bc8 <xTaskIncrementTick+0x160>)
90006b3e:	6013      	str	r3, [r2, #0]
90006b40:	68bb      	ldr	r3, [r7, #8]
90006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006b44:	4613      	mov	r3, r2
90006b46:	009b      	lsls	r3, r3, #2
90006b48:	4413      	add	r3, r2
90006b4a:	009b      	lsls	r3, r3, #2
90006b4c:	4a1f      	ldr	r2, [pc, #124]	; (90006bcc <xTaskIncrementTick+0x164>)
90006b4e:	441a      	add	r2, r3
90006b50:	68bb      	ldr	r3, [r7, #8]
90006b52:	3304      	adds	r3, #4
90006b54:	4619      	mov	r1, r3
90006b56:	4610      	mov	r0, r2
90006b58:	f7fe fefb 	bl	90005952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90006b5c:	68bb      	ldr	r3, [r7, #8]
90006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006b60:	4b1b      	ldr	r3, [pc, #108]	; (90006bd0 <xTaskIncrementTick+0x168>)
90006b62:	681b      	ldr	r3, [r3, #0]
90006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006b66:	429a      	cmp	r2, r3
90006b68:	d3b8      	bcc.n	90006adc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
90006b6a:	2301      	movs	r3, #1
90006b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90006b6e:	e7b5      	b.n	90006adc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90006b70:	4b17      	ldr	r3, [pc, #92]	; (90006bd0 <xTaskIncrementTick+0x168>)
90006b72:	681b      	ldr	r3, [r3, #0]
90006b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006b76:	4915      	ldr	r1, [pc, #84]	; (90006bcc <xTaskIncrementTick+0x164>)
90006b78:	4613      	mov	r3, r2
90006b7a:	009b      	lsls	r3, r3, #2
90006b7c:	4413      	add	r3, r2
90006b7e:	009b      	lsls	r3, r3, #2
90006b80:	440b      	add	r3, r1
90006b82:	681b      	ldr	r3, [r3, #0]
90006b84:	2b01      	cmp	r3, #1
90006b86:	d901      	bls.n	90006b8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
90006b88:	2301      	movs	r3, #1
90006b8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
90006b8c:	4b11      	ldr	r3, [pc, #68]	; (90006bd4 <xTaskIncrementTick+0x16c>)
90006b8e:	681b      	ldr	r3, [r3, #0]
90006b90:	2b00      	cmp	r3, #0
90006b92:	d007      	beq.n	90006ba4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
90006b94:	2301      	movs	r3, #1
90006b96:	617b      	str	r3, [r7, #20]
90006b98:	e004      	b.n	90006ba4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
90006b9a:	4b0f      	ldr	r3, [pc, #60]	; (90006bd8 <xTaskIncrementTick+0x170>)
90006b9c:	681b      	ldr	r3, [r3, #0]
90006b9e:	3301      	adds	r3, #1
90006ba0:	4a0d      	ldr	r2, [pc, #52]	; (90006bd8 <xTaskIncrementTick+0x170>)
90006ba2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
90006ba4:	697b      	ldr	r3, [r7, #20]
}
90006ba6:	4618      	mov	r0, r3
90006ba8:	3718      	adds	r7, #24
90006baa:	46bd      	mov	sp, r7
90006bac:	bd80      	pop	{r7, pc}
90006bae:	bf00      	nop
90006bb0:	24000e44 	.word	0x24000e44
90006bb4:	24000e20 	.word	0x24000e20
90006bb8:	24000dd4 	.word	0x24000dd4
90006bbc:	24000dd8 	.word	0x24000dd8
90006bc0:	24000e34 	.word	0x24000e34
90006bc4:	24000e3c 	.word	0x24000e3c
90006bc8:	24000e24 	.word	0x24000e24
90006bcc:	2400094c 	.word	0x2400094c
90006bd0:	24000948 	.word	0x24000948
90006bd4:	24000e30 	.word	0x24000e30
90006bd8:	24000e2c 	.word	0x24000e2c

90006bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
90006bdc:	b480      	push	{r7}
90006bde:	b085      	sub	sp, #20
90006be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90006be2:	4b2a      	ldr	r3, [pc, #168]	; (90006c8c <vTaskSwitchContext+0xb0>)
90006be4:	681b      	ldr	r3, [r3, #0]
90006be6:	2b00      	cmp	r3, #0
90006be8:	d003      	beq.n	90006bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
90006bea:	4b29      	ldr	r3, [pc, #164]	; (90006c90 <vTaskSwitchContext+0xb4>)
90006bec:	2201      	movs	r2, #1
90006bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
90006bf0:	e046      	b.n	90006c80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
90006bf2:	4b27      	ldr	r3, [pc, #156]	; (90006c90 <vTaskSwitchContext+0xb4>)
90006bf4:	2200      	movs	r2, #0
90006bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006bf8:	4b26      	ldr	r3, [pc, #152]	; (90006c94 <vTaskSwitchContext+0xb8>)
90006bfa:	681b      	ldr	r3, [r3, #0]
90006bfc:	60fb      	str	r3, [r7, #12]
90006bfe:	e010      	b.n	90006c22 <vTaskSwitchContext+0x46>
90006c00:	68fb      	ldr	r3, [r7, #12]
90006c02:	2b00      	cmp	r3, #0
90006c04:	d10a      	bne.n	90006c1c <vTaskSwitchContext+0x40>
	__asm volatile
90006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
90006c0a:	f383 8811 	msr	BASEPRI, r3
90006c0e:	f3bf 8f6f 	isb	sy
90006c12:	f3bf 8f4f 	dsb	sy
90006c16:	607b      	str	r3, [r7, #4]
}
90006c18:	bf00      	nop
90006c1a:	e7fe      	b.n	90006c1a <vTaskSwitchContext+0x3e>
90006c1c:	68fb      	ldr	r3, [r7, #12]
90006c1e:	3b01      	subs	r3, #1
90006c20:	60fb      	str	r3, [r7, #12]
90006c22:	491d      	ldr	r1, [pc, #116]	; (90006c98 <vTaskSwitchContext+0xbc>)
90006c24:	68fa      	ldr	r2, [r7, #12]
90006c26:	4613      	mov	r3, r2
90006c28:	009b      	lsls	r3, r3, #2
90006c2a:	4413      	add	r3, r2
90006c2c:	009b      	lsls	r3, r3, #2
90006c2e:	440b      	add	r3, r1
90006c30:	681b      	ldr	r3, [r3, #0]
90006c32:	2b00      	cmp	r3, #0
90006c34:	d0e4      	beq.n	90006c00 <vTaskSwitchContext+0x24>
90006c36:	68fa      	ldr	r2, [r7, #12]
90006c38:	4613      	mov	r3, r2
90006c3a:	009b      	lsls	r3, r3, #2
90006c3c:	4413      	add	r3, r2
90006c3e:	009b      	lsls	r3, r3, #2
90006c40:	4a15      	ldr	r2, [pc, #84]	; (90006c98 <vTaskSwitchContext+0xbc>)
90006c42:	4413      	add	r3, r2
90006c44:	60bb      	str	r3, [r7, #8]
90006c46:	68bb      	ldr	r3, [r7, #8]
90006c48:	685b      	ldr	r3, [r3, #4]
90006c4a:	685a      	ldr	r2, [r3, #4]
90006c4c:	68bb      	ldr	r3, [r7, #8]
90006c4e:	605a      	str	r2, [r3, #4]
90006c50:	68bb      	ldr	r3, [r7, #8]
90006c52:	685a      	ldr	r2, [r3, #4]
90006c54:	68bb      	ldr	r3, [r7, #8]
90006c56:	3308      	adds	r3, #8
90006c58:	429a      	cmp	r2, r3
90006c5a:	d104      	bne.n	90006c66 <vTaskSwitchContext+0x8a>
90006c5c:	68bb      	ldr	r3, [r7, #8]
90006c5e:	685b      	ldr	r3, [r3, #4]
90006c60:	685a      	ldr	r2, [r3, #4]
90006c62:	68bb      	ldr	r3, [r7, #8]
90006c64:	605a      	str	r2, [r3, #4]
90006c66:	68bb      	ldr	r3, [r7, #8]
90006c68:	685b      	ldr	r3, [r3, #4]
90006c6a:	68db      	ldr	r3, [r3, #12]
90006c6c:	4a0b      	ldr	r2, [pc, #44]	; (90006c9c <vTaskSwitchContext+0xc0>)
90006c6e:	6013      	str	r3, [r2, #0]
90006c70:	4a08      	ldr	r2, [pc, #32]	; (90006c94 <vTaskSwitchContext+0xb8>)
90006c72:	68fb      	ldr	r3, [r7, #12]
90006c74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90006c76:	4b09      	ldr	r3, [pc, #36]	; (90006c9c <vTaskSwitchContext+0xc0>)
90006c78:	681b      	ldr	r3, [r3, #0]
90006c7a:	3354      	adds	r3, #84	; 0x54
90006c7c:	4a08      	ldr	r2, [pc, #32]	; (90006ca0 <vTaskSwitchContext+0xc4>)
90006c7e:	6013      	str	r3, [r2, #0]
}
90006c80:	bf00      	nop
90006c82:	3714      	adds	r7, #20
90006c84:	46bd      	mov	sp, r7
90006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
90006c8a:	4770      	bx	lr
90006c8c:	24000e44 	.word	0x24000e44
90006c90:	24000e30 	.word	0x24000e30
90006c94:	24000e24 	.word	0x24000e24
90006c98:	2400094c 	.word	0x2400094c
90006c9c:	24000948 	.word	0x24000948
90006ca0:	24000014 	.word	0x24000014

90006ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
90006ca4:	b580      	push	{r7, lr}
90006ca6:	b084      	sub	sp, #16
90006ca8:	af00      	add	r7, sp, #0
90006caa:	6078      	str	r0, [r7, #4]
90006cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
90006cae:	687b      	ldr	r3, [r7, #4]
90006cb0:	2b00      	cmp	r3, #0
90006cb2:	d10a      	bne.n	90006cca <vTaskPlaceOnEventList+0x26>
	__asm volatile
90006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
90006cb8:	f383 8811 	msr	BASEPRI, r3
90006cbc:	f3bf 8f6f 	isb	sy
90006cc0:	f3bf 8f4f 	dsb	sy
90006cc4:	60fb      	str	r3, [r7, #12]
}
90006cc6:	bf00      	nop
90006cc8:	e7fe      	b.n	90006cc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90006cca:	4b07      	ldr	r3, [pc, #28]	; (90006ce8 <vTaskPlaceOnEventList+0x44>)
90006ccc:	681b      	ldr	r3, [r3, #0]
90006cce:	3318      	adds	r3, #24
90006cd0:	4619      	mov	r1, r3
90006cd2:	6878      	ldr	r0, [r7, #4]
90006cd4:	f7fe fe61 	bl	9000599a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
90006cd8:	2101      	movs	r1, #1
90006cda:	6838      	ldr	r0, [r7, #0]
90006cdc:	f000 fa80 	bl	900071e0 <prvAddCurrentTaskToDelayedList>
}
90006ce0:	bf00      	nop
90006ce2:	3710      	adds	r7, #16
90006ce4:	46bd      	mov	sp, r7
90006ce6:	bd80      	pop	{r7, pc}
90006ce8:	24000948 	.word	0x24000948

90006cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90006cec:	b580      	push	{r7, lr}
90006cee:	b086      	sub	sp, #24
90006cf0:	af00      	add	r7, sp, #0
90006cf2:	60f8      	str	r0, [r7, #12]
90006cf4:	60b9      	str	r1, [r7, #8]
90006cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
90006cf8:	68fb      	ldr	r3, [r7, #12]
90006cfa:	2b00      	cmp	r3, #0
90006cfc:	d10a      	bne.n	90006d14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
90006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d02:	f383 8811 	msr	BASEPRI, r3
90006d06:	f3bf 8f6f 	isb	sy
90006d0a:	f3bf 8f4f 	dsb	sy
90006d0e:	617b      	str	r3, [r7, #20]
}
90006d10:	bf00      	nop
90006d12:	e7fe      	b.n	90006d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90006d14:	4b0a      	ldr	r3, [pc, #40]	; (90006d40 <vTaskPlaceOnEventListRestricted+0x54>)
90006d16:	681b      	ldr	r3, [r3, #0]
90006d18:	3318      	adds	r3, #24
90006d1a:	4619      	mov	r1, r3
90006d1c:	68f8      	ldr	r0, [r7, #12]
90006d1e:	f7fe fe18 	bl	90005952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
90006d22:	687b      	ldr	r3, [r7, #4]
90006d24:	2b00      	cmp	r3, #0
90006d26:	d002      	beq.n	90006d2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
90006d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90006d2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
90006d2e:	6879      	ldr	r1, [r7, #4]
90006d30:	68b8      	ldr	r0, [r7, #8]
90006d32:	f000 fa55 	bl	900071e0 <prvAddCurrentTaskToDelayedList>
	}
90006d36:	bf00      	nop
90006d38:	3718      	adds	r7, #24
90006d3a:	46bd      	mov	sp, r7
90006d3c:	bd80      	pop	{r7, pc}
90006d3e:	bf00      	nop
90006d40:	24000948 	.word	0x24000948

90006d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
90006d44:	b580      	push	{r7, lr}
90006d46:	b086      	sub	sp, #24
90006d48:	af00      	add	r7, sp, #0
90006d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006d4c:	687b      	ldr	r3, [r7, #4]
90006d4e:	68db      	ldr	r3, [r3, #12]
90006d50:	68db      	ldr	r3, [r3, #12]
90006d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
90006d54:	693b      	ldr	r3, [r7, #16]
90006d56:	2b00      	cmp	r3, #0
90006d58:	d10a      	bne.n	90006d70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
90006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d5e:	f383 8811 	msr	BASEPRI, r3
90006d62:	f3bf 8f6f 	isb	sy
90006d66:	f3bf 8f4f 	dsb	sy
90006d6a:	60fb      	str	r3, [r7, #12]
}
90006d6c:	bf00      	nop
90006d6e:	e7fe      	b.n	90006d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90006d70:	693b      	ldr	r3, [r7, #16]
90006d72:	3318      	adds	r3, #24
90006d74:	4618      	mov	r0, r3
90006d76:	f7fe fe49 	bl	90005a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90006d7a:	4b1e      	ldr	r3, [pc, #120]	; (90006df4 <xTaskRemoveFromEventList+0xb0>)
90006d7c:	681b      	ldr	r3, [r3, #0]
90006d7e:	2b00      	cmp	r3, #0
90006d80:	d11d      	bne.n	90006dbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90006d82:	693b      	ldr	r3, [r7, #16]
90006d84:	3304      	adds	r3, #4
90006d86:	4618      	mov	r0, r3
90006d88:	f7fe fe40 	bl	90005a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90006d8c:	693b      	ldr	r3, [r7, #16]
90006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006d90:	4b19      	ldr	r3, [pc, #100]	; (90006df8 <xTaskRemoveFromEventList+0xb4>)
90006d92:	681b      	ldr	r3, [r3, #0]
90006d94:	429a      	cmp	r2, r3
90006d96:	d903      	bls.n	90006da0 <xTaskRemoveFromEventList+0x5c>
90006d98:	693b      	ldr	r3, [r7, #16]
90006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006d9c:	4a16      	ldr	r2, [pc, #88]	; (90006df8 <xTaskRemoveFromEventList+0xb4>)
90006d9e:	6013      	str	r3, [r2, #0]
90006da0:	693b      	ldr	r3, [r7, #16]
90006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006da4:	4613      	mov	r3, r2
90006da6:	009b      	lsls	r3, r3, #2
90006da8:	4413      	add	r3, r2
90006daa:	009b      	lsls	r3, r3, #2
90006dac:	4a13      	ldr	r2, [pc, #76]	; (90006dfc <xTaskRemoveFromEventList+0xb8>)
90006dae:	441a      	add	r2, r3
90006db0:	693b      	ldr	r3, [r7, #16]
90006db2:	3304      	adds	r3, #4
90006db4:	4619      	mov	r1, r3
90006db6:	4610      	mov	r0, r2
90006db8:	f7fe fdcb 	bl	90005952 <vListInsertEnd>
90006dbc:	e005      	b.n	90006dca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90006dbe:	693b      	ldr	r3, [r7, #16]
90006dc0:	3318      	adds	r3, #24
90006dc2:	4619      	mov	r1, r3
90006dc4:	480e      	ldr	r0, [pc, #56]	; (90006e00 <xTaskRemoveFromEventList+0xbc>)
90006dc6:	f7fe fdc4 	bl	90005952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90006dca:	693b      	ldr	r3, [r7, #16]
90006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90006dce:	4b0d      	ldr	r3, [pc, #52]	; (90006e04 <xTaskRemoveFromEventList+0xc0>)
90006dd0:	681b      	ldr	r3, [r3, #0]
90006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90006dd4:	429a      	cmp	r2, r3
90006dd6:	d905      	bls.n	90006de4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
90006dd8:	2301      	movs	r3, #1
90006dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
90006ddc:	4b0a      	ldr	r3, [pc, #40]	; (90006e08 <xTaskRemoveFromEventList+0xc4>)
90006dde:	2201      	movs	r2, #1
90006de0:	601a      	str	r2, [r3, #0]
90006de2:	e001      	b.n	90006de8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
90006de4:	2300      	movs	r3, #0
90006de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
90006de8:	697b      	ldr	r3, [r7, #20]
}
90006dea:	4618      	mov	r0, r3
90006dec:	3718      	adds	r7, #24
90006dee:	46bd      	mov	sp, r7
90006df0:	bd80      	pop	{r7, pc}
90006df2:	bf00      	nop
90006df4:	24000e44 	.word	0x24000e44
90006df8:	24000e24 	.word	0x24000e24
90006dfc:	2400094c 	.word	0x2400094c
90006e00:	24000ddc 	.word	0x24000ddc
90006e04:	24000948 	.word	0x24000948
90006e08:	24000e30 	.word	0x24000e30

90006e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
90006e0c:	b480      	push	{r7}
90006e0e:	b083      	sub	sp, #12
90006e10:	af00      	add	r7, sp, #0
90006e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90006e14:	4b06      	ldr	r3, [pc, #24]	; (90006e30 <vTaskInternalSetTimeOutState+0x24>)
90006e16:	681a      	ldr	r2, [r3, #0]
90006e18:	687b      	ldr	r3, [r7, #4]
90006e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90006e1c:	4b05      	ldr	r3, [pc, #20]	; (90006e34 <vTaskInternalSetTimeOutState+0x28>)
90006e1e:	681a      	ldr	r2, [r3, #0]
90006e20:	687b      	ldr	r3, [r7, #4]
90006e22:	605a      	str	r2, [r3, #4]
}
90006e24:	bf00      	nop
90006e26:	370c      	adds	r7, #12
90006e28:	46bd      	mov	sp, r7
90006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006e2e:	4770      	bx	lr
90006e30:	24000e34 	.word	0x24000e34
90006e34:	24000e20 	.word	0x24000e20

90006e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
90006e38:	b580      	push	{r7, lr}
90006e3a:	b088      	sub	sp, #32
90006e3c:	af00      	add	r7, sp, #0
90006e3e:	6078      	str	r0, [r7, #4]
90006e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
90006e42:	687b      	ldr	r3, [r7, #4]
90006e44:	2b00      	cmp	r3, #0
90006e46:	d10a      	bne.n	90006e5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
90006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e4c:	f383 8811 	msr	BASEPRI, r3
90006e50:	f3bf 8f6f 	isb	sy
90006e54:	f3bf 8f4f 	dsb	sy
90006e58:	613b      	str	r3, [r7, #16]
}
90006e5a:	bf00      	nop
90006e5c:	e7fe      	b.n	90006e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
90006e5e:	683b      	ldr	r3, [r7, #0]
90006e60:	2b00      	cmp	r3, #0
90006e62:	d10a      	bne.n	90006e7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
90006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
90006e68:	f383 8811 	msr	BASEPRI, r3
90006e6c:	f3bf 8f6f 	isb	sy
90006e70:	f3bf 8f4f 	dsb	sy
90006e74:	60fb      	str	r3, [r7, #12]
}
90006e76:	bf00      	nop
90006e78:	e7fe      	b.n	90006e78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
90006e7a:	f000 fe83 	bl	90007b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
90006e7e:	4b1d      	ldr	r3, [pc, #116]	; (90006ef4 <xTaskCheckForTimeOut+0xbc>)
90006e80:	681b      	ldr	r3, [r3, #0]
90006e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90006e84:	687b      	ldr	r3, [r7, #4]
90006e86:	685b      	ldr	r3, [r3, #4]
90006e88:	69ba      	ldr	r2, [r7, #24]
90006e8a:	1ad3      	subs	r3, r2, r3
90006e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
90006e8e:	683b      	ldr	r3, [r7, #0]
90006e90:	681b      	ldr	r3, [r3, #0]
90006e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006e96:	d102      	bne.n	90006e9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
90006e98:	2300      	movs	r3, #0
90006e9a:	61fb      	str	r3, [r7, #28]
90006e9c:	e023      	b.n	90006ee6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90006e9e:	687b      	ldr	r3, [r7, #4]
90006ea0:	681a      	ldr	r2, [r3, #0]
90006ea2:	4b15      	ldr	r3, [pc, #84]	; (90006ef8 <xTaskCheckForTimeOut+0xc0>)
90006ea4:	681b      	ldr	r3, [r3, #0]
90006ea6:	429a      	cmp	r2, r3
90006ea8:	d007      	beq.n	90006eba <xTaskCheckForTimeOut+0x82>
90006eaa:	687b      	ldr	r3, [r7, #4]
90006eac:	685b      	ldr	r3, [r3, #4]
90006eae:	69ba      	ldr	r2, [r7, #24]
90006eb0:	429a      	cmp	r2, r3
90006eb2:	d302      	bcc.n	90006eba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
90006eb4:	2301      	movs	r3, #1
90006eb6:	61fb      	str	r3, [r7, #28]
90006eb8:	e015      	b.n	90006ee6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90006eba:	683b      	ldr	r3, [r7, #0]
90006ebc:	681b      	ldr	r3, [r3, #0]
90006ebe:	697a      	ldr	r2, [r7, #20]
90006ec0:	429a      	cmp	r2, r3
90006ec2:	d20b      	bcs.n	90006edc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
90006ec4:	683b      	ldr	r3, [r7, #0]
90006ec6:	681a      	ldr	r2, [r3, #0]
90006ec8:	697b      	ldr	r3, [r7, #20]
90006eca:	1ad2      	subs	r2, r2, r3
90006ecc:	683b      	ldr	r3, [r7, #0]
90006ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
90006ed0:	6878      	ldr	r0, [r7, #4]
90006ed2:	f7ff ff9b 	bl	90006e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
90006ed6:	2300      	movs	r3, #0
90006ed8:	61fb      	str	r3, [r7, #28]
90006eda:	e004      	b.n	90006ee6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
90006edc:	683b      	ldr	r3, [r7, #0]
90006ede:	2200      	movs	r2, #0
90006ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
90006ee2:	2301      	movs	r3, #1
90006ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
90006ee6:	f000 fe7d 	bl	90007be4 <vPortExitCritical>

	return xReturn;
90006eea:	69fb      	ldr	r3, [r7, #28]
}
90006eec:	4618      	mov	r0, r3
90006eee:	3720      	adds	r7, #32
90006ef0:	46bd      	mov	sp, r7
90006ef2:	bd80      	pop	{r7, pc}
90006ef4:	24000e20 	.word	0x24000e20
90006ef8:	24000e34 	.word	0x24000e34

90006efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
90006efc:	b480      	push	{r7}
90006efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
90006f00:	4b03      	ldr	r3, [pc, #12]	; (90006f10 <vTaskMissedYield+0x14>)
90006f02:	2201      	movs	r2, #1
90006f04:	601a      	str	r2, [r3, #0]
}
90006f06:	bf00      	nop
90006f08:	46bd      	mov	sp, r7
90006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
90006f0e:	4770      	bx	lr
90006f10:	24000e30 	.word	0x24000e30

90006f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
90006f14:	b580      	push	{r7, lr}
90006f16:	b082      	sub	sp, #8
90006f18:	af00      	add	r7, sp, #0
90006f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
90006f1c:	f000 f852 	bl	90006fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90006f20:	4b06      	ldr	r3, [pc, #24]	; (90006f3c <prvIdleTask+0x28>)
90006f22:	681b      	ldr	r3, [r3, #0]
90006f24:	2b01      	cmp	r3, #1
90006f26:	d9f9      	bls.n	90006f1c <prvIdleTask+0x8>
			{
				taskYIELD();
90006f28:	4b05      	ldr	r3, [pc, #20]	; (90006f40 <prvIdleTask+0x2c>)
90006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006f2e:	601a      	str	r2, [r3, #0]
90006f30:	f3bf 8f4f 	dsb	sy
90006f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
90006f38:	e7f0      	b.n	90006f1c <prvIdleTask+0x8>
90006f3a:	bf00      	nop
90006f3c:	2400094c 	.word	0x2400094c
90006f40:	e000ed04 	.word	0xe000ed04

90006f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
90006f44:	b580      	push	{r7, lr}
90006f46:	b082      	sub	sp, #8
90006f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90006f4a:	2300      	movs	r3, #0
90006f4c:	607b      	str	r3, [r7, #4]
90006f4e:	e00c      	b.n	90006f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90006f50:	687a      	ldr	r2, [r7, #4]
90006f52:	4613      	mov	r3, r2
90006f54:	009b      	lsls	r3, r3, #2
90006f56:	4413      	add	r3, r2
90006f58:	009b      	lsls	r3, r3, #2
90006f5a:	4a12      	ldr	r2, [pc, #72]	; (90006fa4 <prvInitialiseTaskLists+0x60>)
90006f5c:	4413      	add	r3, r2
90006f5e:	4618      	mov	r0, r3
90006f60:	f7fe fcca 	bl	900058f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90006f64:	687b      	ldr	r3, [r7, #4]
90006f66:	3301      	adds	r3, #1
90006f68:	607b      	str	r3, [r7, #4]
90006f6a:	687b      	ldr	r3, [r7, #4]
90006f6c:	2b37      	cmp	r3, #55	; 0x37
90006f6e:	d9ef      	bls.n	90006f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
90006f70:	480d      	ldr	r0, [pc, #52]	; (90006fa8 <prvInitialiseTaskLists+0x64>)
90006f72:	f7fe fcc1 	bl	900058f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90006f76:	480d      	ldr	r0, [pc, #52]	; (90006fac <prvInitialiseTaskLists+0x68>)
90006f78:	f7fe fcbe 	bl	900058f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
90006f7c:	480c      	ldr	r0, [pc, #48]	; (90006fb0 <prvInitialiseTaskLists+0x6c>)
90006f7e:	f7fe fcbb 	bl	900058f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
90006f82:	480c      	ldr	r0, [pc, #48]	; (90006fb4 <prvInitialiseTaskLists+0x70>)
90006f84:	f7fe fcb8 	bl	900058f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90006f88:	480b      	ldr	r0, [pc, #44]	; (90006fb8 <prvInitialiseTaskLists+0x74>)
90006f8a:	f7fe fcb5 	bl	900058f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90006f8e:	4b0b      	ldr	r3, [pc, #44]	; (90006fbc <prvInitialiseTaskLists+0x78>)
90006f90:	4a05      	ldr	r2, [pc, #20]	; (90006fa8 <prvInitialiseTaskLists+0x64>)
90006f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90006f94:	4b0a      	ldr	r3, [pc, #40]	; (90006fc0 <prvInitialiseTaskLists+0x7c>)
90006f96:	4a05      	ldr	r2, [pc, #20]	; (90006fac <prvInitialiseTaskLists+0x68>)
90006f98:	601a      	str	r2, [r3, #0]
}
90006f9a:	bf00      	nop
90006f9c:	3708      	adds	r7, #8
90006f9e:	46bd      	mov	sp, r7
90006fa0:	bd80      	pop	{r7, pc}
90006fa2:	bf00      	nop
90006fa4:	2400094c 	.word	0x2400094c
90006fa8:	24000dac 	.word	0x24000dac
90006fac:	24000dc0 	.word	0x24000dc0
90006fb0:	24000ddc 	.word	0x24000ddc
90006fb4:	24000df0 	.word	0x24000df0
90006fb8:	24000e08 	.word	0x24000e08
90006fbc:	24000dd4 	.word	0x24000dd4
90006fc0:	24000dd8 	.word	0x24000dd8

90006fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
90006fc4:	b580      	push	{r7, lr}
90006fc6:	b082      	sub	sp, #8
90006fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90006fca:	e019      	b.n	90007000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
90006fcc:	f000 fdda 	bl	90007b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90006fd0:	4b10      	ldr	r3, [pc, #64]	; (90007014 <prvCheckTasksWaitingTermination+0x50>)
90006fd2:	68db      	ldr	r3, [r3, #12]
90006fd4:	68db      	ldr	r3, [r3, #12]
90006fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90006fd8:	687b      	ldr	r3, [r7, #4]
90006fda:	3304      	adds	r3, #4
90006fdc:	4618      	mov	r0, r3
90006fde:	f7fe fd15 	bl	90005a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
90006fe2:	4b0d      	ldr	r3, [pc, #52]	; (90007018 <prvCheckTasksWaitingTermination+0x54>)
90006fe4:	681b      	ldr	r3, [r3, #0]
90006fe6:	3b01      	subs	r3, #1
90006fe8:	4a0b      	ldr	r2, [pc, #44]	; (90007018 <prvCheckTasksWaitingTermination+0x54>)
90006fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
90006fec:	4b0b      	ldr	r3, [pc, #44]	; (9000701c <prvCheckTasksWaitingTermination+0x58>)
90006fee:	681b      	ldr	r3, [r3, #0]
90006ff0:	3b01      	subs	r3, #1
90006ff2:	4a0a      	ldr	r2, [pc, #40]	; (9000701c <prvCheckTasksWaitingTermination+0x58>)
90006ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
90006ff6:	f000 fdf5 	bl	90007be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
90006ffa:	6878      	ldr	r0, [r7, #4]
90006ffc:	f000 f810 	bl	90007020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90007000:	4b06      	ldr	r3, [pc, #24]	; (9000701c <prvCheckTasksWaitingTermination+0x58>)
90007002:	681b      	ldr	r3, [r3, #0]
90007004:	2b00      	cmp	r3, #0
90007006:	d1e1      	bne.n	90006fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
90007008:	bf00      	nop
9000700a:	bf00      	nop
9000700c:	3708      	adds	r7, #8
9000700e:	46bd      	mov	sp, r7
90007010:	bd80      	pop	{r7, pc}
90007012:	bf00      	nop
90007014:	24000df0 	.word	0x24000df0
90007018:	24000e1c 	.word	0x24000e1c
9000701c:	24000e04 	.word	0x24000e04

90007020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
90007020:	b580      	push	{r7, lr}
90007022:	b084      	sub	sp, #16
90007024:	af00      	add	r7, sp, #0
90007026:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
90007028:	687b      	ldr	r3, [r7, #4]
9000702a:	3354      	adds	r3, #84	; 0x54
9000702c:	4618      	mov	r0, r3
9000702e:	f001 fb07 	bl	90008640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90007032:	687b      	ldr	r3, [r7, #4]
90007034:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007038:	2b00      	cmp	r3, #0
9000703a:	d108      	bne.n	9000704e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
9000703c:	687b      	ldr	r3, [r7, #4]
9000703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007040:	4618      	mov	r0, r3
90007042:	f000 ff8d 	bl	90007f60 <vPortFree>
				vPortFree( pxTCB );
90007046:	6878      	ldr	r0, [r7, #4]
90007048:	f000 ff8a 	bl	90007f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
9000704c:	e018      	b.n	90007080 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000704e:	687b      	ldr	r3, [r7, #4]
90007050:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007054:	2b01      	cmp	r3, #1
90007056:	d103      	bne.n	90007060 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
90007058:	6878      	ldr	r0, [r7, #4]
9000705a:	f000 ff81 	bl	90007f60 <vPortFree>
	}
9000705e:	e00f      	b.n	90007080 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90007060:	687b      	ldr	r3, [r7, #4]
90007062:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
90007066:	2b02      	cmp	r3, #2
90007068:	d00a      	beq.n	90007080 <prvDeleteTCB+0x60>
	__asm volatile
9000706a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000706e:	f383 8811 	msr	BASEPRI, r3
90007072:	f3bf 8f6f 	isb	sy
90007076:	f3bf 8f4f 	dsb	sy
9000707a:	60fb      	str	r3, [r7, #12]
}
9000707c:	bf00      	nop
9000707e:	e7fe      	b.n	9000707e <prvDeleteTCB+0x5e>
	}
90007080:	bf00      	nop
90007082:	3710      	adds	r7, #16
90007084:	46bd      	mov	sp, r7
90007086:	bd80      	pop	{r7, pc}

90007088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
90007088:	b480      	push	{r7}
9000708a:	b083      	sub	sp, #12
9000708c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000708e:	4b0c      	ldr	r3, [pc, #48]	; (900070c0 <prvResetNextTaskUnblockTime+0x38>)
90007090:	681b      	ldr	r3, [r3, #0]
90007092:	681b      	ldr	r3, [r3, #0]
90007094:	2b00      	cmp	r3, #0
90007096:	d104      	bne.n	900070a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90007098:	4b0a      	ldr	r3, [pc, #40]	; (900070c4 <prvResetNextTaskUnblockTime+0x3c>)
9000709a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000709e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
900070a0:	e008      	b.n	900070b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900070a2:	4b07      	ldr	r3, [pc, #28]	; (900070c0 <prvResetNextTaskUnblockTime+0x38>)
900070a4:	681b      	ldr	r3, [r3, #0]
900070a6:	68db      	ldr	r3, [r3, #12]
900070a8:	68db      	ldr	r3, [r3, #12]
900070aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
900070ac:	687b      	ldr	r3, [r7, #4]
900070ae:	685b      	ldr	r3, [r3, #4]
900070b0:	4a04      	ldr	r2, [pc, #16]	; (900070c4 <prvResetNextTaskUnblockTime+0x3c>)
900070b2:	6013      	str	r3, [r2, #0]
}
900070b4:	bf00      	nop
900070b6:	370c      	adds	r7, #12
900070b8:	46bd      	mov	sp, r7
900070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
900070be:	4770      	bx	lr
900070c0:	24000dd4 	.word	0x24000dd4
900070c4:	24000e3c 	.word	0x24000e3c

900070c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
900070c8:	b480      	push	{r7}
900070ca:	b083      	sub	sp, #12
900070cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
900070ce:	4b0b      	ldr	r3, [pc, #44]	; (900070fc <xTaskGetSchedulerState+0x34>)
900070d0:	681b      	ldr	r3, [r3, #0]
900070d2:	2b00      	cmp	r3, #0
900070d4:	d102      	bne.n	900070dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
900070d6:	2301      	movs	r3, #1
900070d8:	607b      	str	r3, [r7, #4]
900070da:	e008      	b.n	900070ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900070dc:	4b08      	ldr	r3, [pc, #32]	; (90007100 <xTaskGetSchedulerState+0x38>)
900070de:	681b      	ldr	r3, [r3, #0]
900070e0:	2b00      	cmp	r3, #0
900070e2:	d102      	bne.n	900070ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
900070e4:	2302      	movs	r3, #2
900070e6:	607b      	str	r3, [r7, #4]
900070e8:	e001      	b.n	900070ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
900070ea:	2300      	movs	r3, #0
900070ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
900070ee:	687b      	ldr	r3, [r7, #4]
	}
900070f0:	4618      	mov	r0, r3
900070f2:	370c      	adds	r7, #12
900070f4:	46bd      	mov	sp, r7
900070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
900070fa:	4770      	bx	lr
900070fc:	24000e28 	.word	0x24000e28
90007100:	24000e44 	.word	0x24000e44

90007104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
90007104:	b580      	push	{r7, lr}
90007106:	b086      	sub	sp, #24
90007108:	af00      	add	r7, sp, #0
9000710a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
9000710c:	687b      	ldr	r3, [r7, #4]
9000710e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
90007110:	2300      	movs	r3, #0
90007112:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90007114:	687b      	ldr	r3, [r7, #4]
90007116:	2b00      	cmp	r3, #0
90007118:	d056      	beq.n	900071c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
9000711a:	4b2e      	ldr	r3, [pc, #184]	; (900071d4 <xTaskPriorityDisinherit+0xd0>)
9000711c:	681b      	ldr	r3, [r3, #0]
9000711e:	693a      	ldr	r2, [r7, #16]
90007120:	429a      	cmp	r2, r3
90007122:	d00a      	beq.n	9000713a <xTaskPriorityDisinherit+0x36>
	__asm volatile
90007124:	f04f 0350 	mov.w	r3, #80	; 0x50
90007128:	f383 8811 	msr	BASEPRI, r3
9000712c:	f3bf 8f6f 	isb	sy
90007130:	f3bf 8f4f 	dsb	sy
90007134:	60fb      	str	r3, [r7, #12]
}
90007136:	bf00      	nop
90007138:	e7fe      	b.n	90007138 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
9000713a:	693b      	ldr	r3, [r7, #16]
9000713c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000713e:	2b00      	cmp	r3, #0
90007140:	d10a      	bne.n	90007158 <xTaskPriorityDisinherit+0x54>
	__asm volatile
90007142:	f04f 0350 	mov.w	r3, #80	; 0x50
90007146:	f383 8811 	msr	BASEPRI, r3
9000714a:	f3bf 8f6f 	isb	sy
9000714e:	f3bf 8f4f 	dsb	sy
90007152:	60bb      	str	r3, [r7, #8]
}
90007154:	bf00      	nop
90007156:	e7fe      	b.n	90007156 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
90007158:	693b      	ldr	r3, [r7, #16]
9000715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000715c:	1e5a      	subs	r2, r3, #1
9000715e:	693b      	ldr	r3, [r7, #16]
90007160:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90007162:	693b      	ldr	r3, [r7, #16]
90007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007166:	693b      	ldr	r3, [r7, #16]
90007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000716a:	429a      	cmp	r2, r3
9000716c:	d02c      	beq.n	900071c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000716e:	693b      	ldr	r3, [r7, #16]
90007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007172:	2b00      	cmp	r3, #0
90007174:	d128      	bne.n	900071c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90007176:	693b      	ldr	r3, [r7, #16]
90007178:	3304      	adds	r3, #4
9000717a:	4618      	mov	r0, r3
9000717c:	f7fe fc46 	bl	90005a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
90007180:	693b      	ldr	r3, [r7, #16]
90007182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
90007184:	693b      	ldr	r3, [r7, #16]
90007186:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007188:	693b      	ldr	r3, [r7, #16]
9000718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000718c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
90007190:	693b      	ldr	r3, [r7, #16]
90007192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
90007194:	693b      	ldr	r3, [r7, #16]
90007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007198:	4b0f      	ldr	r3, [pc, #60]	; (900071d8 <xTaskPriorityDisinherit+0xd4>)
9000719a:	681b      	ldr	r3, [r3, #0]
9000719c:	429a      	cmp	r2, r3
9000719e:	d903      	bls.n	900071a8 <xTaskPriorityDisinherit+0xa4>
900071a0:	693b      	ldr	r3, [r7, #16]
900071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900071a4:	4a0c      	ldr	r2, [pc, #48]	; (900071d8 <xTaskPriorityDisinherit+0xd4>)
900071a6:	6013      	str	r3, [r2, #0]
900071a8:	693b      	ldr	r3, [r7, #16]
900071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900071ac:	4613      	mov	r3, r2
900071ae:	009b      	lsls	r3, r3, #2
900071b0:	4413      	add	r3, r2
900071b2:	009b      	lsls	r3, r3, #2
900071b4:	4a09      	ldr	r2, [pc, #36]	; (900071dc <xTaskPriorityDisinherit+0xd8>)
900071b6:	441a      	add	r2, r3
900071b8:	693b      	ldr	r3, [r7, #16]
900071ba:	3304      	adds	r3, #4
900071bc:	4619      	mov	r1, r3
900071be:	4610      	mov	r0, r2
900071c0:	f7fe fbc7 	bl	90005952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
900071c4:	2301      	movs	r3, #1
900071c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
900071c8:	697b      	ldr	r3, [r7, #20]
	}
900071ca:	4618      	mov	r0, r3
900071cc:	3718      	adds	r7, #24
900071ce:	46bd      	mov	sp, r7
900071d0:	bd80      	pop	{r7, pc}
900071d2:	bf00      	nop
900071d4:	24000948 	.word	0x24000948
900071d8:	24000e24 	.word	0x24000e24
900071dc:	2400094c 	.word	0x2400094c

900071e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
900071e0:	b580      	push	{r7, lr}
900071e2:	b084      	sub	sp, #16
900071e4:	af00      	add	r7, sp, #0
900071e6:	6078      	str	r0, [r7, #4]
900071e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
900071ea:	4b21      	ldr	r3, [pc, #132]	; (90007270 <prvAddCurrentTaskToDelayedList+0x90>)
900071ec:	681b      	ldr	r3, [r3, #0]
900071ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900071f0:	4b20      	ldr	r3, [pc, #128]	; (90007274 <prvAddCurrentTaskToDelayedList+0x94>)
900071f2:	681b      	ldr	r3, [r3, #0]
900071f4:	3304      	adds	r3, #4
900071f6:	4618      	mov	r0, r3
900071f8:	f7fe fc08 	bl	90005a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
900071fc:	687b      	ldr	r3, [r7, #4]
900071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007202:	d10a      	bne.n	9000721a <prvAddCurrentTaskToDelayedList+0x3a>
90007204:	683b      	ldr	r3, [r7, #0]
90007206:	2b00      	cmp	r3, #0
90007208:	d007      	beq.n	9000721a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000720a:	4b1a      	ldr	r3, [pc, #104]	; (90007274 <prvAddCurrentTaskToDelayedList+0x94>)
9000720c:	681b      	ldr	r3, [r3, #0]
9000720e:	3304      	adds	r3, #4
90007210:	4619      	mov	r1, r3
90007212:	4819      	ldr	r0, [pc, #100]	; (90007278 <prvAddCurrentTaskToDelayedList+0x98>)
90007214:	f7fe fb9d 	bl	90005952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
90007218:	e026      	b.n	90007268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000721a:	68fa      	ldr	r2, [r7, #12]
9000721c:	687b      	ldr	r3, [r7, #4]
9000721e:	4413      	add	r3, r2
90007220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90007222:	4b14      	ldr	r3, [pc, #80]	; (90007274 <prvAddCurrentTaskToDelayedList+0x94>)
90007224:	681b      	ldr	r3, [r3, #0]
90007226:	68ba      	ldr	r2, [r7, #8]
90007228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000722a:	68ba      	ldr	r2, [r7, #8]
9000722c:	68fb      	ldr	r3, [r7, #12]
9000722e:	429a      	cmp	r2, r3
90007230:	d209      	bcs.n	90007246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90007232:	4b12      	ldr	r3, [pc, #72]	; (9000727c <prvAddCurrentTaskToDelayedList+0x9c>)
90007234:	681a      	ldr	r2, [r3, #0]
90007236:	4b0f      	ldr	r3, [pc, #60]	; (90007274 <prvAddCurrentTaskToDelayedList+0x94>)
90007238:	681b      	ldr	r3, [r3, #0]
9000723a:	3304      	adds	r3, #4
9000723c:	4619      	mov	r1, r3
9000723e:	4610      	mov	r0, r2
90007240:	f7fe fbab 	bl	9000599a <vListInsert>
}
90007244:	e010      	b.n	90007268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90007246:	4b0e      	ldr	r3, [pc, #56]	; (90007280 <prvAddCurrentTaskToDelayedList+0xa0>)
90007248:	681a      	ldr	r2, [r3, #0]
9000724a:	4b0a      	ldr	r3, [pc, #40]	; (90007274 <prvAddCurrentTaskToDelayedList+0x94>)
9000724c:	681b      	ldr	r3, [r3, #0]
9000724e:	3304      	adds	r3, #4
90007250:	4619      	mov	r1, r3
90007252:	4610      	mov	r0, r2
90007254:	f7fe fba1 	bl	9000599a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90007258:	4b0a      	ldr	r3, [pc, #40]	; (90007284 <prvAddCurrentTaskToDelayedList+0xa4>)
9000725a:	681b      	ldr	r3, [r3, #0]
9000725c:	68ba      	ldr	r2, [r7, #8]
9000725e:	429a      	cmp	r2, r3
90007260:	d202      	bcs.n	90007268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
90007262:	4a08      	ldr	r2, [pc, #32]	; (90007284 <prvAddCurrentTaskToDelayedList+0xa4>)
90007264:	68bb      	ldr	r3, [r7, #8]
90007266:	6013      	str	r3, [r2, #0]
}
90007268:	bf00      	nop
9000726a:	3710      	adds	r7, #16
9000726c:	46bd      	mov	sp, r7
9000726e:	bd80      	pop	{r7, pc}
90007270:	24000e20 	.word	0x24000e20
90007274:	24000948 	.word	0x24000948
90007278:	24000e08 	.word	0x24000e08
9000727c:	24000dd8 	.word	0x24000dd8
90007280:	24000dd4 	.word	0x24000dd4
90007284:	24000e3c 	.word	0x24000e3c

90007288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
90007288:	b580      	push	{r7, lr}
9000728a:	b08a      	sub	sp, #40	; 0x28
9000728c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
9000728e:	2300      	movs	r3, #0
90007290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
90007292:	f000 fb07 	bl	900078a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
90007296:	4b1c      	ldr	r3, [pc, #112]	; (90007308 <xTimerCreateTimerTask+0x80>)
90007298:	681b      	ldr	r3, [r3, #0]
9000729a:	2b00      	cmp	r3, #0
9000729c:	d021      	beq.n	900072e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000729e:	2300      	movs	r3, #0
900072a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
900072a2:	2300      	movs	r3, #0
900072a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
900072a6:	1d3a      	adds	r2, r7, #4
900072a8:	f107 0108 	add.w	r1, r7, #8
900072ac:	f107 030c 	add.w	r3, r7, #12
900072b0:	4618      	mov	r0, r3
900072b2:	f7fe fb07 	bl	900058c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
900072b6:	6879      	ldr	r1, [r7, #4]
900072b8:	68bb      	ldr	r3, [r7, #8]
900072ba:	68fa      	ldr	r2, [r7, #12]
900072bc:	9202      	str	r2, [sp, #8]
900072be:	9301      	str	r3, [sp, #4]
900072c0:	2302      	movs	r3, #2
900072c2:	9300      	str	r3, [sp, #0]
900072c4:	2300      	movs	r3, #0
900072c6:	460a      	mov	r2, r1
900072c8:	4910      	ldr	r1, [pc, #64]	; (9000730c <xTimerCreateTimerTask+0x84>)
900072ca:	4811      	ldr	r0, [pc, #68]	; (90007310 <xTimerCreateTimerTask+0x88>)
900072cc:	f7ff f8b4 	bl	90006438 <xTaskCreateStatic>
900072d0:	4603      	mov	r3, r0
900072d2:	4a10      	ldr	r2, [pc, #64]	; (90007314 <xTimerCreateTimerTask+0x8c>)
900072d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
900072d6:	4b0f      	ldr	r3, [pc, #60]	; (90007314 <xTimerCreateTimerTask+0x8c>)
900072d8:	681b      	ldr	r3, [r3, #0]
900072da:	2b00      	cmp	r3, #0
900072dc:	d001      	beq.n	900072e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
900072de:	2301      	movs	r3, #1
900072e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
900072e2:	697b      	ldr	r3, [r7, #20]
900072e4:	2b00      	cmp	r3, #0
900072e6:	d10a      	bne.n	900072fe <xTimerCreateTimerTask+0x76>
	__asm volatile
900072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
900072ec:	f383 8811 	msr	BASEPRI, r3
900072f0:	f3bf 8f6f 	isb	sy
900072f4:	f3bf 8f4f 	dsb	sy
900072f8:	613b      	str	r3, [r7, #16]
}
900072fa:	bf00      	nop
900072fc:	e7fe      	b.n	900072fc <xTimerCreateTimerTask+0x74>
	return xReturn;
900072fe:	697b      	ldr	r3, [r7, #20]
}
90007300:	4618      	mov	r0, r3
90007302:	3718      	adds	r7, #24
90007304:	46bd      	mov	sp, r7
90007306:	bd80      	pop	{r7, pc}
90007308:	24000e78 	.word	0x24000e78
9000730c:	90008d7c 	.word	0x90008d7c
90007310:	9000744d 	.word	0x9000744d
90007314:	24000e7c 	.word	0x24000e7c

90007318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
90007318:	b580      	push	{r7, lr}
9000731a:	b08a      	sub	sp, #40	; 0x28
9000731c:	af00      	add	r7, sp, #0
9000731e:	60f8      	str	r0, [r7, #12]
90007320:	60b9      	str	r1, [r7, #8]
90007322:	607a      	str	r2, [r7, #4]
90007324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
90007326:	2300      	movs	r3, #0
90007328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
9000732a:	68fb      	ldr	r3, [r7, #12]
9000732c:	2b00      	cmp	r3, #0
9000732e:	d10a      	bne.n	90007346 <xTimerGenericCommand+0x2e>
	__asm volatile
90007330:	f04f 0350 	mov.w	r3, #80	; 0x50
90007334:	f383 8811 	msr	BASEPRI, r3
90007338:	f3bf 8f6f 	isb	sy
9000733c:	f3bf 8f4f 	dsb	sy
90007340:	623b      	str	r3, [r7, #32]
}
90007342:	bf00      	nop
90007344:	e7fe      	b.n	90007344 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
90007346:	4b1a      	ldr	r3, [pc, #104]	; (900073b0 <xTimerGenericCommand+0x98>)
90007348:	681b      	ldr	r3, [r3, #0]
9000734a:	2b00      	cmp	r3, #0
9000734c:	d02a      	beq.n	900073a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
9000734e:	68bb      	ldr	r3, [r7, #8]
90007350:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90007352:	687b      	ldr	r3, [r7, #4]
90007354:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90007356:	68fb      	ldr	r3, [r7, #12]
90007358:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
9000735a:	68bb      	ldr	r3, [r7, #8]
9000735c:	2b05      	cmp	r3, #5
9000735e:	dc18      	bgt.n	90007392 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90007360:	f7ff feb2 	bl	900070c8 <xTaskGetSchedulerState>
90007364:	4603      	mov	r3, r0
90007366:	2b02      	cmp	r3, #2
90007368:	d109      	bne.n	9000737e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000736a:	4b11      	ldr	r3, [pc, #68]	; (900073b0 <xTimerGenericCommand+0x98>)
9000736c:	6818      	ldr	r0, [r3, #0]
9000736e:	f107 0110 	add.w	r1, r7, #16
90007372:	2300      	movs	r3, #0
90007374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007376:	f7fe fc77 	bl	90005c68 <xQueueGenericSend>
9000737a:	6278      	str	r0, [r7, #36]	; 0x24
9000737c:	e012      	b.n	900073a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
9000737e:	4b0c      	ldr	r3, [pc, #48]	; (900073b0 <xTimerGenericCommand+0x98>)
90007380:	6818      	ldr	r0, [r3, #0]
90007382:	f107 0110 	add.w	r1, r7, #16
90007386:	2300      	movs	r3, #0
90007388:	2200      	movs	r2, #0
9000738a:	f7fe fc6d 	bl	90005c68 <xQueueGenericSend>
9000738e:	6278      	str	r0, [r7, #36]	; 0x24
90007390:	e008      	b.n	900073a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
90007392:	4b07      	ldr	r3, [pc, #28]	; (900073b0 <xTimerGenericCommand+0x98>)
90007394:	6818      	ldr	r0, [r3, #0]
90007396:	f107 0110 	add.w	r1, r7, #16
9000739a:	2300      	movs	r3, #0
9000739c:	683a      	ldr	r2, [r7, #0]
9000739e:	f7fe fd61 	bl	90005e64 <xQueueGenericSendFromISR>
900073a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
900073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
900073a6:	4618      	mov	r0, r3
900073a8:	3728      	adds	r7, #40	; 0x28
900073aa:	46bd      	mov	sp, r7
900073ac:	bd80      	pop	{r7, pc}
900073ae:	bf00      	nop
900073b0:	24000e78 	.word	0x24000e78

900073b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
900073b4:	b580      	push	{r7, lr}
900073b6:	b088      	sub	sp, #32
900073b8:	af02      	add	r7, sp, #8
900073ba:	6078      	str	r0, [r7, #4]
900073bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900073be:	4b22      	ldr	r3, [pc, #136]	; (90007448 <prvProcessExpiredTimer+0x94>)
900073c0:	681b      	ldr	r3, [r3, #0]
900073c2:	68db      	ldr	r3, [r3, #12]
900073c4:	68db      	ldr	r3, [r3, #12]
900073c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900073c8:	697b      	ldr	r3, [r7, #20]
900073ca:	3304      	adds	r3, #4
900073cc:	4618      	mov	r0, r3
900073ce:	f7fe fb1d 	bl	90005a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900073d2:	697b      	ldr	r3, [r7, #20]
900073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900073d8:	f003 0304 	and.w	r3, r3, #4
900073dc:	2b00      	cmp	r3, #0
900073de:	d022      	beq.n	90007426 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
900073e0:	697b      	ldr	r3, [r7, #20]
900073e2:	699a      	ldr	r2, [r3, #24]
900073e4:	687b      	ldr	r3, [r7, #4]
900073e6:	18d1      	adds	r1, r2, r3
900073e8:	687b      	ldr	r3, [r7, #4]
900073ea:	683a      	ldr	r2, [r7, #0]
900073ec:	6978      	ldr	r0, [r7, #20]
900073ee:	f000 f8d1 	bl	90007594 <prvInsertTimerInActiveList>
900073f2:	4603      	mov	r3, r0
900073f4:	2b00      	cmp	r3, #0
900073f6:	d01f      	beq.n	90007438 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
900073f8:	2300      	movs	r3, #0
900073fa:	9300      	str	r3, [sp, #0]
900073fc:	2300      	movs	r3, #0
900073fe:	687a      	ldr	r2, [r7, #4]
90007400:	2100      	movs	r1, #0
90007402:	6978      	ldr	r0, [r7, #20]
90007404:	f7ff ff88 	bl	90007318 <xTimerGenericCommand>
90007408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
9000740a:	693b      	ldr	r3, [r7, #16]
9000740c:	2b00      	cmp	r3, #0
9000740e:	d113      	bne.n	90007438 <prvProcessExpiredTimer+0x84>
	__asm volatile
90007410:	f04f 0350 	mov.w	r3, #80	; 0x50
90007414:	f383 8811 	msr	BASEPRI, r3
90007418:	f3bf 8f6f 	isb	sy
9000741c:	f3bf 8f4f 	dsb	sy
90007420:	60fb      	str	r3, [r7, #12]
}
90007422:	bf00      	nop
90007424:	e7fe      	b.n	90007424 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90007426:	697b      	ldr	r3, [r7, #20]
90007428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000742c:	f023 0301 	bic.w	r3, r3, #1
90007430:	b2da      	uxtb	r2, r3
90007432:	697b      	ldr	r3, [r7, #20]
90007434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90007438:	697b      	ldr	r3, [r7, #20]
9000743a:	6a1b      	ldr	r3, [r3, #32]
9000743c:	6978      	ldr	r0, [r7, #20]
9000743e:	4798      	blx	r3
}
90007440:	bf00      	nop
90007442:	3718      	adds	r7, #24
90007444:	46bd      	mov	sp, r7
90007446:	bd80      	pop	{r7, pc}
90007448:	24000e70 	.word	0x24000e70

9000744c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
9000744c:	b580      	push	{r7, lr}
9000744e:	b084      	sub	sp, #16
90007450:	af00      	add	r7, sp, #0
90007452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
90007454:	f107 0308 	add.w	r3, r7, #8
90007458:	4618      	mov	r0, r3
9000745a:	f000 f857 	bl	9000750c <prvGetNextExpireTime>
9000745e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
90007460:	68bb      	ldr	r3, [r7, #8]
90007462:	4619      	mov	r1, r3
90007464:	68f8      	ldr	r0, [r7, #12]
90007466:	f000 f803 	bl	90007470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
9000746a:	f000 f8d5 	bl	90007618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
9000746e:	e7f1      	b.n	90007454 <prvTimerTask+0x8>

90007470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
90007470:	b580      	push	{r7, lr}
90007472:	b084      	sub	sp, #16
90007474:	af00      	add	r7, sp, #0
90007476:	6078      	str	r0, [r7, #4]
90007478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
9000747a:	f7ff fa39 	bl	900068f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
9000747e:	f107 0308 	add.w	r3, r7, #8
90007482:	4618      	mov	r0, r3
90007484:	f000 f866 	bl	90007554 <prvSampleTimeNow>
90007488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
9000748a:	68bb      	ldr	r3, [r7, #8]
9000748c:	2b00      	cmp	r3, #0
9000748e:	d130      	bne.n	900074f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90007490:	683b      	ldr	r3, [r7, #0]
90007492:	2b00      	cmp	r3, #0
90007494:	d10a      	bne.n	900074ac <prvProcessTimerOrBlockTask+0x3c>
90007496:	687a      	ldr	r2, [r7, #4]
90007498:	68fb      	ldr	r3, [r7, #12]
9000749a:	429a      	cmp	r2, r3
9000749c:	d806      	bhi.n	900074ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
9000749e:	f7ff fa35 	bl	9000690c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
900074a2:	68f9      	ldr	r1, [r7, #12]
900074a4:	6878      	ldr	r0, [r7, #4]
900074a6:	f7ff ff85 	bl	900073b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
900074aa:	e024      	b.n	900074f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
900074ac:	683b      	ldr	r3, [r7, #0]
900074ae:	2b00      	cmp	r3, #0
900074b0:	d008      	beq.n	900074c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900074b2:	4b13      	ldr	r3, [pc, #76]	; (90007500 <prvProcessTimerOrBlockTask+0x90>)
900074b4:	681b      	ldr	r3, [r3, #0]
900074b6:	681b      	ldr	r3, [r3, #0]
900074b8:	2b00      	cmp	r3, #0
900074ba:	d101      	bne.n	900074c0 <prvProcessTimerOrBlockTask+0x50>
900074bc:	2301      	movs	r3, #1
900074be:	e000      	b.n	900074c2 <prvProcessTimerOrBlockTask+0x52>
900074c0:	2300      	movs	r3, #0
900074c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
900074c4:	4b0f      	ldr	r3, [pc, #60]	; (90007504 <prvProcessTimerOrBlockTask+0x94>)
900074c6:	6818      	ldr	r0, [r3, #0]
900074c8:	687a      	ldr	r2, [r7, #4]
900074ca:	68fb      	ldr	r3, [r7, #12]
900074cc:	1ad3      	subs	r3, r2, r3
900074ce:	683a      	ldr	r2, [r7, #0]
900074d0:	4619      	mov	r1, r3
900074d2:	f7fe ff7d 	bl	900063d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
900074d6:	f7ff fa19 	bl	9000690c <xTaskResumeAll>
900074da:	4603      	mov	r3, r0
900074dc:	2b00      	cmp	r3, #0
900074de:	d10a      	bne.n	900074f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
900074e0:	4b09      	ldr	r3, [pc, #36]	; (90007508 <prvProcessTimerOrBlockTask+0x98>)
900074e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900074e6:	601a      	str	r2, [r3, #0]
900074e8:	f3bf 8f4f 	dsb	sy
900074ec:	f3bf 8f6f 	isb	sy
}
900074f0:	e001      	b.n	900074f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
900074f2:	f7ff fa0b 	bl	9000690c <xTaskResumeAll>
}
900074f6:	bf00      	nop
900074f8:	3710      	adds	r7, #16
900074fa:	46bd      	mov	sp, r7
900074fc:	bd80      	pop	{r7, pc}
900074fe:	bf00      	nop
90007500:	24000e74 	.word	0x24000e74
90007504:	24000e78 	.word	0x24000e78
90007508:	e000ed04 	.word	0xe000ed04

9000750c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
9000750c:	b480      	push	{r7}
9000750e:	b085      	sub	sp, #20
90007510:	af00      	add	r7, sp, #0
90007512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
90007514:	4b0e      	ldr	r3, [pc, #56]	; (90007550 <prvGetNextExpireTime+0x44>)
90007516:	681b      	ldr	r3, [r3, #0]
90007518:	681b      	ldr	r3, [r3, #0]
9000751a:	2b00      	cmp	r3, #0
9000751c:	d101      	bne.n	90007522 <prvGetNextExpireTime+0x16>
9000751e:	2201      	movs	r2, #1
90007520:	e000      	b.n	90007524 <prvGetNextExpireTime+0x18>
90007522:	2200      	movs	r2, #0
90007524:	687b      	ldr	r3, [r7, #4]
90007526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
90007528:	687b      	ldr	r3, [r7, #4]
9000752a:	681b      	ldr	r3, [r3, #0]
9000752c:	2b00      	cmp	r3, #0
9000752e:	d105      	bne.n	9000753c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90007530:	4b07      	ldr	r3, [pc, #28]	; (90007550 <prvGetNextExpireTime+0x44>)
90007532:	681b      	ldr	r3, [r3, #0]
90007534:	68db      	ldr	r3, [r3, #12]
90007536:	681b      	ldr	r3, [r3, #0]
90007538:	60fb      	str	r3, [r7, #12]
9000753a:	e001      	b.n	90007540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
9000753c:	2300      	movs	r3, #0
9000753e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
90007540:	68fb      	ldr	r3, [r7, #12]
}
90007542:	4618      	mov	r0, r3
90007544:	3714      	adds	r7, #20
90007546:	46bd      	mov	sp, r7
90007548:	f85d 7b04 	ldr.w	r7, [sp], #4
9000754c:	4770      	bx	lr
9000754e:	bf00      	nop
90007550:	24000e70 	.word	0x24000e70

90007554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
90007554:	b580      	push	{r7, lr}
90007556:	b084      	sub	sp, #16
90007558:	af00      	add	r7, sp, #0
9000755a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
9000755c:	f7ff fa74 	bl	90006a48 <xTaskGetTickCount>
90007560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
90007562:	4b0b      	ldr	r3, [pc, #44]	; (90007590 <prvSampleTimeNow+0x3c>)
90007564:	681b      	ldr	r3, [r3, #0]
90007566:	68fa      	ldr	r2, [r7, #12]
90007568:	429a      	cmp	r2, r3
9000756a:	d205      	bcs.n	90007578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
9000756c:	f000 f936 	bl	900077dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
90007570:	687b      	ldr	r3, [r7, #4]
90007572:	2201      	movs	r2, #1
90007574:	601a      	str	r2, [r3, #0]
90007576:	e002      	b.n	9000757e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
90007578:	687b      	ldr	r3, [r7, #4]
9000757a:	2200      	movs	r2, #0
9000757c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
9000757e:	4a04      	ldr	r2, [pc, #16]	; (90007590 <prvSampleTimeNow+0x3c>)
90007580:	68fb      	ldr	r3, [r7, #12]
90007582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
90007584:	68fb      	ldr	r3, [r7, #12]
}
90007586:	4618      	mov	r0, r3
90007588:	3710      	adds	r7, #16
9000758a:	46bd      	mov	sp, r7
9000758c:	bd80      	pop	{r7, pc}
9000758e:	bf00      	nop
90007590:	24000e80 	.word	0x24000e80

90007594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
90007594:	b580      	push	{r7, lr}
90007596:	b086      	sub	sp, #24
90007598:	af00      	add	r7, sp, #0
9000759a:	60f8      	str	r0, [r7, #12]
9000759c:	60b9      	str	r1, [r7, #8]
9000759e:	607a      	str	r2, [r7, #4]
900075a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
900075a2:	2300      	movs	r3, #0
900075a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900075a6:	68fb      	ldr	r3, [r7, #12]
900075a8:	68ba      	ldr	r2, [r7, #8]
900075aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900075ac:	68fb      	ldr	r3, [r7, #12]
900075ae:	68fa      	ldr	r2, [r7, #12]
900075b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
900075b2:	68ba      	ldr	r2, [r7, #8]
900075b4:	687b      	ldr	r3, [r7, #4]
900075b6:	429a      	cmp	r2, r3
900075b8:	d812      	bhi.n	900075e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900075ba:	687a      	ldr	r2, [r7, #4]
900075bc:	683b      	ldr	r3, [r7, #0]
900075be:	1ad2      	subs	r2, r2, r3
900075c0:	68fb      	ldr	r3, [r7, #12]
900075c2:	699b      	ldr	r3, [r3, #24]
900075c4:	429a      	cmp	r2, r3
900075c6:	d302      	bcc.n	900075ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
900075c8:	2301      	movs	r3, #1
900075ca:	617b      	str	r3, [r7, #20]
900075cc:	e01b      	b.n	90007606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900075ce:	4b10      	ldr	r3, [pc, #64]	; (90007610 <prvInsertTimerInActiveList+0x7c>)
900075d0:	681a      	ldr	r2, [r3, #0]
900075d2:	68fb      	ldr	r3, [r7, #12]
900075d4:	3304      	adds	r3, #4
900075d6:	4619      	mov	r1, r3
900075d8:	4610      	mov	r0, r2
900075da:	f7fe f9de 	bl	9000599a <vListInsert>
900075de:	e012      	b.n	90007606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
900075e0:	687a      	ldr	r2, [r7, #4]
900075e2:	683b      	ldr	r3, [r7, #0]
900075e4:	429a      	cmp	r2, r3
900075e6:	d206      	bcs.n	900075f6 <prvInsertTimerInActiveList+0x62>
900075e8:	68ba      	ldr	r2, [r7, #8]
900075ea:	683b      	ldr	r3, [r7, #0]
900075ec:	429a      	cmp	r2, r3
900075ee:	d302      	bcc.n	900075f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
900075f0:	2301      	movs	r3, #1
900075f2:	617b      	str	r3, [r7, #20]
900075f4:	e007      	b.n	90007606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900075f6:	4b07      	ldr	r3, [pc, #28]	; (90007614 <prvInsertTimerInActiveList+0x80>)
900075f8:	681a      	ldr	r2, [r3, #0]
900075fa:	68fb      	ldr	r3, [r7, #12]
900075fc:	3304      	adds	r3, #4
900075fe:	4619      	mov	r1, r3
90007600:	4610      	mov	r0, r2
90007602:	f7fe f9ca 	bl	9000599a <vListInsert>
		}
	}

	return xProcessTimerNow;
90007606:	697b      	ldr	r3, [r7, #20]
}
90007608:	4618      	mov	r0, r3
9000760a:	3718      	adds	r7, #24
9000760c:	46bd      	mov	sp, r7
9000760e:	bd80      	pop	{r7, pc}
90007610:	24000e74 	.word	0x24000e74
90007614:	24000e70 	.word	0x24000e70

90007618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
90007618:	b580      	push	{r7, lr}
9000761a:	b08e      	sub	sp, #56	; 0x38
9000761c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000761e:	e0ca      	b.n	900077b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90007620:	687b      	ldr	r3, [r7, #4]
90007622:	2b00      	cmp	r3, #0
90007624:	da18      	bge.n	90007658 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
90007626:	1d3b      	adds	r3, r7, #4
90007628:	3304      	adds	r3, #4
9000762a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
9000762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000762e:	2b00      	cmp	r3, #0
90007630:	d10a      	bne.n	90007648 <prvProcessReceivedCommands+0x30>
	__asm volatile
90007632:	f04f 0350 	mov.w	r3, #80	; 0x50
90007636:	f383 8811 	msr	BASEPRI, r3
9000763a:	f3bf 8f6f 	isb	sy
9000763e:	f3bf 8f4f 	dsb	sy
90007642:	61fb      	str	r3, [r7, #28]
}
90007644:	bf00      	nop
90007646:	e7fe      	b.n	90007646 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000764a:	681b      	ldr	r3, [r3, #0]
9000764c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000764e:	6850      	ldr	r0, [r2, #4]
90007650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90007652:	6892      	ldr	r2, [r2, #8]
90007654:	4611      	mov	r1, r2
90007656:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
90007658:	687b      	ldr	r3, [r7, #4]
9000765a:	2b00      	cmp	r3, #0
9000765c:	f2c0 80aa 	blt.w	900077b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90007660:	68fb      	ldr	r3, [r7, #12]
90007662:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
90007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007666:	695b      	ldr	r3, [r3, #20]
90007668:	2b00      	cmp	r3, #0
9000766a:	d004      	beq.n	90007676 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000766e:	3304      	adds	r3, #4
90007670:	4618      	mov	r0, r3
90007672:	f7fe f9cb 	bl	90005a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
90007676:	463b      	mov	r3, r7
90007678:	4618      	mov	r0, r3
9000767a:	f7ff ff6b 	bl	90007554 <prvSampleTimeNow>
9000767e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
90007680:	687b      	ldr	r3, [r7, #4]
90007682:	2b09      	cmp	r3, #9
90007684:	f200 8097 	bhi.w	900077b6 <prvProcessReceivedCommands+0x19e>
90007688:	a201      	add	r2, pc, #4	; (adr r2, 90007690 <prvProcessReceivedCommands+0x78>)
9000768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000768e:	bf00      	nop
90007690:	900076b9 	.word	0x900076b9
90007694:	900076b9 	.word	0x900076b9
90007698:	900076b9 	.word	0x900076b9
9000769c:	9000772d 	.word	0x9000772d
900076a0:	90007741 	.word	0x90007741
900076a4:	9000778b 	.word	0x9000778b
900076a8:	900076b9 	.word	0x900076b9
900076ac:	900076b9 	.word	0x900076b9
900076b0:	9000772d 	.word	0x9000772d
900076b4:	90007741 	.word	0x90007741
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900076be:	f043 0301 	orr.w	r3, r3, #1
900076c2:	b2da      	uxtb	r2, r3
900076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
900076ca:	68ba      	ldr	r2, [r7, #8]
900076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076ce:	699b      	ldr	r3, [r3, #24]
900076d0:	18d1      	adds	r1, r2, r3
900076d2:	68bb      	ldr	r3, [r7, #8]
900076d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900076d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900076d8:	f7ff ff5c 	bl	90007594 <prvInsertTimerInActiveList>
900076dc:	4603      	mov	r3, r0
900076de:	2b00      	cmp	r3, #0
900076e0:	d069      	beq.n	900077b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076e4:	6a1b      	ldr	r3, [r3, #32]
900076e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
900076e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900076f0:	f003 0304 	and.w	r3, r3, #4
900076f4:	2b00      	cmp	r3, #0
900076f6:	d05e      	beq.n	900077b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900076f8:	68ba      	ldr	r2, [r7, #8]
900076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
900076fc:	699b      	ldr	r3, [r3, #24]
900076fe:	441a      	add	r2, r3
90007700:	2300      	movs	r3, #0
90007702:	9300      	str	r3, [sp, #0]
90007704:	2300      	movs	r3, #0
90007706:	2100      	movs	r1, #0
90007708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000770a:	f7ff fe05 	bl	90007318 <xTimerGenericCommand>
9000770e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
90007710:	6a3b      	ldr	r3, [r7, #32]
90007712:	2b00      	cmp	r3, #0
90007714:	d14f      	bne.n	900077b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
90007716:	f04f 0350 	mov.w	r3, #80	; 0x50
9000771a:	f383 8811 	msr	BASEPRI, r3
9000771e:	f3bf 8f6f 	isb	sy
90007722:	f3bf 8f4f 	dsb	sy
90007726:	61bb      	str	r3, [r7, #24]
}
90007728:	bf00      	nop
9000772a:	e7fe      	b.n	9000772a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000772e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90007732:	f023 0301 	bic.w	r3, r3, #1
90007736:	b2da      	uxtb	r2, r3
90007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000773a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
9000773e:	e03a      	b.n	900077b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90007746:	f043 0301 	orr.w	r3, r3, #1
9000774a:	b2da      	uxtb	r2, r3
9000774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000774e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90007752:	68ba      	ldr	r2, [r7, #8]
90007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007756:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000775a:	699b      	ldr	r3, [r3, #24]
9000775c:	2b00      	cmp	r3, #0
9000775e:	d10a      	bne.n	90007776 <prvProcessReceivedCommands+0x15e>
	__asm volatile
90007760:	f04f 0350 	mov.w	r3, #80	; 0x50
90007764:	f383 8811 	msr	BASEPRI, r3
90007768:	f3bf 8f6f 	isb	sy
9000776c:	f3bf 8f4f 	dsb	sy
90007770:	617b      	str	r3, [r7, #20]
}
90007772:	bf00      	nop
90007774:	e7fe      	b.n	90007774 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007778:	699a      	ldr	r2, [r3, #24]
9000777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000777c:	18d1      	adds	r1, r2, r3
9000777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90007784:	f7ff ff06 	bl	90007594 <prvInsertTimerInActiveList>
					break;
90007788:	e015      	b.n	900077b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000778c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90007790:	f003 0302 	and.w	r3, r3, #2
90007794:	2b00      	cmp	r3, #0
90007796:	d103      	bne.n	900077a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
90007798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000779a:	f000 fbe1 	bl	90007f60 <vPortFree>
9000779e:	e00a      	b.n	900077b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
900077a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
900077a6:	f023 0301 	bic.w	r3, r3, #1
900077aa:	b2da      	uxtb	r2, r3
900077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
900077ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
900077b2:	e000      	b.n	900077b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
900077b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900077b6:	4b08      	ldr	r3, [pc, #32]	; (900077d8 <prvProcessReceivedCommands+0x1c0>)
900077b8:	681b      	ldr	r3, [r3, #0]
900077ba:	1d39      	adds	r1, r7, #4
900077bc:	2200      	movs	r2, #0
900077be:	4618      	mov	r0, r3
900077c0:	f7fe fbec 	bl	90005f9c <xQueueReceive>
900077c4:	4603      	mov	r3, r0
900077c6:	2b00      	cmp	r3, #0
900077c8:	f47f af2a 	bne.w	90007620 <prvProcessReceivedCommands+0x8>
	}
}
900077cc:	bf00      	nop
900077ce:	bf00      	nop
900077d0:	3730      	adds	r7, #48	; 0x30
900077d2:	46bd      	mov	sp, r7
900077d4:	bd80      	pop	{r7, pc}
900077d6:	bf00      	nop
900077d8:	24000e78 	.word	0x24000e78

900077dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
900077dc:	b580      	push	{r7, lr}
900077de:	b088      	sub	sp, #32
900077e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900077e2:	e048      	b.n	90007876 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900077e4:	4b2d      	ldr	r3, [pc, #180]	; (9000789c <prvSwitchTimerLists+0xc0>)
900077e6:	681b      	ldr	r3, [r3, #0]
900077e8:	68db      	ldr	r3, [r3, #12]
900077ea:	681b      	ldr	r3, [r3, #0]
900077ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900077ee:	4b2b      	ldr	r3, [pc, #172]	; (9000789c <prvSwitchTimerLists+0xc0>)
900077f0:	681b      	ldr	r3, [r3, #0]
900077f2:	68db      	ldr	r3, [r3, #12]
900077f4:	68db      	ldr	r3, [r3, #12]
900077f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900077f8:	68fb      	ldr	r3, [r7, #12]
900077fa:	3304      	adds	r3, #4
900077fc:	4618      	mov	r0, r3
900077fe:	f7fe f905 	bl	90005a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90007802:	68fb      	ldr	r3, [r7, #12]
90007804:	6a1b      	ldr	r3, [r3, #32]
90007806:	68f8      	ldr	r0, [r7, #12]
90007808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000780a:	68fb      	ldr	r3, [r7, #12]
9000780c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
90007810:	f003 0304 	and.w	r3, r3, #4
90007814:	2b00      	cmp	r3, #0
90007816:	d02e      	beq.n	90007876 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90007818:	68fb      	ldr	r3, [r7, #12]
9000781a:	699b      	ldr	r3, [r3, #24]
9000781c:	693a      	ldr	r2, [r7, #16]
9000781e:	4413      	add	r3, r2
90007820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
90007822:	68ba      	ldr	r2, [r7, #8]
90007824:	693b      	ldr	r3, [r7, #16]
90007826:	429a      	cmp	r2, r3
90007828:	d90e      	bls.n	90007848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000782a:	68fb      	ldr	r3, [r7, #12]
9000782c:	68ba      	ldr	r2, [r7, #8]
9000782e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90007830:	68fb      	ldr	r3, [r7, #12]
90007832:	68fa      	ldr	r2, [r7, #12]
90007834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90007836:	4b19      	ldr	r3, [pc, #100]	; (9000789c <prvSwitchTimerLists+0xc0>)
90007838:	681a      	ldr	r2, [r3, #0]
9000783a:	68fb      	ldr	r3, [r7, #12]
9000783c:	3304      	adds	r3, #4
9000783e:	4619      	mov	r1, r3
90007840:	4610      	mov	r0, r2
90007842:	f7fe f8aa 	bl	9000599a <vListInsert>
90007846:	e016      	b.n	90007876 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
90007848:	2300      	movs	r3, #0
9000784a:	9300      	str	r3, [sp, #0]
9000784c:	2300      	movs	r3, #0
9000784e:	693a      	ldr	r2, [r7, #16]
90007850:	2100      	movs	r1, #0
90007852:	68f8      	ldr	r0, [r7, #12]
90007854:	f7ff fd60 	bl	90007318 <xTimerGenericCommand>
90007858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
9000785a:	687b      	ldr	r3, [r7, #4]
9000785c:	2b00      	cmp	r3, #0
9000785e:	d10a      	bne.n	90007876 <prvSwitchTimerLists+0x9a>
	__asm volatile
90007860:	f04f 0350 	mov.w	r3, #80	; 0x50
90007864:	f383 8811 	msr	BASEPRI, r3
90007868:	f3bf 8f6f 	isb	sy
9000786c:	f3bf 8f4f 	dsb	sy
90007870:	603b      	str	r3, [r7, #0]
}
90007872:	bf00      	nop
90007874:	e7fe      	b.n	90007874 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90007876:	4b09      	ldr	r3, [pc, #36]	; (9000789c <prvSwitchTimerLists+0xc0>)
90007878:	681b      	ldr	r3, [r3, #0]
9000787a:	681b      	ldr	r3, [r3, #0]
9000787c:	2b00      	cmp	r3, #0
9000787e:	d1b1      	bne.n	900077e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
90007880:	4b06      	ldr	r3, [pc, #24]	; (9000789c <prvSwitchTimerLists+0xc0>)
90007882:	681b      	ldr	r3, [r3, #0]
90007884:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
90007886:	4b06      	ldr	r3, [pc, #24]	; (900078a0 <prvSwitchTimerLists+0xc4>)
90007888:	681b      	ldr	r3, [r3, #0]
9000788a:	4a04      	ldr	r2, [pc, #16]	; (9000789c <prvSwitchTimerLists+0xc0>)
9000788c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000788e:	4a04      	ldr	r2, [pc, #16]	; (900078a0 <prvSwitchTimerLists+0xc4>)
90007890:	697b      	ldr	r3, [r7, #20]
90007892:	6013      	str	r3, [r2, #0]
}
90007894:	bf00      	nop
90007896:	3718      	adds	r7, #24
90007898:	46bd      	mov	sp, r7
9000789a:	bd80      	pop	{r7, pc}
9000789c:	24000e70 	.word	0x24000e70
900078a0:	24000e74 	.word	0x24000e74

900078a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
900078a4:	b580      	push	{r7, lr}
900078a6:	b082      	sub	sp, #8
900078a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
900078aa:	f000 f96b 	bl	90007b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
900078ae:	4b15      	ldr	r3, [pc, #84]	; (90007904 <prvCheckForValidListAndQueue+0x60>)
900078b0:	681b      	ldr	r3, [r3, #0]
900078b2:	2b00      	cmp	r3, #0
900078b4:	d120      	bne.n	900078f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
900078b6:	4814      	ldr	r0, [pc, #80]	; (90007908 <prvCheckForValidListAndQueue+0x64>)
900078b8:	f7fe f81e 	bl	900058f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
900078bc:	4813      	ldr	r0, [pc, #76]	; (9000790c <prvCheckForValidListAndQueue+0x68>)
900078be:	f7fe f81b 	bl	900058f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
900078c2:	4b13      	ldr	r3, [pc, #76]	; (90007910 <prvCheckForValidListAndQueue+0x6c>)
900078c4:	4a10      	ldr	r2, [pc, #64]	; (90007908 <prvCheckForValidListAndQueue+0x64>)
900078c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
900078c8:	4b12      	ldr	r3, [pc, #72]	; (90007914 <prvCheckForValidListAndQueue+0x70>)
900078ca:	4a10      	ldr	r2, [pc, #64]	; (9000790c <prvCheckForValidListAndQueue+0x68>)
900078cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900078ce:	2300      	movs	r3, #0
900078d0:	9300      	str	r3, [sp, #0]
900078d2:	4b11      	ldr	r3, [pc, #68]	; (90007918 <prvCheckForValidListAndQueue+0x74>)
900078d4:	4a11      	ldr	r2, [pc, #68]	; (9000791c <prvCheckForValidListAndQueue+0x78>)
900078d6:	2110      	movs	r1, #16
900078d8:	200a      	movs	r0, #10
900078da:	f7fe f929 	bl	90005b30 <xQueueGenericCreateStatic>
900078de:	4603      	mov	r3, r0
900078e0:	4a08      	ldr	r2, [pc, #32]	; (90007904 <prvCheckForValidListAndQueue+0x60>)
900078e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
900078e4:	4b07      	ldr	r3, [pc, #28]	; (90007904 <prvCheckForValidListAndQueue+0x60>)
900078e6:	681b      	ldr	r3, [r3, #0]
900078e8:	2b00      	cmp	r3, #0
900078ea:	d005      	beq.n	900078f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900078ec:	4b05      	ldr	r3, [pc, #20]	; (90007904 <prvCheckForValidListAndQueue+0x60>)
900078ee:	681b      	ldr	r3, [r3, #0]
900078f0:	490b      	ldr	r1, [pc, #44]	; (90007920 <prvCheckForValidListAndQueue+0x7c>)
900078f2:	4618      	mov	r0, r3
900078f4:	f7fe fd42 	bl	9000637c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900078f8:	f000 f974 	bl	90007be4 <vPortExitCritical>
}
900078fc:	bf00      	nop
900078fe:	46bd      	mov	sp, r7
90007900:	bd80      	pop	{r7, pc}
90007902:	bf00      	nop
90007904:	24000e78 	.word	0x24000e78
90007908:	24000e48 	.word	0x24000e48
9000790c:	24000e5c 	.word	0x24000e5c
90007910:	24000e70 	.word	0x24000e70
90007914:	24000e74 	.word	0x24000e74
90007918:	24000f24 	.word	0x24000f24
9000791c:	24000e84 	.word	0x24000e84
90007920:	90008d84 	.word	0x90008d84

90007924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
90007924:	b480      	push	{r7}
90007926:	b085      	sub	sp, #20
90007928:	af00      	add	r7, sp, #0
9000792a:	60f8      	str	r0, [r7, #12]
9000792c:	60b9      	str	r1, [r7, #8]
9000792e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
90007930:	68fb      	ldr	r3, [r7, #12]
90007932:	3b04      	subs	r3, #4
90007934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
90007936:	68fb      	ldr	r3, [r7, #12]
90007938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000793c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000793e:	68fb      	ldr	r3, [r7, #12]
90007940:	3b04      	subs	r3, #4
90007942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
90007944:	68bb      	ldr	r3, [r7, #8]
90007946:	f023 0201 	bic.w	r2, r3, #1
9000794a:	68fb      	ldr	r3, [r7, #12]
9000794c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
9000794e:	68fb      	ldr	r3, [r7, #12]
90007950:	3b04      	subs	r3, #4
90007952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
90007954:	4a0c      	ldr	r2, [pc, #48]	; (90007988 <pxPortInitialiseStack+0x64>)
90007956:	68fb      	ldr	r3, [r7, #12]
90007958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
9000795a:	68fb      	ldr	r3, [r7, #12]
9000795c:	3b14      	subs	r3, #20
9000795e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
90007960:	687a      	ldr	r2, [r7, #4]
90007962:	68fb      	ldr	r3, [r7, #12]
90007964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
90007966:	68fb      	ldr	r3, [r7, #12]
90007968:	3b04      	subs	r3, #4
9000796a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000796c:	68fb      	ldr	r3, [r7, #12]
9000796e:	f06f 0202 	mvn.w	r2, #2
90007972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
90007974:	68fb      	ldr	r3, [r7, #12]
90007976:	3b20      	subs	r3, #32
90007978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
9000797a:	68fb      	ldr	r3, [r7, #12]
}
9000797c:	4618      	mov	r0, r3
9000797e:	3714      	adds	r7, #20
90007980:	46bd      	mov	sp, r7
90007982:	f85d 7b04 	ldr.w	r7, [sp], #4
90007986:	4770      	bx	lr
90007988:	9000798d 	.word	0x9000798d

9000798c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
9000798c:	b480      	push	{r7}
9000798e:	b085      	sub	sp, #20
90007990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
90007992:	2300      	movs	r3, #0
90007994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
90007996:	4b12      	ldr	r3, [pc, #72]	; (900079e0 <prvTaskExitError+0x54>)
90007998:	681b      	ldr	r3, [r3, #0]
9000799a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000799e:	d00a      	beq.n	900079b6 <prvTaskExitError+0x2a>
	__asm volatile
900079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900079a4:	f383 8811 	msr	BASEPRI, r3
900079a8:	f3bf 8f6f 	isb	sy
900079ac:	f3bf 8f4f 	dsb	sy
900079b0:	60fb      	str	r3, [r7, #12]
}
900079b2:	bf00      	nop
900079b4:	e7fe      	b.n	900079b4 <prvTaskExitError+0x28>
	__asm volatile
900079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
900079ba:	f383 8811 	msr	BASEPRI, r3
900079be:	f3bf 8f6f 	isb	sy
900079c2:	f3bf 8f4f 	dsb	sy
900079c6:	60bb      	str	r3, [r7, #8]
}
900079c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
900079ca:	bf00      	nop
900079cc:	687b      	ldr	r3, [r7, #4]
900079ce:	2b00      	cmp	r3, #0
900079d0:	d0fc      	beq.n	900079cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
900079d2:	bf00      	nop
900079d4:	bf00      	nop
900079d6:	3714      	adds	r7, #20
900079d8:	46bd      	mov	sp, r7
900079da:	f85d 7b04 	ldr.w	r7, [sp], #4
900079de:	4770      	bx	lr
900079e0:	24000010 	.word	0x24000010
	...

900079f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
900079f0:	4b07      	ldr	r3, [pc, #28]	; (90007a10 <pxCurrentTCBConst2>)
900079f2:	6819      	ldr	r1, [r3, #0]
900079f4:	6808      	ldr	r0, [r1, #0]
900079f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900079fa:	f380 8809 	msr	PSP, r0
900079fe:	f3bf 8f6f 	isb	sy
90007a02:	f04f 0000 	mov.w	r0, #0
90007a06:	f380 8811 	msr	BASEPRI, r0
90007a0a:	4770      	bx	lr
90007a0c:	f3af 8000 	nop.w

90007a10 <pxCurrentTCBConst2>:
90007a10:	24000948 	.word	0x24000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
90007a14:	bf00      	nop
90007a16:	bf00      	nop

90007a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90007a18:	4808      	ldr	r0, [pc, #32]	; (90007a3c <prvPortStartFirstTask+0x24>)
90007a1a:	6800      	ldr	r0, [r0, #0]
90007a1c:	6800      	ldr	r0, [r0, #0]
90007a1e:	f380 8808 	msr	MSP, r0
90007a22:	f04f 0000 	mov.w	r0, #0
90007a26:	f380 8814 	msr	CONTROL, r0
90007a2a:	b662      	cpsie	i
90007a2c:	b661      	cpsie	f
90007a2e:	f3bf 8f4f 	dsb	sy
90007a32:	f3bf 8f6f 	isb	sy
90007a36:	df00      	svc	0
90007a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
90007a3a:	bf00      	nop
90007a3c:	e000ed08 	.word	0xe000ed08

90007a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
90007a40:	b580      	push	{r7, lr}
90007a42:	b086      	sub	sp, #24
90007a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
90007a46:	4b46      	ldr	r3, [pc, #280]	; (90007b60 <xPortStartScheduler+0x120>)
90007a48:	681b      	ldr	r3, [r3, #0]
90007a4a:	4a46      	ldr	r2, [pc, #280]	; (90007b64 <xPortStartScheduler+0x124>)
90007a4c:	4293      	cmp	r3, r2
90007a4e:	d10a      	bne.n	90007a66 <xPortStartScheduler+0x26>
	__asm volatile
90007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a54:	f383 8811 	msr	BASEPRI, r3
90007a58:	f3bf 8f6f 	isb	sy
90007a5c:	f3bf 8f4f 	dsb	sy
90007a60:	613b      	str	r3, [r7, #16]
}
90007a62:	bf00      	nop
90007a64:	e7fe      	b.n	90007a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
90007a66:	4b3e      	ldr	r3, [pc, #248]	; (90007b60 <xPortStartScheduler+0x120>)
90007a68:	681b      	ldr	r3, [r3, #0]
90007a6a:	4a3f      	ldr	r2, [pc, #252]	; (90007b68 <xPortStartScheduler+0x128>)
90007a6c:	4293      	cmp	r3, r2
90007a6e:	d10a      	bne.n	90007a86 <xPortStartScheduler+0x46>
	__asm volatile
90007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a74:	f383 8811 	msr	BASEPRI, r3
90007a78:	f3bf 8f6f 	isb	sy
90007a7c:	f3bf 8f4f 	dsb	sy
90007a80:	60fb      	str	r3, [r7, #12]
}
90007a82:	bf00      	nop
90007a84:	e7fe      	b.n	90007a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
90007a86:	4b39      	ldr	r3, [pc, #228]	; (90007b6c <xPortStartScheduler+0x12c>)
90007a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90007a8a:	697b      	ldr	r3, [r7, #20]
90007a8c:	781b      	ldrb	r3, [r3, #0]
90007a8e:	b2db      	uxtb	r3, r3
90007a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90007a92:	697b      	ldr	r3, [r7, #20]
90007a94:	22ff      	movs	r2, #255	; 0xff
90007a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
90007a98:	697b      	ldr	r3, [r7, #20]
90007a9a:	781b      	ldrb	r3, [r3, #0]
90007a9c:	b2db      	uxtb	r3, r3
90007a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90007aa0:	78fb      	ldrb	r3, [r7, #3]
90007aa2:	b2db      	uxtb	r3, r3
90007aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
90007aa8:	b2da      	uxtb	r2, r3
90007aaa:	4b31      	ldr	r3, [pc, #196]	; (90007b70 <xPortStartScheduler+0x130>)
90007aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90007aae:	4b31      	ldr	r3, [pc, #196]	; (90007b74 <xPortStartScheduler+0x134>)
90007ab0:	2207      	movs	r2, #7
90007ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90007ab4:	e009      	b.n	90007aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
90007ab6:	4b2f      	ldr	r3, [pc, #188]	; (90007b74 <xPortStartScheduler+0x134>)
90007ab8:	681b      	ldr	r3, [r3, #0]
90007aba:	3b01      	subs	r3, #1
90007abc:	4a2d      	ldr	r2, [pc, #180]	; (90007b74 <xPortStartScheduler+0x134>)
90007abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90007ac0:	78fb      	ldrb	r3, [r7, #3]
90007ac2:	b2db      	uxtb	r3, r3
90007ac4:	005b      	lsls	r3, r3, #1
90007ac6:	b2db      	uxtb	r3, r3
90007ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90007aca:	78fb      	ldrb	r3, [r7, #3]
90007acc:	b2db      	uxtb	r3, r3
90007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
90007ad2:	2b80      	cmp	r3, #128	; 0x80
90007ad4:	d0ef      	beq.n	90007ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90007ad6:	4b27      	ldr	r3, [pc, #156]	; (90007b74 <xPortStartScheduler+0x134>)
90007ad8:	681b      	ldr	r3, [r3, #0]
90007ada:	f1c3 0307 	rsb	r3, r3, #7
90007ade:	2b04      	cmp	r3, #4
90007ae0:	d00a      	beq.n	90007af8 <xPortStartScheduler+0xb8>
	__asm volatile
90007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ae6:	f383 8811 	msr	BASEPRI, r3
90007aea:	f3bf 8f6f 	isb	sy
90007aee:	f3bf 8f4f 	dsb	sy
90007af2:	60bb      	str	r3, [r7, #8]
}
90007af4:	bf00      	nop
90007af6:	e7fe      	b.n	90007af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
90007af8:	4b1e      	ldr	r3, [pc, #120]	; (90007b74 <xPortStartScheduler+0x134>)
90007afa:	681b      	ldr	r3, [r3, #0]
90007afc:	021b      	lsls	r3, r3, #8
90007afe:	4a1d      	ldr	r2, [pc, #116]	; (90007b74 <xPortStartScheduler+0x134>)
90007b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90007b02:	4b1c      	ldr	r3, [pc, #112]	; (90007b74 <xPortStartScheduler+0x134>)
90007b04:	681b      	ldr	r3, [r3, #0]
90007b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007b0a:	4a1a      	ldr	r2, [pc, #104]	; (90007b74 <xPortStartScheduler+0x134>)
90007b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
90007b0e:	687b      	ldr	r3, [r7, #4]
90007b10:	b2da      	uxtb	r2, r3
90007b12:	697b      	ldr	r3, [r7, #20]
90007b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90007b16:	4b18      	ldr	r3, [pc, #96]	; (90007b78 <xPortStartScheduler+0x138>)
90007b18:	681b      	ldr	r3, [r3, #0]
90007b1a:	4a17      	ldr	r2, [pc, #92]	; (90007b78 <xPortStartScheduler+0x138>)
90007b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90007b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90007b22:	4b15      	ldr	r3, [pc, #84]	; (90007b78 <xPortStartScheduler+0x138>)
90007b24:	681b      	ldr	r3, [r3, #0]
90007b26:	4a14      	ldr	r2, [pc, #80]	; (90007b78 <xPortStartScheduler+0x138>)
90007b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
90007b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
90007b2e:	f000 f8dd 	bl	90007cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
90007b32:	4b12      	ldr	r3, [pc, #72]	; (90007b7c <xPortStartScheduler+0x13c>)
90007b34:	2200      	movs	r2, #0
90007b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
90007b38:	f000 f8fc 	bl	90007d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
90007b3c:	4b10      	ldr	r3, [pc, #64]	; (90007b80 <xPortStartScheduler+0x140>)
90007b3e:	681b      	ldr	r3, [r3, #0]
90007b40:	4a0f      	ldr	r2, [pc, #60]	; (90007b80 <xPortStartScheduler+0x140>)
90007b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
90007b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
90007b48:	f7ff ff66 	bl	90007a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
90007b4c:	f7ff f846 	bl	90006bdc <vTaskSwitchContext>
	prvTaskExitError();
90007b50:	f7ff ff1c 	bl	9000798c <prvTaskExitError>

	/* Should not get here! */
	return 0;
90007b54:	2300      	movs	r3, #0
}
90007b56:	4618      	mov	r0, r3
90007b58:	3718      	adds	r7, #24
90007b5a:	46bd      	mov	sp, r7
90007b5c:	bd80      	pop	{r7, pc}
90007b5e:	bf00      	nop
90007b60:	e000ed00 	.word	0xe000ed00
90007b64:	410fc271 	.word	0x410fc271
90007b68:	410fc270 	.word	0x410fc270
90007b6c:	e000e400 	.word	0xe000e400
90007b70:	24000f74 	.word	0x24000f74
90007b74:	24000f78 	.word	0x24000f78
90007b78:	e000ed20 	.word	0xe000ed20
90007b7c:	24000010 	.word	0x24000010
90007b80:	e000ef34 	.word	0xe000ef34

90007b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
90007b84:	b480      	push	{r7}
90007b86:	b083      	sub	sp, #12
90007b88:	af00      	add	r7, sp, #0
	__asm volatile
90007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
90007b8e:	f383 8811 	msr	BASEPRI, r3
90007b92:	f3bf 8f6f 	isb	sy
90007b96:	f3bf 8f4f 	dsb	sy
90007b9a:	607b      	str	r3, [r7, #4]
}
90007b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
90007b9e:	4b0f      	ldr	r3, [pc, #60]	; (90007bdc <vPortEnterCritical+0x58>)
90007ba0:	681b      	ldr	r3, [r3, #0]
90007ba2:	3301      	adds	r3, #1
90007ba4:	4a0d      	ldr	r2, [pc, #52]	; (90007bdc <vPortEnterCritical+0x58>)
90007ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
90007ba8:	4b0c      	ldr	r3, [pc, #48]	; (90007bdc <vPortEnterCritical+0x58>)
90007baa:	681b      	ldr	r3, [r3, #0]
90007bac:	2b01      	cmp	r3, #1
90007bae:	d10f      	bne.n	90007bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90007bb0:	4b0b      	ldr	r3, [pc, #44]	; (90007be0 <vPortEnterCritical+0x5c>)
90007bb2:	681b      	ldr	r3, [r3, #0]
90007bb4:	b2db      	uxtb	r3, r3
90007bb6:	2b00      	cmp	r3, #0
90007bb8:	d00a      	beq.n	90007bd0 <vPortEnterCritical+0x4c>
	__asm volatile
90007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
90007bbe:	f383 8811 	msr	BASEPRI, r3
90007bc2:	f3bf 8f6f 	isb	sy
90007bc6:	f3bf 8f4f 	dsb	sy
90007bca:	603b      	str	r3, [r7, #0]
}
90007bcc:	bf00      	nop
90007bce:	e7fe      	b.n	90007bce <vPortEnterCritical+0x4a>
	}
}
90007bd0:	bf00      	nop
90007bd2:	370c      	adds	r7, #12
90007bd4:	46bd      	mov	sp, r7
90007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
90007bda:	4770      	bx	lr
90007bdc:	24000010 	.word	0x24000010
90007be0:	e000ed04 	.word	0xe000ed04

90007be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
90007be4:	b480      	push	{r7}
90007be6:	b083      	sub	sp, #12
90007be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
90007bea:	4b12      	ldr	r3, [pc, #72]	; (90007c34 <vPortExitCritical+0x50>)
90007bec:	681b      	ldr	r3, [r3, #0]
90007bee:	2b00      	cmp	r3, #0
90007bf0:	d10a      	bne.n	90007c08 <vPortExitCritical+0x24>
	__asm volatile
90007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
90007bf6:	f383 8811 	msr	BASEPRI, r3
90007bfa:	f3bf 8f6f 	isb	sy
90007bfe:	f3bf 8f4f 	dsb	sy
90007c02:	607b      	str	r3, [r7, #4]
}
90007c04:	bf00      	nop
90007c06:	e7fe      	b.n	90007c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
90007c08:	4b0a      	ldr	r3, [pc, #40]	; (90007c34 <vPortExitCritical+0x50>)
90007c0a:	681b      	ldr	r3, [r3, #0]
90007c0c:	3b01      	subs	r3, #1
90007c0e:	4a09      	ldr	r2, [pc, #36]	; (90007c34 <vPortExitCritical+0x50>)
90007c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90007c12:	4b08      	ldr	r3, [pc, #32]	; (90007c34 <vPortExitCritical+0x50>)
90007c14:	681b      	ldr	r3, [r3, #0]
90007c16:	2b00      	cmp	r3, #0
90007c18:	d105      	bne.n	90007c26 <vPortExitCritical+0x42>
90007c1a:	2300      	movs	r3, #0
90007c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
90007c1e:	683b      	ldr	r3, [r7, #0]
90007c20:	f383 8811 	msr	BASEPRI, r3
}
90007c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
90007c26:	bf00      	nop
90007c28:	370c      	adds	r7, #12
90007c2a:	46bd      	mov	sp, r7
90007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90007c30:	4770      	bx	lr
90007c32:	bf00      	nop
90007c34:	24000010 	.word	0x24000010
	...

90007c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
90007c40:	f3ef 8009 	mrs	r0, PSP
90007c44:	f3bf 8f6f 	isb	sy
90007c48:	4b15      	ldr	r3, [pc, #84]	; (90007ca0 <pxCurrentTCBConst>)
90007c4a:	681a      	ldr	r2, [r3, #0]
90007c4c:	f01e 0f10 	tst.w	lr, #16
90007c50:	bf08      	it	eq
90007c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
90007c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007c5a:	6010      	str	r0, [r2, #0]
90007c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
90007c60:	f04f 0050 	mov.w	r0, #80	; 0x50
90007c64:	f380 8811 	msr	BASEPRI, r0
90007c68:	f3bf 8f4f 	dsb	sy
90007c6c:	f3bf 8f6f 	isb	sy
90007c70:	f7fe ffb4 	bl	90006bdc <vTaskSwitchContext>
90007c74:	f04f 0000 	mov.w	r0, #0
90007c78:	f380 8811 	msr	BASEPRI, r0
90007c7c:	bc09      	pop	{r0, r3}
90007c7e:	6819      	ldr	r1, [r3, #0]
90007c80:	6808      	ldr	r0, [r1, #0]
90007c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007c86:	f01e 0f10 	tst.w	lr, #16
90007c8a:	bf08      	it	eq
90007c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
90007c90:	f380 8809 	msr	PSP, r0
90007c94:	f3bf 8f6f 	isb	sy
90007c98:	4770      	bx	lr
90007c9a:	bf00      	nop
90007c9c:	f3af 8000 	nop.w

90007ca0 <pxCurrentTCBConst>:
90007ca0:	24000948 	.word	0x24000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
90007ca4:	bf00      	nop
90007ca6:	bf00      	nop

90007ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
90007ca8:	b580      	push	{r7, lr}
90007caa:	b082      	sub	sp, #8
90007cac:	af00      	add	r7, sp, #0
	__asm volatile
90007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
90007cb2:	f383 8811 	msr	BASEPRI, r3
90007cb6:	f3bf 8f6f 	isb	sy
90007cba:	f3bf 8f4f 	dsb	sy
90007cbe:	607b      	str	r3, [r7, #4]
}
90007cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
90007cc2:	f7fe fed1 	bl	90006a68 <xTaskIncrementTick>
90007cc6:	4603      	mov	r3, r0
90007cc8:	2b00      	cmp	r3, #0
90007cca:	d003      	beq.n	90007cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
90007ccc:	4b06      	ldr	r3, [pc, #24]	; (90007ce8 <xPortSysTickHandler+0x40>)
90007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007cd2:	601a      	str	r2, [r3, #0]
90007cd4:	2300      	movs	r3, #0
90007cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
90007cd8:	683b      	ldr	r3, [r7, #0]
90007cda:	f383 8811 	msr	BASEPRI, r3
}
90007cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
90007ce0:	bf00      	nop
90007ce2:	3708      	adds	r7, #8
90007ce4:	46bd      	mov	sp, r7
90007ce6:	bd80      	pop	{r7, pc}
90007ce8:	e000ed04 	.word	0xe000ed04

90007cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
90007cec:	b480      	push	{r7}
90007cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90007cf0:	4b0b      	ldr	r3, [pc, #44]	; (90007d20 <vPortSetupTimerInterrupt+0x34>)
90007cf2:	2200      	movs	r2, #0
90007cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90007cf6:	4b0b      	ldr	r3, [pc, #44]	; (90007d24 <vPortSetupTimerInterrupt+0x38>)
90007cf8:	2200      	movs	r2, #0
90007cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
90007cfc:	4b0a      	ldr	r3, [pc, #40]	; (90007d28 <vPortSetupTimerInterrupt+0x3c>)
90007cfe:	681b      	ldr	r3, [r3, #0]
90007d00:	4a0a      	ldr	r2, [pc, #40]	; (90007d2c <vPortSetupTimerInterrupt+0x40>)
90007d02:	fba2 2303 	umull	r2, r3, r2, r3
90007d06:	099b      	lsrs	r3, r3, #6
90007d08:	4a09      	ldr	r2, [pc, #36]	; (90007d30 <vPortSetupTimerInterrupt+0x44>)
90007d0a:	3b01      	subs	r3, #1
90007d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
90007d0e:	4b04      	ldr	r3, [pc, #16]	; (90007d20 <vPortSetupTimerInterrupt+0x34>)
90007d10:	2207      	movs	r2, #7
90007d12:	601a      	str	r2, [r3, #0]
}
90007d14:	bf00      	nop
90007d16:	46bd      	mov	sp, r7
90007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
90007d1c:	4770      	bx	lr
90007d1e:	bf00      	nop
90007d20:	e000e010 	.word	0xe000e010
90007d24:	e000e018 	.word	0xe000e018
90007d28:	24000000 	.word	0x24000000
90007d2c:	10624dd3 	.word	0x10624dd3
90007d30:	e000e014 	.word	0xe000e014

90007d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90007d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90007d44 <vPortEnableVFP+0x10>
90007d38:	6801      	ldr	r1, [r0, #0]
90007d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90007d3e:	6001      	str	r1, [r0, #0]
90007d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90007d42:	bf00      	nop
90007d44:	e000ed88 	.word	0xe000ed88

90007d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
90007d48:	b480      	push	{r7}
90007d4a:	b085      	sub	sp, #20
90007d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
90007d4e:	f3ef 8305 	mrs	r3, IPSR
90007d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
90007d54:	68fb      	ldr	r3, [r7, #12]
90007d56:	2b0f      	cmp	r3, #15
90007d58:	d914      	bls.n	90007d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
90007d5a:	4a17      	ldr	r2, [pc, #92]	; (90007db8 <vPortValidateInterruptPriority+0x70>)
90007d5c:	68fb      	ldr	r3, [r7, #12]
90007d5e:	4413      	add	r3, r2
90007d60:	781b      	ldrb	r3, [r3, #0]
90007d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
90007d64:	4b15      	ldr	r3, [pc, #84]	; (90007dbc <vPortValidateInterruptPriority+0x74>)
90007d66:	781b      	ldrb	r3, [r3, #0]
90007d68:	7afa      	ldrb	r2, [r7, #11]
90007d6a:	429a      	cmp	r2, r3
90007d6c:	d20a      	bcs.n	90007d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
90007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007d72:	f383 8811 	msr	BASEPRI, r3
90007d76:	f3bf 8f6f 	isb	sy
90007d7a:	f3bf 8f4f 	dsb	sy
90007d7e:	607b      	str	r3, [r7, #4]
}
90007d80:	bf00      	nop
90007d82:	e7fe      	b.n	90007d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
90007d84:	4b0e      	ldr	r3, [pc, #56]	; (90007dc0 <vPortValidateInterruptPriority+0x78>)
90007d86:	681b      	ldr	r3, [r3, #0]
90007d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90007d8c:	4b0d      	ldr	r3, [pc, #52]	; (90007dc4 <vPortValidateInterruptPriority+0x7c>)
90007d8e:	681b      	ldr	r3, [r3, #0]
90007d90:	429a      	cmp	r2, r3
90007d92:	d90a      	bls.n	90007daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
90007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
90007d98:	f383 8811 	msr	BASEPRI, r3
90007d9c:	f3bf 8f6f 	isb	sy
90007da0:	f3bf 8f4f 	dsb	sy
90007da4:	603b      	str	r3, [r7, #0]
}
90007da6:	bf00      	nop
90007da8:	e7fe      	b.n	90007da8 <vPortValidateInterruptPriority+0x60>
	}
90007daa:	bf00      	nop
90007dac:	3714      	adds	r7, #20
90007dae:	46bd      	mov	sp, r7
90007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
90007db4:	4770      	bx	lr
90007db6:	bf00      	nop
90007db8:	e000e3f0 	.word	0xe000e3f0
90007dbc:	24000f74 	.word	0x24000f74
90007dc0:	e000ed0c 	.word	0xe000ed0c
90007dc4:	24000f78 	.word	0x24000f78

90007dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90007dc8:	b580      	push	{r7, lr}
90007dca:	b08a      	sub	sp, #40	; 0x28
90007dcc:	af00      	add	r7, sp, #0
90007dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
90007dd0:	2300      	movs	r3, #0
90007dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
90007dd4:	f7fe fd8c 	bl	900068f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90007dd8:	4b5b      	ldr	r3, [pc, #364]	; (90007f48 <pvPortMalloc+0x180>)
90007dda:	681b      	ldr	r3, [r3, #0]
90007ddc:	2b00      	cmp	r3, #0
90007dde:	d101      	bne.n	90007de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
90007de0:	f000 f920 	bl	90008024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90007de4:	4b59      	ldr	r3, [pc, #356]	; (90007f4c <pvPortMalloc+0x184>)
90007de6:	681a      	ldr	r2, [r3, #0]
90007de8:	687b      	ldr	r3, [r7, #4]
90007dea:	4013      	ands	r3, r2
90007dec:	2b00      	cmp	r3, #0
90007dee:	f040 8093 	bne.w	90007f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90007df2:	687b      	ldr	r3, [r7, #4]
90007df4:	2b00      	cmp	r3, #0
90007df6:	d01d      	beq.n	90007e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
90007df8:	2208      	movs	r2, #8
90007dfa:	687b      	ldr	r3, [r7, #4]
90007dfc:	4413      	add	r3, r2
90007dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90007e00:	687b      	ldr	r3, [r7, #4]
90007e02:	f003 0307 	and.w	r3, r3, #7
90007e06:	2b00      	cmp	r3, #0
90007e08:	d014      	beq.n	90007e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
90007e0a:	687b      	ldr	r3, [r7, #4]
90007e0c:	f023 0307 	bic.w	r3, r3, #7
90007e10:	3308      	adds	r3, #8
90007e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
90007e14:	687b      	ldr	r3, [r7, #4]
90007e16:	f003 0307 	and.w	r3, r3, #7
90007e1a:	2b00      	cmp	r3, #0
90007e1c:	d00a      	beq.n	90007e34 <pvPortMalloc+0x6c>
	__asm volatile
90007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007e22:	f383 8811 	msr	BASEPRI, r3
90007e26:	f3bf 8f6f 	isb	sy
90007e2a:	f3bf 8f4f 	dsb	sy
90007e2e:	617b      	str	r3, [r7, #20]
}
90007e30:	bf00      	nop
90007e32:	e7fe      	b.n	90007e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90007e34:	687b      	ldr	r3, [r7, #4]
90007e36:	2b00      	cmp	r3, #0
90007e38:	d06e      	beq.n	90007f18 <pvPortMalloc+0x150>
90007e3a:	4b45      	ldr	r3, [pc, #276]	; (90007f50 <pvPortMalloc+0x188>)
90007e3c:	681b      	ldr	r3, [r3, #0]
90007e3e:	687a      	ldr	r2, [r7, #4]
90007e40:	429a      	cmp	r2, r3
90007e42:	d869      	bhi.n	90007f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
90007e44:	4b43      	ldr	r3, [pc, #268]	; (90007f54 <pvPortMalloc+0x18c>)
90007e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
90007e48:	4b42      	ldr	r3, [pc, #264]	; (90007f54 <pvPortMalloc+0x18c>)
90007e4a:	681b      	ldr	r3, [r3, #0]
90007e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90007e4e:	e004      	b.n	90007e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
90007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
90007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e56:	681b      	ldr	r3, [r3, #0]
90007e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e5c:	685b      	ldr	r3, [r3, #4]
90007e5e:	687a      	ldr	r2, [r7, #4]
90007e60:	429a      	cmp	r2, r3
90007e62:	d903      	bls.n	90007e6c <pvPortMalloc+0xa4>
90007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e66:	681b      	ldr	r3, [r3, #0]
90007e68:	2b00      	cmp	r3, #0
90007e6a:	d1f1      	bne.n	90007e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
90007e6c:	4b36      	ldr	r3, [pc, #216]	; (90007f48 <pvPortMalloc+0x180>)
90007e6e:	681b      	ldr	r3, [r3, #0]
90007e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007e72:	429a      	cmp	r2, r3
90007e74:	d050      	beq.n	90007f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
90007e76:	6a3b      	ldr	r3, [r7, #32]
90007e78:	681b      	ldr	r3, [r3, #0]
90007e7a:	2208      	movs	r2, #8
90007e7c:	4413      	add	r3, r2
90007e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e82:	681a      	ldr	r2, [r3, #0]
90007e84:	6a3b      	ldr	r3, [r7, #32]
90007e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007e8a:	685a      	ldr	r2, [r3, #4]
90007e8c:	687b      	ldr	r3, [r7, #4]
90007e8e:	1ad2      	subs	r2, r2, r3
90007e90:	2308      	movs	r3, #8
90007e92:	005b      	lsls	r3, r3, #1
90007e94:	429a      	cmp	r2, r3
90007e96:	d91f      	bls.n	90007ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
90007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90007e9a:	687b      	ldr	r3, [r7, #4]
90007e9c:	4413      	add	r3, r2
90007e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
90007ea0:	69bb      	ldr	r3, [r7, #24]
90007ea2:	f003 0307 	and.w	r3, r3, #7
90007ea6:	2b00      	cmp	r3, #0
90007ea8:	d00a      	beq.n	90007ec0 <pvPortMalloc+0xf8>
	__asm volatile
90007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
90007eae:	f383 8811 	msr	BASEPRI, r3
90007eb2:	f3bf 8f6f 	isb	sy
90007eb6:	f3bf 8f4f 	dsb	sy
90007eba:	613b      	str	r3, [r7, #16]
}
90007ebc:	bf00      	nop
90007ebe:	e7fe      	b.n	90007ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007ec2:	685a      	ldr	r2, [r3, #4]
90007ec4:	687b      	ldr	r3, [r7, #4]
90007ec6:	1ad2      	subs	r2, r2, r3
90007ec8:	69bb      	ldr	r3, [r7, #24]
90007eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
90007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007ece:	687a      	ldr	r2, [r7, #4]
90007ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90007ed2:	69b8      	ldr	r0, [r7, #24]
90007ed4:	f000 f908 	bl	900080e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
90007ed8:	4b1d      	ldr	r3, [pc, #116]	; (90007f50 <pvPortMalloc+0x188>)
90007eda:	681a      	ldr	r2, [r3, #0]
90007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007ede:	685b      	ldr	r3, [r3, #4]
90007ee0:	1ad3      	subs	r3, r2, r3
90007ee2:	4a1b      	ldr	r2, [pc, #108]	; (90007f50 <pvPortMalloc+0x188>)
90007ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90007ee6:	4b1a      	ldr	r3, [pc, #104]	; (90007f50 <pvPortMalloc+0x188>)
90007ee8:	681a      	ldr	r2, [r3, #0]
90007eea:	4b1b      	ldr	r3, [pc, #108]	; (90007f58 <pvPortMalloc+0x190>)
90007eec:	681b      	ldr	r3, [r3, #0]
90007eee:	429a      	cmp	r2, r3
90007ef0:	d203      	bcs.n	90007efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90007ef2:	4b17      	ldr	r3, [pc, #92]	; (90007f50 <pvPortMalloc+0x188>)
90007ef4:	681b      	ldr	r3, [r3, #0]
90007ef6:	4a18      	ldr	r2, [pc, #96]	; (90007f58 <pvPortMalloc+0x190>)
90007ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
90007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007efc:	685a      	ldr	r2, [r3, #4]
90007efe:	4b13      	ldr	r3, [pc, #76]	; (90007f4c <pvPortMalloc+0x184>)
90007f00:	681b      	ldr	r3, [r3, #0]
90007f02:	431a      	orrs	r2, r3
90007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
90007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007f0a:	2200      	movs	r2, #0
90007f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
90007f0e:	4b13      	ldr	r3, [pc, #76]	; (90007f5c <pvPortMalloc+0x194>)
90007f10:	681b      	ldr	r3, [r3, #0]
90007f12:	3301      	adds	r3, #1
90007f14:	4a11      	ldr	r2, [pc, #68]	; (90007f5c <pvPortMalloc+0x194>)
90007f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90007f18:	f7fe fcf8 	bl	9000690c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
90007f1c:	69fb      	ldr	r3, [r7, #28]
90007f1e:	f003 0307 	and.w	r3, r3, #7
90007f22:	2b00      	cmp	r3, #0
90007f24:	d00a      	beq.n	90007f3c <pvPortMalloc+0x174>
	__asm volatile
90007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
90007f2a:	f383 8811 	msr	BASEPRI, r3
90007f2e:	f3bf 8f6f 	isb	sy
90007f32:	f3bf 8f4f 	dsb	sy
90007f36:	60fb      	str	r3, [r7, #12]
}
90007f38:	bf00      	nop
90007f3a:	e7fe      	b.n	90007f3a <pvPortMalloc+0x172>
	return pvReturn;
90007f3c:	69fb      	ldr	r3, [r7, #28]
}
90007f3e:	4618      	mov	r0, r3
90007f40:	3728      	adds	r7, #40	; 0x28
90007f42:	46bd      	mov	sp, r7
90007f44:	bd80      	pop	{r7, pc}
90007f46:	bf00      	nop
90007f48:	24004b84 	.word	0x24004b84
90007f4c:	24004b98 	.word	0x24004b98
90007f50:	24004b88 	.word	0x24004b88
90007f54:	24004b7c 	.word	0x24004b7c
90007f58:	24004b8c 	.word	0x24004b8c
90007f5c:	24004b90 	.word	0x24004b90

90007f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
90007f60:	b580      	push	{r7, lr}
90007f62:	b086      	sub	sp, #24
90007f64:	af00      	add	r7, sp, #0
90007f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
90007f68:	687b      	ldr	r3, [r7, #4]
90007f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
90007f6c:	687b      	ldr	r3, [r7, #4]
90007f6e:	2b00      	cmp	r3, #0
90007f70:	d04d      	beq.n	9000800e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
90007f72:	2308      	movs	r3, #8
90007f74:	425b      	negs	r3, r3
90007f76:	697a      	ldr	r2, [r7, #20]
90007f78:	4413      	add	r3, r2
90007f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
90007f7c:	697b      	ldr	r3, [r7, #20]
90007f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
90007f80:	693b      	ldr	r3, [r7, #16]
90007f82:	685a      	ldr	r2, [r3, #4]
90007f84:	4b24      	ldr	r3, [pc, #144]	; (90008018 <vPortFree+0xb8>)
90007f86:	681b      	ldr	r3, [r3, #0]
90007f88:	4013      	ands	r3, r2
90007f8a:	2b00      	cmp	r3, #0
90007f8c:	d10a      	bne.n	90007fa4 <vPortFree+0x44>
	__asm volatile
90007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007f92:	f383 8811 	msr	BASEPRI, r3
90007f96:	f3bf 8f6f 	isb	sy
90007f9a:	f3bf 8f4f 	dsb	sy
90007f9e:	60fb      	str	r3, [r7, #12]
}
90007fa0:	bf00      	nop
90007fa2:	e7fe      	b.n	90007fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
90007fa4:	693b      	ldr	r3, [r7, #16]
90007fa6:	681b      	ldr	r3, [r3, #0]
90007fa8:	2b00      	cmp	r3, #0
90007faa:	d00a      	beq.n	90007fc2 <vPortFree+0x62>
	__asm volatile
90007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
90007fb0:	f383 8811 	msr	BASEPRI, r3
90007fb4:	f3bf 8f6f 	isb	sy
90007fb8:	f3bf 8f4f 	dsb	sy
90007fbc:	60bb      	str	r3, [r7, #8]
}
90007fbe:	bf00      	nop
90007fc0:	e7fe      	b.n	90007fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
90007fc2:	693b      	ldr	r3, [r7, #16]
90007fc4:	685a      	ldr	r2, [r3, #4]
90007fc6:	4b14      	ldr	r3, [pc, #80]	; (90008018 <vPortFree+0xb8>)
90007fc8:	681b      	ldr	r3, [r3, #0]
90007fca:	4013      	ands	r3, r2
90007fcc:	2b00      	cmp	r3, #0
90007fce:	d01e      	beq.n	9000800e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
90007fd0:	693b      	ldr	r3, [r7, #16]
90007fd2:	681b      	ldr	r3, [r3, #0]
90007fd4:	2b00      	cmp	r3, #0
90007fd6:	d11a      	bne.n	9000800e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90007fd8:	693b      	ldr	r3, [r7, #16]
90007fda:	685a      	ldr	r2, [r3, #4]
90007fdc:	4b0e      	ldr	r3, [pc, #56]	; (90008018 <vPortFree+0xb8>)
90007fde:	681b      	ldr	r3, [r3, #0]
90007fe0:	43db      	mvns	r3, r3
90007fe2:	401a      	ands	r2, r3
90007fe4:	693b      	ldr	r3, [r7, #16]
90007fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
90007fe8:	f7fe fc82 	bl	900068f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
90007fec:	693b      	ldr	r3, [r7, #16]
90007fee:	685a      	ldr	r2, [r3, #4]
90007ff0:	4b0a      	ldr	r3, [pc, #40]	; (9000801c <vPortFree+0xbc>)
90007ff2:	681b      	ldr	r3, [r3, #0]
90007ff4:	4413      	add	r3, r2
90007ff6:	4a09      	ldr	r2, [pc, #36]	; (9000801c <vPortFree+0xbc>)
90007ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
90007ffa:	6938      	ldr	r0, [r7, #16]
90007ffc:	f000 f874 	bl	900080e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
90008000:	4b07      	ldr	r3, [pc, #28]	; (90008020 <vPortFree+0xc0>)
90008002:	681b      	ldr	r3, [r3, #0]
90008004:	3301      	adds	r3, #1
90008006:	4a06      	ldr	r2, [pc, #24]	; (90008020 <vPortFree+0xc0>)
90008008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
9000800a:	f7fe fc7f 	bl	9000690c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
9000800e:	bf00      	nop
90008010:	3718      	adds	r7, #24
90008012:	46bd      	mov	sp, r7
90008014:	bd80      	pop	{r7, pc}
90008016:	bf00      	nop
90008018:	24004b98 	.word	0x24004b98
9000801c:	24004b88 	.word	0x24004b88
90008020:	24004b94 	.word	0x24004b94

90008024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
90008024:	b480      	push	{r7}
90008026:	b085      	sub	sp, #20
90008028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9000802a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
9000802e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
90008030:	4b27      	ldr	r3, [pc, #156]	; (900080d0 <prvHeapInit+0xac>)
90008032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90008034:	68fb      	ldr	r3, [r7, #12]
90008036:	f003 0307 	and.w	r3, r3, #7
9000803a:	2b00      	cmp	r3, #0
9000803c:	d00c      	beq.n	90008058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000803e:	68fb      	ldr	r3, [r7, #12]
90008040:	3307      	adds	r3, #7
90008042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
90008044:	68fb      	ldr	r3, [r7, #12]
90008046:	f023 0307 	bic.w	r3, r3, #7
9000804a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000804c:	68ba      	ldr	r2, [r7, #8]
9000804e:	68fb      	ldr	r3, [r7, #12]
90008050:	1ad3      	subs	r3, r2, r3
90008052:	4a1f      	ldr	r2, [pc, #124]	; (900080d0 <prvHeapInit+0xac>)
90008054:	4413      	add	r3, r2
90008056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
90008058:	68fb      	ldr	r3, [r7, #12]
9000805a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000805c:	4a1d      	ldr	r2, [pc, #116]	; (900080d4 <prvHeapInit+0xb0>)
9000805e:	687b      	ldr	r3, [r7, #4]
90008060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
90008062:	4b1c      	ldr	r3, [pc, #112]	; (900080d4 <prvHeapInit+0xb0>)
90008064:	2200      	movs	r2, #0
90008066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
90008068:	687b      	ldr	r3, [r7, #4]
9000806a:	68ba      	ldr	r2, [r7, #8]
9000806c:	4413      	add	r3, r2
9000806e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
90008070:	2208      	movs	r2, #8
90008072:	68fb      	ldr	r3, [r7, #12]
90008074:	1a9b      	subs	r3, r3, r2
90008076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
90008078:	68fb      	ldr	r3, [r7, #12]
9000807a:	f023 0307 	bic.w	r3, r3, #7
9000807e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
90008080:	68fb      	ldr	r3, [r7, #12]
90008082:	4a15      	ldr	r2, [pc, #84]	; (900080d8 <prvHeapInit+0xb4>)
90008084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
90008086:	4b14      	ldr	r3, [pc, #80]	; (900080d8 <prvHeapInit+0xb4>)
90008088:	681b      	ldr	r3, [r3, #0]
9000808a:	2200      	movs	r2, #0
9000808c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
9000808e:	4b12      	ldr	r3, [pc, #72]	; (900080d8 <prvHeapInit+0xb4>)
90008090:	681b      	ldr	r3, [r3, #0]
90008092:	2200      	movs	r2, #0
90008094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
90008096:	687b      	ldr	r3, [r7, #4]
90008098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000809a:	683b      	ldr	r3, [r7, #0]
9000809c:	68fa      	ldr	r2, [r7, #12]
9000809e:	1ad2      	subs	r2, r2, r3
900080a0:	683b      	ldr	r3, [r7, #0]
900080a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
900080a4:	4b0c      	ldr	r3, [pc, #48]	; (900080d8 <prvHeapInit+0xb4>)
900080a6:	681a      	ldr	r2, [r3, #0]
900080a8:	683b      	ldr	r3, [r7, #0]
900080aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900080ac:	683b      	ldr	r3, [r7, #0]
900080ae:	685b      	ldr	r3, [r3, #4]
900080b0:	4a0a      	ldr	r2, [pc, #40]	; (900080dc <prvHeapInit+0xb8>)
900080b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900080b4:	683b      	ldr	r3, [r7, #0]
900080b6:	685b      	ldr	r3, [r3, #4]
900080b8:	4a09      	ldr	r2, [pc, #36]	; (900080e0 <prvHeapInit+0xbc>)
900080ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
900080bc:	4b09      	ldr	r3, [pc, #36]	; (900080e4 <prvHeapInit+0xc0>)
900080be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
900080c2:	601a      	str	r2, [r3, #0]
}
900080c4:	bf00      	nop
900080c6:	3714      	adds	r7, #20
900080c8:	46bd      	mov	sp, r7
900080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
900080ce:	4770      	bx	lr
900080d0:	24000f7c 	.word	0x24000f7c
900080d4:	24004b7c 	.word	0x24004b7c
900080d8:	24004b84 	.word	0x24004b84
900080dc:	24004b8c 	.word	0x24004b8c
900080e0:	24004b88 	.word	0x24004b88
900080e4:	24004b98 	.word	0x24004b98

900080e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
900080e8:	b480      	push	{r7}
900080ea:	b085      	sub	sp, #20
900080ec:	af00      	add	r7, sp, #0
900080ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
900080f0:	4b28      	ldr	r3, [pc, #160]	; (90008194 <prvInsertBlockIntoFreeList+0xac>)
900080f2:	60fb      	str	r3, [r7, #12]
900080f4:	e002      	b.n	900080fc <prvInsertBlockIntoFreeList+0x14>
900080f6:	68fb      	ldr	r3, [r7, #12]
900080f8:	681b      	ldr	r3, [r3, #0]
900080fa:	60fb      	str	r3, [r7, #12]
900080fc:	68fb      	ldr	r3, [r7, #12]
900080fe:	681b      	ldr	r3, [r3, #0]
90008100:	687a      	ldr	r2, [r7, #4]
90008102:	429a      	cmp	r2, r3
90008104:	d8f7      	bhi.n	900080f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
90008106:	68fb      	ldr	r3, [r7, #12]
90008108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000810a:	68fb      	ldr	r3, [r7, #12]
9000810c:	685b      	ldr	r3, [r3, #4]
9000810e:	68ba      	ldr	r2, [r7, #8]
90008110:	4413      	add	r3, r2
90008112:	687a      	ldr	r2, [r7, #4]
90008114:	429a      	cmp	r2, r3
90008116:	d108      	bne.n	9000812a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
90008118:	68fb      	ldr	r3, [r7, #12]
9000811a:	685a      	ldr	r2, [r3, #4]
9000811c:	687b      	ldr	r3, [r7, #4]
9000811e:	685b      	ldr	r3, [r3, #4]
90008120:	441a      	add	r2, r3
90008122:	68fb      	ldr	r3, [r7, #12]
90008124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
90008126:	68fb      	ldr	r3, [r7, #12]
90008128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
9000812a:	687b      	ldr	r3, [r7, #4]
9000812c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000812e:	687b      	ldr	r3, [r7, #4]
90008130:	685b      	ldr	r3, [r3, #4]
90008132:	68ba      	ldr	r2, [r7, #8]
90008134:	441a      	add	r2, r3
90008136:	68fb      	ldr	r3, [r7, #12]
90008138:	681b      	ldr	r3, [r3, #0]
9000813a:	429a      	cmp	r2, r3
9000813c:	d118      	bne.n	90008170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000813e:	68fb      	ldr	r3, [r7, #12]
90008140:	681a      	ldr	r2, [r3, #0]
90008142:	4b15      	ldr	r3, [pc, #84]	; (90008198 <prvInsertBlockIntoFreeList+0xb0>)
90008144:	681b      	ldr	r3, [r3, #0]
90008146:	429a      	cmp	r2, r3
90008148:	d00d      	beq.n	90008166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000814a:	687b      	ldr	r3, [r7, #4]
9000814c:	685a      	ldr	r2, [r3, #4]
9000814e:	68fb      	ldr	r3, [r7, #12]
90008150:	681b      	ldr	r3, [r3, #0]
90008152:	685b      	ldr	r3, [r3, #4]
90008154:	441a      	add	r2, r3
90008156:	687b      	ldr	r3, [r7, #4]
90008158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000815a:	68fb      	ldr	r3, [r7, #12]
9000815c:	681b      	ldr	r3, [r3, #0]
9000815e:	681a      	ldr	r2, [r3, #0]
90008160:	687b      	ldr	r3, [r7, #4]
90008162:	601a      	str	r2, [r3, #0]
90008164:	e008      	b.n	90008178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
90008166:	4b0c      	ldr	r3, [pc, #48]	; (90008198 <prvInsertBlockIntoFreeList+0xb0>)
90008168:	681a      	ldr	r2, [r3, #0]
9000816a:	687b      	ldr	r3, [r7, #4]
9000816c:	601a      	str	r2, [r3, #0]
9000816e:	e003      	b.n	90008178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
90008170:	68fb      	ldr	r3, [r7, #12]
90008172:	681a      	ldr	r2, [r3, #0]
90008174:	687b      	ldr	r3, [r7, #4]
90008176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
90008178:	68fa      	ldr	r2, [r7, #12]
9000817a:	687b      	ldr	r3, [r7, #4]
9000817c:	429a      	cmp	r2, r3
9000817e:	d002      	beq.n	90008186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
90008180:	68fb      	ldr	r3, [r7, #12]
90008182:	687a      	ldr	r2, [r7, #4]
90008184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90008186:	bf00      	nop
90008188:	3714      	adds	r7, #20
9000818a:	46bd      	mov	sp, r7
9000818c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008190:	4770      	bx	lr
90008192:	bf00      	nop
90008194:	24004b7c 	.word	0x24004b7c
90008198:	24004b84 	.word	0x24004b84

9000819c <__errno>:
9000819c:	4b01      	ldr	r3, [pc, #4]	; (900081a4 <__errno+0x8>)
9000819e:	6818      	ldr	r0, [r3, #0]
900081a0:	4770      	bx	lr
900081a2:	bf00      	nop
900081a4:	24000014 	.word	0x24000014

900081a8 <std>:
900081a8:	2300      	movs	r3, #0
900081aa:	b510      	push	{r4, lr}
900081ac:	4604      	mov	r4, r0
900081ae:	e9c0 3300 	strd	r3, r3, [r0]
900081b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
900081b6:	6083      	str	r3, [r0, #8]
900081b8:	8181      	strh	r1, [r0, #12]
900081ba:	6643      	str	r3, [r0, #100]	; 0x64
900081bc:	81c2      	strh	r2, [r0, #14]
900081be:	6183      	str	r3, [r0, #24]
900081c0:	4619      	mov	r1, r3
900081c2:	2208      	movs	r2, #8
900081c4:	305c      	adds	r0, #92	; 0x5c
900081c6:	f000 f91a 	bl	900083fe <memset>
900081ca:	4b05      	ldr	r3, [pc, #20]	; (900081e0 <std+0x38>)
900081cc:	6263      	str	r3, [r4, #36]	; 0x24
900081ce:	4b05      	ldr	r3, [pc, #20]	; (900081e4 <std+0x3c>)
900081d0:	62a3      	str	r3, [r4, #40]	; 0x28
900081d2:	4b05      	ldr	r3, [pc, #20]	; (900081e8 <std+0x40>)
900081d4:	62e3      	str	r3, [r4, #44]	; 0x2c
900081d6:	4b05      	ldr	r3, [pc, #20]	; (900081ec <std+0x44>)
900081d8:	6224      	str	r4, [r4, #32]
900081da:	6323      	str	r3, [r4, #48]	; 0x30
900081dc:	bd10      	pop	{r4, pc}
900081de:	bf00      	nop
900081e0:	90008719 	.word	0x90008719
900081e4:	9000873b 	.word	0x9000873b
900081e8:	90008773 	.word	0x90008773
900081ec:	90008797 	.word	0x90008797

900081f0 <_cleanup_r>:
900081f0:	4901      	ldr	r1, [pc, #4]	; (900081f8 <_cleanup_r+0x8>)
900081f2:	f000 b8af 	b.w	90008354 <_fwalk_reent>
900081f6:	bf00      	nop
900081f8:	90008a71 	.word	0x90008a71

900081fc <__sfmoreglue>:
900081fc:	b570      	push	{r4, r5, r6, lr}
900081fe:	2268      	movs	r2, #104	; 0x68
90008200:	1e4d      	subs	r5, r1, #1
90008202:	4355      	muls	r5, r2
90008204:	460e      	mov	r6, r1
90008206:	f105 0174 	add.w	r1, r5, #116	; 0x74
9000820a:	f000 f921 	bl	90008450 <_malloc_r>
9000820e:	4604      	mov	r4, r0
90008210:	b140      	cbz	r0, 90008224 <__sfmoreglue+0x28>
90008212:	2100      	movs	r1, #0
90008214:	e9c0 1600 	strd	r1, r6, [r0]
90008218:	300c      	adds	r0, #12
9000821a:	60a0      	str	r0, [r4, #8]
9000821c:	f105 0268 	add.w	r2, r5, #104	; 0x68
90008220:	f000 f8ed 	bl	900083fe <memset>
90008224:	4620      	mov	r0, r4
90008226:	bd70      	pop	{r4, r5, r6, pc}

90008228 <__sfp_lock_acquire>:
90008228:	4801      	ldr	r0, [pc, #4]	; (90008230 <__sfp_lock_acquire+0x8>)
9000822a:	f000 b8d8 	b.w	900083de <__retarget_lock_acquire_recursive>
9000822e:	bf00      	nop
90008230:	24004b9d 	.word	0x24004b9d

90008234 <__sfp_lock_release>:
90008234:	4801      	ldr	r0, [pc, #4]	; (9000823c <__sfp_lock_release+0x8>)
90008236:	f000 b8d3 	b.w	900083e0 <__retarget_lock_release_recursive>
9000823a:	bf00      	nop
9000823c:	24004b9d 	.word	0x24004b9d

90008240 <__sinit_lock_acquire>:
90008240:	4801      	ldr	r0, [pc, #4]	; (90008248 <__sinit_lock_acquire+0x8>)
90008242:	f000 b8cc 	b.w	900083de <__retarget_lock_acquire_recursive>
90008246:	bf00      	nop
90008248:	24004b9e 	.word	0x24004b9e

9000824c <__sinit_lock_release>:
9000824c:	4801      	ldr	r0, [pc, #4]	; (90008254 <__sinit_lock_release+0x8>)
9000824e:	f000 b8c7 	b.w	900083e0 <__retarget_lock_release_recursive>
90008252:	bf00      	nop
90008254:	24004b9e 	.word	0x24004b9e

90008258 <__sinit>:
90008258:	b510      	push	{r4, lr}
9000825a:	4604      	mov	r4, r0
9000825c:	f7ff fff0 	bl	90008240 <__sinit_lock_acquire>
90008260:	69a3      	ldr	r3, [r4, #24]
90008262:	b11b      	cbz	r3, 9000826c <__sinit+0x14>
90008264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90008268:	f7ff bff0 	b.w	9000824c <__sinit_lock_release>
9000826c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90008270:	6523      	str	r3, [r4, #80]	; 0x50
90008272:	4b13      	ldr	r3, [pc, #76]	; (900082c0 <__sinit+0x68>)
90008274:	4a13      	ldr	r2, [pc, #76]	; (900082c4 <__sinit+0x6c>)
90008276:	681b      	ldr	r3, [r3, #0]
90008278:	62a2      	str	r2, [r4, #40]	; 0x28
9000827a:	42a3      	cmp	r3, r4
9000827c:	bf04      	itt	eq
9000827e:	2301      	moveq	r3, #1
90008280:	61a3      	streq	r3, [r4, #24]
90008282:	4620      	mov	r0, r4
90008284:	f000 f820 	bl	900082c8 <__sfp>
90008288:	6060      	str	r0, [r4, #4]
9000828a:	4620      	mov	r0, r4
9000828c:	f000 f81c 	bl	900082c8 <__sfp>
90008290:	60a0      	str	r0, [r4, #8]
90008292:	4620      	mov	r0, r4
90008294:	f000 f818 	bl	900082c8 <__sfp>
90008298:	2200      	movs	r2, #0
9000829a:	60e0      	str	r0, [r4, #12]
9000829c:	2104      	movs	r1, #4
9000829e:	6860      	ldr	r0, [r4, #4]
900082a0:	f7ff ff82 	bl	900081a8 <std>
900082a4:	68a0      	ldr	r0, [r4, #8]
900082a6:	2201      	movs	r2, #1
900082a8:	2109      	movs	r1, #9
900082aa:	f7ff ff7d 	bl	900081a8 <std>
900082ae:	68e0      	ldr	r0, [r4, #12]
900082b0:	2202      	movs	r2, #2
900082b2:	2112      	movs	r1, #18
900082b4:	f7ff ff78 	bl	900081a8 <std>
900082b8:	2301      	movs	r3, #1
900082ba:	61a3      	str	r3, [r4, #24]
900082bc:	e7d2      	b.n	90008264 <__sinit+0xc>
900082be:	bf00      	nop
900082c0:	90008e90 	.word	0x90008e90
900082c4:	900081f1 	.word	0x900081f1

900082c8 <__sfp>:
900082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900082ca:	4607      	mov	r7, r0
900082cc:	f7ff ffac 	bl	90008228 <__sfp_lock_acquire>
900082d0:	4b1e      	ldr	r3, [pc, #120]	; (9000834c <__sfp+0x84>)
900082d2:	681e      	ldr	r6, [r3, #0]
900082d4:	69b3      	ldr	r3, [r6, #24]
900082d6:	b913      	cbnz	r3, 900082de <__sfp+0x16>
900082d8:	4630      	mov	r0, r6
900082da:	f7ff ffbd 	bl	90008258 <__sinit>
900082de:	3648      	adds	r6, #72	; 0x48
900082e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
900082e4:	3b01      	subs	r3, #1
900082e6:	d503      	bpl.n	900082f0 <__sfp+0x28>
900082e8:	6833      	ldr	r3, [r6, #0]
900082ea:	b30b      	cbz	r3, 90008330 <__sfp+0x68>
900082ec:	6836      	ldr	r6, [r6, #0]
900082ee:	e7f7      	b.n	900082e0 <__sfp+0x18>
900082f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
900082f4:	b9d5      	cbnz	r5, 9000832c <__sfp+0x64>
900082f6:	4b16      	ldr	r3, [pc, #88]	; (90008350 <__sfp+0x88>)
900082f8:	60e3      	str	r3, [r4, #12]
900082fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
900082fe:	6665      	str	r5, [r4, #100]	; 0x64
90008300:	f000 f86c 	bl	900083dc <__retarget_lock_init_recursive>
90008304:	f7ff ff96 	bl	90008234 <__sfp_lock_release>
90008308:	e9c4 5501 	strd	r5, r5, [r4, #4]
9000830c:	e9c4 5504 	strd	r5, r5, [r4, #16]
90008310:	6025      	str	r5, [r4, #0]
90008312:	61a5      	str	r5, [r4, #24]
90008314:	2208      	movs	r2, #8
90008316:	4629      	mov	r1, r5
90008318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
9000831c:	f000 f86f 	bl	900083fe <memset>
90008320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90008324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90008328:	4620      	mov	r0, r4
9000832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000832c:	3468      	adds	r4, #104	; 0x68
9000832e:	e7d9      	b.n	900082e4 <__sfp+0x1c>
90008330:	2104      	movs	r1, #4
90008332:	4638      	mov	r0, r7
90008334:	f7ff ff62 	bl	900081fc <__sfmoreglue>
90008338:	4604      	mov	r4, r0
9000833a:	6030      	str	r0, [r6, #0]
9000833c:	2800      	cmp	r0, #0
9000833e:	d1d5      	bne.n	900082ec <__sfp+0x24>
90008340:	f7ff ff78 	bl	90008234 <__sfp_lock_release>
90008344:	230c      	movs	r3, #12
90008346:	603b      	str	r3, [r7, #0]
90008348:	e7ee      	b.n	90008328 <__sfp+0x60>
9000834a:	bf00      	nop
9000834c:	90008e90 	.word	0x90008e90
90008350:	ffff0001 	.word	0xffff0001

90008354 <_fwalk_reent>:
90008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90008358:	4606      	mov	r6, r0
9000835a:	4688      	mov	r8, r1
9000835c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90008360:	2700      	movs	r7, #0
90008362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90008366:	f1b9 0901 	subs.w	r9, r9, #1
9000836a:	d505      	bpl.n	90008378 <_fwalk_reent+0x24>
9000836c:	6824      	ldr	r4, [r4, #0]
9000836e:	2c00      	cmp	r4, #0
90008370:	d1f7      	bne.n	90008362 <_fwalk_reent+0xe>
90008372:	4638      	mov	r0, r7
90008374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90008378:	89ab      	ldrh	r3, [r5, #12]
9000837a:	2b01      	cmp	r3, #1
9000837c:	d907      	bls.n	9000838e <_fwalk_reent+0x3a>
9000837e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90008382:	3301      	adds	r3, #1
90008384:	d003      	beq.n	9000838e <_fwalk_reent+0x3a>
90008386:	4629      	mov	r1, r5
90008388:	4630      	mov	r0, r6
9000838a:	47c0      	blx	r8
9000838c:	4307      	orrs	r7, r0
9000838e:	3568      	adds	r5, #104	; 0x68
90008390:	e7e9      	b.n	90008366 <_fwalk_reent+0x12>
	...

90008394 <__libc_init_array>:
90008394:	b570      	push	{r4, r5, r6, lr}
90008396:	4d0d      	ldr	r5, [pc, #52]	; (900083cc <__libc_init_array+0x38>)
90008398:	4c0d      	ldr	r4, [pc, #52]	; (900083d0 <__libc_init_array+0x3c>)
9000839a:	1b64      	subs	r4, r4, r5
9000839c:	10a4      	asrs	r4, r4, #2
9000839e:	2600      	movs	r6, #0
900083a0:	42a6      	cmp	r6, r4
900083a2:	d109      	bne.n	900083b8 <__libc_init_array+0x24>
900083a4:	4d0b      	ldr	r5, [pc, #44]	; (900083d4 <__libc_init_array+0x40>)
900083a6:	4c0c      	ldr	r4, [pc, #48]	; (900083d8 <__libc_init_array+0x44>)
900083a8:	f000 fca2 	bl	90008cf0 <_init>
900083ac:	1b64      	subs	r4, r4, r5
900083ae:	10a4      	asrs	r4, r4, #2
900083b0:	2600      	movs	r6, #0
900083b2:	42a6      	cmp	r6, r4
900083b4:	d105      	bne.n	900083c2 <__libc_init_array+0x2e>
900083b6:	bd70      	pop	{r4, r5, r6, pc}
900083b8:	f855 3b04 	ldr.w	r3, [r5], #4
900083bc:	4798      	blx	r3
900083be:	3601      	adds	r6, #1
900083c0:	e7ee      	b.n	900083a0 <__libc_init_array+0xc>
900083c2:	f855 3b04 	ldr.w	r3, [r5], #4
900083c6:	4798      	blx	r3
900083c8:	3601      	adds	r6, #1
900083ca:	e7f2      	b.n	900083b2 <__libc_init_array+0x1e>
900083cc:	90008e9c 	.word	0x90008e9c
900083d0:	90008e9c 	.word	0x90008e9c
900083d4:	90008e9c 	.word	0x90008e9c
900083d8:	90008ea0 	.word	0x90008ea0

900083dc <__retarget_lock_init_recursive>:
900083dc:	4770      	bx	lr

900083de <__retarget_lock_acquire_recursive>:
900083de:	4770      	bx	lr

900083e0 <__retarget_lock_release_recursive>:
900083e0:	4770      	bx	lr

900083e2 <memcpy>:
900083e2:	440a      	add	r2, r1
900083e4:	4291      	cmp	r1, r2
900083e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
900083ea:	d100      	bne.n	900083ee <memcpy+0xc>
900083ec:	4770      	bx	lr
900083ee:	b510      	push	{r4, lr}
900083f0:	f811 4b01 	ldrb.w	r4, [r1], #1
900083f4:	f803 4f01 	strb.w	r4, [r3, #1]!
900083f8:	4291      	cmp	r1, r2
900083fa:	d1f9      	bne.n	900083f0 <memcpy+0xe>
900083fc:	bd10      	pop	{r4, pc}

900083fe <memset>:
900083fe:	4402      	add	r2, r0
90008400:	4603      	mov	r3, r0
90008402:	4293      	cmp	r3, r2
90008404:	d100      	bne.n	90008408 <memset+0xa>
90008406:	4770      	bx	lr
90008408:	f803 1b01 	strb.w	r1, [r3], #1
9000840c:	e7f9      	b.n	90008402 <memset+0x4>
	...

90008410 <sbrk_aligned>:
90008410:	b570      	push	{r4, r5, r6, lr}
90008412:	4e0e      	ldr	r6, [pc, #56]	; (9000844c <sbrk_aligned+0x3c>)
90008414:	460c      	mov	r4, r1
90008416:	6831      	ldr	r1, [r6, #0]
90008418:	4605      	mov	r5, r0
9000841a:	b911      	cbnz	r1, 90008422 <sbrk_aligned+0x12>
9000841c:	f000 f96c 	bl	900086f8 <_sbrk_r>
90008420:	6030      	str	r0, [r6, #0]
90008422:	4621      	mov	r1, r4
90008424:	4628      	mov	r0, r5
90008426:	f000 f967 	bl	900086f8 <_sbrk_r>
9000842a:	1c43      	adds	r3, r0, #1
9000842c:	d00a      	beq.n	90008444 <sbrk_aligned+0x34>
9000842e:	1cc4      	adds	r4, r0, #3
90008430:	f024 0403 	bic.w	r4, r4, #3
90008434:	42a0      	cmp	r0, r4
90008436:	d007      	beq.n	90008448 <sbrk_aligned+0x38>
90008438:	1a21      	subs	r1, r4, r0
9000843a:	4628      	mov	r0, r5
9000843c:	f000 f95c 	bl	900086f8 <_sbrk_r>
90008440:	3001      	adds	r0, #1
90008442:	d101      	bne.n	90008448 <sbrk_aligned+0x38>
90008444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
90008448:	4620      	mov	r0, r4
9000844a:	bd70      	pop	{r4, r5, r6, pc}
9000844c:	24004ba4 	.word	0x24004ba4

90008450 <_malloc_r>:
90008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008454:	1ccd      	adds	r5, r1, #3
90008456:	f025 0503 	bic.w	r5, r5, #3
9000845a:	3508      	adds	r5, #8
9000845c:	2d0c      	cmp	r5, #12
9000845e:	bf38      	it	cc
90008460:	250c      	movcc	r5, #12
90008462:	2d00      	cmp	r5, #0
90008464:	4607      	mov	r7, r0
90008466:	db01      	blt.n	9000846c <_malloc_r+0x1c>
90008468:	42a9      	cmp	r1, r5
9000846a:	d905      	bls.n	90008478 <_malloc_r+0x28>
9000846c:	230c      	movs	r3, #12
9000846e:	603b      	str	r3, [r7, #0]
90008470:	2600      	movs	r6, #0
90008472:	4630      	mov	r0, r6
90008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90008478:	4e2e      	ldr	r6, [pc, #184]	; (90008534 <_malloc_r+0xe4>)
9000847a:	f000 fbad 	bl	90008bd8 <__malloc_lock>
9000847e:	6833      	ldr	r3, [r6, #0]
90008480:	461c      	mov	r4, r3
90008482:	bb34      	cbnz	r4, 900084d2 <_malloc_r+0x82>
90008484:	4629      	mov	r1, r5
90008486:	4638      	mov	r0, r7
90008488:	f7ff ffc2 	bl	90008410 <sbrk_aligned>
9000848c:	1c43      	adds	r3, r0, #1
9000848e:	4604      	mov	r4, r0
90008490:	d14d      	bne.n	9000852e <_malloc_r+0xde>
90008492:	6834      	ldr	r4, [r6, #0]
90008494:	4626      	mov	r6, r4
90008496:	2e00      	cmp	r6, #0
90008498:	d140      	bne.n	9000851c <_malloc_r+0xcc>
9000849a:	6823      	ldr	r3, [r4, #0]
9000849c:	4631      	mov	r1, r6
9000849e:	4638      	mov	r0, r7
900084a0:	eb04 0803 	add.w	r8, r4, r3
900084a4:	f000 f928 	bl	900086f8 <_sbrk_r>
900084a8:	4580      	cmp	r8, r0
900084aa:	d13a      	bne.n	90008522 <_malloc_r+0xd2>
900084ac:	6821      	ldr	r1, [r4, #0]
900084ae:	3503      	adds	r5, #3
900084b0:	1a6d      	subs	r5, r5, r1
900084b2:	f025 0503 	bic.w	r5, r5, #3
900084b6:	3508      	adds	r5, #8
900084b8:	2d0c      	cmp	r5, #12
900084ba:	bf38      	it	cc
900084bc:	250c      	movcc	r5, #12
900084be:	4629      	mov	r1, r5
900084c0:	4638      	mov	r0, r7
900084c2:	f7ff ffa5 	bl	90008410 <sbrk_aligned>
900084c6:	3001      	adds	r0, #1
900084c8:	d02b      	beq.n	90008522 <_malloc_r+0xd2>
900084ca:	6823      	ldr	r3, [r4, #0]
900084cc:	442b      	add	r3, r5
900084ce:	6023      	str	r3, [r4, #0]
900084d0:	e00e      	b.n	900084f0 <_malloc_r+0xa0>
900084d2:	6822      	ldr	r2, [r4, #0]
900084d4:	1b52      	subs	r2, r2, r5
900084d6:	d41e      	bmi.n	90008516 <_malloc_r+0xc6>
900084d8:	2a0b      	cmp	r2, #11
900084da:	d916      	bls.n	9000850a <_malloc_r+0xba>
900084dc:	1961      	adds	r1, r4, r5
900084de:	42a3      	cmp	r3, r4
900084e0:	6025      	str	r5, [r4, #0]
900084e2:	bf18      	it	ne
900084e4:	6059      	strne	r1, [r3, #4]
900084e6:	6863      	ldr	r3, [r4, #4]
900084e8:	bf08      	it	eq
900084ea:	6031      	streq	r1, [r6, #0]
900084ec:	5162      	str	r2, [r4, r5]
900084ee:	604b      	str	r3, [r1, #4]
900084f0:	4638      	mov	r0, r7
900084f2:	f104 060b 	add.w	r6, r4, #11
900084f6:	f000 fb75 	bl	90008be4 <__malloc_unlock>
900084fa:	f026 0607 	bic.w	r6, r6, #7
900084fe:	1d23      	adds	r3, r4, #4
90008500:	1af2      	subs	r2, r6, r3
90008502:	d0b6      	beq.n	90008472 <_malloc_r+0x22>
90008504:	1b9b      	subs	r3, r3, r6
90008506:	50a3      	str	r3, [r4, r2]
90008508:	e7b3      	b.n	90008472 <_malloc_r+0x22>
9000850a:	6862      	ldr	r2, [r4, #4]
9000850c:	42a3      	cmp	r3, r4
9000850e:	bf0c      	ite	eq
90008510:	6032      	streq	r2, [r6, #0]
90008512:	605a      	strne	r2, [r3, #4]
90008514:	e7ec      	b.n	900084f0 <_malloc_r+0xa0>
90008516:	4623      	mov	r3, r4
90008518:	6864      	ldr	r4, [r4, #4]
9000851a:	e7b2      	b.n	90008482 <_malloc_r+0x32>
9000851c:	4634      	mov	r4, r6
9000851e:	6876      	ldr	r6, [r6, #4]
90008520:	e7b9      	b.n	90008496 <_malloc_r+0x46>
90008522:	230c      	movs	r3, #12
90008524:	603b      	str	r3, [r7, #0]
90008526:	4638      	mov	r0, r7
90008528:	f000 fb5c 	bl	90008be4 <__malloc_unlock>
9000852c:	e7a1      	b.n	90008472 <_malloc_r+0x22>
9000852e:	6025      	str	r5, [r4, #0]
90008530:	e7de      	b.n	900084f0 <_malloc_r+0xa0>
90008532:	bf00      	nop
90008534:	24004ba0 	.word	0x24004ba0

90008538 <_puts_r>:
90008538:	b570      	push	{r4, r5, r6, lr}
9000853a:	460e      	mov	r6, r1
9000853c:	4605      	mov	r5, r0
9000853e:	b118      	cbz	r0, 90008548 <_puts_r+0x10>
90008540:	6983      	ldr	r3, [r0, #24]
90008542:	b90b      	cbnz	r3, 90008548 <_puts_r+0x10>
90008544:	f7ff fe88 	bl	90008258 <__sinit>
90008548:	69ab      	ldr	r3, [r5, #24]
9000854a:	68ac      	ldr	r4, [r5, #8]
9000854c:	b913      	cbnz	r3, 90008554 <_puts_r+0x1c>
9000854e:	4628      	mov	r0, r5
90008550:	f7ff fe82 	bl	90008258 <__sinit>
90008554:	4b2c      	ldr	r3, [pc, #176]	; (90008608 <_puts_r+0xd0>)
90008556:	429c      	cmp	r4, r3
90008558:	d120      	bne.n	9000859c <_puts_r+0x64>
9000855a:	686c      	ldr	r4, [r5, #4]
9000855c:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000855e:	07db      	lsls	r3, r3, #31
90008560:	d405      	bmi.n	9000856e <_puts_r+0x36>
90008562:	89a3      	ldrh	r3, [r4, #12]
90008564:	0598      	lsls	r0, r3, #22
90008566:	d402      	bmi.n	9000856e <_puts_r+0x36>
90008568:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000856a:	f7ff ff38 	bl	900083de <__retarget_lock_acquire_recursive>
9000856e:	89a3      	ldrh	r3, [r4, #12]
90008570:	0719      	lsls	r1, r3, #28
90008572:	d51d      	bpl.n	900085b0 <_puts_r+0x78>
90008574:	6923      	ldr	r3, [r4, #16]
90008576:	b1db      	cbz	r3, 900085b0 <_puts_r+0x78>
90008578:	3e01      	subs	r6, #1
9000857a:	68a3      	ldr	r3, [r4, #8]
9000857c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90008580:	3b01      	subs	r3, #1
90008582:	60a3      	str	r3, [r4, #8]
90008584:	bb39      	cbnz	r1, 900085d6 <_puts_r+0x9e>
90008586:	2b00      	cmp	r3, #0
90008588:	da38      	bge.n	900085fc <_puts_r+0xc4>
9000858a:	4622      	mov	r2, r4
9000858c:	210a      	movs	r1, #10
9000858e:	4628      	mov	r0, r5
90008590:	f000 f906 	bl	900087a0 <__swbuf_r>
90008594:	3001      	adds	r0, #1
90008596:	d011      	beq.n	900085bc <_puts_r+0x84>
90008598:	250a      	movs	r5, #10
9000859a:	e011      	b.n	900085c0 <_puts_r+0x88>
9000859c:	4b1b      	ldr	r3, [pc, #108]	; (9000860c <_puts_r+0xd4>)
9000859e:	429c      	cmp	r4, r3
900085a0:	d101      	bne.n	900085a6 <_puts_r+0x6e>
900085a2:	68ac      	ldr	r4, [r5, #8]
900085a4:	e7da      	b.n	9000855c <_puts_r+0x24>
900085a6:	4b1a      	ldr	r3, [pc, #104]	; (90008610 <_puts_r+0xd8>)
900085a8:	429c      	cmp	r4, r3
900085aa:	bf08      	it	eq
900085ac:	68ec      	ldreq	r4, [r5, #12]
900085ae:	e7d5      	b.n	9000855c <_puts_r+0x24>
900085b0:	4621      	mov	r1, r4
900085b2:	4628      	mov	r0, r5
900085b4:	f000 f958 	bl	90008868 <__swsetup_r>
900085b8:	2800      	cmp	r0, #0
900085ba:	d0dd      	beq.n	90008578 <_puts_r+0x40>
900085bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
900085c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
900085c2:	07da      	lsls	r2, r3, #31
900085c4:	d405      	bmi.n	900085d2 <_puts_r+0x9a>
900085c6:	89a3      	ldrh	r3, [r4, #12]
900085c8:	059b      	lsls	r3, r3, #22
900085ca:	d402      	bmi.n	900085d2 <_puts_r+0x9a>
900085cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
900085ce:	f7ff ff07 	bl	900083e0 <__retarget_lock_release_recursive>
900085d2:	4628      	mov	r0, r5
900085d4:	bd70      	pop	{r4, r5, r6, pc}
900085d6:	2b00      	cmp	r3, #0
900085d8:	da04      	bge.n	900085e4 <_puts_r+0xac>
900085da:	69a2      	ldr	r2, [r4, #24]
900085dc:	429a      	cmp	r2, r3
900085de:	dc06      	bgt.n	900085ee <_puts_r+0xb6>
900085e0:	290a      	cmp	r1, #10
900085e2:	d004      	beq.n	900085ee <_puts_r+0xb6>
900085e4:	6823      	ldr	r3, [r4, #0]
900085e6:	1c5a      	adds	r2, r3, #1
900085e8:	6022      	str	r2, [r4, #0]
900085ea:	7019      	strb	r1, [r3, #0]
900085ec:	e7c5      	b.n	9000857a <_puts_r+0x42>
900085ee:	4622      	mov	r2, r4
900085f0:	4628      	mov	r0, r5
900085f2:	f000 f8d5 	bl	900087a0 <__swbuf_r>
900085f6:	3001      	adds	r0, #1
900085f8:	d1bf      	bne.n	9000857a <_puts_r+0x42>
900085fa:	e7df      	b.n	900085bc <_puts_r+0x84>
900085fc:	6823      	ldr	r3, [r4, #0]
900085fe:	250a      	movs	r5, #10
90008600:	1c5a      	adds	r2, r3, #1
90008602:	6022      	str	r2, [r4, #0]
90008604:	701d      	strb	r5, [r3, #0]
90008606:	e7db      	b.n	900085c0 <_puts_r+0x88>
90008608:	90008e50 	.word	0x90008e50
9000860c:	90008e70 	.word	0x90008e70
90008610:	90008e30 	.word	0x90008e30

90008614 <puts>:
90008614:	4b02      	ldr	r3, [pc, #8]	; (90008620 <puts+0xc>)
90008616:	4601      	mov	r1, r0
90008618:	6818      	ldr	r0, [r3, #0]
9000861a:	f7ff bf8d 	b.w	90008538 <_puts_r>
9000861e:	bf00      	nop
90008620:	24000014 	.word	0x24000014

90008624 <cleanup_glue>:
90008624:	b538      	push	{r3, r4, r5, lr}
90008626:	460c      	mov	r4, r1
90008628:	6809      	ldr	r1, [r1, #0]
9000862a:	4605      	mov	r5, r0
9000862c:	b109      	cbz	r1, 90008632 <cleanup_glue+0xe>
9000862e:	f7ff fff9 	bl	90008624 <cleanup_glue>
90008632:	4621      	mov	r1, r4
90008634:	4628      	mov	r0, r5
90008636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9000863a:	f000 bad9 	b.w	90008bf0 <_free_r>
	...

90008640 <_reclaim_reent>:
90008640:	4b2c      	ldr	r3, [pc, #176]	; (900086f4 <_reclaim_reent+0xb4>)
90008642:	681b      	ldr	r3, [r3, #0]
90008644:	4283      	cmp	r3, r0
90008646:	b570      	push	{r4, r5, r6, lr}
90008648:	4604      	mov	r4, r0
9000864a:	d051      	beq.n	900086f0 <_reclaim_reent+0xb0>
9000864c:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000864e:	b143      	cbz	r3, 90008662 <_reclaim_reent+0x22>
90008650:	68db      	ldr	r3, [r3, #12]
90008652:	2b00      	cmp	r3, #0
90008654:	d14a      	bne.n	900086ec <_reclaim_reent+0xac>
90008656:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008658:	6819      	ldr	r1, [r3, #0]
9000865a:	b111      	cbz	r1, 90008662 <_reclaim_reent+0x22>
9000865c:	4620      	mov	r0, r4
9000865e:	f000 fac7 	bl	90008bf0 <_free_r>
90008662:	6961      	ldr	r1, [r4, #20]
90008664:	b111      	cbz	r1, 9000866c <_reclaim_reent+0x2c>
90008666:	4620      	mov	r0, r4
90008668:	f000 fac2 	bl	90008bf0 <_free_r>
9000866c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000866e:	b111      	cbz	r1, 90008676 <_reclaim_reent+0x36>
90008670:	4620      	mov	r0, r4
90008672:	f000 fabd 	bl	90008bf0 <_free_r>
90008676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90008678:	b111      	cbz	r1, 90008680 <_reclaim_reent+0x40>
9000867a:	4620      	mov	r0, r4
9000867c:	f000 fab8 	bl	90008bf0 <_free_r>
90008680:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90008682:	b111      	cbz	r1, 9000868a <_reclaim_reent+0x4a>
90008684:	4620      	mov	r0, r4
90008686:	f000 fab3 	bl	90008bf0 <_free_r>
9000868a:	6c21      	ldr	r1, [r4, #64]	; 0x40
9000868c:	b111      	cbz	r1, 90008694 <_reclaim_reent+0x54>
9000868e:	4620      	mov	r0, r4
90008690:	f000 faae 	bl	90008bf0 <_free_r>
90008694:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90008696:	b111      	cbz	r1, 9000869e <_reclaim_reent+0x5e>
90008698:	4620      	mov	r0, r4
9000869a:	f000 faa9 	bl	90008bf0 <_free_r>
9000869e:	6da1      	ldr	r1, [r4, #88]	; 0x58
900086a0:	b111      	cbz	r1, 900086a8 <_reclaim_reent+0x68>
900086a2:	4620      	mov	r0, r4
900086a4:	f000 faa4 	bl	90008bf0 <_free_r>
900086a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
900086aa:	b111      	cbz	r1, 900086b2 <_reclaim_reent+0x72>
900086ac:	4620      	mov	r0, r4
900086ae:	f000 fa9f 	bl	90008bf0 <_free_r>
900086b2:	69a3      	ldr	r3, [r4, #24]
900086b4:	b1e3      	cbz	r3, 900086f0 <_reclaim_reent+0xb0>
900086b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900086b8:	4620      	mov	r0, r4
900086ba:	4798      	blx	r3
900086bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
900086be:	b1b9      	cbz	r1, 900086f0 <_reclaim_reent+0xb0>
900086c0:	4620      	mov	r0, r4
900086c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900086c6:	f7ff bfad 	b.w	90008624 <cleanup_glue>
900086ca:	5949      	ldr	r1, [r1, r5]
900086cc:	b941      	cbnz	r1, 900086e0 <_reclaim_reent+0xa0>
900086ce:	3504      	adds	r5, #4
900086d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
900086d2:	2d80      	cmp	r5, #128	; 0x80
900086d4:	68d9      	ldr	r1, [r3, #12]
900086d6:	d1f8      	bne.n	900086ca <_reclaim_reent+0x8a>
900086d8:	4620      	mov	r0, r4
900086da:	f000 fa89 	bl	90008bf0 <_free_r>
900086de:	e7ba      	b.n	90008656 <_reclaim_reent+0x16>
900086e0:	680e      	ldr	r6, [r1, #0]
900086e2:	4620      	mov	r0, r4
900086e4:	f000 fa84 	bl	90008bf0 <_free_r>
900086e8:	4631      	mov	r1, r6
900086ea:	e7ef      	b.n	900086cc <_reclaim_reent+0x8c>
900086ec:	2500      	movs	r5, #0
900086ee:	e7ef      	b.n	900086d0 <_reclaim_reent+0x90>
900086f0:	bd70      	pop	{r4, r5, r6, pc}
900086f2:	bf00      	nop
900086f4:	24000014 	.word	0x24000014

900086f8 <_sbrk_r>:
900086f8:	b538      	push	{r3, r4, r5, lr}
900086fa:	4d06      	ldr	r5, [pc, #24]	; (90008714 <_sbrk_r+0x1c>)
900086fc:	2300      	movs	r3, #0
900086fe:	4604      	mov	r4, r0
90008700:	4608      	mov	r0, r1
90008702:	602b      	str	r3, [r5, #0]
90008704:	f7f8 fb90 	bl	90000e28 <_sbrk>
90008708:	1c43      	adds	r3, r0, #1
9000870a:	d102      	bne.n	90008712 <_sbrk_r+0x1a>
9000870c:	682b      	ldr	r3, [r5, #0]
9000870e:	b103      	cbz	r3, 90008712 <_sbrk_r+0x1a>
90008710:	6023      	str	r3, [r4, #0]
90008712:	bd38      	pop	{r3, r4, r5, pc}
90008714:	24004ba8 	.word	0x24004ba8

90008718 <__sread>:
90008718:	b510      	push	{r4, lr}
9000871a:	460c      	mov	r4, r1
9000871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90008720:	f000 fab2 	bl	90008c88 <_read_r>
90008724:	2800      	cmp	r0, #0
90008726:	bfab      	itete	ge
90008728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9000872a:	89a3      	ldrhlt	r3, [r4, #12]
9000872c:	181b      	addge	r3, r3, r0
9000872e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90008732:	bfac      	ite	ge
90008734:	6563      	strge	r3, [r4, #84]	; 0x54
90008736:	81a3      	strhlt	r3, [r4, #12]
90008738:	bd10      	pop	{r4, pc}

9000873a <__swrite>:
9000873a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000873e:	461f      	mov	r7, r3
90008740:	898b      	ldrh	r3, [r1, #12]
90008742:	05db      	lsls	r3, r3, #23
90008744:	4605      	mov	r5, r0
90008746:	460c      	mov	r4, r1
90008748:	4616      	mov	r6, r2
9000874a:	d505      	bpl.n	90008758 <__swrite+0x1e>
9000874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90008750:	2302      	movs	r3, #2
90008752:	2200      	movs	r2, #0
90008754:	f000 f9c8 	bl	90008ae8 <_lseek_r>
90008758:	89a3      	ldrh	r3, [r4, #12]
9000875a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000875e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90008762:	81a3      	strh	r3, [r4, #12]
90008764:	4632      	mov	r2, r6
90008766:	463b      	mov	r3, r7
90008768:	4628      	mov	r0, r5
9000876a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000876e:	f000 b869 	b.w	90008844 <_write_r>

90008772 <__sseek>:
90008772:	b510      	push	{r4, lr}
90008774:	460c      	mov	r4, r1
90008776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000877a:	f000 f9b5 	bl	90008ae8 <_lseek_r>
9000877e:	1c43      	adds	r3, r0, #1
90008780:	89a3      	ldrh	r3, [r4, #12]
90008782:	bf15      	itete	ne
90008784:	6560      	strne	r0, [r4, #84]	; 0x54
90008786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9000878a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000878e:	81a3      	strheq	r3, [r4, #12]
90008790:	bf18      	it	ne
90008792:	81a3      	strhne	r3, [r4, #12]
90008794:	bd10      	pop	{r4, pc}

90008796 <__sclose>:
90008796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000879a:	f000 b8d3 	b.w	90008944 <_close_r>
	...

900087a0 <__swbuf_r>:
900087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900087a2:	460e      	mov	r6, r1
900087a4:	4614      	mov	r4, r2
900087a6:	4605      	mov	r5, r0
900087a8:	b118      	cbz	r0, 900087b2 <__swbuf_r+0x12>
900087aa:	6983      	ldr	r3, [r0, #24]
900087ac:	b90b      	cbnz	r3, 900087b2 <__swbuf_r+0x12>
900087ae:	f7ff fd53 	bl	90008258 <__sinit>
900087b2:	4b21      	ldr	r3, [pc, #132]	; (90008838 <__swbuf_r+0x98>)
900087b4:	429c      	cmp	r4, r3
900087b6:	d12b      	bne.n	90008810 <__swbuf_r+0x70>
900087b8:	686c      	ldr	r4, [r5, #4]
900087ba:	69a3      	ldr	r3, [r4, #24]
900087bc:	60a3      	str	r3, [r4, #8]
900087be:	89a3      	ldrh	r3, [r4, #12]
900087c0:	071a      	lsls	r2, r3, #28
900087c2:	d52f      	bpl.n	90008824 <__swbuf_r+0x84>
900087c4:	6923      	ldr	r3, [r4, #16]
900087c6:	b36b      	cbz	r3, 90008824 <__swbuf_r+0x84>
900087c8:	6923      	ldr	r3, [r4, #16]
900087ca:	6820      	ldr	r0, [r4, #0]
900087cc:	1ac0      	subs	r0, r0, r3
900087ce:	6963      	ldr	r3, [r4, #20]
900087d0:	b2f6      	uxtb	r6, r6
900087d2:	4283      	cmp	r3, r0
900087d4:	4637      	mov	r7, r6
900087d6:	dc04      	bgt.n	900087e2 <__swbuf_r+0x42>
900087d8:	4621      	mov	r1, r4
900087da:	4628      	mov	r0, r5
900087dc:	f000 f948 	bl	90008a70 <_fflush_r>
900087e0:	bb30      	cbnz	r0, 90008830 <__swbuf_r+0x90>
900087e2:	68a3      	ldr	r3, [r4, #8]
900087e4:	3b01      	subs	r3, #1
900087e6:	60a3      	str	r3, [r4, #8]
900087e8:	6823      	ldr	r3, [r4, #0]
900087ea:	1c5a      	adds	r2, r3, #1
900087ec:	6022      	str	r2, [r4, #0]
900087ee:	701e      	strb	r6, [r3, #0]
900087f0:	6963      	ldr	r3, [r4, #20]
900087f2:	3001      	adds	r0, #1
900087f4:	4283      	cmp	r3, r0
900087f6:	d004      	beq.n	90008802 <__swbuf_r+0x62>
900087f8:	89a3      	ldrh	r3, [r4, #12]
900087fa:	07db      	lsls	r3, r3, #31
900087fc:	d506      	bpl.n	9000880c <__swbuf_r+0x6c>
900087fe:	2e0a      	cmp	r6, #10
90008800:	d104      	bne.n	9000880c <__swbuf_r+0x6c>
90008802:	4621      	mov	r1, r4
90008804:	4628      	mov	r0, r5
90008806:	f000 f933 	bl	90008a70 <_fflush_r>
9000880a:	b988      	cbnz	r0, 90008830 <__swbuf_r+0x90>
9000880c:	4638      	mov	r0, r7
9000880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008810:	4b0a      	ldr	r3, [pc, #40]	; (9000883c <__swbuf_r+0x9c>)
90008812:	429c      	cmp	r4, r3
90008814:	d101      	bne.n	9000881a <__swbuf_r+0x7a>
90008816:	68ac      	ldr	r4, [r5, #8]
90008818:	e7cf      	b.n	900087ba <__swbuf_r+0x1a>
9000881a:	4b09      	ldr	r3, [pc, #36]	; (90008840 <__swbuf_r+0xa0>)
9000881c:	429c      	cmp	r4, r3
9000881e:	bf08      	it	eq
90008820:	68ec      	ldreq	r4, [r5, #12]
90008822:	e7ca      	b.n	900087ba <__swbuf_r+0x1a>
90008824:	4621      	mov	r1, r4
90008826:	4628      	mov	r0, r5
90008828:	f000 f81e 	bl	90008868 <__swsetup_r>
9000882c:	2800      	cmp	r0, #0
9000882e:	d0cb      	beq.n	900087c8 <__swbuf_r+0x28>
90008830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
90008834:	e7ea      	b.n	9000880c <__swbuf_r+0x6c>
90008836:	bf00      	nop
90008838:	90008e50 	.word	0x90008e50
9000883c:	90008e70 	.word	0x90008e70
90008840:	90008e30 	.word	0x90008e30

90008844 <_write_r>:
90008844:	b538      	push	{r3, r4, r5, lr}
90008846:	4d07      	ldr	r5, [pc, #28]	; (90008864 <_write_r+0x20>)
90008848:	4604      	mov	r4, r0
9000884a:	4608      	mov	r0, r1
9000884c:	4611      	mov	r1, r2
9000884e:	2200      	movs	r2, #0
90008850:	602a      	str	r2, [r5, #0]
90008852:	461a      	mov	r2, r3
90008854:	f7f7 feee 	bl	90000634 <_write>
90008858:	1c43      	adds	r3, r0, #1
9000885a:	d102      	bne.n	90008862 <_write_r+0x1e>
9000885c:	682b      	ldr	r3, [r5, #0]
9000885e:	b103      	cbz	r3, 90008862 <_write_r+0x1e>
90008860:	6023      	str	r3, [r4, #0]
90008862:	bd38      	pop	{r3, r4, r5, pc}
90008864:	24004ba8 	.word	0x24004ba8

90008868 <__swsetup_r>:
90008868:	4b32      	ldr	r3, [pc, #200]	; (90008934 <__swsetup_r+0xcc>)
9000886a:	b570      	push	{r4, r5, r6, lr}
9000886c:	681d      	ldr	r5, [r3, #0]
9000886e:	4606      	mov	r6, r0
90008870:	460c      	mov	r4, r1
90008872:	b125      	cbz	r5, 9000887e <__swsetup_r+0x16>
90008874:	69ab      	ldr	r3, [r5, #24]
90008876:	b913      	cbnz	r3, 9000887e <__swsetup_r+0x16>
90008878:	4628      	mov	r0, r5
9000887a:	f7ff fced 	bl	90008258 <__sinit>
9000887e:	4b2e      	ldr	r3, [pc, #184]	; (90008938 <__swsetup_r+0xd0>)
90008880:	429c      	cmp	r4, r3
90008882:	d10f      	bne.n	900088a4 <__swsetup_r+0x3c>
90008884:	686c      	ldr	r4, [r5, #4]
90008886:	89a3      	ldrh	r3, [r4, #12]
90008888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000888c:	0719      	lsls	r1, r3, #28
9000888e:	d42c      	bmi.n	900088ea <__swsetup_r+0x82>
90008890:	06dd      	lsls	r5, r3, #27
90008892:	d411      	bmi.n	900088b8 <__swsetup_r+0x50>
90008894:	2309      	movs	r3, #9
90008896:	6033      	str	r3, [r6, #0]
90008898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000889c:	81a3      	strh	r3, [r4, #12]
9000889e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900088a2:	e03e      	b.n	90008922 <__swsetup_r+0xba>
900088a4:	4b25      	ldr	r3, [pc, #148]	; (9000893c <__swsetup_r+0xd4>)
900088a6:	429c      	cmp	r4, r3
900088a8:	d101      	bne.n	900088ae <__swsetup_r+0x46>
900088aa:	68ac      	ldr	r4, [r5, #8]
900088ac:	e7eb      	b.n	90008886 <__swsetup_r+0x1e>
900088ae:	4b24      	ldr	r3, [pc, #144]	; (90008940 <__swsetup_r+0xd8>)
900088b0:	429c      	cmp	r4, r3
900088b2:	bf08      	it	eq
900088b4:	68ec      	ldreq	r4, [r5, #12]
900088b6:	e7e6      	b.n	90008886 <__swsetup_r+0x1e>
900088b8:	0758      	lsls	r0, r3, #29
900088ba:	d512      	bpl.n	900088e2 <__swsetup_r+0x7a>
900088bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
900088be:	b141      	cbz	r1, 900088d2 <__swsetup_r+0x6a>
900088c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
900088c4:	4299      	cmp	r1, r3
900088c6:	d002      	beq.n	900088ce <__swsetup_r+0x66>
900088c8:	4630      	mov	r0, r6
900088ca:	f000 f991 	bl	90008bf0 <_free_r>
900088ce:	2300      	movs	r3, #0
900088d0:	6363      	str	r3, [r4, #52]	; 0x34
900088d2:	89a3      	ldrh	r3, [r4, #12]
900088d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900088d8:	81a3      	strh	r3, [r4, #12]
900088da:	2300      	movs	r3, #0
900088dc:	6063      	str	r3, [r4, #4]
900088de:	6923      	ldr	r3, [r4, #16]
900088e0:	6023      	str	r3, [r4, #0]
900088e2:	89a3      	ldrh	r3, [r4, #12]
900088e4:	f043 0308 	orr.w	r3, r3, #8
900088e8:	81a3      	strh	r3, [r4, #12]
900088ea:	6923      	ldr	r3, [r4, #16]
900088ec:	b94b      	cbnz	r3, 90008902 <__swsetup_r+0x9a>
900088ee:	89a3      	ldrh	r3, [r4, #12]
900088f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
900088f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900088f8:	d003      	beq.n	90008902 <__swsetup_r+0x9a>
900088fa:	4621      	mov	r1, r4
900088fc:	4630      	mov	r0, r6
900088fe:	f000 f92b 	bl	90008b58 <__smakebuf_r>
90008902:	89a0      	ldrh	r0, [r4, #12]
90008904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90008908:	f010 0301 	ands.w	r3, r0, #1
9000890c:	d00a      	beq.n	90008924 <__swsetup_r+0xbc>
9000890e:	2300      	movs	r3, #0
90008910:	60a3      	str	r3, [r4, #8]
90008912:	6963      	ldr	r3, [r4, #20]
90008914:	425b      	negs	r3, r3
90008916:	61a3      	str	r3, [r4, #24]
90008918:	6923      	ldr	r3, [r4, #16]
9000891a:	b943      	cbnz	r3, 9000892e <__swsetup_r+0xc6>
9000891c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90008920:	d1ba      	bne.n	90008898 <__swsetup_r+0x30>
90008922:	bd70      	pop	{r4, r5, r6, pc}
90008924:	0781      	lsls	r1, r0, #30
90008926:	bf58      	it	pl
90008928:	6963      	ldrpl	r3, [r4, #20]
9000892a:	60a3      	str	r3, [r4, #8]
9000892c:	e7f4      	b.n	90008918 <__swsetup_r+0xb0>
9000892e:	2000      	movs	r0, #0
90008930:	e7f7      	b.n	90008922 <__swsetup_r+0xba>
90008932:	bf00      	nop
90008934:	24000014 	.word	0x24000014
90008938:	90008e50 	.word	0x90008e50
9000893c:	90008e70 	.word	0x90008e70
90008940:	90008e30 	.word	0x90008e30

90008944 <_close_r>:
90008944:	b538      	push	{r3, r4, r5, lr}
90008946:	4d06      	ldr	r5, [pc, #24]	; (90008960 <_close_r+0x1c>)
90008948:	2300      	movs	r3, #0
9000894a:	4604      	mov	r4, r0
9000894c:	4608      	mov	r0, r1
9000894e:	602b      	str	r3, [r5, #0]
90008950:	f7f8 fa35 	bl	90000dbe <_close>
90008954:	1c43      	adds	r3, r0, #1
90008956:	d102      	bne.n	9000895e <_close_r+0x1a>
90008958:	682b      	ldr	r3, [r5, #0]
9000895a:	b103      	cbz	r3, 9000895e <_close_r+0x1a>
9000895c:	6023      	str	r3, [r4, #0]
9000895e:	bd38      	pop	{r3, r4, r5, pc}
90008960:	24004ba8 	.word	0x24004ba8

90008964 <__sflush_r>:
90008964:	898a      	ldrh	r2, [r1, #12]
90008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000896a:	4605      	mov	r5, r0
9000896c:	0710      	lsls	r0, r2, #28
9000896e:	460c      	mov	r4, r1
90008970:	d458      	bmi.n	90008a24 <__sflush_r+0xc0>
90008972:	684b      	ldr	r3, [r1, #4]
90008974:	2b00      	cmp	r3, #0
90008976:	dc05      	bgt.n	90008984 <__sflush_r+0x20>
90008978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9000897a:	2b00      	cmp	r3, #0
9000897c:	dc02      	bgt.n	90008984 <__sflush_r+0x20>
9000897e:	2000      	movs	r0, #0
90008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90008984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90008986:	2e00      	cmp	r6, #0
90008988:	d0f9      	beq.n	9000897e <__sflush_r+0x1a>
9000898a:	2300      	movs	r3, #0
9000898c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90008990:	682f      	ldr	r7, [r5, #0]
90008992:	602b      	str	r3, [r5, #0]
90008994:	d032      	beq.n	900089fc <__sflush_r+0x98>
90008996:	6d60      	ldr	r0, [r4, #84]	; 0x54
90008998:	89a3      	ldrh	r3, [r4, #12]
9000899a:	075a      	lsls	r2, r3, #29
9000899c:	d505      	bpl.n	900089aa <__sflush_r+0x46>
9000899e:	6863      	ldr	r3, [r4, #4]
900089a0:	1ac0      	subs	r0, r0, r3
900089a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
900089a4:	b10b      	cbz	r3, 900089aa <__sflush_r+0x46>
900089a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
900089a8:	1ac0      	subs	r0, r0, r3
900089aa:	2300      	movs	r3, #0
900089ac:	4602      	mov	r2, r0
900089ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900089b0:	6a21      	ldr	r1, [r4, #32]
900089b2:	4628      	mov	r0, r5
900089b4:	47b0      	blx	r6
900089b6:	1c43      	adds	r3, r0, #1
900089b8:	89a3      	ldrh	r3, [r4, #12]
900089ba:	d106      	bne.n	900089ca <__sflush_r+0x66>
900089bc:	6829      	ldr	r1, [r5, #0]
900089be:	291d      	cmp	r1, #29
900089c0:	d82c      	bhi.n	90008a1c <__sflush_r+0xb8>
900089c2:	4a2a      	ldr	r2, [pc, #168]	; (90008a6c <__sflush_r+0x108>)
900089c4:	40ca      	lsrs	r2, r1
900089c6:	07d6      	lsls	r6, r2, #31
900089c8:	d528      	bpl.n	90008a1c <__sflush_r+0xb8>
900089ca:	2200      	movs	r2, #0
900089cc:	6062      	str	r2, [r4, #4]
900089ce:	04d9      	lsls	r1, r3, #19
900089d0:	6922      	ldr	r2, [r4, #16]
900089d2:	6022      	str	r2, [r4, #0]
900089d4:	d504      	bpl.n	900089e0 <__sflush_r+0x7c>
900089d6:	1c42      	adds	r2, r0, #1
900089d8:	d101      	bne.n	900089de <__sflush_r+0x7a>
900089da:	682b      	ldr	r3, [r5, #0]
900089dc:	b903      	cbnz	r3, 900089e0 <__sflush_r+0x7c>
900089de:	6560      	str	r0, [r4, #84]	; 0x54
900089e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
900089e2:	602f      	str	r7, [r5, #0]
900089e4:	2900      	cmp	r1, #0
900089e6:	d0ca      	beq.n	9000897e <__sflush_r+0x1a>
900089e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
900089ec:	4299      	cmp	r1, r3
900089ee:	d002      	beq.n	900089f6 <__sflush_r+0x92>
900089f0:	4628      	mov	r0, r5
900089f2:	f000 f8fd 	bl	90008bf0 <_free_r>
900089f6:	2000      	movs	r0, #0
900089f8:	6360      	str	r0, [r4, #52]	; 0x34
900089fa:	e7c1      	b.n	90008980 <__sflush_r+0x1c>
900089fc:	6a21      	ldr	r1, [r4, #32]
900089fe:	2301      	movs	r3, #1
90008a00:	4628      	mov	r0, r5
90008a02:	47b0      	blx	r6
90008a04:	1c41      	adds	r1, r0, #1
90008a06:	d1c7      	bne.n	90008998 <__sflush_r+0x34>
90008a08:	682b      	ldr	r3, [r5, #0]
90008a0a:	2b00      	cmp	r3, #0
90008a0c:	d0c4      	beq.n	90008998 <__sflush_r+0x34>
90008a0e:	2b1d      	cmp	r3, #29
90008a10:	d001      	beq.n	90008a16 <__sflush_r+0xb2>
90008a12:	2b16      	cmp	r3, #22
90008a14:	d101      	bne.n	90008a1a <__sflush_r+0xb6>
90008a16:	602f      	str	r7, [r5, #0]
90008a18:	e7b1      	b.n	9000897e <__sflush_r+0x1a>
90008a1a:	89a3      	ldrh	r3, [r4, #12]
90008a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008a20:	81a3      	strh	r3, [r4, #12]
90008a22:	e7ad      	b.n	90008980 <__sflush_r+0x1c>
90008a24:	690f      	ldr	r7, [r1, #16]
90008a26:	2f00      	cmp	r7, #0
90008a28:	d0a9      	beq.n	9000897e <__sflush_r+0x1a>
90008a2a:	0793      	lsls	r3, r2, #30
90008a2c:	680e      	ldr	r6, [r1, #0]
90008a2e:	bf08      	it	eq
90008a30:	694b      	ldreq	r3, [r1, #20]
90008a32:	600f      	str	r7, [r1, #0]
90008a34:	bf18      	it	ne
90008a36:	2300      	movne	r3, #0
90008a38:	eba6 0807 	sub.w	r8, r6, r7
90008a3c:	608b      	str	r3, [r1, #8]
90008a3e:	f1b8 0f00 	cmp.w	r8, #0
90008a42:	dd9c      	ble.n	9000897e <__sflush_r+0x1a>
90008a44:	6a21      	ldr	r1, [r4, #32]
90008a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90008a48:	4643      	mov	r3, r8
90008a4a:	463a      	mov	r2, r7
90008a4c:	4628      	mov	r0, r5
90008a4e:	47b0      	blx	r6
90008a50:	2800      	cmp	r0, #0
90008a52:	dc06      	bgt.n	90008a62 <__sflush_r+0xfe>
90008a54:	89a3      	ldrh	r3, [r4, #12]
90008a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90008a5a:	81a3      	strh	r3, [r4, #12]
90008a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90008a60:	e78e      	b.n	90008980 <__sflush_r+0x1c>
90008a62:	4407      	add	r7, r0
90008a64:	eba8 0800 	sub.w	r8, r8, r0
90008a68:	e7e9      	b.n	90008a3e <__sflush_r+0xda>
90008a6a:	bf00      	nop
90008a6c:	20400001 	.word	0x20400001

90008a70 <_fflush_r>:
90008a70:	b538      	push	{r3, r4, r5, lr}
90008a72:	690b      	ldr	r3, [r1, #16]
90008a74:	4605      	mov	r5, r0
90008a76:	460c      	mov	r4, r1
90008a78:	b913      	cbnz	r3, 90008a80 <_fflush_r+0x10>
90008a7a:	2500      	movs	r5, #0
90008a7c:	4628      	mov	r0, r5
90008a7e:	bd38      	pop	{r3, r4, r5, pc}
90008a80:	b118      	cbz	r0, 90008a8a <_fflush_r+0x1a>
90008a82:	6983      	ldr	r3, [r0, #24]
90008a84:	b90b      	cbnz	r3, 90008a8a <_fflush_r+0x1a>
90008a86:	f7ff fbe7 	bl	90008258 <__sinit>
90008a8a:	4b14      	ldr	r3, [pc, #80]	; (90008adc <_fflush_r+0x6c>)
90008a8c:	429c      	cmp	r4, r3
90008a8e:	d11b      	bne.n	90008ac8 <_fflush_r+0x58>
90008a90:	686c      	ldr	r4, [r5, #4]
90008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90008a96:	2b00      	cmp	r3, #0
90008a98:	d0ef      	beq.n	90008a7a <_fflush_r+0xa>
90008a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
90008a9c:	07d0      	lsls	r0, r2, #31
90008a9e:	d404      	bmi.n	90008aaa <_fflush_r+0x3a>
90008aa0:	0599      	lsls	r1, r3, #22
90008aa2:	d402      	bmi.n	90008aaa <_fflush_r+0x3a>
90008aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
90008aa6:	f7ff fc9a 	bl	900083de <__retarget_lock_acquire_recursive>
90008aaa:	4628      	mov	r0, r5
90008aac:	4621      	mov	r1, r4
90008aae:	f7ff ff59 	bl	90008964 <__sflush_r>
90008ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
90008ab4:	07da      	lsls	r2, r3, #31
90008ab6:	4605      	mov	r5, r0
90008ab8:	d4e0      	bmi.n	90008a7c <_fflush_r+0xc>
90008aba:	89a3      	ldrh	r3, [r4, #12]
90008abc:	059b      	lsls	r3, r3, #22
90008abe:	d4dd      	bmi.n	90008a7c <_fflush_r+0xc>
90008ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
90008ac2:	f7ff fc8d 	bl	900083e0 <__retarget_lock_release_recursive>
90008ac6:	e7d9      	b.n	90008a7c <_fflush_r+0xc>
90008ac8:	4b05      	ldr	r3, [pc, #20]	; (90008ae0 <_fflush_r+0x70>)
90008aca:	429c      	cmp	r4, r3
90008acc:	d101      	bne.n	90008ad2 <_fflush_r+0x62>
90008ace:	68ac      	ldr	r4, [r5, #8]
90008ad0:	e7df      	b.n	90008a92 <_fflush_r+0x22>
90008ad2:	4b04      	ldr	r3, [pc, #16]	; (90008ae4 <_fflush_r+0x74>)
90008ad4:	429c      	cmp	r4, r3
90008ad6:	bf08      	it	eq
90008ad8:	68ec      	ldreq	r4, [r5, #12]
90008ada:	e7da      	b.n	90008a92 <_fflush_r+0x22>
90008adc:	90008e50 	.word	0x90008e50
90008ae0:	90008e70 	.word	0x90008e70
90008ae4:	90008e30 	.word	0x90008e30

90008ae8 <_lseek_r>:
90008ae8:	b538      	push	{r3, r4, r5, lr}
90008aea:	4d07      	ldr	r5, [pc, #28]	; (90008b08 <_lseek_r+0x20>)
90008aec:	4604      	mov	r4, r0
90008aee:	4608      	mov	r0, r1
90008af0:	4611      	mov	r1, r2
90008af2:	2200      	movs	r2, #0
90008af4:	602a      	str	r2, [r5, #0]
90008af6:	461a      	mov	r2, r3
90008af8:	f7f8 f988 	bl	90000e0c <_lseek>
90008afc:	1c43      	adds	r3, r0, #1
90008afe:	d102      	bne.n	90008b06 <_lseek_r+0x1e>
90008b00:	682b      	ldr	r3, [r5, #0]
90008b02:	b103      	cbz	r3, 90008b06 <_lseek_r+0x1e>
90008b04:	6023      	str	r3, [r4, #0]
90008b06:	bd38      	pop	{r3, r4, r5, pc}
90008b08:	24004ba8 	.word	0x24004ba8

90008b0c <__swhatbuf_r>:
90008b0c:	b570      	push	{r4, r5, r6, lr}
90008b0e:	460e      	mov	r6, r1
90008b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90008b14:	2900      	cmp	r1, #0
90008b16:	b096      	sub	sp, #88	; 0x58
90008b18:	4614      	mov	r4, r2
90008b1a:	461d      	mov	r5, r3
90008b1c:	da08      	bge.n	90008b30 <__swhatbuf_r+0x24>
90008b1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90008b22:	2200      	movs	r2, #0
90008b24:	602a      	str	r2, [r5, #0]
90008b26:	061a      	lsls	r2, r3, #24
90008b28:	d410      	bmi.n	90008b4c <__swhatbuf_r+0x40>
90008b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
90008b2e:	e00e      	b.n	90008b4e <__swhatbuf_r+0x42>
90008b30:	466a      	mov	r2, sp
90008b32:	f000 f8bb 	bl	90008cac <_fstat_r>
90008b36:	2800      	cmp	r0, #0
90008b38:	dbf1      	blt.n	90008b1e <__swhatbuf_r+0x12>
90008b3a:	9a01      	ldr	r2, [sp, #4]
90008b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90008b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90008b44:	425a      	negs	r2, r3
90008b46:	415a      	adcs	r2, r3
90008b48:	602a      	str	r2, [r5, #0]
90008b4a:	e7ee      	b.n	90008b2a <__swhatbuf_r+0x1e>
90008b4c:	2340      	movs	r3, #64	; 0x40
90008b4e:	2000      	movs	r0, #0
90008b50:	6023      	str	r3, [r4, #0]
90008b52:	b016      	add	sp, #88	; 0x58
90008b54:	bd70      	pop	{r4, r5, r6, pc}
	...

90008b58 <__smakebuf_r>:
90008b58:	898b      	ldrh	r3, [r1, #12]
90008b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
90008b5c:	079d      	lsls	r5, r3, #30
90008b5e:	4606      	mov	r6, r0
90008b60:	460c      	mov	r4, r1
90008b62:	d507      	bpl.n	90008b74 <__smakebuf_r+0x1c>
90008b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
90008b68:	6023      	str	r3, [r4, #0]
90008b6a:	6123      	str	r3, [r4, #16]
90008b6c:	2301      	movs	r3, #1
90008b6e:	6163      	str	r3, [r4, #20]
90008b70:	b002      	add	sp, #8
90008b72:	bd70      	pop	{r4, r5, r6, pc}
90008b74:	ab01      	add	r3, sp, #4
90008b76:	466a      	mov	r2, sp
90008b78:	f7ff ffc8 	bl	90008b0c <__swhatbuf_r>
90008b7c:	9900      	ldr	r1, [sp, #0]
90008b7e:	4605      	mov	r5, r0
90008b80:	4630      	mov	r0, r6
90008b82:	f7ff fc65 	bl	90008450 <_malloc_r>
90008b86:	b948      	cbnz	r0, 90008b9c <__smakebuf_r+0x44>
90008b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90008b8c:	059a      	lsls	r2, r3, #22
90008b8e:	d4ef      	bmi.n	90008b70 <__smakebuf_r+0x18>
90008b90:	f023 0303 	bic.w	r3, r3, #3
90008b94:	f043 0302 	orr.w	r3, r3, #2
90008b98:	81a3      	strh	r3, [r4, #12]
90008b9a:	e7e3      	b.n	90008b64 <__smakebuf_r+0xc>
90008b9c:	4b0d      	ldr	r3, [pc, #52]	; (90008bd4 <__smakebuf_r+0x7c>)
90008b9e:	62b3      	str	r3, [r6, #40]	; 0x28
90008ba0:	89a3      	ldrh	r3, [r4, #12]
90008ba2:	6020      	str	r0, [r4, #0]
90008ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008ba8:	81a3      	strh	r3, [r4, #12]
90008baa:	9b00      	ldr	r3, [sp, #0]
90008bac:	6163      	str	r3, [r4, #20]
90008bae:	9b01      	ldr	r3, [sp, #4]
90008bb0:	6120      	str	r0, [r4, #16]
90008bb2:	b15b      	cbz	r3, 90008bcc <__smakebuf_r+0x74>
90008bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90008bb8:	4630      	mov	r0, r6
90008bba:	f000 f889 	bl	90008cd0 <_isatty_r>
90008bbe:	b128      	cbz	r0, 90008bcc <__smakebuf_r+0x74>
90008bc0:	89a3      	ldrh	r3, [r4, #12]
90008bc2:	f023 0303 	bic.w	r3, r3, #3
90008bc6:	f043 0301 	orr.w	r3, r3, #1
90008bca:	81a3      	strh	r3, [r4, #12]
90008bcc:	89a0      	ldrh	r0, [r4, #12]
90008bce:	4305      	orrs	r5, r0
90008bd0:	81a5      	strh	r5, [r4, #12]
90008bd2:	e7cd      	b.n	90008b70 <__smakebuf_r+0x18>
90008bd4:	900081f1 	.word	0x900081f1

90008bd8 <__malloc_lock>:
90008bd8:	4801      	ldr	r0, [pc, #4]	; (90008be0 <__malloc_lock+0x8>)
90008bda:	f7ff bc00 	b.w	900083de <__retarget_lock_acquire_recursive>
90008bde:	bf00      	nop
90008be0:	24004b9c 	.word	0x24004b9c

90008be4 <__malloc_unlock>:
90008be4:	4801      	ldr	r0, [pc, #4]	; (90008bec <__malloc_unlock+0x8>)
90008be6:	f7ff bbfb 	b.w	900083e0 <__retarget_lock_release_recursive>
90008bea:	bf00      	nop
90008bec:	24004b9c 	.word	0x24004b9c

90008bf0 <_free_r>:
90008bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
90008bf2:	2900      	cmp	r1, #0
90008bf4:	d044      	beq.n	90008c80 <_free_r+0x90>
90008bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
90008bfa:	9001      	str	r0, [sp, #4]
90008bfc:	2b00      	cmp	r3, #0
90008bfe:	f1a1 0404 	sub.w	r4, r1, #4
90008c02:	bfb8      	it	lt
90008c04:	18e4      	addlt	r4, r4, r3
90008c06:	f7ff ffe7 	bl	90008bd8 <__malloc_lock>
90008c0a:	4a1e      	ldr	r2, [pc, #120]	; (90008c84 <_free_r+0x94>)
90008c0c:	9801      	ldr	r0, [sp, #4]
90008c0e:	6813      	ldr	r3, [r2, #0]
90008c10:	b933      	cbnz	r3, 90008c20 <_free_r+0x30>
90008c12:	6063      	str	r3, [r4, #4]
90008c14:	6014      	str	r4, [r2, #0]
90008c16:	b003      	add	sp, #12
90008c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90008c1c:	f7ff bfe2 	b.w	90008be4 <__malloc_unlock>
90008c20:	42a3      	cmp	r3, r4
90008c22:	d908      	bls.n	90008c36 <_free_r+0x46>
90008c24:	6825      	ldr	r5, [r4, #0]
90008c26:	1961      	adds	r1, r4, r5
90008c28:	428b      	cmp	r3, r1
90008c2a:	bf01      	itttt	eq
90008c2c:	6819      	ldreq	r1, [r3, #0]
90008c2e:	685b      	ldreq	r3, [r3, #4]
90008c30:	1949      	addeq	r1, r1, r5
90008c32:	6021      	streq	r1, [r4, #0]
90008c34:	e7ed      	b.n	90008c12 <_free_r+0x22>
90008c36:	461a      	mov	r2, r3
90008c38:	685b      	ldr	r3, [r3, #4]
90008c3a:	b10b      	cbz	r3, 90008c40 <_free_r+0x50>
90008c3c:	42a3      	cmp	r3, r4
90008c3e:	d9fa      	bls.n	90008c36 <_free_r+0x46>
90008c40:	6811      	ldr	r1, [r2, #0]
90008c42:	1855      	adds	r5, r2, r1
90008c44:	42a5      	cmp	r5, r4
90008c46:	d10b      	bne.n	90008c60 <_free_r+0x70>
90008c48:	6824      	ldr	r4, [r4, #0]
90008c4a:	4421      	add	r1, r4
90008c4c:	1854      	adds	r4, r2, r1
90008c4e:	42a3      	cmp	r3, r4
90008c50:	6011      	str	r1, [r2, #0]
90008c52:	d1e0      	bne.n	90008c16 <_free_r+0x26>
90008c54:	681c      	ldr	r4, [r3, #0]
90008c56:	685b      	ldr	r3, [r3, #4]
90008c58:	6053      	str	r3, [r2, #4]
90008c5a:	4421      	add	r1, r4
90008c5c:	6011      	str	r1, [r2, #0]
90008c5e:	e7da      	b.n	90008c16 <_free_r+0x26>
90008c60:	d902      	bls.n	90008c68 <_free_r+0x78>
90008c62:	230c      	movs	r3, #12
90008c64:	6003      	str	r3, [r0, #0]
90008c66:	e7d6      	b.n	90008c16 <_free_r+0x26>
90008c68:	6825      	ldr	r5, [r4, #0]
90008c6a:	1961      	adds	r1, r4, r5
90008c6c:	428b      	cmp	r3, r1
90008c6e:	bf04      	itt	eq
90008c70:	6819      	ldreq	r1, [r3, #0]
90008c72:	685b      	ldreq	r3, [r3, #4]
90008c74:	6063      	str	r3, [r4, #4]
90008c76:	bf04      	itt	eq
90008c78:	1949      	addeq	r1, r1, r5
90008c7a:	6021      	streq	r1, [r4, #0]
90008c7c:	6054      	str	r4, [r2, #4]
90008c7e:	e7ca      	b.n	90008c16 <_free_r+0x26>
90008c80:	b003      	add	sp, #12
90008c82:	bd30      	pop	{r4, r5, pc}
90008c84:	24004ba0 	.word	0x24004ba0

90008c88 <_read_r>:
90008c88:	b538      	push	{r3, r4, r5, lr}
90008c8a:	4d07      	ldr	r5, [pc, #28]	; (90008ca8 <_read_r+0x20>)
90008c8c:	4604      	mov	r4, r0
90008c8e:	4608      	mov	r0, r1
90008c90:	4611      	mov	r1, r2
90008c92:	2200      	movs	r2, #0
90008c94:	602a      	str	r2, [r5, #0]
90008c96:	461a      	mov	r2, r3
90008c98:	f7f8 f874 	bl	90000d84 <_read>
90008c9c:	1c43      	adds	r3, r0, #1
90008c9e:	d102      	bne.n	90008ca6 <_read_r+0x1e>
90008ca0:	682b      	ldr	r3, [r5, #0]
90008ca2:	b103      	cbz	r3, 90008ca6 <_read_r+0x1e>
90008ca4:	6023      	str	r3, [r4, #0]
90008ca6:	bd38      	pop	{r3, r4, r5, pc}
90008ca8:	24004ba8 	.word	0x24004ba8

90008cac <_fstat_r>:
90008cac:	b538      	push	{r3, r4, r5, lr}
90008cae:	4d07      	ldr	r5, [pc, #28]	; (90008ccc <_fstat_r+0x20>)
90008cb0:	2300      	movs	r3, #0
90008cb2:	4604      	mov	r4, r0
90008cb4:	4608      	mov	r0, r1
90008cb6:	4611      	mov	r1, r2
90008cb8:	602b      	str	r3, [r5, #0]
90008cba:	f7f8 f88c 	bl	90000dd6 <_fstat>
90008cbe:	1c43      	adds	r3, r0, #1
90008cc0:	d102      	bne.n	90008cc8 <_fstat_r+0x1c>
90008cc2:	682b      	ldr	r3, [r5, #0]
90008cc4:	b103      	cbz	r3, 90008cc8 <_fstat_r+0x1c>
90008cc6:	6023      	str	r3, [r4, #0]
90008cc8:	bd38      	pop	{r3, r4, r5, pc}
90008cca:	bf00      	nop
90008ccc:	24004ba8 	.word	0x24004ba8

90008cd0 <_isatty_r>:
90008cd0:	b538      	push	{r3, r4, r5, lr}
90008cd2:	4d06      	ldr	r5, [pc, #24]	; (90008cec <_isatty_r+0x1c>)
90008cd4:	2300      	movs	r3, #0
90008cd6:	4604      	mov	r4, r0
90008cd8:	4608      	mov	r0, r1
90008cda:	602b      	str	r3, [r5, #0]
90008cdc:	f7f8 f88b 	bl	90000df6 <_isatty>
90008ce0:	1c43      	adds	r3, r0, #1
90008ce2:	d102      	bne.n	90008cea <_isatty_r+0x1a>
90008ce4:	682b      	ldr	r3, [r5, #0]
90008ce6:	b103      	cbz	r3, 90008cea <_isatty_r+0x1a>
90008ce8:	6023      	str	r3, [r4, #0]
90008cea:	bd38      	pop	{r3, r4, r5, pc}
90008cec:	24004ba8 	.word	0x24004ba8

90008cf0 <_init>:
90008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008cf2:	bf00      	nop
90008cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
90008cf6:	bc08      	pop	{r3}
90008cf8:	469e      	mov	lr, r3
90008cfa:	4770      	bx	lr

90008cfc <_fini>:
90008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008cfe:	bf00      	nop
90008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
90008d02:	bc08      	pop	{r3}
90008d04:	469e      	mov	lr, r3
90008d06:	4770      	bx	lr
