
DS18B20_MANY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003514  08003514  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003514  08003514  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800351c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000074  08003590  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003590  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd6  00000000  00000000  0002866e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017440  00000000  00000000  0002b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f22  00000000  00000000  00042530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c4d  00000000  00000000  0004b452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce09f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  000ce0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003444 	.word	0x08003444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003444 	.word	0x08003444

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	b29b      	uxth	r3, r3
 800062a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800062e:	b29b      	uxth	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	605a      	str	r2, [r3, #4]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
	...

0800065c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <usart_setup+0x60>)
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <usart_setup+0x64>)
 8000668:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <usart_setup+0x60>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <usart_setup+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <usart_setup+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <usart_setup+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <usart_setup+0x60>)
 8000684:	220c      	movs	r2, #12
 8000686:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <usart_setup+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <usart_setup+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <usart_setup+0x60>)
 8000696:	f001 fe65 	bl	8002364 <HAL_HalfDuplex_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80006a0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <usart_setup+0x60>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <usart_setup+0x60>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f042 0220 	orr.w	r2, r2, #32
 80006b0:	60da      	str	r2, [r3, #12]
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000100 	.word	0x20000100
 80006c0:	40013800 	.word	0x40013800

080006c4 <owInit>:

void owInit(OneWire *ow) {
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80006d4:	e015      	b.n	8000702 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
    k=0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80006e4:	e007      	b.n	80006f6 <owInit+0x32>
    r[k] = 0;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3301      	adds	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	ddf4      	ble.n	80006e6 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b01      	cmp	r3, #1
 8000706:	dde6      	ble.n	80006d6 <owInit+0x12>
  }
  k=0;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800070c:	e008      	b.n	8000720 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4413      	add	r3, r2
 8000714:	3314      	adds	r3, #20
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	2b07      	cmp	r3, #7
 8000724:	ddf3      	ble.n	800070e <owInit+0x4a>
  ow->lastDiscrepancy = 64; //Количество подключенных максимально датчиков
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2240      	movs	r2, #64	; 0x40
 800072a:	611a      	str	r2, [r3, #16]

}
 800072c:	bf00      	nop
 800072e:	371c      	adds	r7, #28
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <owReadHandler>:

void owReadHandler() { //обработчик прерывания USART
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800073e:	f000 f850 	bl	80007e2 <getUsartIndex>
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <owReadHandler+0x70>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	2b00      	cmp	r3, #0
 8000750:	d025      	beq.n	800079e <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <owReadHandler+0x70>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800075a:	2b00      	cmp	r3, #0
 800075c:	d01f      	beq.n	800079e <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800075e:	bf00      	nop
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <owReadHandler+0x70>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f9      	beq.n	8000760 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800076c:	79fc      	ldrb	r4, [r7, #7]
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <owReadHandler+0x70>)
 8000770:	f7ff ff54 	bl	800061c <USART_ReceiveData>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <owReadHandler+0x74>)
 800077a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2201      	movs	r2, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	b25b      	sxtb	r3, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	b25a      	sxtb	r2, r3
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <owReadHandler+0x78>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	4013      	ands	r3, r2
 8000796:	b25b      	sxtb	r3, r3
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <owReadHandler+0x78>)
 800079c:	701a      	strb	r2, [r3, #0]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40013800 	.word	0x40013800
 80007ac:	200000ec 	.word	0x200000ec
 80007b0:	200000f6 	.word	0x200000f6

080007b4 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80007ba:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80007be:	f7ff ff4d 	bl	800065c <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 80007c2:	20f0      	movs	r0, #240	; 0xf0
 80007c4:	f000 f814 	bl	80007f0 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 80007c8:	f000 f850 	bl	800086c <owEchoRead>
 80007cc:	4603      	mov	r3, r0
 80007ce:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80007d0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007d4:	f7ff ff42 	bl	800065c <usart_setup>
  return owPresence;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <owSend>:

void owSend(uint16_t data) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 80007fa:	f7ff fff2 	bl	80007e2 <getUsartIndex>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	2301      	movs	r3, #1
 8000804:	4093      	lsls	r3, r2
 8000806:	b25a      	sxtb	r2, r3
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <owSend+0x50>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	b25b      	sxtb	r3, r3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <owSend+0x50>)
 8000818:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	4619      	mov	r1, r3
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <owSend+0x54>)
 8000820:	f7ff ff0b 	bl	800063a <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8000824:	bf00      	nop
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <owSend+0x58>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000830:	2b40      	cmp	r3, #64	; 0x40
 8000832:	d1f8      	bne.n	8000826 <owSend+0x36>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000f6 	.word	0x200000f6
 8000844:	40013800 	.word	0x40013800
 8000848:	20000100 	.word	0x20000100

0800084c <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	2bff      	cmp	r3, #255	; 0xff
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <owEchoRead>:

uint16_t owEchoRead() {//
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8000872:	f7ff ffb6 	bl	80007e2 <getUsartIndex>
 8000876:	4603      	mov	r3, r0
 8000878:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8000880:	bf00      	nop
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <owEchoRead+0x48>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	797b      	ldrb	r3, [r7, #5]
 800088c:	fa42 f303 	asr.w	r3, r2, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d004      	beq.n	80008a2 <owEchoRead+0x36>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	80fa      	strh	r2, [r7, #6]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1ef      	bne.n	8000882 <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80008a2:	797b      	ldrb	r3, [r7, #5]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <owEchoRead+0x4c>)
 80008a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008aa:	b29b      	uxth	r3, r3
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000f6 	.word	0x200000f6
 80008b8:	200000ec 	.word	0x200000ec

080008bc <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e014      	b.n	80008f8 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e002      	b.n	80008e6 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	085b      	lsrs	r3, r3, #1
 80008f0:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d9e7      	bls.n	80008ce <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 80008fe:	683b      	ldr	r3, [r7, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8000914:	f107 020c 	add.w	r2, r7, #12
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffcd 	bl	80008bc <byteToBits>
  for (i = 0; i < 8; ++i) {
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e00b      	b.n	8000940 <owSendByte+0x36>
    owSend(data[i]);
 8000928:	f107 020c 	add.w	r2, r7, #12
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5b 	bl	80007f0 <owSend>
  for (i = 0; i < 8; ++i) {
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b07      	cmp	r3, #7
 8000944:	ddf0      	ble.n	8000928 <owSendByte+0x1e>
  }
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8000964:	7b3b      	ldrb	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e018      	b.n	80009a6 <owCRC+0x56>
      fb = crc ^ dat;
 8000974:	7b7a      	ldrb	r2, [r7, #13]
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	4053      	eors	r3, r2
 800097a:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d104      	bne.n	80009a0 <owCRC+0x50>
 8000996:	7b7b      	ldrb	r3, [r7, #13]
 8000998:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800099c:	43db      	mvns	r3, r3
 800099e:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	3301      	adds	r3, #1
 80009a4:	73fb      	strb	r3, [r7, #15]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	d9e3      	bls.n	8000974 <owCRC+0x24>
    }
    st_byt++;
 80009ac:	7b3b      	ldrb	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80009b2:	7b3a      	ldrb	r2, [r7, #12]
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d4      	bcc.n	8000964 <owCRC+0x14>
  return crc;
 80009ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80009ce:	2107      	movs	r1, #7
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffbd 	bl	8000950 <owCRC>
 80009d6:	4603      	mov	r3, r0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 80009f8:	f7ff fedc 	bl	80007b4 <owResetCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2bf0      	cmp	r3, #240	; 0xf0
 8000a00:	d101      	bne.n	8000a06 <hasNextRom+0x26>
    return 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e097      	b.n	8000b36 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8000a06:	20f0      	movs	r0, #240	; 0xf0
 8000a08:	f7ff ff7f 	bl	800090a <owSendByte>
  do {
		uint8_t answerBit =0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8000a24:	20ff      	movs	r0, #255	; 0xff
 8000a26:	f7ff fee3 	bl	80007f0 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8000a2a:	f7ff ff1f 	bl	800086c <owEchoRead>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff0b 	bl	800084c <owReadSlot>
 8000a36:	4603      	mov	r3, r0
 8000a38:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8000a3a:	20ff      	movs	r0, #255	; 0xff
 8000a3c:	f7ff fed8 	bl	80007f0 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8000a40:	f7ff ff14 	bl	800086c <owEchoRead>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff00 	bl	800084c <owReadSlot>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8000a50:	7afa      	ldrb	r2, [r7, #11]
 8000a52:	7abb      	ldrb	r3, [r7, #10]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d105      	bne.n	8000a64 <hasNextRom+0x84>
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d102      	bne.n	8000a64 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e068      	b.n	8000b36 <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8000a64:	7afa      	ldrb	r2, [r7, #11]
 8000a66:	7abb      	ldrb	r3, [r7, #10]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d002      	beq.n	8000a72 <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	75bb      	strb	r3, [r7, #22]
 8000a70:	e023      	b.n	8000aba <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 8000a72:	7ffa      	ldrb	r2, [r7, #31]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d102      	bne.n	8000a82 <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	75bb      	strb	r3, [r7, #22]
 8000a80:	e01b      	b.n	8000aba <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 8000a82:	7ffa      	ldrb	r2, [r7, #31]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dd02      	ble.n	8000a92 <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	75bb      	strb	r3, [r7, #22]
 8000a90:	e00e      	b.n	8000ab0 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4413      	add	r3, r2
 8000a98:	3314      	adds	r3, #20
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	fa42 f303 	asr.w	r3, r2, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8000ab0:	7dbb      	ldrb	r3, [r7, #22]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 8000ab6:	7ffb      	ldrb	r3, [r7, #31]
 8000ab8:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8000aba:	7dbb      	ldrb	r3, [r7, #22]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00e      	beq.n	8000ade <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8000ade:	7dbb      	ldrb	r3, [r7, #22]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <hasNextRom+0x108>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e000      	b.n	8000aea <hasNextRom+0x10a>
 8000ae8:	23ff      	movs	r3, #255	; 0xff
 8000aea:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8000aec:	7d7b      	ldrb	r3, [r7, #21]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe7d 	bl	80007f0 <owSend>
    ui32BitNumber++;//ищем следующий бит
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	3301      	adds	r3, #1
 8000afa:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	2b3f      	cmp	r3, #63	; 0x3f
 8000b00:	d984      	bls.n	8000a0c <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8000b08:	e00b      	b.n	8000b22 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	441a      	add	r2, r3
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	7811      	ldrb	r1, [r2, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	460a      	mov	r2, r1
 8000b1a:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	75fb      	strb	r3, [r7, #23]
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	2b06      	cmp	r3, #6
 8000b26:	d9f0      	bls.n	8000b0a <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bfcc      	ite	gt
 8000b30:	2301      	movgt	r3, #1
 8000b32:	2300      	movle	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fdba 	bl	80006c4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff40 	bl	80009e0 <hasNextRom>
 8000b60:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	da02      	bge.n	8000b6e <owSearchCmd+0x30>
      return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	e009      	b.n	8000b82 <owSearchCmd+0x44>
    device++;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <owSearchCmd+0x42>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	dde7      	ble.n	8000b50 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8000b80:	68fb      	ldr	r3, [r7, #12]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8000b96:	f7ff fe0d 	bl	80007b4 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8000b9a:	2055      	movs	r0, #85	; 0x55
 8000b9c:	f7ff feb5 	bl	800090a <owSendByte>
  for (; i < 8; i++)
 8000ba0:	e009      	b.n	8000bb6 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fead 	bl	800090a <owSendByte>
  for (; i < 8; i++)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	ddf2      	ble.n	8000ba2 <owMatchRomCmd+0x18>
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8000bd0:	6838      	ldr	r0, [r7, #0]
 8000bd2:	f7ff ffda 	bl	8000b8a <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8000bd6:	2044      	movs	r0, #68	; 0x44
 8000bd8:	f7ff fe97 	bl	800090a <owSendByte>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b10      	cmp	r3, #16
 8000bfa:	d001      	beq.n	8000c00 <owReadScratchpadCmd+0x1c>
 8000bfc:	2b28      	cmp	r3, #40	; 0x28
 8000bfe:	d109      	bne.n	8000c14 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8000c00:	2348      	movs	r3, #72	; 0x48
 8000c02:	82bb      	strh	r3, [r7, #20]
      break;
 8000c04:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8000c06:	68b8      	ldr	r0, [r7, #8]
 8000c08:	f7ff ffbf 	bl	8000b8a <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8000c0c:	20be      	movs	r0, #190	; 0xbe
 8000c0e:	f7ff fe7c 	bl	800090a <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 8000c12:	e048      	b.n	8000ca6 <owReadScratchpadCmd+0xc2>
      return data;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	e04b      	b.n	8000cb0 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8000c18:	8abb      	ldrh	r3, [r7, #20]
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da00      	bge.n	8000c22 <owReadScratchpadCmd+0x3e>
 8000c20:	3307      	adds	r3, #7
 8000c22:	10db      	asrs	r3, r3, #3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	8afb      	ldrh	r3, [r7, #22]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 8000c32:	20ff      	movs	r0, #255	; 0xff
 8000c34:	f7ff fddc 	bl	80007f0 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8000c38:	f7ff fe18 	bl	800086c <owEchoRead>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe04 	bl	800084c <owReadSlot>
 8000c44:	4603      	mov	r3, r0
 8000c46:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d113      	bne.n	8000c76 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8000c4e:	7cfb      	ldrb	r3, [r7, #19]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	8afb      	ldrh	r3, [r7, #22]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b259      	sxtb	r1, r3
 8000c6a:	7cfb      	ldrb	r3, [r7, #19]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e014      	b.n	8000ca0 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8000c76:	7cfb      	ldrb	r3, [r7, #19]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	8afb      	ldrh	r3, [r7, #22]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4013      	ands	r3, r2
 8000c94:	b259      	sxtb	r1, r3
 8000c96:	7cfb      	ldrb	r3, [r7, #19]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 8000ca6:	8afa      	ldrh	r2, [r7, #22]
 8000ca8:	8abb      	ldrh	r3, [r7, #20]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3b4      	bcc.n	8000c18 <owReadScratchpadCmd+0x34>
  }
  return data;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b10      	cmp	r3, #16
 8000ce4:	d022      	beq.n	8000d2c <readTemperature+0x74>
 8000ce6:	2b28      	cmp	r3, #40	; 0x28
 8000ce8:	d13a      	bne.n	8000d60 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff ff76 	bl	8000be4 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	79db      	ldrb	r3, [r3, #7]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	b25a      	sxtb	r2, r3
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	7a1b      	ldrb	r3, [r3, #8]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	7a1b      	ldrb	r3, [r3, #8]
 8000d16:	f003 020f 	and.w	r2, r3, #15
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	111b      	asrs	r3, r3, #4
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000d2a:	e01c      	b.n	8000d66 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	461a      	mov	r2, r3
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff ff55 	bl	8000be4 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	7a1b      	ldrb	r3, [r3, #8]
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8000d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4a:	7a1b      	ldrb	r3, [r3, #8]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8000d5e:	e002      	b.n	8000d66 <readTemperature+0xae>
    default:
      return t;
 8000d60:	8c3b      	ldrh	r3, [r7, #32]
 8000d62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d64:	e008      	b.n	8000d78 <readTemperature+0xc0>
  }
  if (reSense) {
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff ff29 	bl	8000bc6 <owConvertTemperatureCmd>
  }
  return t;
 8000d74:	8c3b      	ldrh	r3, [r7, #32]
 8000d76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d7e:	f362 0307 	bfi	r3, r2, #0, #8
 8000d82:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000d86:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8000d9a:	f7ff fd0b 	bl	80007b4 <owResetCmd>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2bf0      	cmp	r3, #240	; 0xf0
 8000da2:	d079      	beq.n	8000e98 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 8000da4:	484e      	ldr	r0, [pc, #312]	; (8000ee0 <get_ROMid+0x14c>)
 8000da6:	f7ff feca 	bl	8000b3e <owSearchCmd>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <get_ROMid+0x150>)
 8000db0:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8000db2:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <get_ROMid+0x150>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d113      	bne.n	8000de2 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <get_ROMid+0x154>)
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <get_ROMid+0x158>)
 8000dbe:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <get_ROMid+0x15c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e005      	b.n	8000dd4 <get_ROMid+0x40>
					__asm__("nop");
 8000dc8:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8000dca:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <get_ROMid+0x15c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <get_ROMid+0x15c>)
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <get_ROMid+0x15c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <get_ROMid+0x154>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3f3      	bcc.n	8000dc8 <get_ROMid+0x34>
				pDelay = 1000000;
 8000de0:	e7eb      	b.n	8000dba <get_ROMid+0x26>
			}

		}
		i = 0;
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <get_ROMid+0x15c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000de8:	e04f      	b.n	8000e8a <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8000dea:	4b41      	ldr	r3, [pc, #260]	; (8000ef0 <get_ROMid+0x15c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4a3b      	ldr	r2, [pc, #236]	; (8000ee0 <get_ROMid+0x14c>)
 8000df2:	4413      	add	r3, r2
 8000df4:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fde5 	bl	80009c6 <owCRC8>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	79db      	ldrb	r3, [r3, #7]
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d101      	bne.n	8000e0e <get_ROMid+0x7a>
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <get_ROMid+0x160>)
 8000e0c:	e000      	b.n	8000e10 <get_ROMid+0x7c>
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <get_ROMid+0x164>)
 8000e10:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <get_ROMid+0x168>)
 8000e12:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <get_ROMid+0x15c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <get_ROMid+0x16c>)
 8000e1c:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461e      	mov	r6, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	469c      	mov	ip, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000e3a:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000e40:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000e46:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8000e4c:	9305      	str	r3, [sp, #20]
 8000e4e:	9504      	str	r5, [sp, #16]
 8000e50:	9403      	str	r4, [sp, #12]
 8000e52:	9002      	str	r0, [sp, #8]
 8000e54:	9101      	str	r1, [sp, #4]
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	4663      	mov	r3, ip
 8000e5a:	4632      	mov	r2, r6
 8000e5c:	4929      	ldr	r1, [pc, #164]	; (8000f04 <get_ROMid+0x170>)
 8000e5e:	482a      	ldr	r0, [pc, #168]	; (8000f08 <get_ROMid+0x174>)
 8000e60:	f001 feb6 	bl	8002bd0 <siprintf>

			if (crc != r->crc) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	79db      	ldrb	r3, [r3, #7]
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d008      	beq.n	8000e80 <get_ROMid+0xec>
				devInfo.device = i;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <get_ROMid+0x15c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <get_ROMid+0x16c>)
 8000e76:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8000e78:	4924      	ldr	r1, [pc, #144]	; (8000f0c <get_ROMid+0x178>)
 8000e7a:	4823      	ldr	r0, [pc, #140]	; (8000f08 <get_ROMid+0x174>)
 8000e7c:	f001 fea8 	bl	8002bd0 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <get_ROMid+0x15c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <get_ROMid+0x15c>)
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <get_ROMid+0x150>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <get_ROMid+0x15c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8a8      	bhi.n	8000dea <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <get_ROMid+0x154>)
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <get_ROMid+0x158>)
 8000e9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <get_ROMid+0x15c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e005      	b.n	8000eb2 <get_ROMid+0x11e>
		__asm__("nop");
 8000ea6:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <get_ROMid+0x15c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <get_ROMid+0x15c>)
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <get_ROMid+0x15c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <get_ROMid+0x154>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3f3      	bcc.n	8000ea6 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <get_ROMid+0x168>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <get_ROMid+0x160>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f941 	bl	800014c <strcmp>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <get_ROMid+0x140>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e001      	b.n	8000ed8 <get_ROMid+0x144>
	else return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	200000a0 	.word	0x200000a0
 8000ee4:	200000f8 	.word	0x200000f8
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	000f4240 	.word	0x000f4240
 8000ef0:	200000e8 	.word	0x200000e8
 8000ef4:	0800345c 	.word	0x0800345c
 8000ef8:	08003464 	.word	0x08003464
 8000efc:	200000fc 	.word	0x200000fc
 8000f00:	200000bc 	.word	0x200000bc
 8000f04:	08003470 	.word	0x08003470
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	08003498 	.word	0x08003498

08000f10 <get_Temperature>:

void get_Temperature (void)
{
 8000f10:	b598      	push	{r3, r4, r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	i=0;
 8000f14:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <get_Temperature+0x104>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8000f1a:	e071      	b.n	8001000 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 8000f1c:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <get_Temperature+0x104>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <get_Temperature+0x108>)
 8000f22:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000f26:	2b28      	cmp	r3, #40	; 0x28
 8000f28:	d006      	beq.n	8000f38 <get_Temperature+0x28>
 8000f2a:	2b28      	cmp	r3, #40	; 0x28
 8000f2c:	dc60      	bgt.n	8000ff0 <get_Temperature+0xe0>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d060      	beq.n	8000ff4 <get_Temperature+0xe4>
 8000f32:	2b10      	cmp	r3, #16
 8000f34:	d02e      	beq.n	8000f94 <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 8000f36:	e05b      	b.n	8000ff0 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <get_Temperature+0x104>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4a36      	ldr	r2, [pc, #216]	; (8001018 <get_Temperature+0x108>)
 8000f40:	4413      	add	r3, r2
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	4834      	ldr	r0, [pc, #208]	; (8001018 <get_Temperature+0x108>)
 8000f48:	f7ff feb6 	bl	8000cb8 <readTemperature>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <get_Temperature+0x10c>)
 8000f50:	b212      	sxth	r2, r2
 8000f52:	4611      	mov	r1, r2
 8000f54:	7019      	strb	r1, [r3, #0]
 8000f56:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000f5a:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <get_Temperature+0x10c>)
 8000f5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <get_Temperature+0x10c>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	4413      	add	r3, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f9ad 	bl	80002d4 <__aeabi_i2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a25      	ldr	r2, [pc, #148]	; (8001014 <get_Temperature+0x104>)
 8000f7e:	6814      	ldr	r4, [r2, #0]
 8000f80:	4927      	ldr	r1, [pc, #156]	; (8001020 <get_Temperature+0x110>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faae 	bl	80004e4 <__aeabi_fdiv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <get_Temperature+0x114>)
 8000f8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8000f92:	e030      	b.n	8000ff6 <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <get_Temperature+0x104>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <get_Temperature+0x108>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481d      	ldr	r0, [pc, #116]	; (8001018 <get_Temperature+0x108>)
 8000fa4:	f7ff fe88 	bl	8000cb8 <readTemperature>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <get_Temperature+0x10c>)
 8000fac:	b212      	sxth	r2, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	7019      	strb	r1, [r3, #0]
 8000fb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fb6:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <get_Temperature+0x10c>)
 8000fba:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <get_Temperature+0x10c>)
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f97f 	bl	80002d4 <__aeabi_i2f>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <get_Temperature+0x104>)
 8000fda:	6814      	ldr	r4, [r2, #0]
 8000fdc:	4910      	ldr	r1, [pc, #64]	; (8001020 <get_Temperature+0x110>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fa80 	bl	80004e4 <__aeabi_fdiv>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <get_Temperature+0x114>)
 8000fea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8000fee:	e002      	b.n	8000ff6 <get_Temperature+0xe6>
			break;
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <get_Temperature+0xe6>
			break;
 8000ff4:	bf00      	nop
	for (; i < devices; i++) {
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <get_Temperature+0x104>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <get_Temperature+0x104>)
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <get_Temperature+0x118>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <get_Temperature+0x104>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d886      	bhi.n	8000f1c <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	bd98      	pop	{r3, r4, r7, pc}
 8001014:	200000e8 	.word	0x200000e8
 8001018:	200000a0 	.word	0x200000a0
 800101c:	2000009c 	.word	0x2000009c
 8001020:	41200000 	.word	0x41200000
 8001024:	200000e0 	.word	0x200000e0
 8001028:	200000f8 	.word	0x200000f8

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_GPIO_Init+0x40>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <MX_GPIO_Init+0x40>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_GPIO_Init+0x40>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_GPIO_Init+0x40>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <MX_GPIO_Init+0x40>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <MX_GPIO_Init+0x40>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 f994 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f80d 	bl	8001096 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f7ff ffd6 	bl	800102c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001080:	f000 f8f6 	bl	8001270 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  get_ROMid();
 8001084:	f7ff fe86 	bl	8000d94 <get_ROMid>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  get_Temperature();
 8001088:	f7ff ff42 	bl	8000f10 <get_Temperature>
	  HAL_Delay(2000);
 800108c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001090:	f000 f9e8 	bl	8001464 <HAL_Delay>
	  get_Temperature();
 8001094:	e7f8      	b.n	8001088 <main+0x18>

08001096 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b090      	sub	sp, #64	; 0x40
 800109a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2228      	movs	r2, #40	; 0x28
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fd8b 	bl	8002bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fd26 	bl	8001b30 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010ea:	f000 f819 	bl	8001120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2102      	movs	r1, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ff91 	bl	8002030 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001114:	f000 f804 	bl	8001120 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3740      	adds	r7, #64	; 0x40
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	e7fe      	b.n	8001128 <Error_Handler+0x8>
	...

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_MspInit+0x5c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_MspInit+0x5c>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_MspInit+0x5c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x5c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x5c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_MspInit+0x60>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_MspInit+0x60>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 f929 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	owReadHandler();
 80011e4:	f7ff faa8 	bl	8000738 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART1_IRQHandler+0x14>)
 80011ea:	f001 f911 	bl	8002410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000100 	.word	0x20000100

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f001 fca0 	bl	8002b6c <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20005000 	.word	0x20005000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000090 	.word	0x20000090
 8001260:	20000158 	.word	0x20000158

08001264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <MX_USART1_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_USART1_UART_Init+0x4c>)
 80012a8:	f001 f85c 	bl	8002364 <HAL_HalfDuplex_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f7ff ff35 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000100 	.word	0x20000100
 80012c0:	40013800 	.word	0x40013800

080012c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <HAL_UART_MspInit+0x84>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d12c      	bne.n	800133e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_UART_MspInit+0x88>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <HAL_UART_MspInit+0x88>)
 80012ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_UART_MspInit+0x88>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_UART_MspInit+0x88>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_UART_MspInit+0x88>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_UART_MspInit+0x88>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <HAL_UART_MspInit+0x8c>)
 800132a:	f000 fa7d 	bl	8001828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2025      	movs	r0, #37	; 0x25
 8001334:	f000 f991 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001338:	2025      	movs	r0, #37	; 0x25
 800133a:	f000 f9aa 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013800 	.word	0x40013800
 800134c:	40021000 	.word	0x40021000
 8001350:	40010800 	.word	0x40010800

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ff73 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f001 fbfb 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fe75 	bl	8001070 <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001390:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 8001394:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001398:	20000158 	.word	0x20000158

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f947 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff feb6 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f95f 	bl	80016ae <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f927 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000144 	.word	0x20000144

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000144 	.word	0x20000144

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000000c 	.word	0x2000000c

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff90 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff2d 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff42 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff90 	bl	800159c <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff35 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e020      	b.n	8001730 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020e 	bic.w	r2, r2, #14
 80016fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174e:	2b02      	cmp	r3, #2
 8001750:	d005      	beq.n	800175e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e051      	b.n	8001802 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 020e 	bic.w	r2, r2, #14
 800176c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_DMA_Abort_IT+0xd0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d029      	beq.n	80017dc <HAL_DMA_Abort_IT+0xa0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_DMA_Abort_IT+0xd4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d022      	beq.n	80017d8 <HAL_DMA_Abort_IT+0x9c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_DMA_Abort_IT+0xd8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d01a      	beq.n	80017d2 <HAL_DMA_Abort_IT+0x96>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <HAL_DMA_Abort_IT+0xdc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d012      	beq.n	80017cc <HAL_DMA_Abort_IT+0x90>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_DMA_Abort_IT+0xe0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00a      	beq.n	80017c6 <HAL_DMA_Abort_IT+0x8a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_DMA_Abort_IT+0xe4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d102      	bne.n	80017c0 <HAL_DMA_Abort_IT+0x84>
 80017ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017be:	e00e      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	e00b      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	e008      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d0:	e005      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	e002      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017d8:	2310      	movs	r3, #16
 80017da:	e000      	b.n	80017de <HAL_DMA_Abort_IT+0xa2>
 80017dc:	2301      	movs	r3, #1
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_DMA_Abort_IT+0xe8>)
 80017e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    } 
  }
  return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e169      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800183c:	2201      	movs	r2, #1
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8158 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d05e      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001864:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d875      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800186a:	4a98      	ldr	r2, [pc, #608]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d058      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001870:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d86f      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001876:	4a96      	ldr	r2, [pc, #600]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 800187c:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d869      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001882:	4a94      	ldr	r2, [pc, #592]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04c      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d863      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800188e:	4a92      	ldr	r2, [pc, #584]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d046      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001894:	4a90      	ldr	r2, [pc, #576]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d85d      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d82a      	bhi.n	80018f4 <HAL_GPIO_Init+0xcc>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d859      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_GPIO_Init+0x80>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001923 	.word	0x08001923
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	0800190f 	.word	0x0800190f
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001957 	.word	0x08001957
 80018bc:	08001957 	.word	0x08001957
 80018c0:	08001957 	.word	0x08001957
 80018c4:	08001957 	.word	0x08001957
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001957 	.word	0x08001957
 80018d0:	08001957 	.word	0x08001957
 80018d4:	08001957 	.word	0x08001957
 80018d8:	08001957 	.word	0x08001957
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001957 	.word	0x08001957
 80018e4:	08001957 	.word	0x08001957
 80018e8:	08001957 	.word	0x08001957
 80018ec:	08001905 	.word	0x08001905
 80018f0:	08001919 	.word	0x08001919
 80018f4:	4a79      	ldr	r2, [pc, #484]	; (8001adc <HAL_GPIO_Init+0x2b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e029      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e024      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01f      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e01a      	b.n	8001958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e013      	b.n	8001958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e009      	b.n	8001958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e003      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x130>
          break;
 8001956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d801      	bhi.n	8001962 <HAL_GPIO_Init+0x13a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_Init+0x13e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_Init+0x14c>
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x152>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3b08      	subs	r3, #8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	210f      	movs	r1, #15
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80b1 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <HAL_GPIO_Init+0x2c0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1e0>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	492c      	ldr	r1, [pc, #176]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4928      	ldr	r1, [pc, #160]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	491e      	ldr	r1, [pc, #120]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4918      	ldr	r1, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4914      	ldr	r1, [pc, #80]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d021      	beq.n	8001afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
 8001ac4:	e021      	b.n	8001b0a <HAL_GPIO_Init+0x2e2>
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae8e 	bne.w	800183c <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e26c      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
 8001b68:	4b8c      	ldr	r3, [pc, #560]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d10b      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d06c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x12c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d168      	bne.n	8001c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e246      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x76>
 8001b98:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7f      	ldr	r2, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e02e      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x98>
 8001bae:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b78      	ldr	r3, [pc, #480]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xbc>
 8001bd2:	4b72      	ldr	r3, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a71      	ldr	r2, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xd4>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc20 	bl	8001450 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fc1c 	bl	8001450 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1fa      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe4>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc0c 	bl	8001450 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fc08 	bl	8001450 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1e6      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x10c>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d063      	beq.n	8001d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d11c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1ba      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e03a      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d020      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fbc1 	bl	8001450 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fbbd 	bl	8001450 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e19b      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fba0 	bl	8001450 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff fb9c 	bl	8001450 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e17a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03a      	beq.n	8001db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fb80 	bl	8001450 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fb7c 	bl	8001450 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e15a      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fad8 	bl	8002328 <RCC_Delay>
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fb66 	bl	8001450 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb62 	bl	8001450 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d908      	bls.n	8001da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e140      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	42420000 	.word	0x42420000
 8001da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e9      	bne.n	8001d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a6 	beq.w	8001f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b97      	ldr	r3, [pc, #604]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b94      	ldr	r3, [pc, #592]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a93      	ldr	r2, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb23 	bl	8001450 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff fb1f 	bl	8001450 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0fd      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x4f8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x312>
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a7a      	ldr	r2, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e02d      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x334>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a72      	ldr	r2, [pc, #456]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	e01c      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x356>
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a69      	ldr	r2, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e00b      	b.n	8001e9e <HAL_RCC_OscConfig+0x36e>
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a66      	ldr	r2, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fad3 	bl	8001450 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff facf 	bl	8001450 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0ab      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	4b57      	ldr	r3, [pc, #348]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x37e>
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fabd 	bl	8001450 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fab9 	bl	8001450 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e095      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b48      	ldr	r3, [pc, #288]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8081 	beq.w	800201a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d061      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d146      	bne.n	8001fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa8d 	bl	8001450 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fa89 	bl	8001450 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e067      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d108      	bne.n	8001f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a19      	ldr	r1, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4927      	ldr	r1, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fa5d 	bl	8001450 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fa59 	bl	8001450 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e037      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x46a>
 8001fb8:	e02f      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_RCC_OscConfig+0x4fc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa46 	bl	8001450 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fa42 	bl	8001450 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e020      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x498>
 8001fe6:	e018      	b.n	800201a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	42420060 	.word	0x42420060

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0d0      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d910      	bls.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4965      	ldr	r1, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d040      	beq.n	8002150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d115      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e073      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4936      	ldr	r1, [pc, #216]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff f996 	bl	8001450 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7ff f992 	bl	8001450 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e053      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4922      	ldr	r1, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1cc>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8f4 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	080034c8 	.word	0x080034c8
 80021fc:	20000004 	.word	0x20000004
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b490      	push	{r4, r7}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800220c:	1d3c      	adds	r4, r7, #4
 800220e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002214:	f240 2301 	movw	r3, #513	; 0x201
 8002218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x46>
 8002242:	e02d      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	623b      	str	r3, [r7, #32]
      break;
 8002248:	e02d      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002256:	4413      	add	r3, r2
 8002258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800225c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c5b      	lsrs	r3, r3, #17
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002276:	4413      	add	r3, r2
 8002278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800227c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002282:	fb02 f203 	mul.w	r2, r2, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e004      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	623b      	str	r3, [r7, #32]
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a2:	623b      	str	r3, [r7, #32]
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc90      	pop	{r4, r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	080034b8 	.word	0x080034b8
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	003d0900 	.word	0x003d0900

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff2 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	080034d8 	.word	0x080034d8

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff ffde 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080034d8 	.word	0x080034d8

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000004 	.word	0x20000004
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e047      	b.n	8002406 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe ff9a 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb51 	bl	8002a50 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80023cc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0208 	orr.w	r2, r2, #8
 80023dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_UART_IRQHandler+0x52>
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa4f 	bl	80028fe <UART_Receive_IT>
      return;
 8002460:	e17b      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80b1 	beq.w	80025cc <HAL_UART_IRQHandler+0x1bc>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_UART_IRQHandler+0x70>
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_UART_IRQHandler+0x90>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_UART_IRQHandler+0xb0>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0xd0>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00f      	beq.n	800250a <HAL_UART_IRQHandler+0xfa>
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_UART_IRQHandler+0xee>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0208 	orr.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 811e 	beq.w	8002750 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_UART_IRQHandler+0x11e>
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9e8 	bl	80028fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <HAL_UART_IRQHandler+0x146>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d031      	beq.n	80025ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f92a 	bl	80027b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d023      	beq.n	80025b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	4a76      	ldr	r2, [pc, #472]	; (8002760 <HAL_UART_IRQHandler+0x350>)
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f8d4 	bl	800173c <HAL_DMA_Abort_IT>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	e00e      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8ec 	bl	8002788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	e00a      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8e8 	bl	8002788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e006      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8e4 	bl	8002788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025c6:	e0c3      	b.n	8002750 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	bf00      	nop
    return;
 80025ca:	e0c1      	b.n	8002750 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	f040 80a1 	bne.w	8002718 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 809b 	beq.w	8002718 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8095 	beq.w	8002718 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04e      	beq.n	80026b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8098 	beq.w	8002754 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002628:	8a3a      	ldrh	r2, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 8092 	bcs.w	8002754 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8a3a      	ldrh	r2, [r7, #16]
 8002634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b20      	cmp	r3, #32
 800263e:	d02b      	beq.n	8002698 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0210 	bic.w	r2, r2, #16
 800268c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f817 	bl	80016c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f876 	bl	800279a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026ae:	e051      	b.n	8002754 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d047      	beq.n	8002758 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d044      	beq.n	8002758 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800270c:	8a7b      	ldrh	r3, [r7, #18]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f842 	bl	800279a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002716:	e01f      	b.n	8002758 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_UART_IRQHandler+0x324>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f87f 	bl	8002830 <UART_Transmit_IT>
    return;
 8002732:	e012      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <HAL_UART_IRQHandler+0x34a>
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f8c0 	bl	80028ce <UART_EndTransmit_IT>
    return;
 800274e:	e004      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
    return;
 8002750:	bf00      	nop
 8002752:	e002      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
      return;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
      return;
 8002758:	bf00      	nop
  }
}
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08002809 	.word	0x08002809

08002764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0210 	bic.w	r2, r2, #16
 80027ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff ffb0 	bl	8002788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b21      	cmp	r3, #33	; 0x21
 8002842:	d13e      	bne.n	80028c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d114      	bne.n	8002878 <UART_Transmit_IT+0x48>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d110      	bne.n	8002878 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800286a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	1c9a      	adds	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]
 8002876:	e008      	b.n	800288a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6211      	str	r1, [r2, #32]
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4619      	mov	r1, r3
 8002898:	84d1      	strh	r1, [r2, #38]	; 0x26
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff38 	bl	8002764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b22      	cmp	r3, #34	; 0x22
 8002910:	f040 8099 	bne.w	8002a46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d117      	bne.n	800294e <UART_Receive_IT+0x50>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293c:	b29a      	uxth	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	1c9a      	adds	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
 800294c:	e026      	b.n	800299c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002960:	d007      	beq.n	8002972 <UART_Receive_IT+0x74>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <UART_Receive_IT+0x82>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e008      	b.n	8002992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298c:	b2da      	uxtb	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4619      	mov	r1, r3
 80029aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d148      	bne.n	8002a42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0220 	bic.w	r2, r2, #32
 80029be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d123      	bne.n	8002a38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0210 	bic.w	r2, r2, #16
 8002a04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d10a      	bne.n	8002a2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff feb2 	bl	800279a <HAL_UARTEx_RxEventCallback>
 8002a36:	e002      	b.n	8002a3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff fe9c 	bl	8002776 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e002      	b.n	8002a48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a8a:	f023 030c 	bic.w	r3, r3, #12
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	; (8002b64 <UART_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f7ff fc22 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	e002      	b.n	8002ac6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff fc0a 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	0119      	lsls	r1, r3, #4
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <UART_SetConfig+0x118>)
 8002afe:	fba3 0302 	umull	r0, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	4419      	add	r1, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <UART_SetConfig+0x118>)
 8002b36:	fba3 0302 	umull	r0, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2064      	movs	r0, #100	; 0x64
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <UART_SetConfig+0x118>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	440a      	add	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40013800 	.word	0x40013800
 8002b68:	51eb851f 	.word	0x51eb851f

08002b6c <__errno>:
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <__errno+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000010 	.word	0x20000010

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4d0c      	ldr	r5, [pc, #48]	; (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	; (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	f000 fc5c 	bl	8003444 <_init>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	4d0a      	ldr	r5, [pc, #40]	; (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08003514 	.word	0x08003514
 8002bb4:	08003514 	.word	0x08003514
 8002bb8:	08003514 	.word	0x08003514
 8002bbc:	08003518 	.word	0x08003518

08002bc0 <memset>:
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4402      	add	r2, r0
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d100      	bne.n	8002bca <memset+0xa>
 8002bc8:	4770      	bx	lr
 8002bca:	f803 1b01 	strb.w	r1, [r3], #1
 8002bce:	e7f9      	b.n	8002bc4 <memset+0x4>

08002bd0 <siprintf>:
 8002bd0:	b40e      	push	{r1, r2, r3}
 8002bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bd6:	b500      	push	{lr}
 8002bd8:	b09c      	sub	sp, #112	; 0x70
 8002bda:	ab1d      	add	r3, sp, #116	; 0x74
 8002bdc:	9002      	str	r0, [sp, #8]
 8002bde:	9006      	str	r0, [sp, #24]
 8002be0:	9107      	str	r1, [sp, #28]
 8002be2:	9104      	str	r1, [sp, #16]
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <siprintf+0x38>)
 8002be6:	4909      	ldr	r1, [pc, #36]	; (8002c0c <siprintf+0x3c>)
 8002be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bec:	9105      	str	r1, [sp, #20]
 8002bee:	6800      	ldr	r0, [r0, #0]
 8002bf0:	a902      	add	r1, sp, #8
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	f000 f868 	bl	8002cc8 <_svfiprintf_r>
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	9b02      	ldr	r3, [sp, #8]
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	b01c      	add	sp, #112	; 0x70
 8002c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c04:	b003      	add	sp, #12
 8002c06:	4770      	bx	lr
 8002c08:	20000010 	.word	0x20000010
 8002c0c:	ffff0208 	.word	0xffff0208

08002c10 <__ssputs_r>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	688e      	ldr	r6, [r1, #8]
 8002c16:	4682      	mov	sl, r0
 8002c18:	429e      	cmp	r6, r3
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4690      	mov	r8, r2
 8002c1e:	461f      	mov	r7, r3
 8002c20:	d838      	bhi.n	8002c94 <__ssputs_r+0x84>
 8002c22:	898a      	ldrh	r2, [r1, #12]
 8002c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c28:	d032      	beq.n	8002c90 <__ssputs_r+0x80>
 8002c2a:	6825      	ldr	r5, [r4, #0]
 8002c2c:	6909      	ldr	r1, [r1, #16]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	eba5 0901 	sub.w	r9, r5, r1
 8002c34:	6965      	ldr	r5, [r4, #20]
 8002c36:	444b      	add	r3, r9
 8002c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c40:	106d      	asrs	r5, r5, #1
 8002c42:	429d      	cmp	r5, r3
 8002c44:	bf38      	it	cc
 8002c46:	461d      	movcc	r5, r3
 8002c48:	0553      	lsls	r3, r2, #21
 8002c4a:	d531      	bpl.n	8002cb0 <__ssputs_r+0xa0>
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f000 fb53 	bl	80032f8 <_malloc_r>
 8002c52:	4606      	mov	r6, r0
 8002c54:	b950      	cbnz	r0, 8002c6c <__ssputs_r+0x5c>
 8002c56:	230c      	movs	r3, #12
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f8ca 3000 	str.w	r3, [sl]
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c66:	81a3      	strh	r3, [r4, #12]
 8002c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6c:	464a      	mov	r2, r9
 8002c6e:	6921      	ldr	r1, [r4, #16]
 8002c70:	f000 face 	bl	8003210 <memcpy>
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	6126      	str	r6, [r4, #16]
 8002c82:	444e      	add	r6, r9
 8002c84:	6026      	str	r6, [r4, #0]
 8002c86:	463e      	mov	r6, r7
 8002c88:	6165      	str	r5, [r4, #20]
 8002c8a:	eba5 0509 	sub.w	r5, r5, r9
 8002c8e:	60a5      	str	r5, [r4, #8]
 8002c90:	42be      	cmp	r6, r7
 8002c92:	d900      	bls.n	8002c96 <__ssputs_r+0x86>
 8002c94:	463e      	mov	r6, r7
 8002c96:	4632      	mov	r2, r6
 8002c98:	4641      	mov	r1, r8
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	f000 fac6 	bl	800322c <memmove>
 8002ca0:	68a3      	ldr	r3, [r4, #8]
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	1b9b      	subs	r3, r3, r6
 8002ca6:	4432      	add	r2, r6
 8002ca8:	2000      	movs	r0, #0
 8002caa:	60a3      	str	r3, [r4, #8]
 8002cac:	6022      	str	r2, [r4, #0]
 8002cae:	e7db      	b.n	8002c68 <__ssputs_r+0x58>
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	f000 fb7b 	bl	80033ac <_realloc_r>
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d1e1      	bne.n	8002c80 <__ssputs_r+0x70>
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	6921      	ldr	r1, [r4, #16]
 8002cc0:	f000 face 	bl	8003260 <_free_r>
 8002cc4:	e7c7      	b.n	8002c56 <__ssputs_r+0x46>
	...

08002cc8 <_svfiprintf_r>:
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	4698      	mov	r8, r3
 8002cce:	898b      	ldrh	r3, [r1, #12]
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	b09d      	sub	sp, #116	; 0x74
 8002cda:	d50e      	bpl.n	8002cfa <_svfiprintf_r+0x32>
 8002cdc:	690b      	ldr	r3, [r1, #16]
 8002cde:	b963      	cbnz	r3, 8002cfa <_svfiprintf_r+0x32>
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	f000 fb09 	bl	80032f8 <_malloc_r>
 8002ce6:	6028      	str	r0, [r5, #0]
 8002ce8:	6128      	str	r0, [r5, #16]
 8002cea:	b920      	cbnz	r0, 8002cf6 <_svfiprintf_r+0x2e>
 8002cec:	230c      	movs	r3, #12
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	e0d1      	b.n	8002e9a <_svfiprintf_r+0x1d2>
 8002cf6:	2340      	movs	r3, #64	; 0x40
 8002cf8:	616b      	str	r3, [r5, #20]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cfe:	2320      	movs	r3, #32
 8002d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d04:	2330      	movs	r3, #48	; 0x30
 8002d06:	f04f 0901 	mov.w	r9, #1
 8002d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002eb4 <_svfiprintf_r+0x1ec>
 8002d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d16:	4623      	mov	r3, r4
 8002d18:	469a      	mov	sl, r3
 8002d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d1e:	b10a      	cbz	r2, 8002d24 <_svfiprintf_r+0x5c>
 8002d20:	2a25      	cmp	r2, #37	; 0x25
 8002d22:	d1f9      	bne.n	8002d18 <_svfiprintf_r+0x50>
 8002d24:	ebba 0b04 	subs.w	fp, sl, r4
 8002d28:	d00b      	beq.n	8002d42 <_svfiprintf_r+0x7a>
 8002d2a:	465b      	mov	r3, fp
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	4638      	mov	r0, r7
 8002d32:	f7ff ff6d 	bl	8002c10 <__ssputs_r>
 8002d36:	3001      	adds	r0, #1
 8002d38:	f000 80aa 	beq.w	8002e90 <_svfiprintf_r+0x1c8>
 8002d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d3e:	445a      	add	r2, fp
 8002d40:	9209      	str	r2, [sp, #36]	; 0x24
 8002d42:	f89a 3000 	ldrb.w	r3, [sl]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80a2 	beq.w	8002e90 <_svfiprintf_r+0x1c8>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d56:	f10a 0a01 	add.w	sl, sl, #1
 8002d5a:	9304      	str	r3, [sp, #16]
 8002d5c:	9307      	str	r3, [sp, #28]
 8002d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d62:	931a      	str	r3, [sp, #104]	; 0x68
 8002d64:	4654      	mov	r4, sl
 8002d66:	2205      	movs	r2, #5
 8002d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6c:	4851      	ldr	r0, [pc, #324]	; (8002eb4 <_svfiprintf_r+0x1ec>)
 8002d6e:	f000 fa41 	bl	80031f4 <memchr>
 8002d72:	9a04      	ldr	r2, [sp, #16]
 8002d74:	b9d8      	cbnz	r0, 8002dae <_svfiprintf_r+0xe6>
 8002d76:	06d0      	lsls	r0, r2, #27
 8002d78:	bf44      	itt	mi
 8002d7a:	2320      	movmi	r3, #32
 8002d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d80:	0711      	lsls	r1, r2, #28
 8002d82:	bf44      	itt	mi
 8002d84:	232b      	movmi	r3, #43	; 0x2b
 8002d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d90:	d015      	beq.n	8002dbe <_svfiprintf_r+0xf6>
 8002d92:	4654      	mov	r4, sl
 8002d94:	2000      	movs	r0, #0
 8002d96:	f04f 0c0a 	mov.w	ip, #10
 8002d9a:	9a07      	ldr	r2, [sp, #28]
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002da2:	3b30      	subs	r3, #48	; 0x30
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d94e      	bls.n	8002e46 <_svfiprintf_r+0x17e>
 8002da8:	b1b0      	cbz	r0, 8002dd8 <_svfiprintf_r+0x110>
 8002daa:	9207      	str	r2, [sp, #28]
 8002dac:	e014      	b.n	8002dd8 <_svfiprintf_r+0x110>
 8002dae:	eba0 0308 	sub.w	r3, r0, r8
 8002db2:	fa09 f303 	lsl.w	r3, r9, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	46a2      	mov	sl, r4
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	e7d2      	b.n	8002d64 <_svfiprintf_r+0x9c>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	1d19      	adds	r1, r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	9103      	str	r1, [sp, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bfbb      	ittet	lt
 8002dca:	425b      	neglt	r3, r3
 8002dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8002dd0:	9307      	strge	r3, [sp, #28]
 8002dd2:	9307      	strlt	r3, [sp, #28]
 8002dd4:	bfb8      	it	lt
 8002dd6:	9204      	strlt	r2, [sp, #16]
 8002dd8:	7823      	ldrb	r3, [r4, #0]
 8002dda:	2b2e      	cmp	r3, #46	; 0x2e
 8002ddc:	d10c      	bne.n	8002df8 <_svfiprintf_r+0x130>
 8002dde:	7863      	ldrb	r3, [r4, #1]
 8002de0:	2b2a      	cmp	r3, #42	; 0x2a
 8002de2:	d135      	bne.n	8002e50 <_svfiprintf_r+0x188>
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	3402      	adds	r4, #2
 8002de8:	1d1a      	adds	r2, r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfb8      	it	lt
 8002df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002df6:	9305      	str	r3, [sp, #20]
 8002df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ec4 <_svfiprintf_r+0x1fc>
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4650      	mov	r0, sl
 8002e00:	7821      	ldrb	r1, [r4, #0]
 8002e02:	f000 f9f7 	bl	80031f4 <memchr>
 8002e06:	b140      	cbz	r0, 8002e1a <_svfiprintf_r+0x152>
 8002e08:	2340      	movs	r3, #64	; 0x40
 8002e0a:	eba0 000a 	sub.w	r0, r0, sl
 8002e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e12:	9b04      	ldr	r3, [sp, #16]
 8002e14:	3401      	adds	r4, #1
 8002e16:	4303      	orrs	r3, r0
 8002e18:	9304      	str	r3, [sp, #16]
 8002e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1e:	2206      	movs	r2, #6
 8002e20:	4825      	ldr	r0, [pc, #148]	; (8002eb8 <_svfiprintf_r+0x1f0>)
 8002e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e26:	f000 f9e5 	bl	80031f4 <memchr>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d038      	beq.n	8002ea0 <_svfiprintf_r+0x1d8>
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <_svfiprintf_r+0x1f4>)
 8002e30:	bb1b      	cbnz	r3, 8002e7a <_svfiprintf_r+0x1b2>
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	3307      	adds	r3, #7
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e40:	4433      	add	r3, r6
 8002e42:	9309      	str	r3, [sp, #36]	; 0x24
 8002e44:	e767      	b.n	8002d16 <_svfiprintf_r+0x4e>
 8002e46:	460c      	mov	r4, r1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e4e:	e7a5      	b.n	8002d9c <_svfiprintf_r+0xd4>
 8002e50:	2300      	movs	r3, #0
 8002e52:	f04f 0c0a 	mov.w	ip, #10
 8002e56:	4619      	mov	r1, r3
 8002e58:	3401      	adds	r4, #1
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e62:	3a30      	subs	r2, #48	; 0x30
 8002e64:	2a09      	cmp	r2, #9
 8002e66:	d903      	bls.n	8002e70 <_svfiprintf_r+0x1a8>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0c5      	beq.n	8002df8 <_svfiprintf_r+0x130>
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	e7c3      	b.n	8002df8 <_svfiprintf_r+0x130>
 8002e70:	4604      	mov	r4, r0
 8002e72:	2301      	movs	r3, #1
 8002e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e78:	e7f0      	b.n	8002e5c <_svfiprintf_r+0x194>
 8002e7a:	ab03      	add	r3, sp, #12
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	462a      	mov	r2, r5
 8002e80:	4638      	mov	r0, r7
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <_svfiprintf_r+0x1f8>)
 8002e84:	a904      	add	r1, sp, #16
 8002e86:	f3af 8000 	nop.w
 8002e8a:	1c42      	adds	r2, r0, #1
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	d1d6      	bne.n	8002e3e <_svfiprintf_r+0x176>
 8002e90:	89ab      	ldrh	r3, [r5, #12]
 8002e92:	065b      	lsls	r3, r3, #25
 8002e94:	f53f af2c 	bmi.w	8002cf0 <_svfiprintf_r+0x28>
 8002e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e9a:	b01d      	add	sp, #116	; 0x74
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea0:	ab03      	add	r3, sp, #12
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	462a      	mov	r2, r5
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <_svfiprintf_r+0x1f8>)
 8002eaa:	a904      	add	r1, sp, #16
 8002eac:	f000 f87c 	bl	8002fa8 <_printf_i>
 8002eb0:	e7eb      	b.n	8002e8a <_svfiprintf_r+0x1c2>
 8002eb2:	bf00      	nop
 8002eb4:	080034e0 	.word	0x080034e0
 8002eb8:	080034ea 	.word	0x080034ea
 8002ebc:	00000000 	.word	0x00000000
 8002ec0:	08002c11 	.word	0x08002c11
 8002ec4:	080034e6 	.word	0x080034e6

08002ec8 <_printf_common>:
 8002ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	4616      	mov	r6, r2
 8002ece:	4699      	mov	r9, r3
 8002ed0:	688a      	ldr	r2, [r1, #8]
 8002ed2:	690b      	ldr	r3, [r1, #16]
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bfb8      	it	lt
 8002eda:	4613      	movlt	r3, r2
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ee8:	b10a      	cbz	r2, 8002eee <_printf_common+0x26>
 8002eea:	3301      	adds	r3, #1
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	0699      	lsls	r1, r3, #26
 8002ef2:	bf42      	ittt	mi
 8002ef4:	6833      	ldrmi	r3, [r6, #0]
 8002ef6:	3302      	addmi	r3, #2
 8002ef8:	6033      	strmi	r3, [r6, #0]
 8002efa:	6825      	ldr	r5, [r4, #0]
 8002efc:	f015 0506 	ands.w	r5, r5, #6
 8002f00:	d106      	bne.n	8002f10 <_printf_common+0x48>
 8002f02:	f104 0a19 	add.w	sl, r4, #25
 8002f06:	68e3      	ldr	r3, [r4, #12]
 8002f08:	6832      	ldr	r2, [r6, #0]
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	42ab      	cmp	r3, r5
 8002f0e:	dc28      	bgt.n	8002f62 <_printf_common+0x9a>
 8002f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f14:	1e13      	subs	r3, r2, #0
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	bf18      	it	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	0692      	lsls	r2, r2, #26
 8002f1e:	d42d      	bmi.n	8002f7c <_printf_common+0xb4>
 8002f20:	4649      	mov	r1, r9
 8002f22:	4638      	mov	r0, r7
 8002f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d020      	beq.n	8002f70 <_printf_common+0xa8>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	68e5      	ldr	r5, [r4, #12]
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf18      	it	ne
 8002f3a:	2500      	movne	r5, #0
 8002f3c:	6832      	ldr	r2, [r6, #0]
 8002f3e:	f04f 0600 	mov.w	r6, #0
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	bf08      	it	eq
 8002f46:	1aad      	subeq	r5, r5, r2
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	bf08      	it	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bfc4      	itt	gt
 8002f54:	1a9b      	subgt	r3, r3, r2
 8002f56:	18ed      	addgt	r5, r5, r3
 8002f58:	341a      	adds	r4, #26
 8002f5a:	42b5      	cmp	r5, r6
 8002f5c:	d11a      	bne.n	8002f94 <_printf_common+0xcc>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e008      	b.n	8002f74 <_printf_common+0xac>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4652      	mov	r2, sl
 8002f66:	4649      	mov	r1, r9
 8002f68:	4638      	mov	r0, r7
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d103      	bne.n	8002f78 <_printf_common+0xb0>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7c4      	b.n	8002f06 <_printf_common+0x3e>
 8002f7c:	2030      	movs	r0, #48	; 0x30
 8002f7e:	18e1      	adds	r1, r4, r3
 8002f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8a:	4422      	add	r2, r4
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f92:	e7c5      	b.n	8002f20 <_printf_common+0x58>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4622      	mov	r2, r4
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0e6      	beq.n	8002f70 <_printf_common+0xa8>
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7d9      	b.n	8002f5a <_printf_common+0x92>
	...

08002fa8 <_printf_i>:
 8002fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	460c      	mov	r4, r1
 8002fae:	7e27      	ldrb	r7, [r4, #24]
 8002fb0:	4691      	mov	r9, r2
 8002fb2:	2f78      	cmp	r7, #120	; 0x78
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	469a      	mov	sl, r3
 8002fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fbe:	d807      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fc0:	2f62      	cmp	r7, #98	; 0x62
 8002fc2:	d80a      	bhi.n	8002fda <_printf_i+0x32>
 8002fc4:	2f00      	cmp	r7, #0
 8002fc6:	f000 80d9 	beq.w	800317c <_printf_i+0x1d4>
 8002fca:	2f58      	cmp	r7, #88	; 0x58
 8002fcc:	f000 80a4 	beq.w	8003118 <_printf_i+0x170>
 8002fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fd8:	e03a      	b.n	8003050 <_printf_i+0xa8>
 8002fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fde:	2b15      	cmp	r3, #21
 8002fe0:	d8f6      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fe2:	a001      	add	r0, pc, #4	; (adr r0, 8002fe8 <_printf_i+0x40>)
 8002fe4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fe8:	08003041 	.word	0x08003041
 8002fec:	08003055 	.word	0x08003055
 8002ff0:	08002fd1 	.word	0x08002fd1
 8002ff4:	08002fd1 	.word	0x08002fd1
 8002ff8:	08002fd1 	.word	0x08002fd1
 8002ffc:	08002fd1 	.word	0x08002fd1
 8003000:	08003055 	.word	0x08003055
 8003004:	08002fd1 	.word	0x08002fd1
 8003008:	08002fd1 	.word	0x08002fd1
 800300c:	08002fd1 	.word	0x08002fd1
 8003010:	08002fd1 	.word	0x08002fd1
 8003014:	08003163 	.word	0x08003163
 8003018:	08003085 	.word	0x08003085
 800301c:	08003145 	.word	0x08003145
 8003020:	08002fd1 	.word	0x08002fd1
 8003024:	08002fd1 	.word	0x08002fd1
 8003028:	08003185 	.word	0x08003185
 800302c:	08002fd1 	.word	0x08002fd1
 8003030:	08003085 	.word	0x08003085
 8003034:	08002fd1 	.word	0x08002fd1
 8003038:	08002fd1 	.word	0x08002fd1
 800303c:	0800314d 	.word	0x0800314d
 8003040:	680b      	ldr	r3, [r1, #0]
 8003042:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	600a      	str	r2, [r1, #0]
 800304c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003050:	2301      	movs	r3, #1
 8003052:	e0a4      	b.n	800319e <_printf_i+0x1f6>
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	6808      	ldr	r0, [r1, #0]
 8003058:	062e      	lsls	r6, r5, #24
 800305a:	f100 0304 	add.w	r3, r0, #4
 800305e:	d50a      	bpl.n	8003076 <_printf_i+0xce>
 8003060:	6805      	ldr	r5, [r0, #0]
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	2d00      	cmp	r5, #0
 8003066:	da03      	bge.n	8003070 <_printf_i+0xc8>
 8003068:	232d      	movs	r3, #45	; 0x2d
 800306a:	426d      	negs	r5, r5
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003070:	230a      	movs	r3, #10
 8003072:	485e      	ldr	r0, [pc, #376]	; (80031ec <_printf_i+0x244>)
 8003074:	e019      	b.n	80030aa <_printf_i+0x102>
 8003076:	f015 0f40 	tst.w	r5, #64	; 0x40
 800307a:	6805      	ldr	r5, [r0, #0]
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	bf18      	it	ne
 8003080:	b22d      	sxthne	r5, r5
 8003082:	e7ef      	b.n	8003064 <_printf_i+0xbc>
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	1d18      	adds	r0, r3, #4
 800308a:	6008      	str	r0, [r1, #0]
 800308c:	0628      	lsls	r0, r5, #24
 800308e:	d501      	bpl.n	8003094 <_printf_i+0xec>
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	e002      	b.n	800309a <_printf_i+0xf2>
 8003094:	0669      	lsls	r1, r5, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0xe8>
 8003098:	881d      	ldrh	r5, [r3, #0]
 800309a:	2f6f      	cmp	r7, #111	; 0x6f
 800309c:	bf0c      	ite	eq
 800309e:	2308      	moveq	r3, #8
 80030a0:	230a      	movne	r3, #10
 80030a2:	4852      	ldr	r0, [pc, #328]	; (80031ec <_printf_i+0x244>)
 80030a4:	2100      	movs	r1, #0
 80030a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030aa:	6866      	ldr	r6, [r4, #4]
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	bfa8      	it	ge
 80030b0:	6821      	ldrge	r1, [r4, #0]
 80030b2:	60a6      	str	r6, [r4, #8]
 80030b4:	bfa4      	itt	ge
 80030b6:	f021 0104 	bicge.w	r1, r1, #4
 80030ba:	6021      	strge	r1, [r4, #0]
 80030bc:	b90d      	cbnz	r5, 80030c2 <_printf_i+0x11a>
 80030be:	2e00      	cmp	r6, #0
 80030c0:	d04d      	beq.n	800315e <_printf_i+0x1b6>
 80030c2:	4616      	mov	r6, r2
 80030c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80030c8:	fb03 5711 	mls	r7, r3, r1, r5
 80030cc:	5dc7      	ldrb	r7, [r0, r7]
 80030ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030d2:	462f      	mov	r7, r5
 80030d4:	42bb      	cmp	r3, r7
 80030d6:	460d      	mov	r5, r1
 80030d8:	d9f4      	bls.n	80030c4 <_printf_i+0x11c>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10b      	bne.n	80030f6 <_printf_i+0x14e>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	07df      	lsls	r7, r3, #31
 80030e2:	d508      	bpl.n	80030f6 <_printf_i+0x14e>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	6861      	ldr	r1, [r4, #4]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	bfde      	ittt	le
 80030ec:	2330      	movle	r3, #48	; 0x30
 80030ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030f6:	1b92      	subs	r2, r2, r6
 80030f8:	6122      	str	r2, [r4, #16]
 80030fa:	464b      	mov	r3, r9
 80030fc:	4621      	mov	r1, r4
 80030fe:	4640      	mov	r0, r8
 8003100:	f8cd a000 	str.w	sl, [sp]
 8003104:	aa03      	add	r2, sp, #12
 8003106:	f7ff fedf 	bl	8002ec8 <_printf_common>
 800310a:	3001      	adds	r0, #1
 800310c:	d14c      	bne.n	80031a8 <_printf_i+0x200>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	b004      	add	sp, #16
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	4834      	ldr	r0, [pc, #208]	; (80031ec <_printf_i+0x244>)
 800311a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800311e:	680e      	ldr	r6, [r1, #0]
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f856 5b04 	ldr.w	r5, [r6], #4
 8003126:	061f      	lsls	r7, r3, #24
 8003128:	600e      	str	r6, [r1, #0]
 800312a:	d514      	bpl.n	8003156 <_printf_i+0x1ae>
 800312c:	07d9      	lsls	r1, r3, #31
 800312e:	bf44      	itt	mi
 8003130:	f043 0320 	orrmi.w	r3, r3, #32
 8003134:	6023      	strmi	r3, [r4, #0]
 8003136:	b91d      	cbnz	r5, 8003140 <_printf_i+0x198>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f023 0320 	bic.w	r3, r3, #32
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	2310      	movs	r3, #16
 8003142:	e7af      	b.n	80030a4 <_printf_i+0xfc>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	2378      	movs	r3, #120	; 0x78
 800314e:	4828      	ldr	r0, [pc, #160]	; (80031f0 <_printf_i+0x248>)
 8003150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003154:	e7e3      	b.n	800311e <_printf_i+0x176>
 8003156:	065e      	lsls	r6, r3, #25
 8003158:	bf48      	it	mi
 800315a:	b2ad      	uxthmi	r5, r5
 800315c:	e7e6      	b.n	800312c <_printf_i+0x184>
 800315e:	4616      	mov	r6, r2
 8003160:	e7bb      	b.n	80030da <_printf_i+0x132>
 8003162:	680b      	ldr	r3, [r1, #0]
 8003164:	6826      	ldr	r6, [r4, #0]
 8003166:	1d1d      	adds	r5, r3, #4
 8003168:	6960      	ldr	r0, [r4, #20]
 800316a:	600d      	str	r5, [r1, #0]
 800316c:	0635      	lsls	r5, r6, #24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	d501      	bpl.n	8003176 <_printf_i+0x1ce>
 8003172:	6018      	str	r0, [r3, #0]
 8003174:	e002      	b.n	800317c <_printf_i+0x1d4>
 8003176:	0671      	lsls	r1, r6, #25
 8003178:	d5fb      	bpl.n	8003172 <_printf_i+0x1ca>
 800317a:	8018      	strh	r0, [r3, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4616      	mov	r6, r2
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	e7ba      	b.n	80030fa <_printf_i+0x152>
 8003184:	680b      	ldr	r3, [r1, #0]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	600a      	str	r2, [r1, #0]
 800318a:	681e      	ldr	r6, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4630      	mov	r0, r6
 8003190:	6862      	ldr	r2, [r4, #4]
 8003192:	f000 f82f 	bl	80031f4 <memchr>
 8003196:	b108      	cbz	r0, 800319c <_printf_i+0x1f4>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	6060      	str	r0, [r4, #4]
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a6:	e7a8      	b.n	80030fa <_printf_i+0x152>
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	47d0      	blx	sl
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0ab      	beq.n	800310e <_printf_i+0x166>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	079b      	lsls	r3, r3, #30
 80031ba:	d413      	bmi.n	80031e4 <_printf_i+0x23c>
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	4298      	cmp	r0, r3
 80031c2:	bfb8      	it	lt
 80031c4:	4618      	movlt	r0, r3
 80031c6:	e7a4      	b.n	8003112 <_printf_i+0x16a>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4632      	mov	r2, r6
 80031cc:	4649      	mov	r1, r9
 80031ce:	4640      	mov	r0, r8
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d09b      	beq.n	800310e <_printf_i+0x166>
 80031d6:	3501      	adds	r5, #1
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	9903      	ldr	r1, [sp, #12]
 80031dc:	1a5b      	subs	r3, r3, r1
 80031de:	42ab      	cmp	r3, r5
 80031e0:	dcf2      	bgt.n	80031c8 <_printf_i+0x220>
 80031e2:	e7eb      	b.n	80031bc <_printf_i+0x214>
 80031e4:	2500      	movs	r5, #0
 80031e6:	f104 0619 	add.w	r6, r4, #25
 80031ea:	e7f5      	b.n	80031d8 <_printf_i+0x230>
 80031ec:	080034f1 	.word	0x080034f1
 80031f0:	08003502 	.word	0x08003502

080031f4 <memchr>:
 80031f4:	4603      	mov	r3, r0
 80031f6:	b510      	push	{r4, lr}
 80031f8:	b2c9      	uxtb	r1, r1
 80031fa:	4402      	add	r2, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	d101      	bne.n	8003206 <memchr+0x12>
 8003202:	2000      	movs	r0, #0
 8003204:	e003      	b.n	800320e <memchr+0x1a>
 8003206:	7804      	ldrb	r4, [r0, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	428c      	cmp	r4, r1
 800320c:	d1f6      	bne.n	80031fc <memchr+0x8>
 800320e:	bd10      	pop	{r4, pc}

08003210 <memcpy>:
 8003210:	440a      	add	r2, r1
 8003212:	4291      	cmp	r1, r2
 8003214:	f100 33ff 	add.w	r3, r0, #4294967295
 8003218:	d100      	bne.n	800321c <memcpy+0xc>
 800321a:	4770      	bx	lr
 800321c:	b510      	push	{r4, lr}
 800321e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003222:	4291      	cmp	r1, r2
 8003224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003228:	d1f9      	bne.n	800321e <memcpy+0xe>
 800322a:	bd10      	pop	{r4, pc}

0800322c <memmove>:
 800322c:	4288      	cmp	r0, r1
 800322e:	b510      	push	{r4, lr}
 8003230:	eb01 0402 	add.w	r4, r1, r2
 8003234:	d902      	bls.n	800323c <memmove+0x10>
 8003236:	4284      	cmp	r4, r0
 8003238:	4623      	mov	r3, r4
 800323a:	d807      	bhi.n	800324c <memmove+0x20>
 800323c:	1e43      	subs	r3, r0, #1
 800323e:	42a1      	cmp	r1, r4
 8003240:	d008      	beq.n	8003254 <memmove+0x28>
 8003242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800324a:	e7f8      	b.n	800323e <memmove+0x12>
 800324c:	4601      	mov	r1, r0
 800324e:	4402      	add	r2, r0
 8003250:	428a      	cmp	r2, r1
 8003252:	d100      	bne.n	8003256 <memmove+0x2a>
 8003254:	bd10      	pop	{r4, pc}
 8003256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800325a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800325e:	e7f7      	b.n	8003250 <memmove+0x24>

08003260 <_free_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	4605      	mov	r5, r0
 8003264:	2900      	cmp	r1, #0
 8003266:	d043      	beq.n	80032f0 <_free_r+0x90>
 8003268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800326c:	1f0c      	subs	r4, r1, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	bfb8      	it	lt
 8003272:	18e4      	addlt	r4, r4, r3
 8003274:	f000 f8d0 	bl	8003418 <__malloc_lock>
 8003278:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <_free_r+0x94>)
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	4610      	mov	r0, r2
 800327e:	b933      	cbnz	r3, 800328e <_free_r+0x2e>
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	6014      	str	r4, [r2, #0]
 8003284:	4628      	mov	r0, r5
 8003286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800328a:	f000 b8cb 	b.w	8003424 <__malloc_unlock>
 800328e:	42a3      	cmp	r3, r4
 8003290:	d90a      	bls.n	80032a8 <_free_r+0x48>
 8003292:	6821      	ldr	r1, [r4, #0]
 8003294:	1862      	adds	r2, r4, r1
 8003296:	4293      	cmp	r3, r2
 8003298:	bf01      	itttt	eq
 800329a:	681a      	ldreq	r2, [r3, #0]
 800329c:	685b      	ldreq	r3, [r3, #4]
 800329e:	1852      	addeq	r2, r2, r1
 80032a0:	6022      	streq	r2, [r4, #0]
 80032a2:	6063      	str	r3, [r4, #4]
 80032a4:	6004      	str	r4, [r0, #0]
 80032a6:	e7ed      	b.n	8003284 <_free_r+0x24>
 80032a8:	461a      	mov	r2, r3
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b10b      	cbz	r3, 80032b2 <_free_r+0x52>
 80032ae:	42a3      	cmp	r3, r4
 80032b0:	d9fa      	bls.n	80032a8 <_free_r+0x48>
 80032b2:	6811      	ldr	r1, [r2, #0]
 80032b4:	1850      	adds	r0, r2, r1
 80032b6:	42a0      	cmp	r0, r4
 80032b8:	d10b      	bne.n	80032d2 <_free_r+0x72>
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	4401      	add	r1, r0
 80032be:	1850      	adds	r0, r2, r1
 80032c0:	4283      	cmp	r3, r0
 80032c2:	6011      	str	r1, [r2, #0]
 80032c4:	d1de      	bne.n	8003284 <_free_r+0x24>
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4401      	add	r1, r0
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	6053      	str	r3, [r2, #4]
 80032d0:	e7d8      	b.n	8003284 <_free_r+0x24>
 80032d2:	d902      	bls.n	80032da <_free_r+0x7a>
 80032d4:	230c      	movs	r3, #12
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	e7d4      	b.n	8003284 <_free_r+0x24>
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	1821      	adds	r1, r4, r0
 80032de:	428b      	cmp	r3, r1
 80032e0:	bf01      	itttt	eq
 80032e2:	6819      	ldreq	r1, [r3, #0]
 80032e4:	685b      	ldreq	r3, [r3, #4]
 80032e6:	1809      	addeq	r1, r1, r0
 80032e8:	6021      	streq	r1, [r4, #0]
 80032ea:	6063      	str	r3, [r4, #4]
 80032ec:	6054      	str	r4, [r2, #4]
 80032ee:	e7c9      	b.n	8003284 <_free_r+0x24>
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	20000094 	.word	0x20000094

080032f8 <_malloc_r>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	1ccd      	adds	r5, r1, #3
 80032fc:	f025 0503 	bic.w	r5, r5, #3
 8003300:	3508      	adds	r5, #8
 8003302:	2d0c      	cmp	r5, #12
 8003304:	bf38      	it	cc
 8003306:	250c      	movcc	r5, #12
 8003308:	2d00      	cmp	r5, #0
 800330a:	4606      	mov	r6, r0
 800330c:	db01      	blt.n	8003312 <_malloc_r+0x1a>
 800330e:	42a9      	cmp	r1, r5
 8003310:	d903      	bls.n	800331a <_malloc_r+0x22>
 8003312:	230c      	movs	r3, #12
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	2000      	movs	r0, #0
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331a:	f000 f87d 	bl	8003418 <__malloc_lock>
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <_malloc_r+0xac>)
 8003320:	680a      	ldr	r2, [r1, #0]
 8003322:	4614      	mov	r4, r2
 8003324:	b99c      	cbnz	r4, 800334e <_malloc_r+0x56>
 8003326:	4f20      	ldr	r7, [pc, #128]	; (80033a8 <_malloc_r+0xb0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b923      	cbnz	r3, 8003336 <_malloc_r+0x3e>
 800332c:	4621      	mov	r1, r4
 800332e:	4630      	mov	r0, r6
 8003330:	f000 f862 	bl	80033f8 <_sbrk_r>
 8003334:	6038      	str	r0, [r7, #0]
 8003336:	4629      	mov	r1, r5
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f85d 	bl	80033f8 <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d123      	bne.n	800338a <_malloc_r+0x92>
 8003342:	230c      	movs	r3, #12
 8003344:	4630      	mov	r0, r6
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	f000 f86c 	bl	8003424 <__malloc_unlock>
 800334c:	e7e3      	b.n	8003316 <_malloc_r+0x1e>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	1b5b      	subs	r3, r3, r5
 8003352:	d417      	bmi.n	8003384 <_malloc_r+0x8c>
 8003354:	2b0b      	cmp	r3, #11
 8003356:	d903      	bls.n	8003360 <_malloc_r+0x68>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	441c      	add	r4, r3
 800335c:	6025      	str	r5, [r4, #0]
 800335e:	e004      	b.n	800336a <_malloc_r+0x72>
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	42a2      	cmp	r2, r4
 8003364:	bf0c      	ite	eq
 8003366:	600b      	streq	r3, [r1, #0]
 8003368:	6053      	strne	r3, [r2, #4]
 800336a:	4630      	mov	r0, r6
 800336c:	f000 f85a 	bl	8003424 <__malloc_unlock>
 8003370:	f104 000b 	add.w	r0, r4, #11
 8003374:	1d23      	adds	r3, r4, #4
 8003376:	f020 0007 	bic.w	r0, r0, #7
 800337a:	1ac2      	subs	r2, r0, r3
 800337c:	d0cc      	beq.n	8003318 <_malloc_r+0x20>
 800337e:	1a1b      	subs	r3, r3, r0
 8003380:	50a3      	str	r3, [r4, r2]
 8003382:	e7c9      	b.n	8003318 <_malloc_r+0x20>
 8003384:	4622      	mov	r2, r4
 8003386:	6864      	ldr	r4, [r4, #4]
 8003388:	e7cc      	b.n	8003324 <_malloc_r+0x2c>
 800338a:	1cc4      	adds	r4, r0, #3
 800338c:	f024 0403 	bic.w	r4, r4, #3
 8003390:	42a0      	cmp	r0, r4
 8003392:	d0e3      	beq.n	800335c <_malloc_r+0x64>
 8003394:	1a21      	subs	r1, r4, r0
 8003396:	4630      	mov	r0, r6
 8003398:	f000 f82e 	bl	80033f8 <_sbrk_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d1dd      	bne.n	800335c <_malloc_r+0x64>
 80033a0:	e7cf      	b.n	8003342 <_malloc_r+0x4a>
 80033a2:	bf00      	nop
 80033a4:	20000094 	.word	0x20000094
 80033a8:	20000098 	.word	0x20000098

080033ac <_realloc_r>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	4607      	mov	r7, r0
 80033b0:	4614      	mov	r4, r2
 80033b2:	460e      	mov	r6, r1
 80033b4:	b921      	cbnz	r1, 80033c0 <_realloc_r+0x14>
 80033b6:	4611      	mov	r1, r2
 80033b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033bc:	f7ff bf9c 	b.w	80032f8 <_malloc_r>
 80033c0:	b922      	cbnz	r2, 80033cc <_realloc_r+0x20>
 80033c2:	f7ff ff4d 	bl	8003260 <_free_r>
 80033c6:	4625      	mov	r5, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	f000 f830 	bl	8003430 <_malloc_usable_size_r>
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d20f      	bcs.n	80033f4 <_realloc_r+0x48>
 80033d4:	4621      	mov	r1, r4
 80033d6:	4638      	mov	r0, r7
 80033d8:	f7ff ff8e 	bl	80032f8 <_malloc_r>
 80033dc:	4605      	mov	r5, r0
 80033de:	2800      	cmp	r0, #0
 80033e0:	d0f2      	beq.n	80033c8 <_realloc_r+0x1c>
 80033e2:	4631      	mov	r1, r6
 80033e4:	4622      	mov	r2, r4
 80033e6:	f7ff ff13 	bl	8003210 <memcpy>
 80033ea:	4631      	mov	r1, r6
 80033ec:	4638      	mov	r0, r7
 80033ee:	f7ff ff37 	bl	8003260 <_free_r>
 80033f2:	e7e9      	b.n	80033c8 <_realloc_r+0x1c>
 80033f4:	4635      	mov	r5, r6
 80033f6:	e7e7      	b.n	80033c8 <_realloc_r+0x1c>

080033f8 <_sbrk_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4d05      	ldr	r5, [pc, #20]	; (8003414 <_sbrk_r+0x1c>)
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd fef8 	bl	80011f8 <_sbrk>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_sbrk_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_sbrk_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000148 	.word	0x20000148

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_lock+0x8>)
 800341a:	f000 b811 	b.w	8003440 <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	20000150 	.word	0x20000150

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__malloc_unlock+0x8>)
 8003426:	f000 b80c 	b.w	8003442 <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	20000150 	.word	0x20000150

08003430 <_malloc_usable_size_r>:
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f18      	subs	r0, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbc      	itt	lt
 800343a:	580b      	ldrlt	r3, [r1, r0]
 800343c:	18c0      	addlt	r0, r0, r3
 800343e:	4770      	bx	lr

08003440 <__retarget_lock_acquire_recursive>:
 8003440:	4770      	bx	lr

08003442 <__retarget_lock_release_recursive>:
 8003442:	4770      	bx	lr

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
