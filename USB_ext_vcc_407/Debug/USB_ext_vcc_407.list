
USB_ext_vcc_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b0  0800c4b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b0  0800c4b0  0001c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b8  0800c4b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4b8  0800c4b8  0001c4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000028bc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000294c  2000294c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002acea  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005067  00000000  00000000  0004adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0004fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  00051430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002710e  00000000  00000000  00052890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e95d  00000000  00000000  0007999e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d28ff  00000000  00000000  000982fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016abfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006484  00000000  00000000  0016ac50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c254 	.word	0x0800c254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800c254 	.word	0x0800c254

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000598:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00b      	beq.n	80005b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	e000      	b.n	80005a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b2d2      	uxtb	r2, r2
 80005b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_write>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	68b9      	ldr	r1, [r7, #8]
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <_write+0x48>)
 80005de:	f003 fbd8 	bl	8003d92 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e009      	b.n	80005fc <_write+0x34>
		ITM_SendChar(*ptr++);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffc1 	bl	8000578 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf1      	blt.n	80005e8 <_write+0x20>
	}
	return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000015c 	.word	0x2000015c

08000614 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061a:	f000 fb91 	bl	8000d40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061e:	f000 f8d3 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000622:	f000 f965 	bl	80008f0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000626:	f000 f939 	bl	800089c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 800062a:	f004 fe33 	bl	8005294 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 800062e:	f00a fa9f 	bl	800ab70 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 8000632:	4853      	ldr	r0, [pc, #332]	; (8000780 <main+0x16c>)
 8000634:	f00a ff08 	bl	800b448 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000638:	f00a fac0 	bl	800abbc <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		switch (Appli_state)
 800063c:	4b51      	ldr	r3, [pc, #324]	; (8000784 <main+0x170>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b03      	cmp	r3, #3
 8000642:	f200 8094 	bhi.w	800076e <main+0x15a>
 8000646:	a201      	add	r2, pc, #4	; (adr r2, 800064c <main+0x38>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	0800065d 	.word	0x0800065d
 8000650:	08000673 	.word	0x08000673
 8000654:	08000695 	.word	0x08000695
 8000658:	0800074f 	.word	0x0800074f
		{
		case APPLICATION_IDLE:
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Flash status
 800065c:	2102      	movs	r1, #2
 800065e:	484a      	ldr	r0, [pc, #296]	; (8000788 <main+0x174>)
 8000660:	f000 fe6b 	bl	800133a <HAL_GPIO_TogglePin>
			printf("APPLICATION_IDLE! \r\n");
 8000664:	4849      	ldr	r0, [pc, #292]	; (800078c <main+0x178>)
 8000666:	f00a feef 	bl	800b448 <puts>
			HAL_Delay(100);
 800066a:	2064      	movs	r0, #100	; 0x64
 800066c:	f000 fbaa 	bl	8000dc4 <HAL_Delay>
			break;
 8000670:	e080      	b.n	8000774 <main+0x160>
		case APPLICATION_START:
			if (f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0) == FR_OK) {
 8000672:	2200      	movs	r2, #0
 8000674:	4946      	ldr	r1, [pc, #280]	; (8000790 <main+0x17c>)
 8000676:	4847      	ldr	r0, [pc, #284]	; (8000794 <main+0x180>)
 8000678:	f009 fc6c 	bl	8009f54 <f_mount>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d177      	bne.n	8000772 <main+0x15e>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Flash status
 8000682:	2200      	movs	r2, #0
 8000684:	2102      	movs	r1, #2
 8000686:	4840      	ldr	r0, [pc, #256]	; (8000788 <main+0x174>)
 8000688:	f000 fe3e 	bl	8001308 <HAL_GPIO_WritePin>
				printf("APPLICATION_START! \r\n");
 800068c:	4842      	ldr	r0, [pc, #264]	; (8000798 <main+0x184>)
 800068e:	f00a fedb 	bl	800b448 <puts>
			}
			break;
 8000692:	e06e      	b.n	8000772 <main+0x15e>
		case APPLICATION_READY:
			if (f_mkdir((const TCHAR*) "ADC")==FR_OK)
 8000694:	4841      	ldr	r0, [pc, #260]	; (800079c <main+0x188>)
 8000696:	f00a f8f5 	bl	800a884 <f_mkdir>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10d      	bne.n	80006bc <main+0xa8>
			{
				if(f_chdir("ADC")==FR_OK)
 80006a0:	483e      	ldr	r0, [pc, #248]	; (800079c <main+0x188>)
 80006a2:	f00a f8a5 	bl	800a7f0 <f_chdir>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d107      	bne.n	80006bc <main+0xa8>
				{
					printf("Falder 'ADC' is CREATED! \r\n");
 80006ac:	483c      	ldr	r0, [pc, #240]	; (80007a0 <main+0x18c>)
 80006ae:	f00a fecb 	bl	800b448 <puts>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Flash status
 80006b2:	2201      	movs	r2, #1
 80006b4:	2102      	movs	r1, #2
 80006b6:	4834      	ldr	r0, [pc, #208]	; (8000788 <main+0x174>)
 80006b8:	f000 fe26 	bl	8001308 <HAL_GPIO_WritePin>
				}
			}
			if(f_open(&USBHFile,(const TCHAR*)"ADC.TXT",FA_WRITE| FA_OPEN_APPEND)==FR_OK)
 80006bc:	2232      	movs	r2, #50	; 0x32
 80006be:	4939      	ldr	r1, [pc, #228]	; (80007a4 <main+0x190>)
 80006c0:	4839      	ldr	r0, [pc, #228]	; (80007a8 <main+0x194>)
 80006c2:	f009 fc8d 	bl	8009fe0 <f_open>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d134      	bne.n	8000736 <main+0x122>
			{
				sprintf(hold,"%s", "ADC VALUES NOT PRESENT! \r\n");
 80006cc:	4a37      	ldr	r2, [pc, #220]	; (80007ac <main+0x198>)
 80006ce:	4938      	ldr	r1, [pc, #224]	; (80007b0 <main+0x19c>)
 80006d0:	4838      	ldr	r0, [pc, #224]	; (80007b4 <main+0x1a0>)
 80006d2:	f00a fed1 	bl	800b478 <siprintf>
				RES= f_write(&USBHFile,(const void*)hold,strlen(hold),&Byteswritten);
 80006d6:	4837      	ldr	r0, [pc, #220]	; (80007b4 <main+0x1a0>)
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4602      	mov	r2, r0
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x1a4>)
 80006e0:	4934      	ldr	r1, [pc, #208]	; (80007b4 <main+0x1a0>)
 80006e2:	4831      	ldr	r0, [pc, #196]	; (80007a8 <main+0x194>)
 80006e4:	f009 fe48 	bl	800a378 <f_write>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <main+0x1a8>)
 80006ee:	701a      	strb	r2, [r3, #0]
				if(RES !=FR_OK || Byteswritten==0)
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <main+0x1a8>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d103      	bne.n	8000700 <main+0xec>
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <main+0x1a4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <main+0xf0>
				{
					return 0;
 8000700:	2300      	movs	r3, #0
 8000702:	e038      	b.n	8000776 <main+0x162>
				}
				else
				{
					for(int n=0;n<3;n++)
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	e012      	b.n	8000730 <main+0x11c>
					{
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Flash status
 800070a:	2201      	movs	r2, #1
 800070c:	2102      	movs	r1, #2
 800070e:	481e      	ldr	r0, [pc, #120]	; (8000788 <main+0x174>)
 8000710:	f000 fdfa 	bl	8001308 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8000714:	20fa      	movs	r0, #250	; 0xfa
 8000716:	f000 fb55 	bl	8000dc4 <HAL_Delay>
						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Flash status
 800071a:	2200      	movs	r2, #0
 800071c:	2102      	movs	r1, #2
 800071e:	481a      	ldr	r0, [pc, #104]	; (8000788 <main+0x174>)
 8000720:	f000 fdf2 	bl	8001308 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8000724:	20fa      	movs	r0, #250	; 0xfa
 8000726:	f000 fb4d 	bl	8000dc4 <HAL_Delay>
					for(int n=0;n<3;n++)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b02      	cmp	r3, #2
 8000734:	dde9      	ble.n	800070a <main+0xf6>
					}
				}
			}
			f_close(&USBHFile);
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <main+0x194>)
 8000738:	f00a f830 	bl	800a79c <f_close>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Flash status
 800073c:	2201      	movs	r2, #1
 800073e:	2102      	movs	r1, #2
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <main+0x174>)
 8000742:	f000 fde1 	bl	8001308 <HAL_GPIO_WritePin>
			printf("APPLICATION_READY! \r\n");
 8000746:	481e      	ldr	r0, [pc, #120]	; (80007c0 <main+0x1ac>)
 8000748:	f00a fe7e 	bl	800b448 <puts>
			break;
 800074c:	e012      	b.n	8000774 <main+0x160>
		case APPLICATION_DISCONNECT:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Write status
 800074e:	2200      	movs	r2, #0
 8000750:	2102      	movs	r1, #2
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <main+0x174>)
 8000754:	f000 fdd8 	bl	8001308 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Flash status
 8000758:	2102      	movs	r1, #2
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <main+0x174>)
 800075c:	f000 fded 	bl	800133a <HAL_GPIO_TogglePin>
			printf("APPLICATION_DISCONNECT! \r\n");
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <main+0x1b0>)
 8000762:	f00a fe71 	bl	800b448 <puts>
			HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fb2c 	bl	8000dc4 <HAL_Delay>
			break;
 800076c:	e002      	b.n	8000774 <main+0x160>
	    default:
	             /* do nothing */
	        break;
 800076e:	bf00      	nop
 8000770:	e762      	b.n	8000638 <main+0x24>
			break;
 8000772:	bf00      	nop
		MX_USB_HOST_Process();
 8000774:	e760      	b.n	8000638 <main+0x24>
		}
	}
	/* USER CODE END 3 */
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800c26c 	.word	0x0800c26c
 8000784:	200000e4 	.word	0x200000e4
 8000788:	40020000 	.word	0x40020000
 800078c:	0800c27c 	.word	0x0800c27c
 8000790:	200001f0 	.word	0x200001f0
 8000794:	20001224 	.word	0x20001224
 8000798:	0800c290 	.word	0x0800c290
 800079c:	0800c2a8 	.word	0x0800c2a8
 80007a0:	0800c2ac 	.word	0x0800c2ac
 80007a4:	0800c2c8 	.word	0x0800c2c8
 80007a8:	200001f4 	.word	0x200001f4
 80007ac:	0800c2d0 	.word	0x0800c2d0
 80007b0:	0800c2ec 	.word	0x0800c2ec
 80007b4:	200000f8 	.word	0x200000f8
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	200001a0 	.word	0x200001a0
 80007c0:	0800c2f0 	.word	0x0800c2f0
 80007c4:	0800c308 	.word	0x0800c308

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00a fd16 	bl	800b208 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <SystemClock_Config+0xcc>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <SystemClock_Config+0xcc>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <SystemClock_Config+0xd0>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800083c:	23a8      	movs	r3, #168	; 0xa8
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000844:	2307      	movs	r3, #7
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f002 faff 	bl	8002e50 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
		Error_Handler();
 8000858:	f000 f89e 	bl	8000998 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2105      	movs	r1, #5
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fd60 	bl	8003340 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xc2>
		Error_Handler();
 8000886:	f000 f887 	bl	8000998 <Error_Handler>
	}
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f003 fa10 	bl	8003cf8 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80008de:	f000 f85b 	bl	8000998 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000015c 	.word	0x2000015c
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_GPIO_Init+0x7c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <MX_GPIO_Init+0x7c>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_GPIO_Init+0x7c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_GPIO_Init+0x7c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_GPIO_Init+0x7c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_GPIO_Init+0x7c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2102      	movs	r1, #2
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x80>)
 8000944:	f000 fce0 	bl	8001308 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000948:	2302      	movs	r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0x80>)
 8000960:	f000 fb36 	bl	8000fd0 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000986:	f000 f9fd 	bl	8000d84 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40002000 	.word	0x40002000

08000998 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12b      	bne.n	8000a6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_UART_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0x8c>)
 8000a6a:	f000 fab1 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	202d      	movs	r0, #45	; 0x2d
 8000a9a:	f000 fa6f 	bl	8000f7c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a9e:	202d      	movs	r0, #45	; 0x2d
 8000aa0:	f000 fa88 	bl	8000fb4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xa4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fe34 	bl	8003738 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad0:	f002 fe0a 	bl	80036e8 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_InitTick+0xa8>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_InitTick+0xac>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_InitTick+0xb0>)
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_InitTick+0xac>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_InitTick+0xac>)
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_InitTick+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_InitTick+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_InitTick+0xac>)
 8000b0a:	f002 fe47 	bl	800379c <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_InitTick+0xac>)
 8000b16:	f002 fe9b 	bl	8003850 <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	200001a4 	.word	0x200001a4
 8000b34:	40002000 	.word	0x40002000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b96:	f002 fecb 	bl	8003930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001a4 	.word	0x200001a4

08000ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <OTG_FS_IRQHandler+0x10>)
 8000baa:	f000 fe4b 	bl	8001844 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20002638 	.word	0x20002638

08000bb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
	}

return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f00a fa74 	bl	800b178 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20020000 	.word	0x20020000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	200000ac 	.word	0x200000ac
 8000cc4:	20002950 	.word	0x20002950

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d16:	f7ff ffd7 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f00a fa33 	bl	800b184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc79 	bl	8000614 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d30:	0800c4c0 	.word	0x0800c4c0
  ldr r2, =_sbss
 8000d34:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d38:	2000294c 	.word	0x2000294c

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8fc 	bl	8000f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe88 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fe16 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	200001ec 	.word	0x200001ec

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200001ec 	.word	0x200001ec

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <__NVIC_SetPriorityGrouping>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8e:	f7ff ff61 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	6978      	ldr	r0, [r7, #20]
 8000f9a:	f7ff ffb1 	bl	8000f00 <NVIC_EncodePriority>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff80 	bl	8000eac <__NVIC_SetPriority>
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff54 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <HAL_GPIO_Init+0x310>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x330>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_GPIO_Init+0x334>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134c:	887a      	ldrh	r2, [r7, #2]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43d9      	mvns	r1, r3
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	400b      	ands	r3, r1
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800136e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001370:	b08f      	sub	sp, #60	; 0x3c
 8001372:	af0a      	add	r7, sp, #40	; 0x28
 8001374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e054      	b.n	800142a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f009 fc46 	bl	800ac2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f822 	bl	8004408 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	687e      	ldr	r6, [r7, #4]
 80013cc:	466d      	mov	r5, sp
 80013ce:	f106 0410 	add.w	r4, r6, #16
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013de:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e2:	1d33      	adds	r3, r6, #4
 80013e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f002 ff9c 	bl	8004324 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 f819 	bl	800442a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	687e      	ldr	r6, [r7, #4]
 8001400:	466d      	mov	r5, sp
 8001402:	f106 0410 	add.w	r4, r6, #16
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001412:	e885 0003 	stmia.w	r5, {r0, r1}
 8001416:	1d33      	adds	r3, r6, #4
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f003 f980 	bl	8004720 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001432 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b089      	sub	sp, #36	; 0x24
 8001436:	af04      	add	r7, sp, #16
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	4608      	mov	r0, r1
 800143c:	4611      	mov	r1, r2
 800143e:	461a      	mov	r2, r3
 8001440:	4603      	mov	r3, r0
 8001442:	70fb      	strb	r3, [r7, #3]
 8001444:	460b      	mov	r3, r1
 8001446:	70bb      	strb	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_HCD_HC_Init+0x28>
 8001456:	2302      	movs	r3, #2
 8001458:	e076      	b.n	8001548 <HAL_HCD_HC_Init+0x116>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	212c      	movs	r1, #44	; 0x2c
 8001468:	fb01 f303 	mul.w	r3, r1, r3
 800146c:	4413      	add	r3, r2
 800146e:	333d      	adds	r3, #61	; 0x3d
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	212c      	movs	r1, #44	; 0x2c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	3338      	adds	r3, #56	; 0x38
 8001482:	787a      	ldrb	r2, [r7, #1]
 8001484:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	212c      	movs	r1, #44	; 0x2c
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	4413      	add	r3, r2
 8001492:	3340      	adds	r3, #64	; 0x40
 8001494:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001496:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	212c      	movs	r1, #44	; 0x2c
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	3339      	adds	r3, #57	; 0x39
 80014a6:	78fa      	ldrb	r2, [r7, #3]
 80014a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	212c      	movs	r1, #44	; 0x2c
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	333f      	adds	r3, #63	; 0x3f
 80014b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	78ba      	ldrb	r2, [r7, #2]
 80014c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014c6:	b2d0      	uxtb	r0, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	333a      	adds	r3, #58	; 0x3a
 80014d4:	4602      	mov	r2, r0
 80014d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da09      	bge.n	80014f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	212c      	movs	r1, #44	; 0x2c
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	333b      	adds	r3, #59	; 0x3b
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e008      	b.n	8001506 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	333b      	adds	r3, #59	; 0x3b
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	333c      	adds	r3, #60	; 0x3c
 8001514:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001518:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	787c      	ldrb	r4, [r7, #1]
 8001520:	78ba      	ldrb	r2, [r7, #2]
 8001522:	78f9      	ldrb	r1, [r7, #3]
 8001524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4623      	mov	r3, r4
 8001536:	f003 fa6d 	bl	8004a14 <USB_HC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_HCD_HC_Halt+0x1e>
 800156a:	2302      	movs	r3, #2
 800156c:	e00f      	b.n	800158e <HAL_HCD_HC_Halt+0x3e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fca9 	bl	8004ed6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	70fb      	strb	r3, [r7, #3]
 80015aa:	460b      	mov	r3, r1
 80015ac:	70bb      	strb	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	333b      	adds	r3, #59	; 0x3b
 80015c0:	78ba      	ldrb	r2, [r7, #2]
 80015c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	333f      	adds	r3, #63	; 0x3f
 80015d2:	787a      	ldrb	r2, [r7, #1]
 80015d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015d6:	7c3b      	ldrb	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d112      	bne.n	8001602 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	212c      	movs	r1, #44	; 0x2c
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	3342      	adds	r3, #66	; 0x42
 80015ea:	2203      	movs	r2, #3
 80015ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	212c      	movs	r1, #44	; 0x2c
 80015f4:	fb01 f303 	mul.w	r3, r1, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	333d      	adds	r3, #61	; 0x3d
 80015fc:	7f3a      	ldrb	r2, [r7, #28]
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e008      	b.n	8001614 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	212c      	movs	r1, #44	; 0x2c
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	3342      	adds	r3, #66	; 0x42
 8001610:	2202      	movs	r2, #2
 8001612:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b03      	cmp	r3, #3
 8001618:	f200 80c6 	bhi.w	80017a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001635 	.word	0x08001635
 8001628:	08001795 	.word	0x08001795
 800162c:	08001699 	.word	0x08001699
 8001630:	08001717 	.word	0x08001717
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	f040 80b8 	bne.w	80017ac <HAL_HCD_HC_SubmitRequest+0x214>
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80b4 	bne.w	80017ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001644:	8b3b      	ldrh	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	212c      	movs	r1, #44	; 0x2c
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	4413      	add	r3, r2
 8001656:	3355      	adds	r3, #85	; 0x55
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4413      	add	r3, r2
 8001668:	3355      	adds	r3, #85	; 0x55
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d109      	bne.n	8001684 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	3342      	adds	r3, #66	; 0x42
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001682:	e093      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3342      	adds	r3, #66	; 0x42
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
      break;
 8001696:	e089      	b.n	80017ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d11d      	bne.n	80016da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	3355      	adds	r3, #85	; 0x55
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016c4:	e073      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	3342      	adds	r3, #66	; 0x42
 80016d4:	2202      	movs	r2, #2
 80016d6:	701a      	strb	r2, [r3, #0]
      break;
 80016d8:	e069      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3354      	adds	r3, #84	; 0x54
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3342      	adds	r3, #66	; 0x42
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
      break;
 8001700:	e055      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3342      	adds	r3, #66	; 0x42
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
      break;
 8001714:	e04b      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001716:	78bb      	ldrb	r3, [r7, #2]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11d      	bne.n	8001758 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3355      	adds	r3, #85	; 0x55
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3342      	adds	r3, #66	; 0x42
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001742:	e034      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	3342      	adds	r3, #66	; 0x42
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
      break;
 8001756:	e02a      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	212c      	movs	r1, #44	; 0x2c
 800175e:	fb01 f303 	mul.w	r3, r1, r3
 8001762:	4413      	add	r3, r2
 8001764:	3354      	adds	r3, #84	; 0x54
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
      break;
 800177e:	e016      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      break;
 8001792:	e00c      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3342      	adds	r3, #66	; 0x42
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
      break;
 80017a6:	e002      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017a8:	bf00      	nop
 80017aa:	e000      	b.n	80017ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3344      	adds	r3, #68	; 0x44
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	8b3a      	ldrh	r2, [r7, #24]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	202c      	movs	r0, #44	; 0x2c
 80017c8:	fb00 f303 	mul.w	r3, r0, r3
 80017cc:	440b      	add	r3, r1
 80017ce:	334c      	adds	r3, #76	; 0x4c
 80017d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3360      	adds	r3, #96	; 0x60
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3350      	adds	r3, #80	; 0x50
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	3339      	adds	r3, #57	; 0x39
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3361      	adds	r3, #97	; 0x61
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	222c      	movs	r2, #44	; 0x2c
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	3338      	adds	r3, #56	; 0x38
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	18d1      	adds	r1, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	f003 f9fc 	bl	8004c30 <USB_HC_StartXfer>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ff1f 	bl	800469e <USB_GetMode>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	f040 80f6 	bne.w	8001a54 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f002 ff03 	bl	8004678 <USB_ReadInterrupts>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80ec 	beq.w	8001a52 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fefa 	bl	8004678 <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800188e:	d104      	bne.n	800189a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 feea 	bl	8004678 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ae:	d104      	bne.n	80018ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 feda 	bl	8004678 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ce:	d104      	bne.n	80018da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 feca 	bl	8004678 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d103      	bne.n	80018f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2202      	movs	r2, #2
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 febc 	bl	8004678 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800190a:	d11c      	bne.n	8001946 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001914:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001926:	2110      	movs	r1, #16
 8001928:	6938      	ldr	r0, [r7, #16]
 800192a:	f002 fdcb 	bl	80044c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800192e:	6938      	ldr	r0, [r7, #16]
 8001930:	f002 fdec 	bl	800450c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f002 ffa4 	bl	8004888 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f009 f9e3 	bl	800ad0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fe94 	bl	8004678 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195a:	d102      	bne.n	8001962 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f001 fa03 	bl	8002d68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fe86 	bl	8004678 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d106      	bne.n	8001984 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f009 f9ac 	bl	800acd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fe75 	bl	8004678 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b10      	cmp	r3, #16
 8001996:	d101      	bne.n	800199c <HAL_HCD_IRQHandler+0x158>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_HCD_IRQHandler+0x15a>
 800199c:	2300      	movs	r3, #0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0210 	bic.w	r2, r2, #16
 80019b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f001 f906 	bl	8002bc4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fe53 	bl	8004678 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019dc:	d13a      	bne.n	8001a54 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fa66 	bl	8004eb4 <USB_HC_ReadInterrupt>
 80019e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e025      	b.n	8001a3c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1a:	d106      	bne.n	8001a2a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8ab 	bl	8001b7e <HCD_HC_IN_IRQHandler>
 8001a28:	e005      	b.n	8001a36 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fcc6 	bl	80023c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3d4      	bcc.n	80019f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4e:	615a      	str	r2, [r3, #20]
 8001a50:	e000      	b.n	8001a54 <HAL_HCD_IRQHandler+0x210>
      return;
 8001a52:	bf00      	nop
    }
  }
}
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_HCD_Start+0x16>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e013      	b.n	8001a98 <HAL_HCD_Start+0x3e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 ff66 	bl	8004950 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fcac 	bl	80043e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HCD_Stop+0x16>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00d      	b.n	8001ad2 <HAL_HCD_Stop+0x32>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fb60 	bl	8005188 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 ff08 	bl	80048fc <USB_ResetPort>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3360      	adds	r3, #96	; 0x60
 8001b10:	781b      	ldrb	r3, [r3, #0]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3350      	adds	r3, #80	; 0x50
 8001b38:	681b      	ldr	r3, [r3, #0]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 ff4c 	bl	80049f0 <USB_GetCurrentFrame>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 ff27 	bl	80049c2 <USB_GetHostSpeed>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d119      	bne.n	8001be2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	0151      	lsls	r1, r2, #5
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	440a      	add	r2, r1
 8001bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	60d3      	str	r3, [r2, #12]
 8001be0:	e101      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d12b      	bne.n	8001c52 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c06:	461a      	mov	r2, r3
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3361      	adds	r3, #97	; 0x61
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	0151      	lsls	r1, r2, #5
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	440a      	add	r2, r1
 8001c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f943 	bl	8004ed6 <USB_HC_Halt>
 8001c50:	e0c9      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d109      	bne.n	8001c7c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	461a      	mov	r2, r3
 8001c76:	2320      	movs	r3, #32
 8001c78:	6093      	str	r3, [r2, #8]
 8001c7a:	e0b4      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d133      	bne.n	8001cfa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3361      	adds	r3, #97	; 0x61
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f8ef 	bl	8004ed6 <USB_HC_Halt>
 8001cf8:	e075      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d134      	bne.n	8001d7c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3361      	adds	r3, #97	; 0x61
 8001d40:	2208      	movs	r2, #8
 8001d42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	2310      	movs	r3, #16
 8001d54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	461a      	mov	r2, r3
 8001d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f8ae 	bl	8004ed6 <USB_HC_Halt>
 8001d7a:	e034      	b.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d129      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	0151      	lsls	r1, r2, #5
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	440a      	add	r2, r1
 8001da8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3361      	adds	r3, #97	; 0x61
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f881 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	461a      	mov	r2, r3
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d122      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f854 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e42:	e2ba      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 811b 	bne.w	8002092 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d019      	beq.n	8001e98 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3348      	adds	r3, #72	; 0x48
 8001e72:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	0159      	lsls	r1, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	202c      	movs	r0, #44	; 0x2c
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	440b      	add	r3, r1
 8001e94:	3350      	adds	r3, #80	; 0x50
 8001e96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3361      	adds	r3, #97	; 0x61
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	335c      	adds	r3, #92	; 0x5c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	333f      	adds	r3, #63	; 0x3f
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d121      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	0151      	lsls	r1, r2, #5
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	440a      	add	r2, r1
 8001f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 ffd8 	bl	8004ed6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2310      	movs	r3, #16
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e066      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d127      	bne.n	8001f9e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	0151      	lsls	r1, r2, #5
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	440a      	add	r2, r1
 8001f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3360      	adds	r3, #96	; 0x60
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	b2d9      	uxtb	r1, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	202c      	movs	r0, #44	; 0x2c
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f008 fec6 	bl	800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f9c:	e034      	b.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	333f      	adds	r3, #63	; 0x3f
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12a      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3360      	adds	r3, #96	; 0x60
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3354      	adds	r3, #84	; 0x54
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f083 0301 	eor.w	r3, r3, #1
 8001fd8:	b2d8      	uxtb	r0, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3354      	adds	r3, #84	; 0x54
 8001fe8:	4602      	mov	r2, r0
 8001fea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	202c      	movs	r0, #44	; 0x2c
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f008 fe90 	bl	800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d12b      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3348      	adds	r3, #72	; 0x48
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	202c      	movs	r0, #44	; 0x2c
 8002026:	fb00 f202 	mul.w	r2, r0, r2
 800202a:	440a      	add	r2, r1
 800202c:	3240      	adds	r2, #64	; 0x40
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	fbb3 f3f2 	udiv	r3, r3, r2
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 81be 	beq.w	80023ba <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3354      	adds	r3, #84	; 0x54
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2d8      	uxtb	r0, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3354      	adds	r3, #84	; 0x54
 8002062:	4602      	mov	r2, r0
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	e1a8      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3354      	adds	r3, #84	; 0x54
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2d8      	uxtb	r0, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3354      	adds	r3, #84	; 0x54
 800208c:	4602      	mov	r2, r0
 800208e:	701a      	strb	r2, [r3, #0]
}
 8002090:	e193      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	f040 8106 	bne.w	80022b6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3361      	adds	r3, #97	; 0x61
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d109      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3360      	adds	r3, #96	; 0x60
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e0c9      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3361      	adds	r3, #97	; 0x61
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d109      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	2205      	movs	r2, #5
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e0b5      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d009      	beq.n	8002142 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800213e:	2b08      	cmp	r3, #8
 8002140:	d150      	bne.n	80021e4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	212c      	movs	r1, #44	; 0x2c
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	335c      	adds	r3, #92	; 0x5c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	202c      	movs	r0, #44	; 0x2c
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	440b      	add	r3, r1
 8002160:	335c      	adds	r3, #92	; 0x5c
 8002162:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	335c      	adds	r3, #92	; 0x5c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d912      	bls.n	800219e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3360      	adds	r3, #96	; 0x60
 8002198:	2204      	movs	r2, #4
 800219a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800219c:	e073      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3360      	adds	r3, #96	; 0x60
 80021ac:	2202      	movs	r2, #2
 80021ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e2:	e050      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3361      	adds	r3, #97	; 0x61
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d122      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002220:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e023      	b.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b07      	cmp	r3, #7
 8002250:	d119      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	202c      	movs	r0, #44	; 0x2c
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	440b      	add	r3, r1
 8002270:	335c      	adds	r3, #92	; 0x5c
 8002272:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	2204      	movs	r2, #4
 8002284:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	461a      	mov	r2, r3
 8002294:	2302      	movs	r3, #2
 8002296:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	202c      	movs	r0, #44	; 0x2c
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3360      	adds	r3, #96	; 0x60
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f008 fd3a 	bl	800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b4:	e081      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d176      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	333f      	adds	r3, #63	; 0x3f
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d121      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	335c      	adds	r3, #92	; 0x5c
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	0151      	lsls	r1, r2, #5
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	440a      	add	r2, r1
 8002308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fdda 	bl	8004ed6 <USB_HC_Halt>
 8002322:	e041      	b.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	333f      	adds	r3, #63	; 0x3f
 8002346:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002348:	2b02      	cmp	r3, #2
 800234a:	d12d      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d120      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	3361      	adds	r3, #97	; 0x61
 8002374:	2203      	movs	r2, #3
 8002376:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	0151      	lsls	r1, r2, #5
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	440a      	add	r2, r1
 800238e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fd97 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	2310      	movs	r3, #16
 80023b8:	6093      	str	r3, [r2, #8]
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b088      	sub	sp, #32
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d119      	bne.n	8002426 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	461a      	mov	r2, r3
 8002400:	2304      	movs	r3, #4
 8002402:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	440a      	add	r2, r1
 800241a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002424:	e3ca      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d13e      	bne.n	80024ba <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2320      	movs	r3, #32
 800244c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	333d      	adds	r3, #61	; 0x3d
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	f040 83ac 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	333d      	adds	r3, #61	; 0x3d
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	0151      	lsls	r1, r2, #5
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	440a      	add	r2, r1
 800249e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fd0f 	bl	8004ed6 <USB_HC_Halt>
}
 80024b8:	e380      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d122      	bne.n	8002518 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	0151      	lsls	r1, r2, #5
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	440a      	add	r2, r1
 80024e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fcea 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	6093      	str	r3, [r2, #8]
}
 8002516:	e351      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d150      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d111      	bne.n	800257a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333d      	adds	r3, #61	; 0x3d
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	0151      	lsls	r1, r2, #5
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	440a      	add	r2, r1
 8002590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fc96 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	2301      	movs	r3, #1
 80025ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3361      	adds	r3, #97	; 0x61
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
}
 80025ce:	e2f5      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d13c      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	2204      	movs	r2, #4
 80025f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	333d      	adds	r3, #61	; 0x3d
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	335c      	adds	r3, #92	; 0x5c
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	0151      	lsls	r1, r2, #5
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	440a      	add	r2, r1
 8002632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fc45 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e2ad      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d12a      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2308      	movs	r3, #8
 8002686:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fc0f 	bl	8004ed6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	2205      	movs	r2, #5
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	e277      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d150      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	335c      	adds	r3, #92	; 0x5c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333d      	adds	r3, #61	; 0x3d
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	333c      	adds	r3, #60	; 0x3c
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	333d      	adds	r3, #61	; 0x3d
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fbb3 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2310      	movs	r3, #16
 8002780:	6093      	str	r3, [r2, #8]
}
 8002782:	e21b      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d174      	bne.n	8002884 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d121      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2206      	movs	r2, #6
 80027b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fb79 	bl	8004ed6 <USB_HC_Halt>
 80027e4:	e044      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	202c      	movs	r0, #44	; 0x2c
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	440b      	add	r3, r1
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	335c      	adds	r3, #92	; 0x5c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d920      	bls.n	800285e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3360      	adds	r3, #96	; 0x60
 800283c:	2204      	movs	r2, #4
 800283e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2d9      	uxtb	r1, r3
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f008 fa66 	bl	800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>
 800285c:	e008      	b.n	8002870 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3360      	adds	r3, #96	; 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	6093      	str	r3, [r2, #8]
}
 8002882:	e19b      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d134      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	0151      	lsls	r1, r2, #5
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	440a      	add	r2, r1
 80028b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fb05 	bl	8004ed6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2310      	movs	r3, #16
 80028dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2208      	movs	r2, #8
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	e15a      	b.n	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	f040 814f 	bne.w	8002bbc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	0151      	lsls	r1, r2, #5
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	440a      	add	r2, r1
 8002934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3361      	adds	r3, #97	; 0x61
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d17d      	bne.n	8002a4e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d00a      	beq.n	800298e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333f      	adds	r3, #63	; 0x3f
 8002986:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002988:	2b03      	cmp	r3, #3
 800298a:	f040 8100 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3355      	adds	r3, #85	; 0x55
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3355      	adds	r3, #85	; 0x55
 80029ba:	4602      	mov	r2, r0
 80029bc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 80e3 	bne.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	334c      	adds	r3, #76	; 0x4c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80d8 	beq.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	334c      	adds	r3, #76	; 0x4c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f202 	mul.w	r2, r0, r2
 80029f8:	440a      	add	r2, r1
 80029fa:	3240      	adds	r2, #64	; 0x40
 80029fc:	8812      	ldrh	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	3b01      	subs	r3, #1
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f202 	mul.w	r2, r0, r2
 8002a0c:	440a      	add	r2, r1
 8002a0e:	3240      	adds	r2, #64	; 0x40
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80b5 	beq.w	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3355      	adds	r3, #85	; 0x55
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2d8      	uxtb	r0, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3355      	adds	r3, #85	; 0x55
 8002a48:	4602      	mov	r2, r0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e09f      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3361      	adds	r3, #97	; 0x61
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d109      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e08b      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3361      	adds	r3, #97	; 0x61
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3360      	adds	r3, #96	; 0x60
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e077      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3361      	adds	r3, #97	; 0x61
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d109      	bne.n	8002ac6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e063      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d009      	beq.n	8002aee <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3361      	adds	r3, #97	; 0x61
 8002ae8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d14f      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d912      	bls.n	8002b4a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	335c      	adds	r3, #92	; 0x5c
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3360      	adds	r3, #96	; 0x60
 8002b44:	2204      	movs	r2, #4
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e021      	b.n	8002b8e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	b2d9      	uxtb	r1, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	fb00 f303 	mul.w	r3, r0, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3360      	adds	r3, #96	; 0x60
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f008 f8b6 	bl	800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	0c5b      	lsrs	r3, r3, #17
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d004      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x46>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	f000 80a9 	beq.w	8002d5a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c08:	e0aa      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a6 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3344      	adds	r3, #68	; 0x44
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 809b 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3350      	adds	r3, #80	; 0x50
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	440b      	add	r3, r1
 8002c48:	334c      	adds	r3, #76	; 0x4c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d87a      	bhi.n	8002d46 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	b292      	uxth	r2, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f001 fcad 	bl	80045c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3344      	adds	r3, #68	; 0x44
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	441a      	add	r2, r3
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	202c      	movs	r0, #44	; 0x2c
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3344      	adds	r3, #68	; 0x44
 8002c90:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	202c      	movs	r0, #44	; 0x2c
 8002cac:	fb00 f303 	mul.w	r3, r0, r3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3350      	adds	r3, #80	; 0x50
 8002cb4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	0cdb      	lsrs	r3, r3, #19
 8002cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3340      	adds	r3, #64	; 0x40
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d13c      	bne.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d039      	beq.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3354      	adds	r3, #84	; 0x54
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3354      	adds	r3, #84	; 0x54
 8002d40:	4602      	mov	r2, r0
 8002d42:	701a      	strb	r2, [r3, #0]
      break;
 8002d44:	e00b      	b.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3360      	adds	r3, #96	; 0x60
 8002d54:	2204      	movs	r2, #4
 8002d56:	701a      	strb	r2, [r3, #0]
      break;
 8002d58:	e001      	b.n	8002d5e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d5e:	bf00      	nop
  }
}
 8002d60:	bf00      	nop
 8002d62:	3728      	adds	r7, #40	; 0x28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d10b      	bne.n	8002db8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f007 ffa0 	bl	800acf0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d132      	bne.n	8002e28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d126      	bne.n	8002e22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d113      	bne.n	8002e04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de6:	d106      	bne.n	8002df6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fd4a 	bl	8004888 <USB_InitFSLSPClkSel>
 8002df4:	e011      	b.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fd43 	bl	8004888 <USB_InitFSLSPClkSel>
 8002e02:	e00a      	b.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e12:	461a      	mov	r2, r3
 8002e14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f007 ff92 	bl	800ad44 <HAL_HCD_PortEnabled_Callback>
 8002e20:	e002      	b.n	8002e28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f007 ff9c 	bl	800ad60 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d103      	bne.n	8002e3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e264      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e23f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a8a      	ldr	r2, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a87      	ldr	r2, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fd ff50 	bl	8000dac <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fd ff4c 	bl	8000dac <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e204      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fd ff3c 	bl	8000dac <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fd ff38 	bl	8000dac <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1f0      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1c4      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fef1 	bl	8000dac <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fd feed 	bl	8000dac <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1a5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4940      	ldr	r1, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd fed0 	bl	8000dac <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fd fecc 	bl	8000dac <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e184      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fd feb0 	bl	8000dac <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fd feac 	bl	8000dac <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e164      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fd fe99 	bl	8000dac <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd fe95 	bl	8000dac <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e14d      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d121      	bne.n	800312a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fd fe5b 	bl	8000dac <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e011      	b.n	800311e <HAL_RCC_OscConfig+0x2ce>
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fd fe4e 	bl	8000dac <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e106      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f0>
 8003132:	4b81      	ldr	r3, [pc, #516]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003148:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a74      	ldr	r2, [pc, #464]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fd fe13 	bl	8000dac <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fd fe0f 	bl	8000dac <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0c5      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x33a>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fdfd 	bl	8000dac <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fdf9 	bl	8000dac <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0af      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 809b 	beq.w	800332a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b50      	ldr	r3, [pc, #320]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d05c      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d141      	bne.n	800328c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd fdcd 	bl	8000dac <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fd fdc9 	bl	8000dac <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e081      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fda2 	bl	8000dac <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd fd9e 	bl	8000dac <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e056      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x41c>
 800328a:	e04e      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x4ec>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fd8b 	bl	8000dac <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fd fd87 	bl	8000dac <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e03f      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x44a>
 80032b8:	e037      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e032      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d028      	beq.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d121      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d11a      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40007000 	.word	0x40007000
 8003338:	40023800 	.word	0x40023800
 800333c:	42470060 	.word	0x42470060

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0cc      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d90c      	bls.n	800337c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0b8      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a52      	ldr	r2, [pc, #328]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	494d      	ldr	r1, [pc, #308]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d044      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d119      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e067      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fd fcbc 	bl	8000dac <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fcb8 	bl	8000dac <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e04f      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d20c      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e032      	b.n	80034ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4916      	ldr	r1, [pc, #88]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c6:	f000 f821 	bl	800350c <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd facc 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023c00 	.word	0x40023c00
 80034fc:	40023800 	.word	0x40023800
 8003500:	0800c36c 	.word	0x0800c36c
 8003504:	20000000 	.word	0x20000000
 8003508:	20000004 	.word	0x20000004

0800350c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800350c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	2300      	movs	r3, #0
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003524:	4b67      	ldr	r3, [pc, #412]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d00d      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x40>
 8003530:	2b08      	cmp	r3, #8
 8003532:	f200 80bd 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x34>
 800353a:	2b04      	cmp	r3, #4
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x3a>
 800353e:	e0b7      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003542:	60bb      	str	r3, [r7, #8]
       break;
 8003544:	e0b7      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003546:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003548:	60bb      	str	r3, [r7, #8]
      break;
 800354a:	e0b4      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354c:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003554:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04d      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003562:	4b58      	ldr	r3, [pc, #352]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	099b      	lsrs	r3, r3, #6
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	ea02 0800 	and.w	r8, r2, r0
 800357a:	ea03 0901 	and.w	r9, r3, r1
 800357e:	4640      	mov	r0, r8
 8003580:	4649      	mov	r1, r9
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	014b      	lsls	r3, r1, #5
 800358c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003590:	0142      	lsls	r2, r0, #5
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	ebb0 0008 	subs.w	r0, r0, r8
 800359a:	eb61 0109 	sbc.w	r1, r1, r9
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ac:	0182      	lsls	r2, r0, #6
 80035ae:	1a12      	subs	r2, r2, r0
 80035b0:	eb63 0301 	sbc.w	r3, r3, r1
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	00d9      	lsls	r1, r3, #3
 80035be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c2:	00d0      	lsls	r0, r2, #3
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	eb12 0208 	adds.w	r2, r2, r8
 80035cc:	eb43 0309 	adc.w	r3, r3, r9
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	0259      	lsls	r1, r3, #9
 80035da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035de:	0250      	lsls	r0, r2, #9
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f7fc fe46 	bl	8000280 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e04a      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	461a      	mov	r2, r3
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	ea02 0400 	and.w	r4, r2, r0
 8003616:	ea03 0501 	and.w	r5, r3, r1
 800361a:	4620      	mov	r0, r4
 800361c:	4629      	mov	r1, r5
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	014b      	lsls	r3, r1, #5
 8003628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800362c:	0142      	lsls	r2, r0, #5
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	1b00      	subs	r0, r0, r4
 8003634:	eb61 0105 	sbc.w	r1, r1, r5
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	018b      	lsls	r3, r1, #6
 8003642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003646:	0182      	lsls	r2, r0, #6
 8003648:	1a12      	subs	r2, r2, r0
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	00d9      	lsls	r1, r3, #3
 8003658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365c:	00d0      	lsls	r0, r2, #3
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	1912      	adds	r2, r2, r4
 8003664:	eb45 0303 	adc.w	r3, r5, r3
 8003668:	f04f 0000 	mov.w	r0, #0
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	0299      	lsls	r1, r3, #10
 8003672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003676:	0290      	lsls	r0, r2, #10
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fc fdfa 	bl	8000280 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	60bb      	str	r3, [r7, #8]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036b2:	60bb      	str	r3, [r7, #8]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	68bb      	ldr	r3, [r7, #8]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000000 	.word	0x20000000

080036e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ec:	f7ff fff0 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0a9b      	lsrs	r3, r3, #10
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	0800c37c 	.word	0x0800c37c

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003714:	f7ff ffdc 	bl	80036d0 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0b5b      	lsrs	r3, r3, #13
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	0800c37c 	.word	0x0800c37c

08003738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	220f      	movs	r2, #15
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCC_GetClockConfig+0x60>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40023c00 	.word	0x40023c00

0800379c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f839 	bl	800383a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 f9d8 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04e      	b.n	8003906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_TIM_Base_Start_IT+0xc4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_TIM_Base_Start_IT+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_Base_Start_IT+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d111      	bne.n	80038f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d010      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	e007      	b.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d122      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0202 	mvn.w	r2, #2
 800395c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8ee 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8e0 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f8f1 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0204 	mvn.w	r2, #4
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8c4 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8b6 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8c7 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0208 	mvn.w	r2, #8
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f89a 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f88c 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f89d 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f870 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f862 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f873 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0201 	mvn.w	r2, #1
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fc ff60 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f902 	bl	8003ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f838 	bl	8003b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0220 	mvn.w	r2, #32
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8cc 	bl	8003cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d00f      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3d      	ldr	r2, [pc, #244]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3b      	ldr	r2, [pc, #236]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2f      	ldr	r2, [pc, #188]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d027      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <TIM_Base_SetConfig+0x118>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d023      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <TIM_Base_SetConfig+0x11c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <TIM_Base_SetConfig+0x120>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <TIM_Base_SetConfig+0x128>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a27      	ldr	r2, [pc, #156]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <TIM_Base_SetConfig+0x130>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <TIM_Base_SetConfig+0x134>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <TIM_Base_SetConfig+0x138>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0xf8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <TIM_Base_SetConfig+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40000c00 	.word	0x40000c00
 8003cb4:	40010400 	.word	0x40010400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40001800 	.word	0x40001800
 8003cc8:	40001c00 	.word	0x40001c00
 8003ccc:	40002000 	.word	0x40002000

08003cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e03f      	b.n	8003d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc fe68 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f929 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af02      	add	r7, sp, #8
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d17c      	bne.n	8003eac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_Transmit+0x2c>
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e075      	b.n	8003eae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Transmit+0x3e>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e06e      	b.n	8003eae <HAL_UART_Transmit+0x11c>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2221      	movs	r2, #33	; 0x21
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de6:	f7fc ffe1 	bl	8000dac <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d108      	bne.n	8003e14 <HAL_UART_Transmit+0x82>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e003      	b.n	8003e1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e24:	e02a      	b.n	8003e7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f840 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e036      	b.n	8003eae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	3302      	adds	r3, #2
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e007      	b.n	8003e6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cf      	bne.n	8003e26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f810 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b090      	sub	sp, #64	; 0x40
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	e050      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ece:	d04c      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed6:	f7fc ff69 	bl	8000dac <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d241      	bcs.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f06:	637a      	str	r2, [r7, #52]	; 0x34
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3a:	623a      	str	r2, [r7, #32]
 8003f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00f      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d09f      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3740      	adds	r7, #64	; 0x40
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	b09f      	sub	sp, #124	; 0x7c
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	ea40 0301 	orr.w	r3, r0, r1
 8003fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	6999      	ldr	r1, [r3, #24]
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	ea40 0301 	orr.w	r3, r0, r1
 8003ffc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bc5      	ldr	r3, [pc, #788]	; (8004318 <UART_SetConfig+0x384>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d004      	beq.n	8004012 <UART_SetConfig+0x7e>
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4bc3      	ldr	r3, [pc, #780]	; (800431c <UART_SetConfig+0x388>)
 800400e:	429a      	cmp	r2, r3
 8004010:	d103      	bne.n	800401a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004012:	f7ff fb7d 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004016:	6778      	str	r0, [r7, #116]	; 0x74
 8004018:	e002      	b.n	8004020 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7ff fb65 	bl	80036e8 <HAL_RCC_GetPCLK1Freq>
 800401e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	f040 80b6 	bne.w	8004198 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	461c      	mov	r4, r3
 8004030:	f04f 0500 	mov.w	r5, #0
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	1891      	adds	r1, r2, r2
 800403a:	6439      	str	r1, [r7, #64]	; 0x40
 800403c:	415b      	adcs	r3, r3
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004044:	1912      	adds	r2, r2, r4
 8004046:	eb45 0303 	adc.w	r3, r5, r3
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004058:	00d0      	lsls	r0, r2, #3
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	1911      	adds	r1, r2, r4
 8004060:	6639      	str	r1, [r7, #96]	; 0x60
 8004062:	416b      	adcs	r3, r5
 8004064:	667b      	str	r3, [r7, #100]	; 0x64
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	1891      	adds	r1, r2, r2
 8004072:	63b9      	str	r1, [r7, #56]	; 0x38
 8004074:	415b      	adcs	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800407c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004080:	f7fc f8fe 	bl	8000280 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4ba5      	ldr	r3, [pc, #660]	; (8004320 <UART_SetConfig+0x38c>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011e      	lsls	r6, r3, #4
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	461c      	mov	r4, r3
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6339      	str	r1, [r7, #48]	; 0x30
 80040a2:	415b      	adcs	r3, r3
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040aa:	1912      	adds	r2, r2, r4
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	f04f 0000 	mov.w	r0, #0
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	00d9      	lsls	r1, r3, #3
 80040ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040be:	00d0      	lsls	r0, r2, #3
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	1911      	adds	r1, r2, r4
 80040c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040c8:	416b      	adcs	r3, r5
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	1891      	adds	r1, r2, r2
 80040d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80040da:	415b      	adcs	r3, r3
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040e6:	f7fc f8cb 	bl	8000280 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <UART_SetConfig+0x38c>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a87      	ldr	r2, [pc, #540]	; (8004320 <UART_SetConfig+0x38c>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004110:	441e      	add	r6, r3
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	4618      	mov	r0, r3
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	1894      	adds	r4, r2, r2
 8004120:	623c      	str	r4, [r7, #32]
 8004122:	415b      	adcs	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412a:	1812      	adds	r2, r2, r0
 800412c:	eb41 0303 	adc.w	r3, r1, r3
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	f04f 0500 	mov.w	r5, #0
 8004138:	00dd      	lsls	r5, r3, #3
 800413a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800413e:	00d4      	lsls	r4, r2, #3
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	1814      	adds	r4, r2, r0
 8004146:	653c      	str	r4, [r7, #80]	; 0x50
 8004148:	414b      	adcs	r3, r1
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	1891      	adds	r1, r2, r2
 8004158:	61b9      	str	r1, [r7, #24]
 800415a:	415b      	adcs	r3, r3
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004166:	f7fc f88b 	bl	8000280 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <UART_SetConfig+0x38c>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a67      	ldr	r2, [pc, #412]	; (8004320 <UART_SetConfig+0x38c>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4432      	add	r2, r6
 8004194:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004196:	e0b9      	b.n	800430c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419a:	461c      	mov	r4, r3
 800419c:	f04f 0500 	mov.w	r5, #0
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	6139      	str	r1, [r7, #16]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041b0:	1912      	adds	r2, r2, r4
 80041b2:	eb45 0303 	adc.w	r3, r5, r3
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	00d9      	lsls	r1, r3, #3
 80041c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c4:	00d0      	lsls	r0, r2, #3
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	eb12 0804 	adds.w	r8, r2, r4
 80041ce:	eb43 0905 	adc.w	r9, r3, r5
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ea:	0082      	lsls	r2, r0, #2
 80041ec:	4640      	mov	r0, r8
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fc f846 	bl	8000280 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <UART_SetConfig+0x38c>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011e      	lsls	r6, r3, #4
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	4618      	mov	r0, r3
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1894      	adds	r4, r2, r2
 8004210:	60bc      	str	r4, [r7, #8]
 8004212:	415b      	adcs	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421a:	1812      	adds	r2, r2, r0
 800421c:	eb41 0303 	adc.w	r3, r1, r3
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f04f 0500 	mov.w	r5, #0
 8004228:	00dd      	lsls	r5, r3, #3
 800422a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800422e:	00d4      	lsls	r4, r2, #3
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1814      	adds	r4, r2, r0
 8004236:	64bc      	str	r4, [r7, #72]	; 0x48
 8004238:	414b      	adcs	r3, r1
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4618      	mov	r0, r3
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004254:	0082      	lsls	r2, r0, #2
 8004256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800425a:	f7fc f811 	bl	8000280 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <UART_SetConfig+0x38c>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <UART_SetConfig+0x38c>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004282:	441e      	add	r6, r3
 8004284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004286:	4618      	mov	r0, r3
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	1894      	adds	r4, r2, r2
 8004292:	603c      	str	r4, [r7, #0]
 8004294:	415b      	adcs	r3, r3
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429c:	1812      	adds	r2, r2, r0
 800429e:	eb41 0303 	adc.w	r3, r1, r3
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	f04f 0500 	mov.w	r5, #0
 80042aa:	00dd      	lsls	r5, r3, #3
 80042ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042b0:	00d4      	lsls	r4, r2, #3
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	eb12 0a00 	adds.w	sl, r2, r0
 80042ba:	eb43 0b01 	adc.w	fp, r3, r1
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042d6:	0082      	lsls	r2, r0, #2
 80042d8:	4650      	mov	r0, sl
 80042da:	4659      	mov	r1, fp
 80042dc:	f7fb ffd0 	bl	8000280 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <UART_SetConfig+0x38c>)
 80042e6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2164      	movs	r1, #100	; 0x64
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	3332      	adds	r3, #50	; 0x32
 80042f8:	4a09      	ldr	r2, [pc, #36]	; (8004320 <UART_SetConfig+0x38c>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4432      	add	r2, r6
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	377c      	adds	r7, #124	; 0x7c
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40011000 	.word	0x40011000
 800431c:	40011400 	.word	0x40011400
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004324:	b084      	sub	sp, #16
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	f107 001c 	add.w	r0, r7, #28
 8004332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d122      	bne.n	8004382 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9a0 	bl	80046bc <USB_CoreReset>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e01a      	b.n	80043b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f994 	bl	80046bc <USB_CoreReset>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
 80043aa:	e005      	b.n	80043b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10b      	bne.n	80043d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f043 0206 	orr.w	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e2:	b004      	add	sp, #16
 80043e4:	4770      	bx	lr

080043e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 0201 	bic.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d115      	bne.n	8004478 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004458:	2001      	movs	r0, #1
 800445a:	f7fc fcb3 	bl	8000dc4 <HAL_Delay>
      ms++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f91a 	bl	800469e <USB_GetMode>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	d01e      	beq.n	80044ae <USB_SetCurrentMode+0x84>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b31      	cmp	r3, #49	; 0x31
 8004474:	d9f0      	bls.n	8004458 <USB_SetCurrentMode+0x2e>
 8004476:	e01a      	b.n	80044ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d115      	bne.n	80044aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800448a:	2001      	movs	r0, #1
 800448c:	f7fc fc9a 	bl	8000dc4 <HAL_Delay>
      ms++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f901 	bl	800469e <USB_GetMode>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <USB_SetCurrentMode+0x84>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b31      	cmp	r3, #49	; 0x31
 80044a6:	d9f0      	bls.n	800448a <USB_SetCurrentMode+0x60>
 80044a8:	e001      	b.n	80044ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e005      	b.n	80044ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b32      	cmp	r3, #50	; 0x32
 80044b2:	d101      	bne.n	80044b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <USB_FlushTxFifo+0x44>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e006      	b.n	80044fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d0f1      	beq.n	80044de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	00030d40 	.word	0x00030d40

0800450c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2210      	movs	r2, #16
 800451c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <USB_FlushRxFifo+0x3c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e006      	b.n	800453c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d0f1      	beq.n	800451e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	00030d40 	.word	0x00030d40

0800454c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	71fb      	strb	r3, [r7, #7]
 800455e:	4613      	mov	r3, r2
 8004560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800456a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d123      	bne.n	80045ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004572:	88bb      	ldrh	r3, [r7, #4]
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e018      	b.n	80045b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	031a      	lsls	r2, r3, #12
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3e2      	bcc.n	8004580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3724      	adds	r7, #36	; 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b08b      	sub	sp, #44	; 0x2c
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e014      	b.n	800461e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	3301      	adds	r3, #1
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	3301      	adds	r3, #1
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	3301      	adds	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3e6      	bcc.n	80045f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004626:	8bfb      	ldrh	r3, [r7, #30]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01e      	beq.n	800466a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	461a      	mov	r2, r3
 8004638:	f107 0310 	add.w	r3, r7, #16
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	701a      	strb	r2, [r3, #0]
      i++;
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	3301      	adds	r3, #1
 8004656:	623b      	str	r3, [r7, #32]
      pDest++;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	3301      	adds	r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800465e:	8bfb      	ldrh	r3, [r7, #30]
 8004660:	3b01      	subs	r3, #1
 8004662:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004664:	8bfb      	ldrh	r3, [r7, #30]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ea      	bne.n	8004640 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800466c:	4618      	mov	r0, r3
 800466e:	372c      	adds	r7, #44	; 0x2c
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3301      	adds	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <USB_CoreReset+0x60>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e01a      	b.n	800470e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	daf3      	bge.n	80046c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <USB_CoreReset+0x60>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e006      	b.n	800470e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d0f1      	beq.n	80046f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	00030d40 	.word	0x00030d40

08004720 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004720:	b084      	sub	sp, #16
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	f107 001c 	add.w	r0, r7, #28
 800472e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d018      	beq.n	80047a4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	2b01      	cmp	r3, #1
 8004776:	d10a      	bne.n	800478e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e014      	b.n	80047b8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800479c:	f023 0304 	bic.w	r3, r3, #4
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e009      	b.n	80047b8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047b2:	f023 0304 	bic.w	r3, r3, #4
 80047b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80047b8:	2110      	movs	r1, #16
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fe82 	bl	80044c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fea3 	bl	800450c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e015      	b.n	80047f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	2300      	movs	r3, #0
 80047f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3e5      	bcc.n	80047cc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <USB_HostInit+0x154>)
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a13      	ldr	r2, [pc, #76]	; (8004878 <USB_HostInit+0x158>)
 800482c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004830:	e009      	b.n	8004846 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2280      	movs	r2, #128	; 0x80
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <USB_HostInit+0x15c>)
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <USB_HostInit+0x160>)
 8004842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d105      	bne.n	8004858 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f043 0210 	orr.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <USB_HostInit+0x164>)
 800485e:	4313      	orrs	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr
 8004874:	01000200 	.word	0x01000200
 8004878:	00e00300 	.word	0x00e00300
 800487c:	00600080 	.word	0x00600080
 8004880:	004000e0 	.word	0x004000e0
 8004884:	a3200008 	.word	0xa3200008

08004888 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d0:	461a      	mov	r2, r3
 80048d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80048d6:	6053      	str	r3, [r2, #4]
 80048d8:	e009      	b.n	80048ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d106      	bne.n	80048ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e6:	461a      	mov	r2, r3
 80048e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80048ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800491c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800492c:	2064      	movs	r0, #100	; 0x64
 800492e:	f7fc fa49 	bl	8000dc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800493a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004940:	200a      	movs	r0, #10
 8004942:	f7fc fa3f 	bl	8000dc4 <HAL_Delay>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004974:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <USB_DriveVbus+0x44>
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d106      	bne.n	8004994 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800498e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004992:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	d109      	bne.n	80049b4 <USB_DriveVbus+0x64>
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	0c5b      	lsrs	r3, r3, #17
 80049e0:	f003 0303 	and.w	r3, r3, #3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	b29b      	uxth	r3, r3
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	70fb      	strb	r3, [r7, #3]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70bb      	strb	r3, [r7, #2]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d87e      	bhi.n	8004b50 <USB_HC_Init+0x13c>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <USB_HC_Init+0x44>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004b13 	.word	0x08004b13
 8004a60:	08004a69 	.word	0x08004a69
 8004a64:	08004ad5 	.word	0x08004ad5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	461a      	mov	r2, r3
 8004a76:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	da10      	bge.n	8004aa6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004aa4:	e057      	b.n	8004b56 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d051      	beq.n	8004b56 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004acc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad0:	60d3      	str	r3, [r2, #12]
      break;
 8004ad2:	e040      	b.n	8004b56 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ae6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ae8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da34      	bge.n	8004b5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b10:	e023      	b.n	8004b5a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f240 2325 	movw	r3, #549	; 0x225
 8004b24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da17      	bge.n	8004b5e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b48:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b4e:	e006      	b.n	8004b5e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	77fb      	strb	r3, [r7, #31]
      break;
 8004b54:	e004      	b.n	8004b60 <USB_HC_Init+0x14c>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <USB_HC_Init+0x14c>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <USB_HC_Init+0x14c>
      break;
 8004b5e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	6939      	ldr	r1, [r7, #16]
 8004b76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da03      	bge.n	8004b9a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	e001      	b.n	8004b9e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ff0f 	bl	80049c2 <USB_GetHostSpeed>
 8004ba4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d106      	bne.n	8004bbc <USB_HC_Init+0x1a8>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d003      	beq.n	8004bbc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e001      	b.n	8004bc0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	059b      	lsls	r3, r3, #22
 8004bc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bc8:	78bb      	ldrb	r3, [r7, #2]
 8004bca:	02db      	lsls	r3, r3, #11
 8004bcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bd6:	049b      	lsls	r3, r3, #18
 8004bd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004be4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	0159      	lsls	r1, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bfc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d10f      	bne.n	8004c26 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08c      	sub	sp, #48	; 0x30
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02d      	beq.n	8004cb6 <USB_HC_StartXfer+0x86>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d129      	bne.n	8004cb6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d117      	bne.n	8004c98 <USB_HC_StartXfer+0x68>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	79db      	ldrb	r3, [r3, #7]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <USB_HC_StartXfer+0x48>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	79db      	ldrb	r3, [r3, #7]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d10f      	bne.n	8004c98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	0151      	lsls	r1, r2, #5
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <USB_HC_StartXfer+0x86>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	795b      	ldrb	r3, [r3, #5]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	4619      	mov	r1, r3
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fa2f 	bl	8005110 <USB_DoPing>
      return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e0f8      	b.n	8004ea8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	8912      	ldrh	r2, [r2, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	8912      	ldrh	r2, [r2, #8]
 8004cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cd6:	8b7b      	ldrh	r3, [r7, #26]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d90b      	bls.n	8004cf4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004cdc:	8b7b      	ldrh	r3, [r7, #26]
 8004cde:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	8912      	ldrh	r2, [r2, #8]
 8004ce6:	fb02 f203 	mul.w	r2, r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e001      	b.n	8004cf4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	78db      	ldrb	r3, [r3, #3]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	8912      	ldrh	r2, [r2, #8]
 8004d02:	fb02 f203 	mul.w	r2, r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e003      	b.n	8004d14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d1e:	04d9      	lsls	r1, r3, #19
 8004d20:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <USB_HC_StartXfer+0x280>)
 8004d22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	7a9b      	ldrb	r3, [r3, #10]
 8004d2a:	075b      	lsls	r3, r3, #29
 8004d2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	0148      	lsls	r0, r1, #5
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	4401      	add	r1, r0
 8004d38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	460a      	mov	r2, r1
 8004d58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	7e7b      	ldrb	r3, [r7, #25]
 8004da2:	075b      	lsls	r3, r3, #29
 8004da4:	69f9      	ldr	r1, [r7, #28]
 8004da6:	0148      	lsls	r0, r1, #5
 8004da8:	6a39      	ldr	r1, [r7, #32]
 8004daa:	4401      	add	r1, r0
 8004dac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	78db      	ldrb	r3, [r3, #3]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e003      	b.n	8004de6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004de4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e04e      	b.n	8004ea8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	78db      	ldrb	r3, [r3, #3]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d149      	bne.n	8004ea6 <USB_HC_StartXfer+0x276>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d045      	beq.n	8004ea6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	79db      	ldrb	r3, [r3, #7]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d830      	bhi.n	8004e84 <USB_HC_StartXfer+0x254>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <USB_HC_StartXfer+0x1f8>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e5d 	.word	0x08004e5d
 8004e30:	08004e39 	.word	0x08004e39
 8004e34:	08004e5d 	.word	0x08004e5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e42:	8afa      	ldrh	r2, [r7, #22]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d91c      	bls.n	8004e88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e5a:	e015      	b.n	8004e88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	3303      	adds	r3, #3
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e66:	8afa      	ldrh	r2, [r7, #22]
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d90a      	bls.n	8004e8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e82:	e003      	b.n	8004e8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004e84:	bf00      	nop
 8004e86:	e002      	b.n	8004e8e <USB_HC_StartXfer+0x25e>
        break;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <USB_HC_StartXfer+0x25e>
        break;
 8004e8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68d9      	ldr	r1, [r3, #12]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	785a      	ldrb	r2, [r3, #1]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	9000      	str	r0, [sp, #0]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fb53 	bl	800454c <USB_WritePacket>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	1ff80000 	.word	0x1ff80000

08004eb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	b29b      	uxth	r3, r3
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b089      	sub	sp, #36	; 0x24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	0c9b      	lsrs	r3, r3, #18
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0fdb      	lsrs	r3, r3, #31
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d104      	bne.n	8004f30 <USB_HC_Halt+0x5a>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e0e8      	b.n	8005102 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <USB_HC_Halt+0x66>
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d173      	bne.n	8005024 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f040 80cb 	bne.w	8005100 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d143      	bne.n	8004ffe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fd4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe2:	d81d      	bhi.n	8005020 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffa:	d0ec      	beq.n	8004fd6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ffc:	e080      	b.n	8005100 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	440a      	add	r2, r1
 8005014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800501c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800501e:	e06f      	b.n	8005100 <USB_HC_Halt+0x22a>
            break;
 8005020:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005022:	e06d      	b.n	8005100 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	440a      	add	r2, r1
 800503a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005042:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d143      	bne.n	80050dc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	440a      	add	r2, r1
 800506a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005072:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	440a      	add	r2, r1
 800508a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005092:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c0:	d81d      	bhi.n	80050fe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d8:	d0ec      	beq.n	80050b4 <USB_HC_Halt+0x1de>
 80050da:	e011      	b.n	8005100 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e000      	b.n	8005100 <USB_HC_Halt+0x22a>
          break;
 80050fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005124:	2301      	movs	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	04da      	lsls	r2, r3, #19
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <USB_DoPing+0x74>)
 800512e:	4013      	ands	r3, r2
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	440a      	add	r2, r1
 8005138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005140:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005158:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005160:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	461a      	mov	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	1ff80000 	.word	0x1ff80000

08005188 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff f935 	bl	8004408 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800519e:	2110      	movs	r1, #16
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f98f 	bl	80044c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff f9b0 	bl	800450c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	e01f      	b.n	80051f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	461a      	mov	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3301      	adds	r3, #1
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b0f      	cmp	r3, #15
 80051f6:	d9dc      	bls.n	80051b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e034      	b.n	8005268 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005214:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005224:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	d80c      	bhi.n	8005260 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525c:	d0ec      	beq.n	8005238 <USB_StopHost+0xb0>
 800525e:	e000      	b.n	8005262 <USB_StopHost+0xda>
        break;
 8005260:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d9c7      	bls.n	80051fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005274:	461a      	mov	r2, r3
 8005276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800527a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005282:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f8ae 	bl	80043e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005298:	4904      	ldr	r1, [pc, #16]	; (80052ac <MX_FATFS_Init+0x18>)
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <MX_FATFS_Init+0x1c>)
 800529c:	f005 fc58 	bl	800ab50 <FATFS_LinkDriver>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <MX_FATFS_Init+0x20>)
 80052a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200001f0 	.word	0x200001f0
 80052b0:	0800c384 	.word	0x0800c384
 80052b4:	2000225c 	.word	0x2000225c

080052b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80052bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	4619      	mov	r1, r3
 80052f2:	4808      	ldr	r0, [pc, #32]	; (8005314 <USBH_status+0x34>)
 80052f4:	f000 fe1a 	bl	8005f2c <USBH_MSC_UnitIsReady>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <USBH_status+0x24>
  {
    res = RES_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e001      	b.n	8005308 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20002260 	.word	0x20002260

08005318 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b094      	sub	sp, #80	; 0x50
 800531c:	af02      	add	r7, sp, #8
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800532e:	7bf9      	ldrb	r1, [r7, #15]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4813      	ldr	r0, [pc, #76]	; (8005388 <USBH_read+0x70>)
 800533a:	f000 fe41 	bl	8005fc0 <USBH_MSC_Read>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <USBH_read+0x34>
  {
    res = RES_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800534a:	e017      	b.n	800537c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800534c:	f107 0210 	add.w	r2, r7, #16
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	4619      	mov	r1, r3
 8005354:	480c      	ldr	r0, [pc, #48]	; (8005388 <USBH_read+0x70>)
 8005356:	f000 fe0f 	bl	8005f78 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800535a:	7f7b      	ldrb	r3, [r7, #29]
 800535c:	2b3a      	cmp	r3, #58	; 0x3a
 800535e:	d005      	beq.n	800536c <USBH_read+0x54>
 8005360:	2b3a      	cmp	r3, #58	; 0x3a
 8005362:	dc07      	bgt.n	8005374 <USBH_read+0x5c>
 8005364:	2b04      	cmp	r3, #4
 8005366:	d001      	beq.n	800536c <USBH_read+0x54>
 8005368:	2b28      	cmp	r3, #40	; 0x28
 800536a:	d103      	bne.n	8005374 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800536c:	2303      	movs	r3, #3
 800536e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005372:	e003      	b.n	800537c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800537a:	bf00      	nop
    }
  }

  return res;
 800537c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005380:	4618      	mov	r0, r3
 8005382:	3748      	adds	r7, #72	; 0x48
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20002260 	.word	0x20002260

0800538c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b094      	sub	sp, #80	; 0x50
 8005390:	af02      	add	r7, sp, #8
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4603      	mov	r3, r0
 800539a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80053a2:	7bf9      	ldrb	r1, [r7, #15]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4817      	ldr	r0, [pc, #92]	; (800540c <USBH_write+0x80>)
 80053ae:	f000 fe70 	bl	8006092 <USBH_MSC_Write>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <USBH_write+0x34>
  {
    res = RES_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80053be:	e01f      	b.n	8005400 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80053c0:	f107 0210 	add.w	r2, r7, #16
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4810      	ldr	r0, [pc, #64]	; (800540c <USBH_write+0x80>)
 80053ca:	f000 fdd5 	bl	8005f78 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80053ce:	7f7b      	ldrb	r3, [r7, #29]
 80053d0:	2b3a      	cmp	r3, #58	; 0x3a
 80053d2:	d00d      	beq.n	80053f0 <USBH_write+0x64>
 80053d4:	2b3a      	cmp	r3, #58	; 0x3a
 80053d6:	dc0f      	bgt.n	80053f8 <USBH_write+0x6c>
 80053d8:	2b28      	cmp	r3, #40	; 0x28
 80053da:	d009      	beq.n	80053f0 <USBH_write+0x64>
 80053dc:	2b28      	cmp	r3, #40	; 0x28
 80053de:	dc0b      	bgt.n	80053f8 <USBH_write+0x6c>
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d005      	beq.n	80053f0 <USBH_write+0x64>
 80053e4:	2b27      	cmp	r3, #39	; 0x27
 80053e6:	d107      	bne.n	80053f8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80053e8:	2302      	movs	r3, #2
 80053ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80053ee:	e007      	b.n	8005400 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80053f0:	2303      	movs	r3, #3
 80053f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80053f6:	e003      	b.n	8005400 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80053fe:	bf00      	nop
    }
  }

  return res;
 8005400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005404:	4618      	mov	r0, r3
 8005406:	3748      	adds	r7, #72	; 0x48
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20002260 	.word	0x20002260

08005410 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b090      	sub	sp, #64	; 0x40
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	603a      	str	r2, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
 800541c:	460b      	mov	r3, r1
 800541e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005426:	79bb      	ldrb	r3, [r7, #6]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d852      	bhi.n	80054d2 <USBH_ioctl+0xc2>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <USBH_ioctl+0x24>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005445 	.word	0x08005445
 8005438:	0800544d 	.word	0x0800544d
 800543c:	08005477 	.word	0x08005477
 8005440:	080054a3 	.word	0x080054a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800544a:	e045      	b.n	80054d8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800544c:	f107 0208 	add.w	r2, r7, #8
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	4619      	mov	r1, r3
 8005454:	4823      	ldr	r0, [pc, #140]	; (80054e4 <USBH_ioctl+0xd4>)
 8005456:	f000 fd8f 	bl	8005f78 <USBH_MSC_GetLUNInfo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800546c:	e034      	b.n	80054d8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005474:	e030      	b.n	80054d8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005476:	f107 0208 	add.w	r2, r7, #8
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	4619      	mov	r1, r3
 800547e:	4819      	ldr	r0, [pc, #100]	; (80054e4 <USBH_ioctl+0xd4>)
 8005480:	f000 fd7a 	bl	8005f78 <USBH_MSC_GetLUNInfo>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800548a:	8a3b      	ldrh	r3, [r7, #16]
 800548c:	461a      	mov	r2, r3
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005498:	e01e      	b.n	80054d8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80054a0:	e01a      	b.n	80054d8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80054a2:	f107 0208 	add.w	r2, r7, #8
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	4619      	mov	r1, r3
 80054aa:	480e      	ldr	r0, [pc, #56]	; (80054e4 <USBH_ioctl+0xd4>)
 80054ac:	f000 fd64 	bl	8005f78 <USBH_MSC_GetLUNInfo>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80054b6:	8a3b      	ldrh	r3, [r7, #16]
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80054c8:	e006      	b.n	80054d8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80054d0:	e002      	b.n	80054d8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80054d2:	2304      	movs	r3, #4
 80054d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80054d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3740      	adds	r7, #64	; 0x40
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20002260 	.word	0x20002260

080054e8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054f6:	7919      	ldrb	r1, [r3, #4]
 80054f8:	2350      	movs	r3, #80	; 0x50
 80054fa:	2206      	movs	r2, #6
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f001 fc53 	bl	8006da8 <USBH_FindInterface>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2bff      	cmp	r3, #255	; 0xff
 800550a:	d002      	beq.n	8005512 <USBH_MSC_InterfaceInit+0x2a>
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d901      	bls.n	8005516 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005512:	2302      	movs	r3, #2
 8005514:	e0ef      	b.n	80056f6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fc28 	bl	8006d70 <USBH_SelectInterface>
 8005520:	4603      	mov	r3, r0
 8005522:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800552a:	2302      	movs	r3, #2
 800552c:	e0e3      	b.n	80056f6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005534:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005538:	f005 fe48 	bl	800b1cc <malloc>
 800553c:	4603      	mov	r3, r0
 800553e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005550:	2302      	movs	r3, #2
 8005552:	e0d0      	b.n	80056f6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005558:	2100      	movs	r1, #0
 800555a:	68b8      	ldr	r0, [r7, #8]
 800555c:	f005 fe54 	bl	800b208 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	211a      	movs	r1, #26
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b25b      	sxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	da16      	bge.n	80055a6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	211a      	movs	r1, #26
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	211a      	movs	r1, #26
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800559e:	881a      	ldrh	r2, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	815a      	strh	r2, [r3, #10]
 80055a4:	e015      	b.n	80055d2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	211a      	movs	r1, #26
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	211a      	movs	r1, #26
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	211a      	movs	r1, #26
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da16      	bge.n	8005618 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	211a      	movs	r1, #26
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	211a      	movs	r1, #26
 8005606:	fb01 f303 	mul.w	r3, r1, r3
 800560a:	4413      	add	r3, r2
 800560c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005610:	881a      	ldrh	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	815a      	strh	r2, [r3, #10]
 8005616:	e015      	b.n	8005644 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	211a      	movs	r1, #26
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	211a      	movs	r1, #26
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800563e:	881a      	ldrh	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2200      	movs	r2, #0
 800564e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	799b      	ldrb	r3, [r3, #6]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f002 fdc4 	bl	80081ea <USBH_AllocPipe>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	79db      	ldrb	r3, [r3, #7]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 fdba 	bl	80081ea <USBH_AllocPipe>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fdac 	bl	80061dc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	7959      	ldrb	r1, [r3, #5]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	7998      	ldrb	r0, [r3, #6]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	8912      	ldrh	r2, [r2, #8]
 800569c:	9202      	str	r2, [sp, #8]
 800569e:	2202      	movs	r2, #2
 80056a0:	9201      	str	r2, [sp, #4]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4623      	mov	r3, r4
 80056a6:	4602      	mov	r2, r0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f002 fd6f 	bl	800818c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	7919      	ldrb	r1, [r3, #4]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	79d8      	ldrb	r0, [r3, #7]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	8952      	ldrh	r2, [r2, #10]
 80056c6:	9202      	str	r2, [sp, #8]
 80056c8:	2202      	movs	r2, #2
 80056ca:	9201      	str	r2, [sp, #4]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	4623      	mov	r3, r4
 80056d0:	4602      	mov	r2, r0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f002 fd5a 	bl	800818c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f005 fcb2 	bl	800b04a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	795b      	ldrb	r3, [r3, #5]
 80056ea:	2200      	movs	r2, #0
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f005 fcab 	bl	800b04a <USBH_LL_SetToggle>

  return USBH_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}

080056fe <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	795b      	ldrb	r3, [r3, #5]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	795b      	ldrb	r3, [r3, #5]
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f002 fd53 	bl	80081ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	795b      	ldrb	r3, [r3, #5]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f002 fd7e 	bl	800822c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	791b      	ldrb	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	791b      	ldrb	r3, [r3, #4]
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 fd40 	bl	80081ca <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	791b      	ldrb	r3, [r3, #4]
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f002 fd6b 	bl	800822c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4618      	mov	r0, r3
 8005772:	f005 fd33 	bl	800b1dc <free>
    phost->pActiveClass->pData = 0U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800577c:	2200      	movs	r2, #0
 800577e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	7b9b      	ldrb	r3, [r3, #14]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d041      	beq.n	800582c <USBH_MSC_ClassRequest+0xa2>
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	dc4b      	bgt.n	8005844 <USBH_MSC_ClassRequest+0xba>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USBH_MSC_ClassRequest+0x2a>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d147      	bne.n	8005844 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fcf0 	bl	800619e <USBH_MSC_BOT_REQ_GetMaxLUN>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d104      	bne.n	80057d2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d137      	bne.n	8005848 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d804      	bhi.n	80057ea <USBH_MSC_ClassRequest+0x60>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	e000      	b.n	80057ec <USBH_MSC_ClassRequest+0x62>
 80057ea:	2202      	movs	r2, #2
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	73bb      	strb	r3, [r7, #14]
 80057f4:	e014      	b.n	8005820 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	2134      	movs	r1, #52	; 0x34
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	4413      	add	r3, r2
 8005802:	3392      	adds	r3, #146	; 0x92
 8005804:	2202      	movs	r2, #2
 8005806:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005808:	7bbb      	ldrb	r3, [r7, #14]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	2134      	movs	r1, #52	; 0x34
 800580e:	fb01 f303 	mul.w	r3, r1, r3
 8005812:	4413      	add	r3, r2
 8005814:	33c1      	adds	r3, #193	; 0xc1
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800581a:	7bbb      	ldrb	r3, [r7, #14]
 800581c:	3301      	adds	r3, #1
 800581e:	73bb      	strb	r3, [r7, #14]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	7bba      	ldrb	r2, [r7, #14]
 8005826:	429a      	cmp	r2, r3
 8005828:	d3e5      	bcc.n	80057f6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800582a:	e00d      	b.n	8005848 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800582c:	2100      	movs	r1, #0
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 f87b 	bl	800792a <USBH_ClrFeature>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	7bda      	ldrb	r2, [r3, #15]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005842:	e003      	b.n	800584c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005844:	bf00      	nop
 8005846:	e002      	b.n	800584e <USBH_MSC_ClassRequest+0xc4>
      break;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <USBH_MSC_ClassRequest+0xc4>
      break;
 800584c:	bf00      	nop
  }

  return status;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005872:	2301      	movs	r3, #1
 8005874:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	7b1b      	ldrb	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <USBH_MSC_Process+0x2e>
 800587e:	2b01      	cmp	r3, #1
 8005880:	f000 8271 	beq.w	8005d66 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005884:	e272      	b.n	8005d6c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	429a      	cmp	r2, r3
 8005894:	f080 824f 	bcs.w	8005d36 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800589e:	4619      	mov	r1, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	2334      	movs	r3, #52	; 0x34
 80058a4:	fb03 f301 	mul.w	r3, r3, r1
 80058a8:	4413      	add	r3, r2
 80058aa:	3391      	adds	r3, #145	; 0x91
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058b6:	4619      	mov	r1, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	2334      	movs	r3, #52	; 0x34
 80058bc:	fb03 f301 	mul.w	r3, r3, r1
 80058c0:	4413      	add	r3, r2
 80058c2:	3390      	adds	r3, #144	; 0x90
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	f200 8243 	bhi.w	8005d52 <USBH_MSC_Process+0x4fa>
 80058cc:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <USBH_MSC_Process+0x7c>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	08005d53 	.word	0x08005d53
 80058dc:	080059c1 	.word	0x080059c1
 80058e0:	08005b45 	.word	0x08005b45
 80058e4:	0800591f 	.word	0x0800591f
 80058e8:	08005c11 	.word	0x08005c11
 80058ec:	08005d53 	.word	0x08005d53
 80058f0:	08005d53 	.word	0x08005d53
 80058f4:	08005d25 	.word	0x08005d25
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80058fe:	4619      	mov	r1, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	2334      	movs	r3, #52	; 0x34
 8005904:	fb03 f301 	mul.w	r3, r3, r1
 8005908:	4413      	add	r3, r2
 800590a:	3390      	adds	r3, #144	; 0x90
 800590c:	2204      	movs	r2, #4
 800590e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800591c:	e222      	b.n	8005d64 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005924:	b2d9      	uxtb	r1, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800592c:	461a      	mov	r2, r3
 800592e:	2334      	movs	r3, #52	; 0x34
 8005930:	fb03 f302 	mul.w	r3, r3, r2
 8005934:	3398      	adds	r3, #152	; 0x98
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	3307      	adds	r3, #7
 800593c:	461a      	mov	r2, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 ff6a 	bl	8006818 <USBH_MSC_SCSI_Inquiry>
 8005944:	4603      	mov	r3, r0
 8005946:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005954:	4619      	mov	r1, r3
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	2334      	movs	r3, #52	; 0x34
 800595a:	fb03 f301 	mul.w	r3, r3, r1
 800595e:	4413      	add	r3, r2
 8005960:	3390      	adds	r3, #144	; 0x90
 8005962:	2202      	movs	r2, #2
 8005964:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d10c      	bne.n	8005986 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005972:	4619      	mov	r1, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	2334      	movs	r3, #52	; 0x34
 8005978:	fb03 f301 	mul.w	r3, r3, r1
 800597c:	4413      	add	r3, r2
 800597e:	3390      	adds	r3, #144	; 0x90
 8005980:	2205      	movs	r2, #5
 8005982:	701a      	strb	r2, [r3, #0]
            break;
 8005984:	e1e7      	b.n	8005d56 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b04      	cmp	r3, #4
 800598a:	f040 81e4 	bne.w	8005d56 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005994:	4619      	mov	r1, r3
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	2334      	movs	r3, #52	; 0x34
 800599a:	fb03 f301 	mul.w	r3, r3, r1
 800599e:	4413      	add	r3, r2
 80059a0:	3390      	adds	r3, #144	; 0x90
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059ac:	4619      	mov	r1, r3
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	2334      	movs	r3, #52	; 0x34
 80059b2:	fb03 f301 	mul.w	r3, r3, r1
 80059b6:	4413      	add	r3, r2
 80059b8:	3391      	adds	r3, #145	; 0x91
 80059ba:	2202      	movs	r2, #2
 80059bc:	701a      	strb	r2, [r3, #0]
            break;
 80059be:	e1ca      	b.n	8005d56 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fe66 	bl	800669c <USBH_MSC_SCSI_TestUnitReady>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d149      	bne.n	8005a6e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059e0:	4619      	mov	r1, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	2334      	movs	r3, #52	; 0x34
 80059e6:	fb03 f301 	mul.w	r3, r3, r1
 80059ea:	4413      	add	r3, r2
 80059ec:	3392      	adds	r3, #146	; 0x92
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059fa:	4619      	mov	r1, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	2334      	movs	r3, #52	; 0x34
 8005a00:	fb03 f301 	mul.w	r3, r3, r1
 8005a04:	4413      	add	r3, r2
 8005a06:	33c1      	adds	r3, #193	; 0xc1
 8005a08:	2201      	movs	r2, #1
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e00b      	b.n	8005a26 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a14:	4619      	mov	r1, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	2334      	movs	r3, #52	; 0x34
 8005a1a:	fb03 f301 	mul.w	r3, r3, r1
 8005a1e:	4413      	add	r3, r2
 8005a20:	33c1      	adds	r3, #193	; 0xc1
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	2334      	movs	r3, #52	; 0x34
 8005a32:	fb03 f301 	mul.w	r3, r3, r1
 8005a36:	4413      	add	r3, r2
 8005a38:	3390      	adds	r3, #144	; 0x90
 8005a3a:	2203      	movs	r2, #3
 8005a3c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a44:	4619      	mov	r1, r3
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	2334      	movs	r3, #52	; 0x34
 8005a4a:	fb03 f301 	mul.w	r3, r3, r1
 8005a4e:	4413      	add	r3, r2
 8005a50:	3391      	adds	r3, #145	; 0x91
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	2334      	movs	r3, #52	; 0x34
 8005a62:	fb03 f301 	mul.w	r3, r3, r1
 8005a66:	4413      	add	r3, r2
 8005a68:	3392      	adds	r3, #146	; 0x92
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d14a      	bne.n	8005b0a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	2334      	movs	r3, #52	; 0x34
 8005a80:	fb03 f301 	mul.w	r3, r3, r1
 8005a84:	4413      	add	r3, r2
 8005a86:	3392      	adds	r3, #146	; 0x92
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d00c      	beq.n	8005aa8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a94:	4619      	mov	r1, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	2334      	movs	r3, #52	; 0x34
 8005a9a:	fb03 f301 	mul.w	r3, r3, r1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	33c1      	adds	r3, #193	; 0xc1
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e00b      	b.n	8005ac0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aae:	4619      	mov	r1, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	2334      	movs	r3, #52	; 0x34
 8005ab4:	fb03 f301 	mul.w	r3, r3, r1
 8005ab8:	4413      	add	r3, r2
 8005aba:	33c1      	adds	r3, #193	; 0xc1
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	2334      	movs	r3, #52	; 0x34
 8005acc:	fb03 f301 	mul.w	r3, r3, r1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3390      	adds	r3, #144	; 0x90
 8005ad4:	2205      	movs	r2, #5
 8005ad6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ade:	4619      	mov	r1, r3
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	2334      	movs	r3, #52	; 0x34
 8005ae4:	fb03 f301 	mul.w	r3, r3, r1
 8005ae8:	4413      	add	r3, r2
 8005aea:	3391      	adds	r3, #145	; 0x91
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005af6:	4619      	mov	r1, r3
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	2334      	movs	r3, #52	; 0x34
 8005afc:	fb03 f301 	mul.w	r3, r3, r1
 8005b00:	4413      	add	r3, r2
 8005b02:	3392      	adds	r3, #146	; 0x92
 8005b04:	2202      	movs	r2, #2
 8005b06:	701a      	strb	r2, [r3, #0]
            break;
 8005b08:	e127      	b.n	8005d5a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	f040 8124 	bne.w	8005d5a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b18:	4619      	mov	r1, r3
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	2334      	movs	r3, #52	; 0x34
 8005b1e:	fb03 f301 	mul.w	r3, r3, r1
 8005b22:	4413      	add	r3, r2
 8005b24:	3390      	adds	r3, #144	; 0x90
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b30:	4619      	mov	r1, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	2334      	movs	r3, #52	; 0x34
 8005b36:	fb03 f301 	mul.w	r3, r3, r1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3391      	adds	r3, #145	; 0x91
 8005b3e:	2202      	movs	r2, #2
 8005b40:	701a      	strb	r2, [r3, #0]
            break;
 8005b42:	e10a      	b.n	8005d5a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b4a:	b2d9      	uxtb	r1, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b52:	461a      	mov	r2, r3
 8005b54:	2334      	movs	r3, #52	; 0x34
 8005b56:	fb03 f302 	mul.w	r3, r3, r2
 8005b5a:	3390      	adds	r3, #144	; 0x90
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	3304      	adds	r3, #4
 8005b62:	461a      	mov	r2, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fddc 	bl	8006722 <USBH_MSC_SCSI_ReadCapacity>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d120      	bne.n	8005bb6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	2334      	movs	r3, #52	; 0x34
 8005b80:	fb03 f301 	mul.w	r3, r3, r1
 8005b84:	4413      	add	r3, r2
 8005b86:	3390      	adds	r3, #144	; 0x90
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b92:	4619      	mov	r1, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	2334      	movs	r3, #52	; 0x34
 8005b98:	fb03 f301 	mul.w	r3, r3, r1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3391      	adds	r3, #145	; 0x91
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005bb4:	e0d3      	b.n	8005d5e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d10c      	bne.n	8005bd6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	2334      	movs	r3, #52	; 0x34
 8005bc8:	fb03 f301 	mul.w	r3, r3, r1
 8005bcc:	4413      	add	r3, r2
 8005bce:	3390      	adds	r3, #144	; 0x90
 8005bd0:	2205      	movs	r2, #5
 8005bd2:	701a      	strb	r2, [r3, #0]
            break;
 8005bd4:	e0c3      	b.n	8005d5e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	f040 80c0 	bne.w	8005d5e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005be4:	4619      	mov	r1, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	2334      	movs	r3, #52	; 0x34
 8005bea:	fb03 f301 	mul.w	r3, r3, r1
 8005bee:	4413      	add	r3, r2
 8005bf0:	3390      	adds	r3, #144	; 0x90
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	2334      	movs	r3, #52	; 0x34
 8005c02:	fb03 f301 	mul.w	r3, r3, r1
 8005c06:	4413      	add	r3, r2
 8005c08:	3391      	adds	r3, #145	; 0x91
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	701a      	strb	r2, [r3, #0]
            break;
 8005c0e:	e0a6      	b.n	8005d5e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c16:	b2d9      	uxtb	r1, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2334      	movs	r3, #52	; 0x34
 8005c22:	fb03 f302 	mul.w	r3, r3, r2
 8005c26:	3398      	adds	r3, #152	; 0x98
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	461a      	mov	r2, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fe96 	bl	8006962 <USBH_MSC_SCSI_RequestSense>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d145      	bne.n	8005ccc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c46:	4619      	mov	r1, r3
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	2334      	movs	r3, #52	; 0x34
 8005c4c:	fb03 f301 	mul.w	r3, r3, r1
 8005c50:	4413      	add	r3, r2
 8005c52:	339c      	adds	r3, #156	; 0x9c
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d00c      	beq.n	8005c74 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c60:	4619      	mov	r1, r3
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	2334      	movs	r3, #52	; 0x34
 8005c66:	fb03 f301 	mul.w	r3, r3, r1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	339c      	adds	r3, #156	; 0x9c
 8005c6e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d117      	bne.n	8005ca4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d80c      	bhi.n	8005ca4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c90:	4619      	mov	r1, r3
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	2334      	movs	r3, #52	; 0x34
 8005c96:	fb03 f301 	mul.w	r3, r3, r1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3390      	adds	r3, #144	; 0x90
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	701a      	strb	r2, [r3, #0]
                  break;
 8005ca2:	e05f      	b.n	8005d64 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005caa:	4619      	mov	r1, r3
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	2334      	movs	r3, #52	; 0x34
 8005cb0:	fb03 f301 	mul.w	r3, r3, r1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3390      	adds	r3, #144	; 0x90
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d10c      	bne.n	8005cec <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	2334      	movs	r3, #52	; 0x34
 8005cde:	fb03 f301 	mul.w	r3, r3, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3390      	adds	r3, #144	; 0x90
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	701a      	strb	r2, [r3, #0]
            break;
 8005cea:	e03a      	b.n	8005d62 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d137      	bne.n	8005d62 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	2334      	movs	r3, #52	; 0x34
 8005cfe:	fb03 f301 	mul.w	r3, r3, r1
 8005d02:	4413      	add	r3, r2
 8005d04:	3390      	adds	r3, #144	; 0x90
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d10:	4619      	mov	r1, r3
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	2334      	movs	r3, #52	; 0x34
 8005d16:	fb03 f301 	mul.w	r3, r3, r1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3391      	adds	r3, #145	; 0x91
 8005d1e:	2202      	movs	r2, #2
 8005d20:	701a      	strb	r2, [r3, #0]
            break;
 8005d22:	e01e      	b.n	8005d62 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005d34:	e016      	b.n	8005d64 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2201      	movs	r2, #1
 8005d42:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
      break;
 8005d50:	e00c      	b.n	8005d6c <USBH_MSC_Process+0x514>
            break;
 8005d52:	bf00      	nop
 8005d54:	e00a      	b.n	8005d6c <USBH_MSC_Process+0x514>
            break;
 8005d56:	bf00      	nop
 8005d58:	e008      	b.n	8005d6c <USBH_MSC_Process+0x514>
            break;
 8005d5a:	bf00      	nop
 8005d5c:	e006      	b.n	8005d6c <USBH_MSC_Process+0x514>
            break;
 8005d5e:	bf00      	nop
 8005d60:	e004      	b.n	8005d6c <USBH_MSC_Process+0x514>
            break;
 8005d62:	bf00      	nop
      break;
 8005d64:	e002      	b.n	8005d6c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6a:	bf00      	nop
  }
  return error;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop

08005d78 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b088      	sub	sp, #32
 8005d92:	af02      	add	r7, sp, #8
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005da4:	2301      	movs	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	2134      	movs	r1, #52	; 0x34
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3390      	adds	r3, #144	; 0x90
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d03c      	beq.n	8005e3a <USBH_MSC_RdWrProcess+0xac>
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	f300 80a7 	bgt.w	8005f14 <USBH_MSC_RdWrProcess+0x186>
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d06c      	beq.n	8005ea4 <USBH_MSC_RdWrProcess+0x116>
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	f040 80a2 	bne.w	8005f14 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005dd0:	78f9      	ldrb	r1, [r7, #3]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2200      	movs	r2, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fea5 	bl	8006b2a <USBH_MSC_SCSI_Read>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	2134      	movs	r1, #52	; 0x34
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	3390      	adds	r3, #144	; 0x90
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e00:	e08a      	b.n	8005f18 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d109      	bne.n	8005e1c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	2134      	movs	r1, #52	; 0x34
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3390      	adds	r3, #144	; 0x90
 8005e16:	2205      	movs	r2, #5
 8005e18:	701a      	strb	r2, [r3, #0]
      break;
 8005e1a:	e07d      	b.n	8005f18 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d17a      	bne.n	8005f18 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	2134      	movs	r1, #52	; 0x34
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3390      	adds	r3, #144	; 0x90
 8005e30:	2208      	movs	r2, #8
 8005e32:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	e06e      	b.n	8005f18 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005e3a:	78f9      	ldrb	r1, [r7, #3]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2300      	movs	r3, #0
 8005e42:	2200      	movs	r2, #0
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe05 	bl	8006a54 <USBH_MSC_SCSI_Write>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	2134      	movs	r1, #52	; 0x34
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	4413      	add	r3, r2
 8005e60:	3390      	adds	r3, #144	; 0x90
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e6a:	e057      	b.n	8005f1c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d109      	bne.n	8005e86 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	2134      	movs	r1, #52	; 0x34
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3390      	adds	r3, #144	; 0x90
 8005e80:	2205      	movs	r2, #5
 8005e82:	701a      	strb	r2, [r3, #0]
      break;
 8005e84:	e04a      	b.n	8005f1c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d147      	bne.n	8005f1c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	2134      	movs	r1, #52	; 0x34
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3390      	adds	r3, #144	; 0x90
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea2:	e03b      	b.n	8005f1c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	2234      	movs	r2, #52	; 0x34
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	3398      	adds	r3, #152	; 0x98
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fd52 	bl	8006962 <USBH_MSC_SCSI_RequestSense>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d113      	bne.n	8005ef0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	2134      	movs	r1, #52	; 0x34
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3390      	adds	r3, #144	; 0x90
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	2134      	movs	r1, #52	; 0x34
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3391      	adds	r3, #145	; 0x91
 8005ee8:	2202      	movs	r2, #2
 8005eea:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005eec:	2302      	movs	r3, #2
 8005eee:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d014      	beq.n	8005f20 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d111      	bne.n	8005f20 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	2134      	movs	r1, #52	; 0x34
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	3390      	adds	r3, #144	; 0x90
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f12:	e005      	b.n	8005f20 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8005f14:	bf00      	nop
 8005f16:	e004      	b.n	8005f22 <USBH_MSC_RdWrProcess+0x194>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e002      	b.n	8005f22 <USBH_MSC_RdWrProcess+0x194>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <USBH_MSC_RdWrProcess+0x194>
      break;
 8005f20:	bf00      	nop

  }
  return error;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b0b      	cmp	r3, #11
 8005f4a:	d10c      	bne.n	8005f66 <USBH_MSC_UnitIsReady+0x3a>
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	2134      	movs	r1, #52	; 0x34
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3391      	adds	r3, #145	; 0x91
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e001      	b.n	8005f6a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	460b      	mov	r3, r1
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b0b      	cmp	r3, #11
 8005f98:	d10d      	bne.n	8005fb6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	2234      	movs	r2, #52	; 0x34
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	3390      	adds	r3, #144	; 0x90
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	2234      	movs	r2, #52	; 0x34
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f005 f91d 	bl	800b1ec <memcpy>
    return USBH_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00e      	beq.n	8006004 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005fec:	2b0b      	cmp	r3, #11
 8005fee:	d109      	bne.n	8006004 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	2134      	movs	r1, #52	; 0x34
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3390      	adds	r3, #144	; 0x90
 8005ffe:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006004:	2302      	movs	r3, #2
 8006006:	e040      	b.n	800608a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2206      	movs	r2, #6
 800600c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	2134      	movs	r1, #52	; 0x34
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	3390      	adds	r3, #144	; 0x90
 800601c:	2206      	movs	r2, #6
 800601e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006020:	7afb      	ldrb	r3, [r7, #11]
 8006022:	b29a      	uxth	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800602a:	7af9      	ldrb	r1, [r7, #11]
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fd78 	bl	8006b2a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006040:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006042:	e016      	b.n	8006072 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad2      	subs	r2, r2, r3
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f242 7110 	movw	r1, #10000	; 0x2710
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	429a      	cmp	r2, r3
 800605a:	d805      	bhi.n	8006068 <USBH_MSC_Read+0xa8>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2201      	movs	r2, #1
 800606c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800606e:	2302      	movs	r3, #2
 8006070:	e00b      	b.n	800608a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	4619      	mov	r1, r3
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fe89 	bl	8005d8e <USBH_MSC_RdWrProcess>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d0e0      	beq.n	8006044 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2201      	movs	r2, #1
 8006086:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af02      	add	r7, sp, #8
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	460b      	mov	r3, r1
 80060a0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80060be:	2b0b      	cmp	r3, #11
 80060c0:	d109      	bne.n	80060d6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	2134      	movs	r1, #52	; 0x34
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	3390      	adds	r3, #144	; 0x90
 80060d0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e040      	b.n	800615c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2207      	movs	r2, #7
 80060de:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80060e0:	7afb      	ldrb	r3, [r7, #11]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	2134      	movs	r1, #52	; 0x34
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	3390      	adds	r3, #144	; 0x90
 80060ee:	2207      	movs	r2, #7
 80060f0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80060f2:	7afb      	ldrb	r3, [r7, #11]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80060fc:	7af9      	ldrb	r1, [r7, #11]
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fca4 	bl	8006a54 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006112:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006114:	e016      	b.n	8006144 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f242 7110 	movw	r1, #10000	; 0x2710
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	429a      	cmp	r2, r3
 800612c:	d805      	bhi.n	800613a <USBH_MSC_Write+0xa8>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2201      	movs	r2, #1
 800613e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006140:	2302      	movs	r3, #2
 8006142:	e00b      	b.n	800615c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fe20 	bl	8005d8e <USBH_MSC_RdWrProcess>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d0e0      	beq.n	8006116 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2201      	movs	r2, #1
 8006158:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2221      	movs	r2, #33	; 0x21
 8006170:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fdab 	bl	8007cea <USBH_CtlReq>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22a1      	movs	r2, #161	; 0xa1
 80061ac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	22fe      	movs	r2, #254	; 0xfe
 80061b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80061c6:	2201      	movs	r2, #1
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fd8d 	bl	8007cea <USBH_CtlReq>
 80061d0:	4603      	mov	r3, r0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a09      	ldr	r2, [pc, #36]	; (8006218 <USBH_MSC_BOT_Init+0x3c>)
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <USBH_MSC_BOT_Init+0x40>)
 80061f8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	43425355 	.word	0x43425355
 800621c:	20304050 	.word	0x20304050

08006220 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af02      	add	r7, sp, #8
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006230:	2301      	movs	r3, #1
 8006232:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006234:	2301      	movs	r3, #1
 8006236:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006238:	2300      	movs	r3, #0
 800623a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006250:	3b01      	subs	r3, #1
 8006252:	2b0a      	cmp	r3, #10
 8006254:	f200 819e 	bhi.w	8006594 <USBH_MSC_BOT_Process+0x374>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <USBH_MSC_BOT_Process+0x40>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	0800628d 	.word	0x0800628d
 8006264:	080062b5 	.word	0x080062b5
 8006268:	0800631f 	.word	0x0800631f
 800626c:	0800633d 	.word	0x0800633d
 8006270:	080063c1 	.word	0x080063c1
 8006274:	080063e3 	.word	0x080063e3
 8006278:	0800647b 	.word	0x0800647b
 800627c:	08006497 	.word	0x08006497
 8006280:	080064e9 	.word	0x080064e9
 8006284:	08006519 	.word	0x08006519
 8006288:	0800657b 	.word	0x0800657b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	795b      	ldrb	r3, [r3, #5]
 80062a6:	2201      	movs	r2, #1
 80062a8:	9200      	str	r2, [sp, #0]
 80062aa:	221f      	movs	r2, #31
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 ff2a 	bl	8008106 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80062b2:	e17e      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	795b      	ldrb	r3, [r3, #5]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f004 fea4 	bl	800b008 <USBH_LL_GetURBState>
 80062c0:	4603      	mov	r3, r0
 80062c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80062c4:	7d3b      	ldrb	r3, [r7, #20]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d118      	bne.n	80062fc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00f      	beq.n	80062f2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da04      	bge.n	80062e8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2203      	movs	r2, #3
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80062e6:	e157      	b.n	8006598 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2205      	movs	r2, #5
 80062ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80062f0:	e152      	b.n	8006598 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2207      	movs	r2, #7
 80062f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80062fa:	e14d      	b.n	8006598 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80062fc:	7d3b      	ldrb	r3, [r7, #20]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d104      	bne.n	800630c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800630a:	e145      	b.n	8006598 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800630c:	7d3b      	ldrb	r3, [r7, #20]
 800630e:	2b05      	cmp	r3, #5
 8006310:	f040 8142 	bne.w	8006598 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	220a      	movs	r2, #10
 8006318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800631c:	e13c      	b.n	8006598 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	895a      	ldrh	r2, [r3, #10]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	791b      	ldrb	r3, [r3, #4]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 ff0f 	bl	8008150 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2204      	movs	r2, #4
 8006336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800633a:	e13a      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f004 fe60 	bl	800b008 <USBH_LL_GetURBState>
 8006348:	4603      	mov	r3, r0
 800634a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800634c:	7d3b      	ldrb	r3, [r7, #20]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d12d      	bne.n	80063ae <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	8952      	ldrh	r2, [r2, #10]
 800635a:	4293      	cmp	r3, r2
 800635c:	d910      	bls.n	8006380 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	8952      	ldrh	r2, [r2, #10]
 8006368:	441a      	add	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	8952      	ldrh	r2, [r2, #10]
 8006378:	1a9a      	subs	r2, r3, r2
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	65da      	str	r2, [r3, #92]	; 0x5c
 800637e:	e002      	b.n	8006386 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2200      	movs	r2, #0
 8006384:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	895a      	ldrh	r2, [r3, #10]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	791b      	ldrb	r3, [r3, #4]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fed7 	bl	8008150 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80063a2:	e0fb      	b.n	800659c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2207      	movs	r2, #7
 80063a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063ac:	e0f6      	b.n	800659c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80063ae:	7d3b      	ldrb	r3, [r7, #20]
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	f040 80f3 	bne.w	800659c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2209      	movs	r2, #9
 80063ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063be:	e0ed      	b.n	800659c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	891a      	ldrh	r2, [r3, #8]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	795b      	ldrb	r3, [r3, #5]
 80063ce:	2001      	movs	r0, #1
 80063d0:	9000      	str	r0, [sp, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fe97 	bl	8008106 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2206      	movs	r2, #6
 80063dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80063e0:	e0e7      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	795b      	ldrb	r3, [r3, #5]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f004 fe0d 	bl	800b008 <USBH_LL_GetURBState>
 80063ee:	4603      	mov	r3, r0
 80063f0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80063f2:	7d3b      	ldrb	r3, [r7, #20]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d12f      	bne.n	8006458 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	8912      	ldrh	r2, [r2, #8]
 8006400:	4293      	cmp	r3, r2
 8006402:	d910      	bls.n	8006426 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	8912      	ldrh	r2, [r2, #8]
 800640e:	441a      	add	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	8912      	ldrh	r2, [r2, #8]
 800641e:	1a9a      	subs	r2, r3, r2
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c
 8006424:	e002      	b.n	800642c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2200      	movs	r2, #0
 800642a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	891a      	ldrh	r2, [r3, #8]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	795b      	ldrb	r3, [r3, #5]
 8006442:	2001      	movs	r0, #1
 8006444:	9000      	str	r0, [sp, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fe5d 	bl	8008106 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800644c:	e0a8      	b.n	80065a0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2207      	movs	r2, #7
 8006452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006456:	e0a3      	b.n	80065a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006458:	7d3b      	ldrb	r3, [r7, #20]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d104      	bne.n	8006468 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2205      	movs	r2, #5
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006466:	e09b      	b.n	80065a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006468:	7d3b      	ldrb	r3, [r7, #20]
 800646a:	2b05      	cmp	r3, #5
 800646c:	f040 8098 	bne.w	80065a0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	220a      	movs	r2, #10
 8006474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006478:	e092      	b.n	80065a0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	220d      	movs	r2, #13
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fe62 	bl	8008150 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2208      	movs	r2, #8
 8006490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006494:	e08d      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f004 fdb3 	bl	800b008 <USBH_LL_GetURBState>
 80064a2:	4603      	mov	r3, r0
 80064a4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80064a6:	7d3b      	ldrb	r3, [r7, #20]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d115      	bne.n	80064d8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8a9 	bl	8006614 <USBH_MSC_DecodeCSW>
 80064c2:	4603      	mov	r3, r0
 80064c4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80064c6:	7d7b      	ldrb	r3, [r7, #21]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80064d0:	e068      	b.n	80065a4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80064d2:	2302      	movs	r3, #2
 80064d4:	75fb      	strb	r3, [r7, #23]
      break;
 80064d6:	e065      	b.n	80065a4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80064d8:	7d3b      	ldrb	r3, [r7, #20]
 80064da:	2b05      	cmp	r3, #5
 80064dc:	d162      	bne.n	80065a4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2209      	movs	r2, #9
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064e6:	e05d      	b.n	80065a4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	2200      	movs	r2, #0
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f864 	bl	80065bc <USBH_MSC_BOT_Abort>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80064f8:	7dbb      	ldrb	r3, [r7, #22]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2207      	movs	r2, #7
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006506:	e04f      	b.n	80065a8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006508:	7dbb      	ldrb	r3, [r7, #22]
 800650a:	2b04      	cmp	r3, #4
 800650c:	d14c      	bne.n	80065a8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	220b      	movs	r2, #11
 8006512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006516:	e047      	b.n	80065a8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2201      	movs	r2, #1
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f84c 	bl	80065bc <USBH_MSC_BOT_Abort>
 8006524:	4603      	mov	r3, r0
 8006526:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006528:	7dbb      	ldrb	r3, [r7, #22]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11d      	bne.n	800656a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	795b      	ldrb	r3, [r3, #5]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f004 fdb8 	bl	800b0aa <USBH_LL_GetToggle>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	7959      	ldrb	r1, [r3, #5]
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	f1c3 0301 	rsb	r3, r3, #1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f004 fd7c 	bl	800b04a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	791b      	ldrb	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f004 fd75 	bl	800b04a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2209      	movs	r2, #9
 8006564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006568:	e020      	b.n	80065ac <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800656a:	7dbb      	ldrb	r3, [r7, #22]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d11d      	bne.n	80065ac <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	220b      	movs	r2, #11
 8006574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006578:	e018      	b.n	80065ac <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7ff fdf2 	bl	8006164 <USBH_MSC_BOT_REQ_Reset>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d112      	bne.n	80065b0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006592:	e00d      	b.n	80065b0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006594:	bf00      	nop
 8006596:	e00c      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006598:	bf00      	nop
 800659a:	e00a      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800659c:	bf00      	nop
 800659e:	e008      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80065a0:	bf00      	nop
 80065a2:	e006      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80065a4:	bf00      	nop
 80065a6:	e004      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80065a8:	bf00      	nop
 80065aa:	e002      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <USBH_MSC_BOT_Process+0x392>
      break;
 80065b0:	bf00      	nop
  }
  return status;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
 80065c8:	4613      	mov	r3, r2
 80065ca:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80065da:	78bb      	ldrb	r3, [r7, #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <USBH_MSC_BOT_Abort+0x2a>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d009      	beq.n	80065f8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80065e4:	e011      	b.n	800660a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	79db      	ldrb	r3, [r3, #7]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f99c 	bl	800792a <USBH_ClrFeature>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
      break;
 80065f6:	e008      	b.n	800660a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	799b      	ldrb	r3, [r3, #6]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f993 	bl	800792a <USBH_ClrFeature>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
      break;
 8006608:	bf00      	nop
  }
  return status;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f004 fc57 	bl	800aee4 <USBH_LL_GetLastXferSize>
 8006636:	4603      	mov	r3, r0
 8006638:	2b0d      	cmp	r3, #13
 800663a:	d002      	beq.n	8006642 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800663c:	2302      	movs	r3, #2
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e024      	b.n	800668c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006646:	4a14      	ldr	r2, [pc, #80]	; (8006698 <USBH_MSC_DecodeCSW+0x84>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d11d      	bne.n	8006688 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006654:	429a      	cmp	r2, r3
 8006656:	d119      	bne.n	800668c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	e011      	b.n	800668c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006672:	2301      	movs	r3, #1
 8006674:	73fb      	strb	r3, [r7, #15]
 8006676:	e009      	b.n	800668c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800667e:	2b02      	cmp	r3, #2
 8006680:	d104      	bne.n	800668c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006682:	2302      	movs	r3, #2
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	e001      	b.n	800668c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006688:	2302      	movs	r3, #2
 800668a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	53425355 	.word	0x53425355

0800669c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80066a8:	2302      	movs	r3, #2
 80066aa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d002      	beq.n	80066c6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d021      	beq.n	8006708 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80066c4:	e028      	b.n	8006718 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	220a      	movs	r2, #10
 80066d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	3363      	adds	r3, #99	; 0x63
 80066e0:	2210      	movs	r2, #16
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f004 fd8f 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      break;
 8006706:	e007      	b.n	8006718 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fd87 	bl	8006220 <USBH_MSC_BOT_Process>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
      break;
 8006716:	bf00      	nop
  }

  return error;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	460b      	mov	r3, r1
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006744:	2b01      	cmp	r3, #1
 8006746:	d002      	beq.n	800674e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006748:	2b02      	cmp	r3, #2
 800674a:	d027      	beq.n	800679c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800674c:	e05f      	b.n	800680e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2208      	movs	r2, #8
 8006752:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	220a      	movs	r2, #10
 8006760:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3363      	adds	r3, #99	; 0x63
 8006768:	2210      	movs	r2, #16
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f004 fd4b 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2225      	movs	r2, #37	; 0x25
 8006776:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2202      	movs	r2, #2
 8006786:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f103 0210 	add.w	r2, r3, #16
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
      break;
 800679a:	e038      	b.n	800680e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	4619      	mov	r1, r3
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff fd3d 	bl	8006220 <USBH_MSC_BOT_Process>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d12d      	bne.n	800680c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b6:	3303      	adds	r3, #3
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c2:	3302      	adds	r3, #2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	3301      	adds	r3, #1
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80067d6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ee:	3307      	adds	r3, #7
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fa:	3306      	adds	r3, #6
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	b29b      	uxth	r3, r3
 8006804:	4313      	orrs	r3, r2
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	809a      	strh	r2, [r3, #4]
      break;
 800680c:	bf00      	nop
  }

  return error;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	460b      	mov	r3, r1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800683a:	2b01      	cmp	r3, #1
 800683c:	d002      	beq.n	8006844 <USBH_MSC_SCSI_Inquiry+0x2c>
 800683e:	2b02      	cmp	r3, #2
 8006840:	d03d      	beq.n	80068be <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006842:	e089      	b.n	8006958 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	220a      	movs	r2, #10
 8006856:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3363      	adds	r3, #99	; 0x63
 800685e:	220a      	movs	r2, #10
 8006860:	2100      	movs	r1, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f004 fcd0 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2212      	movs	r2, #18
 800686c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	015b      	lsls	r3, r3, #5
 8006874:	b2da      	uxtb	r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2224      	movs	r2, #36	; 0x24
 8006890:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f103 0210 	add.w	r2, r3, #16
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	e04c      	b.n	8006958 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80068be:	7afb      	ldrb	r3, [r7, #11]
 80068c0:	4619      	mov	r1, r3
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff fcac 	bl	8006220 <USBH_MSC_BOT_Process>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d141      	bne.n	8006956 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80068d2:	2222      	movs	r2, #34	; 0x22
 80068d4:	2100      	movs	r1, #0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f004 fc96 	bl	800b208 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006904:	3301      	adds	r3, #1
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b25b      	sxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	da03      	bge.n	8006916 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	709a      	strb	r2, [r3, #2]
 8006914:	e002      	b.n	800691c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1cd8      	adds	r0, r3, #3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006926:	3308      	adds	r3, #8
 8006928:	2208      	movs	r2, #8
 800692a:	4619      	mov	r1, r3
 800692c:	f004 fc5e 	bl	800b1ec <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f103 000c 	add.w	r0, r3, #12
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800693c:	3310      	adds	r3, #16
 800693e:	2210      	movs	r2, #16
 8006940:	4619      	mov	r1, r3
 8006942:	f004 fc53 	bl	800b1ec <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	331d      	adds	r3, #29
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006950:	3220      	adds	r2, #32
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	601a      	str	r2, [r3, #0]
      break;
 8006956:	bf00      	nop
  }

  return error;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	460b      	mov	r3, r1
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006970:	2302      	movs	r3, #2
 8006972:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006984:	2b01      	cmp	r3, #1
 8006986:	d002      	beq.n	800698e <USBH_MSC_SCSI_RequestSense+0x2c>
 8006988:	2b02      	cmp	r3, #2
 800698a:	d03d      	beq.n	8006a08 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800698c:	e05d      	b.n	8006a4a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	220e      	movs	r2, #14
 8006992:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2280      	movs	r2, #128	; 0x80
 8006998:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	220a      	movs	r2, #10
 80069a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3363      	adds	r3, #99	; 0x63
 80069a8:	2210      	movs	r2, #16
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f004 fc2b 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2203      	movs	r2, #3
 80069b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80069ba:	7afb      	ldrb	r3, [r7, #11]
 80069bc:	015b      	lsls	r3, r3, #5
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	220e      	movs	r2, #14
 80069da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f103 0210 	add.w	r2, r3, #16
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
      break;
 8006a06:	e020      	b.n	8006a4a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff fc07 	bl	8006220 <USBH_MSC_BOT_Process>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a22:	3302      	adds	r3, #2
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a36:	7b1a      	ldrb	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a42:	7b5a      	ldrb	r2, [r3, #13]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	709a      	strb	r2, [r3, #2]
      break;
 8006a48:	bf00      	nop
  }

  return error;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	460b      	mov	r3, r1
 8006a62:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006a64:	2302      	movs	r3, #2
 8006a66:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d002      	beq.n	8006a82 <USBH_MSC_SCSI_Write+0x2e>
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d047      	beq.n	8006b10 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006a80:	e04e      	b.n	8006b20 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	fb03 f202 	mul.w	r2, r3, r2
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3363      	adds	r3, #99	; 0x63
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 fbab 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	222a      	movs	r2, #42	; 0x2a
 8006ab6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006aba:	79fa      	ldrb	r2, [r7, #7]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006ac2:	79ba      	ldrb	r2, [r7, #6]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006aca:	797a      	ldrb	r2, [r7, #5]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006adc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006ae6:	f107 0320 	add.w	r3, r7, #32
 8006aea:	781a      	ldrb	r2, [r3, #0]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b0e:	e007      	b.n	8006b20 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff fb83 	bl	8006220 <USBH_MSC_BOT_Process>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1e:	bf00      	nop
  }

  return error;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
 8006b36:	460b      	mov	r3, r1
 8006b38:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d002      	beq.n	8006b58 <USBH_MSC_SCSI_Read+0x2e>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d047      	beq.n	8006be6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006b56:	e04e      	b.n	8006bf6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	fb03 f202 	mul.w	r2, r3, r2
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	220a      	movs	r2, #10
 8006b76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3363      	adds	r3, #99	; 0x63
 8006b7e:	2210      	movs	r2, #16
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f004 fb40 	bl	800b208 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2228      	movs	r2, #40	; 0x28
 8006b8c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006b90:	79fa      	ldrb	r2, [r7, #7]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006b98:	79ba      	ldrb	r2, [r7, #6]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006ba0:	797a      	ldrb	r2, [r7, #5]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006ba8:	1d3b      	adds	r3, r7, #4
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006bb2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006bbc:	f107 0320 	add.w	r3, r7, #32
 8006bc0:	781a      	ldrb	r2, [r3, #0]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e007      	b.n	8006bf6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	4619      	mov	r1, r3
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fb18 	bl	8006220 <USBH_MSC_BOT_Process>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf4:	bf00      	nop
  }

  return error;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c14:	2302      	movs	r3, #2
 8006c16:	e029      	b.n	8006c6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	79fa      	ldrb	r2, [r7, #7]
 8006c1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f81f 	bl	8006c74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f004 f889 	bl	800ad7c <USBH_LL_Init>

  return USBH_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e009      	b.n	8006c9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	33e0      	adds	r3, #224	; 0xe0
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b0e      	cmp	r3, #14
 8006c9e:	d9f2      	bls.n	8006c86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e009      	b.n	8006cba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d3f1      	bcc.n	8006ca6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2240      	movs	r2, #64	; 0x40
 8006ce6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d016      	beq.n	8006d5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10e      	bne.n	8006d58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	33de      	adds	r3, #222	; 0xde
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
 8006d56:	e004      	b.n	8006d62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e001      	b.n	8006d62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d204      	bcs.n	8006d96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d94:	e001      	b.n	8006d9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d96:	2302      	movs	r3, #2
 8006d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	70fb      	strb	r3, [r7, #3]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70bb      	strb	r3, [r7, #2]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dd0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dd2:	e025      	b.n	8006e20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	221a      	movs	r2, #26
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	3308      	adds	r3, #8
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	3302      	adds	r3, #2
 8006de4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	795b      	ldrb	r3, [r3, #5]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d002      	beq.n	8006df6 <USBH_FindInterface+0x4e>
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	2bff      	cmp	r3, #255	; 0xff
 8006df4:	d111      	bne.n	8006e1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dfa:	78ba      	ldrb	r2, [r7, #2]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d002      	beq.n	8006e06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e00:	78bb      	ldrb	r3, [r7, #2]
 8006e02:	2bff      	cmp	r3, #255	; 0xff
 8006e04:	d109      	bne.n	8006e1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e0a:	787a      	ldrb	r2, [r7, #1]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d002      	beq.n	8006e16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e10:	787b      	ldrb	r3, [r7, #1]
 8006e12:	2bff      	cmp	r3, #255	; 0xff
 8006e14:	d101      	bne.n	8006e1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	e006      	b.n	8006e28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d9d6      	bls.n	8006dd4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e26:	23ff      	movs	r3, #255	; 0xff
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f003 ffd9 	bl	800adf4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f004 f8f2 	bl	800b02e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af04      	add	r7, sp, #16
 8006e5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d102      	bne.n	8006e76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2203      	movs	r2, #3
 8006e74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b0b      	cmp	r3, #11
 8006e7e:	f200 81b3 	bhi.w	80071e8 <USBH_Process+0x394>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <USBH_Process+0x34>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006eeb 	.word	0x08006eeb
 8006e90:	08006f53 	.word	0x08006f53
 8006e94:	08007183 	.word	0x08007183
 8006e98:	080071e9 	.word	0x080071e9
 8006e9c:	08006ff7 	.word	0x08006ff7
 8006ea0:	08007129 	.word	0x08007129
 8006ea4:	0800702d 	.word	0x0800702d
 8006ea8:	0800704d 	.word	0x0800704d
 8006eac:	0800706d 	.word	0x0800706d
 8006eb0:	0800709b 	.word	0x0800709b
 8006eb4:	0800716b 	.word	0x0800716b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8193 	beq.w	80071ec <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ecc:	20c8      	movs	r0, #200	; 0xc8
 8006ece:	f004 f91c 	bl	800b10a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f003 ffeb 	bl	800aeae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ee8:	e180      	b.n	80071ec <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d107      	bne.n	8006f04 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f02:	e182      	b.n	800720a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0e:	d914      	bls.n	8006f3a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d903      	bls.n	8006f32 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	220d      	movs	r2, #13
 8006f2e:	701a      	strb	r2, [r3, #0]
      break;
 8006f30:	e16b      	b.n	800720a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
      break;
 8006f38:	e167      	b.n	800720a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f40:	f103 020a 	add.w	r2, r3, #10
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f4a:	200a      	movs	r0, #10
 8006f4c:	f004 f8dd 	bl	800b10a <USBH_Delay>
      break;
 8006f50:	e15b      	b.n	800720a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f62:	2104      	movs	r1, #4
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f68:	2064      	movs	r0, #100	; 0x64
 8006f6a:	f004 f8ce 	bl	800b10a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 ff76 	bl	800ae60 <USBH_LL_GetSpeed>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2205      	movs	r2, #5
 8006f82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f84:	2100      	movs	r1, #0
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f92f 	bl	80081ea <USBH_AllocPipe>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	461a      	mov	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f94:	2180      	movs	r1, #128	; 0x80
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f927 	bl	80081ea <USBH_AllocPipe>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7919      	ldrb	r1, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	9202      	str	r2, [sp, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	9201      	str	r2, [sp, #4]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 f8e0 	bl	800818c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7959      	ldrb	r1, [r3, #5]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	9202      	str	r2, [sp, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	9201      	str	r2, [sp, #4]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4603      	mov	r3, r0
 8006fec:	2200      	movs	r2, #0
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f8cc 	bl	800818c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ff4:	e109      	b.n	800720a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f90c 	bl	8007214 <USBH_HandleEnum>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 80f3 	bne.w	80071f0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007018:	2b01      	cmp	r3, #1
 800701a:	d103      	bne.n	8007024 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2208      	movs	r2, #8
 8007020:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007022:	e0e5      	b.n	80071f0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2207      	movs	r2, #7
 8007028:	701a      	strb	r2, [r3, #0]
      break;
 800702a:	e0e1      	b.n	80071f0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80de 	beq.w	80071f4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2208      	movs	r2, #8
 8007048:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800704a:	e0d3      	b.n	80071f4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007052:	b29b      	uxth	r3, r3
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fc20 	bl	800789c <USBH_SetCfg>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 80ca 	bne.w	80071f8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2209      	movs	r2, #9
 8007068:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800706a:	e0c5      	b.n	80071f8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800707a:	2101      	movs	r1, #1
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc30 	bl	80078e2 <USBH_SetFeature>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 80b9 	bne.w	80071fc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	220a      	movs	r2, #10
 800708e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007090:	e0b4      	b.n	80071fc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	220a      	movs	r2, #10
 8007096:	701a      	strb	r2, [r3, #0]
      break;
 8007098:	e0b0      	b.n	80071fc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 80ad 	beq.w	8007200 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e016      	b.n	80070e2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	32de      	adds	r2, #222	; 0xde
 80070ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070be:	791a      	ldrb	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d108      	bne.n	80070dc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	32de      	adds	r2, #222	; 0xde
 80070d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80070da:	e005      	b.n	80070e8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	3301      	adds	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0e5      	beq.n	80070b4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d016      	beq.n	8007120 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2206      	movs	r2, #6
 8007108:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007110:	2103      	movs	r1, #3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007116:	e073      	b.n	8007200 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	220d      	movs	r2, #13
 800711c:	701a      	strb	r2, [r3, #0]
      break;
 800711e:	e06f      	b.n	8007200 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	220d      	movs	r2, #13
 8007124:	701a      	strb	r2, [r3, #0]
      break;
 8007126:	e06b      	b.n	8007200 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d017      	beq.n	8007162 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220b      	movs	r2, #11
 800714e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007150:	e058      	b.n	8007204 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d154      	bne.n	8007204 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220d      	movs	r2, #13
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e050      	b.n	8007204 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220d      	movs	r2, #13
 8007166:	701a      	strb	r2, [r3, #0]
      break;
 8007168:	e04c      	b.n	8007204 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d049      	beq.n	8007208 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
      }
      break;
 8007180:	e042      	b.n	8007208 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fd72 	bl	8006c74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071be:	2105      	movs	r1, #5
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d107      	bne.n	80071e0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fe2b 	bl	8006e34 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071de:	e014      	b.n	800720a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f003 fe07 	bl	800adf4 <USBH_LL_Start>
      break;
 80071e6:	e010      	b.n	800720a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80071e8:	bf00      	nop
 80071ea:	e00e      	b.n	800720a <USBH_Process+0x3b6>
      break;
 80071ec:	bf00      	nop
 80071ee:	e00c      	b.n	800720a <USBH_Process+0x3b6>
      break;
 80071f0:	bf00      	nop
 80071f2:	e00a      	b.n	800720a <USBH_Process+0x3b6>
    break;
 80071f4:	bf00      	nop
 80071f6:	e008      	b.n	800720a <USBH_Process+0x3b6>
      break;
 80071f8:	bf00      	nop
 80071fa:	e006      	b.n	800720a <USBH_Process+0x3b6>
      break;
 80071fc:	bf00      	nop
 80071fe:	e004      	b.n	800720a <USBH_Process+0x3b6>
      break;
 8007200:	bf00      	nop
 8007202:	e002      	b.n	800720a <USBH_Process+0x3b6>
      break;
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <USBH_Process+0x3b6>
      break;
 8007208:	bf00      	nop
  }
  return USBH_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af04      	add	r7, sp, #16
 800721a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007220:	2301      	movs	r3, #1
 8007222:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	2b07      	cmp	r3, #7
 800722a:	f200 81c1 	bhi.w	80075b0 <USBH_HandleEnum+0x39c>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBH_HandleEnum+0x20>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	08007255 	.word	0x08007255
 8007238:	08007313 	.word	0x08007313
 800723c:	0800737d 	.word	0x0800737d
 8007240:	0800740b 	.word	0x0800740b
 8007244:	08007475 	.word	0x08007475
 8007248:	080074e5 	.word	0x080074e5
 800724c:	0800752b 	.word	0x0800752b
 8007250:	08007571 	.word	0x08007571
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007254:	2108      	movs	r1, #8
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa50 	bl	80076fc <USBH_Get_DevDesc>
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d130      	bne.n	80072c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	7919      	ldrb	r1, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800728a:	b292      	uxth	r2, r2
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4603      	mov	r3, r0
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 ff77 	bl	800818c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7959      	ldrb	r1, [r3, #5]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072b2:	b292      	uxth	r2, r2
 80072b4:	9202      	str	r2, [sp, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	9201      	str	r2, [sp, #4]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4603      	mov	r3, r0
 80072be:	2200      	movs	r2, #0
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 ff63 	bl	800818c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072c6:	e175      	b.n	80075b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	f040 8172 	bne.w	80075b4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072d6:	3301      	adds	r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d903      	bls.n	80072f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	220d      	movs	r2, #13
 80072ee:	701a      	strb	r2, [r3, #0]
      break;
 80072f0:	e160      	b.n	80075b4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	795b      	ldrb	r3, [r3, #5]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ff97 	bl	800822c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	791b      	ldrb	r3, [r3, #4]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 ff91 	bl	800822c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
      break;
 8007310:	e150      	b.n	80075b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007312:	2112      	movs	r1, #18
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9f1 	bl	80076fc <USBH_Get_DevDesc>
 800731a:	4603      	mov	r3, r0
 800731c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d103      	bne.n	800732c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800732a:	e145      	b.n	80075b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b03      	cmp	r3, #3
 8007330:	f040 8142 	bne.w	80075b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733a:	3301      	adds	r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800734a:	2b03      	cmp	r3, #3
 800734c:	d903      	bls.n	8007356 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	220d      	movs	r2, #13
 8007352:	701a      	strb	r2, [r3, #0]
      break;
 8007354:	e130      	b.n	80075b8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	795b      	ldrb	r3, [r3, #5]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ff65 	bl	800822c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	791b      	ldrb	r3, [r3, #4]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 ff5f 	bl	800822c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
      break;
 800737a:	e11d      	b.n	80075b8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800737c:	2101      	movs	r1, #1
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa68 	bl	8007854 <USBH_SetAddress>
 8007384:	4603      	mov	r3, r0
 8007386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d132      	bne.n	80073f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800738e:	2002      	movs	r0, #2
 8007390:	f003 febb 	bl	800b10a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2203      	movs	r2, #3
 80073a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7919      	ldrb	r1, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073b6:	b292      	uxth	r2, r2
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	9201      	str	r2, [sp, #4]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4603      	mov	r3, r0
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fee1 	bl	800818c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7959      	ldrb	r1, [r3, #5]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073de:	b292      	uxth	r2, r2
 80073e0:	9202      	str	r2, [sp, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	9201      	str	r2, [sp, #4]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4603      	mov	r3, r0
 80073ea:	2200      	movs	r2, #0
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fecd 	bl	800818c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073f2:	e0e3      	b.n	80075bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f040 80e0 	bne.w	80075bc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	220d      	movs	r2, #13
 8007400:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	705a      	strb	r2, [r3, #1]
      break;
 8007408:	e0d8      	b.n	80075bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800740a:	2109      	movs	r1, #9
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f99d 	bl	800774c <USBH_Get_CfgDesc>
 8007412:	4603      	mov	r3, r0
 8007414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007422:	e0cd      	b.n	80075c0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b03      	cmp	r3, #3
 8007428:	f040 80ca 	bne.w	80075c0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007432:	3301      	adds	r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007442:	2b03      	cmp	r3, #3
 8007444:	d903      	bls.n	800744e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220d      	movs	r2, #13
 800744a:	701a      	strb	r2, [r3, #0]
      break;
 800744c:	e0b8      	b.n	80075c0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fee9 	bl	800822c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	791b      	ldrb	r3, [r3, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fee3 	bl	800822c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e0a5      	b.n	80075c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f965 	bl	800774c <USBH_Get_CfgDesc>
 8007482:	4603      	mov	r3, r0
 8007484:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2205      	movs	r2, #5
 8007490:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007492:	e097      	b.n	80075c4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b03      	cmp	r3, #3
 8007498:	f040 8094 	bne.w	80075c4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074a2:	3301      	adds	r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d903      	bls.n	80074be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	220d      	movs	r2, #13
 80074ba:	701a      	strb	r2, [r3, #0]
      break;
 80074bc:	e082      	b.n	80075c4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	795b      	ldrb	r3, [r3, #5]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 feb1 	bl	800822c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 feab 	bl	800822c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	e06f      	b.n	80075c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074fa:	23ff      	movs	r3, #255	; 0xff
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f949 	bl	8007794 <USBH_Get_StringDesc>
 8007502:	4603      	mov	r3, r0
 8007504:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2206      	movs	r2, #6
 8007510:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007512:	e059      	b.n	80075c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d156      	bne.n	80075c8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2206      	movs	r2, #6
 800751e:	705a      	strb	r2, [r3, #1]
      break;
 8007520:	e052      	b.n	80075c8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2206      	movs	r2, #6
 8007526:	705a      	strb	r2, [r3, #1]
      break;
 8007528:	e04e      	b.n	80075c8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f926 	bl	8007794 <USBH_Get_StringDesc>
 8007548:	4603      	mov	r3, r0
 800754a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2207      	movs	r2, #7
 8007556:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007558:	e038      	b.n	80075cc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d135      	bne.n	80075cc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2207      	movs	r2, #7
 8007564:	705a      	strb	r2, [r3, #1]
      break;
 8007566:	e031      	b.n	80075cc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2207      	movs	r2, #7
 800756c:	705a      	strb	r2, [r3, #1]
      break;
 800756e:	e02d      	b.n	80075cc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007576:	2b00      	cmp	r3, #0
 8007578:	d017      	beq.n	80075aa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007586:	23ff      	movs	r3, #255	; 0xff
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f903 	bl	8007794 <USBH_Get_StringDesc>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800759c:	e018      	b.n	80075d0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d115      	bne.n	80075d0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
      break;
 80075a8:	e012      	b.n	80075d0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e00f      	b.n	80075d0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075b0:	bf00      	nop
 80075b2:	e00e      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075b4:	bf00      	nop
 80075b6:	e00c      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075b8:	bf00      	nop
 80075ba:	e00a      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075bc:	bf00      	nop
 80075be:	e008      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075c0:	bf00      	nop
 80075c2:	e006      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075c4:	bf00      	nop
 80075c6:	e004      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <USBH_HandleEnum+0x3be>
      break;
 80075d0:	bf00      	nop
  }
  return Status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f804 	bl	800761e <USBH_HandleSof>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b0b      	cmp	r3, #11
 800762e:	d10a      	bne.n	8007646 <USBH_HandleSof+0x28>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
  }
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800765e:	bf00      	nop
}
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800767a:	bf00      	nop
}
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f003 fba8 	bl	800ae2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fda3 	bl	800822c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fd9d 	bl	800822c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af02      	add	r7, sp, #8
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	b29b      	uxth	r3, r3
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f864 	bl	80077ea <USBH_GetDescriptor>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	b292      	uxth	r2, r2
 800773c:	4619      	mov	r1, r3
 800773e:	f000 f918 	bl	8007972 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af02      	add	r7, sp, #8
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	331c      	adds	r3, #28
 800775c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800775e:	887b      	ldrh	r3, [r7, #2]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007768:	2100      	movs	r1, #0
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f83d 	bl	80077ea <USBH_GetDescriptor>
 8007770:	4603      	mov	r3, r0
 8007772:	72fb      	strb	r3, [r7, #11]
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d107      	bne.n	800778a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f964 	bl	8007a52 <USBH_ParseCfgDesc>
  }

  return status;
 800778a:	7afb      	ldrb	r3, [r7, #11]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	607a      	str	r2, [r7, #4]
 800779e:	461a      	mov	r2, r3
 80077a0:	460b      	mov	r3, r1
 80077a2:	72fb      	strb	r3, [r7, #11]
 80077a4:	4613      	mov	r3, r2
 80077a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077b0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	460b      	mov	r3, r1
 80077be:	2100      	movs	r1, #0
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f812 	bl	80077ea <USBH_GetDescriptor>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d107      	bne.n	80077e0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077d6:	893a      	ldrh	r2, [r7, #8]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fa37 	bl	8007c4e <USBH_ParseStringDesc>
  }

  return status;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	607b      	str	r3, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	72fb      	strb	r3, [r7, #11]
 80077f8:	4613      	mov	r3, r2
 80077fa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	789b      	ldrb	r3, [r3, #2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d11c      	bne.n	800783e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2206      	movs	r2, #6
 8007814:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	893a      	ldrh	r2, [r7, #8]
 800781a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007826:	d104      	bne.n	8007832 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f240 4209 	movw	r2, #1033	; 0x409
 800782e:	829a      	strh	r2, [r3, #20]
 8007830:	e002      	b.n	8007838 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8b3a      	ldrh	r2, [r7, #24]
 800783c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800783e:	8b3b      	ldrh	r3, [r7, #24]
 8007840:	461a      	mov	r2, r3
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fa50 	bl	8007cea <USBH_CtlReq>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	789b      	ldrb	r3, [r3, #2]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d10f      	bne.n	8007888 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2205      	movs	r2, #5
 8007872:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	b29a      	uxth	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa2c 	bl	8007cea <USBH_CtlReq>
 8007892:	4603      	mov	r3, r0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	789b      	ldrb	r3, [r3, #2]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d10e      	bne.n	80078ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2209      	movs	r2, #9
 80078ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	887a      	ldrh	r2, [r7, #2]
 80078c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80078ce:	2200      	movs	r2, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa09 	bl	8007cea <USBH_CtlReq>
 80078d8:	4603      	mov	r3, r0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	789b      	ldrb	r3, [r3, #2]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10f      	bne.n	8007916 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2203      	movs	r2, #3
 8007900:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9e5 	bl	8007cea <USBH_CtlReq>
 8007920:	4603      	mov	r3, r0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	789b      	ldrb	r3, [r3, #2]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d10f      	bne.n	800795e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800795e:	2200      	movs	r2, #0
 8007960:	2100      	movs	r1, #0
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9c1 	bl	8007cea <USBH_CtlReq>
 8007968:	4603      	mov	r3, r0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	4613      	mov	r3, r2
 800797e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781a      	ldrb	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	785a      	ldrb	r2, [r3, #1]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3302      	adds	r3, #2
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	b29a      	uxth	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3303      	adds	r3, #3
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	791a      	ldrb	r2, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	795a      	ldrb	r2, [r3, #5]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	799a      	ldrb	r2, [r3, #6]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	79da      	ldrb	r2, [r3, #7]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	d939      	bls.n	8007a46 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3308      	adds	r3, #8
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3309      	adds	r3, #9
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4313      	orrs	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	330a      	adds	r3, #10
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	330b      	adds	r3, #11
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	330d      	adds	r3, #13
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	7b9a      	ldrb	r2, [r3, #14]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	7bda      	ldrb	r2, [r3, #15]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	7c1a      	ldrb	r2, [r3, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	7c5a      	ldrb	r2, [r3, #17]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	745a      	strb	r2, [r3, #17]
  }
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b08a      	sub	sp, #40	; 0x28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	785a      	ldrb	r2, [r3, #1]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	3302      	adds	r3, #2
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3303      	adds	r3, #3
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	791a      	ldrb	r2, [r3, #4]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	795a      	ldrb	r2, [r3, #5]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	799a      	ldrb	r2, [r3, #6]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	79da      	ldrb	r2, [r3, #7]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	7a1a      	ldrb	r2, [r3, #8]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d95f      	bls.n	8007b8e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ace:	2309      	movs	r3, #9
 8007ad0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ad6:	e051      	b.n	8007b7c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ad8:	f107 0316 	add.w	r3, r7, #22
 8007adc:	4619      	mov	r1, r3
 8007ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ae0:	f000 f8e8 	bl	8007cb4 <USBH_GetNextDesc>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d146      	bne.n	8007b7c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007af2:	221a      	movs	r2, #26
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	3308      	adds	r3, #8
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	3302      	adds	r3, #2
 8007b00:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b04:	69f8      	ldr	r0, [r7, #28]
 8007b06:	f000 f846 	bl	8007b96 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b14:	e022      	b.n	8007b5c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b16:	f107 0316 	add.w	r3, r7, #22
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b1e:	f000 f8c9 	bl	8007cb4 <USBH_GetNextDesc>
 8007b22:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b05      	cmp	r3, #5
 8007b2a:	d117      	bne.n	8007b5c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b34:	3201      	adds	r2, #1
 8007b36:	00d2      	lsls	r2, r2, #3
 8007b38:	211a      	movs	r1, #26
 8007b3a:	fb01 f303 	mul.w	r3, r1, r3
 8007b3e:	4413      	add	r3, r2
 8007b40:	3308      	adds	r3, #8
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	3304      	adds	r3, #4
 8007b48:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f000 f851 	bl	8007bf4 <USBH_ParseEPDesc>
            ep_ix++;
 8007b52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b56:	3301      	adds	r3, #1
 8007b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	791b      	ldrb	r3, [r3, #4]
 8007b60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d204      	bcs.n	8007b72 <USBH_ParseCfgDesc+0x120>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	885a      	ldrh	r2, [r3, #2]
 8007b6c:	8afb      	ldrh	r3, [r7, #22]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d8d1      	bhi.n	8007b16 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b76:	3301      	adds	r3, #1
 8007b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d804      	bhi.n	8007b8e <USBH_ParseCfgDesc+0x13c>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	885a      	ldrh	r2, [r3, #2]
 8007b88:	8afb      	ldrh	r3, [r7, #22]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d8a4      	bhi.n	8007ad8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3728      	adds	r7, #40	; 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	789a      	ldrb	r2, [r3, #2]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	78da      	ldrb	r2, [r3, #3]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	791a      	ldrb	r2, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	795a      	ldrb	r2, [r3, #5]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	799a      	ldrb	r2, [r3, #6]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	79da      	ldrb	r2, [r3, #7]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	7a1a      	ldrb	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	721a      	strb	r2, [r3, #8]
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	785a      	ldrb	r2, [r3, #1]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	789a      	ldrb	r2, [r3, #2]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	78da      	ldrb	r2, [r3, #3]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	3304      	adds	r3, #4
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	3305      	adds	r3, #5
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	799a      	ldrb	r2, [r3, #6]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	719a      	strb	r2, [r3, #6]
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b087      	sub	sp, #28
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d120      	bne.n	8007ca8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	1e9a      	subs	r2, r3, #2
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	bf28      	it	cs
 8007c72:	4613      	movcs	r3, r2
 8007c74:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3302      	adds	r3, #2
 8007c7a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	82fb      	strh	r3, [r7, #22]
 8007c80:	e00b      	b.n	8007c9a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c82:	8afb      	ldrh	r3, [r7, #22]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	3302      	adds	r3, #2
 8007c98:	82fb      	strh	r3, [r7, #22]
 8007c9a:	8afa      	ldrh	r2, [r7, #22]
 8007c9c:	8abb      	ldrh	r3, [r7, #20]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d3ef      	bcc.n	8007c82 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
  }
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	881a      	ldrh	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4413      	add	r3, r2
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b086      	sub	sp, #24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	789b      	ldrb	r3, [r3, #2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d002      	beq.n	8007d0a <USBH_CtlReq+0x20>
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d00f      	beq.n	8007d28 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d08:	e027      	b.n	8007d5a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	88fa      	ldrh	r2, [r7, #6]
 8007d14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
      break;
 8007d26:	e018      	b.n	8007d5a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f81b 	bl	8007d64 <USBH_HandleControl>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <USBH_CtlReq+0x54>
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d106      	bne.n	8007d4c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	761a      	strb	r2, [r3, #24]
      break;
 8007d4a:	e005      	b.n	8007d58 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d102      	bne.n	8007d58 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	709a      	strb	r2, [r3, #2]
      break;
 8007d58:	bf00      	nop
  }
  return status;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7e1b      	ldrb	r3, [r3, #24]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	2b0a      	cmp	r3, #10
 8007d7c:	f200 8156 	bhi.w	800802c <USBH_HandleControl+0x2c8>
 8007d80:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <USBH_HandleControl+0x24>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007dcf 	.word	0x08007dcf
 8007d90:	08007e39 	.word	0x08007e39
 8007d94:	08007e5f 	.word	0x08007e5f
 8007d98:	08007e97 	.word	0x08007e97
 8007d9c:	08007ec1 	.word	0x08007ec1
 8007da0:	08007f13 	.word	0x08007f13
 8007da4:	08007f35 	.word	0x08007f35
 8007da8:	08007f71 	.word	0x08007f71
 8007dac:	08007f97 	.word	0x08007f97
 8007db0:	08007fd5 	.word	0x08007fd5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0110 	add.w	r1, r3, #16
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f943 	bl	800804c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	761a      	strb	r2, [r3, #24]
      break;
 8007dcc:	e139      	b.n	8008042 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	795b      	ldrb	r3, [r3, #5]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f003 f917 	bl	800b008 <USBH_LL_GetURBState>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d11e      	bne.n	8007e22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7c1b      	ldrb	r3, [r3, #16]
 8007de8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8adb      	ldrh	r3, [r3, #22]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007df6:	7b7b      	ldrb	r3, [r7, #13]
 8007df8:	2b80      	cmp	r3, #128	; 0x80
 8007dfa:	d103      	bne.n	8007e04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e02:	e115      	b.n	8008030 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2205      	movs	r2, #5
 8007e08:	761a      	strb	r2, [r3, #24]
      break;
 8007e0a:	e111      	b.n	8008030 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e0c:	7b7b      	ldrb	r3, [r7, #13]
 8007e0e:	2b80      	cmp	r3, #128	; 0x80
 8007e10:	d103      	bne.n	8007e1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2209      	movs	r2, #9
 8007e16:	761a      	strb	r2, [r3, #24]
      break;
 8007e18:	e10a      	b.n	8008030 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	761a      	strb	r2, [r3, #24]
      break;
 8007e20:	e106      	b.n	8008030 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d003      	beq.n	8007e30 <USBH_HandleControl+0xcc>
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	f040 8100 	bne.w	8008030 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	220b      	movs	r2, #11
 8007e34:	761a      	strb	r2, [r3, #24]
      break;
 8007e36:	e0fb      	b.n	8008030 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6899      	ldr	r1, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	899a      	ldrh	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	791b      	ldrb	r3, [r3, #4]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f93a 	bl	80080ca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2204      	movs	r2, #4
 8007e5a:	761a      	strb	r2, [r3, #24]
      break;
 8007e5c:	e0f1      	b.n	8008042 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f003 f8cf 	bl	800b008 <USBH_LL_GetURBState>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d102      	bne.n	8007e7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2209      	movs	r2, #9
 8007e78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b05      	cmp	r3, #5
 8007e7e:	d102      	bne.n	8007e86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e80:	2303      	movs	r3, #3
 8007e82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e84:	e0d6      	b.n	8008034 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	f040 80d3 	bne.w	8008034 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220b      	movs	r2, #11
 8007e92:	761a      	strb	r2, [r3, #24]
      break;
 8007e94:	e0ce      	b.n	8008034 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6899      	ldr	r1, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	899a      	ldrh	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	795b      	ldrb	r3, [r3, #5]
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	9000      	str	r0, [sp, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8ea 	bl	8008080 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2206      	movs	r2, #6
 8007ebc:	761a      	strb	r2, [r3, #24]
      break;
 8007ebe:	e0c0      	b.n	8008042 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	795b      	ldrb	r3, [r3, #5]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f003 f89e 	bl	800b008 <USBH_LL_GetURBState>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d103      	bne.n	8007ede <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2207      	movs	r2, #7
 8007eda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007edc:	e0ac      	b.n	8008038 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b05      	cmp	r3, #5
 8007ee2:	d105      	bne.n	8007ef0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	220c      	movs	r2, #12
 8007ee8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007eea:	2303      	movs	r3, #3
 8007eec:	73fb      	strb	r3, [r7, #15]
      break;
 8007eee:	e0a3      	b.n	8008038 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2205      	movs	r2, #5
 8007efa:	761a      	strb	r2, [r3, #24]
      break;
 8007efc:	e09c      	b.n	8008038 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	f040 8099 	bne.w	8008038 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	220b      	movs	r2, #11
 8007f0a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e092      	b.n	8008038 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8d5 	bl	80080ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2208      	movs	r2, #8
 8007f30:	761a      	strb	r2, [r3, #24]

      break;
 8007f32:	e086      	b.n	8008042 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	791b      	ldrb	r3, [r3, #4]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f003 f864 	bl	800b008 <USBH_LL_GetURBState>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d105      	bne.n	8007f56 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	220d      	movs	r2, #13
 8007f4e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f54:	e072      	b.n	800803c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d103      	bne.n	8007f64 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	220b      	movs	r2, #11
 8007f60:	761a      	strb	r2, [r3, #24]
      break;
 8007f62:	e06b      	b.n	800803c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	d168      	bne.n	800803c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6e:	e065      	b.n	800803c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	795b      	ldrb	r3, [r3, #5]
 8007f74:	2201      	movs	r2, #1
 8007f76:	9200      	str	r2, [sp, #0]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f87f 	bl	8008080 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	220a      	movs	r2, #10
 8007f92:	761a      	strb	r2, [r3, #24]
      break;
 8007f94:	e055      	b.n	8008042 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	795b      	ldrb	r3, [r3, #5]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f003 f833 	bl	800b008 <USBH_LL_GetURBState>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d105      	bne.n	8007fb8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	220d      	movs	r2, #13
 8007fb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fb6:	e043      	b.n	8008040 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d103      	bne.n	8007fc6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2209      	movs	r2, #9
 8007fc2:	761a      	strb	r2, [r3, #24]
      break;
 8007fc4:	e03c      	b.n	8008040 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d139      	bne.n	8008040 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	220b      	movs	r2, #11
 8007fd0:	761a      	strb	r2, [r3, #24]
      break;
 8007fd2:	e035      	b.n	8008040 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7e5b      	ldrb	r3, [r3, #25]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	765a      	strb	r2, [r3, #25]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7e5b      	ldrb	r3, [r3, #25]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d806      	bhi.n	8007ff6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ff4:	e025      	b.n	8008042 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ffc:	2106      	movs	r1, #6
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	795b      	ldrb	r3, [r3, #5]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f90c 	bl	800822c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f906 	bl	800822c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008026:	2302      	movs	r3, #2
 8008028:	73fb      	strb	r3, [r7, #15]
      break;
 800802a:	e00a      	b.n	8008042 <USBH_HandleControl+0x2de>

    default:
      break;
 800802c:	bf00      	nop
 800802e:	e008      	b.n	8008042 <USBH_HandleControl+0x2de>
      break;
 8008030:	bf00      	nop
 8008032:	e006      	b.n	8008042 <USBH_HandleControl+0x2de>
      break;
 8008034:	bf00      	nop
 8008036:	e004      	b.n	8008042 <USBH_HandleControl+0x2de>
      break;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <USBH_HandleControl+0x2de>
      break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <USBH_HandleControl+0x2de>
      break;
 8008040:	bf00      	nop
  }

  return status;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af04      	add	r7, sp, #16
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4613      	mov	r3, r2
 8008058:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800805a:	79f9      	ldrb	r1, [r7, #7]
 800805c:	2300      	movs	r3, #0
 800805e:	9303      	str	r3, [sp, #12]
 8008060:	2308      	movs	r3, #8
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f002 ff98 	bl	800afa6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af04      	add	r7, sp, #16
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	4611      	mov	r1, r2
 800808c:	461a      	mov	r2, r3
 800808e:	460b      	mov	r3, r1
 8008090:	80fb      	strh	r3, [r7, #6]
 8008092:	4613      	mov	r3, r2
 8008094:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080a4:	7979      	ldrb	r1, [r7, #5]
 80080a6:	7e3b      	ldrb	r3, [r7, #24]
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	2301      	movs	r3, #1
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	2200      	movs	r2, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f002 ff73 	bl	800afa6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af04      	add	r7, sp, #16
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4611      	mov	r1, r2
 80080d6:	461a      	mov	r2, r3
 80080d8:	460b      	mov	r3, r1
 80080da:	80fb      	strh	r3, [r7, #6]
 80080dc:	4613      	mov	r3, r2
 80080de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080e0:	7979      	ldrb	r1, [r7, #5]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9303      	str	r3, [sp, #12]
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	9302      	str	r3, [sp, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	2301      	movs	r3, #1
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	2201      	movs	r2, #1
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f002 ff55 	bl	800afa6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80080fc:	2300      	movs	r3, #0

}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b088      	sub	sp, #32
 800810a:	af04      	add	r7, sp, #16
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4611      	mov	r1, r2
 8008112:	461a      	mov	r2, r3
 8008114:	460b      	mov	r3, r1
 8008116:	80fb      	strh	r3, [r7, #6]
 8008118:	4613      	mov	r3, r2
 800811a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800812a:	7979      	ldrb	r1, [r7, #5]
 800812c:	7e3b      	ldrb	r3, [r7, #24]
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	2301      	movs	r3, #1
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	2302      	movs	r3, #2
 800813e:	2200      	movs	r2, #0
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f002 ff30 	bl	800afa6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af04      	add	r7, sp, #16
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4611      	mov	r1, r2
 800815c:	461a      	mov	r2, r3
 800815e:	460b      	mov	r3, r1
 8008160:	80fb      	strh	r3, [r7, #6]
 8008162:	4613      	mov	r3, r2
 8008164:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008166:	7979      	ldrb	r1, [r7, #5]
 8008168:	2300      	movs	r3, #0
 800816a:	9303      	str	r3, [sp, #12]
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	2301      	movs	r3, #1
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	2302      	movs	r3, #2
 800817a:	2201      	movs	r2, #1
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f002 ff12 	bl	800afa6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af04      	add	r7, sp, #16
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4603      	mov	r3, r0
 800819c:	70fb      	strb	r3, [r7, #3]
 800819e:	460b      	mov	r3, r1
 80081a0:	70bb      	strb	r3, [r7, #2]
 80081a2:	4613      	mov	r3, r2
 80081a4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081a6:	7878      	ldrb	r0, [r7, #1]
 80081a8:	78ba      	ldrb	r2, [r7, #2]
 80081aa:	78f9      	ldrb	r1, [r7, #3]
 80081ac:	8b3b      	ldrh	r3, [r7, #24]
 80081ae:	9302      	str	r3, [sp, #8]
 80081b0:	7d3b      	ldrb	r3, [r7, #20]
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	7c3b      	ldrb	r3, [r7, #16]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4603      	mov	r3, r0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f002 fea5 	bl	800af0a <USBH_LL_OpenPipe>

  return USBH_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f002 fec4 	bl	800af68 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f836 	bl	8008268 <USBH_GetFreePipe>
 80081fc:	4603      	mov	r3, r0
 80081fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008200:	89fb      	ldrh	r3, [r7, #14]
 8008202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008206:	4293      	cmp	r3, r2
 8008208:	d00a      	beq.n	8008220 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	89fb      	ldrh	r3, [r7, #14]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	33e0      	adds	r3, #224	; 0xe0
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008220:	89fb      	ldrh	r3, [r7, #14]
 8008222:	b2db      	uxtb	r3, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	2b0a      	cmp	r3, #10
 800823c:	d80d      	bhi.n	800825a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	33e0      	adds	r3, #224	; 0xe0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	33e0      	adds	r3, #224	; 0xe0
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
 8008278:	e00f      	b.n	800829a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	33e0      	adds	r3, #224	; 0xe0
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	b29b      	uxth	r3, r3
 8008292:	e007      	b.n	80082a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	3301      	adds	r3, #1
 8008298:	73fb      	strb	r3, [r7, #15]
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b0a      	cmp	r3, #10
 800829e:	d9ec      	bls.n	800827a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <disk_status+0x30>)
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	79fa      	ldrb	r2, [r7, #7]
 80082c8:	4905      	ldr	r1, [pc, #20]	; (80082e0 <disk_status+0x30>)
 80082ca:	440a      	add	r2, r1
 80082cc:	7a12      	ldrb	r2, [r2, #8]
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200000d8 	.word	0x200000d8

080082e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	4a0d      	ldr	r2, [pc, #52]	; (800832c <disk_initialize+0x48>)
 80082f6:	5cd3      	ldrb	r3, [r2, r3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d111      	bne.n	8008320 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	4a0b      	ldr	r2, [pc, #44]	; (800832c <disk_initialize+0x48>)
 8008300:	2101      	movs	r1, #1
 8008302:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	4a09      	ldr	r2, [pc, #36]	; (800832c <disk_initialize+0x48>)
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	79fa      	ldrb	r2, [r7, #7]
 8008312:	4906      	ldr	r1, [pc, #24]	; (800832c <disk_initialize+0x48>)
 8008314:	440a      	add	r2, r1
 8008316:	7a12      	ldrb	r2, [r2, #8]
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200000d8 	.word	0x200000d8

08008330 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4a0a      	ldr	r2, [pc, #40]	; (800836c <disk_read+0x3c>)
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	689c      	ldr	r4, [r3, #8]
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4a07      	ldr	r2, [pc, #28]	; (800836c <disk_read+0x3c>)
 8008350:	4413      	add	r3, r2
 8008352:	7a18      	ldrb	r0, [r3, #8]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	47a0      	blx	r4
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd90      	pop	{r4, r7, pc}
 800836a:	bf00      	nop
 800836c:	200000d8 	.word	0x200000d8

08008370 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <disk_write+0x3c>)
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	68dc      	ldr	r4, [r3, #12]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4a07      	ldr	r2, [pc, #28]	; (80083ac <disk_write+0x3c>)
 8008390:	4413      	add	r3, r2
 8008392:	7a18      	ldrb	r0, [r3, #8]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	47a0      	blx	r4
 800839c:	4603      	mov	r3, r0
 800839e:	75fb      	strb	r3, [r7, #23]
  return res;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200000d8 	.word	0x200000d8

080083b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	603a      	str	r2, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
 80083bc:	460b      	mov	r3, r1
 80083be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <disk_ioctl+0x38>)
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	79fa      	ldrb	r2, [r7, #7]
 80083ce:	4906      	ldr	r1, [pc, #24]	; (80083e8 <disk_ioctl+0x38>)
 80083d0:	440a      	add	r2, r1
 80083d2:	7a10      	ldrb	r0, [r2, #8]
 80083d4:	79b9      	ldrb	r1, [r7, #6]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200000d8 	.word	0x200000d8

080083ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	b21a      	sxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b21b      	sxth	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b21b      	sxth	r3, r3
 800840c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800840e:	89fb      	ldrh	r3, [r7, #14]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3303      	adds	r3, #3
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	3202      	adds	r2, #2
 8008434:	7812      	ldrb	r2, [r2, #0]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	3201      	adds	r2, #1
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7812      	ldrb	r2, [r2, #0]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
	return rv;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	887a      	ldrh	r2, [r7, #2]
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	887b      	ldrh	r3, [r7, #2]
 800847c:	0a1b      	lsrs	r3, r3, #8
 800847e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	887a      	ldrh	r2, [r7, #2]
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	0a1b      	lsrs	r3, r3, #8
 80084c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	1c53      	adds	r3, r2, #1
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1c59      	adds	r1, r3, #1
 8008514:	6179      	str	r1, [r7, #20]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f1      	bne.n	800850a <mem_cpy+0x1a>
	}
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008532:	b480      	push	{r7}
 8008534:	b087      	sub	sp, #28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	617a      	str	r2, [r7, #20]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f3      	bne.n	8008542 <mem_set+0x10>
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008568:	b480      	push	{r7}
 800856a:	b089      	sub	sp, #36	; 0x24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	61fa      	str	r2, [r7, #28]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	4619      	mov	r1, r3
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	61ba      	str	r2, [r7, #24]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	1acb      	subs	r3, r1, r3
 8008594:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3b01      	subs	r3, #1
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <mem_cmp+0x40>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0eb      	beq.n	8008580 <mem_cmp+0x18>

	return r;
 80085a8:	697b      	ldr	r3, [r7, #20]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3724      	adds	r7, #36	; 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085c0:	e002      	b.n	80085c8 <chk_chr+0x12>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3301      	adds	r3, #1
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <chk_chr+0x26>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	4293      	cmp	r3, r2
 80085da:	d1f2      	bne.n	80085c2 <chk_chr+0xc>
	return *str;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	781b      	ldrb	r3, [r3, #0]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e029      	b.n	8008654 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008600:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <chk_lock+0xb4>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	4413      	add	r3, r2
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01d      	beq.n	800864a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800860e:	4a24      	ldr	r2, [pc, #144]	; (80086a0 <chk_lock+0xb4>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	4413      	add	r3, r2
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d116      	bne.n	800864e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008620:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <chk_lock+0xb4>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008630:	429a      	cmp	r2, r3
 8008632:	d10c      	bne.n	800864e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008634:	4a1a      	ldr	r2, [pc, #104]	; (80086a0 <chk_lock+0xb4>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	4413      	add	r3, r2
 800863c:	3308      	adds	r3, #8
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008644:	429a      	cmp	r2, r3
 8008646:	d102      	bne.n	800864e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008648:	e007      	b.n	800865a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d9d2      	bls.n	8008600 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d109      	bne.n	8008674 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <chk_lock+0x80>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d101      	bne.n	8008670 <chk_lock+0x84>
 800866c:	2300      	movs	r3, #0
 800866e:	e010      	b.n	8008692 <chk_lock+0xa6>
 8008670:	2312      	movs	r3, #18
 8008672:	e00e      	b.n	8008692 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d108      	bne.n	800868c <chk_lock+0xa0>
 800867a:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <chk_lock+0xb4>)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	330c      	adds	r3, #12
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800868a:	d101      	bne.n	8008690 <chk_lock+0xa4>
 800868c:	2310      	movs	r3, #16
 800868e:	e000      	b.n	8008692 <chk_lock+0xa6>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	200000b8 	.word	0x200000b8

080086a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086aa:	2300      	movs	r3, #0
 80086ac:	607b      	str	r3, [r7, #4]
 80086ae:	e002      	b.n	80086b6 <enq_lock+0x12>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3301      	adds	r3, #1
 80086b4:	607b      	str	r3, [r7, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d806      	bhi.n	80086ca <enq_lock+0x26>
 80086bc:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <enq_lock+0x40>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	4413      	add	r3, r2
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f2      	bne.n	80086b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	200000b8 	.word	0x200000b8

080086e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e01f      	b.n	8008738 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80086f8:	4a41      	ldr	r2, [pc, #260]	; (8008800 <inc_lock+0x118>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	011b      	lsls	r3, r3, #4
 80086fe:	4413      	add	r3, r2
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	429a      	cmp	r2, r3
 8008708:	d113      	bne.n	8008732 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800870a:	4a3d      	ldr	r2, [pc, #244]	; (8008800 <inc_lock+0x118>)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	4413      	add	r3, r2
 8008712:	3304      	adds	r3, #4
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800871a:	429a      	cmp	r2, r3
 800871c:	d109      	bne.n	8008732 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800871e:	4a38      	ldr	r2, [pc, #224]	; (8008800 <inc_lock+0x118>)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	4413      	add	r3, r2
 8008726:	3308      	adds	r3, #8
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800872e:	429a      	cmp	r2, r3
 8008730:	d006      	beq.n	8008740 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d9dc      	bls.n	80086f8 <inc_lock+0x10>
 800873e:	e000      	b.n	8008742 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008740:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d132      	bne.n	80087ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e002      	b.n	8008754 <inc_lock+0x6c>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d806      	bhi.n	8008768 <inc_lock+0x80>
 800875a:	4a29      	ldr	r2, [pc, #164]	; (8008800 <inc_lock+0x118>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	4413      	add	r3, r2
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f2      	bne.n	800874e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d101      	bne.n	8008772 <inc_lock+0x8a>
 800876e:	2300      	movs	r3, #0
 8008770:	e040      	b.n	80087f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4922      	ldr	r1, [pc, #136]	; (8008800 <inc_lock+0x118>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	440b      	add	r3, r1
 800877e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	491e      	ldr	r1, [pc, #120]	; (8008800 <inc_lock+0x118>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	440b      	add	r3, r1
 800878c:	3304      	adds	r3, #4
 800878e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695a      	ldr	r2, [r3, #20]
 8008794:	491a      	ldr	r1, [pc, #104]	; (8008800 <inc_lock+0x118>)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	440b      	add	r3, r1
 800879c:	3308      	adds	r3, #8
 800879e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087a0:	4a17      	ldr	r2, [pc, #92]	; (8008800 <inc_lock+0x118>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	4413      	add	r3, r2
 80087a8:	330c      	adds	r3, #12
 80087aa:	2200      	movs	r2, #0
 80087ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <inc_lock+0xe0>
 80087b4:	4a12      	ldr	r2, [pc, #72]	; (8008800 <inc_lock+0x118>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	4413      	add	r3, r2
 80087bc:	330c      	adds	r3, #12
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <inc_lock+0xe0>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e015      	b.n	80087f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d108      	bne.n	80087e0 <inc_lock+0xf8>
 80087ce:	4a0c      	ldr	r2, [pc, #48]	; (8008800 <inc_lock+0x118>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	4413      	add	r3, r2
 80087d6:	330c      	adds	r3, #12
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	e001      	b.n	80087e4 <inc_lock+0xfc>
 80087e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087e4:	4906      	ldr	r1, [pc, #24]	; (8008800 <inc_lock+0x118>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	440b      	add	r3, r1
 80087ec:	330c      	adds	r3, #12
 80087ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	200000b8 	.word	0x200000b8

08008804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d825      	bhi.n	8008864 <dec_lock+0x60>
		n = Files[i].ctr;
 8008818:	4a17      	ldr	r2, [pc, #92]	; (8008878 <dec_lock+0x74>)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	4413      	add	r3, r2
 8008820:	330c      	adds	r3, #12
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008826:	89fb      	ldrh	r3, [r7, #14]
 8008828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882c:	d101      	bne.n	8008832 <dec_lock+0x2e>
 800882e:	2300      	movs	r3, #0
 8008830:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008832:	89fb      	ldrh	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <dec_lock+0x3a>
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	3b01      	subs	r3, #1
 800883c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800883e:	4a0e      	ldr	r2, [pc, #56]	; (8008878 <dec_lock+0x74>)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	4413      	add	r3, r2
 8008846:	330c      	adds	r3, #12
 8008848:	89fa      	ldrh	r2, [r7, #14]
 800884a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800884c:	89fb      	ldrh	r3, [r7, #14]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <dec_lock+0x5a>
 8008852:	4a09      	ldr	r2, [pc, #36]	; (8008878 <dec_lock+0x74>)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	4413      	add	r3, r2
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	737b      	strb	r3, [r7, #13]
 8008862:	e001      	b.n	8008868 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008864:	2302      	movs	r3, #2
 8008866:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008868:	7b7b      	ldrb	r3, [r7, #13]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	200000b8 	.word	0x200000b8

0800887c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e010      	b.n	80088ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800888a:	4a0d      	ldr	r2, [pc, #52]	; (80088c0 <clear_lock+0x44>)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	4413      	add	r3, r2
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d105      	bne.n	80088a6 <clear_lock+0x2a>
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <clear_lock+0x44>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	4413      	add	r3, r2
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d9eb      	bls.n	800888a <clear_lock+0xe>
	}
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	200000b8 	.word	0x200000b8

080088c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d034      	beq.n	8008942 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7858      	ldrb	r0, [r3, #1]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088e8:	2301      	movs	r3, #1
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	f7ff fd40 	bl	8008370 <disk_write>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	e022      	b.n	8008942 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	429a      	cmp	r2, r3
 8008910:	d217      	bcs.n	8008942 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	789b      	ldrb	r3, [r3, #2]
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	e010      	b.n	800893c <sync_window+0x78>
					wsect += fs->fsize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	7858      	ldrb	r0, [r3, #1]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800892e:	2301      	movs	r3, #1
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	f7ff fd1d 	bl	8008370 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3b01      	subs	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d8eb      	bhi.n	800891a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d01b      	beq.n	800899c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ffad 	bl	80088c4 <sync_window>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d113      	bne.n	800899c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	7858      	ldrb	r0, [r3, #1]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800897e:	2301      	movs	r3, #1
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	f7ff fcd5 	bl	8008330 <disk_read>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800898c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008990:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff87 	bl	80088c4 <sync_window>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d159      	bne.n	8008a74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d149      	bne.n	8008a5c <sync_fs+0xb4>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	791b      	ldrb	r3, [r3, #4]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d145      	bne.n	8008a5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	899b      	ldrh	r3, [r3, #12]
 80089da:	461a      	mov	r2, r3
 80089dc:	2100      	movs	r1, #0
 80089de:	f7ff fda8 	bl	8008532 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3338      	adds	r3, #56	; 0x38
 80089e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80089ea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff fd37 	bl	8008462 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3338      	adds	r3, #56	; 0x38
 80089f8:	4921      	ldr	r1, [pc, #132]	; (8008a80 <sync_fs+0xd8>)
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff fd4c 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3338      	adds	r3, #56	; 0x38
 8008a04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a08:	491e      	ldr	r1, [pc, #120]	; (8008a84 <sync_fs+0xdc>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fd44 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3338      	adds	r3, #56	; 0x38
 8008a14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7ff fd3a 	bl	8008498 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3338      	adds	r3, #56	; 0x38
 8008a28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7ff fd30 	bl	8008498 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7858      	ldrb	r0, [r3, #1]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a50:	2301      	movs	r3, #1
 8008a52:	f7ff fc8d 	bl	8008370 <disk_write>
			fs->fsi_flag = 0;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2200      	movs	r2, #0
 8008a62:	2100      	movs	r1, #0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fca3 	bl	80083b0 <disk_ioctl>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <sync_fs+0xcc>
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	41615252 	.word	0x41615252
 8008a84:	61417272 	.word	0x61417272

08008a88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	3b02      	subs	r3, #2
 8008a96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	3b02      	subs	r3, #2
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d301      	bcc.n	8008aa8 <clust2sect+0x20>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e008      	b.n	8008aba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	895b      	ldrh	r3, [r3, #10]
 8008aac:	461a      	mov	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	fb03 f202 	mul.w	r2, r3, r2
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	4413      	add	r3, r2
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b086      	sub	sp, #24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d904      	bls.n	8008ae6 <get_fat+0x20>
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e0bb      	b.n	8008c64 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008af0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	f000 8083 	beq.w	8008c02 <get_fat+0x13c>
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	f300 80a7 	bgt.w	8008c50 <get_fat+0x18a>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d002      	beq.n	8008b0c <get_fat+0x46>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d056      	beq.n	8008bb8 <get_fat+0xf2>
 8008b0a:	e0a1      	b.n	8008c50 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	899b      	ldrh	r3, [r3, #12]
 8008b22:	4619      	mov	r1, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b2a:	4413      	add	r3, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6938      	ldr	r0, [r7, #16]
 8008b30:	f7ff ff0c 	bl	800894c <move_window>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 808d 	bne.w	8008c56 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	60fa      	str	r2, [r7, #12]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	8992      	ldrh	r2, [r2, #12]
 8008b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b4a:	fb02 f201 	mul.w	r2, r2, r1
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4413      	add	r3, r2
 8008b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	899b      	ldrh	r3, [r3, #12]
 8008b62:	4619      	mov	r1, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b6a:	4413      	add	r3, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6938      	ldr	r0, [r7, #16]
 8008b70:	f7ff feec 	bl	800894c <move_window>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d16f      	bne.n	8008c5a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	899b      	ldrh	r3, [r3, #12]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b86:	fb02 f201 	mul.w	r2, r2, r1
 8008b8a:	1a9b      	subs	r3, r3, r2
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <get_fat+0xe8>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	e002      	b.n	8008bb4 <get_fat+0xee>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb4:	617b      	str	r3, [r7, #20]
			break;
 8008bb6:	e055      	b.n	8008c64 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	899b      	ldrh	r3, [r3, #12]
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bcc:	4413      	add	r3, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6938      	ldr	r0, [r7, #16]
 8008bd2:	f7ff febb 	bl	800894c <move_window>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d140      	bne.n	8008c5e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	8992      	ldrh	r2, [r2, #12]
 8008bea:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bee:	fb02 f200 	mul.w	r2, r2, r0
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fbf8 	bl	80083ec <ld_word>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	617b      	str	r3, [r7, #20]
			break;
 8008c00:	e030      	b.n	8008c64 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	899b      	ldrh	r3, [r3, #12]
 8008c0a:	089b      	lsrs	r3, r3, #2
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c16:	4413      	add	r3, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6938      	ldr	r0, [r7, #16]
 8008c1c:	f7ff fe96 	bl	800894c <move_window>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d11d      	bne.n	8008c62 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	8992      	ldrh	r2, [r2, #12]
 8008c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c38:	fb02 f200 	mul.w	r2, r2, r0
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	440b      	add	r3, r1
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fbeb 	bl	800841c <ld_dword>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c4c:	617b      	str	r3, [r7, #20]
			break;
 8008c4e:	e009      	b.n	8008c64 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c50:	2301      	movs	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e006      	b.n	8008c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c56:	bf00      	nop
 8008c58:	e004      	b.n	8008c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c5a:	bf00      	nop
 8008c5c:	e002      	b.n	8008c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c5e:	bf00      	nop
 8008c60:	e000      	b.n	8008c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c62:	bf00      	nop
		}
	}

	return val;
 8008c64:	697b      	ldr	r3, [r7, #20]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c6e:	b590      	push	{r4, r7, lr}
 8008c70:	b089      	sub	sp, #36	; 0x24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	f240 8102 	bls.w	8008e8a <put_fat+0x21c>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	f080 80fc 	bcs.w	8008e8a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	f000 80b6 	beq.w	8008e08 <put_fat+0x19a>
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	f300 80fd 	bgt.w	8008e9c <put_fat+0x22e>
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d003      	beq.n	8008cae <put_fat+0x40>
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	f000 8083 	beq.w	8008db2 <put_fat+0x144>
 8008cac:	e0f6      	b.n	8008e9c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	085b      	lsrs	r3, r3, #1
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4413      	add	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	899b      	ldrh	r3, [r3, #12]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ccc:	4413      	add	r3, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fe3b 	bl	800894c <move_window>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008cda:	7ffb      	ldrb	r3, [r7, #31]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 80d6 	bne.w	8008e8e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	61ba      	str	r2, [r7, #24]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	8992      	ldrh	r2, [r2, #12]
 8008cf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cf6:	fb02 f200 	mul.w	r2, r2, r0
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00d      	beq.n	8008d26 <put_fat+0xb8>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b25b      	sxtb	r3, r3
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	b25a      	sxtb	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	b25b      	sxtb	r3, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	b25b      	sxtb	r3, r3
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	e001      	b.n	8008d2a <put_fat+0xbc>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	899b      	ldrh	r3, [r3, #12]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d44:	4413      	add	r3, r2
 8008d46:	4619      	mov	r1, r3
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff fdff 	bl	800894c <move_window>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d52:	7ffb      	ldrb	r3, [r7, #31]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f040 809c 	bne.w	8008e92 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	899b      	ldrh	r3, [r3, #12]
 8008d64:	461a      	mov	r2, r3
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d6c:	fb02 f200 	mul.w	r2, r2, r0
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	440b      	add	r3, r1
 8008d74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <put_fat+0x11a>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	091b      	lsrs	r3, r3, #4
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e00e      	b.n	8008da6 <put_fat+0x138>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	b25b      	sxtb	r3, r3
 8008d8e:	f023 030f 	bic.w	r3, r3, #15
 8008d92:	b25a      	sxtb	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	b25b      	sxtb	r3, r3
 8008da0:	4313      	orrs	r3, r2
 8008da2:	b25b      	sxtb	r3, r3
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	70da      	strb	r2, [r3, #3]
			break;
 8008db0:	e074      	b.n	8008e9c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	899b      	ldrh	r3, [r3, #12]
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc6:	4413      	add	r3, r2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff fdbe 	bl	800894c <move_window>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dd4:	7ffb      	ldrb	r3, [r7, #31]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d15d      	bne.n	8008e96 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	8992      	ldrh	r2, [r2, #12]
 8008de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dec:	fb02 f200 	mul.w	r2, r2, r0
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	440b      	add	r3, r1
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	b292      	uxth	r2, r2
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fb31 	bl	8008462 <st_word>
			fs->wflag = 1;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	70da      	strb	r2, [r3, #3]
			break;
 8008e06:	e049      	b.n	8008e9c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	899b      	ldrh	r3, [r3, #12]
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1c:	4413      	add	r3, r2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff fd93 	bl	800894c <move_window>
 8008e26:	4603      	mov	r3, r0
 8008e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e2a:	7ffb      	ldrb	r3, [r7, #31]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d134      	bne.n	8008e9a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	8992      	ldrh	r2, [r2, #12]
 8008e44:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e48:	fb02 f200 	mul.w	r2, r2, r0
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	440b      	add	r3, r1
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fae3 	bl	800841c <ld_dword>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e5c:	4323      	orrs	r3, r4
 8008e5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	8992      	ldrh	r2, [r2, #12]
 8008e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e72:	fb02 f200 	mul.w	r2, r2, r0
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	440b      	add	r3, r1
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fb0b 	bl	8008498 <st_dword>
			fs->wflag = 1;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	70da      	strb	r2, [r3, #3]
			break;
 8008e88:	e008      	b.n	8008e9c <put_fat+0x22e>
		}
	}
 8008e8a:	bf00      	nop
 8008e8c:	e006      	b.n	8008e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e8e:	bf00      	nop
 8008e90:	e004      	b.n	8008e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e92:	bf00      	nop
 8008e94:	e002      	b.n	8008e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e96:	bf00      	nop
 8008e98:	e000      	b.n	8008e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008e9a:	bf00      	nop
	return res;
 8008e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3724      	adds	r7, #36	; 0x24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd90      	pop	{r4, r7, pc}

08008ea6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b088      	sub	sp, #32
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d904      	bls.n	8008ecc <remove_chain+0x26>
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d301      	bcc.n	8008ed0 <remove_chain+0x2a>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e04b      	b.n	8008f68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00c      	beq.n	8008ef0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	69b8      	ldr	r0, [r7, #24]
 8008ede:	f7ff fec6 	bl	8008c6e <put_fat>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ee6:	7ffb      	ldrb	r3, [r7, #31]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <remove_chain+0x4a>
 8008eec:	7ffb      	ldrb	r3, [r7, #31]
 8008eee:	e03b      	b.n	8008f68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fde7 	bl	8008ac6 <get_fat>
 8008ef8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d031      	beq.n	8008f64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <remove_chain+0x64>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e02e      	b.n	8008f68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f10:	d101      	bne.n	8008f16 <remove_chain+0x70>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e028      	b.n	8008f68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f16:	2200      	movs	r2, #0
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	69b8      	ldr	r0, [r7, #24]
 8008f1c:	f7ff fea7 	bl	8008c6e <put_fat>
 8008f20:	4603      	mov	r3, r0
 8008f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008f24:	7ffb      	ldrb	r3, [r7, #31]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <remove_chain+0x88>
 8008f2a:	7ffb      	ldrb	r3, [r7, #31]
 8008f2c:	e01c      	b.n	8008f68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	695a      	ldr	r2, [r3, #20]
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	3b02      	subs	r3, #2
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d20b      	bcs.n	8008f54 <remove_chain+0xae>
			fs->free_clst++;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	791b      	ldrb	r3, [r3, #4]
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d3c6      	bcc.n	8008ef0 <remove_chain+0x4a>
 8008f62:	e000      	b.n	8008f66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10d      	bne.n	8008fa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d004      	beq.n	8008f9c <create_chain+0x2c>
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d31b      	bcc.n	8008fd4 <create_chain+0x64>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	61bb      	str	r3, [r7, #24]
 8008fa0:	e018      	b.n	8008fd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fd8e 	bl	8008ac6 <get_fat>
 8008faa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d801      	bhi.n	8008fb6 <create_chain+0x46>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e070      	b.n	8009098 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fbc:	d101      	bne.n	8008fc2 <create_chain+0x52>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	e06a      	b.n	8009098 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d201      	bcs.n	8008fd0 <create_chain+0x60>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e063      	b.n	8009098 <create_chain+0x128>
		scl = clst;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d307      	bcc.n	8008ff8 <create_chain+0x88>
				ncl = 2;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d901      	bls.n	8008ff8 <create_chain+0x88>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e04f      	b.n	8009098 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ff8:	69f9      	ldr	r1, [r7, #28]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fd63 	bl	8008ac6 <get_fat>
 8009000:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00e      	beq.n	8009026 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d003      	beq.n	8009016 <create_chain+0xa6>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009014:	d101      	bne.n	800901a <create_chain+0xaa>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	e03e      	b.n	8009098 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	429a      	cmp	r2, r3
 8009020:	d1da      	bne.n	8008fd8 <create_chain+0x68>
 8009022:	2300      	movs	r3, #0
 8009024:	e038      	b.n	8009098 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009026:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800902c:	69f9      	ldr	r1, [r7, #28]
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f7ff fe1d 	bl	8008c6e <put_fat>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <create_chain+0xe2>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6938      	ldr	r0, [r7, #16]
 800904a:	f7ff fe10 	bl	8008c6e <put_fat>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d116      	bne.n	8009086 <create_chain+0x116>
		fs->last_clst = ncl;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	695a      	ldr	r2, [r3, #20]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	3b02      	subs	r3, #2
 8009068:	429a      	cmp	r2, r3
 800906a:	d804      	bhi.n	8009076 <create_chain+0x106>
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	1e5a      	subs	r2, r3, #1
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	711a      	strb	r2, [r3, #4]
 8009084:	e007      	b.n	8009096 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d102      	bne.n	8009092 <create_chain+0x122>
 800908c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009090:	e000      	b.n	8009094 <create_chain+0x124>
 8009092:	2301      	movs	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009096:	69fb      	ldr	r3, [r7, #28]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3720      	adds	r7, #32
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	3304      	adds	r3, #4
 80090b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	899b      	ldrh	r3, [r3, #12]
 80090bc:	461a      	mov	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	8952      	ldrh	r2, [r2, #10]
 80090c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	613a      	str	r2, [r7, #16]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <clmt_clust+0x42>
 80090de:	2300      	movs	r3, #0
 80090e0:	e010      	b.n	8009104 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d307      	bcc.n	80090fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3304      	adds	r3, #4
 80090f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090f8:	e7e9      	b.n	80090ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80090fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	4413      	add	r3, r2
}
 8009104:	4618      	mov	r0, r3
 8009106:	371c      	adds	r7, #28
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009126:	d204      	bcs.n	8009132 <dir_sdi+0x22>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f003 031f 	and.w	r3, r3, #31
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009132:	2302      	movs	r3, #2
 8009134:	e071      	b.n	800921a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <dir_sdi+0x46>
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d902      	bls.n	8009156 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10c      	bne.n	8009176 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	8912      	ldrh	r2, [r2, #8]
 8009164:	4293      	cmp	r3, r2
 8009166:	d301      	bcc.n	800916c <dir_sdi+0x5c>
 8009168:	2302      	movs	r3, #2
 800916a:	e056      	b.n	800921a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	61da      	str	r2, [r3, #28]
 8009174:	e02d      	b.n	80091d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	895b      	ldrh	r3, [r3, #10]
 800917a:	461a      	mov	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	899b      	ldrh	r3, [r3, #12]
 8009180:	fb03 f302 	mul.w	r3, r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009186:	e019      	b.n	80091bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6979      	ldr	r1, [r7, #20]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fc9a 	bl	8008ac6 <get_fat>
 8009192:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919a:	d101      	bne.n	80091a0 <dir_sdi+0x90>
 800919c:	2301      	movs	r3, #1
 800919e:	e03c      	b.n	800921a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d904      	bls.n	80091b0 <dir_sdi+0xa0>
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d301      	bcc.n	80091b4 <dir_sdi+0xa4>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e032      	b.n	800921a <dir_sdi+0x10a>
			ofs -= csz;
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d2e1      	bcs.n	8009188 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80091c4:	6979      	ldr	r1, [r7, #20]
 80091c6:	6938      	ldr	r0, [r7, #16]
 80091c8:	f7ff fc5e 	bl	8008a88 <clust2sect>
 80091cc:	4602      	mov	r2, r0
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <dir_sdi+0xd4>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e01a      	b.n	800921a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	899b      	ldrh	r3, [r3, #12]
 80091ec:	4619      	mov	r1, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80091f4:	441a      	add	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	899b      	ldrh	r3, [r3, #12]
 8009204:	461a      	mov	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	fbb3 f0f2 	udiv	r0, r3, r2
 800920c:	fb02 f200 	mul.w	r2, r2, r0
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	18ca      	adds	r2, r1, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	3320      	adds	r3, #32
 8009238:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <dir_next+0x28>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009248:	d301      	bcc.n	800924e <dir_next+0x2c>
 800924a:	2304      	movs	r3, #4
 800924c:	e0bb      	b.n	80093c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	899b      	ldrh	r3, [r3, #12]
 8009252:	461a      	mov	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	fbb3 f1f2 	udiv	r1, r3, r2
 800925a:	fb02 f201 	mul.w	r2, r2, r1
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 809d 	bne.w	80093a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	8912      	ldrh	r2, [r2, #8]
 8009280:	4293      	cmp	r3, r2
 8009282:	f0c0 808d 	bcc.w	80093a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	61da      	str	r2, [r3, #28]
 800928c:	2304      	movs	r3, #4
 800928e:	e09a      	b.n	80093c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	899b      	ldrh	r3, [r3, #12]
 8009294:	461a      	mov	r2, r3
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	fbb3 f3f2 	udiv	r3, r3, r2
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	8952      	ldrh	r2, [r2, #10]
 80092a0:	3a01      	subs	r2, #1
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d17b      	bne.n	80093a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	4619      	mov	r1, r3
 80092b0:	4610      	mov	r0, r2
 80092b2:	f7ff fc08 	bl	8008ac6 <get_fat>
 80092b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d801      	bhi.n	80092c2 <dir_next+0xa0>
 80092be:	2302      	movs	r3, #2
 80092c0:	e081      	b.n	80093c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c8:	d101      	bne.n	80092ce <dir_next+0xac>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e07b      	b.n	80093c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d359      	bcc.n	800938c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	61da      	str	r2, [r3, #28]
 80092e4:	2304      	movs	r3, #4
 80092e6:	e06e      	b.n	80093c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7ff fe3d 	bl	8008f70 <create_chain>
 80092f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <dir_next+0xe0>
 80092fe:	2307      	movs	r3, #7
 8009300:	e061      	b.n	80093c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <dir_next+0xea>
 8009308:	2302      	movs	r3, #2
 800930a:	e05c      	b.n	80093c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009312:	d101      	bne.n	8009318 <dir_next+0xf6>
 8009314:	2301      	movs	r3, #1
 8009316:	e056      	b.n	80093c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fad3 	bl	80088c4 <sync_window>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <dir_next+0x106>
 8009324:	2301      	movs	r3, #1
 8009326:	e04e      	b.n	80093c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	461a      	mov	r2, r3
 8009334:	2100      	movs	r1, #0
 8009336:	f7ff f8fc 	bl	8008532 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	6979      	ldr	r1, [r7, #20]
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f7ff fba1 	bl	8008a88 <clust2sect>
 8009346:	4602      	mov	r2, r0
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	635a      	str	r2, [r3, #52]	; 0x34
 800934c:	e012      	b.n	8009374 <dir_next+0x152>
						fs->wflag = 1;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff fab5 	bl	80088c4 <sync_window>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <dir_next+0x142>
 8009360:	2301      	movs	r3, #1
 8009362:	e030      	b.n	80093c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3301      	adds	r3, #1
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	635a      	str	r2, [r3, #52]	; 0x34
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	895b      	ldrh	r3, [r3, #10]
 8009378:	461a      	mov	r2, r3
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4293      	cmp	r3, r2
 800937e:	d3e6      	bcc.n	800934e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009392:	6979      	ldr	r1, [r7, #20]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff fb77 	bl	8008a88 <clust2sect>
 800939a:	4602      	mov	r2, r0
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80093b8:	fb02 f200 	mul.w	r2, r2, r0
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	18ca      	adds	r2, r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80093de:	2100      	movs	r1, #0
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fe95 	bl	8009110 <dir_sdi>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d12b      	bne.n	8009448 <dir_alloc+0x7a>
		n = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4619      	mov	r1, r3
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff faa6 	bl	800894c <move_window>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d11d      	bne.n	8009446 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2be5      	cmp	r3, #229	; 0xe5
 8009412:	d004      	beq.n	800941e <dir_alloc+0x50>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3301      	adds	r3, #1
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d102      	bne.n	8009432 <dir_alloc+0x64>
 800942c:	e00c      	b.n	8009448 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009432:	2101      	movs	r1, #1
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fef4 	bl	8009222 <dir_next>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0d7      	beq.n	80093f4 <dir_alloc+0x26>
 8009444:	e000      	b.n	8009448 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009446:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b04      	cmp	r3, #4
 800944c:	d101      	bne.n	8009452 <dir_alloc+0x84>
 800944e:	2307      	movs	r3, #7
 8009450:	75fb      	strb	r3, [r7, #23]
	return res;
 8009452:	7dfb      	ldrb	r3, [r7, #23]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	331a      	adds	r3, #26
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe ffbe 	bl	80083ec <ld_word>
 8009470:	4603      	mov	r3, r0
 8009472:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d109      	bne.n	8009490 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	3314      	adds	r3, #20
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe ffb3 	bl	80083ec <ld_word>
 8009486:	4603      	mov	r3, r0
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009490:	68fb      	ldr	r3, [r7, #12]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	331a      	adds	r3, #26
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	b292      	uxth	r2, r2
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe ffd6 	bl	8008462 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d109      	bne.n	80094d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f103 0214 	add.w	r2, r3, #20
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe ffc8 	bl	8008462 <st_word>
	}
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fe10 	bl	8009110 <dir_sdi>
 80094f0:	4603      	mov	r3, r0
 80094f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <dir_find+0x24>
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	e03e      	b.n	800957c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	4619      	mov	r1, r3
 8009504:	6938      	ldr	r0, [r7, #16]
 8009506:	f7ff fa21 	bl	800894c <move_window>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d12f      	bne.n	8009574 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <dir_find+0x4e>
 8009522:	2304      	movs	r3, #4
 8009524:	75fb      	strb	r3, [r7, #23]
 8009526:	e028      	b.n	800957a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	330b      	adds	r3, #11
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009534:	b2da      	uxtb	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	330b      	adds	r3, #11
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <dir_find+0x86>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a18      	ldr	r0, [r3, #32]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3324      	adds	r3, #36	; 0x24
 8009552:	220b      	movs	r2, #11
 8009554:	4619      	mov	r1, r3
 8009556:	f7ff f807 	bl	8008568 <mem_cmp>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009560:	2100      	movs	r1, #0
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fe5d 	bl	8009222 <dir_next>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0c5      	beq.n	80094fe <dir_find+0x24>
 8009572:	e002      	b.n	800957a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009578:	bf00      	nop

	return res;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009592:	2101      	movs	r1, #1
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff ff1a 	bl	80093ce <dir_alloc>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11c      	bne.n	80095de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	4619      	mov	r1, r3
 80095aa:	68b8      	ldr	r0, [r7, #8]
 80095ac:	f7ff f9ce 	bl	800894c <move_window>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d111      	bne.n	80095de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	2220      	movs	r2, #32
 80095c0:	2100      	movs	r1, #0
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe ffb5 	bl	8008532 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a18      	ldr	r0, [r3, #32]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3324      	adds	r3, #36	; 0x24
 80095d0:	220b      	movs	r2, #11
 80095d2:	4619      	mov	r1, r3
 80095d4:	f7fe ff8c 	bl	80084f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2201      	movs	r2, #1
 80095dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80095de:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3324      	adds	r3, #36	; 0x24
 80095fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80095fe:	220b      	movs	r2, #11
 8009600:	2120      	movs	r1, #32
 8009602:	68b8      	ldr	r0, [r7, #8]
 8009604:	f7fe ff95 	bl	8008532 <mem_set>
	si = i = 0; ni = 8;
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	61fb      	str	r3, [r7, #28]
 8009610:	2308      	movs	r3, #8
 8009612:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	4413      	add	r3, r2
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b2e      	cmp	r3, #46	; 0x2e
 800961e:	d12f      	bne.n	8009680 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	61fa      	str	r2, [r7, #28]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800962e:	7efb      	ldrb	r3, [r7, #27]
 8009630:	2b2e      	cmp	r3, #46	; 0x2e
 8009632:	d10a      	bne.n	800964a <create_name+0x62>
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d807      	bhi.n	800964a <create_name+0x62>
			sfn[i++] = c;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	613a      	str	r2, [r7, #16]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	4413      	add	r3, r2
 8009644:	7efa      	ldrb	r2, [r7, #27]
 8009646:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8009648:	e7ea      	b.n	8009620 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800964a:	7efb      	ldrb	r3, [r7, #27]
 800964c:	2b2f      	cmp	r3, #47	; 0x2f
 800964e:	d007      	beq.n	8009660 <create_name+0x78>
 8009650:	7efb      	ldrb	r3, [r7, #27]
 8009652:	2b5c      	cmp	r3, #92	; 0x5c
 8009654:	d004      	beq.n	8009660 <create_name+0x78>
 8009656:	7efb      	ldrb	r3, [r7, #27]
 8009658:	2b20      	cmp	r3, #32
 800965a:	d901      	bls.n	8009660 <create_name+0x78>
 800965c:	2306      	movs	r3, #6
 800965e:	e084      	b.n	800976a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	441a      	add	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800966a:	7efb      	ldrb	r3, [r7, #27]
 800966c:	2b20      	cmp	r3, #32
 800966e:	d801      	bhi.n	8009674 <create_name+0x8c>
 8009670:	2224      	movs	r2, #36	; 0x24
 8009672:	e000      	b.n	8009676 <create_name+0x8e>
 8009674:	2220      	movs	r2, #32
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	330b      	adds	r3, #11
 800967a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e074      	b.n	800976a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	61fa      	str	r2, [r7, #28]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800968e:	7efb      	ldrb	r3, [r7, #27]
 8009690:	2b20      	cmp	r3, #32
 8009692:	d94e      	bls.n	8009732 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009694:	7efb      	ldrb	r3, [r7, #27]
 8009696:	2b2f      	cmp	r3, #47	; 0x2f
 8009698:	d006      	beq.n	80096a8 <create_name+0xc0>
 800969a:	7efb      	ldrb	r3, [r7, #27]
 800969c:	2b5c      	cmp	r3, #92	; 0x5c
 800969e:	d110      	bne.n	80096c2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80096a0:	e002      	b.n	80096a8 <create_name+0xc0>
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	3301      	adds	r3, #1
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b2f      	cmp	r3, #47	; 0x2f
 80096b2:	d0f6      	beq.n	80096a2 <create_name+0xba>
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b5c      	cmp	r3, #92	; 0x5c
 80096be:	d0f0      	beq.n	80096a2 <create_name+0xba>
			break;
 80096c0:	e038      	b.n	8009734 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80096c2:	7efb      	ldrb	r3, [r7, #27]
 80096c4:	2b2e      	cmp	r3, #46	; 0x2e
 80096c6:	d003      	beq.n	80096d0 <create_name+0xe8>
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d30c      	bcc.n	80096ea <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b0b      	cmp	r3, #11
 80096d4:	d002      	beq.n	80096dc <create_name+0xf4>
 80096d6:	7efb      	ldrb	r3, [r7, #27]
 80096d8:	2b2e      	cmp	r3, #46	; 0x2e
 80096da:	d001      	beq.n	80096e0 <create_name+0xf8>
 80096dc:	2306      	movs	r3, #6
 80096de:	e044      	b.n	800976a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80096e0:	2308      	movs	r3, #8
 80096e2:	613b      	str	r3, [r7, #16]
 80096e4:	230b      	movs	r3, #11
 80096e6:	617b      	str	r3, [r7, #20]
			continue;
 80096e8:	e022      	b.n	8009730 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80096ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da04      	bge.n	80096fc <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80096f2:	7efb      	ldrb	r3, [r7, #27]
 80096f4:	3b80      	subs	r3, #128	; 0x80
 80096f6:	4a1f      	ldr	r2, [pc, #124]	; (8009774 <create_name+0x18c>)
 80096f8:	5cd3      	ldrb	r3, [r2, r3]
 80096fa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80096fc:	7efb      	ldrb	r3, [r7, #27]
 80096fe:	4619      	mov	r1, r3
 8009700:	481d      	ldr	r0, [pc, #116]	; (8009778 <create_name+0x190>)
 8009702:	f7fe ff58 	bl	80085b6 <chk_chr>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <create_name+0x128>
 800970c:	2306      	movs	r3, #6
 800970e:	e02c      	b.n	800976a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009710:	7efb      	ldrb	r3, [r7, #27]
 8009712:	2b60      	cmp	r3, #96	; 0x60
 8009714:	d905      	bls.n	8009722 <create_name+0x13a>
 8009716:	7efb      	ldrb	r3, [r7, #27]
 8009718:	2b7a      	cmp	r3, #122	; 0x7a
 800971a:	d802      	bhi.n	8009722 <create_name+0x13a>
 800971c:	7efb      	ldrb	r3, [r7, #27]
 800971e:	3b20      	subs	r3, #32
 8009720:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	613a      	str	r2, [r7, #16]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	4413      	add	r3, r2
 800972c:	7efa      	ldrb	r2, [r7, #27]
 800972e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009730:	e7a6      	b.n	8009680 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009732:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	441a      	add	r2, r3
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <create_name+0x160>
 8009744:	2306      	movs	r3, #6
 8009746:	e010      	b.n	800976a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2be5      	cmp	r3, #229	; 0xe5
 800974e:	d102      	bne.n	8009756 <create_name+0x16e>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2205      	movs	r2, #5
 8009754:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009756:	7efb      	ldrb	r3, [r7, #27]
 8009758:	2b20      	cmp	r3, #32
 800975a:	d801      	bhi.n	8009760 <create_name+0x178>
 800975c:	2204      	movs	r2, #4
 800975e:	e000      	b.n	8009762 <create_name+0x17a>
 8009760:	2200      	movs	r2, #0
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	330b      	adds	r3, #11
 8009766:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009768:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	0800c398 	.word	0x0800c398
 8009778:	0800c328 	.word	0x0800c328

0800977c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b2f      	cmp	r3, #47	; 0x2f
 8009796:	d00b      	beq.n	80097b0 <follow_path+0x34>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b5c      	cmp	r3, #92	; 0x5c
 800979e:	d007      	beq.n	80097b0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	609a      	str	r2, [r3, #8]
 80097a8:	e00d      	b.n	80097c6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b2f      	cmp	r3, #47	; 0x2f
 80097b6:	d0f8      	beq.n	80097aa <follow_path+0x2e>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b5c      	cmp	r3, #92	; 0x5c
 80097be:	d0f4      	beq.n	80097aa <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2200      	movs	r2, #0
 80097c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b1f      	cmp	r3, #31
 80097cc:	d80a      	bhi.n	80097e4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2280      	movs	r2, #128	; 0x80
 80097d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff fc99 	bl	8009110 <dir_sdi>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
 80097e2:	e05b      	b.n	800989c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097e4:	463b      	mov	r3, r7
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fefd 	bl	80095e8 <create_name>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d14c      	bne.n	8009892 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fe6e 	bl	80094da <dir_find>
 80097fe:	4603      	mov	r3, r0
 8009800:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009808:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01b      	beq.n	8009848 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b04      	cmp	r3, #4
 8009814:	d13f      	bne.n	8009896 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	f003 0320 	and.w	r3, r3, #32
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d031      	beq.n	800988e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2280      	movs	r2, #128	; 0x80
 800982e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8009836:	e02e      	b.n	8009896 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d129      	bne.n	8009896 <follow_path+0x11a>
 8009842:	2305      	movs	r3, #5
 8009844:	75fb      	strb	r3, [r7, #23]
				break;
 8009846:	e026      	b.n	8009896 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d123      	bne.n	800989a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	799b      	ldrb	r3, [r3, #6]
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800985e:	2305      	movs	r3, #5
 8009860:	75fb      	strb	r3, [r7, #23]
 8009862:	e01b      	b.n	800989c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	8992      	ldrh	r2, [r2, #12]
 8009872:	fbb3 f0f2 	udiv	r0, r3, r2
 8009876:	fb02 f200 	mul.w	r2, r2, r0
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	440b      	add	r3, r1
 800987e:	4619      	mov	r1, r3
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7ff fdeb 	bl	800945c <ld_clust>
 8009886:	4602      	mov	r2, r0
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	609a      	str	r2, [r3, #8]
 800988c:	e7aa      	b.n	80097e4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800988e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009890:	e7a8      	b.n	80097e4 <follow_path+0x68>
			if (res != FR_OK) break;
 8009892:	bf00      	nop
 8009894:	e002      	b.n	800989c <follow_path+0x120>
				break;
 8009896:	bf00      	nop
 8009898:	e000      	b.n	800989c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800989a:	bf00      	nop
			}
		}
	}

	return res;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d031      	beq.n	8009920 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	e002      	b.n	80098ca <get_ldnumber+0x24>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	3301      	adds	r3, #1
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d903      	bls.n	80098da <get_ldnumber+0x34>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b3a      	cmp	r3, #58	; 0x3a
 80098d8:	d1f4      	bne.n	80098c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b3a      	cmp	r3, #58	; 0x3a
 80098e0:	d11c      	bne.n	800991c <get_ldnumber+0x76>
			tp = *path;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	60fa      	str	r2, [r7, #12]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	3b30      	subs	r3, #48	; 0x30
 80098f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d80e      	bhi.n	8009918 <get_ldnumber+0x72>
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d10a      	bne.n	8009918 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d107      	bne.n	8009918 <get_ldnumber+0x72>
					vol = (int)i;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	3301      	adds	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	e002      	b.n	8009922 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009920:	693b      	ldr	r3, [r7, #16]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
	...

08009930 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	70da      	strb	r2, [r3, #3]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009946:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fe fffe 	bl	800894c <move_window>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <check_fs+0x2a>
 8009956:	2304      	movs	r3, #4
 8009958:	e038      	b.n	80099cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3338      	adds	r3, #56	; 0x38
 800995e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fd42 	bl	80083ec <ld_word>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009970:	429a      	cmp	r2, r3
 8009972:	d001      	beq.n	8009978 <check_fs+0x48>
 8009974:	2303      	movs	r3, #3
 8009976:	e029      	b.n	80099cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800997e:	2be9      	cmp	r3, #233	; 0xe9
 8009980:	d009      	beq.n	8009996 <check_fs+0x66>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009988:	2beb      	cmp	r3, #235	; 0xeb
 800998a:	d11e      	bne.n	80099ca <check_fs+0x9a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009992:	2b90      	cmp	r3, #144	; 0x90
 8009994:	d119      	bne.n	80099ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3338      	adds	r3, #56	; 0x38
 800999a:	3336      	adds	r3, #54	; 0x36
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe fd3d 	bl	800841c <ld_dword>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099a8:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <check_fs+0xa4>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d101      	bne.n	80099b2 <check_fs+0x82>
 80099ae:	2300      	movs	r3, #0
 80099b0:	e00c      	b.n	80099cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3338      	adds	r3, #56	; 0x38
 80099b6:	3352      	adds	r3, #82	; 0x52
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fd2f 	bl	800841c <ld_dword>
 80099be:	4603      	mov	r3, r0
 80099c0:	4a05      	ldr	r2, [pc, #20]	; (80099d8 <check_fs+0xa8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d101      	bne.n	80099ca <check_fs+0x9a>
 80099c6:	2300      	movs	r3, #0
 80099c8:	e000      	b.n	80099cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80099ca:	2302      	movs	r3, #2
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	00544146 	.word	0x00544146
 80099d8:	33544146 	.word	0x33544146

080099dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b096      	sub	sp, #88	; 0x58
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	4613      	mov	r3, r2
 80099e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff ff58 	bl	80098a6 <get_ldnumber>
 80099f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da01      	bge.n	8009a02 <find_volume+0x26>
 80099fe:	230b      	movs	r3, #11
 8009a00:	e268      	b.n	8009ed4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009a02:	4ab0      	ldr	r2, [pc, #704]	; (8009cc4 <find_volume+0x2e8>)
 8009a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <find_volume+0x3a>
 8009a12:	230c      	movs	r3, #12
 8009a14:	e25e      	b.n	8009ed4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01a      	beq.n	8009a62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe fc3d 	bl	80082b0 <disk_status>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10c      	bne.n	8009a62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d007      	beq.n	8009a5e <find_volume+0x82>
 8009a4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009a5a:	230a      	movs	r3, #10
 8009a5c:	e23a      	b.n	8009ed4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e238      	b.n	8009ed4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fc35 	bl	80082e4 <disk_initialize>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e221      	b.n	8009ed4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <find_volume+0xca>
 8009a96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a9a:	f003 0304 	and.w	r3, r3, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	e216      	b.n	8009ed4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	7858      	ldrb	r0, [r3, #1]
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	330c      	adds	r3, #12
 8009aae:	461a      	mov	r2, r3
 8009ab0:	2102      	movs	r1, #2
 8009ab2:	f7fe fc7d 	bl	80083b0 <disk_ioctl>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <find_volume+0xe4>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e209      	b.n	8009ed4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	899b      	ldrh	r3, [r3, #12]
 8009ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac8:	d80d      	bhi.n	8009ae6 <find_volume+0x10a>
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	899b      	ldrh	r3, [r3, #12]
 8009ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad2:	d308      	bcc.n	8009ae6 <find_volume+0x10a>
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad6:	899b      	ldrh	r3, [r3, #12]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009adc:	899b      	ldrh	r3, [r3, #12]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <find_volume+0x10e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e1f4      	b.n	8009ed4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009af2:	f7ff ff1d 	bl	8009930 <check_fs>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d14b      	bne.n	8009b9c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b04:	2300      	movs	r3, #0
 8009b06:	643b      	str	r3, [r7, #64]	; 0x40
 8009b08:	e01f      	b.n	8009b4a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009b18:	4413      	add	r3, r2
 8009b1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	3304      	adds	r3, #4
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <find_volume+0x158>
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	3308      	adds	r3, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fc76 	bl	800841c <ld_dword>
 8009b30:	4602      	mov	r2, r0
 8009b32:	e000      	b.n	8009b36 <find_volume+0x15a>
 8009b34:	2200      	movs	r2, #0
 8009b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009b3e:	440b      	add	r3, r1
 8009b40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b46:	3301      	adds	r3, #1
 8009b48:	643b      	str	r3, [r7, #64]	; 0x40
 8009b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d9dc      	bls.n	8009b0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009b50:	2300      	movs	r3, #0
 8009b52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <find_volume+0x184>
 8009b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b68:	4413      	add	r3, r2
 8009b6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009b6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <find_volume+0x1a6>
 8009b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b7a:	f7ff fed9 	bl	8009930 <check_fs>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	e000      	b.n	8009b84 <find_volume+0x1a8>
 8009b82:	2303      	movs	r3, #3
 8009b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d905      	bls.n	8009b9c <find_volume+0x1c0>
 8009b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b92:	3301      	adds	r3, #1
 8009b94:	643b      	str	r3, [r7, #64]	; 0x40
 8009b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d9e1      	bls.n	8009b60 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d101      	bne.n	8009ba8 <find_volume+0x1cc>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e195      	b.n	8009ed4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d901      	bls.n	8009bb4 <find_volume+0x1d8>
 8009bb0:	230d      	movs	r3, #13
 8009bb2:	e18f      	b.n	8009ed4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	3338      	adds	r3, #56	; 0x38
 8009bb8:	330b      	adds	r3, #11
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fc16 	bl	80083ec <ld_word>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	899b      	ldrh	r3, [r3, #12]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d001      	beq.n	8009bd0 <find_volume+0x1f4>
 8009bcc:	230d      	movs	r3, #13
 8009bce:	e181      	b.n	8009ed4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	3338      	adds	r3, #56	; 0x38
 8009bd4:	3316      	adds	r3, #22
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fc08 	bl	80083ec <ld_word>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d106      	bne.n	8009bf4 <find_volume+0x218>
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	3338      	adds	r3, #56	; 0x38
 8009bea:	3324      	adds	r3, #36	; 0x24
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fc15 	bl	800841c <ld_dword>
 8009bf2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bf8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	789b      	ldrb	r3, [r3, #2]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d005      	beq.n	8009c18 <find_volume+0x23c>
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	789b      	ldrb	r3, [r3, #2]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d001      	beq.n	8009c18 <find_volume+0x23c>
 8009c14:	230d      	movs	r3, #13
 8009c16:	e15d      	b.n	8009ed4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	789b      	ldrb	r3, [r3, #2]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c34:	895b      	ldrh	r3, [r3, #10]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d008      	beq.n	8009c4c <find_volume+0x270>
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3c:	895b      	ldrh	r3, [r3, #10]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	895b      	ldrh	r3, [r3, #10]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	4013      	ands	r3, r2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <find_volume+0x274>
 8009c4c:	230d      	movs	r3, #13
 8009c4e:	e141      	b.n	8009ed4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	3338      	adds	r3, #56	; 0x38
 8009c54:	3311      	adds	r3, #17
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fbc8 	bl	80083ec <ld_word>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	891b      	ldrh	r3, [r3, #8]
 8009c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c6a:	8992      	ldrh	r2, [r2, #12]
 8009c6c:	0952      	lsrs	r2, r2, #5
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c74:	fb02 f201 	mul.w	r2, r2, r1
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <find_volume+0x2a8>
 8009c80:	230d      	movs	r3, #13
 8009c82:	e127      	b.n	8009ed4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	3338      	adds	r3, #56	; 0x38
 8009c88:	3313      	adds	r3, #19
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fbae 	bl	80083ec <ld_word>
 8009c90:	4603      	mov	r3, r0
 8009c92:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d106      	bne.n	8009ca8 <find_volume+0x2cc>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	3338      	adds	r3, #56	; 0x38
 8009c9e:	3320      	adds	r3, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fbbb 	bl	800841c <ld_dword>
 8009ca6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	3338      	adds	r3, #56	; 0x38
 8009cac:	330e      	adds	r3, #14
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fb9c 	bl	80083ec <ld_word>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <find_volume+0x2ec>
 8009cbe:	230d      	movs	r3, #13
 8009cc0:	e108      	b.n	8009ed4 <find_volume+0x4f8>
 8009cc2:	bf00      	nop
 8009cc4:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009cc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ccc:	4413      	add	r3, r2
 8009cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd0:	8911      	ldrh	r1, [r2, #8]
 8009cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd4:	8992      	ldrh	r2, [r2, #12]
 8009cd6:	0952      	lsrs	r2, r2, #5
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	fbb1 f2f2 	udiv	r2, r1, r2
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d201      	bcs.n	8009cf0 <find_volume+0x314>
 8009cec:	230d      	movs	r3, #13
 8009cee:	e0f1      	b.n	8009ed4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cf8:	8952      	ldrh	r2, [r2, #10]
 8009cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <find_volume+0x32e>
 8009d06:	230d      	movs	r3, #13
 8009d08:	e0e4      	b.n	8009ed4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d802      	bhi.n	8009d20 <find_volume+0x344>
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d802      	bhi.n	8009d30 <find_volume+0x354>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	1c9a      	adds	r2, r3, #2
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d3c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009d3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d42:	441a      	add	r2, r3
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	441a      	add	r2, r3
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d11e      	bne.n	8009d98 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	3338      	adds	r3, #56	; 0x38
 8009d5e:	332a      	adds	r3, #42	; 0x2a
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fb43 	bl	80083ec <ld_word>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <find_volume+0x394>
 8009d6c:	230d      	movs	r3, #13
 8009d6e:	e0b1      	b.n	8009ed4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	891b      	ldrh	r3, [r3, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <find_volume+0x3a0>
 8009d78:	230d      	movs	r3, #13
 8009d7a:	e0ab      	b.n	8009ed4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	3338      	adds	r3, #56	; 0x38
 8009d80:	332c      	adds	r3, #44	; 0x2c
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fb4a 	bl	800841c <ld_dword>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	647b      	str	r3, [r7, #68]	; 0x44
 8009d96:	e01f      	b.n	8009dd8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9a:	891b      	ldrh	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <find_volume+0x3c8>
 8009da0:	230d      	movs	r3, #13
 8009da2:	e097      	b.n	8009ed4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009daa:	441a      	add	r2, r3
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d103      	bne.n	8009dc0 <find_volume+0x3e4>
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	e00a      	b.n	8009dd6 <find_volume+0x3fa>
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	69da      	ldr	r2, [r3, #28]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	4413      	add	r3, r2
 8009dca:	085a      	lsrs	r2, r3, #1
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009dd6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	899b      	ldrh	r3, [r3, #12]
 8009de0:	4619      	mov	r1, r3
 8009de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de4:	440b      	add	r3, r1
 8009de6:	3b01      	subs	r3, #1
 8009de8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dea:	8989      	ldrh	r1, [r1, #12]
 8009dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d201      	bcs.n	8009df8 <find_volume+0x41c>
 8009df4:	230d      	movs	r3, #13
 8009df6:	e06d      	b.n	8009ed4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dfe:	615a      	str	r2, [r3, #20]
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	695a      	ldr	r2, [r3, #20]
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	2280      	movs	r2, #128	; 0x80
 8009e0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d149      	bne.n	8009eaa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	3338      	adds	r3, #56	; 0x38
 8009e1a:	3330      	adds	r3, #48	; 0x30
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fae5 	bl	80083ec <ld_word>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d140      	bne.n	8009eaa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e30:	f7fe fd8c 	bl	800894c <move_window>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d137      	bne.n	8009eaa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	3338      	adds	r3, #56	; 0x38
 8009e44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe facf 	bl	80083ec <ld_word>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	461a      	mov	r2, r3
 8009e52:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d127      	bne.n	8009eaa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	3338      	adds	r3, #56	; 0x38
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fadc 	bl	800841c <ld_dword>
 8009e64:	4603      	mov	r3, r0
 8009e66:	4a1d      	ldr	r2, [pc, #116]	; (8009edc <find_volume+0x500>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d11e      	bne.n	8009eaa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	3338      	adds	r3, #56	; 0x38
 8009e70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fad1 	bl	800841c <ld_dword>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4a18      	ldr	r2, [pc, #96]	; (8009ee0 <find_volume+0x504>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d113      	bne.n	8009eaa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	3338      	adds	r3, #56	; 0x38
 8009e86:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fac6 	bl	800841c <ld_dword>
 8009e90:	4602      	mov	r2, r0
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	3338      	adds	r3, #56	; 0x38
 8009e9a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fabc 	bl	800841c <ld_dword>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009eb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <find_volume+0x508>)
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <find_volume+0x508>)
 8009ebc:	801a      	strh	r2, [r3, #0]
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <find_volume+0x508>)
 8009ec0:	881a      	ldrh	r2, [r3, #0]
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	2200      	movs	r2, #0
 8009eca:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ece:	f7fe fcd5 	bl	800887c <clear_lock>
#endif
	return FR_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3758      	adds	r7, #88	; 0x58
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	41615252 	.word	0x41615252
 8009ee0:	61417272 	.word	0x61417272
 8009ee4:	200000b4 	.word	0x200000b4

08009ee8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ef2:	2309      	movs	r3, #9
 8009ef4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01c      	beq.n	8009f36 <validate+0x4e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d018      	beq.n	8009f36 <validate+0x4e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d013      	beq.n	8009f36 <validate+0x4e>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	889a      	ldrh	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	88db      	ldrh	r3, [r3, #6]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d10c      	bne.n	8009f36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f9c4 	bl	80082b0 <disk_status>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <validate+0x4e>
			res = FR_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <validate+0x5a>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	e000      	b.n	8009f44 <validate+0x5c>
 8009f42:	2300      	movs	r3, #0
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	6013      	str	r3, [r2, #0]
	return res;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009f66:	f107 0310 	add.w	r3, r7, #16
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff fc9b 	bl	80098a6 <get_ldnumber>
 8009f70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	da01      	bge.n	8009f7c <f_mount+0x28>
 8009f78:	230b      	movs	r3, #11
 8009f7a:	e02b      	b.n	8009fd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009f7c:	4a17      	ldr	r2, [pc, #92]	; (8009fdc <f_mount+0x88>)
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009f8c:	69b8      	ldr	r0, [r7, #24]
 8009f8e:	f7fe fc75 	bl	800887c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	490d      	ldr	r1, [pc, #52]	; (8009fdc <f_mount+0x88>)
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <f_mount+0x66>
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d001      	beq.n	8009fbe <f_mount+0x6a>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e00a      	b.n	8009fd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009fbe:	f107 010c 	add.w	r1, r7, #12
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fd07 	bl	80099dc <find_volume>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3720      	adds	r7, #32
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	200000b0 	.word	0x200000b0

08009fe0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b098      	sub	sp, #96	; 0x60
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <f_open+0x18>
 8009ff4:	2309      	movs	r3, #9
 8009ff6:	e1bb      	b.n	800a370 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ffe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a000:	79fa      	ldrb	r2, [r7, #7]
 800a002:	f107 0110 	add.w	r1, r7, #16
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fce6 	bl	80099dc <find_volume>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 819f 	bne.w	800a35e <f_open+0x37e>
		dj.obj.fs = fs;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	f107 0314 	add.w	r3, r7, #20
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fba5 	bl	800977c <follow_path>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d11a      	bne.n	800a076 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a040:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a044:	b25b      	sxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	da03      	bge.n	800a052 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a04a:	2306      	movs	r3, #6
 800a04c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a050:	e011      	b.n	800a076 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	f023 0301 	bic.w	r3, r3, #1
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	461a      	mov	r2, r3
 800a064:	f107 0314 	add.w	r3, r7, #20
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fabe 	bl	80085ec <chk_lock>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	f003 031c 	and.w	r3, r3, #28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d07f      	beq.n	800a180 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a084:	2b00      	cmp	r3, #0
 800a086:	d017      	beq.n	800a0b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	d10e      	bne.n	800a0ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a090:	f7fe fb08 	bl	80086a4 <enq_lock>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <f_open+0xc8>
 800a09a:	f107 0314 	add.w	r3, r7, #20
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff fa70 	bl	8009584 <dir_register>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	e000      	b.n	800a0aa <f_open+0xca>
 800a0a8:	2312      	movs	r3, #18
 800a0aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	f043 0308 	orr.w	r3, r3, #8
 800a0b4:	71fb      	strb	r3, [r7, #7]
 800a0b6:	e010      	b.n	800a0da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a0b8:	7ebb      	ldrb	r3, [r7, #26]
 800a0ba:	f003 0311 	and.w	r3, r3, #17
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <f_open+0xea>
					res = FR_DENIED;
 800a0c2:	2307      	movs	r3, #7
 800a0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a0c8:	e007      	b.n	800a0da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <f_open+0xfa>
 800a0d4:	2308      	movs	r3, #8
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a0da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d168      	bne.n	800a1b4 <f_open+0x1d4>
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	f003 0308 	and.w	r3, r3, #8
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d063      	beq.n	800a1b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a0ec:	f7fb f8e4 	bl	80052b8 <get_fattime>
 800a0f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	330e      	adds	r3, #14
 800a0f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe f9cd 	bl	8008498 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a100:	3316      	adds	r3, #22
 800a102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe f9c7 	bl	8008498 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	330b      	adds	r3, #11
 800a10e:	2220      	movs	r2, #32
 800a110:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a116:	4611      	mov	r1, r2
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff f99f 	bl	800945c <ld_clust>
 800a11e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a124:	2200      	movs	r2, #0
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff f9b7 	bl	800949a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	331c      	adds	r3, #28
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe f9b0 	bl	8008498 <st_dword>
					fs->wflag = 1;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2201      	movs	r2, #1
 800a13c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d037      	beq.n	800a1b4 <f_open+0x1d4>
						dw = fs->winsect;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a148:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a14a:	f107 0314 	add.w	r3, r7, #20
 800a14e:	2200      	movs	r2, #0
 800a150:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fea7 	bl	8008ea6 <remove_chain>
 800a158:	4603      	mov	r3, r0
 800a15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a15e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a162:	2b00      	cmp	r3, #0
 800a164:	d126      	bne.n	800a1b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fbee 	bl	800894c <move_window>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a17a:	3a01      	subs	r2, #1
 800a17c:	611a      	str	r2, [r3, #16]
 800a17e:	e019      	b.n	800a1b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a184:	2b00      	cmp	r3, #0
 800a186:	d115      	bne.n	800a1b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a188:	7ebb      	ldrb	r3, [r7, #26]
 800a18a:	f003 0310 	and.w	r3, r3, #16
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a192:	2304      	movs	r3, #4
 800a194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a198:	e00c      	b.n	800a1b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	f003 0302 	and.w	r3, r3, #2
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d007      	beq.n	800a1b4 <f_open+0x1d4>
 800a1a4:	7ebb      	ldrb	r3, [r7, #26]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <f_open+0x1d4>
						res = FR_DENIED;
 800a1ae:	2307      	movs	r3, #7
 800a1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a1b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d128      	bne.n	800a20e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	f003 0308 	and.w	r3, r3, #8
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bf14      	ite	ne
 800a1e6:	2301      	movne	r3, #1
 800a1e8:	2300      	moveq	r3, #0
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f107 0314 	add.w	r3, r7, #20
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe fa77 	bl	80086e8 <inc_lock>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <f_open+0x22e>
 800a208:	2302      	movs	r3, #2
 800a20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a20e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a212:	2b00      	cmp	r3, #0
 800a214:	f040 80a3 	bne.w	800a35e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff f91c 	bl	800945c <ld_clust>
 800a224:	4602      	mov	r2, r0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22c:	331c      	adds	r3, #28
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe f8f4 	bl	800841c <ld_dword>
 800a234:	4602      	mov	r2, r0
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	88da      	ldrh	r2, [r3, #6]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	79fa      	ldrb	r2, [r7, #7]
 800a252:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3330      	adds	r3, #48	; 0x30
 800a26a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe f95e 	bl	8008532 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d06e      	beq.n	800a35e <f_open+0x37e>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d06a      	beq.n	800a35e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	895b      	ldrh	r3, [r3, #10]
 800a294:	461a      	mov	r2, r3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	899b      	ldrh	r3, [r3, #12]
 800a29a:	fb03 f302 	mul.w	r3, r3, r2
 800a29e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ac:	e016      	b.n	800a2dc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fc07 	bl	8008ac6 <get_fat>
 800a2b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a2ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d802      	bhi.n	800a2c6 <f_open+0x2e6>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a2c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2cc:	d102      	bne.n	800a2d4 <f_open+0x2f4>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	657b      	str	r3, [r7, #84]	; 0x54
 800a2dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d103      	bne.n	800a2ec <f_open+0x30c>
 800a2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d8e0      	bhi.n	800a2ae <f_open+0x2ce>
				}
				fp->clust = clst;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a2f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d131      	bne.n	800a35e <f_open+0x37e>
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	899b      	ldrh	r3, [r3, #12]
 800a2fe:	461a      	mov	r2, r3
 800a300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a302:	fbb3 f1f2 	udiv	r1, r3, r2
 800a306:	fb02 f201 	mul.w	r2, r2, r1
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d026      	beq.n	800a35e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fbb7 	bl	8008a88 <clust2sect>
 800a31a:	6478      	str	r0, [r7, #68]	; 0x44
 800a31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <f_open+0x34a>
						res = FR_INT_ERR;
 800a322:	2302      	movs	r3, #2
 800a324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a328:	e019      	b.n	800a35e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	899b      	ldrh	r3, [r3, #12]
 800a32e:	461a      	mov	r2, r3
 800a330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a332:	fbb3 f2f2 	udiv	r2, r3, r2
 800a336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a338:	441a      	add	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	7858      	ldrb	r0, [r3, #1]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	2301      	movs	r3, #1
 800a34e:	f7fd ffef 	bl	8008330 <disk_read>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <f_open+0x37e>
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a35e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <f_open+0x38c>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a370:	4618      	mov	r0, r3
 800a372:	3760      	adds	r7, #96	; 0x60
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08c      	sub	sp, #48	; 0x30
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f107 0210 	add.w	r2, r7, #16
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fda5 	bl	8009ee8 <validate>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a3a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <f_write+0x44>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7d5b      	ldrb	r3, [r3, #21]
 800a3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <f_write+0x4a>
 800a3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3c0:	e16a      	b.n	800a698 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	7d1b      	ldrb	r3, [r3, #20]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <f_write+0x5a>
 800a3ce:	2307      	movs	r3, #7
 800a3d0:	e162      	b.n	800a698 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	699a      	ldr	r2, [r3, #24]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	441a      	add	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	f080 814c 	bcs.w	800a67c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	43db      	mvns	r3, r3
 800a3ea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a3ec:	e146      	b.n	800a67c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	8992      	ldrh	r2, [r2, #12]
 800a3f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3fa:	fb02 f201 	mul.w	r2, r2, r1
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 80f1 	bne.w	800a5e8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	8992      	ldrh	r2, [r2, #12]
 800a40e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	8952      	ldrh	r2, [r2, #10]
 800a416:	3a01      	subs	r2, #1
 800a418:	4013      	ands	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d143      	bne.n	800a4aa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10c      	bne.n	800a444 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d11a      	bne.n	800a46c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fd98 	bl	8008f70 <create_chain>
 800a440:	62b8      	str	r0, [r7, #40]	; 0x28
 800a442:	e013      	b.n	800a46c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d007      	beq.n	800a45c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	4619      	mov	r1, r3
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7fe fe24 	bl	80090a0 <clmt_clust>
 800a458:	62b8      	str	r0, [r7, #40]	; 0x28
 800a45a:	e007      	b.n	800a46c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	4619      	mov	r1, r3
 800a464:	4610      	mov	r0, r2
 800a466:	f7fe fd83 	bl	8008f70 <create_chain>
 800a46a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 8109 	beq.w	800a686 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	2b01      	cmp	r3, #1
 800a478:	d104      	bne.n	800a484 <f_write+0x10c>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2202      	movs	r2, #2
 800a47e:	755a      	strb	r2, [r3, #21]
 800a480:	2302      	movs	r3, #2
 800a482:	e109      	b.n	800a698 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48a:	d104      	bne.n	800a496 <f_write+0x11e>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	755a      	strb	r2, [r3, #21]
 800a492:	2301      	movs	r3, #1
 800a494:	e100      	b.n	800a698 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a49a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <f_write+0x132>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	7d1b      	ldrb	r3, [r3, #20]
 800a4ae:	b25b      	sxtb	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da18      	bge.n	800a4e6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	7858      	ldrb	r0, [r3, #1]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a1a      	ldr	r2, [r3, #32]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	f7fd ff54 	bl	8008370 <disk_write>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <f_write+0x160>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	755a      	strb	r2, [r3, #21]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e0df      	b.n	800a698 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	7d1b      	ldrb	r3, [r3, #20]
 800a4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fe faca 	bl	8008a88 <clust2sect>
 800a4f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <f_write+0x18e>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2202      	movs	r2, #2
 800a500:	755a      	strb	r2, [r3, #21]
 800a502:	2302      	movs	r3, #2
 800a504:	e0c8      	b.n	800a698 <f_write+0x320>
			sect += csect;
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	4413      	add	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	899b      	ldrh	r3, [r3, #12]
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	fbb3 f3f2 	udiv	r3, r3, r2
 800a51a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d043      	beq.n	800a5aa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	4413      	add	r3, r2
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	8952      	ldrh	r2, [r2, #10]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d905      	bls.n	800a53c <f_write+0x1c4>
					cc = fs->csize - csect;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	461a      	mov	r2, r3
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	7858      	ldrb	r0, [r3, #1]
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	69f9      	ldr	r1, [r7, #28]
 800a546:	f7fd ff13 	bl	8008370 <disk_write>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d004      	beq.n	800a55a <f_write+0x1e2>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2201      	movs	r2, #1
 800a554:	755a      	strb	r2, [r3, #21]
 800a556:	2301      	movs	r3, #1
 800a558:	e09e      	b.n	800a698 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a1a      	ldr	r2, [r3, #32]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	6a3a      	ldr	r2, [r7, #32]
 800a564:	429a      	cmp	r2, r3
 800a566:	d918      	bls.n	800a59a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1a      	ldr	r2, [r3, #32]
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	8992      	ldrh	r2, [r2, #12]
 800a57a:	fb02 f303 	mul.w	r3, r2, r3
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	18d1      	adds	r1, r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	461a      	mov	r2, r3
 800a588:	f7fd ffb2 	bl	80084f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	7d1b      	ldrb	r3, [r3, #20]
 800a590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a594:	b2da      	uxtb	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	899b      	ldrh	r3, [r3, #12]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	fb02 f303 	mul.w	r3, r2, r3
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a5a8:	e04b      	b.n	800a642 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d016      	beq.n	800a5e2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	699a      	ldr	r2, [r3, #24]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d210      	bcs.n	800a5e2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	7858      	ldrb	r0, [r3, #1]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	f7fd feaf 	bl	8008330 <disk_read>
 800a5d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	755a      	strb	r2, [r3, #21]
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e05a      	b.n	800a698 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	899b      	ldrh	r3, [r3, #12]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	8992      	ldrh	r2, [r2, #12]
 800a5f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5fa:	fb02 f201 	mul.w	r2, r2, r1
 800a5fe:	1a9b      	subs	r3, r3, r2
 800a600:	1ac3      	subs	r3, r0, r3
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d901      	bls.n	800a610 <f_write+0x298>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	8992      	ldrh	r2, [r2, #12]
 800a61e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a622:	fb02 f200 	mul.w	r2, r2, r0
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	440b      	add	r3, r1
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	69f9      	ldr	r1, [r7, #28]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd ff5e 	bl	80084f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	7d1b      	ldrb	r3, [r3, #20]
 800a638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	4413      	add	r3, r2
 800a648:	61fb      	str	r3, [r7, #28]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	699a      	ldr	r2, [r3, #24]
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	441a      	add	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	619a      	str	r2, [r3, #24]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	429a      	cmp	r2, r3
 800a660:	bf38      	it	cc
 800a662:	461a      	movcc	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	60da      	str	r2, [r3, #12]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	441a      	add	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f47f aeb5 	bne.w	800a3ee <f_write+0x76>
 800a684:	e000      	b.n	800a688 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a686:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	7d1b      	ldrb	r3, [r3, #20]
 800a68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a690:	b2da      	uxtb	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3730      	adds	r7, #48	; 0x30
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f107 0208 	add.w	r2, r7, #8
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff fc19 	bl	8009ee8 <validate>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d168      	bne.n	800a792 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7d1b      	ldrb	r3, [r3, #20]
 800a6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d062      	beq.n	800a792 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7d1b      	ldrb	r3, [r3, #20]
 800a6d0:	b25b      	sxtb	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	da15      	bge.n	800a702 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	7858      	ldrb	r0, [r3, #1]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1a      	ldr	r2, [r3, #32]
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f7fd fe43 	bl	8008370 <disk_write>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <f_sync+0x54>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e04f      	b.n	800a794 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7d1b      	ldrb	r3, [r3, #20]
 800a6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a702:	f7fa fdd9 	bl	80052b8 <get_fattime>
 800a706:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fe f91b 	bl	800894c <move_window>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d138      	bne.n	800a792 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a724:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	330b      	adds	r3, #11
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	330b      	adds	r3, #11
 800a730:	f042 0220 	orr.w	r2, r2, #32
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	461a      	mov	r2, r3
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	f7fe fea9 	bl	800949a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f103 021c 	add.w	r2, r3, #28
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	4619      	mov	r1, r3
 800a754:	4610      	mov	r0, r2
 800a756:	f7fd fe9f 	bl	8008498 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3316      	adds	r3, #22
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	4618      	mov	r0, r3
 800a762:	f7fd fe99 	bl	8008498 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3312      	adds	r3, #18
 800a76a:	2100      	movs	r1, #0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fd fe78 	bl	8008462 <st_word>
					fs->wflag = 1;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2201      	movs	r2, #1
 800a776:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe f914 	bl	80089a8 <sync_fs>
 800a780:	4603      	mov	r3, r0
 800a782:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7d1b      	ldrb	r3, [r3, #20]
 800a788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a792:	7dfb      	ldrb	r3, [r7, #23]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff ff7b 	bl	800a6a0 <f_sync>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d118      	bne.n	800a7e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f107 0208 	add.w	r2, r7, #8
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fb93 	bl	8009ee8 <validate>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10c      	bne.n	800a7e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe f817 	bl	8008804 <dec_lock>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b091      	sub	sp, #68	; 0x44
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a7f8:	f107 0108 	add.w	r1, r7, #8
 800a7fc:	1d3b      	adds	r3, r7, #4
 800a7fe:	2200      	movs	r2, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff f8eb 	bl	80099dc <find_volume>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800a80c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a810:	2b00      	cmp	r3, #0
 800a812:	d131      	bne.n	800a878 <f_chdir+0x88>
		dj.obj.fs = fs;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	f107 030c 	add.w	r3, r7, #12
 800a81e:	4611      	mov	r1, r2
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe ffab 	bl	800977c <follow_path>
 800a826:	4603      	mov	r3, r0
 800a828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 800a82c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11a      	bne.n	800a86a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a834:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a838:	b25b      	sxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	da03      	bge.n	800a846 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	619a      	str	r2, [r3, #24]
 800a844:	e011      	b.n	800a86a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800a846:	7cbb      	ldrb	r3, [r7, #18]
 800a848:	f003 0310 	and.w	r3, r3, #16
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d009      	beq.n	800a864 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a854:	68bc      	ldr	r4, [r7, #8]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fdff 	bl	800945c <ld_clust>
 800a85e:	4603      	mov	r3, r0
 800a860:	61a3      	str	r3, [r4, #24]
 800a862:	e002      	b.n	800a86a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800a864:	2305      	movs	r3, #5
 800a866:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a86a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d102      	bne.n	800a878 <f_chdir+0x88>
 800a872:	2305      	movs	r3, #5
 800a874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 800a878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3744      	adds	r7, #68	; 0x44
 800a880:	46bd      	mov	sp, r7
 800a882:	bd90      	pop	{r4, r7, pc}

0800a884 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b096      	sub	sp, #88	; 0x58
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a88c:	f107 0108 	add.w	r1, r7, #8
 800a890:	1d3b      	adds	r3, r7, #4
 800a892:	2202      	movs	r2, #2
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff f8a1 	bl	80099dc <find_volume>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800a8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 80ff 	bne.w	800aaac <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe ff60 	bl	800977c <follow_path>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a8c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d102      	bne.n	800a8d0 <f_mkdir+0x4c>
 800a8ca:	2308      	movs	r3, #8
 800a8cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800a8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d108      	bne.n	800a8ea <f_mkdir+0x66>
 800a8d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800a8e4:	2306      	movs	r3, #6
 800a8e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a8ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	f040 80dc 	bne.w	800aaac <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe fb38 	bl	8008f70 <create_chain>
 800a900:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	895b      	ldrh	r3, [r3, #10]
 800a906:	461a      	mov	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	899b      	ldrh	r3, [r3, #12]
 800a90c:	fb03 f302 	mul.w	r3, r3, r2
 800a910:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <f_mkdir+0xa0>
 800a91e:	2307      	movs	r3, #7
 800a920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800a924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a926:	2b01      	cmp	r3, #1
 800a928:	d102      	bne.n	800a930 <f_mkdir+0xac>
 800a92a:	2302      	movs	r3, #2
 800a92c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a936:	d102      	bne.n	800a93e <f_mkdir+0xba>
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a93e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <f_mkdir+0xd0>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fd ffbb 	bl	80088c4 <sync_window>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800a954:	f7fa fcb0 	bl	80052b8 <get_fattime>
 800a958:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a95a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d16c      	bne.n	800aa3c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe f88e 	bl	8008a88 <clust2sect>
 800a96c:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3338      	adds	r3, #56	; 0x38
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	899b      	ldrh	r3, [r3, #12]
 800a978:	461a      	mov	r2, r3
 800a97a:	2100      	movs	r1, #0
 800a97c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a97e:	f7fd fdd8 	bl	8008532 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a982:	220b      	movs	r2, #11
 800a984:	2120      	movs	r1, #32
 800a986:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a988:	f7fd fdd3 	bl	8008532 <mem_set>
					dir[DIR_Name] = '.';
 800a98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98e:	222e      	movs	r2, #46	; 0x2e
 800a990:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	330b      	adds	r3, #11
 800a996:	2210      	movs	r2, #16
 800a998:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a99c:	3316      	adds	r3, #22
 800a99e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd fd79 	bl	8008498 <st_dword>
					st_clust(fs, dir, dcl);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fd74 	bl	800949a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b4:	3320      	adds	r3, #32
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fd98 	bl	80084f0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c2:	3321      	adds	r3, #33	; 0x21
 800a9c4:	222e      	movs	r2, #46	; 0x2e
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d106      	bne.n	800a9e2 <f_mkdir+0x15e>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d101      	bne.n	800a9e2 <f_mkdir+0x15e>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800a9e2:	68b8      	ldr	r0, [r7, #8]
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e6:	3320      	adds	r3, #32
 800a9e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	f7fe fd55 	bl	800949a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	895b      	ldrh	r3, [r3, #10]
 800a9f4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9f6:	e01c      	b.n	800aa32 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800a9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2201      	movs	r2, #1
 800aa06:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fd ff5a 	bl	80088c4 <sync_window>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800aa16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10d      	bne.n	800aa3a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	899b      	ldrh	r3, [r3, #12]
 800aa22:	461a      	mov	r2, r3
 800aa24:	2100      	movs	r1, #0
 800aa26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa28:	f7fd fd83 	bl	8008532 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800aa2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	653b      	str	r3, [r7, #80]	; 0x50
 800aa32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1df      	bne.n	800a9f8 <f_mkdir+0x174>
 800aa38:	e000      	b.n	800aa3c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800aa3a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800aa3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d107      	bne.n	800aa54 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800aa44:	f107 030c 	add.w	r3, r7, #12
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fd9b 	bl	8009584 <dir_register>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800aa54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d120      	bne.n	800aa9e <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800aa60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa62:	3316      	adds	r3, #22
 800aa64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fd16 	bl	8008498 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fd11 	bl	800949a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800aa78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7a:	330b      	adds	r3, #11
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2201      	movs	r2, #1
 800aa84:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800aa86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10e      	bne.n	800aaac <f_mkdir+0x228>
					res = sync_fs(fs);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fd ff89 	bl	80089a8 <sync_fs>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800aa9c:	e006      	b.n	800aaac <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800aa9e:	f107 030c 	add.w	r3, r7, #12
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe f9fd 	bl	8008ea6 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800aaac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3758      	adds	r7, #88	; 0x58
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aac6:	2301      	movs	r3, #1
 800aac8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aace:	4b1f      	ldr	r3, [pc, #124]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aad0:	7a5b      	ldrb	r3, [r3, #9]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d131      	bne.n	800ab3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aad8:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aada:	7a5b      	ldrb	r3, [r3, #9]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	461a      	mov	r2, r3
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aae2:	2100      	movs	r1, #0
 800aae4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aae6:	4b19      	ldr	r3, [pc, #100]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aae8:	7a5b      	ldrb	r3, [r3, #9]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aaf6:	4b15      	ldr	r3, [pc, #84]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800aaf8:	7a5b      	ldrb	r3, [r3, #9]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	461a      	mov	r2, r3
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800ab00:	4413      	add	r3, r2
 800ab02:	79fa      	ldrb	r2, [r7, #7]
 800ab04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab06:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800ab08:	7a5b      	ldrb	r3, [r3, #9]
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	b2d1      	uxtb	r1, r2
 800ab10:	4a0e      	ldr	r2, [pc, #56]	; (800ab4c <FATFS_LinkDriverEx+0x94>)
 800ab12:	7251      	strb	r1, [r2, #9]
 800ab14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab16:	7dbb      	ldrb	r3, [r7, #22]
 800ab18:	3330      	adds	r3, #48	; 0x30
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	3301      	adds	r3, #1
 800ab24:	223a      	movs	r2, #58	; 0x3a
 800ab26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	222f      	movs	r2, #47	; 0x2f
 800ab2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	3303      	adds	r3, #3
 800ab34:	2200      	movs	r2, #0
 800ab36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	200000d8 	.word	0x200000d8

0800ab50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff ffaa 	bl	800aab8 <FATFS_LinkDriverEx>
 800ab64:	4603      	mov	r3, r0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
	...

0800ab70 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ab74:	2201      	movs	r2, #1
 800ab76:	490e      	ldr	r1, [pc, #56]	; (800abb0 <MX_USB_HOST_Init+0x40>)
 800ab78:	480e      	ldr	r0, [pc, #56]	; (800abb4 <MX_USB_HOST_Init+0x44>)
 800ab7a:	f7fc f841 	bl	8006c00 <USBH_Init>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ab84:	f7f5 ff08 	bl	8000998 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ab88:	490b      	ldr	r1, [pc, #44]	; (800abb8 <MX_USB_HOST_Init+0x48>)
 800ab8a:	480a      	ldr	r0, [pc, #40]	; (800abb4 <MX_USB_HOST_Init+0x44>)
 800ab8c:	f7fc f8c6 	bl	8006d1c <USBH_RegisterClass>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ab96:	f7f5 feff 	bl	8000998 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ab9a:	4806      	ldr	r0, [pc, #24]	; (800abb4 <MX_USB_HOST_Init+0x44>)
 800ab9c:	f7fc f94a 	bl	8006e34 <USBH_Start>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aba6:	f7f5 fef7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800abaa:	bf00      	nop
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	0800abd1 	.word	0x0800abd1
 800abb4:	20002260 	.word	0x20002260
 800abb8:	2000000c 	.word	0x2000000c

0800abbc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800abc0:	4802      	ldr	r0, [pc, #8]	; (800abcc <MX_USB_HOST_Process+0x10>)
 800abc2:	f7fc f947 	bl	8006e54 <USBH_Process>
}
 800abc6:	bf00      	nop
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20002260 	.word	0x20002260

0800abd0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	3b01      	subs	r3, #1
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d819      	bhi.n	800ac18 <USBH_UserProcess+0x48>
 800abe4:	a201      	add	r2, pc, #4	; (adr r2, 800abec <USBH_UserProcess+0x1c>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800ac19 	.word	0x0800ac19
 800abf0:	0800ac09 	.word	0x0800ac09
 800abf4:	0800ac19 	.word	0x0800ac19
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac01 	.word	0x0800ac01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ac00:	4b09      	ldr	r3, [pc, #36]	; (800ac28 <USBH_UserProcess+0x58>)
 800ac02:	2203      	movs	r2, #3
 800ac04:	701a      	strb	r2, [r3, #0]
  break;
 800ac06:	e008      	b.n	800ac1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ac08:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <USBH_UserProcess+0x58>)
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	701a      	strb	r2, [r3, #0]
  break;
 800ac0e:	e004      	b.n	800ac1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <USBH_UserProcess+0x58>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
  break;
 800ac16:	e000      	b.n	800ac1a <USBH_UserProcess+0x4a>

  default:
  break;
 800ac18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	200000e4 	.word	0x200000e4

0800ac2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	609a      	str	r2, [r3, #8]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac4c:	d13a      	bne.n	800acc4 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	4a1d      	ldr	r2, [pc, #116]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac5e:	4b1b      	ldr	r3, [pc, #108]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac70:	2302      	movs	r3, #2
 800ac72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4619      	mov	r1, r3
 800ac86:	4812      	ldr	r0, [pc, #72]	; (800acd0 <HAL_HCD_MspInit+0xa4>)
 800ac88:	f7f6 f9a2 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	6353      	str	r3, [r2, #52]	; 0x34
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	4a0a      	ldr	r2, [pc, #40]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800aca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aca6:	6453      	str	r3, [r2, #68]	; 0x44
 800aca8:	4b08      	ldr	r3, [pc, #32]	; (800accc <HAL_HCD_MspInit+0xa0>)
 800acaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800acb4:	2200      	movs	r2, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	2043      	movs	r0, #67	; 0x43
 800acba:	f7f6 f95f 	bl	8000f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acbe:	2043      	movs	r0, #67	; 0x43
 800acc0:	f7f6 f978 	bl	8000fb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acc4:	bf00      	nop
 800acc6:	3728      	adds	r7, #40	; 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40023800 	.word	0x40023800
 800acd0:	40020000 	.word	0x40020000

0800acd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fc fc89 	bl	80075fa <USBH_LL_IncTimer>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fc fcc1 	bl	8007686 <USBH_LL_Connect>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fc fcca 	bl	80076b4 <USBH_LL_Disconnect>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
 800ad34:	4613      	mov	r3, r2
 800ad36:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fc fc7b 	bl	800764e <USBH_LL_PortEnabled>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fc fc7b 	bl	800766a <USBH_LL_PortDisabled>
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d12a      	bne.n	800ade4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ad8e:	4a18      	ldr	r2, [pc, #96]	; (800adf0 <USBH_LL_Init+0x74>)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a15      	ldr	r2, [pc, #84]	; (800adf0 <USBH_LL_Init+0x74>)
 800ad9a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad9e:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <USBH_LL_Init+0x74>)
 800ada0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ada4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ada6:	4b12      	ldr	r3, [pc, #72]	; (800adf0 <USBH_LL_Init+0x74>)
 800ada8:	2208      	movs	r2, #8
 800adaa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800adac:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <USBH_LL_Init+0x74>)
 800adae:	2201      	movs	r2, #1
 800adb0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <USBH_LL_Init+0x74>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800adb8:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <USBH_LL_Init+0x74>)
 800adba:	2202      	movs	r2, #2
 800adbc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adbe:	4b0c      	ldr	r3, [pc, #48]	; (800adf0 <USBH_LL_Init+0x74>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800adc4:	480a      	ldr	r0, [pc, #40]	; (800adf0 <USBH_LL_Init+0x74>)
 800adc6:	f7f6 fad2 	bl	800136e <HAL_HCD_Init>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800add0:	f7f5 fde2 	bl	8000998 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800add4:	4806      	ldr	r0, [pc, #24]	; (800adf0 <USBH_LL_Init+0x74>)
 800add6:	f7f6 feb6 	bl	8001b46 <HAL_HCD_GetCurrentFrame>
 800adda:	4603      	mov	r3, r0
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7fc fbfc 	bl	80075dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20002638 	.word	0x20002638

0800adf4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7f6 fe25 	bl	8001a5a <HAL_HCD_Start>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f982 	bl	800b120 <USBH_Get_USB_Status>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f6 fe2d 	bl	8001aa0 <HAL_HCD_Stop>
 800ae46:	4603      	mov	r3, r0
 800ae48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 f967 	bl	800b120 <USBH_Get_USB_Status>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f6 fe75 	bl	8001b62 <HAL_HCD_GetCurrentSpeed>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d00c      	beq.n	800ae98 <USBH_LL_GetSpeed+0x38>
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d80d      	bhi.n	800ae9e <USBH_LL_GetSpeed+0x3e>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <USBH_LL_GetSpeed+0x2c>
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d003      	beq.n	800ae92 <USBH_LL_GetSpeed+0x32>
 800ae8a:	e008      	b.n	800ae9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae90:	e008      	b.n	800aea4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
    break;
 800ae96:	e005      	b.n	800aea4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ae98:	2302      	movs	r3, #2
 800ae9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9c:	e002      	b.n	800aea4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73fb      	strb	r3, [r7, #15]
    break;
 800aea2:	bf00      	nop
  }
  return  speed;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7f6 fe08 	bl	8001ada <HAL_HCD_ResetPort>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f925 	bl	800b120 <USBH_Get_USB_Status>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	4611      	mov	r1, r2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f6 fe0f 	bl	8001b1e <HAL_HCD_HC_GetXferCount>
 800af00:	4603      	mov	r3, r0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af0a:	b590      	push	{r4, r7, lr}
 800af0c:	b089      	sub	sp, #36	; 0x24
 800af0e:	af04      	add	r7, sp, #16
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	4608      	mov	r0, r1
 800af14:	4611      	mov	r1, r2
 800af16:	461a      	mov	r2, r3
 800af18:	4603      	mov	r3, r0
 800af1a:	70fb      	strb	r3, [r7, #3]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70bb      	strb	r3, [r7, #2]
 800af20:	4613      	mov	r3, r2
 800af22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af32:	787c      	ldrb	r4, [r7, #1]
 800af34:	78ba      	ldrb	r2, [r7, #2]
 800af36:	78f9      	ldrb	r1, [r7, #3]
 800af38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af3a:	9302      	str	r3, [sp, #8]
 800af3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4623      	mov	r3, r4
 800af4a:	f7f6 fa72 	bl	8001432 <HAL_HCD_HC_Init>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 f8e3 	bl	800b120 <USBH_Get_USB_Status>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	bd90      	pop	{r4, r7, pc}

0800af68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7f6 fae2 	bl	8001550 <HAL_HCD_HC_Halt>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 f8c4 	bl	800b120 <USBH_Get_USB_Status>
 800af98:	4603      	mov	r3, r0
 800af9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800afa6:	b590      	push	{r4, r7, lr}
 800afa8:	b089      	sub	sp, #36	; 0x24
 800afaa:	af04      	add	r7, sp, #16
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	4608      	mov	r0, r1
 800afb0:	4611      	mov	r1, r2
 800afb2:	461a      	mov	r2, r3
 800afb4:	4603      	mov	r3, r0
 800afb6:	70fb      	strb	r3, [r7, #3]
 800afb8:	460b      	mov	r3, r1
 800afba:	70bb      	strb	r3, [r7, #2]
 800afbc:	4613      	mov	r3, r2
 800afbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afce:	787c      	ldrb	r4, [r7, #1]
 800afd0:	78ba      	ldrb	r2, [r7, #2]
 800afd2:	78f9      	ldrb	r1, [r7, #3]
 800afd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afd8:	9303      	str	r3, [sp, #12]
 800afda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afdc:	9302      	str	r3, [sp, #8]
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4623      	mov	r3, r4
 800afea:	f7f6 fad5 	bl	8001598 <HAL_HCD_HC_SubmitRequest>
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f893 	bl	800b120 <USBH_Get_USB_Status>
 800affa:	4603      	mov	r3, r0
 800affc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	bd90      	pop	{r4, r7, pc}

0800b008 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b01a:	78fa      	ldrb	r2, [r7, #3]
 800b01c:	4611      	mov	r1, r2
 800b01e:	4618      	mov	r0, r3
 800b020:	f7f6 fd69 	bl	8001af6 <HAL_HCD_HC_GetURBState>
 800b024:	4603      	mov	r3, r0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b03a:	20c8      	movs	r0, #200	; 0xc8
 800b03c:	f7f5 fec2 	bl	8000dc4 <HAL_Delay>
  return USBH_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
 800b056:	4613      	mov	r3, r2
 800b058:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b060:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	212c      	movs	r1, #44	; 0x2c
 800b068:	fb01 f303 	mul.w	r3, r1, r3
 800b06c:	4413      	add	r3, r2
 800b06e:	333b      	adds	r3, #59	; 0x3b
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b076:	78fb      	ldrb	r3, [r7, #3]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	212c      	movs	r1, #44	; 0x2c
 800b07c:	fb01 f303 	mul.w	r3, r1, r3
 800b080:	4413      	add	r3, r2
 800b082:	3354      	adds	r3, #84	; 0x54
 800b084:	78ba      	ldrb	r2, [r7, #2]
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	e008      	b.n	800b09c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	212c      	movs	r1, #44	; 0x2c
 800b090:	fb01 f303 	mul.w	r3, r1, r3
 800b094:	4413      	add	r3, r2
 800b096:	3355      	adds	r3, #85	; 0x55
 800b098:	78ba      	ldrb	r2, [r7, #2]
 800b09a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0c0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b0c2:	78fb      	ldrb	r3, [r7, #3]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	212c      	movs	r1, #44	; 0x2c
 800b0c8:	fb01 f303 	mul.w	r3, r1, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	333b      	adds	r3, #59	; 0x3b
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	212c      	movs	r1, #44	; 0x2c
 800b0dc:	fb01 f303 	mul.w	r3, r1, r3
 800b0e0:	4413      	add	r3, r2
 800b0e2:	3354      	adds	r3, #84	; 0x54
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	e008      	b.n	800b0fc <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	212c      	movs	r1, #44	; 0x2c
 800b0f0:	fb01 f303 	mul.w	r3, r1, r3
 800b0f4:	4413      	add	r3, r2
 800b0f6:	3355      	adds	r3, #85	; 0x55
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7f5 fe56 	bl	8000dc4 <HAL_Delay>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	2b03      	cmp	r3, #3
 800b132:	d817      	bhi.n	800b164 <USBH_Get_USB_Status+0x44>
 800b134:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <USBH_Get_USB_Status+0x1c>)
 800b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13a:	bf00      	nop
 800b13c:	0800b14d 	.word	0x0800b14d
 800b140:	0800b153 	.word	0x0800b153
 800b144:	0800b159 	.word	0x0800b159
 800b148:	0800b15f 	.word	0x0800b15f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
    break;
 800b150:	e00b      	b.n	800b16a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b152:	2302      	movs	r3, #2
 800b154:	73fb      	strb	r3, [r7, #15]
    break;
 800b156:	e008      	b.n	800b16a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b158:	2301      	movs	r3, #1
 800b15a:	73fb      	strb	r3, [r7, #15]
    break;
 800b15c:	e005      	b.n	800b16a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b15e:	2302      	movs	r3, #2
 800b160:	73fb      	strb	r3, [r7, #15]
    break;
 800b162:	e002      	b.n	800b16a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b164:	2302      	movs	r3, #2
 800b166:	73fb      	strb	r3, [r7, #15]
    break;
 800b168:	bf00      	nop
  }
  return usb_status;
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <__errno>:
 800b178:	4b01      	ldr	r3, [pc, #4]	; (800b180 <__errno+0x8>)
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	2000002c 	.word	0x2000002c

0800b184 <__libc_init_array>:
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	4d0d      	ldr	r5, [pc, #52]	; (800b1bc <__libc_init_array+0x38>)
 800b188:	4c0d      	ldr	r4, [pc, #52]	; (800b1c0 <__libc_init_array+0x3c>)
 800b18a:	1b64      	subs	r4, r4, r5
 800b18c:	10a4      	asrs	r4, r4, #2
 800b18e:	2600      	movs	r6, #0
 800b190:	42a6      	cmp	r6, r4
 800b192:	d109      	bne.n	800b1a8 <__libc_init_array+0x24>
 800b194:	4d0b      	ldr	r5, [pc, #44]	; (800b1c4 <__libc_init_array+0x40>)
 800b196:	4c0c      	ldr	r4, [pc, #48]	; (800b1c8 <__libc_init_array+0x44>)
 800b198:	f001 f85c 	bl	800c254 <_init>
 800b19c:	1b64      	subs	r4, r4, r5
 800b19e:	10a4      	asrs	r4, r4, #2
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	42a6      	cmp	r6, r4
 800b1a4:	d105      	bne.n	800b1b2 <__libc_init_array+0x2e>
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ac:	4798      	blx	r3
 800b1ae:	3601      	adds	r6, #1
 800b1b0:	e7ee      	b.n	800b190 <__libc_init_array+0xc>
 800b1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b6:	4798      	blx	r3
 800b1b8:	3601      	adds	r6, #1
 800b1ba:	e7f2      	b.n	800b1a2 <__libc_init_array+0x1e>
 800b1bc:	0800c4b8 	.word	0x0800c4b8
 800b1c0:	0800c4b8 	.word	0x0800c4b8
 800b1c4:	0800c4b8 	.word	0x0800c4b8
 800b1c8:	0800c4bc 	.word	0x0800c4bc

0800b1cc <malloc>:
 800b1cc:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <malloc+0xc>)
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	f000 b871 	b.w	800b2b8 <_malloc_r>
 800b1d6:	bf00      	nop
 800b1d8:	2000002c 	.word	0x2000002c

0800b1dc <free>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <free+0xc>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f000 b819 	b.w	800b218 <_free_r>
 800b1e6:	bf00      	nop
 800b1e8:	2000002c 	.word	0x2000002c

0800b1ec <memcpy>:
 800b1ec:	440a      	add	r2, r1
 800b1ee:	4291      	cmp	r1, r2
 800b1f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1f4:	d100      	bne.n	800b1f8 <memcpy+0xc>
 800b1f6:	4770      	bx	lr
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b202:	4291      	cmp	r1, r2
 800b204:	d1f9      	bne.n	800b1fa <memcpy+0xe>
 800b206:	bd10      	pop	{r4, pc}

0800b208 <memset>:
 800b208:	4402      	add	r2, r0
 800b20a:	4603      	mov	r3, r0
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d100      	bne.n	800b212 <memset+0xa>
 800b210:	4770      	bx	lr
 800b212:	f803 1b01 	strb.w	r1, [r3], #1
 800b216:	e7f9      	b.n	800b20c <memset+0x4>

0800b218 <_free_r>:
 800b218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b21a:	2900      	cmp	r1, #0
 800b21c:	d048      	beq.n	800b2b0 <_free_r+0x98>
 800b21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b222:	9001      	str	r0, [sp, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f1a1 0404 	sub.w	r4, r1, #4
 800b22a:	bfb8      	it	lt
 800b22c:	18e4      	addlt	r4, r4, r3
 800b22e:	f000 fc21 	bl	800ba74 <__malloc_lock>
 800b232:	4a20      	ldr	r2, [pc, #128]	; (800b2b4 <_free_r+0x9c>)
 800b234:	9801      	ldr	r0, [sp, #4]
 800b236:	6813      	ldr	r3, [r2, #0]
 800b238:	4615      	mov	r5, r2
 800b23a:	b933      	cbnz	r3, 800b24a <_free_r+0x32>
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	6014      	str	r4, [r2, #0]
 800b240:	b003      	add	sp, #12
 800b242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b246:	f000 bc1b 	b.w	800ba80 <__malloc_unlock>
 800b24a:	42a3      	cmp	r3, r4
 800b24c:	d90b      	bls.n	800b266 <_free_r+0x4e>
 800b24e:	6821      	ldr	r1, [r4, #0]
 800b250:	1862      	adds	r2, r4, r1
 800b252:	4293      	cmp	r3, r2
 800b254:	bf04      	itt	eq
 800b256:	681a      	ldreq	r2, [r3, #0]
 800b258:	685b      	ldreq	r3, [r3, #4]
 800b25a:	6063      	str	r3, [r4, #4]
 800b25c:	bf04      	itt	eq
 800b25e:	1852      	addeq	r2, r2, r1
 800b260:	6022      	streq	r2, [r4, #0]
 800b262:	602c      	str	r4, [r5, #0]
 800b264:	e7ec      	b.n	800b240 <_free_r+0x28>
 800b266:	461a      	mov	r2, r3
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	b10b      	cbz	r3, 800b270 <_free_r+0x58>
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	d9fa      	bls.n	800b266 <_free_r+0x4e>
 800b270:	6811      	ldr	r1, [r2, #0]
 800b272:	1855      	adds	r5, r2, r1
 800b274:	42a5      	cmp	r5, r4
 800b276:	d10b      	bne.n	800b290 <_free_r+0x78>
 800b278:	6824      	ldr	r4, [r4, #0]
 800b27a:	4421      	add	r1, r4
 800b27c:	1854      	adds	r4, r2, r1
 800b27e:	42a3      	cmp	r3, r4
 800b280:	6011      	str	r1, [r2, #0]
 800b282:	d1dd      	bne.n	800b240 <_free_r+0x28>
 800b284:	681c      	ldr	r4, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	6053      	str	r3, [r2, #4]
 800b28a:	4421      	add	r1, r4
 800b28c:	6011      	str	r1, [r2, #0]
 800b28e:	e7d7      	b.n	800b240 <_free_r+0x28>
 800b290:	d902      	bls.n	800b298 <_free_r+0x80>
 800b292:	230c      	movs	r3, #12
 800b294:	6003      	str	r3, [r0, #0]
 800b296:	e7d3      	b.n	800b240 <_free_r+0x28>
 800b298:	6825      	ldr	r5, [r4, #0]
 800b29a:	1961      	adds	r1, r4, r5
 800b29c:	428b      	cmp	r3, r1
 800b29e:	bf04      	itt	eq
 800b2a0:	6819      	ldreq	r1, [r3, #0]
 800b2a2:	685b      	ldreq	r3, [r3, #4]
 800b2a4:	6063      	str	r3, [r4, #4]
 800b2a6:	bf04      	itt	eq
 800b2a8:	1949      	addeq	r1, r1, r5
 800b2aa:	6021      	streq	r1, [r4, #0]
 800b2ac:	6054      	str	r4, [r2, #4]
 800b2ae:	e7c7      	b.n	800b240 <_free_r+0x28>
 800b2b0:	b003      	add	sp, #12
 800b2b2:	bd30      	pop	{r4, r5, pc}
 800b2b4:	200000e8 	.word	0x200000e8

0800b2b8 <_malloc_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	1ccd      	adds	r5, r1, #3
 800b2bc:	f025 0503 	bic.w	r5, r5, #3
 800b2c0:	3508      	adds	r5, #8
 800b2c2:	2d0c      	cmp	r5, #12
 800b2c4:	bf38      	it	cc
 800b2c6:	250c      	movcc	r5, #12
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	db01      	blt.n	800b2d2 <_malloc_r+0x1a>
 800b2ce:	42a9      	cmp	r1, r5
 800b2d0:	d903      	bls.n	800b2da <_malloc_r+0x22>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	6033      	str	r3, [r6, #0]
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2da:	f000 fbcb 	bl	800ba74 <__malloc_lock>
 800b2de:	4921      	ldr	r1, [pc, #132]	; (800b364 <_malloc_r+0xac>)
 800b2e0:	680a      	ldr	r2, [r1, #0]
 800b2e2:	4614      	mov	r4, r2
 800b2e4:	b99c      	cbnz	r4, 800b30e <_malloc_r+0x56>
 800b2e6:	4f20      	ldr	r7, [pc, #128]	; (800b368 <_malloc_r+0xb0>)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	b923      	cbnz	r3, 800b2f6 <_malloc_r+0x3e>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f000 f8b2 	bl	800b458 <_sbrk_r>
 800b2f4:	6038      	str	r0, [r7, #0]
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f000 f8ad 	bl	800b458 <_sbrk_r>
 800b2fe:	1c43      	adds	r3, r0, #1
 800b300:	d123      	bne.n	800b34a <_malloc_r+0x92>
 800b302:	230c      	movs	r3, #12
 800b304:	6033      	str	r3, [r6, #0]
 800b306:	4630      	mov	r0, r6
 800b308:	f000 fbba 	bl	800ba80 <__malloc_unlock>
 800b30c:	e7e3      	b.n	800b2d6 <_malloc_r+0x1e>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	1b5b      	subs	r3, r3, r5
 800b312:	d417      	bmi.n	800b344 <_malloc_r+0x8c>
 800b314:	2b0b      	cmp	r3, #11
 800b316:	d903      	bls.n	800b320 <_malloc_r+0x68>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	441c      	add	r4, r3
 800b31c:	6025      	str	r5, [r4, #0]
 800b31e:	e004      	b.n	800b32a <_malloc_r+0x72>
 800b320:	6863      	ldr	r3, [r4, #4]
 800b322:	42a2      	cmp	r2, r4
 800b324:	bf0c      	ite	eq
 800b326:	600b      	streq	r3, [r1, #0]
 800b328:	6053      	strne	r3, [r2, #4]
 800b32a:	4630      	mov	r0, r6
 800b32c:	f000 fba8 	bl	800ba80 <__malloc_unlock>
 800b330:	f104 000b 	add.w	r0, r4, #11
 800b334:	1d23      	adds	r3, r4, #4
 800b336:	f020 0007 	bic.w	r0, r0, #7
 800b33a:	1ac2      	subs	r2, r0, r3
 800b33c:	d0cc      	beq.n	800b2d8 <_malloc_r+0x20>
 800b33e:	1a1b      	subs	r3, r3, r0
 800b340:	50a3      	str	r3, [r4, r2]
 800b342:	e7c9      	b.n	800b2d8 <_malloc_r+0x20>
 800b344:	4622      	mov	r2, r4
 800b346:	6864      	ldr	r4, [r4, #4]
 800b348:	e7cc      	b.n	800b2e4 <_malloc_r+0x2c>
 800b34a:	1cc4      	adds	r4, r0, #3
 800b34c:	f024 0403 	bic.w	r4, r4, #3
 800b350:	42a0      	cmp	r0, r4
 800b352:	d0e3      	beq.n	800b31c <_malloc_r+0x64>
 800b354:	1a21      	subs	r1, r4, r0
 800b356:	4630      	mov	r0, r6
 800b358:	f000 f87e 	bl	800b458 <_sbrk_r>
 800b35c:	3001      	adds	r0, #1
 800b35e:	d1dd      	bne.n	800b31c <_malloc_r+0x64>
 800b360:	e7cf      	b.n	800b302 <_malloc_r+0x4a>
 800b362:	bf00      	nop
 800b364:	200000e8 	.word	0x200000e8
 800b368:	200000ec 	.word	0x200000ec

0800b36c <_puts_r>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	460e      	mov	r6, r1
 800b370:	4605      	mov	r5, r0
 800b372:	b118      	cbz	r0, 800b37c <_puts_r+0x10>
 800b374:	6983      	ldr	r3, [r0, #24]
 800b376:	b90b      	cbnz	r3, 800b37c <_puts_r+0x10>
 800b378:	f000 fa78 	bl	800b86c <__sinit>
 800b37c:	69ab      	ldr	r3, [r5, #24]
 800b37e:	68ac      	ldr	r4, [r5, #8]
 800b380:	b913      	cbnz	r3, 800b388 <_puts_r+0x1c>
 800b382:	4628      	mov	r0, r5
 800b384:	f000 fa72 	bl	800b86c <__sinit>
 800b388:	4b2c      	ldr	r3, [pc, #176]	; (800b43c <_puts_r+0xd0>)
 800b38a:	429c      	cmp	r4, r3
 800b38c:	d120      	bne.n	800b3d0 <_puts_r+0x64>
 800b38e:	686c      	ldr	r4, [r5, #4]
 800b390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b392:	07db      	lsls	r3, r3, #31
 800b394:	d405      	bmi.n	800b3a2 <_puts_r+0x36>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	0598      	lsls	r0, r3, #22
 800b39a:	d402      	bmi.n	800b3a2 <_puts_r+0x36>
 800b39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b39e:	f000 fb03 	bl	800b9a8 <__retarget_lock_acquire_recursive>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	0719      	lsls	r1, r3, #28
 800b3a6:	d51d      	bpl.n	800b3e4 <_puts_r+0x78>
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	b1db      	cbz	r3, 800b3e4 <_puts_r+0x78>
 800b3ac:	3e01      	subs	r6, #1
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	60a3      	str	r3, [r4, #8]
 800b3b8:	bb39      	cbnz	r1, 800b40a <_puts_r+0x9e>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	da38      	bge.n	800b430 <_puts_r+0xc4>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	210a      	movs	r1, #10
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 f878 	bl	800b4b8 <__swbuf_r>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d011      	beq.n	800b3f0 <_puts_r+0x84>
 800b3cc:	250a      	movs	r5, #10
 800b3ce:	e011      	b.n	800b3f4 <_puts_r+0x88>
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <_puts_r+0xd4>)
 800b3d2:	429c      	cmp	r4, r3
 800b3d4:	d101      	bne.n	800b3da <_puts_r+0x6e>
 800b3d6:	68ac      	ldr	r4, [r5, #8]
 800b3d8:	e7da      	b.n	800b390 <_puts_r+0x24>
 800b3da:	4b1a      	ldr	r3, [pc, #104]	; (800b444 <_puts_r+0xd8>)
 800b3dc:	429c      	cmp	r4, r3
 800b3de:	bf08      	it	eq
 800b3e0:	68ec      	ldreq	r4, [r5, #12]
 800b3e2:	e7d5      	b.n	800b390 <_puts_r+0x24>
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f000 f8b8 	bl	800b55c <__swsetup_r>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d0dd      	beq.n	800b3ac <_puts_r+0x40>
 800b3f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b3f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f6:	07da      	lsls	r2, r3, #31
 800b3f8:	d405      	bmi.n	800b406 <_puts_r+0x9a>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	059b      	lsls	r3, r3, #22
 800b3fe:	d402      	bmi.n	800b406 <_puts_r+0x9a>
 800b400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b402:	f000 fad2 	bl	800b9aa <__retarget_lock_release_recursive>
 800b406:	4628      	mov	r0, r5
 800b408:	bd70      	pop	{r4, r5, r6, pc}
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	da04      	bge.n	800b418 <_puts_r+0xac>
 800b40e:	69a2      	ldr	r2, [r4, #24]
 800b410:	429a      	cmp	r2, r3
 800b412:	dc06      	bgt.n	800b422 <_puts_r+0xb6>
 800b414:	290a      	cmp	r1, #10
 800b416:	d004      	beq.n	800b422 <_puts_r+0xb6>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	6022      	str	r2, [r4, #0]
 800b41e:	7019      	strb	r1, [r3, #0]
 800b420:	e7c5      	b.n	800b3ae <_puts_r+0x42>
 800b422:	4622      	mov	r2, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f000 f847 	bl	800b4b8 <__swbuf_r>
 800b42a:	3001      	adds	r0, #1
 800b42c:	d1bf      	bne.n	800b3ae <_puts_r+0x42>
 800b42e:	e7df      	b.n	800b3f0 <_puts_r+0x84>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	250a      	movs	r5, #10
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	6022      	str	r2, [r4, #0]
 800b438:	701d      	strb	r5, [r3, #0]
 800b43a:	e7db      	b.n	800b3f4 <_puts_r+0x88>
 800b43c:	0800c43c 	.word	0x0800c43c
 800b440:	0800c45c 	.word	0x0800c45c
 800b444:	0800c41c 	.word	0x0800c41c

0800b448 <puts>:
 800b448:	4b02      	ldr	r3, [pc, #8]	; (800b454 <puts+0xc>)
 800b44a:	4601      	mov	r1, r0
 800b44c:	6818      	ldr	r0, [r3, #0]
 800b44e:	f7ff bf8d 	b.w	800b36c <_puts_r>
 800b452:	bf00      	nop
 800b454:	2000002c 	.word	0x2000002c

0800b458 <_sbrk_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	; (800b474 <_sbrk_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f5 fbfa 	bl	8000c5c <_sbrk>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_sbrk_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_sbrk_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20002948 	.word	0x20002948

0800b478 <siprintf>:
 800b478:	b40e      	push	{r1, r2, r3}
 800b47a:	b500      	push	{lr}
 800b47c:	b09c      	sub	sp, #112	; 0x70
 800b47e:	ab1d      	add	r3, sp, #116	; 0x74
 800b480:	9002      	str	r0, [sp, #8]
 800b482:	9006      	str	r0, [sp, #24]
 800b484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b488:	4809      	ldr	r0, [pc, #36]	; (800b4b0 <siprintf+0x38>)
 800b48a:	9107      	str	r1, [sp, #28]
 800b48c:	9104      	str	r1, [sp, #16]
 800b48e:	4909      	ldr	r1, [pc, #36]	; (800b4b4 <siprintf+0x3c>)
 800b490:	f853 2b04 	ldr.w	r2, [r3], #4
 800b494:	9105      	str	r1, [sp, #20]
 800b496:	6800      	ldr	r0, [r0, #0]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	a902      	add	r1, sp, #8
 800b49c:	f000 fb52 	bl	800bb44 <_svfiprintf_r>
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	b01c      	add	sp, #112	; 0x70
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	2000002c 	.word	0x2000002c
 800b4b4:	ffff0208 	.word	0xffff0208

0800b4b8 <__swbuf_r>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	4605      	mov	r5, r0
 800b4c0:	b118      	cbz	r0, 800b4ca <__swbuf_r+0x12>
 800b4c2:	6983      	ldr	r3, [r0, #24]
 800b4c4:	b90b      	cbnz	r3, 800b4ca <__swbuf_r+0x12>
 800b4c6:	f000 f9d1 	bl	800b86c <__sinit>
 800b4ca:	4b21      	ldr	r3, [pc, #132]	; (800b550 <__swbuf_r+0x98>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	d12b      	bne.n	800b528 <__swbuf_r+0x70>
 800b4d0:	686c      	ldr	r4, [r5, #4]
 800b4d2:	69a3      	ldr	r3, [r4, #24]
 800b4d4:	60a3      	str	r3, [r4, #8]
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	071a      	lsls	r2, r3, #28
 800b4da:	d52f      	bpl.n	800b53c <__swbuf_r+0x84>
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	b36b      	cbz	r3, 800b53c <__swbuf_r+0x84>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	1ac0      	subs	r0, r0, r3
 800b4e6:	6963      	ldr	r3, [r4, #20]
 800b4e8:	b2f6      	uxtb	r6, r6
 800b4ea:	4283      	cmp	r3, r0
 800b4ec:	4637      	mov	r7, r6
 800b4ee:	dc04      	bgt.n	800b4fa <__swbuf_r+0x42>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f926 	bl	800b744 <_fflush_r>
 800b4f8:	bb30      	cbnz	r0, 800b548 <__swbuf_r+0x90>
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	6022      	str	r2, [r4, #0]
 800b506:	701e      	strb	r6, [r3, #0]
 800b508:	6963      	ldr	r3, [r4, #20]
 800b50a:	3001      	adds	r0, #1
 800b50c:	4283      	cmp	r3, r0
 800b50e:	d004      	beq.n	800b51a <__swbuf_r+0x62>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	07db      	lsls	r3, r3, #31
 800b514:	d506      	bpl.n	800b524 <__swbuf_r+0x6c>
 800b516:	2e0a      	cmp	r6, #10
 800b518:	d104      	bne.n	800b524 <__swbuf_r+0x6c>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4628      	mov	r0, r5
 800b51e:	f000 f911 	bl	800b744 <_fflush_r>
 800b522:	b988      	cbnz	r0, 800b548 <__swbuf_r+0x90>
 800b524:	4638      	mov	r0, r7
 800b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <__swbuf_r+0x9c>)
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d101      	bne.n	800b532 <__swbuf_r+0x7a>
 800b52e:	68ac      	ldr	r4, [r5, #8]
 800b530:	e7cf      	b.n	800b4d2 <__swbuf_r+0x1a>
 800b532:	4b09      	ldr	r3, [pc, #36]	; (800b558 <__swbuf_r+0xa0>)
 800b534:	429c      	cmp	r4, r3
 800b536:	bf08      	it	eq
 800b538:	68ec      	ldreq	r4, [r5, #12]
 800b53a:	e7ca      	b.n	800b4d2 <__swbuf_r+0x1a>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 f80c 	bl	800b55c <__swsetup_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d0cb      	beq.n	800b4e0 <__swbuf_r+0x28>
 800b548:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b54c:	e7ea      	b.n	800b524 <__swbuf_r+0x6c>
 800b54e:	bf00      	nop
 800b550:	0800c43c 	.word	0x0800c43c
 800b554:	0800c45c 	.word	0x0800c45c
 800b558:	0800c41c 	.word	0x0800c41c

0800b55c <__swsetup_r>:
 800b55c:	4b32      	ldr	r3, [pc, #200]	; (800b628 <__swsetup_r+0xcc>)
 800b55e:	b570      	push	{r4, r5, r6, lr}
 800b560:	681d      	ldr	r5, [r3, #0]
 800b562:	4606      	mov	r6, r0
 800b564:	460c      	mov	r4, r1
 800b566:	b125      	cbz	r5, 800b572 <__swsetup_r+0x16>
 800b568:	69ab      	ldr	r3, [r5, #24]
 800b56a:	b913      	cbnz	r3, 800b572 <__swsetup_r+0x16>
 800b56c:	4628      	mov	r0, r5
 800b56e:	f000 f97d 	bl	800b86c <__sinit>
 800b572:	4b2e      	ldr	r3, [pc, #184]	; (800b62c <__swsetup_r+0xd0>)
 800b574:	429c      	cmp	r4, r3
 800b576:	d10f      	bne.n	800b598 <__swsetup_r+0x3c>
 800b578:	686c      	ldr	r4, [r5, #4]
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b580:	0719      	lsls	r1, r3, #28
 800b582:	d42c      	bmi.n	800b5de <__swsetup_r+0x82>
 800b584:	06dd      	lsls	r5, r3, #27
 800b586:	d411      	bmi.n	800b5ac <__swsetup_r+0x50>
 800b588:	2309      	movs	r3, #9
 800b58a:	6033      	str	r3, [r6, #0]
 800b58c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b590:	81a3      	strh	r3, [r4, #12]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b596:	e03e      	b.n	800b616 <__swsetup_r+0xba>
 800b598:	4b25      	ldr	r3, [pc, #148]	; (800b630 <__swsetup_r+0xd4>)
 800b59a:	429c      	cmp	r4, r3
 800b59c:	d101      	bne.n	800b5a2 <__swsetup_r+0x46>
 800b59e:	68ac      	ldr	r4, [r5, #8]
 800b5a0:	e7eb      	b.n	800b57a <__swsetup_r+0x1e>
 800b5a2:	4b24      	ldr	r3, [pc, #144]	; (800b634 <__swsetup_r+0xd8>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	bf08      	it	eq
 800b5a8:	68ec      	ldreq	r4, [r5, #12]
 800b5aa:	e7e6      	b.n	800b57a <__swsetup_r+0x1e>
 800b5ac:	0758      	lsls	r0, r3, #29
 800b5ae:	d512      	bpl.n	800b5d6 <__swsetup_r+0x7a>
 800b5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b2:	b141      	cbz	r1, 800b5c6 <__swsetup_r+0x6a>
 800b5b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b8:	4299      	cmp	r1, r3
 800b5ba:	d002      	beq.n	800b5c2 <__swsetup_r+0x66>
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7ff fe2b 	bl	800b218 <_free_r>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6063      	str	r3, [r4, #4]
 800b5d2:	6923      	ldr	r3, [r4, #16]
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	f043 0308 	orr.w	r3, r3, #8
 800b5dc:	81a3      	strh	r3, [r4, #12]
 800b5de:	6923      	ldr	r3, [r4, #16]
 800b5e0:	b94b      	cbnz	r3, 800b5f6 <__swsetup_r+0x9a>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ec:	d003      	beq.n	800b5f6 <__swsetup_r+0x9a>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f000 f9ff 	bl	800b9f4 <__smakebuf_r>
 800b5f6:	89a0      	ldrh	r0, [r4, #12]
 800b5f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5fc:	f010 0301 	ands.w	r3, r0, #1
 800b600:	d00a      	beq.n	800b618 <__swsetup_r+0xbc>
 800b602:	2300      	movs	r3, #0
 800b604:	60a3      	str	r3, [r4, #8]
 800b606:	6963      	ldr	r3, [r4, #20]
 800b608:	425b      	negs	r3, r3
 800b60a:	61a3      	str	r3, [r4, #24]
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	b943      	cbnz	r3, 800b622 <__swsetup_r+0xc6>
 800b610:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b614:	d1ba      	bne.n	800b58c <__swsetup_r+0x30>
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	0781      	lsls	r1, r0, #30
 800b61a:	bf58      	it	pl
 800b61c:	6963      	ldrpl	r3, [r4, #20]
 800b61e:	60a3      	str	r3, [r4, #8]
 800b620:	e7f4      	b.n	800b60c <__swsetup_r+0xb0>
 800b622:	2000      	movs	r0, #0
 800b624:	e7f7      	b.n	800b616 <__swsetup_r+0xba>
 800b626:	bf00      	nop
 800b628:	2000002c 	.word	0x2000002c
 800b62c:	0800c43c 	.word	0x0800c43c
 800b630:	0800c45c 	.word	0x0800c45c
 800b634:	0800c41c 	.word	0x0800c41c

0800b638 <__sflush_r>:
 800b638:	898a      	ldrh	r2, [r1, #12]
 800b63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63e:	4605      	mov	r5, r0
 800b640:	0710      	lsls	r0, r2, #28
 800b642:	460c      	mov	r4, r1
 800b644:	d458      	bmi.n	800b6f8 <__sflush_r+0xc0>
 800b646:	684b      	ldr	r3, [r1, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	dc05      	bgt.n	800b658 <__sflush_r+0x20>
 800b64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b64e:	2b00      	cmp	r3, #0
 800b650:	dc02      	bgt.n	800b658 <__sflush_r+0x20>
 800b652:	2000      	movs	r0, #0
 800b654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b65a:	2e00      	cmp	r6, #0
 800b65c:	d0f9      	beq.n	800b652 <__sflush_r+0x1a>
 800b65e:	2300      	movs	r3, #0
 800b660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b664:	682f      	ldr	r7, [r5, #0]
 800b666:	602b      	str	r3, [r5, #0]
 800b668:	d032      	beq.n	800b6d0 <__sflush_r+0x98>
 800b66a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	075a      	lsls	r2, r3, #29
 800b670:	d505      	bpl.n	800b67e <__sflush_r+0x46>
 800b672:	6863      	ldr	r3, [r4, #4]
 800b674:	1ac0      	subs	r0, r0, r3
 800b676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b678:	b10b      	cbz	r3, 800b67e <__sflush_r+0x46>
 800b67a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b67c:	1ac0      	subs	r0, r0, r3
 800b67e:	2300      	movs	r3, #0
 800b680:	4602      	mov	r2, r0
 800b682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b684:	6a21      	ldr	r1, [r4, #32]
 800b686:	4628      	mov	r0, r5
 800b688:	47b0      	blx	r6
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	d106      	bne.n	800b69e <__sflush_r+0x66>
 800b690:	6829      	ldr	r1, [r5, #0]
 800b692:	291d      	cmp	r1, #29
 800b694:	d82c      	bhi.n	800b6f0 <__sflush_r+0xb8>
 800b696:	4a2a      	ldr	r2, [pc, #168]	; (800b740 <__sflush_r+0x108>)
 800b698:	40ca      	lsrs	r2, r1
 800b69a:	07d6      	lsls	r6, r2, #31
 800b69c:	d528      	bpl.n	800b6f0 <__sflush_r+0xb8>
 800b69e:	2200      	movs	r2, #0
 800b6a0:	6062      	str	r2, [r4, #4]
 800b6a2:	04d9      	lsls	r1, r3, #19
 800b6a4:	6922      	ldr	r2, [r4, #16]
 800b6a6:	6022      	str	r2, [r4, #0]
 800b6a8:	d504      	bpl.n	800b6b4 <__sflush_r+0x7c>
 800b6aa:	1c42      	adds	r2, r0, #1
 800b6ac:	d101      	bne.n	800b6b2 <__sflush_r+0x7a>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	b903      	cbnz	r3, 800b6b4 <__sflush_r+0x7c>
 800b6b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b6:	602f      	str	r7, [r5, #0]
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	d0ca      	beq.n	800b652 <__sflush_r+0x1a>
 800b6bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c0:	4299      	cmp	r1, r3
 800b6c2:	d002      	beq.n	800b6ca <__sflush_r+0x92>
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff fda7 	bl	800b218 <_free_r>
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b6ce:	e7c1      	b.n	800b654 <__sflush_r+0x1c>
 800b6d0:	6a21      	ldr	r1, [r4, #32]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b0      	blx	r6
 800b6d8:	1c41      	adds	r1, r0, #1
 800b6da:	d1c7      	bne.n	800b66c <__sflush_r+0x34>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0c4      	beq.n	800b66c <__sflush_r+0x34>
 800b6e2:	2b1d      	cmp	r3, #29
 800b6e4:	d001      	beq.n	800b6ea <__sflush_r+0xb2>
 800b6e6:	2b16      	cmp	r3, #22
 800b6e8:	d101      	bne.n	800b6ee <__sflush_r+0xb6>
 800b6ea:	602f      	str	r7, [r5, #0]
 800b6ec:	e7b1      	b.n	800b652 <__sflush_r+0x1a>
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	e7ad      	b.n	800b654 <__sflush_r+0x1c>
 800b6f8:	690f      	ldr	r7, [r1, #16]
 800b6fa:	2f00      	cmp	r7, #0
 800b6fc:	d0a9      	beq.n	800b652 <__sflush_r+0x1a>
 800b6fe:	0793      	lsls	r3, r2, #30
 800b700:	680e      	ldr	r6, [r1, #0]
 800b702:	bf08      	it	eq
 800b704:	694b      	ldreq	r3, [r1, #20]
 800b706:	600f      	str	r7, [r1, #0]
 800b708:	bf18      	it	ne
 800b70a:	2300      	movne	r3, #0
 800b70c:	eba6 0807 	sub.w	r8, r6, r7
 800b710:	608b      	str	r3, [r1, #8]
 800b712:	f1b8 0f00 	cmp.w	r8, #0
 800b716:	dd9c      	ble.n	800b652 <__sflush_r+0x1a>
 800b718:	6a21      	ldr	r1, [r4, #32]
 800b71a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b71c:	4643      	mov	r3, r8
 800b71e:	463a      	mov	r2, r7
 800b720:	4628      	mov	r0, r5
 800b722:	47b0      	blx	r6
 800b724:	2800      	cmp	r0, #0
 800b726:	dc06      	bgt.n	800b736 <__sflush_r+0xfe>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b72e:	81a3      	strh	r3, [r4, #12]
 800b730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b734:	e78e      	b.n	800b654 <__sflush_r+0x1c>
 800b736:	4407      	add	r7, r0
 800b738:	eba8 0800 	sub.w	r8, r8, r0
 800b73c:	e7e9      	b.n	800b712 <__sflush_r+0xda>
 800b73e:	bf00      	nop
 800b740:	20400001 	.word	0x20400001

0800b744 <_fflush_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	690b      	ldr	r3, [r1, #16]
 800b748:	4605      	mov	r5, r0
 800b74a:	460c      	mov	r4, r1
 800b74c:	b913      	cbnz	r3, 800b754 <_fflush_r+0x10>
 800b74e:	2500      	movs	r5, #0
 800b750:	4628      	mov	r0, r5
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	b118      	cbz	r0, 800b75e <_fflush_r+0x1a>
 800b756:	6983      	ldr	r3, [r0, #24]
 800b758:	b90b      	cbnz	r3, 800b75e <_fflush_r+0x1a>
 800b75a:	f000 f887 	bl	800b86c <__sinit>
 800b75e:	4b14      	ldr	r3, [pc, #80]	; (800b7b0 <_fflush_r+0x6c>)
 800b760:	429c      	cmp	r4, r3
 800b762:	d11b      	bne.n	800b79c <_fflush_r+0x58>
 800b764:	686c      	ldr	r4, [r5, #4]
 800b766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0ef      	beq.n	800b74e <_fflush_r+0xa>
 800b76e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b770:	07d0      	lsls	r0, r2, #31
 800b772:	d404      	bmi.n	800b77e <_fflush_r+0x3a>
 800b774:	0599      	lsls	r1, r3, #22
 800b776:	d402      	bmi.n	800b77e <_fflush_r+0x3a>
 800b778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b77a:	f000 f915 	bl	800b9a8 <__retarget_lock_acquire_recursive>
 800b77e:	4628      	mov	r0, r5
 800b780:	4621      	mov	r1, r4
 800b782:	f7ff ff59 	bl	800b638 <__sflush_r>
 800b786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b788:	07da      	lsls	r2, r3, #31
 800b78a:	4605      	mov	r5, r0
 800b78c:	d4e0      	bmi.n	800b750 <_fflush_r+0xc>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	059b      	lsls	r3, r3, #22
 800b792:	d4dd      	bmi.n	800b750 <_fflush_r+0xc>
 800b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b796:	f000 f908 	bl	800b9aa <__retarget_lock_release_recursive>
 800b79a:	e7d9      	b.n	800b750 <_fflush_r+0xc>
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <_fflush_r+0x70>)
 800b79e:	429c      	cmp	r4, r3
 800b7a0:	d101      	bne.n	800b7a6 <_fflush_r+0x62>
 800b7a2:	68ac      	ldr	r4, [r5, #8]
 800b7a4:	e7df      	b.n	800b766 <_fflush_r+0x22>
 800b7a6:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <_fflush_r+0x74>)
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	bf08      	it	eq
 800b7ac:	68ec      	ldreq	r4, [r5, #12]
 800b7ae:	e7da      	b.n	800b766 <_fflush_r+0x22>
 800b7b0:	0800c43c 	.word	0x0800c43c
 800b7b4:	0800c45c 	.word	0x0800c45c
 800b7b8:	0800c41c 	.word	0x0800c41c

0800b7bc <std>:
 800b7bc:	2300      	movs	r3, #0
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ca:	6083      	str	r3, [r0, #8]
 800b7cc:	8181      	strh	r1, [r0, #12]
 800b7ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b7d0:	81c2      	strh	r2, [r0, #14]
 800b7d2:	6183      	str	r3, [r0, #24]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	2208      	movs	r2, #8
 800b7d8:	305c      	adds	r0, #92	; 0x5c
 800b7da:	f7ff fd15 	bl	800b208 <memset>
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <std+0x38>)
 800b7e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <std+0x3c>)
 800b7e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std+0x40>)
 800b7e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <std+0x44>)
 800b7ec:	6224      	str	r4, [r4, #32]
 800b7ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b7f0:	bd10      	pop	{r4, pc}
 800b7f2:	bf00      	nop
 800b7f4:	0800c06d 	.word	0x0800c06d
 800b7f8:	0800c08f 	.word	0x0800c08f
 800b7fc:	0800c0c7 	.word	0x0800c0c7
 800b800:	0800c0eb 	.word	0x0800c0eb

0800b804 <_cleanup_r>:
 800b804:	4901      	ldr	r1, [pc, #4]	; (800b80c <_cleanup_r+0x8>)
 800b806:	f000 b8af 	b.w	800b968 <_fwalk_reent>
 800b80a:	bf00      	nop
 800b80c:	0800b745 	.word	0x0800b745

0800b810 <__sfmoreglue>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	1e4a      	subs	r2, r1, #1
 800b814:	2568      	movs	r5, #104	; 0x68
 800b816:	4355      	muls	r5, r2
 800b818:	460e      	mov	r6, r1
 800b81a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b81e:	f7ff fd4b 	bl	800b2b8 <_malloc_r>
 800b822:	4604      	mov	r4, r0
 800b824:	b140      	cbz	r0, 800b838 <__sfmoreglue+0x28>
 800b826:	2100      	movs	r1, #0
 800b828:	e9c0 1600 	strd	r1, r6, [r0]
 800b82c:	300c      	adds	r0, #12
 800b82e:	60a0      	str	r0, [r4, #8]
 800b830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b834:	f7ff fce8 	bl	800b208 <memset>
 800b838:	4620      	mov	r0, r4
 800b83a:	bd70      	pop	{r4, r5, r6, pc}

0800b83c <__sfp_lock_acquire>:
 800b83c:	4801      	ldr	r0, [pc, #4]	; (800b844 <__sfp_lock_acquire+0x8>)
 800b83e:	f000 b8b3 	b.w	800b9a8 <__retarget_lock_acquire_recursive>
 800b842:	bf00      	nop
 800b844:	20002944 	.word	0x20002944

0800b848 <__sfp_lock_release>:
 800b848:	4801      	ldr	r0, [pc, #4]	; (800b850 <__sfp_lock_release+0x8>)
 800b84a:	f000 b8ae 	b.w	800b9aa <__retarget_lock_release_recursive>
 800b84e:	bf00      	nop
 800b850:	20002944 	.word	0x20002944

0800b854 <__sinit_lock_acquire>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__sinit_lock_acquire+0x8>)
 800b856:	f000 b8a7 	b.w	800b9a8 <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	2000293f 	.word	0x2000293f

0800b860 <__sinit_lock_release>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__sinit_lock_release+0x8>)
 800b862:	f000 b8a2 	b.w	800b9aa <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	2000293f 	.word	0x2000293f

0800b86c <__sinit>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	4604      	mov	r4, r0
 800b870:	f7ff fff0 	bl	800b854 <__sinit_lock_acquire>
 800b874:	69a3      	ldr	r3, [r4, #24]
 800b876:	b11b      	cbz	r3, 800b880 <__sinit+0x14>
 800b878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b87c:	f7ff bff0 	b.w	800b860 <__sinit_lock_release>
 800b880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b884:	6523      	str	r3, [r4, #80]	; 0x50
 800b886:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <__sinit+0x68>)
 800b888:	4a13      	ldr	r2, [pc, #76]	; (800b8d8 <__sinit+0x6c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b88e:	42a3      	cmp	r3, r4
 800b890:	bf04      	itt	eq
 800b892:	2301      	moveq	r3, #1
 800b894:	61a3      	streq	r3, [r4, #24]
 800b896:	4620      	mov	r0, r4
 800b898:	f000 f820 	bl	800b8dc <__sfp>
 800b89c:	6060      	str	r0, [r4, #4]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 f81c 	bl	800b8dc <__sfp>
 800b8a4:	60a0      	str	r0, [r4, #8]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f818 	bl	800b8dc <__sfp>
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	60e0      	str	r0, [r4, #12]
 800b8b0:	2104      	movs	r1, #4
 800b8b2:	6860      	ldr	r0, [r4, #4]
 800b8b4:	f7ff ff82 	bl	800b7bc <std>
 800b8b8:	68a0      	ldr	r0, [r4, #8]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	2109      	movs	r1, #9
 800b8be:	f7ff ff7d 	bl	800b7bc <std>
 800b8c2:	68e0      	ldr	r0, [r4, #12]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	2112      	movs	r1, #18
 800b8c8:	f7ff ff78 	bl	800b7bc <std>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	61a3      	str	r3, [r4, #24]
 800b8d0:	e7d2      	b.n	800b878 <__sinit+0xc>
 800b8d2:	bf00      	nop
 800b8d4:	0800c418 	.word	0x0800c418
 800b8d8:	0800b805 	.word	0x0800b805

0800b8dc <__sfp>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	4607      	mov	r7, r0
 800b8e0:	f7ff ffac 	bl	800b83c <__sfp_lock_acquire>
 800b8e4:	4b1e      	ldr	r3, [pc, #120]	; (800b960 <__sfp+0x84>)
 800b8e6:	681e      	ldr	r6, [r3, #0]
 800b8e8:	69b3      	ldr	r3, [r6, #24]
 800b8ea:	b913      	cbnz	r3, 800b8f2 <__sfp+0x16>
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f7ff ffbd 	bl	800b86c <__sinit>
 800b8f2:	3648      	adds	r6, #72	; 0x48
 800b8f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	d503      	bpl.n	800b904 <__sfp+0x28>
 800b8fc:	6833      	ldr	r3, [r6, #0]
 800b8fe:	b30b      	cbz	r3, 800b944 <__sfp+0x68>
 800b900:	6836      	ldr	r6, [r6, #0]
 800b902:	e7f7      	b.n	800b8f4 <__sfp+0x18>
 800b904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b908:	b9d5      	cbnz	r5, 800b940 <__sfp+0x64>
 800b90a:	4b16      	ldr	r3, [pc, #88]	; (800b964 <__sfp+0x88>)
 800b90c:	60e3      	str	r3, [r4, #12]
 800b90e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b912:	6665      	str	r5, [r4, #100]	; 0x64
 800b914:	f000 f847 	bl	800b9a6 <__retarget_lock_init_recursive>
 800b918:	f7ff ff96 	bl	800b848 <__sfp_lock_release>
 800b91c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b924:	6025      	str	r5, [r4, #0]
 800b926:	61a5      	str	r5, [r4, #24]
 800b928:	2208      	movs	r2, #8
 800b92a:	4629      	mov	r1, r5
 800b92c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b930:	f7ff fc6a 	bl	800b208 <memset>
 800b934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b93c:	4620      	mov	r0, r4
 800b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b940:	3468      	adds	r4, #104	; 0x68
 800b942:	e7d9      	b.n	800b8f8 <__sfp+0x1c>
 800b944:	2104      	movs	r1, #4
 800b946:	4638      	mov	r0, r7
 800b948:	f7ff ff62 	bl	800b810 <__sfmoreglue>
 800b94c:	4604      	mov	r4, r0
 800b94e:	6030      	str	r0, [r6, #0]
 800b950:	2800      	cmp	r0, #0
 800b952:	d1d5      	bne.n	800b900 <__sfp+0x24>
 800b954:	f7ff ff78 	bl	800b848 <__sfp_lock_release>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	e7ee      	b.n	800b93c <__sfp+0x60>
 800b95e:	bf00      	nop
 800b960:	0800c418 	.word	0x0800c418
 800b964:	ffff0001 	.word	0xffff0001

0800b968 <_fwalk_reent>:
 800b968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b96c:	4606      	mov	r6, r0
 800b96e:	4688      	mov	r8, r1
 800b970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b974:	2700      	movs	r7, #0
 800b976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b97a:	f1b9 0901 	subs.w	r9, r9, #1
 800b97e:	d505      	bpl.n	800b98c <_fwalk_reent+0x24>
 800b980:	6824      	ldr	r4, [r4, #0]
 800b982:	2c00      	cmp	r4, #0
 800b984:	d1f7      	bne.n	800b976 <_fwalk_reent+0xe>
 800b986:	4638      	mov	r0, r7
 800b988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98c:	89ab      	ldrh	r3, [r5, #12]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d907      	bls.n	800b9a2 <_fwalk_reent+0x3a>
 800b992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b996:	3301      	adds	r3, #1
 800b998:	d003      	beq.n	800b9a2 <_fwalk_reent+0x3a>
 800b99a:	4629      	mov	r1, r5
 800b99c:	4630      	mov	r0, r6
 800b99e:	47c0      	blx	r8
 800b9a0:	4307      	orrs	r7, r0
 800b9a2:	3568      	adds	r5, #104	; 0x68
 800b9a4:	e7e9      	b.n	800b97a <_fwalk_reent+0x12>

0800b9a6 <__retarget_lock_init_recursive>:
 800b9a6:	4770      	bx	lr

0800b9a8 <__retarget_lock_acquire_recursive>:
 800b9a8:	4770      	bx	lr

0800b9aa <__retarget_lock_release_recursive>:
 800b9aa:	4770      	bx	lr

0800b9ac <__swhatbuf_r>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	460e      	mov	r6, r1
 800b9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	b096      	sub	sp, #88	; 0x58
 800b9b8:	4614      	mov	r4, r2
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	da07      	bge.n	800b9ce <__swhatbuf_r+0x22>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	89b3      	ldrh	r3, [r6, #12]
 800b9c4:	061a      	lsls	r2, r3, #24
 800b9c6:	d410      	bmi.n	800b9ea <__swhatbuf_r+0x3e>
 800b9c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9cc:	e00e      	b.n	800b9ec <__swhatbuf_r+0x40>
 800b9ce:	466a      	mov	r2, sp
 800b9d0:	f000 fbb2 	bl	800c138 <_fstat_r>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	dbf2      	blt.n	800b9be <__swhatbuf_r+0x12>
 800b9d8:	9a01      	ldr	r2, [sp, #4]
 800b9da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9e2:	425a      	negs	r2, r3
 800b9e4:	415a      	adcs	r2, r3
 800b9e6:	602a      	str	r2, [r5, #0]
 800b9e8:	e7ee      	b.n	800b9c8 <__swhatbuf_r+0x1c>
 800b9ea:	2340      	movs	r3, #64	; 0x40
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	6023      	str	r3, [r4, #0]
 800b9f0:	b016      	add	sp, #88	; 0x58
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}

0800b9f4 <__smakebuf_r>:
 800b9f4:	898b      	ldrh	r3, [r1, #12]
 800b9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9f8:	079d      	lsls	r5, r3, #30
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	d507      	bpl.n	800ba10 <__smakebuf_r+0x1c>
 800ba00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	6163      	str	r3, [r4, #20]
 800ba0c:	b002      	add	sp, #8
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	ab01      	add	r3, sp, #4
 800ba12:	466a      	mov	r2, sp
 800ba14:	f7ff ffca 	bl	800b9ac <__swhatbuf_r>
 800ba18:	9900      	ldr	r1, [sp, #0]
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff fc4b 	bl	800b2b8 <_malloc_r>
 800ba22:	b948      	cbnz	r0, 800ba38 <__smakebuf_r+0x44>
 800ba24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba28:	059a      	lsls	r2, r3, #22
 800ba2a:	d4ef      	bmi.n	800ba0c <__smakebuf_r+0x18>
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	f043 0302 	orr.w	r3, r3, #2
 800ba34:	81a3      	strh	r3, [r4, #12]
 800ba36:	e7e3      	b.n	800ba00 <__smakebuf_r+0xc>
 800ba38:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <__smakebuf_r+0x7c>)
 800ba3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	6020      	str	r0, [r4, #0]
 800ba40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba44:	81a3      	strh	r3, [r4, #12]
 800ba46:	9b00      	ldr	r3, [sp, #0]
 800ba48:	6163      	str	r3, [r4, #20]
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	6120      	str	r0, [r4, #16]
 800ba4e:	b15b      	cbz	r3, 800ba68 <__smakebuf_r+0x74>
 800ba50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 fb81 	bl	800c15c <_isatty_r>
 800ba5a:	b128      	cbz	r0, 800ba68 <__smakebuf_r+0x74>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	f043 0301 	orr.w	r3, r3, #1
 800ba66:	81a3      	strh	r3, [r4, #12]
 800ba68:	89a0      	ldrh	r0, [r4, #12]
 800ba6a:	4305      	orrs	r5, r0
 800ba6c:	81a5      	strh	r5, [r4, #12]
 800ba6e:	e7cd      	b.n	800ba0c <__smakebuf_r+0x18>
 800ba70:	0800b805 	.word	0x0800b805

0800ba74 <__malloc_lock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_lock+0x8>)
 800ba76:	f7ff bf97 	b.w	800b9a8 <__retarget_lock_acquire_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	20002940 	.word	0x20002940

0800ba80 <__malloc_unlock>:
 800ba80:	4801      	ldr	r0, [pc, #4]	; (800ba88 <__malloc_unlock+0x8>)
 800ba82:	f7ff bf92 	b.w	800b9aa <__retarget_lock_release_recursive>
 800ba86:	bf00      	nop
 800ba88:	20002940 	.word	0x20002940

0800ba8c <__ssputs_r>:
 800ba8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba90:	688e      	ldr	r6, [r1, #8]
 800ba92:	429e      	cmp	r6, r3
 800ba94:	4682      	mov	sl, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	4690      	mov	r8, r2
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	d838      	bhi.n	800bb10 <__ssputs_r+0x84>
 800ba9e:	898a      	ldrh	r2, [r1, #12]
 800baa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baa4:	d032      	beq.n	800bb0c <__ssputs_r+0x80>
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	6909      	ldr	r1, [r1, #16]
 800baaa:	eba5 0901 	sub.w	r9, r5, r1
 800baae:	6965      	ldr	r5, [r4, #20]
 800bab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab8:	3301      	adds	r3, #1
 800baba:	444b      	add	r3, r9
 800babc:	106d      	asrs	r5, r5, #1
 800babe:	429d      	cmp	r5, r3
 800bac0:	bf38      	it	cc
 800bac2:	461d      	movcc	r5, r3
 800bac4:	0553      	lsls	r3, r2, #21
 800bac6:	d531      	bpl.n	800bb2c <__ssputs_r+0xa0>
 800bac8:	4629      	mov	r1, r5
 800baca:	f7ff fbf5 	bl	800b2b8 <_malloc_r>
 800bace:	4606      	mov	r6, r0
 800bad0:	b950      	cbnz	r0, 800bae8 <__ssputs_r+0x5c>
 800bad2:	230c      	movs	r3, #12
 800bad4:	f8ca 3000 	str.w	r3, [sl]
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae8:	6921      	ldr	r1, [r4, #16]
 800baea:	464a      	mov	r2, r9
 800baec:	f7ff fb7e 	bl	800b1ec <memcpy>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800baf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	6126      	str	r6, [r4, #16]
 800bafe:	6165      	str	r5, [r4, #20]
 800bb00:	444e      	add	r6, r9
 800bb02:	eba5 0509 	sub.w	r5, r5, r9
 800bb06:	6026      	str	r6, [r4, #0]
 800bb08:	60a5      	str	r5, [r4, #8]
 800bb0a:	463e      	mov	r6, r7
 800bb0c:	42be      	cmp	r6, r7
 800bb0e:	d900      	bls.n	800bb12 <__ssputs_r+0x86>
 800bb10:	463e      	mov	r6, r7
 800bb12:	4632      	mov	r2, r6
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4641      	mov	r1, r8
 800bb18:	f000 fb42 	bl	800c1a0 <memmove>
 800bb1c:	68a3      	ldr	r3, [r4, #8]
 800bb1e:	6822      	ldr	r2, [r4, #0]
 800bb20:	1b9b      	subs	r3, r3, r6
 800bb22:	4432      	add	r2, r6
 800bb24:	60a3      	str	r3, [r4, #8]
 800bb26:	6022      	str	r2, [r4, #0]
 800bb28:	2000      	movs	r0, #0
 800bb2a:	e7db      	b.n	800bae4 <__ssputs_r+0x58>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	f000 fb51 	bl	800c1d4 <_realloc_r>
 800bb32:	4606      	mov	r6, r0
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d1e1      	bne.n	800bafc <__ssputs_r+0x70>
 800bb38:	6921      	ldr	r1, [r4, #16]
 800bb3a:	4650      	mov	r0, sl
 800bb3c:	f7ff fb6c 	bl	800b218 <_free_r>
 800bb40:	e7c7      	b.n	800bad2 <__ssputs_r+0x46>
	...

0800bb44 <_svfiprintf_r>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	4698      	mov	r8, r3
 800bb4a:	898b      	ldrh	r3, [r1, #12]
 800bb4c:	061b      	lsls	r3, r3, #24
 800bb4e:	b09d      	sub	sp, #116	; 0x74
 800bb50:	4607      	mov	r7, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	d50e      	bpl.n	800bb76 <_svfiprintf_r+0x32>
 800bb58:	690b      	ldr	r3, [r1, #16]
 800bb5a:	b963      	cbnz	r3, 800bb76 <_svfiprintf_r+0x32>
 800bb5c:	2140      	movs	r1, #64	; 0x40
 800bb5e:	f7ff fbab 	bl	800b2b8 <_malloc_r>
 800bb62:	6028      	str	r0, [r5, #0]
 800bb64:	6128      	str	r0, [r5, #16]
 800bb66:	b920      	cbnz	r0, 800bb72 <_svfiprintf_r+0x2e>
 800bb68:	230c      	movs	r3, #12
 800bb6a:	603b      	str	r3, [r7, #0]
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb70:	e0d1      	b.n	800bd16 <_svfiprintf_r+0x1d2>
 800bb72:	2340      	movs	r3, #64	; 0x40
 800bb74:	616b      	str	r3, [r5, #20]
 800bb76:	2300      	movs	r3, #0
 800bb78:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7a:	2320      	movs	r3, #32
 800bb7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb84:	2330      	movs	r3, #48	; 0x30
 800bb86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd30 <_svfiprintf_r+0x1ec>
 800bb8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb8e:	f04f 0901 	mov.w	r9, #1
 800bb92:	4623      	mov	r3, r4
 800bb94:	469a      	mov	sl, r3
 800bb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb9a:	b10a      	cbz	r2, 800bba0 <_svfiprintf_r+0x5c>
 800bb9c:	2a25      	cmp	r2, #37	; 0x25
 800bb9e:	d1f9      	bne.n	800bb94 <_svfiprintf_r+0x50>
 800bba0:	ebba 0b04 	subs.w	fp, sl, r4
 800bba4:	d00b      	beq.n	800bbbe <_svfiprintf_r+0x7a>
 800bba6:	465b      	mov	r3, fp
 800bba8:	4622      	mov	r2, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff ff6d 	bl	800ba8c <__ssputs_r>
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f000 80aa 	beq.w	800bd0c <_svfiprintf_r+0x1c8>
 800bbb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbba:	445a      	add	r2, fp
 800bbbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f000 80a2 	beq.w	800bd0c <_svfiprintf_r+0x1c8>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbd2:	f10a 0a01 	add.w	sl, sl, #1
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	9307      	str	r3, [sp, #28]
 800bbda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbde:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe0:	4654      	mov	r4, sl
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	4851      	ldr	r0, [pc, #324]	; (800bd30 <_svfiprintf_r+0x1ec>)
 800bbea:	f7f4 faf9 	bl	80001e0 <memchr>
 800bbee:	9a04      	ldr	r2, [sp, #16]
 800bbf0:	b9d8      	cbnz	r0, 800bc2a <_svfiprintf_r+0xe6>
 800bbf2:	06d0      	lsls	r0, r2, #27
 800bbf4:	bf44      	itt	mi
 800bbf6:	2320      	movmi	r3, #32
 800bbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbfc:	0711      	lsls	r1, r2, #28
 800bbfe:	bf44      	itt	mi
 800bc00:	232b      	movmi	r3, #43	; 0x2b
 800bc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc06:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc0c:	d015      	beq.n	800bc3a <_svfiprintf_r+0xf6>
 800bc0e:	9a07      	ldr	r2, [sp, #28]
 800bc10:	4654      	mov	r4, sl
 800bc12:	2000      	movs	r0, #0
 800bc14:	f04f 0c0a 	mov.w	ip, #10
 800bc18:	4621      	mov	r1, r4
 800bc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc1e:	3b30      	subs	r3, #48	; 0x30
 800bc20:	2b09      	cmp	r3, #9
 800bc22:	d94e      	bls.n	800bcc2 <_svfiprintf_r+0x17e>
 800bc24:	b1b0      	cbz	r0, 800bc54 <_svfiprintf_r+0x110>
 800bc26:	9207      	str	r2, [sp, #28]
 800bc28:	e014      	b.n	800bc54 <_svfiprintf_r+0x110>
 800bc2a:	eba0 0308 	sub.w	r3, r0, r8
 800bc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc32:	4313      	orrs	r3, r2
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	46a2      	mov	sl, r4
 800bc38:	e7d2      	b.n	800bbe0 <_svfiprintf_r+0x9c>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	1d19      	adds	r1, r3, #4
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	9103      	str	r1, [sp, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	bfbb      	ittet	lt
 800bc46:	425b      	neglt	r3, r3
 800bc48:	f042 0202 	orrlt.w	r2, r2, #2
 800bc4c:	9307      	strge	r3, [sp, #28]
 800bc4e:	9307      	strlt	r3, [sp, #28]
 800bc50:	bfb8      	it	lt
 800bc52:	9204      	strlt	r2, [sp, #16]
 800bc54:	7823      	ldrb	r3, [r4, #0]
 800bc56:	2b2e      	cmp	r3, #46	; 0x2e
 800bc58:	d10c      	bne.n	800bc74 <_svfiprintf_r+0x130>
 800bc5a:	7863      	ldrb	r3, [r4, #1]
 800bc5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5e:	d135      	bne.n	800bccc <_svfiprintf_r+0x188>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	1d1a      	adds	r2, r3, #4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	9203      	str	r2, [sp, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bfb8      	it	lt
 800bc6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc70:	3402      	adds	r4, #2
 800bc72:	9305      	str	r3, [sp, #20]
 800bc74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd40 <_svfiprintf_r+0x1fc>
 800bc78:	7821      	ldrb	r1, [r4, #0]
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	f7f4 faaf 	bl	80001e0 <memchr>
 800bc82:	b140      	cbz	r0, 800bc96 <_svfiprintf_r+0x152>
 800bc84:	2340      	movs	r3, #64	; 0x40
 800bc86:	eba0 000a 	sub.w	r0, r0, sl
 800bc8a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	4303      	orrs	r3, r0
 800bc92:	3401      	adds	r4, #1
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9a:	4826      	ldr	r0, [pc, #152]	; (800bd34 <_svfiprintf_r+0x1f0>)
 800bc9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca0:	2206      	movs	r2, #6
 800bca2:	f7f4 fa9d 	bl	80001e0 <memchr>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d038      	beq.n	800bd1c <_svfiprintf_r+0x1d8>
 800bcaa:	4b23      	ldr	r3, [pc, #140]	; (800bd38 <_svfiprintf_r+0x1f4>)
 800bcac:	bb1b      	cbnz	r3, 800bcf6 <_svfiprintf_r+0x1b2>
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	3307      	adds	r3, #7
 800bcb2:	f023 0307 	bic.w	r3, r3, #7
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	9303      	str	r3, [sp, #12]
 800bcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcbc:	4433      	add	r3, r6
 800bcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc0:	e767      	b.n	800bb92 <_svfiprintf_r+0x4e>
 800bcc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	2001      	movs	r0, #1
 800bcca:	e7a5      	b.n	800bc18 <_svfiprintf_r+0xd4>
 800bccc:	2300      	movs	r3, #0
 800bcce:	3401      	adds	r4, #1
 800bcd0:	9305      	str	r3, [sp, #20]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f04f 0c0a 	mov.w	ip, #10
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcde:	3a30      	subs	r2, #48	; 0x30
 800bce0:	2a09      	cmp	r2, #9
 800bce2:	d903      	bls.n	800bcec <_svfiprintf_r+0x1a8>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0c5      	beq.n	800bc74 <_svfiprintf_r+0x130>
 800bce8:	9105      	str	r1, [sp, #20]
 800bcea:	e7c3      	b.n	800bc74 <_svfiprintf_r+0x130>
 800bcec:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f0      	b.n	800bcd8 <_svfiprintf_r+0x194>
 800bcf6:	ab03      	add	r3, sp, #12
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <_svfiprintf_r+0x1f8>)
 800bcfe:	a904      	add	r1, sp, #16
 800bd00:	4638      	mov	r0, r7
 800bd02:	f3af 8000 	nop.w
 800bd06:	1c42      	adds	r2, r0, #1
 800bd08:	4606      	mov	r6, r0
 800bd0a:	d1d6      	bne.n	800bcba <_svfiprintf_r+0x176>
 800bd0c:	89ab      	ldrh	r3, [r5, #12]
 800bd0e:	065b      	lsls	r3, r3, #25
 800bd10:	f53f af2c 	bmi.w	800bb6c <_svfiprintf_r+0x28>
 800bd14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd16:	b01d      	add	sp, #116	; 0x74
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	ab03      	add	r3, sp, #12
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	462a      	mov	r2, r5
 800bd22:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <_svfiprintf_r+0x1f8>)
 800bd24:	a904      	add	r1, sp, #16
 800bd26:	4638      	mov	r0, r7
 800bd28:	f000 f87a 	bl	800be20 <_printf_i>
 800bd2c:	e7eb      	b.n	800bd06 <_svfiprintf_r+0x1c2>
 800bd2e:	bf00      	nop
 800bd30:	0800c47c 	.word	0x0800c47c
 800bd34:	0800c486 	.word	0x0800c486
 800bd38:	00000000 	.word	0x00000000
 800bd3c:	0800ba8d 	.word	0x0800ba8d
 800bd40:	0800c482 	.word	0x0800c482

0800bd44 <_printf_common>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	4616      	mov	r6, r2
 800bd4a:	4699      	mov	r9, r3
 800bd4c:	688a      	ldr	r2, [r1, #8]
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bfb8      	it	lt
 800bd58:	4613      	movlt	r3, r2
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd60:	4607      	mov	r7, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	b10a      	cbz	r2, 800bd6a <_printf_common+0x26>
 800bd66:	3301      	adds	r3, #1
 800bd68:	6033      	str	r3, [r6, #0]
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	0699      	lsls	r1, r3, #26
 800bd6e:	bf42      	ittt	mi
 800bd70:	6833      	ldrmi	r3, [r6, #0]
 800bd72:	3302      	addmi	r3, #2
 800bd74:	6033      	strmi	r3, [r6, #0]
 800bd76:	6825      	ldr	r5, [r4, #0]
 800bd78:	f015 0506 	ands.w	r5, r5, #6
 800bd7c:	d106      	bne.n	800bd8c <_printf_common+0x48>
 800bd7e:	f104 0a19 	add.w	sl, r4, #25
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	6832      	ldr	r2, [r6, #0]
 800bd86:	1a9b      	subs	r3, r3, r2
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc26      	bgt.n	800bdda <_printf_common+0x96>
 800bd8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd90:	1e13      	subs	r3, r2, #0
 800bd92:	6822      	ldr	r2, [r4, #0]
 800bd94:	bf18      	it	ne
 800bd96:	2301      	movne	r3, #1
 800bd98:	0692      	lsls	r2, r2, #26
 800bd9a:	d42b      	bmi.n	800bdf4 <_printf_common+0xb0>
 800bd9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bda0:	4649      	mov	r1, r9
 800bda2:	4638      	mov	r0, r7
 800bda4:	47c0      	blx	r8
 800bda6:	3001      	adds	r0, #1
 800bda8:	d01e      	beq.n	800bde8 <_printf_common+0xa4>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	68e5      	ldr	r5, [r4, #12]
 800bdae:	6832      	ldr	r2, [r6, #0]
 800bdb0:	f003 0306 	and.w	r3, r3, #6
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	bf08      	it	eq
 800bdb8:	1aad      	subeq	r5, r5, r2
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	6922      	ldr	r2, [r4, #16]
 800bdbe:	bf0c      	ite	eq
 800bdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc4:	2500      	movne	r5, #0
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bfc4      	itt	gt
 800bdca:	1a9b      	subgt	r3, r3, r2
 800bdcc:	18ed      	addgt	r5, r5, r3
 800bdce:	2600      	movs	r6, #0
 800bdd0:	341a      	adds	r4, #26
 800bdd2:	42b5      	cmp	r5, r6
 800bdd4:	d11a      	bne.n	800be0c <_printf_common+0xc8>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e008      	b.n	800bdec <_printf_common+0xa8>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4649      	mov	r1, r9
 800bde0:	4638      	mov	r0, r7
 800bde2:	47c0      	blx	r8
 800bde4:	3001      	adds	r0, #1
 800bde6:	d103      	bne.n	800bdf0 <_printf_common+0xac>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	e7c6      	b.n	800bd82 <_printf_common+0x3e>
 800bdf4:	18e1      	adds	r1, r4, r3
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	2030      	movs	r0, #48	; 0x30
 800bdfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdfe:	4422      	add	r2, r4
 800be00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be08:	3302      	adds	r3, #2
 800be0a:	e7c7      	b.n	800bd9c <_printf_common+0x58>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4622      	mov	r2, r4
 800be10:	4649      	mov	r1, r9
 800be12:	4638      	mov	r0, r7
 800be14:	47c0      	blx	r8
 800be16:	3001      	adds	r0, #1
 800be18:	d0e6      	beq.n	800bde8 <_printf_common+0xa4>
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7d9      	b.n	800bdd2 <_printf_common+0x8e>
	...

0800be20 <_printf_i>:
 800be20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	460c      	mov	r4, r1
 800be26:	4691      	mov	r9, r2
 800be28:	7e27      	ldrb	r7, [r4, #24]
 800be2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be2c:	2f78      	cmp	r7, #120	; 0x78
 800be2e:	4680      	mov	r8, r0
 800be30:	469a      	mov	sl, r3
 800be32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be36:	d807      	bhi.n	800be48 <_printf_i+0x28>
 800be38:	2f62      	cmp	r7, #98	; 0x62
 800be3a:	d80a      	bhi.n	800be52 <_printf_i+0x32>
 800be3c:	2f00      	cmp	r7, #0
 800be3e:	f000 80d8 	beq.w	800bff2 <_printf_i+0x1d2>
 800be42:	2f58      	cmp	r7, #88	; 0x58
 800be44:	f000 80a3 	beq.w	800bf8e <_printf_i+0x16e>
 800be48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be50:	e03a      	b.n	800bec8 <_printf_i+0xa8>
 800be52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be56:	2b15      	cmp	r3, #21
 800be58:	d8f6      	bhi.n	800be48 <_printf_i+0x28>
 800be5a:	a001      	add	r0, pc, #4	; (adr r0, 800be60 <_printf_i+0x40>)
 800be5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800becd 	.word	0x0800becd
 800be68:	0800be49 	.word	0x0800be49
 800be6c:	0800be49 	.word	0x0800be49
 800be70:	0800be49 	.word	0x0800be49
 800be74:	0800be49 	.word	0x0800be49
 800be78:	0800becd 	.word	0x0800becd
 800be7c:	0800be49 	.word	0x0800be49
 800be80:	0800be49 	.word	0x0800be49
 800be84:	0800be49 	.word	0x0800be49
 800be88:	0800be49 	.word	0x0800be49
 800be8c:	0800bfd9 	.word	0x0800bfd9
 800be90:	0800befd 	.word	0x0800befd
 800be94:	0800bfbb 	.word	0x0800bfbb
 800be98:	0800be49 	.word	0x0800be49
 800be9c:	0800be49 	.word	0x0800be49
 800bea0:	0800bffb 	.word	0x0800bffb
 800bea4:	0800be49 	.word	0x0800be49
 800bea8:	0800befd 	.word	0x0800befd
 800beac:	0800be49 	.word	0x0800be49
 800beb0:	0800be49 	.word	0x0800be49
 800beb4:	0800bfc3 	.word	0x0800bfc3
 800beb8:	680b      	ldr	r3, [r1, #0]
 800beba:	1d1a      	adds	r2, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	600a      	str	r2, [r1, #0]
 800bec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bec8:	2301      	movs	r3, #1
 800beca:	e0a3      	b.n	800c014 <_printf_i+0x1f4>
 800becc:	6825      	ldr	r5, [r4, #0]
 800bece:	6808      	ldr	r0, [r1, #0]
 800bed0:	062e      	lsls	r6, r5, #24
 800bed2:	f100 0304 	add.w	r3, r0, #4
 800bed6:	d50a      	bpl.n	800beee <_printf_i+0xce>
 800bed8:	6805      	ldr	r5, [r0, #0]
 800beda:	600b      	str	r3, [r1, #0]
 800bedc:	2d00      	cmp	r5, #0
 800bede:	da03      	bge.n	800bee8 <_printf_i+0xc8>
 800bee0:	232d      	movs	r3, #45	; 0x2d
 800bee2:	426d      	negs	r5, r5
 800bee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee8:	485e      	ldr	r0, [pc, #376]	; (800c064 <_printf_i+0x244>)
 800beea:	230a      	movs	r3, #10
 800beec:	e019      	b.n	800bf22 <_printf_i+0x102>
 800beee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bef2:	6805      	ldr	r5, [r0, #0]
 800bef4:	600b      	str	r3, [r1, #0]
 800bef6:	bf18      	it	ne
 800bef8:	b22d      	sxthne	r5, r5
 800befa:	e7ef      	b.n	800bedc <_printf_i+0xbc>
 800befc:	680b      	ldr	r3, [r1, #0]
 800befe:	6825      	ldr	r5, [r4, #0]
 800bf00:	1d18      	adds	r0, r3, #4
 800bf02:	6008      	str	r0, [r1, #0]
 800bf04:	0628      	lsls	r0, r5, #24
 800bf06:	d501      	bpl.n	800bf0c <_printf_i+0xec>
 800bf08:	681d      	ldr	r5, [r3, #0]
 800bf0a:	e002      	b.n	800bf12 <_printf_i+0xf2>
 800bf0c:	0669      	lsls	r1, r5, #25
 800bf0e:	d5fb      	bpl.n	800bf08 <_printf_i+0xe8>
 800bf10:	881d      	ldrh	r5, [r3, #0]
 800bf12:	4854      	ldr	r0, [pc, #336]	; (800c064 <_printf_i+0x244>)
 800bf14:	2f6f      	cmp	r7, #111	; 0x6f
 800bf16:	bf0c      	ite	eq
 800bf18:	2308      	moveq	r3, #8
 800bf1a:	230a      	movne	r3, #10
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf22:	6866      	ldr	r6, [r4, #4]
 800bf24:	60a6      	str	r6, [r4, #8]
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	bfa2      	ittt	ge
 800bf2a:	6821      	ldrge	r1, [r4, #0]
 800bf2c:	f021 0104 	bicge.w	r1, r1, #4
 800bf30:	6021      	strge	r1, [r4, #0]
 800bf32:	b90d      	cbnz	r5, 800bf38 <_printf_i+0x118>
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	d04d      	beq.n	800bfd4 <_printf_i+0x1b4>
 800bf38:	4616      	mov	r6, r2
 800bf3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf3e:	fb03 5711 	mls	r7, r3, r1, r5
 800bf42:	5dc7      	ldrb	r7, [r0, r7]
 800bf44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf48:	462f      	mov	r7, r5
 800bf4a:	42bb      	cmp	r3, r7
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	d9f4      	bls.n	800bf3a <_printf_i+0x11a>
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	d10b      	bne.n	800bf6c <_printf_i+0x14c>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	07df      	lsls	r7, r3, #31
 800bf58:	d508      	bpl.n	800bf6c <_printf_i+0x14c>
 800bf5a:	6923      	ldr	r3, [r4, #16]
 800bf5c:	6861      	ldr	r1, [r4, #4]
 800bf5e:	4299      	cmp	r1, r3
 800bf60:	bfde      	ittt	le
 800bf62:	2330      	movle	r3, #48	; 0x30
 800bf64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf68:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bf6c:	1b92      	subs	r2, r2, r6
 800bf6e:	6122      	str	r2, [r4, #16]
 800bf70:	f8cd a000 	str.w	sl, [sp]
 800bf74:	464b      	mov	r3, r9
 800bf76:	aa03      	add	r2, sp, #12
 800bf78:	4621      	mov	r1, r4
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	f7ff fee2 	bl	800bd44 <_printf_common>
 800bf80:	3001      	adds	r0, #1
 800bf82:	d14c      	bne.n	800c01e <_printf_i+0x1fe>
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf88:	b004      	add	sp, #16
 800bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8e:	4835      	ldr	r0, [pc, #212]	; (800c064 <_printf_i+0x244>)
 800bf90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	680e      	ldr	r6, [r1, #0]
 800bf98:	061f      	lsls	r7, r3, #24
 800bf9a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf9e:	600e      	str	r6, [r1, #0]
 800bfa0:	d514      	bpl.n	800bfcc <_printf_i+0x1ac>
 800bfa2:	07d9      	lsls	r1, r3, #31
 800bfa4:	bf44      	itt	mi
 800bfa6:	f043 0320 	orrmi.w	r3, r3, #32
 800bfaa:	6023      	strmi	r3, [r4, #0]
 800bfac:	b91d      	cbnz	r5, 800bfb6 <_printf_i+0x196>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	f023 0320 	bic.w	r3, r3, #32
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	2310      	movs	r3, #16
 800bfb8:	e7b0      	b.n	800bf1c <_printf_i+0xfc>
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	f043 0320 	orr.w	r3, r3, #32
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	2378      	movs	r3, #120	; 0x78
 800bfc4:	4828      	ldr	r0, [pc, #160]	; (800c068 <_printf_i+0x248>)
 800bfc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfca:	e7e3      	b.n	800bf94 <_printf_i+0x174>
 800bfcc:	065e      	lsls	r6, r3, #25
 800bfce:	bf48      	it	mi
 800bfd0:	b2ad      	uxthmi	r5, r5
 800bfd2:	e7e6      	b.n	800bfa2 <_printf_i+0x182>
 800bfd4:	4616      	mov	r6, r2
 800bfd6:	e7bb      	b.n	800bf50 <_printf_i+0x130>
 800bfd8:	680b      	ldr	r3, [r1, #0]
 800bfda:	6826      	ldr	r6, [r4, #0]
 800bfdc:	6960      	ldr	r0, [r4, #20]
 800bfde:	1d1d      	adds	r5, r3, #4
 800bfe0:	600d      	str	r5, [r1, #0]
 800bfe2:	0635      	lsls	r5, r6, #24
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	d501      	bpl.n	800bfec <_printf_i+0x1cc>
 800bfe8:	6018      	str	r0, [r3, #0]
 800bfea:	e002      	b.n	800bff2 <_printf_i+0x1d2>
 800bfec:	0671      	lsls	r1, r6, #25
 800bfee:	d5fb      	bpl.n	800bfe8 <_printf_i+0x1c8>
 800bff0:	8018      	strh	r0, [r3, #0]
 800bff2:	2300      	movs	r3, #0
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	4616      	mov	r6, r2
 800bff8:	e7ba      	b.n	800bf70 <_printf_i+0x150>
 800bffa:	680b      	ldr	r3, [r1, #0]
 800bffc:	1d1a      	adds	r2, r3, #4
 800bffe:	600a      	str	r2, [r1, #0]
 800c000:	681e      	ldr	r6, [r3, #0]
 800c002:	6862      	ldr	r2, [r4, #4]
 800c004:	2100      	movs	r1, #0
 800c006:	4630      	mov	r0, r6
 800c008:	f7f4 f8ea 	bl	80001e0 <memchr>
 800c00c:	b108      	cbz	r0, 800c012 <_printf_i+0x1f2>
 800c00e:	1b80      	subs	r0, r0, r6
 800c010:	6060      	str	r0, [r4, #4]
 800c012:	6863      	ldr	r3, [r4, #4]
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	2300      	movs	r3, #0
 800c018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c01c:	e7a8      	b.n	800bf70 <_printf_i+0x150>
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	4632      	mov	r2, r6
 800c022:	4649      	mov	r1, r9
 800c024:	4640      	mov	r0, r8
 800c026:	47d0      	blx	sl
 800c028:	3001      	adds	r0, #1
 800c02a:	d0ab      	beq.n	800bf84 <_printf_i+0x164>
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	079b      	lsls	r3, r3, #30
 800c030:	d413      	bmi.n	800c05a <_printf_i+0x23a>
 800c032:	68e0      	ldr	r0, [r4, #12]
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	4298      	cmp	r0, r3
 800c038:	bfb8      	it	lt
 800c03a:	4618      	movlt	r0, r3
 800c03c:	e7a4      	b.n	800bf88 <_printf_i+0x168>
 800c03e:	2301      	movs	r3, #1
 800c040:	4632      	mov	r2, r6
 800c042:	4649      	mov	r1, r9
 800c044:	4640      	mov	r0, r8
 800c046:	47d0      	blx	sl
 800c048:	3001      	adds	r0, #1
 800c04a:	d09b      	beq.n	800bf84 <_printf_i+0x164>
 800c04c:	3501      	adds	r5, #1
 800c04e:	68e3      	ldr	r3, [r4, #12]
 800c050:	9903      	ldr	r1, [sp, #12]
 800c052:	1a5b      	subs	r3, r3, r1
 800c054:	42ab      	cmp	r3, r5
 800c056:	dcf2      	bgt.n	800c03e <_printf_i+0x21e>
 800c058:	e7eb      	b.n	800c032 <_printf_i+0x212>
 800c05a:	2500      	movs	r5, #0
 800c05c:	f104 0619 	add.w	r6, r4, #25
 800c060:	e7f5      	b.n	800c04e <_printf_i+0x22e>
 800c062:	bf00      	nop
 800c064:	0800c48d 	.word	0x0800c48d
 800c068:	0800c49e 	.word	0x0800c49e

0800c06c <__sread>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	f000 f8d4 	bl	800c220 <_read_r>
 800c078:	2800      	cmp	r0, #0
 800c07a:	bfab      	itete	ge
 800c07c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c07e:	89a3      	ldrhlt	r3, [r4, #12]
 800c080:	181b      	addge	r3, r3, r0
 800c082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c086:	bfac      	ite	ge
 800c088:	6563      	strge	r3, [r4, #84]	; 0x54
 800c08a:	81a3      	strhlt	r3, [r4, #12]
 800c08c:	bd10      	pop	{r4, pc}

0800c08e <__swrite>:
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	461f      	mov	r7, r3
 800c094:	898b      	ldrh	r3, [r1, #12]
 800c096:	05db      	lsls	r3, r3, #23
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4616      	mov	r6, r2
 800c09e:	d505      	bpl.n	800c0ac <__swrite+0x1e>
 800c0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f000 f868 	bl	800c17c <_lseek_r>
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	4628      	mov	r0, r5
 800c0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c2:	f000 b817 	b.w	800c0f4 <_write_r>

0800c0c6 <__sseek>:
 800c0c6:	b510      	push	{r4, lr}
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ce:	f000 f855 	bl	800c17c <_lseek_r>
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	bf15      	itete	ne
 800c0d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0e2:	81a3      	strheq	r3, [r4, #12]
 800c0e4:	bf18      	it	ne
 800c0e6:	81a3      	strhne	r3, [r4, #12]
 800c0e8:	bd10      	pop	{r4, pc}

0800c0ea <__sclose>:
 800c0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ee:	f000 b813 	b.w	800c118 <_close_r>
	...

0800c0f4 <_write_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	; (800c114 <_write_r+0x20>)
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	2200      	movs	r2, #0
 800c100:	602a      	str	r2, [r5, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	f7f4 fa60 	bl	80005c8 <_write>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_write_r+0x1e>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_write_r+0x1e>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20002948 	.word	0x20002948

0800c118 <_close_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_close_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f4 fd65 	bl	8000bf2 <_close>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_close_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_close_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20002948 	.word	0x20002948

0800c138 <_fstat_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_fstat_r+0x20>)
 800c13c:	2300      	movs	r3, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	4608      	mov	r0, r1
 800c142:	4611      	mov	r1, r2
 800c144:	602b      	str	r3, [r5, #0]
 800c146:	f7f4 fd60 	bl	8000c0a <_fstat>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	d102      	bne.n	800c154 <_fstat_r+0x1c>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	b103      	cbz	r3, 800c154 <_fstat_r+0x1c>
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	bd38      	pop	{r3, r4, r5, pc}
 800c156:	bf00      	nop
 800c158:	20002948 	.word	0x20002948

0800c15c <_isatty_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d06      	ldr	r5, [pc, #24]	; (800c178 <_isatty_r+0x1c>)
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	602b      	str	r3, [r5, #0]
 800c168:	f7f4 fd5f 	bl	8000c2a <_isatty>
 800c16c:	1c43      	adds	r3, r0, #1
 800c16e:	d102      	bne.n	800c176 <_isatty_r+0x1a>
 800c170:	682b      	ldr	r3, [r5, #0]
 800c172:	b103      	cbz	r3, 800c176 <_isatty_r+0x1a>
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	20002948 	.word	0x20002948

0800c17c <_lseek_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	; (800c19c <_lseek_r+0x20>)
 800c180:	4604      	mov	r4, r0
 800c182:	4608      	mov	r0, r1
 800c184:	4611      	mov	r1, r2
 800c186:	2200      	movs	r2, #0
 800c188:	602a      	str	r2, [r5, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	f7f4 fd58 	bl	8000c40 <_lseek>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_lseek_r+0x1e>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_lseek_r+0x1e>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	20002948 	.word	0x20002948

0800c1a0 <memmove>:
 800c1a0:	4288      	cmp	r0, r1
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	eb01 0402 	add.w	r4, r1, r2
 800c1a8:	d902      	bls.n	800c1b0 <memmove+0x10>
 800c1aa:	4284      	cmp	r4, r0
 800c1ac:	4623      	mov	r3, r4
 800c1ae:	d807      	bhi.n	800c1c0 <memmove+0x20>
 800c1b0:	1e43      	subs	r3, r0, #1
 800c1b2:	42a1      	cmp	r1, r4
 800c1b4:	d008      	beq.n	800c1c8 <memmove+0x28>
 800c1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1be:	e7f8      	b.n	800c1b2 <memmove+0x12>
 800c1c0:	4402      	add	r2, r0
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	428a      	cmp	r2, r1
 800c1c6:	d100      	bne.n	800c1ca <memmove+0x2a>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1d2:	e7f7      	b.n	800c1c4 <memmove+0x24>

0800c1d4 <_realloc_r>:
 800c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	4614      	mov	r4, r2
 800c1da:	460e      	mov	r6, r1
 800c1dc:	b921      	cbnz	r1, 800c1e8 <_realloc_r+0x14>
 800c1de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	f7ff b868 	b.w	800b2b8 <_malloc_r>
 800c1e8:	b922      	cbnz	r2, 800c1f4 <_realloc_r+0x20>
 800c1ea:	f7ff f815 	bl	800b218 <_free_r>
 800c1ee:	4625      	mov	r5, r4
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f4:	f000 f826 	bl	800c244 <_malloc_usable_size_r>
 800c1f8:	42a0      	cmp	r0, r4
 800c1fa:	d20f      	bcs.n	800c21c <_realloc_r+0x48>
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7ff f85a 	bl	800b2b8 <_malloc_r>
 800c204:	4605      	mov	r5, r0
 800c206:	2800      	cmp	r0, #0
 800c208:	d0f2      	beq.n	800c1f0 <_realloc_r+0x1c>
 800c20a:	4631      	mov	r1, r6
 800c20c:	4622      	mov	r2, r4
 800c20e:	f7fe ffed 	bl	800b1ec <memcpy>
 800c212:	4631      	mov	r1, r6
 800c214:	4638      	mov	r0, r7
 800c216:	f7fe ffff 	bl	800b218 <_free_r>
 800c21a:	e7e9      	b.n	800c1f0 <_realloc_r+0x1c>
 800c21c:	4635      	mov	r5, r6
 800c21e:	e7e7      	b.n	800c1f0 <_realloc_r+0x1c>

0800c220 <_read_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d07      	ldr	r5, [pc, #28]	; (800c240 <_read_r+0x20>)
 800c224:	4604      	mov	r4, r0
 800c226:	4608      	mov	r0, r1
 800c228:	4611      	mov	r1, r2
 800c22a:	2200      	movs	r2, #0
 800c22c:	602a      	str	r2, [r5, #0]
 800c22e:	461a      	mov	r2, r3
 800c230:	f7f4 fcc2 	bl	8000bb8 <_read>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_read_r+0x1e>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_read_r+0x1e>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	20002948 	.word	0x20002948

0800c244 <_malloc_usable_size_r>:
 800c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c248:	1f18      	subs	r0, r3, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	bfbc      	itt	lt
 800c24e:	580b      	ldrlt	r3, [r1, r0]
 800c250:	18c0      	addlt	r0, r0, r3
 800c252:	4770      	bx	lr

0800c254 <_init>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	bf00      	nop
 800c258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25a:	bc08      	pop	{r3}
 800c25c:	469e      	mov	lr, r3
 800c25e:	4770      	bx	lr

0800c260 <_fini>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	bf00      	nop
 800c264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c266:	bc08      	pop	{r3}
 800c268:	469e      	mov	lr, r3
 800c26a:	4770      	bx	lr
