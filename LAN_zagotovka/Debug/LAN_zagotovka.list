
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018a98  0801b508  0801b508  0002b508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033fa0  08033fa0  000507a0  2**0
                  CONTENTS
  4 .ARM          00000008  08033fa0  08033fa0  00043fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033fa8  08033fa8  000507a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033fa8  08033fa8  00043fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033fac  08033fac  00043fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007a0  20000000  08033fb0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000507a0  2**0
                  CONTENTS
 10 .bss          0000d110  200007a0  200007a0  000507a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d8b0  2000d8b0  000507a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000507a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a0da  00000000  00000000  000507d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067f4  00000000  00000000  0008a8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa0  00000000  00000000  000910a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  00092b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f38e  00000000  00000000  00094558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf1f  00000000  00000000  000c38e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fc9  00000000  00000000  000f0805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d77ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084d4  00000000  00000000  001d7824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007a0 	.word	0x200007a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b4ec 	.word	0x0801b4ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007a4 	.word	0x200007a4
 80001cc:	0801b4ec 	.word	0x0801b4ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <ssi_handler>:

//printf("Longitude: %.20f\n\r", Settings.lon_de);
//printf("Latitude: %.20f\n\r",Settings.lat_de);

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b099      	sub	sp, #100	; 0x64
 8000f70:	af0c      	add	r7, sp, #48	; 0x30
 8000f72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8000f76:	627a      	str	r2, [r7, #36]	; 0x24
 8000f78:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	2b29      	cmp	r3, #41	; 0x29
 8000f7e:	f201 8655 	bhi.w	8002c2c <ssi_handler+0x1cc0>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <ssi_handler+0x1c>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08001031 	.word	0x08001031
 8000f8c:	08001cb5 	.word	0x08001cb5
 8000f90:	08001fa5 	.word	0x08001fa5
 8000f94:	08002c2d 	.word	0x08002c2d
 8000f98:	08001fbb 	.word	0x08001fbb
 8000f9c:	08001fd7 	.word	0x08001fd7
 8000fa0:	08001ff3 	.word	0x08001ff3
 8000fa4:	0800200f 	.word	0x0800200f
 8000fa8:	08002027 	.word	0x08002027
 8000fac:	0800203f 	.word	0x0800203f
 8000fb0:	08002057 	.word	0x08002057
 8000fb4:	0800206f 	.word	0x0800206f
 8000fb8:	08002087 	.word	0x08002087
 8000fbc:	080020a5 	.word	0x080020a5
 8000fc0:	080020c3 	.word	0x080020c3
 8000fc4:	080020e1 	.word	0x080020e1
 8000fc8:	080020ff 	.word	0x080020ff
 8000fcc:	0800211d 	.word	0x0800211d
 8000fd0:	0800213b 	.word	0x0800213b
 8000fd4:	08002159 	.word	0x08002159
 8000fd8:	08002177 	.word	0x08002177
 8000fdc:	08002195 	.word	0x08002195
 8000fe0:	08002201 	.word	0x08002201
 8000fe4:	0800221f 	.word	0x0800221f
 8000fe8:	0800223d 	.word	0x0800223d
 8000fec:	0800225b 	.word	0x0800225b
 8000ff0:	08002279 	.word	0x08002279
 8000ff4:	08002297 	.word	0x08002297
 8000ff8:	080022b5 	.word	0x080022b5
 8000ffc:	080022e5 	.word	0x080022e5
 8001000:	08002315 	.word	0x08002315
 8001004:	08002333 	.word	0x08002333
 8001008:	0800234b 	.word	0x0800234b
 800100c:	0800237b 	.word	0x0800237b
 8001010:	080023ad 	.word	0x080023ad
 8001014:	080028c9 	.word	0x080028c9
 8001018:	08002a99 	.word	0x08002a99
 800101c:	08002ad9 	.word	0x08002ad9
 8001020:	08002b53 	.word	0x08002b53
 8001024:	08002b91 	.word	0x08002b91
 8001028:	08002bbf 	.word	0x08002bbf
 800102c:	08002bed 	.word	0x08002bed
	//printf("%d \n", jsongo);
	switch (iIndex) {
	case 0:
#if LWIP_HTTPD_SSI_MULTIPART

		if (variable == numpin) {
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <ssi_handler+0xe4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b3a      	cmp	r3, #58	; 0x3a
 8001036:	d104      	bne.n	8001042 <ssi_handler+0xd6>
			//default:
			variable = 0;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <ssi_handler+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
			//return strlen(pcInsert);
			break;
 800103e:	f001 bdf6 	b.w	8002c2e <ssi_handler+0x1cc2>
		} else {
			// json pin to pin (to buttoms json)
			if (jsongo == 1) {
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <ssi_handler+0xe8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	f040 8084 	bne.w	8001154 <ssi_handler+0x1e8>
				while (variable3 <= numpintopin - 1) {
 800104c:	e076      	b.n	800113c <ssi_handler+0x1d0>
 800104e:	bf00      	nop
 8001050:	200007c4 	.word	0x200007c4
 8001054:	200007c8 	.word	0x200007c8
					if (variable3 == 0) {
 8001058:	4bab      	ldr	r3, [pc, #684]	; (8001308 <ssi_handler+0x39c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10b      	bne.n	8001078 <ssi_handler+0x10c>
						strcat(listaction, "{");
 8001060:	48aa      	ldr	r0, [pc, #680]	; (800130c <ssi_handler+0x3a0>)
 8001062:	f7ff f8bf 	bl	80001e4 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4ba8      	ldr	r3, [pc, #672]	; (800130c <ssi_handler+0x3a0>)
 800106c:	4413      	add	r3, r2
 800106e:	49a8      	ldr	r1, [pc, #672]	; (8001310 <ssi_handler+0x3a4>)
 8001070:	461a      	mov	r2, r3
 8001072:	460b      	mov	r3, r1
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	8013      	strh	r3, [r2, #0]
					}
					if (variable == TO[variable3].idin
 8001078:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <ssi_handler+0x39c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	49a5      	ldr	r1, [pc, #660]	; (8001314 <ssi_handler+0x3a8>)
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4ba3      	ldr	r3, [pc, #652]	; (8001318 <ssi_handler+0x3ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d125      	bne.n	80010de <ssi_handler+0x172>
							&& TO[variable3].flag == 1) {
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <ssi_handler+0x39c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	499f      	ldr	r1, [pc, #636]	; (8001314 <ssi_handler+0x3a8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3308      	adds	r3, #8
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d119      	bne.n	80010de <ssi_handler+0x172>
						//sprintf(name3, "\"%s\":[%d,%d],",tp[TO[variable3].idout].pins, TO[variable3].idout, variable3);
						sprintf(name3, "\"%s\":%d,",
								tp[TO[variable3].idout].pins, variable3);
 80010aa:	4b97      	ldr	r3, [pc, #604]	; (8001308 <ssi_handler+0x39c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4999      	ldr	r1, [pc, #612]	; (8001314 <ssi_handler+0x3a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3304      	adds	r3, #4
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4a95      	ldr	r2, [pc, #596]	; (800131c <ssi_handler+0x3b0>)
 80010c8:	441a      	add	r2, r3
						sprintf(name3, "\"%s\":%d,",
 80010ca:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <ssi_handler+0x39c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4994      	ldr	r1, [pc, #592]	; (8001320 <ssi_handler+0x3b4>)
 80010d0:	4894      	ldr	r0, [pc, #592]	; (8001324 <ssi_handler+0x3b8>)
 80010d2:	f016 fbcb 	bl	801786c <siprintf>
						strcat(listaction, name3);// {"PA5":0,"PA6":1, в поле "Relay connection"
 80010d6:	4993      	ldr	r1, [pc, #588]	; (8001324 <ssi_handler+0x3b8>)
 80010d8:	488c      	ldr	r0, [pc, #560]	; (800130c <ssi_handler+0x3a0>)
 80010da:	f016 fbe7 	bl	80178ac <strcat>
//					int code = (listaction[strlen(listaction) - 1]);
//					//printf("tmp_x %d\r\n",tmp_x ); // 123 -	{ левая фигурная скобка
//					if (variable3 == numpintopin - 1 && strcmp((char*)code, "123") > 0) {
//						listaction[strlen(listaction) - 1] = '\0';
//					}
					if (variable3 == numpintopin - 1 && strcmp(listaction[strlen(listaction) - 1], (char*)'{') > 0) {
 80010de:	4b8a      	ldr	r3, [pc, #552]	; (8001308 <ssi_handler+0x39c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b45      	cmp	r3, #69	; 0x45
 80010e4:	d115      	bne.n	8001112 <ssi_handler+0x1a6>
 80010e6:	4889      	ldr	r0, [pc, #548]	; (800130c <ssi_handler+0x3a0>)
 80010e8:	f7ff f87c 	bl	80001e4 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a86      	ldr	r2, [pc, #536]	; (800130c <ssi_handler+0x3a0>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	217b      	movs	r1, #123	; 0x7b
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f86a 	bl	80001d0 <strcmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dd07      	ble.n	8001112 <ssi_handler+0x1a6>
						listaction[strlen(listaction) - 1] = '\0';
 8001102:	4882      	ldr	r0, [pc, #520]	; (800130c <ssi_handler+0x3a0>)
 8001104:	f7ff f86e 	bl	80001e4 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	3b01      	subs	r3, #1
 800110c:	4a7f      	ldr	r2, [pc, #508]	; (800130c <ssi_handler+0x3a0>)
 800110e:	2100      	movs	r1, #0
 8001110:	54d1      	strb	r1, [r2, r3]
					}
					if (variable3 == numpintopin - 1) {
 8001112:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <ssi_handler+0x39c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b45      	cmp	r3, #69	; 0x45
 8001118:	d10b      	bne.n	8001132 <ssi_handler+0x1c6>
						strcat(listaction, "}");
 800111a:	487c      	ldr	r0, [pc, #496]	; (800130c <ssi_handler+0x3a0>)
 800111c:	f7ff f862 	bl	80001e4 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b79      	ldr	r3, [pc, #484]	; (800130c <ssi_handler+0x3a0>)
 8001126:	4413      	add	r3, r2
 8001128:	497f      	ldr	r1, [pc, #508]	; (8001328 <ssi_handler+0x3bc>)
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	8013      	strh	r3, [r2, #0]
					}
					variable3++;
 8001132:	4b75      	ldr	r3, [pc, #468]	; (8001308 <ssi_handler+0x39c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a73      	ldr	r2, [pc, #460]	; (8001308 <ssi_handler+0x39c>)
 800113a:	6013      	str	r3, [r2, #0]
				while (variable3 <= numpintopin - 1) {
 800113c:	4b72      	ldr	r3, [pc, #456]	; (8001308 <ssi_handler+0x39c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b45      	cmp	r3, #69	; 0x45
 8001142:	dd89      	ble.n	8001058 <ssi_handler+0xec>
				}
				memset(name3, '\0', sizeof(name3));
 8001144:	220a      	movs	r2, #10
 8001146:	2100      	movs	r1, #0
 8001148:	4876      	ldr	r0, [pc, #472]	; (8001324 <ssi_handler+0x3b8>)
 800114a:	f015 fe1b 	bl	8016d84 <memset>
				variable3 = 0;
 800114e:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <ssi_handler+0x39c>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
			}

			if (variable == 0) {
 8001154:	4b70      	ldr	r3, [pc, #448]	; (8001318 <ssi_handler+0x3ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 81e5 	bne.w	8001528 <ssi_handler+0x5bc>
				if (jsongo == 1) {
 800115e:	4b73      	ldr	r3, [pc, #460]	; (800132c <ssi_handler+0x3c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d17e      	bne.n	8001264 <ssi_handler+0x2f8>
					// buttoms json
					sprintf(pcInsert,
 8001166:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <ssi_handler+0x3ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a71      	ldr	r2, [pc, #452]	; (8001330 <ssi_handler+0x3c4>)
 800116c:	2168      	movs	r1, #104	; 0x68
 800116e:	fb01 f303 	mul.w	r3, r1, r3
 8001172:	4413      	add	r3, r2
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	4b67      	ldr	r3, [pc, #412]	; (8001318 <ssi_handler+0x3ac>)
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <ssi_handler+0x3ac>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4a64      	ldr	r2, [pc, #400]	; (800131c <ssi_handler+0x3b0>)
 800118c:	1899      	adds	r1, r3, r2
 800118e:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 8001190:	4b61      	ldr	r3, [pc, #388]	; (8001318 <ssi_handler+0x3ac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2268      	movs	r2, #104	; 0x68
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	3318      	adds	r3, #24
 800119c:	4a64      	ldr	r2, [pc, #400]	; (8001330 <ssi_handler+0x3c4>)
 800119e:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <ssi_handler+0x3ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a62      	ldr	r2, [pc, #392]	; (8001330 <ssi_handler+0x3c4>)
 80011a6:	2168      	movs	r1, #104	; 0x68
 80011a8:	fb01 f303 	mul.w	r3, r1, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	332c      	adds	r3, #44	; 0x2c
 80011b0:	681d      	ldr	r5, [r3, #0]
 80011b2:	4b59      	ldr	r3, [pc, #356]	; (8001318 <ssi_handler+0x3ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a5e      	ldr	r2, [pc, #376]	; (8001330 <ssi_handler+0x3c4>)
 80011b8:	2168      	movs	r1, #104	; 0x68
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	4413      	add	r3, r2
 80011c0:	3330      	adds	r3, #48	; 0x30
 80011c2:	681e      	ldr	r6, [r3, #0]
 80011c4:	4b54      	ldr	r3, [pc, #336]	; (8001318 <ssi_handler+0x3ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a59      	ldr	r2, [pc, #356]	; (8001330 <ssi_handler+0x3c4>)
 80011ca:	2168      	movs	r1, #104	; 0x68
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	3334      	adds	r3, #52	; 0x34
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	613a      	str	r2, [r7, #16]
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <ssi_handler+0x3ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a54      	ldr	r2, [pc, #336]	; (8001330 <ssi_handler+0x3c4>)
 80011de:	2168      	movs	r1, #104	; 0x68
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	3338      	adds	r3, #56	; 0x38
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	60f9      	str	r1, [r7, #12]
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <ssi_handler+0x3ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <ssi_handler+0x3c4>)
 80011f2:	2168      	movs	r1, #104	; 0x68
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	333c      	adds	r3, #60	; 0x3c
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <ssi_handler+0x3ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <ssi_handler+0x3c4>)
 8001206:	2168      	movs	r1, #104	; 0x68
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	3340      	adds	r3, #64	; 0x40
 8001210:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <ssi_handler+0x3ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2268      	movs	r2, #104	; 0x68
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	3340      	adds	r3, #64	; 0x40
 800121e:	4a44      	ldr	r2, [pc, #272]	; (8001330 <ssi_handler+0x3c4>)
 8001220:	4413      	add	r3, r2
 8001222:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 8001224:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <ssi_handler+0x3ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <ssi_handler+0x3c4>)
 800122a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800122e:	fb0c f303 	mul.w	r3, ip, r3
 8001232:	4403      	add	r3, r0
 8001234:	3364      	adds	r3, #100	; 0x64
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	930a      	str	r3, [sp, #40]	; 0x28
 800123a:	9209      	str	r2, [sp, #36]	; 0x24
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <ssi_handler+0x3a0>)
 800123e:	9308      	str	r3, [sp, #32]
 8001240:	9107      	str	r1, [sp, #28]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	9306      	str	r3, [sp, #24]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	9105      	str	r1, [sp, #20]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	9204      	str	r2, [sp, #16]
 800124e:	9603      	str	r6, [sp, #12]
 8001250:	9502      	str	r5, [sp, #8]
 8001252:	9401      	str	r4, [sp, #4]
 8001254:	6979      	ldr	r1, [r7, #20]
 8001256:	9100      	str	r1, [sp, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4935      	ldr	r1, [pc, #212]	; (8001334 <ssi_handler+0x3c8>)
 800125e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001260:	f016 fb04 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <ssi_handler+0x3c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	f040 8091 	bne.w	8001390 <ssi_handler+0x424>
					// relay json
					sprintf(pcInsert,
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <ssi_handler+0x3ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <ssi_handler+0x3c4>)
 8001274:	2168      	movs	r1, #104	; 0x68
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <ssi_handler+0x3ac>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <ssi_handler+0x3ac>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <ssi_handler+0x3b0>)
 8001294:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001296:	4a20      	ldr	r2, [pc, #128]	; (8001318 <ssi_handler+0x3ac>)
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	2168      	movs	r1, #104	; 0x68
 800129c:	fb01 f202 	mul.w	r2, r1, r2
 80012a0:	3218      	adds	r2, #24
 80012a2:	4923      	ldr	r1, [pc, #140]	; (8001330 <ssi_handler+0x3c4>)
 80012a4:	440a      	add	r2, r1
					sprintf(pcInsert,
 80012a6:	491c      	ldr	r1, [pc, #112]	; (8001318 <ssi_handler+0x3ac>)
 80012a8:	6809      	ldr	r1, [r1, #0]
 80012aa:	4821      	ldr	r0, [pc, #132]	; (8001330 <ssi_handler+0x3c4>)
 80012ac:	2468      	movs	r4, #104	; 0x68
 80012ae:	fb04 f101 	mul.w	r1, r4, r1
 80012b2:	4401      	add	r1, r0
 80012b4:	3104      	adds	r1, #4
 80012b6:	6809      	ldr	r1, [r1, #0]
 80012b8:	4817      	ldr	r0, [pc, #92]	; (8001318 <ssi_handler+0x3ac>)
 80012ba:	6800      	ldr	r0, [r0, #0]
 80012bc:	4c1c      	ldr	r4, [pc, #112]	; (8001330 <ssi_handler+0x3c4>)
 80012be:	2568      	movs	r5, #104	; 0x68
 80012c0:	fb05 f000 	mul.w	r0, r5, r0
 80012c4:	4420      	add	r0, r4
 80012c6:	3008      	adds	r0, #8
 80012c8:	6800      	ldr	r0, [r0, #0]
 80012ca:	6178      	str	r0, [r7, #20]
 80012cc:	4c12      	ldr	r4, [pc, #72]	; (8001318 <ssi_handler+0x3ac>)
 80012ce:	6824      	ldr	r4, [r4, #0]
 80012d0:	4d17      	ldr	r5, [pc, #92]	; (8001330 <ssi_handler+0x3c4>)
 80012d2:	2668      	movs	r6, #104	; 0x68
 80012d4:	fb06 f404 	mul.w	r4, r6, r4
 80012d8:	442c      	add	r4, r5
 80012da:	340c      	adds	r4, #12
 80012dc:	6820      	ldr	r0, [r4, #0]
 80012de:	6138      	str	r0, [r7, #16]
 80012e0:	4d0d      	ldr	r5, [pc, #52]	; (8001318 <ssi_handler+0x3ac>)
 80012e2:	682d      	ldr	r5, [r5, #0]
 80012e4:	4e12      	ldr	r6, [pc, #72]	; (8001330 <ssi_handler+0x3c4>)
 80012e6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012ea:	fb0c f505 	mul.w	r5, ip, r5
 80012ee:	4435      	add	r5, r6
 80012f0:	3510      	adds	r5, #16
 80012f2:	682d      	ldr	r5, [r5, #0]
 80012f4:	4e08      	ldr	r6, [pc, #32]	; (8001318 <ssi_handler+0x3ac>)
 80012f6:	6836      	ldr	r6, [r6, #0]
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <ssi_handler+0x3c4>)
 80012fa:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012fe:	fb0c f606 	mul.w	r6, ip, r6
 8001302:	4406      	add	r6, r0
 8001304:	3614      	adds	r6, #20
 8001306:	e017      	b.n	8001338 <ssi_handler+0x3cc>
 8001308:	200007c0 	.word	0x200007c0
 800130c:	20006aa4 	.word	0x20006aa4
 8001310:	0801b6b8 	.word	0x0801b6b8
 8001314:	200026bc 	.word	0x200026bc
 8001318:	200007c4 	.word	0x200007c4
 800131c:	20000008 	.word	0x20000008
 8001320:	0801b6bc 	.word	0x0801b6bc
 8001324:	20002a04 	.word	0x20002a04
 8001328:	0801b6c8 	.word	0x0801b6c8
 800132c:	200007c8 	.word	0x200007c8
 8001330:	20002a10 	.word	0x20002a10
 8001334:	0801b6cc 	.word	0x0801b6cc
 8001338:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 800133a:	4873      	ldr	r0, [pc, #460]	; (8001508 <ssi_handler+0x59c>)
 800133c:	6800      	ldr	r0, [r0, #0]
 800133e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001342:	fb0c fc00 	mul.w	ip, ip, r0
 8001346:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800134a:	4870      	ldr	r0, [pc, #448]	; (800150c <ssi_handler+0x5a0>)
 800134c:	4484      	add	ip, r0
 800134e:	f10c 0004 	add.w	r0, ip, #4
 8001352:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 8001354:	486c      	ldr	r0, [pc, #432]	; (8001508 <ssi_handler+0x59c>)
 8001356:	6800      	ldr	r0, [r0, #0]
 8001358:	4c6c      	ldr	r4, [pc, #432]	; (800150c <ssi_handler+0x5a0>)
 800135a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800135e:	fb0c fc00 	mul.w	ip, ip, r0
 8001362:	44a4      	add	ip, r4
 8001364:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001368:	f8dc 0000 	ldr.w	r0, [ip]
 800136c:	9008      	str	r0, [sp, #32]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	9007      	str	r0, [sp, #28]
 8001372:	9606      	str	r6, [sp, #24]
 8001374:	9505      	str	r5, [sp, #20]
 8001376:	6938      	ldr	r0, [r7, #16]
 8001378:	9004      	str	r0, [sp, #16]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	9003      	str	r0, [sp, #12]
 800137e:	9102      	str	r1, [sp, #8]
 8001380:	9201      	str	r2, [sp, #4]
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4961      	ldr	r1, [pc, #388]	; (8001510 <ssi_handler+0x5a4>)
 800138a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138c:	f016 fa6e 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 8001390:	4b60      	ldr	r3, [pc, #384]	; (8001514 <ssi_handler+0x5a8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d118      	bne.n	80013ca <ssi_handler+0x45e>
					// select json
					sprintf(pcInsert,
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <ssi_handler+0x59c>)
 800139a:	6819      	ldr	r1, [r3, #0]
							"[{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 800139c:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <ssi_handler+0x59c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <ssi_handler+0x5ac>)
 80013aa:	441a      	add	r2, r3
					sprintf(pcInsert,
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <ssi_handler+0x59c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4856      	ldr	r0, [pc, #344]	; (800150c <ssi_handler+0x5a0>)
 80013b2:	2468      	movs	r4, #104	; 0x68
 80013b4:	fb04 f303 	mul.w	r3, r4, r3
 80013b8:	4403      	add	r3, r0
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	460a      	mov	r2, r1
 80013c2:	4956      	ldr	r1, [pc, #344]	; (800151c <ssi_handler+0x5b0>)
 80013c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c6:	f016 fa51 	bl	801786c <siprintf>
				}

				if (jsongo == 4) {
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <ssi_handler+0x5a8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	f040 8451 	bne.w	8001c76 <ssi_handler+0xd0a>
					// select json
					sprintf(pcInsert,
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <ssi_handler+0x59c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <ssi_handler+0x5a0>)
 80013da:	2168      	movs	r1, #104	; 0x68
 80013dc:	fb01 f303 	mul.w	r3, r1, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <ssi_handler+0x59c>)
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <ssi_handler+0x59c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4a47      	ldr	r2, [pc, #284]	; (8001518 <ssi_handler+0x5ac>)
 80013fa:	1898      	adds	r0, r3, r2
 80013fc:	4b42      	ldr	r3, [pc, #264]	; (8001508 <ssi_handler+0x59c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4947      	ldr	r1, [pc, #284]	; (8001520 <ssi_handler+0x5b4>)
 8001402:	4613      	mov	r3, r2
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3308      	adds	r3, #8
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <ssi_handler+0x59c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4941      	ldr	r1, [pc, #260]	; (8001520 <ssi_handler+0x5b4>)
 800141a:	4613      	mov	r3, r2
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	330c      	adds	r3, #12
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <ssi_handler+0x59c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	493c      	ldr	r1, [pc, #240]	; (8001520 <ssi_handler+0x5b4>)
 800142e:	4613      	mov	r3, r2
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3310      	adds	r3, #16
 800143a:	681d      	ldr	r5, [r3, #0]
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <ssi_handler+0x59c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4937      	ldr	r1, [pc, #220]	; (8001520 <ssi_handler+0x5b4>)
 8001442:	4613      	mov	r3, r2
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3314      	adds	r3, #20
 800144e:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <ssi_handler+0x59c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4932      	ldr	r1, [pc, #200]	; (8001520 <ssi_handler+0x5b4>)
 8001456:	4613      	mov	r3, r2
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3318      	adds	r3, #24
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001466:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <ssi_handler+0x59c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4613      	mov	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	3318      	adds	r3, #24
 8001476:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <ssi_handler+0x5b4>)
 8001478:	4413      	add	r3, r2
 800147a:	1c9a      	adds	r2, r3, #2
 800147c:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <ssi_handler+0x59c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4927      	ldr	r1, [pc, #156]	; (8001520 <ssi_handler+0x5b4>)
 8001484:	4613      	mov	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3324      	adds	r3, #36	; 0x24
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <ssi_handler+0x59c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4921      	ldr	r1, [pc, #132]	; (8001520 <ssi_handler+0x5b4>)
 800149a:	4613      	mov	r3, r2
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3328      	adds	r3, #40	; 0x28
 80014a6:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <ssi_handler+0x59c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	3328      	adds	r3, #40	; 0x28
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <ssi_handler+0x5b4>)
 80014b8:	4413      	add	r3, r2
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <ssi_handler+0x59c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <ssi_handler+0x5b4>)
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4694      	mov	ip, r2
 80014d2:	4463      	add	r3, ip
 80014d4:	333c      	adds	r3, #60	; 0x3c
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 80014da:	930a      	str	r3, [sp, #40]	; 0x28
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	9209      	str	r2, [sp, #36]	; 0x24
 80014e0:	9108      	str	r1, [sp, #32]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	9107      	str	r1, [sp, #28]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	9206      	str	r2, [sp, #24]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	9205      	str	r2, [sp, #20]
 80014ee:	9604      	str	r6, [sp, #16]
 80014f0:	9503      	str	r5, [sp, #12]
 80014f2:	9402      	str	r4, [sp, #8]
 80014f4:	697c      	ldr	r4, [r7, #20]
 80014f6:	9401      	str	r4, [sp, #4]
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	4909      	ldr	r1, [pc, #36]	; (8001524 <ssi_handler+0x5b8>)
 8001500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001502:	f016 f9b3 	bl	801786c <siprintf>
 8001506:	e3b6      	b.n	8001c76 <ssi_handler+0xd0a>
 8001508:	200007c4 	.word	0x200007c4
 800150c:	20002a10 	.word	0x20002a10
 8001510:	0801b768 	.word	0x0801b768
 8001514:	200007c8 	.word	0x200007c8
 8001518:	20000008 	.word	0x20000008
 800151c:	0801b7e4 	.word	0x0801b7e4
 8001520:	20001750 	.word	0x20001750
 8001524:	0801b808 	.word	0x0801b808
				}


			} else if (variable == numpin - 1) {
 8001528:	4ba8      	ldr	r3, [pc, #672]	; (80017cc <ssi_handler+0x860>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b39      	cmp	r3, #57	; 0x39
 800152e:	f040 81d5 	bne.w	80018dc <ssi_handler+0x970>
				if (jsongo == 1) {
 8001532:	4ba7      	ldr	r3, [pc, #668]	; (80017d0 <ssi_handler+0x864>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d17e      	bne.n	8001638 <ssi_handler+0x6cc>
					// buttoms json
					sprintf(pcInsert,
 800153a:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <ssi_handler+0x860>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4aa5      	ldr	r2, [pc, #660]	; (80017d4 <ssi_handler+0x868>)
 8001540:	2168      	movs	r1, #104	; 0x68
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	4b9f      	ldr	r3, [pc, #636]	; (80017cc <ssi_handler+0x860>)
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 8001552:	4b9e      	ldr	r3, [pc, #632]	; (80017cc <ssi_handler+0x860>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4a9e      	ldr	r2, [pc, #632]	; (80017d8 <ssi_handler+0x86c>)
 8001560:	1899      	adds	r1, r3, r2
 8001562:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 8001564:	4b99      	ldr	r3, [pc, #612]	; (80017cc <ssi_handler+0x860>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2268      	movs	r2, #104	; 0x68
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	3318      	adds	r3, #24
 8001570:	4a98      	ldr	r2, [pc, #608]	; (80017d4 <ssi_handler+0x868>)
 8001572:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 8001574:	4b95      	ldr	r3, [pc, #596]	; (80017cc <ssi_handler+0x860>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a96      	ldr	r2, [pc, #600]	; (80017d4 <ssi_handler+0x868>)
 800157a:	2168      	movs	r1, #104	; 0x68
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	332c      	adds	r3, #44	; 0x2c
 8001584:	681d      	ldr	r5, [r3, #0]
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <ssi_handler+0x860>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a92      	ldr	r2, [pc, #584]	; (80017d4 <ssi_handler+0x868>)
 800158c:	2168      	movs	r1, #104	; 0x68
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	3330      	adds	r3, #48	; 0x30
 8001596:	681e      	ldr	r6, [r3, #0]
 8001598:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <ssi_handler+0x860>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a8d      	ldr	r2, [pc, #564]	; (80017d4 <ssi_handler+0x868>)
 800159e:	2168      	movs	r1, #104	; 0x68
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3334      	adds	r3, #52	; 0x34
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	613a      	str	r2, [r7, #16]
 80015ac:	4b87      	ldr	r3, [pc, #540]	; (80017cc <ssi_handler+0x860>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a88      	ldr	r2, [pc, #544]	; (80017d4 <ssi_handler+0x868>)
 80015b2:	2168      	movs	r1, #104	; 0x68
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	3338      	adds	r3, #56	; 0x38
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	60f9      	str	r1, [r7, #12]
 80015c0:	4b82      	ldr	r3, [pc, #520]	; (80017cc <ssi_handler+0x860>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <ssi_handler+0x868>)
 80015c6:	2168      	movs	r1, #104	; 0x68
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	333c      	adds	r3, #60	; 0x3c
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <ssi_handler+0x860>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a7e      	ldr	r2, [pc, #504]	; (80017d4 <ssi_handler+0x868>)
 80015da:	2168      	movs	r1, #104	; 0x68
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	3340      	adds	r3, #64	; 0x40
 80015e4:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 80015e6:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ssi_handler+0x860>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2268      	movs	r2, #104	; 0x68
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	3340      	adds	r3, #64	; 0x40
 80015f2:	4a78      	ldr	r2, [pc, #480]	; (80017d4 <ssi_handler+0x868>)
 80015f4:	4413      	add	r3, r2
 80015f6:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 80015f8:	4b74      	ldr	r3, [pc, #464]	; (80017cc <ssi_handler+0x860>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4875      	ldr	r0, [pc, #468]	; (80017d4 <ssi_handler+0x868>)
 80015fe:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001602:	fb0c f303 	mul.w	r3, ip, r3
 8001606:	4403      	add	r3, r0
 8001608:	3364      	adds	r3, #100	; 0x64
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	930a      	str	r3, [sp, #40]	; 0x28
 800160e:	9209      	str	r2, [sp, #36]	; 0x24
 8001610:	4b72      	ldr	r3, [pc, #456]	; (80017dc <ssi_handler+0x870>)
 8001612:	9308      	str	r3, [sp, #32]
 8001614:	9107      	str	r1, [sp, #28]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	9306      	str	r3, [sp, #24]
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	9105      	str	r1, [sp, #20]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	9204      	str	r2, [sp, #16]
 8001622:	9603      	str	r6, [sp, #12]
 8001624:	9502      	str	r5, [sp, #8]
 8001626:	9401      	str	r4, [sp, #4]
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	9100      	str	r1, [sp, #0]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	496b      	ldr	r1, [pc, #428]	; (80017e0 <ssi_handler+0x874>)
 8001632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001634:	f016 f91a 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001638:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <ssi_handler+0x864>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d177      	bne.n	8001730 <ssi_handler+0x7c4>
					// relay json
					sprintf(pcInsert,
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <ssi_handler+0x860>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <ssi_handler+0x868>)
 8001646:	2168      	movs	r1, #104	; 0x68
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <ssi_handler+0x860>)
 8001654:	6819      	ldr	r1, [r3, #0]
 8001656:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 8001658:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <ssi_handler+0x860>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a5c      	ldr	r2, [pc, #368]	; (80017d8 <ssi_handler+0x86c>)
 8001666:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <ssi_handler+0x860>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	2168      	movs	r1, #104	; 0x68
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	3218      	adds	r2, #24
 8001674:	4957      	ldr	r1, [pc, #348]	; (80017d4 <ssi_handler+0x868>)
 8001676:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001678:	4954      	ldr	r1, [pc, #336]	; (80017cc <ssi_handler+0x860>)
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	4855      	ldr	r0, [pc, #340]	; (80017d4 <ssi_handler+0x868>)
 800167e:	2468      	movs	r4, #104	; 0x68
 8001680:	fb04 f101 	mul.w	r1, r4, r1
 8001684:	4401      	add	r1, r0
 8001686:	3104      	adds	r1, #4
 8001688:	6809      	ldr	r1, [r1, #0]
 800168a:	4850      	ldr	r0, [pc, #320]	; (80017cc <ssi_handler+0x860>)
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	4c51      	ldr	r4, [pc, #324]	; (80017d4 <ssi_handler+0x868>)
 8001690:	2568      	movs	r5, #104	; 0x68
 8001692:	fb05 f000 	mul.w	r0, r5, r0
 8001696:	4420      	add	r0, r4
 8001698:	3008      	adds	r0, #8
 800169a:	6800      	ldr	r0, [r0, #0]
 800169c:	6178      	str	r0, [r7, #20]
 800169e:	4c4b      	ldr	r4, [pc, #300]	; (80017cc <ssi_handler+0x860>)
 80016a0:	6824      	ldr	r4, [r4, #0]
 80016a2:	4d4c      	ldr	r5, [pc, #304]	; (80017d4 <ssi_handler+0x868>)
 80016a4:	2668      	movs	r6, #104	; 0x68
 80016a6:	fb06 f404 	mul.w	r4, r6, r4
 80016aa:	442c      	add	r4, r5
 80016ac:	340c      	adds	r4, #12
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	6138      	str	r0, [r7, #16]
 80016b2:	4d46      	ldr	r5, [pc, #280]	; (80017cc <ssi_handler+0x860>)
 80016b4:	682d      	ldr	r5, [r5, #0]
 80016b6:	4e47      	ldr	r6, [pc, #284]	; (80017d4 <ssi_handler+0x868>)
 80016b8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016bc:	fb0c f505 	mul.w	r5, ip, r5
 80016c0:	4435      	add	r5, r6
 80016c2:	3510      	adds	r5, #16
 80016c4:	682d      	ldr	r5, [r5, #0]
 80016c6:	4e41      	ldr	r6, [pc, #260]	; (80017cc <ssi_handler+0x860>)
 80016c8:	6836      	ldr	r6, [r6, #0]
 80016ca:	4842      	ldr	r0, [pc, #264]	; (80017d4 <ssi_handler+0x868>)
 80016cc:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016d0:	fb0c f606 	mul.w	r6, ip, r6
 80016d4:	4406      	add	r6, r0
 80016d6:	3614      	adds	r6, #20
 80016d8:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 80016da:	483c      	ldr	r0, [pc, #240]	; (80017cc <ssi_handler+0x860>)
 80016dc:	6800      	ldr	r0, [r0, #0]
 80016de:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016e2:	fb0c fc00 	mul.w	ip, ip, r0
 80016e6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80016ea:	483a      	ldr	r0, [pc, #232]	; (80017d4 <ssi_handler+0x868>)
 80016ec:	4484      	add	ip, r0
 80016ee:	f10c 0004 	add.w	r0, ip, #4
 80016f2:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 80016f4:	4835      	ldr	r0, [pc, #212]	; (80017cc <ssi_handler+0x860>)
 80016f6:	6800      	ldr	r0, [r0, #0]
 80016f8:	4c36      	ldr	r4, [pc, #216]	; (80017d4 <ssi_handler+0x868>)
 80016fa:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016fe:	fb0c fc00 	mul.w	ip, ip, r0
 8001702:	44a4      	add	ip, r4
 8001704:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001708:	f8dc 0000 	ldr.w	r0, [ip]
 800170c:	9008      	str	r0, [sp, #32]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	9007      	str	r0, [sp, #28]
 8001712:	9606      	str	r6, [sp, #24]
 8001714:	9505      	str	r5, [sp, #20]
 8001716:	6938      	ldr	r0, [r7, #16]
 8001718:	9004      	str	r0, [sp, #16]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	9003      	str	r0, [sp, #12]
 800171e:	9102      	str	r1, [sp, #8]
 8001720:	9201      	str	r2, [sp, #4]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <ssi_handler+0x878>)
 800172a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800172c:	f016 f89e 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <ssi_handler+0x864>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d118      	bne.n	800176a <ssi_handler+0x7fe>
					// select json
					sprintf(pcInsert,
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <ssi_handler+0x860>)
 800173a:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d}]",
							variable, tp[variable].pins, T[variable].topin);
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <ssi_handler+0x860>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <ssi_handler+0x86c>)
 800174a:	441a      	add	r2, r3
					sprintf(pcInsert,
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <ssi_handler+0x860>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4820      	ldr	r0, [pc, #128]	; (80017d4 <ssi_handler+0x868>)
 8001752:	2468      	movs	r4, #104	; 0x68
 8001754:	fb04 f303 	mul.w	r3, r4, r3
 8001758:	4403      	add	r3, r0
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	460a      	mov	r2, r1
 8001762:	4921      	ldr	r1, [pc, #132]	; (80017e8 <ssi_handler+0x87c>)
 8001764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001766:	f016 f881 	bl	801786c <siprintf>
				}

				if (jsongo == 4) {
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <ssi_handler+0x864>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b04      	cmp	r3, #4
 8001770:	f040 8281 	bne.w	8001c76 <ssi_handler+0xd0a>
					// select json
					sprintf(pcInsert,
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <ssi_handler+0x860>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <ssi_handler+0x868>)
 800177a:	2168      	movs	r1, #104	; 0x68
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <ssi_handler+0x860>)
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <ssi_handler+0x860>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <ssi_handler+0x86c>)
 800179a:	1898      	adds	r0, r3, r2
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <ssi_handler+0x860>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4912      	ldr	r1, [pc, #72]	; (80017ec <ssi_handler+0x880>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3308      	adds	r3, #8
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <ssi_handler+0x860>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <ssi_handler+0x880>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	330c      	adds	r3, #12
 80017c6:	681c      	ldr	r4, [r3, #0]
 80017c8:	e012      	b.n	80017f0 <ssi_handler+0x884>
 80017ca:	bf00      	nop
 80017cc:	200007c4 	.word	0x200007c4
 80017d0:	200007c8 	.word	0x200007c8
 80017d4:	20002a10 	.word	0x20002a10
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20006aa4 	.word	0x20006aa4
 80017e0:	0801b8ac 	.word	0x0801b8ac
 80017e4:	0801b948 	.word	0x0801b948
 80017e8:	0801b9c4 	.word	0x0801b9c4
 80017ec:	20001750 	.word	0x20001750
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <ssi_handler+0x964>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4937      	ldr	r1, [pc, #220]	; (80018d4 <ssi_handler+0x968>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3310      	adds	r3, #16
 8001802:	681d      	ldr	r5, [r3, #0]
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <ssi_handler+0x964>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4932      	ldr	r1, [pc, #200]	; (80018d4 <ssi_handler+0x968>)
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3314      	adds	r3, #20
 8001816:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <ssi_handler+0x964>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	492d      	ldr	r1, [pc, #180]	; (80018d4 <ssi_handler+0x968>)
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3318      	adds	r3, #24
 800182a:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 800182e:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <ssi_handler+0x964>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	3318      	adds	r3, #24
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <ssi_handler+0x968>)
 8001840:	4413      	add	r3, r2
 8001842:	1c9a      	adds	r2, r3, #2
 8001844:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <ssi_handler+0x964>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <ssi_handler+0x968>)
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3324      	adds	r3, #36	; 0x24
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <ssi_handler+0x964>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	491c      	ldr	r1, [pc, #112]	; (80018d4 <ssi_handler+0x968>)
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3328      	adds	r3, #40	; 0x28
 800186e:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <ssi_handler+0x964>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	3328      	adds	r3, #40	; 0x28
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <ssi_handler+0x968>)
 8001880:	4413      	add	r3, r2
 8001882:	1d1a      	adds	r2, r3, #4
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <ssi_handler+0x964>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <ssi_handler+0x968>)
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	4694      	mov	ip, r2
 800189a:	4463      	add	r3, ip
 800189c:	333c      	adds	r3, #60	; 0x3c
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 80018a2:	930a      	str	r3, [sp, #40]	; 0x28
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	9209      	str	r2, [sp, #36]	; 0x24
 80018a8:	9108      	str	r1, [sp, #32]
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	9107      	str	r1, [sp, #28]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	9206      	str	r2, [sp, #24]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	9205      	str	r2, [sp, #20]
 80018b6:	9604      	str	r6, [sp, #16]
 80018b8:	9503      	str	r5, [sp, #12]
 80018ba:	9402      	str	r4, [sp, #8]
 80018bc:	697c      	ldr	r4, [r7, #20]
 80018be:	9401      	str	r4, [sp, #4]
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	4904      	ldr	r1, [pc, #16]	; (80018d8 <ssi_handler+0x96c>)
 80018c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ca:	f015 ffcf 	bl	801786c <siprintf>
 80018ce:	e1d2      	b.n	8001c76 <ssi_handler+0xd0a>
 80018d0:	200007c4 	.word	0x200007c4
 80018d4:	20001750 	.word	0x20001750
 80018d8:	0801b9e8 	.word	0x0801b9e8
				}

			} else {
				if (jsongo == 1) {
 80018dc:	4ba6      	ldr	r3, [pc, #664]	; (8001b78 <ssi_handler+0xc0c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d17e      	bne.n	80019e2 <ssi_handler+0xa76>
					// buttoms json
					sprintf(pcInsert,
 80018e4:	4ba5      	ldr	r3, [pc, #660]	; (8001b7c <ssi_handler+0xc10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4aa5      	ldr	r2, [pc, #660]	; (8001b80 <ssi_handler+0xc14>)
 80018ea:	2168      	movs	r1, #104	; 0x68
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	4ba1      	ldr	r3, [pc, #644]	; (8001b7c <ssi_handler+0xc10>)
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 80018fc:	4b9f      	ldr	r3, [pc, #636]	; (8001b7c <ssi_handler+0xc10>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4a9e      	ldr	r2, [pc, #632]	; (8001b84 <ssi_handler+0xc18>)
 800190a:	1899      	adds	r1, r3, r2
 800190c:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 800190e:	4b9b      	ldr	r3, [pc, #620]	; (8001b7c <ssi_handler+0xc10>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2268      	movs	r2, #104	; 0x68
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	3318      	adds	r3, #24
 800191a:	4a99      	ldr	r2, [pc, #612]	; (8001b80 <ssi_handler+0xc14>)
 800191c:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 800191e:	4b97      	ldr	r3, [pc, #604]	; (8001b7c <ssi_handler+0xc10>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a97      	ldr	r2, [pc, #604]	; (8001b80 <ssi_handler+0xc14>)
 8001924:	2168      	movs	r1, #104	; 0x68
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	332c      	adds	r3, #44	; 0x2c
 800192e:	681d      	ldr	r5, [r3, #0]
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <ssi_handler+0xc10>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a92      	ldr	r2, [pc, #584]	; (8001b80 <ssi_handler+0xc14>)
 8001936:	2168      	movs	r1, #104	; 0x68
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3330      	adds	r3, #48	; 0x30
 8001940:	681e      	ldr	r6, [r3, #0]
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <ssi_handler+0xc10>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a8e      	ldr	r2, [pc, #568]	; (8001b80 <ssi_handler+0xc14>)
 8001948:	2168      	movs	r1, #104	; 0x68
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3334      	adds	r3, #52	; 0x34
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	613a      	str	r2, [r7, #16]
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <ssi_handler+0xc10>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a89      	ldr	r2, [pc, #548]	; (8001b80 <ssi_handler+0xc14>)
 800195c:	2168      	movs	r1, #104	; 0x68
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3338      	adds	r3, #56	; 0x38
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	60f9      	str	r1, [r7, #12]
 800196a:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <ssi_handler+0xc10>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a84      	ldr	r2, [pc, #528]	; (8001b80 <ssi_handler+0xc14>)
 8001970:	2168      	movs	r1, #104	; 0x68
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	333c      	adds	r3, #60	; 0x3c
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <ssi_handler+0xc10>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <ssi_handler+0xc14>)
 8001984:	2168      	movs	r1, #104	; 0x68
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3340      	adds	r3, #64	; 0x40
 800198e:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 8001990:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <ssi_handler+0xc10>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2268      	movs	r2, #104	; 0x68
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	3340      	adds	r3, #64	; 0x40
 800199c:	4a78      	ldr	r2, [pc, #480]	; (8001b80 <ssi_handler+0xc14>)
 800199e:	4413      	add	r3, r2
 80019a0:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 80019a2:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <ssi_handler+0xc10>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4876      	ldr	r0, [pc, #472]	; (8001b80 <ssi_handler+0xc14>)
 80019a8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80019ac:	fb0c f303 	mul.w	r3, ip, r3
 80019b0:	4403      	add	r3, r0
 80019b2:	3364      	adds	r3, #100	; 0x64
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	930a      	str	r3, [sp, #40]	; 0x28
 80019b8:	9209      	str	r2, [sp, #36]	; 0x24
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <ssi_handler+0xc1c>)
 80019bc:	9308      	str	r3, [sp, #32]
 80019be:	9107      	str	r1, [sp, #28]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	9306      	str	r3, [sp, #24]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	9105      	str	r1, [sp, #20]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	9204      	str	r2, [sp, #16]
 80019cc:	9603      	str	r6, [sp, #12]
 80019ce:	9502      	str	r5, [sp, #8]
 80019d0:	9401      	str	r4, [sp, #4]
 80019d2:	6979      	ldr	r1, [r7, #20]
 80019d4:	9100      	str	r1, [sp, #0]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	496c      	ldr	r1, [pc, #432]	; (8001b8c <ssi_handler+0xc20>)
 80019dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019de:	f015 ff45 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <ssi_handler+0xc0c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d177      	bne.n	8001ada <ssi_handler+0xb6e>
					// relay json
					sprintf(pcInsert,
 80019ea:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <ssi_handler+0xc10>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a64      	ldr	r2, [pc, #400]	; (8001b80 <ssi_handler+0xc14>)
 80019f0:	2168      	movs	r1, #104	; 0x68
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <ssi_handler+0xc10>)
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <ssi_handler+0xc10>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <ssi_handler+0xc18>)
 8001a10:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <ssi_handler+0xc10>)
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	2168      	movs	r1, #104	; 0x68
 8001a18:	fb01 f202 	mul.w	r2, r1, r2
 8001a1c:	3218      	adds	r2, #24
 8001a1e:	4958      	ldr	r1, [pc, #352]	; (8001b80 <ssi_handler+0xc14>)
 8001a20:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001a22:	4956      	ldr	r1, [pc, #344]	; (8001b7c <ssi_handler+0xc10>)
 8001a24:	6809      	ldr	r1, [r1, #0]
 8001a26:	4856      	ldr	r0, [pc, #344]	; (8001b80 <ssi_handler+0xc14>)
 8001a28:	2468      	movs	r4, #104	; 0x68
 8001a2a:	fb04 f101 	mul.w	r1, r4, r1
 8001a2e:	4401      	add	r1, r0
 8001a30:	3104      	adds	r1, #4
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	4851      	ldr	r0, [pc, #324]	; (8001b7c <ssi_handler+0xc10>)
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	4c51      	ldr	r4, [pc, #324]	; (8001b80 <ssi_handler+0xc14>)
 8001a3a:	2568      	movs	r5, #104	; 0x68
 8001a3c:	fb05 f000 	mul.w	r0, r5, r0
 8001a40:	4420      	add	r0, r4
 8001a42:	3008      	adds	r0, #8
 8001a44:	6800      	ldr	r0, [r0, #0]
 8001a46:	6178      	str	r0, [r7, #20]
 8001a48:	4c4c      	ldr	r4, [pc, #304]	; (8001b7c <ssi_handler+0xc10>)
 8001a4a:	6824      	ldr	r4, [r4, #0]
 8001a4c:	4d4c      	ldr	r5, [pc, #304]	; (8001b80 <ssi_handler+0xc14>)
 8001a4e:	2668      	movs	r6, #104	; 0x68
 8001a50:	fb06 f404 	mul.w	r4, r6, r4
 8001a54:	442c      	add	r4, r5
 8001a56:	340c      	adds	r4, #12
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	6138      	str	r0, [r7, #16]
 8001a5c:	4d47      	ldr	r5, [pc, #284]	; (8001b7c <ssi_handler+0xc10>)
 8001a5e:	682d      	ldr	r5, [r5, #0]
 8001a60:	4e47      	ldr	r6, [pc, #284]	; (8001b80 <ssi_handler+0xc14>)
 8001a62:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a66:	fb0c f505 	mul.w	r5, ip, r5
 8001a6a:	4435      	add	r5, r6
 8001a6c:	3510      	adds	r5, #16
 8001a6e:	682d      	ldr	r5, [r5, #0]
 8001a70:	4e42      	ldr	r6, [pc, #264]	; (8001b7c <ssi_handler+0xc10>)
 8001a72:	6836      	ldr	r6, [r6, #0]
 8001a74:	4842      	ldr	r0, [pc, #264]	; (8001b80 <ssi_handler+0xc14>)
 8001a76:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a7a:	fb0c f606 	mul.w	r6, ip, r6
 8001a7e:	4406      	add	r6, r0
 8001a80:	3614      	adds	r6, #20
 8001a82:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 8001a84:	483d      	ldr	r0, [pc, #244]	; (8001b7c <ssi_handler+0xc10>)
 8001a86:	6800      	ldr	r0, [r0, #0]
 8001a88:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a8c:	fb0c fc00 	mul.w	ip, ip, r0
 8001a90:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001a94:	483a      	ldr	r0, [pc, #232]	; (8001b80 <ssi_handler+0xc14>)
 8001a96:	4484      	add	ip, r0
 8001a98:	f10c 0004 	add.w	r0, ip, #4
 8001a9c:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 8001a9e:	4837      	ldr	r0, [pc, #220]	; (8001b7c <ssi_handler+0xc10>)
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	4c37      	ldr	r4, [pc, #220]	; (8001b80 <ssi_handler+0xc14>)
 8001aa4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001aa8:	fb0c fc00 	mul.w	ip, ip, r0
 8001aac:	44a4      	add	ip, r4
 8001aae:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001ab2:	f8dc 0000 	ldr.w	r0, [ip]
 8001ab6:	9008      	str	r0, [sp, #32]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	9007      	str	r0, [sp, #28]
 8001abc:	9606      	str	r6, [sp, #24]
 8001abe:	9505      	str	r5, [sp, #20]
 8001ac0:	6938      	ldr	r0, [r7, #16]
 8001ac2:	9004      	str	r0, [sp, #16]
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	9003      	str	r0, [sp, #12]
 8001ac8:	9102      	str	r1, [sp, #8]
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	492f      	ldr	r1, [pc, #188]	; (8001b90 <ssi_handler+0xc24>)
 8001ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ad6:	f015 fec9 	bl	801786c <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <ssi_handler+0xc0c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d118      	bne.n	8001b14 <ssi_handler+0xba8>
					// select json
					sprintf(pcInsert,
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <ssi_handler+0xc10>)
 8001ae4:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <ssi_handler+0xc10>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <ssi_handler+0xc18>)
 8001af4:	441a      	add	r2, r3
					sprintf(pcInsert,
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <ssi_handler+0xc10>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4821      	ldr	r0, [pc, #132]	; (8001b80 <ssi_handler+0xc14>)
 8001afc:	2468      	movs	r4, #104	; 0x68
 8001afe:	fb04 f303 	mul.w	r3, r4, r3
 8001b02:	4403      	add	r3, r0
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	4921      	ldr	r1, [pc, #132]	; (8001b94 <ssi_handler+0xc28>)
 8001b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b10:	f015 feac 	bl	801786c <siprintf>
				}
				if (jsongo == 4) {
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <ssi_handler+0xc0c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	f040 80ac 	bne.w	8001c76 <ssi_handler+0xd0a>
					// select json
					sprintf(pcInsert,
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <ssi_handler+0xc10>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <ssi_handler+0xc14>)
 8001b24:	2168      	movs	r1, #104	; 0x68
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <ssi_handler+0xc10>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <ssi_handler+0xc10>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <ssi_handler+0xc18>)
 8001b44:	1898      	adds	r0, r3, r2
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <ssi_handler+0xc10>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4913      	ldr	r1, [pc, #76]	; (8001b98 <ssi_handler+0xc2c>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3308      	adds	r3, #8
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <ssi_handler+0xc10>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <ssi_handler+0xc2c>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	330c      	adds	r3, #12
 8001b70:	681c      	ldr	r4, [r3, #0]
 8001b72:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <ssi_handler+0xc10>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	e011      	b.n	8001b9c <ssi_handler+0xc30>
 8001b78:	200007c8 	.word	0x200007c8
 8001b7c:	200007c4 	.word	0x200007c4
 8001b80:	20002a10 	.word	0x20002a10
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20006aa4 	.word	0x20006aa4
 8001b8c:	0801ba8c 	.word	0x0801ba8c
 8001b90:	0801bb28 	.word	0x0801bb28
 8001b94:	0801bba4 	.word	0x0801bba4
 8001b98:	20001750 	.word	0x20001750
 8001b9c:	4941      	ldr	r1, [pc, #260]	; (8001ca4 <ssi_handler+0xd38>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3310      	adds	r3, #16
 8001baa:	681d      	ldr	r5, [r3, #0]
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <ssi_handler+0xd3c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	493c      	ldr	r1, [pc, #240]	; (8001ca4 <ssi_handler+0xd38>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <ssi_handler+0xd3c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4937      	ldr	r1, [pc, #220]	; (8001ca4 <ssi_handler+0xd38>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001bd6:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <ssi_handler+0xd3c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3318      	adds	r3, #24
 8001be6:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <ssi_handler+0xd38>)
 8001be8:	4413      	add	r3, r2
 8001bea:	1c9a      	adds	r2, r3, #2
 8001bec:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <ssi_handler+0xd3c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <ssi_handler+0xd38>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3324      	adds	r3, #36	; 0x24
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4926      	ldr	r1, [pc, #152]	; (8001ca4 <ssi_handler+0xd38>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3328      	adds	r3, #40	; 0x28
 8001c16:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	3328      	adds	r3, #40	; 0x28
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <ssi_handler+0xd38>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	1d1a      	adds	r2, r3, #4
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <ssi_handler+0xd38>)
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	4694      	mov	ip, r2
 8001c42:	4463      	add	r3, ip
 8001c44:	333c      	adds	r3, #60	; 0x3c
 8001c46:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8001c50:	9108      	str	r1, [sp, #32]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	9107      	str	r1, [sp, #28]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	9206      	str	r2, [sp, #24]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	9205      	str	r2, [sp, #20]
 8001c5e:	9604      	str	r6, [sp, #16]
 8001c60:	9503      	str	r5, [sp, #12]
 8001c62:	9402      	str	r4, [sp, #8]
 8001c64:	697c      	ldr	r4, [r7, #20]
 8001c66:	9401      	str	r4, [sp, #4]
 8001c68:	9000      	str	r0, [sp, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	490f      	ldr	r1, [pc, #60]	; (8001cac <ssi_handler+0xd40>)
 8001c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c72:	f015 fdfb 	bl	801786c <siprintf>
				}
			}
			/***********************************************************************/
			memset(listaction, '\0', sizeof(listaction));
 8001c76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <ssi_handler+0xd44>)
 8001c7e:	f015 f881 	bl	8016d84 <memset>
			*next_tag_part = variable;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8a:	801a      	strh	r2, [r3, #0]
			//printf("*next_tag_part = %d\n",*next_tag_part);
			variable++;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c94:	6013      	str	r3, [r2, #0]

			//strcat(pcInsert, "]");
			return strlen(pcInsert);
 8001c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c98:	f7fe faa4 	bl	80001e4 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f000 bfc6 	b.w	8002c30 <ssi_handler+0x1cc4>
 8001ca4:	20001750 	.word	0x20001750
 8001ca8:	200007c4 	.word	0x200007c4
 8001cac:	0801bbc8 	.word	0x0801bbc8
 8001cb0:	20006aa4 	.word	0x20006aa4
#else
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
#endif
		break;
	case 1:
		if (idtab == 1) {
 8001cb4:	4b84      	ldr	r3, [pc, #528]	; (8001ec8 <ssi_handler+0xf5c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d17c      	bne.n	8001db6 <ssi_handler+0xe4a>
			// buttoms
			sprintf(pcInsert,
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <ssi_handler+0xf60>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a83      	ldr	r2, [pc, #524]	; (8001ed0 <ssi_handler+0xf64>)
 8001cc2:	2168      	movs	r1, #104	; 0x68
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <ssi_handler+0xf60>)
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	61b9      	str	r1, [r7, #24]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter,
 8001cd4:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <ssi_handler+0xf60>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4a7c      	ldr	r2, [pc, #496]	; (8001ed4 <ssi_handler+0xf68>)
 8001ce2:	1899      	adds	r1, r3, r2
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <ssi_handler+0xf60>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2268      	movs	r2, #104	; 0x68
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	3318      	adds	r3, #24
 8001cf2:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <ssi_handler+0xf64>)
 8001cf4:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 8001cf6:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <ssi_handler+0xf60>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a75      	ldr	r2, [pc, #468]	; (8001ed0 <ssi_handler+0xf64>)
 8001cfc:	2168      	movs	r1, #104	; 0x68
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	332c      	adds	r3, #44	; 0x2c
 8001d06:	681d      	ldr	r5, [r3, #0]
 8001d08:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <ssi_handler+0xf60>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a70      	ldr	r2, [pc, #448]	; (8001ed0 <ssi_handler+0xf64>)
 8001d0e:	2168      	movs	r1, #104	; 0x68
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3330      	adds	r3, #48	; 0x30
 8001d18:	681e      	ldr	r6, [r3, #0]
 8001d1a:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <ssi_handler+0xf60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6c      	ldr	r2, [pc, #432]	; (8001ed0 <ssi_handler+0xf64>)
 8001d20:	2168      	movs	r1, #104	; 0x68
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3334      	adds	r3, #52	; 0x34
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	613a      	str	r2, [r7, #16]
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <ssi_handler+0xf60>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a67      	ldr	r2, [pc, #412]	; (8001ed0 <ssi_handler+0xf64>)
 8001d34:	2168      	movs	r1, #104	; 0x68
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3338      	adds	r3, #56	; 0x38
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	60f9      	str	r1, [r7, #12]
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <ssi_handler+0xf60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a62      	ldr	r2, [pc, #392]	; (8001ed0 <ssi_handler+0xf64>)
 8001d48:	2168      	movs	r1, #104	; 0x68
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	333c      	adds	r3, #60	; 0x3c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <ssi_handler+0xf60>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <ssi_handler+0xf64>)
 8001d5c:	2168      	movs	r1, #104	; 0x68
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3340      	adds	r3, #64	; 0x40
 8001d66:	6819      	ldr	r1, [r3, #0]
					T[id].hinter, T[id].repeat, T[id].rinter, T[id].dcinter,
					T[id].pclick, T[id].info, T[id].onoff);
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <ssi_handler+0xf60>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2268      	movs	r2, #104	; 0x68
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	3340      	adds	r3, #64	; 0x40
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <ssi_handler+0xf64>)
 8001d76:	4413      	add	r3, r2
 8001d78:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <ssi_handler+0xf60>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4854      	ldr	r0, [pc, #336]	; (8001ed0 <ssi_handler+0xf64>)
 8001d80:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001d84:	fb0c f303 	mul.w	r3, ip, r3
 8001d88:	4403      	add	r3, r0
 8001d8a:	3364      	adds	r3, #100	; 0x64
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d90:	9208      	str	r2, [sp, #32]
 8001d92:	9107      	str	r1, [sp, #28]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	9306      	str	r3, [sp, #24]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	9105      	str	r1, [sp, #20]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	9204      	str	r2, [sp, #16]
 8001da0:	9603      	str	r6, [sp, #12]
 8001da2:	9502      	str	r5, [sp, #8]
 8001da4:	9401      	str	r4, [sp, #4]
 8001da6:	6979      	ldr	r1, [r7, #20]
 8001da8:	9100      	str	r1, [sp, #0]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	494a      	ldr	r1, [pc, #296]	; (8001ed8 <ssi_handler+0xf6c>)
 8001db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db2:	f015 fd5b 	bl	801786c <siprintf>
		}
		if (idtab == 2) {
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <ssi_handler+0xf5c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d177      	bne.n	8001eae <ssi_handler+0xf42>
			// relay
			sprintf(pcInsert,
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <ssi_handler+0xf60>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <ssi_handler+0xf64>)
 8001dc4:	2168      	movs	r1, #104	; 0x68
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <ssi_handler+0xf60>)
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	61b9      	str	r1, [r7, #24]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].pwm,
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <ssi_handler+0xf60>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <ssi_handler+0xf68>)
 8001de4:	4413      	add	r3, r2
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <ssi_handler+0xf60>)
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	2168      	movs	r1, #104	; 0x68
 8001dec:	fb01 f202 	mul.w	r2, r1, r2
 8001df0:	3218      	adds	r2, #24
 8001df2:	4937      	ldr	r1, [pc, #220]	; (8001ed0 <ssi_handler+0xf64>)
 8001df4:	440a      	add	r2, r1
			sprintf(pcInsert,
 8001df6:	4935      	ldr	r1, [pc, #212]	; (8001ecc <ssi_handler+0xf60>)
 8001df8:	6809      	ldr	r1, [r1, #0]
 8001dfa:	4835      	ldr	r0, [pc, #212]	; (8001ed0 <ssi_handler+0xf64>)
 8001dfc:	2468      	movs	r4, #104	; 0x68
 8001dfe:	fb04 f101 	mul.w	r1, r4, r1
 8001e02:	4401      	add	r1, r0
 8001e04:	3104      	adds	r1, #4
 8001e06:	6809      	ldr	r1, [r1, #0]
 8001e08:	4830      	ldr	r0, [pc, #192]	; (8001ecc <ssi_handler+0xf60>)
 8001e0a:	6800      	ldr	r0, [r0, #0]
 8001e0c:	4c30      	ldr	r4, [pc, #192]	; (8001ed0 <ssi_handler+0xf64>)
 8001e0e:	2568      	movs	r5, #104	; 0x68
 8001e10:	fb05 f000 	mul.w	r0, r5, r0
 8001e14:	4420      	add	r0, r4
 8001e16:	3008      	adds	r0, #8
 8001e18:	6800      	ldr	r0, [r0, #0]
 8001e1a:	6178      	str	r0, [r7, #20]
 8001e1c:	4c2b      	ldr	r4, [pc, #172]	; (8001ecc <ssi_handler+0xf60>)
 8001e1e:	6824      	ldr	r4, [r4, #0]
 8001e20:	4d2b      	ldr	r5, [pc, #172]	; (8001ed0 <ssi_handler+0xf64>)
 8001e22:	2668      	movs	r6, #104	; 0x68
 8001e24:	fb06 f404 	mul.w	r4, r6, r4
 8001e28:	442c      	add	r4, r5
 8001e2a:	340c      	adds	r4, #12
 8001e2c:	6820      	ldr	r0, [r4, #0]
 8001e2e:	6138      	str	r0, [r7, #16]
 8001e30:	4d26      	ldr	r5, [pc, #152]	; (8001ecc <ssi_handler+0xf60>)
 8001e32:	682d      	ldr	r5, [r5, #0]
 8001e34:	4e26      	ldr	r6, [pc, #152]	; (8001ed0 <ssi_handler+0xf64>)
 8001e36:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e3a:	fb0c f505 	mul.w	r5, ip, r5
 8001e3e:	4435      	add	r5, r6
 8001e40:	3510      	adds	r5, #16
 8001e42:	682d      	ldr	r5, [r5, #0]
 8001e44:	4e21      	ldr	r6, [pc, #132]	; (8001ecc <ssi_handler+0xf60>)
 8001e46:	6836      	ldr	r6, [r6, #0]
 8001e48:	4821      	ldr	r0, [pc, #132]	; (8001ed0 <ssi_handler+0xf64>)
 8001e4a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e4e:	fb0c f606 	mul.w	r6, ip, r6
 8001e52:	4406      	add	r6, r0
 8001e54:	3614      	adds	r6, #20
 8001e56:	6836      	ldr	r6, [r6, #0]
					T[id].on, T[id].istate, T[id].dvalue, T[id].ponr,
					T[id].info, T[id].onoff);
 8001e58:	481c      	ldr	r0, [pc, #112]	; (8001ecc <ssi_handler+0xf60>)
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e60:	fb0c fc00 	mul.w	ip, ip, r0
 8001e64:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001e68:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <ssi_handler+0xf64>)
 8001e6a:	4484      	add	ip, r0
 8001e6c:	f10c 0004 	add.w	r0, ip, #4
 8001e70:	60f8      	str	r0, [r7, #12]
			sprintf(pcInsert,
 8001e72:	4816      	ldr	r0, [pc, #88]	; (8001ecc <ssi_handler+0xf60>)
 8001e74:	6800      	ldr	r0, [r0, #0]
 8001e76:	4c16      	ldr	r4, [pc, #88]	; (8001ed0 <ssi_handler+0xf64>)
 8001e78:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e7c:	fb0c fc00 	mul.w	ip, ip, r0
 8001e80:	44a4      	add	ip, r4
 8001e82:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001e86:	f8dc 0000 	ldr.w	r0, [ip]
 8001e8a:	9008      	str	r0, [sp, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	9007      	str	r0, [sp, #28]
 8001e90:	9606      	str	r6, [sp, #24]
 8001e92:	9505      	str	r5, [sp, #20]
 8001e94:	6938      	ldr	r0, [r7, #16]
 8001e96:	9004      	str	r0, [sp, #16]
 8001e98:	6978      	ldr	r0, [r7, #20]
 8001e9a:	9003      	str	r0, [sp, #12]
 8001e9c:	9102      	str	r1, [sp, #8]
 8001e9e:	9201      	str	r2, [sp, #4]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	490d      	ldr	r1, [pc, #52]	; (8001edc <ssi_handler+0xf70>)
 8001ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eaa:	f015 fcdf 	bl	801786c <siprintf>
		}
		if (idtab == 3) {// Для странички connections.shtml
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <ssi_handler+0xf5c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d163      	bne.n	8001f7e <ssi_handler+0x1012>
			// connection
			sprintf(jsonrp, "{");
 8001eb6:	490a      	ldr	r1, [pc, #40]	; (8001ee0 <ssi_handler+0xf74>)
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <ssi_handler+0xf78>)
 8001eba:	f015 fcd7 	bl	801786c <siprintf>
			strcat(bufervar, jsonrp);
 8001ebe:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <ssi_handler+0xf78>)
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <ssi_handler+0xf7c>)
 8001ec2:	f015 fcf3 	bl	80178ac <strcat>
			while (variable <= numpin - 1) {
 8001ec6:	e032      	b.n	8001f2e <ssi_handler+0xfc2>
 8001ec8:	200007d0 	.word	0x200007d0
 8001ecc:	200007cc 	.word	0x200007cc
 8001ed0:	20002a10 	.word	0x20002a10
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	0801bc6c 	.word	0x0801bc6c
 8001edc:	0801bcfc 	.word	0x0801bcfc
 8001ee0:	0801b6b8 	.word	0x0801b6b8
 8001ee4:	20006c38 	.word	0x20006c38
 8001ee8:	200041a0 	.word	0x200041a0
				if (T[variable].topin == 2) {
 8001eec:	4bb1      	ldr	r3, [pc, #708]	; (80021b4 <ssi_handler+0x1248>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4ab1      	ldr	r2, [pc, #708]	; (80021b8 <ssi_handler+0x124c>)
 8001ef2:	2168      	movs	r1, #104	; 0x68
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d111      	bne.n	8001f24 <ssi_handler+0xfb8>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 8001f00:	4bac      	ldr	r3, [pc, #688]	; (80021b4 <ssi_handler+0x1248>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4aab      	ldr	r2, [pc, #684]	; (80021bc <ssi_handler+0x1250>)
 8001f0e:	441a      	add	r2, r3
 8001f10:	4ba8      	ldr	r3, [pc, #672]	; (80021b4 <ssi_handler+0x1248>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	49aa      	ldr	r1, [pc, #680]	; (80021c0 <ssi_handler+0x1254>)
 8001f16:	48ab      	ldr	r0, [pc, #684]	; (80021c4 <ssi_handler+0x1258>)
 8001f18:	f015 fca8 	bl	801786c <siprintf>
					strcat(bufervar, jsonrp);
 8001f1c:	49a9      	ldr	r1, [pc, #676]	; (80021c4 <ssi_handler+0x1258>)
 8001f1e:	48aa      	ldr	r0, [pc, #680]	; (80021c8 <ssi_handler+0x125c>)
 8001f20:	f015 fcc4 	bl	80178ac <strcat>
					//printf("%s \r\n",  jsonrp);
				}
				variable++;
 8001f24:	4ba3      	ldr	r3, [pc, #652]	; (80021b4 <ssi_handler+0x1248>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4aa2      	ldr	r2, [pc, #648]	; (80021b4 <ssi_handler+0x1248>)
 8001f2c:	6013      	str	r3, [r2, #0]
			while (variable <= numpin - 1) {
 8001f2e:	4ba1      	ldr	r3, [pc, #644]	; (80021b4 <ssi_handler+0x1248>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b39      	cmp	r3, #57	; 0x39
 8001f34:	ddda      	ble.n	8001eec <ssi_handler+0xf80>
			}
			bufervar[strlen(bufervar) - 1] = '\0';
 8001f36:	48a4      	ldr	r0, [pc, #656]	; (80021c8 <ssi_handler+0x125c>)
 8001f38:	f7fe f954 	bl	80001e4 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	4aa1      	ldr	r2, [pc, #644]	; (80021c8 <ssi_handler+0x125c>)
 8001f42:	2100      	movs	r1, #0
 8001f44:	54d1      	strb	r1, [r2, r3]
			sprintf(jsonrp, "}");
 8001f46:	49a1      	ldr	r1, [pc, #644]	; (80021cc <ssi_handler+0x1260>)
 8001f48:	489e      	ldr	r0, [pc, #632]	; (80021c4 <ssi_handler+0x1258>)
 8001f4a:	f015 fc8f 	bl	801786c <siprintf>
			strcat(bufervar, jsonrp);
 8001f4e:	499d      	ldr	r1, [pc, #628]	; (80021c4 <ssi_handler+0x1258>)
 8001f50:	489d      	ldr	r0, [pc, #628]	; (80021c8 <ssi_handler+0x125c>)
 8001f52:	f015 fcab 	bl	80178ac <strcat>
			variable = 0;
 8001f56:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <ssi_handler+0x1248>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001f5c:	4b9c      	ldr	r3, [pc, #624]	; (80021d0 <ssi_handler+0x1264>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
					tp[id].pins, bufervar);
 8001f60:	4b9b      	ldr	r3, [pc, #620]	; (80021d0 <ssi_handler+0x1264>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4a93      	ldr	r2, [pc, #588]	; (80021bc <ssi_handler+0x1250>)
 8001f6e:	4413      	add	r3, r2
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001f70:	4a95      	ldr	r2, [pc, #596]	; (80021c8 <ssi_handler+0x125c>)
 8001f72:	9200      	str	r2, [sp, #0]
 8001f74:	460a      	mov	r2, r1
 8001f76:	4997      	ldr	r1, [pc, #604]	; (80021d4 <ssi_handler+0x1268>)
 8001f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f7a:	f015 fc77 	bl	801786c <siprintf>
		}

		memset(jsonrp, '\0', sizeof(jsonrp));
 8001f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f82:	2100      	movs	r1, #0
 8001f84:	488f      	ldr	r0, [pc, #572]	; (80021c4 <ssi_handler+0x1258>)
 8001f86:	f014 fefd 	bl	8016d84 <memset>
		memset(bufervar, '\0', sizeof(bufervar));
 8001f8a:	f642 1204 	movw	r2, #10500	; 0x2904
 8001f8e:	2100      	movs	r1, #0
 8001f90:	488d      	ldr	r0, [pc, #564]	; (80021c8 <ssi_handler+0x125c>)
 8001f92:	f014 fef7 	bl	8016d84 <memset>
		return strlen(pcInsert);
 8001f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f98:	f7fe f924 	bl	80001e4 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f000 be46 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 2:
		sprintf(pcInsert,
 8001fa4:	498c      	ldr	r1, [pc, #560]	; (80021d8 <ssi_handler+0x126c>)
 8001fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fa8:	f015 fc60 	bl	801786c <siprintf>
				"<a href=\"index.shtml\">Home</a> | <a href=\"select.shtml\">Select pin</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"timers.shtml\">Timers</a> | <a href=\"settings.shtml\">Settings</a>");
		return strlen(pcInsert);
 8001fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fae:	f7fe f919 	bl	80001e4 <strlen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f000 be3b 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 4: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lon_de);
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <ssi_handler+0x1270>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	4987      	ldr	r1, [pc, #540]	; (80021e0 <ssi_handler+0x1274>)
 8001fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc4:	f015 fc52 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8001fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fca:	f7fe f90b 	bl	80001e4 <strlen>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f000 be2d 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 5: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lat_de);
 8001fd6:	4b81      	ldr	r3, [pc, #516]	; (80021dc <ssi_handler+0x1270>)
 8001fd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fdc:	4980      	ldr	r1, [pc, #512]	; (80021e0 <ssi_handler+0x1274>)
 8001fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fe0:	f015 fc44 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8001fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fe6:	f7fe f8fd 	bl	80001e4 <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f000 be1f 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 6: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqtt_prt);
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <ssi_handler+0x1270>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	497a      	ldr	r1, [pc, #488]	; (80021e4 <ssi_handler+0x1278>)
 8001ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ffc:	f015 fc36 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002002:	f7fe f8ef 	bl	80001e4 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29b      	uxth	r3, r3
 800200a:	f000 be11 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 7: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_clt);
 800200e:	4a76      	ldr	r2, [pc, #472]	; (80021e8 <ssi_handler+0x127c>)
 8002010:	4976      	ldr	r1, [pc, #472]	; (80021ec <ssi_handler+0x1280>)
 8002012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002014:	f015 fc2a 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800201a:	f7fe f8e3 	bl	80001e4 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29b      	uxth	r3, r3
 8002022:	f000 be05 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 8: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_usr);
 8002026:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <ssi_handler+0x1284>)
 8002028:	4970      	ldr	r1, [pc, #448]	; (80021ec <ssi_handler+0x1280>)
 800202a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800202c:	f015 fc1e 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002032:	f7fe f8d7 	bl	80001e4 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	b29b      	uxth	r3, r3
 800203a:	f000 bdf9 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 9: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_pswd);
 800203e:	4a6d      	ldr	r2, [pc, #436]	; (80021f4 <ssi_handler+0x1288>)
 8002040:	496a      	ldr	r1, [pc, #424]	; (80021ec <ssi_handler+0x1280>)
 8002042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002044:	f015 fc12 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800204a:	f7fe f8cb 	bl	80001e4 <strlen>
 800204e:	4603      	mov	r3, r0
 8002050:	b29b      	uxth	r3, r3
 8002052:	f000 bded 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 10: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_tpc);
 8002056:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <ssi_handler+0x128c>)
 8002058:	4964      	ldr	r1, [pc, #400]	; (80021ec <ssi_handler+0x1280>)
 800205a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800205c:	f015 fc06 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002062:	f7fe f8bf 	bl	80001e4 <strlen>
 8002066:	4603      	mov	r3, r0
 8002068:	b29b      	uxth	r3, r3
 800206a:	f000 bde1 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 11: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_ftpc);
 800206e:	4a63      	ldr	r2, [pc, #396]	; (80021fc <ssi_handler+0x1290>)
 8002070:	495e      	ldr	r1, [pc, #376]	; (80021ec <ssi_handler+0x1280>)
 8002072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002074:	f015 fbfa 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800207a:	f7fe f8b3 	bl	80001e4 <strlen>
 800207e:	4603      	mov	r3, r0
 8002080:	b29b      	uxth	r3, r3
 8002082:	f000 bdd5 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 12: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr0);
 8002086:	4b55      	ldr	r3, [pc, #340]	; (80021dc <ssi_handler+0x1270>)
 8002088:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800208c:	461a      	mov	r2, r3
 800208e:	4955      	ldr	r1, [pc, #340]	; (80021e4 <ssi_handler+0x1278>)
 8002090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002092:	f015 fbeb 	bl	801786c <siprintf>
		//printf("ip_addr0 = \%d\n",Settings.ip_addr0);
		return strlen(pcInsert);
 8002096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002098:	f7fe f8a4 	bl	80001e4 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f000 bdc6 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 13: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr1);
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <ssi_handler+0x1270>)
 80020a6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80020aa:	461a      	mov	r2, r3
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <ssi_handler+0x1278>)
 80020ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b0:	f015 fbdc 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80020b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b6:	f7fe f895 	bl	80001e4 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f000 bdb7 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 14: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr2);
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <ssi_handler+0x1270>)
 80020c4:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80020c8:	461a      	mov	r2, r3
 80020ca:	4946      	ldr	r1, [pc, #280]	; (80021e4 <ssi_handler+0x1278>)
 80020cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ce:	f015 fbcd 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80020d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020d4:	f7fe f886 	bl	80001e4 <strlen>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f000 bda8 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 15: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr3);
 80020e0:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <ssi_handler+0x1270>)
 80020e2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80020e6:	461a      	mov	r2, r3
 80020e8:	493e      	ldr	r1, [pc, #248]	; (80021e4 <ssi_handler+0x1278>)
 80020ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ec:	f015 fbbe 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80020f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020f2:	f7fe f877 	bl	80001e4 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f000 bd99 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 16: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask0);
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <ssi_handler+0x1270>)
 8002100:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8002104:	461a      	mov	r2, r3
 8002106:	4937      	ldr	r1, [pc, #220]	; (80021e4 <ssi_handler+0x1278>)
 8002108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800210a:	f015 fbaf 	bl	801786c <siprintf>
		//printf("sb_mask0 = \%d\n",Settings.sb_mask0);
		return strlen(pcInsert);
 800210e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002110:	f7fe f868 	bl	80001e4 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	f000 bd8a 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 17: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask1);
 800211c:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <ssi_handler+0x1270>)
 800211e:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8002122:	461a      	mov	r2, r3
 8002124:	492f      	ldr	r1, [pc, #188]	; (80021e4 <ssi_handler+0x1278>)
 8002126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002128:	f015 fba0 	bl	801786c <siprintf>
		//printf("sb_mask1 = \%d\n",Settings.sb_mask1);
		return strlen(pcInsert);
 800212c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800212e:	f7fe f859 	bl	80001e4 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29b      	uxth	r3, r3
 8002136:	f000 bd7b 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 18: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask2);
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <ssi_handler+0x1270>)
 800213c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8002140:	461a      	mov	r2, r3
 8002142:	4928      	ldr	r1, [pc, #160]	; (80021e4 <ssi_handler+0x1278>)
 8002144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002146:	f015 fb91 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800214a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800214c:	f7fe f84a 	bl	80001e4 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29b      	uxth	r3, r3
 8002154:	f000 bd6c 	b.w	8002c30 <ssi_handler+0x1cc4>
		//printf("sb_mask2 = \%d\n",Settings.sb_mask2);
		break;
	case 19: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask3);
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <ssi_handler+0x1270>)
 800215a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 800215e:	461a      	mov	r2, r3
 8002160:	4920      	ldr	r1, [pc, #128]	; (80021e4 <ssi_handler+0x1278>)
 8002162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002164:	f015 fb82 	bl	801786c <siprintf>
		//printf("sb_mask3 = \%d\n",Settings.sb_mask3);
		return strlen(pcInsert);
 8002168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800216a:	f7fe f83b 	bl	80001e4 <strlen>
 800216e:	4603      	mov	r3, r0
 8002170:	b29b      	uxth	r3, r3
 8002172:	f000 bd5d 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 20: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway0);
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <ssi_handler+0x1270>)
 8002178:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 800217c:	461a      	mov	r2, r3
 800217e:	4919      	ldr	r1, [pc, #100]	; (80021e4 <ssi_handler+0x1278>)
 8002180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002182:	f015 fb73 	bl	801786c <siprintf>
		//printf("gateway0 = \%d\n",Settings.gateway0);
		return strlen(pcInsert);
 8002186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002188:	f7fe f82c 	bl	80001e4 <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	b29b      	uxth	r3, r3
 8002190:	f000 bd4e 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 21: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway1);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <ssi_handler+0x1270>)
 8002196:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 800219a:	461a      	mov	r2, r3
 800219c:	4911      	ldr	r1, [pc, #68]	; (80021e4 <ssi_handler+0x1278>)
 800219e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a0:	f015 fb64 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80021a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a6:	f7fe f81d 	bl	80001e4 <strlen>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f000 bd3f 	b.w	8002c30 <ssi_handler+0x1cc4>
 80021b2:	bf00      	nop
 80021b4:	200007c4 	.word	0x200007c4
 80021b8:	20002a10 	.word	0x20002a10
 80021bc:	20000008 	.word	0x20000008
 80021c0:	0801b6bc 	.word	0x0801b6bc
 80021c4:	20006c38 	.word	0x20006c38
 80021c8:	200041a0 	.word	0x200041a0
 80021cc:	0801b6c8 	.word	0x0801b6c8
 80021d0:	200007cc 	.word	0x200007cc
 80021d4:	0801bd74 	.word	0x0801bd74
 80021d8:	0801bd98 	.word	0x0801bd98
 80021dc:	20000490 	.word	0x20000490
 80021e0:	0801be78 	.word	0x0801be78
 80021e4:	0801be80 	.word	0x0801be80
 80021e8:	200004a4 	.word	0x200004a4
 80021ec:	0801be84 	.word	0x0801be84
 80021f0:	200004ae 	.word	0x200004ae
 80021f4:	200004b8 	.word	0x200004b8
 80021f8:	200004c7 	.word	0x200004c7
 80021fc:	200004d6 	.word	0x200004d6
		break;
	case 22: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway2);
 8002200:	4ba3      	ldr	r3, [pc, #652]	; (8002490 <ssi_handler+0x1524>)
 8002202:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8002206:	461a      	mov	r2, r3
 8002208:	49a2      	ldr	r1, [pc, #648]	; (8002494 <ssi_handler+0x1528>)
 800220a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800220c:	f015 fb2e 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002212:	f7fd ffe7 	bl	80001e4 <strlen>
 8002216:	4603      	mov	r3, r0
 8002218:	b29b      	uxth	r3, r3
 800221a:	f000 bd09 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 23: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway3);
 800221e:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <ssi_handler+0x1524>)
 8002220:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8002224:	461a      	mov	r2, r3
 8002226:	499b      	ldr	r1, [pc, #620]	; (8002494 <ssi_handler+0x1528>)
 8002228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222a:	f015 fb1f 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800222e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002230:	f7fd ffd8 	bl	80001e4 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29b      	uxth	r3, r3
 8002238:	f000 bcfa 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 24: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst0);
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <ssi_handler+0x1524>)
 800223e:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 8002242:	461a      	mov	r2, r3
 8002244:	4993      	ldr	r1, [pc, #588]	; (8002494 <ssi_handler+0x1528>)
 8002246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002248:	f015 fb10 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800224c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800224e:	f7fd ffc9 	bl	80001e4 <strlen>
 8002252:	4603      	mov	r3, r0
 8002254:	b29b      	uxth	r3, r3
 8002256:	f000 bceb 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 25: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst1);
 800225a:	4b8d      	ldr	r3, [pc, #564]	; (8002490 <ssi_handler+0x1524>)
 800225c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8002260:	461a      	mov	r2, r3
 8002262:	498c      	ldr	r1, [pc, #560]	; (8002494 <ssi_handler+0x1528>)
 8002264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002266:	f015 fb01 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800226a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800226c:	f7fd ffba 	bl	80001e4 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	b29b      	uxth	r3, r3
 8002274:	f000 bcdc 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 26: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst2);
 8002278:	4b85      	ldr	r3, [pc, #532]	; (8002490 <ssi_handler+0x1524>)
 800227a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800227e:	461a      	mov	r2, r3
 8002280:	4984      	ldr	r1, [pc, #528]	; (8002494 <ssi_handler+0x1528>)
 8002282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002284:	f015 faf2 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800228a:	f7fd ffab 	bl	80001e4 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	b29b      	uxth	r3, r3
 8002292:	f000 bccd 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 27: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst3);
 8002296:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <ssi_handler+0x1524>)
 8002298:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800229c:	461a      	mov	r2, r3
 800229e:	497d      	ldr	r1, [pc, #500]	; (8002494 <ssi_handler+0x1528>)
 80022a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a2:	f015 fae3 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80022a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a8:	f7fd ff9c 	bl	80001e4 <strlen>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f000 bcbe 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 28: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].s_dt);
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <ssi_handler+0x152c>)
 80022b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4a77      	ldr	r2, [pc, #476]	; (800249c <ssi_handler+0x1530>)
 80022be:	460b      	mov	r3, r1
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	440b      	add	r3, r1
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	330c      	adds	r3, #12
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4971      	ldr	r1, [pc, #452]	; (8002494 <ssi_handler+0x1528>)
 80022d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d2:	f015 facb 	bl	801786c <siprintf>
		return strlen(pcInsert);
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f7fd ff84 	bl	80001e4 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f000 bca6 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 29: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].e_dt);
 80022e4:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <ssi_handler+0x152c>)
 80022e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4a6b      	ldr	r2, [pc, #428]	; (800249c <ssi_handler+0x1530>)
 80022ee:	460b      	mov	r3, r1
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3310      	adds	r3, #16
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4965      	ldr	r1, [pc, #404]	; (8002494 <ssi_handler+0x1528>)
 8002300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002302:	f015 fab3 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002308:	f7fd ff6c 	bl	80001e4 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29b      	uxth	r3, r3
 8002310:	f000 bc8e 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 30: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", t_id);
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <ssi_handler+0x1534>)
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	461a      	mov	r2, r3
 800231c:	495d      	ldr	r1, [pc, #372]	; (8002494 <ssi_handler+0x1528>)
 800231e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002320:	f015 faa4 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002326:	f7fd ff5d 	bl	80001e4 <strlen>
 800232a:	4603      	mov	r3, r0
 800232c:	b29b      	uxth	r3, r3
 800232e:	f000 bc7f 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 31: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%s", pins);
 8002332:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <ssi_handler+0x1538>)
 8002334:	495c      	ldr	r1, [pc, #368]	; (80024a8 <ssi_handler+0x153c>)
 8002336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002338:	f015 fa98 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800233c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233e:	f7fd ff51 	bl	80001e4 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	f000 bc73 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 32: // "SSI" для странички "edit_timers.shtml"
		//printf("Tt[tmp_id].t_repeat = \%d\n",Tt[tmp_id].t_repeat);
		sprintf(pcInsert, "%d", Tt[tmp_id].t_repeat);
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <ssi_handler+0x152c>)
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	4619      	mov	r1, r3
 8002352:	4a52      	ldr	r2, [pc, #328]	; (800249c <ssi_handler+0x1530>)
 8002354:	460b      	mov	r3, r1
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	440b      	add	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3314      	adds	r3, #20
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	494b      	ldr	r1, [pc, #300]	; (8002494 <ssi_handler+0x1528>)
 8002366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002368:	f015 fa80 	bl	801786c <siprintf>
		return strlen(pcInsert);
 800236c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800236e:	f7fd ff39 	bl	80001e4 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	b29b      	uxth	r3, r3
 8002376:	f000 bc5b 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;

	case 33: // Для странички "edit_timers.shtml"
		sprintf(pcInsert,"%d",Tt[tmp_id].t_rept1);
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <ssi_handler+0x152c>)
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	4619      	mov	r1, r3
 8002382:	4a46      	ldr	r2, [pc, #280]	; (800249c <ssi_handler+0x1530>)
 8002384:	460b      	mov	r3, r1
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	440b      	add	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	333e      	adds	r3, #62	; 0x3e
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	461a      	mov	r2, r3
 8002396:	493f      	ldr	r1, [pc, #252]	; (8002494 <ssi_handler+0x1528>)
 8002398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800239a:	f015 fa67 	bl	801786c <siprintf>
    	return strlen(pcInsert);
 800239e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a0:	f7fd ff20 	bl	80001e4 <strlen>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f000 bc42 	b.w	8002c30 <ssi_handler+0x1cc4>
		break;
	case 34: // Для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_rept2 == 0){
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <ssi_handler+0x152c>)
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4a39      	ldr	r2, [pc, #228]	; (800249c <ssi_handler+0x1530>)
 80023b6:	460b      	mov	r3, r1
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	440b      	add	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3340      	adds	r3, #64	; 0x40
 80023c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11f      	bne.n	800240a <ssi_handler+0x149e>
			strcat(listaction, "<option value=\"0\" selected>NONE</option>"); // Блок "option" генерируем для HTML
 80023ca:	4838      	ldr	r0, [pc, #224]	; (80024ac <ssi_handler+0x1540>)
 80023cc:	f7fd ff0a 	bl	80001e4 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <ssi_handler+0x1540>)
 80023d6:	4413      	add	r3, r2
 80023d8:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <ssi_handler+0x1544>)
 80023da:	4614      	mov	r4, r2
 80023dc:	469c      	mov	ip, r3
 80023de:	f104 0e20 	add.w	lr, r4, #32
 80023e2:	4665      	mov	r5, ip
 80023e4:	4626      	mov	r6, r4
 80023e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023e8:	6028      	str	r0, [r5, #0]
 80023ea:	6069      	str	r1, [r5, #4]
 80023ec:	60aa      	str	r2, [r5, #8]
 80023ee:	60eb      	str	r3, [r5, #12]
 80023f0:	3410      	adds	r4, #16
 80023f2:	f10c 0c10 	add.w	ip, ip, #16
 80023f6:	4574      	cmp	r4, lr
 80023f8:	d1f3      	bne.n	80023e2 <ssi_handler+0x1476>
 80023fa:	4662      	mov	r2, ip
 80023fc:	4623      	mov	r3, r4
 80023fe:	cb03      	ldmia	r3!, {r0, r1}
 8002400:	6010      	str	r0, [r2, #0]
 8002402:	6051      	str	r1, [r2, #4]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	7213      	strb	r3, [r2, #8]
 8002408:	e013      	b.n	8002432 <ssi_handler+0x14c6>
		}
		else{
			strcat(listaction, "<option value=\"0\">NONE</option>");
 800240a:	4828      	ldr	r0, [pc, #160]	; (80024ac <ssi_handler+0x1540>)
 800240c:	f7fd feea 	bl	80001e4 <strlen>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <ssi_handler+0x1540>)
 8002416:	4413      	add	r3, r2
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <ssi_handler+0x1548>)
 800241a:	461c      	mov	r4, r3
 800241c:	4615      	mov	r5, r2
 800241e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002420:	6020      	str	r0, [r4, #0]
 8002422:	6061      	str	r1, [r4, #4]
 8002424:	60a2      	str	r2, [r4, #8]
 8002426:	60e3      	str	r3, [r4, #12]
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	6120      	str	r0, [r4, #16]
 800242c:	6161      	str	r1, [r4, #20]
 800242e:	61a2      	str	r2, [r4, #24]
 8002430:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 1) {
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <ssi_handler+0x152c>)
 8002434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002438:	4619      	mov	r1, r3
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <ssi_handler+0x1530>)
 800243c:	460b      	mov	r3, r1
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	440b      	add	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3340      	adds	r3, #64	; 0x40
 8002448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d135      	bne.n	80024bc <ssi_handler+0x1550>
			strcat(listaction, "<option value=\"1\" selected>Seconds</option>");
 8002450:	4816      	ldr	r0, [pc, #88]	; (80024ac <ssi_handler+0x1540>)
 8002452:	f7fd fec7 	bl	80001e4 <strlen>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <ssi_handler+0x1540>)
 800245c:	4413      	add	r3, r2
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <ssi_handler+0x154c>)
 8002460:	4614      	mov	r4, r2
 8002462:	469c      	mov	ip, r3
 8002464:	f104 0e20 	add.w	lr, r4, #32
 8002468:	4665      	mov	r5, ip
 800246a:	4626      	mov	r6, r4
 800246c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246e:	6028      	str	r0, [r5, #0]
 8002470:	6069      	str	r1, [r5, #4]
 8002472:	60aa      	str	r2, [r5, #8]
 8002474:	60eb      	str	r3, [r5, #12]
 8002476:	3410      	adds	r4, #16
 8002478:	f10c 0c10 	add.w	ip, ip, #16
 800247c:	4574      	cmp	r4, lr
 800247e:	d1f3      	bne.n	8002468 <ssi_handler+0x14fc>
 8002480:	4665      	mov	r5, ip
 8002482:	4623      	mov	r3, r4
 8002484:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002486:	6028      	str	r0, [r5, #0]
 8002488:	6069      	str	r1, [r5, #4]
 800248a:	60aa      	str	r2, [r5, #8]
 800248c:	e034      	b.n	80024f8 <ssi_handler+0x158c>
 800248e:	bf00      	nop
 8002490:	20000490 	.word	0x20000490
 8002494:	0801be80 	.word	0x0801be80
 8002498:	200007be 	.word	0x200007be
 800249c:	20001750 	.word	0x20001750
 80024a0:	200007bc 	.word	0x200007bc
 80024a4:	20000000 	.word	0x20000000
 80024a8:	0801be84 	.word	0x0801be84
 80024ac:	20006aa4 	.word	0x20006aa4
 80024b0:	0801be88 	.word	0x0801be88
 80024b4:	0801beb4 	.word	0x0801beb4
 80024b8:	0801bed4 	.word	0x0801bed4
		}
		else {
			strcat(listaction, "<option value=\"1\">Seconds</option>");
 80024bc:	48b9      	ldr	r0, [pc, #740]	; (80027a4 <ssi_handler+0x1838>)
 80024be:	f7fd fe91 	bl	80001e4 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4bb7      	ldr	r3, [pc, #732]	; (80027a4 <ssi_handler+0x1838>)
 80024c8:	4413      	add	r3, r2
 80024ca:	4ab7      	ldr	r2, [pc, #732]	; (80027a8 <ssi_handler+0x183c>)
 80024cc:	4614      	mov	r4, r2
 80024ce:	469c      	mov	ip, r3
 80024d0:	f104 0e20 	add.w	lr, r4, #32
 80024d4:	4665      	mov	r5, ip
 80024d6:	4626      	mov	r6, r4
 80024d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024da:	6028      	str	r0, [r5, #0]
 80024dc:	6069      	str	r1, [r5, #4]
 80024de:	60aa      	str	r2, [r5, #8]
 80024e0:	60eb      	str	r3, [r5, #12]
 80024e2:	3410      	adds	r4, #16
 80024e4:	f10c 0c10 	add.w	ip, ip, #16
 80024e8:	4574      	cmp	r4, lr
 80024ea:	d1f3      	bne.n	80024d4 <ssi_handler+0x1568>
 80024ec:	4663      	mov	r3, ip
 80024ee:	4622      	mov	r2, r4
 80024f0:	8811      	ldrh	r1, [r2, #0]
 80024f2:	7892      	ldrb	r2, [r2, #2]
 80024f4:	8019      	strh	r1, [r3, #0]
 80024f6:	709a      	strb	r2, [r3, #2]
		}

		if (Tt[tmp_id].t_rept2 == 2) {
 80024f8:	4bac      	ldr	r3, [pc, #688]	; (80027ac <ssi_handler+0x1840>)
 80024fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fe:	4619      	mov	r1, r3
 8002500:	4aab      	ldr	r2, [pc, #684]	; (80027b0 <ssi_handler+0x1844>)
 8002502:	460b      	mov	r3, r1
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	440b      	add	r3, r1
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3340      	adds	r3, #64	; 0x40
 800250e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d11e      	bne.n	8002554 <ssi_handler+0x15e8>
			strcat(listaction, "<option value=\"2\" selected>Minutes</option>");
 8002516:	48a3      	ldr	r0, [pc, #652]	; (80027a4 <ssi_handler+0x1838>)
 8002518:	f7fd fe64 	bl	80001e4 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <ssi_handler+0x1838>)
 8002522:	4413      	add	r3, r2
 8002524:	4aa3      	ldr	r2, [pc, #652]	; (80027b4 <ssi_handler+0x1848>)
 8002526:	4614      	mov	r4, r2
 8002528:	469c      	mov	ip, r3
 800252a:	f104 0e20 	add.w	lr, r4, #32
 800252e:	4665      	mov	r5, ip
 8002530:	4626      	mov	r6, r4
 8002532:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002534:	6028      	str	r0, [r5, #0]
 8002536:	6069      	str	r1, [r5, #4]
 8002538:	60aa      	str	r2, [r5, #8]
 800253a:	60eb      	str	r3, [r5, #12]
 800253c:	3410      	adds	r4, #16
 800253e:	f10c 0c10 	add.w	ip, ip, #16
 8002542:	4574      	cmp	r4, lr
 8002544:	d1f3      	bne.n	800252e <ssi_handler+0x15c2>
 8002546:	4665      	mov	r5, ip
 8002548:	4623      	mov	r3, r4
 800254a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800254c:	6028      	str	r0, [r5, #0]
 800254e:	6069      	str	r1, [r5, #4]
 8002550:	60aa      	str	r2, [r5, #8]
 8002552:	e01d      	b.n	8002590 <ssi_handler+0x1624>
		}
		else {
			strcat(listaction, "<option value=\"2\">Minutes</option>");
 8002554:	4893      	ldr	r0, [pc, #588]	; (80027a4 <ssi_handler+0x1838>)
 8002556:	f7fd fe45 	bl	80001e4 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <ssi_handler+0x1838>)
 8002560:	4413      	add	r3, r2
 8002562:	4a95      	ldr	r2, [pc, #596]	; (80027b8 <ssi_handler+0x184c>)
 8002564:	4614      	mov	r4, r2
 8002566:	469c      	mov	ip, r3
 8002568:	f104 0e20 	add.w	lr, r4, #32
 800256c:	4665      	mov	r5, ip
 800256e:	4626      	mov	r6, r4
 8002570:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002572:	6028      	str	r0, [r5, #0]
 8002574:	6069      	str	r1, [r5, #4]
 8002576:	60aa      	str	r2, [r5, #8]
 8002578:	60eb      	str	r3, [r5, #12]
 800257a:	3410      	adds	r4, #16
 800257c:	f10c 0c10 	add.w	ip, ip, #16
 8002580:	4574      	cmp	r4, lr
 8002582:	d1f3      	bne.n	800256c <ssi_handler+0x1600>
 8002584:	4663      	mov	r3, ip
 8002586:	4622      	mov	r2, r4
 8002588:	8811      	ldrh	r1, [r2, #0]
 800258a:	7892      	ldrb	r2, [r2, #2]
 800258c:	8019      	strh	r1, [r3, #0]
 800258e:	709a      	strb	r2, [r3, #2]
		}
		if (Tt[tmp_id].t_rept2 == 3) {
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <ssi_handler+0x1840>)
 8002592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002596:	4619      	mov	r1, r3
 8002598:	4a85      	ldr	r2, [pc, #532]	; (80027b0 <ssi_handler+0x1844>)
 800259a:	460b      	mov	r3, r1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	440b      	add	r3, r1
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3340      	adds	r3, #64	; 0x40
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d11f      	bne.n	80025ee <ssi_handler+0x1682>
			strcat(listaction, "<option value=\"3\" selected>Hours</option>");
 80025ae:	487d      	ldr	r0, [pc, #500]	; (80027a4 <ssi_handler+0x1838>)
 80025b0:	f7fd fe18 	bl	80001e4 <strlen>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <ssi_handler+0x1838>)
 80025ba:	4413      	add	r3, r2
 80025bc:	4a7f      	ldr	r2, [pc, #508]	; (80027bc <ssi_handler+0x1850>)
 80025be:	4614      	mov	r4, r2
 80025c0:	469c      	mov	ip, r3
 80025c2:	f104 0e20 	add.w	lr, r4, #32
 80025c6:	4665      	mov	r5, ip
 80025c8:	4626      	mov	r6, r4
 80025ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025cc:	6028      	str	r0, [r5, #0]
 80025ce:	6069      	str	r1, [r5, #4]
 80025d0:	60aa      	str	r2, [r5, #8]
 80025d2:	60eb      	str	r3, [r5, #12]
 80025d4:	3410      	adds	r4, #16
 80025d6:	f10c 0c10 	add.w	ip, ip, #16
 80025da:	4574      	cmp	r4, lr
 80025dc:	d1f3      	bne.n	80025c6 <ssi_handler+0x165a>
 80025de:	4662      	mov	r2, ip
 80025e0:	4623      	mov	r3, r4
 80025e2:	cb03      	ldmia	r3!, {r0, r1}
 80025e4:	6010      	str	r0, [r2, #0]
 80025e6:	6051      	str	r1, [r2, #4]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	8113      	strh	r3, [r2, #8]
 80025ec:	e01b      	b.n	8002626 <ssi_handler+0x16ba>
		}
		else {
			strcat(listaction, "<option value=\"3\">Hours</option>");
 80025ee:	486d      	ldr	r0, [pc, #436]	; (80027a4 <ssi_handler+0x1838>)
 80025f0:	f7fd fdf8 	bl	80001e4 <strlen>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <ssi_handler+0x1838>)
 80025fa:	4413      	add	r3, r2
 80025fc:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <ssi_handler+0x1854>)
 80025fe:	4614      	mov	r4, r2
 8002600:	469c      	mov	ip, r3
 8002602:	f104 0e20 	add.w	lr, r4, #32
 8002606:	4665      	mov	r5, ip
 8002608:	4626      	mov	r6, r4
 800260a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800260c:	6028      	str	r0, [r5, #0]
 800260e:	6069      	str	r1, [r5, #4]
 8002610:	60aa      	str	r2, [r5, #8]
 8002612:	60eb      	str	r3, [r5, #12]
 8002614:	3410      	adds	r4, #16
 8002616:	f10c 0c10 	add.w	ip, ip, #16
 800261a:	4574      	cmp	r4, lr
 800261c:	d1f3      	bne.n	8002606 <ssi_handler+0x169a>
 800261e:	4663      	mov	r3, ip
 8002620:	4622      	mov	r2, r4
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 4) {
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <ssi_handler+0x1840>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	4619      	mov	r1, r3
 800262e:	4a60      	ldr	r2, [pc, #384]	; (80027b0 <ssi_handler+0x1844>)
 8002630:	460b      	mov	r3, r1
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	440b      	add	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3340      	adds	r3, #64	; 0x40
 800263c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d11f      	bne.n	8002684 <ssi_handler+0x1718>
			strcat(listaction, "<option value=\"4\" selected>Days</option>");
 8002644:	4857      	ldr	r0, [pc, #348]	; (80027a4 <ssi_handler+0x1838>)
 8002646:	f7fd fdcd 	bl	80001e4 <strlen>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <ssi_handler+0x1838>)
 8002650:	4413      	add	r3, r2
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <ssi_handler+0x1858>)
 8002654:	4614      	mov	r4, r2
 8002656:	469c      	mov	ip, r3
 8002658:	f104 0e20 	add.w	lr, r4, #32
 800265c:	4665      	mov	r5, ip
 800265e:	4626      	mov	r6, r4
 8002660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002662:	6028      	str	r0, [r5, #0]
 8002664:	6069      	str	r1, [r5, #4]
 8002666:	60aa      	str	r2, [r5, #8]
 8002668:	60eb      	str	r3, [r5, #12]
 800266a:	3410      	adds	r4, #16
 800266c:	f10c 0c10 	add.w	ip, ip, #16
 8002670:	4574      	cmp	r4, lr
 8002672:	d1f3      	bne.n	800265c <ssi_handler+0x16f0>
 8002674:	4662      	mov	r2, ip
 8002676:	4623      	mov	r3, r4
 8002678:	cb03      	ldmia	r3!, {r0, r1}
 800267a:	6010      	str	r0, [r2, #0]
 800267c:	6051      	str	r1, [r2, #4]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	7213      	strb	r3, [r2, #8]
 8002682:	e013      	b.n	80026ac <ssi_handler+0x1740>
		}
		else {
			strcat(listaction, "<option value=\"4\">Days</option>");
 8002684:	4847      	ldr	r0, [pc, #284]	; (80027a4 <ssi_handler+0x1838>)
 8002686:	f7fd fdad 	bl	80001e4 <strlen>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b45      	ldr	r3, [pc, #276]	; (80027a4 <ssi_handler+0x1838>)
 8002690:	4413      	add	r3, r2
 8002692:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <ssi_handler+0x185c>)
 8002694:	461c      	mov	r4, r3
 8002696:	4615      	mov	r5, r2
 8002698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800269a:	6020      	str	r0, [r4, #0]
 800269c:	6061      	str	r1, [r4, #4]
 800269e:	60a2      	str	r2, [r4, #8]
 80026a0:	60e3      	str	r3, [r4, #12]
 80026a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a4:	6120      	str	r0, [r4, #16]
 80026a6:	6161      	str	r1, [r4, #20]
 80026a8:	61a2      	str	r2, [r4, #24]
 80026aa:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 5) {
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <ssi_handler+0x1840>)
 80026ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <ssi_handler+0x1844>)
 80026b6:	460b      	mov	r3, r1
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	440b      	add	r3, r1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	3340      	adds	r3, #64	; 0x40
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d11f      	bne.n	800270a <ssi_handler+0x179e>
			strcat(listaction, "<option value=\"5\" selected>Weeks</option>");
 80026ca:	4836      	ldr	r0, [pc, #216]	; (80027a4 <ssi_handler+0x1838>)
 80026cc:	f7fd fd8a 	bl	80001e4 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <ssi_handler+0x1838>)
 80026d6:	4413      	add	r3, r2
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <ssi_handler+0x1860>)
 80026da:	4614      	mov	r4, r2
 80026dc:	469c      	mov	ip, r3
 80026de:	f104 0e20 	add.w	lr, r4, #32
 80026e2:	4665      	mov	r5, ip
 80026e4:	4626      	mov	r6, r4
 80026e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026e8:	6028      	str	r0, [r5, #0]
 80026ea:	6069      	str	r1, [r5, #4]
 80026ec:	60aa      	str	r2, [r5, #8]
 80026ee:	60eb      	str	r3, [r5, #12]
 80026f0:	3410      	adds	r4, #16
 80026f2:	f10c 0c10 	add.w	ip, ip, #16
 80026f6:	4574      	cmp	r4, lr
 80026f8:	d1f3      	bne.n	80026e2 <ssi_handler+0x1776>
 80026fa:	4662      	mov	r2, ip
 80026fc:	4623      	mov	r3, r4
 80026fe:	cb03      	ldmia	r3!, {r0, r1}
 8002700:	6010      	str	r0, [r2, #0]
 8002702:	6051      	str	r1, [r2, #4]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	8113      	strh	r3, [r2, #8]
 8002708:	e01b      	b.n	8002742 <ssi_handler+0x17d6>
		}
		else {
			strcat(listaction, "<option value=\"5\">Weeks</option>");
 800270a:	4826      	ldr	r0, [pc, #152]	; (80027a4 <ssi_handler+0x1838>)
 800270c:	f7fd fd6a 	bl	80001e4 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <ssi_handler+0x1838>)
 8002716:	4413      	add	r3, r2
 8002718:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <ssi_handler+0x1864>)
 800271a:	4614      	mov	r4, r2
 800271c:	469c      	mov	ip, r3
 800271e:	f104 0e20 	add.w	lr, r4, #32
 8002722:	4665      	mov	r5, ip
 8002724:	4626      	mov	r6, r4
 8002726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002728:	6028      	str	r0, [r5, #0]
 800272a:	6069      	str	r1, [r5, #4]
 800272c:	60aa      	str	r2, [r5, #8]
 800272e:	60eb      	str	r3, [r5, #12]
 8002730:	3410      	adds	r4, #16
 8002732:	f10c 0c10 	add.w	ip, ip, #16
 8002736:	4574      	cmp	r4, lr
 8002738:	d1f3      	bne.n	8002722 <ssi_handler+0x17b6>
 800273a:	4663      	mov	r3, ip
 800273c:	4622      	mov	r2, r4
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 6) {
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <ssi_handler+0x1840>)
 8002744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002748:	4619      	mov	r1, r3
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <ssi_handler+0x1844>)
 800274c:	460b      	mov	r3, r1
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	440b      	add	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3340      	adds	r3, #64	; 0x40
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	2b06      	cmp	r3, #6
 800275e:	d13b      	bne.n	80027d8 <ssi_handler+0x186c>
			strcat(listaction, "<option value=\"6\" selected>Months</option>");
 8002760:	4810      	ldr	r0, [pc, #64]	; (80027a4 <ssi_handler+0x1838>)
 8002762:	f7fd fd3f 	bl	80001e4 <strlen>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <ssi_handler+0x1838>)
 800276c:	4413      	add	r3, r2
 800276e:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <ssi_handler+0x1868>)
 8002770:	4614      	mov	r4, r2
 8002772:	469c      	mov	ip, r3
 8002774:	f104 0e20 	add.w	lr, r4, #32
 8002778:	4665      	mov	r5, ip
 800277a:	4626      	mov	r6, r4
 800277c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800277e:	6028      	str	r0, [r5, #0]
 8002780:	6069      	str	r1, [r5, #4]
 8002782:	60aa      	str	r2, [r5, #8]
 8002784:	60eb      	str	r3, [r5, #12]
 8002786:	3410      	adds	r4, #16
 8002788:	f10c 0c10 	add.w	ip, ip, #16
 800278c:	4574      	cmp	r4, lr
 800278e:	d1f3      	bne.n	8002778 <ssi_handler+0x180c>
 8002790:	4662      	mov	r2, ip
 8002792:	4623      	mov	r3, r4
 8002794:	cb03      	ldmia	r3!, {r0, r1}
 8002796:	6010      	str	r0, [r2, #0]
 8002798:	6051      	str	r1, [r2, #4]
 800279a:	8819      	ldrh	r1, [r3, #0]
 800279c:	789b      	ldrb	r3, [r3, #2]
 800279e:	8111      	strh	r1, [r2, #8]
 80027a0:	7293      	strb	r3, [r2, #10]
 80027a2:	e035      	b.n	8002810 <ssi_handler+0x18a4>
 80027a4:	20006aa4 	.word	0x20006aa4
 80027a8:	0801bf00 	.word	0x0801bf00
 80027ac:	200007be 	.word	0x200007be
 80027b0:	20001750 	.word	0x20001750
 80027b4:	0801bf24 	.word	0x0801bf24
 80027b8:	0801bf50 	.word	0x0801bf50
 80027bc:	0801bf74 	.word	0x0801bf74
 80027c0:	0801bfa0 	.word	0x0801bfa0
 80027c4:	0801bfc4 	.word	0x0801bfc4
 80027c8:	0801bff0 	.word	0x0801bff0
 80027cc:	0801c010 	.word	0x0801c010
 80027d0:	0801c03c 	.word	0x0801c03c
 80027d4:	0801c060 	.word	0x0801c060
		}
		else {
			strcat(listaction, "<option value=\"6\">Months</option>");
 80027d8:	48c9      	ldr	r0, [pc, #804]	; (8002b00 <ssi_handler+0x1b94>)
 80027da:	f7fd fd03 	bl	80001e4 <strlen>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	4bc7      	ldr	r3, [pc, #796]	; (8002b00 <ssi_handler+0x1b94>)
 80027e4:	4413      	add	r3, r2
 80027e6:	4ac7      	ldr	r2, [pc, #796]	; (8002b04 <ssi_handler+0x1b98>)
 80027e8:	4614      	mov	r4, r2
 80027ea:	469c      	mov	ip, r3
 80027ec:	f104 0e20 	add.w	lr, r4, #32
 80027f0:	4665      	mov	r5, ip
 80027f2:	4626      	mov	r6, r4
 80027f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027f6:	6028      	str	r0, [r5, #0]
 80027f8:	6069      	str	r1, [r5, #4]
 80027fa:	60aa      	str	r2, [r5, #8]
 80027fc:	60eb      	str	r3, [r5, #12]
 80027fe:	3410      	adds	r4, #16
 8002800:	f10c 0c10 	add.w	ip, ip, #16
 8002804:	4574      	cmp	r4, lr
 8002806:	d1f3      	bne.n	80027f0 <ssi_handler+0x1884>
 8002808:	4662      	mov	r2, ip
 800280a:	4623      	mov	r3, r4
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	8013      	strh	r3, [r2, #0]
		}
		if(Tt[tmp_id].t_rept2 == 7) {
 8002810:	4bbd      	ldr	r3, [pc, #756]	; (8002b08 <ssi_handler+0x1b9c>)
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	4619      	mov	r1, r3
 8002818:	4abc      	ldr	r2, [pc, #752]	; (8002b0c <ssi_handler+0x1ba0>)
 800281a:	460b      	mov	r3, r1
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	440b      	add	r3, r1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3340      	adds	r3, #64	; 0x40
 8002826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282a:	2b07      	cmp	r3, #7
 800282c:	d11f      	bne.n	800286e <ssi_handler+0x1902>
			strcat(listaction, "<option value=\"7\" selected>Years</option>");
 800282e:	48b4      	ldr	r0, [pc, #720]	; (8002b00 <ssi_handler+0x1b94>)
 8002830:	f7fd fcd8 	bl	80001e4 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4bb1      	ldr	r3, [pc, #708]	; (8002b00 <ssi_handler+0x1b94>)
 800283a:	4413      	add	r3, r2
 800283c:	4ab4      	ldr	r2, [pc, #720]	; (8002b10 <ssi_handler+0x1ba4>)
 800283e:	4614      	mov	r4, r2
 8002840:	469c      	mov	ip, r3
 8002842:	f104 0e20 	add.w	lr, r4, #32
 8002846:	4665      	mov	r5, ip
 8002848:	4626      	mov	r6, r4
 800284a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800284c:	6028      	str	r0, [r5, #0]
 800284e:	6069      	str	r1, [r5, #4]
 8002850:	60aa      	str	r2, [r5, #8]
 8002852:	60eb      	str	r3, [r5, #12]
 8002854:	3410      	adds	r4, #16
 8002856:	f10c 0c10 	add.w	ip, ip, #16
 800285a:	4574      	cmp	r4, lr
 800285c:	d1f3      	bne.n	8002846 <ssi_handler+0x18da>
 800285e:	4662      	mov	r2, ip
 8002860:	4623      	mov	r3, r4
 8002862:	cb03      	ldmia	r3!, {r0, r1}
 8002864:	6010      	str	r0, [r2, #0]
 8002866:	6051      	str	r1, [r2, #4]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	8113      	strh	r3, [r2, #8]
 800286c:	e01b      	b.n	80028a6 <ssi_handler+0x193a>
		}
		else {
			strcat(listaction, "<option value=\"7\">Years</option>");
 800286e:	48a4      	ldr	r0, [pc, #656]	; (8002b00 <ssi_handler+0x1b94>)
 8002870:	f7fd fcb8 	bl	80001e4 <strlen>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4ba1      	ldr	r3, [pc, #644]	; (8002b00 <ssi_handler+0x1b94>)
 800287a:	4413      	add	r3, r2
 800287c:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <ssi_handler+0x1ba8>)
 800287e:	4614      	mov	r4, r2
 8002880:	469c      	mov	ip, r3
 8002882:	f104 0e20 	add.w	lr, r4, #32
 8002886:	4665      	mov	r5, ip
 8002888:	4626      	mov	r6, r4
 800288a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800288c:	6028      	str	r0, [r5, #0]
 800288e:	6069      	str	r1, [r5, #4]
 8002890:	60aa      	str	r2, [r5, #8]
 8002892:	60eb      	str	r3, [r5, #12]
 8002894:	3410      	adds	r4, #16
 8002896:	f10c 0c10 	add.w	ip, ip, #16
 800289a:	4574      	cmp	r4, lr
 800289c:	d1f3      	bne.n	8002886 <ssi_handler+0x191a>
 800289e:	4663      	mov	r3, ip
 80028a0:	4622      	mov	r2, r4
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 80028a6:	4a96      	ldr	r2, [pc, #600]	; (8002b00 <ssi_handler+0x1b94>)
 80028a8:	499b      	ldr	r1, [pc, #620]	; (8002b18 <ssi_handler+0x1bac>)
 80028aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ac:	f014 ffde 	bl	801786c <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 80028b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028b4:	2100      	movs	r1, #0
 80028b6:	4892      	ldr	r0, [pc, #584]	; (8002b00 <ssi_handler+0x1b94>)
 80028b8:	f014 fa64 	bl	8016d84 <memset>
    	return strlen(pcInsert);
 80028bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028be:	f7fd fc91 	bl	80001e4 <strlen>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	e1b3      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	case 35: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_action == 0){
 80028c8:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <ssi_handler+0x1b9c>)
 80028ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4a8e      	ldr	r2, [pc, #568]	; (8002b0c <ssi_handler+0x1ba0>)
 80028d2:	460b      	mov	r3, r1
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	440b      	add	r3, r1
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3318      	adds	r3, #24
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11d      	bne.n	8002922 <ssi_handler+0x19b6>
			strcat(listaction, "<option value=\"0\" selected>OFF</option>"); // Блок "option" генерируем для HTML
 80028e6:	4886      	ldr	r0, [pc, #536]	; (8002b00 <ssi_handler+0x1b94>)
 80028e8:	f7fd fc7c 	bl	80001e4 <strlen>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <ssi_handler+0x1b94>)
 80028f2:	4413      	add	r3, r2
 80028f4:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <ssi_handler+0x1bb0>)
 80028f6:	4614      	mov	r4, r2
 80028f8:	469c      	mov	ip, r3
 80028fa:	f104 0e20 	add.w	lr, r4, #32
 80028fe:	4665      	mov	r5, ip
 8002900:	4626      	mov	r6, r4
 8002902:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002904:	6028      	str	r0, [r5, #0]
 8002906:	6069      	str	r1, [r5, #4]
 8002908:	60aa      	str	r2, [r5, #8]
 800290a:	60eb      	str	r3, [r5, #12]
 800290c:	3410      	adds	r4, #16
 800290e:	f10c 0c10 	add.w	ip, ip, #16
 8002912:	4574      	cmp	r4, lr
 8002914:	d1f3      	bne.n	80028fe <ssi_handler+0x1992>
 8002916:	4662      	mov	r2, ip
 8002918:	4623      	mov	r3, r4
 800291a:	cb03      	ldmia	r3!, {r0, r1}
 800291c:	6010      	str	r0, [r2, #0]
 800291e:	6051      	str	r1, [r2, #4]
 8002920:	e017      	b.n	8002952 <ssi_handler+0x19e6>
		}
		else{
			strcat(listaction, "<option value=\"0\">OFF</option>");
 8002922:	4877      	ldr	r0, [pc, #476]	; (8002b00 <ssi_handler+0x1b94>)
 8002924:	f7fd fc5e 	bl	80001e4 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <ssi_handler+0x1b94>)
 800292e:	4413      	add	r3, r2
 8002930:	4a7b      	ldr	r2, [pc, #492]	; (8002b20 <ssi_handler+0x1bb4>)
 8002932:	461d      	mov	r5, r3
 8002934:	4614      	mov	r4, r2
 8002936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002938:	6028      	str	r0, [r5, #0]
 800293a:	6069      	str	r1, [r5, #4]
 800293c:	60aa      	str	r2, [r5, #8]
 800293e:	60eb      	str	r3, [r5, #12]
 8002940:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002942:	6128      	str	r0, [r5, #16]
 8002944:	6169      	str	r1, [r5, #20]
 8002946:	61aa      	str	r2, [r5, #24]
 8002948:	8823      	ldrh	r3, [r4, #0]
 800294a:	78a2      	ldrb	r2, [r4, #2]
 800294c:	83ab      	strh	r3, [r5, #28]
 800294e:	4613      	mov	r3, r2
 8002950:	77ab      	strb	r3, [r5, #30]
		}
		if (Tt[tmp_id].t_action == 1) {
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <ssi_handler+0x1b9c>)
 8002954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002958:	4619      	mov	r1, r3
 800295a:	4a6c      	ldr	r2, [pc, #432]	; (8002b0c <ssi_handler+0x1ba0>)
 800295c:	460b      	mov	r3, r1
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	440b      	add	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3318      	adds	r3, #24
 8002968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d120      	bne.n	80029b2 <ssi_handler+0x1a46>
			strcat(listaction, "<option value=\"1\" selected>ON</option>");
 8002970:	4863      	ldr	r0, [pc, #396]	; (8002b00 <ssi_handler+0x1b94>)
 8002972:	f7fd fc37 	bl	80001e4 <strlen>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <ssi_handler+0x1b94>)
 800297c:	4413      	add	r3, r2
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <ssi_handler+0x1bb8>)
 8002980:	4614      	mov	r4, r2
 8002982:	469c      	mov	ip, r3
 8002984:	f104 0e20 	add.w	lr, r4, #32
 8002988:	4665      	mov	r5, ip
 800298a:	4626      	mov	r6, r4
 800298c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800298e:	6028      	str	r0, [r5, #0]
 8002990:	6069      	str	r1, [r5, #4]
 8002992:	60aa      	str	r2, [r5, #8]
 8002994:	60eb      	str	r3, [r5, #12]
 8002996:	3410      	adds	r4, #16
 8002998:	f10c 0c10 	add.w	ip, ip, #16
 800299c:	4574      	cmp	r4, lr
 800299e:	d1f3      	bne.n	8002988 <ssi_handler+0x1a1c>
 80029a0:	4663      	mov	r3, ip
 80029a2:	4622      	mov	r2, r4
 80029a4:	6810      	ldr	r0, [r2, #0]
 80029a6:	6018      	str	r0, [r3, #0]
 80029a8:	8891      	ldrh	r1, [r2, #4]
 80029aa:	7992      	ldrb	r2, [r2, #6]
 80029ac:	8099      	strh	r1, [r3, #4]
 80029ae:	719a      	strb	r2, [r3, #6]
 80029b0:	e014      	b.n	80029dc <ssi_handler+0x1a70>
		}
		else {
			strcat(listaction, "<option value=\"1\">ON</option>");
 80029b2:	4853      	ldr	r0, [pc, #332]	; (8002b00 <ssi_handler+0x1b94>)
 80029b4:	f7fd fc16 	bl	80001e4 <strlen>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <ssi_handler+0x1b94>)
 80029be:	4413      	add	r3, r2
 80029c0:	4a59      	ldr	r2, [pc, #356]	; (8002b28 <ssi_handler+0x1bbc>)
 80029c2:	461d      	mov	r5, r3
 80029c4:	4614      	mov	r4, r2
 80029c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c8:	6028      	str	r0, [r5, #0]
 80029ca:	6069      	str	r1, [r5, #4]
 80029cc:	60aa      	str	r2, [r5, #8]
 80029ce:	60eb      	str	r3, [r5, #12]
 80029d0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80029d2:	6128      	str	r0, [r5, #16]
 80029d4:	6169      	str	r1, [r5, #20]
 80029d6:	61aa      	str	r2, [r5, #24]
 80029d8:	8823      	ldrh	r3, [r4, #0]
 80029da:	83ab      	strh	r3, [r5, #28]
		}

		if (Tt[tmp_id].t_action == 2) {
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <ssi_handler+0x1b9c>)
 80029de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <ssi_handler+0x1ba0>)
 80029e6:	460b      	mov	r3, r1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	440b      	add	r3, r1
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	3318      	adds	r3, #24
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d121      	bne.n	8002a3e <ssi_handler+0x1ad2>
			strcat(listaction, "<option value=\"2\" selected>TOGGLE</option>");
 80029fa:	4841      	ldr	r0, [pc, #260]	; (8002b00 <ssi_handler+0x1b94>)
 80029fc:	f7fd fbf2 	bl	80001e4 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <ssi_handler+0x1b94>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <ssi_handler+0x1bc0>)
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	469c      	mov	ip, r3
 8002a0e:	f104 0e20 	add.w	lr, r4, #32
 8002a12:	4665      	mov	r5, ip
 8002a14:	4626      	mov	r6, r4
 8002a16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a18:	6028      	str	r0, [r5, #0]
 8002a1a:	6069      	str	r1, [r5, #4]
 8002a1c:	60aa      	str	r2, [r5, #8]
 8002a1e:	60eb      	str	r3, [r5, #12]
 8002a20:	3410      	adds	r4, #16
 8002a22:	f10c 0c10 	add.w	ip, ip, #16
 8002a26:	4574      	cmp	r4, lr
 8002a28:	d1f3      	bne.n	8002a12 <ssi_handler+0x1aa6>
 8002a2a:	4662      	mov	r2, ip
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	cb03      	ldmia	r3!, {r0, r1}
 8002a30:	6010      	str	r0, [r2, #0]
 8002a32:	6051      	str	r1, [r2, #4]
 8002a34:	8819      	ldrh	r1, [r3, #0]
 8002a36:	789b      	ldrb	r3, [r3, #2]
 8002a38:	8111      	strh	r1, [r2, #8]
 8002a3a:	7293      	strb	r3, [r2, #10]
 8002a3c:	e01b      	b.n	8002a76 <ssi_handler+0x1b0a>
		}
		else {
			strcat(listaction, "<option value=\"2\">TOGGLE</option>");
 8002a3e:	4830      	ldr	r0, [pc, #192]	; (8002b00 <ssi_handler+0x1b94>)
 8002a40:	f7fd fbd0 	bl	80001e4 <strlen>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <ssi_handler+0x1b94>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a38      	ldr	r2, [pc, #224]	; (8002b30 <ssi_handler+0x1bc4>)
 8002a4e:	4614      	mov	r4, r2
 8002a50:	469c      	mov	ip, r3
 8002a52:	f104 0e20 	add.w	lr, r4, #32
 8002a56:	4665      	mov	r5, ip
 8002a58:	4626      	mov	r6, r4
 8002a5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a5c:	6028      	str	r0, [r5, #0]
 8002a5e:	6069      	str	r1, [r5, #4]
 8002a60:	60aa      	str	r2, [r5, #8]
 8002a62:	60eb      	str	r3, [r5, #12]
 8002a64:	3410      	adds	r4, #16
 8002a66:	f10c 0c10 	add.w	ip, ip, #16
 8002a6a:	4574      	cmp	r4, lr
 8002a6c:	d1f3      	bne.n	8002a56 <ssi_handler+0x1aea>
 8002a6e:	4662      	mov	r2, ip
 8002a70:	4623      	mov	r3, r4
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	8013      	strh	r3, [r2, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 8002a76:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <ssi_handler+0x1b94>)
 8002a78:	4927      	ldr	r1, [pc, #156]	; (8002b18 <ssi_handler+0x1bac>)
 8002a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7c:	f014 fef6 	bl	801786c <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 8002a80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a84:	2100      	movs	r1, #0
 8002a86:	481e      	ldr	r0, [pc, #120]	; (8002b00 <ssi_handler+0x1b94>)
 8002a88:	f014 f97c 	bl	8016d84 <memset>
    	return strlen(pcInsert);
 8002a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8e:	f7fd fba9 	bl	80001e4 <strlen>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	e0cb      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;

	case 36: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].imm_ly == 1){
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <ssi_handler+0x1b9c>)
 8002a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <ssi_handler+0x1ba0>)
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	440b      	add	r3, r1
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3308      	adds	r3, #8
 8002aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <ssi_handler+0x1b56>
		sprintf(pcInsert, "%s", "checked");
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <ssi_handler+0x1bc8>)
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <ssi_handler+0x1bac>)
 8002aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002abc:	f014 fed6 	bl	801786c <siprintf>
 8002ac0:	e004      	b.n	8002acc <ssi_handler+0x1b60>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <ssi_handler+0x1bcc>)
 8002ac4:	4914      	ldr	r1, [pc, #80]	; (8002b18 <ssi_handler+0x1bac>)
 8002ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac8:	f014 fed0 	bl	801786c <siprintf>
		}
		return strlen(pcInsert);
 8002acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ace:	f7fd fb89 	bl	80001e4 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	e0ab      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;

	case 37: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunrise == 1){
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <ssi_handler+0x1b9c>)
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <ssi_handler+0x1ba0>)
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	440b      	add	r3, r1
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3324      	adds	r3, #36	; 0x24
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d123      	bne.n	8002b3c <ssi_handler+0x1bd0>
		sprintf(pcInsert, "%s", "checked");
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <ssi_handler+0x1bc8>)
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <ssi_handler+0x1bac>)
 8002af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afa:	f014 feb7 	bl	801786c <siprintf>
 8002afe:	e022      	b.n	8002b46 <ssi_handler+0x1bda>
 8002b00:	20006aa4 	.word	0x20006aa4
 8002b04:	0801c08c 	.word	0x0801c08c
 8002b08:	200007be 	.word	0x200007be
 8002b0c:	20001750 	.word	0x20001750
 8002b10:	0801c0b0 	.word	0x0801c0b0
 8002b14:	0801c0dc 	.word	0x0801c0dc
 8002b18:	0801be84 	.word	0x0801be84
 8002b1c:	0801c100 	.word	0x0801c100
 8002b20:	0801c128 	.word	0x0801c128
 8002b24:	0801c148 	.word	0x0801c148
 8002b28:	0801c170 	.word	0x0801c170
 8002b2c:	0801c190 	.word	0x0801c190
 8002b30:	0801c1bc 	.word	0x0801c1bc
 8002b34:	0801c1e0 	.word	0x0801c1e0
 8002b38:	0801c1e8 	.word	0x0801c1e8
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002b3c:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <ssi_handler+0x1ccc>)
 8002b3e:	493f      	ldr	r1, [pc, #252]	; (8002c3c <ssi_handler+0x1cd0>)
 8002b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b42:	f014 fe93 	bl	801786c <siprintf>
		}
		return strlen(pcInsert);
 8002b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b48:	f7fd fb4c 	bl	80001e4 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	e06e      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	case 38: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunset == 1){
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <ssi_handler+0x1cd4>)
 8002b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <ssi_handler+0x1cd8>)
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	440b      	add	r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3328      	adds	r3, #40	; 0x28
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <ssi_handler+0x1c0e>
		sprintf(pcInsert, "%s", "checked");
 8002b6e:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <ssi_handler+0x1cdc>)
 8002b70:	4932      	ldr	r1, [pc, #200]	; (8002c3c <ssi_handler+0x1cd0>)
 8002b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b74:	f014 fe7a 	bl	801786c <siprintf>
 8002b78:	e004      	b.n	8002b84 <ssi_handler+0x1c18>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <ssi_handler+0x1ccc>)
 8002b7c:	492f      	ldr	r1, [pc, #188]	; (8002c3c <ssi_handler+0x1cd0>)
 8002b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b80:	f014 fe74 	bl	801786c <siprintf>
		}
		return strlen(pcInsert);
 8002b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b86:	f7fd fb2d 	bl	80001e4 <strlen>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	e04f      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	case 39: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_group);
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <ssi_handler+0x1cd4>)
 8002b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <ssi_handler+0x1cd8>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4924      	ldr	r1, [pc, #144]	; (8002c3c <ssi_handler+0x1cd0>)
 8002bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bae:	f014 fe5d 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb4:	f7fd fb16 	bl	80001e4 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	e038      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	case 40: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_info);
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <ssi_handler+0x1cd4>)
 8002bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	3328      	adds	r3, #40	; 0x28
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <ssi_handler+0x1cd8>)
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4918      	ldr	r1, [pc, #96]	; (8002c3c <ssi_handler+0x1cd0>)
 8002bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bdc:	f014 fe46 	bl	801786c <siprintf>
		return strlen(pcInsert);
 8002be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002be2:	f7fd faff 	bl	80001e4 <strlen>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	e021      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	case 41: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_onoff == 1){
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <ssi_handler+0x1cd4>)
 8002bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <ssi_handler+0x1cd8>)
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	440b      	add	r3, r1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	333c      	adds	r3, #60	; 0x3c
 8002c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <ssi_handler+0x1caa>
		sprintf(pcInsert, "%s", "checked=\"checked\"");
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <ssi_handler+0x1ce0>)
 8002c0c:	490b      	ldr	r1, [pc, #44]	; (8002c3c <ssi_handler+0x1cd0>)
 8002c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c10:	f014 fe2c 	bl	801786c <siprintf>
 8002c14:	e004      	b.n	8002c20 <ssi_handler+0x1cb4>
		}
		else{
			sprintf(pcInsert, "%s", "unchecked=\"unchecked\"");
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <ssi_handler+0x1ce4>)
 8002c18:	4908      	ldr	r1, [pc, #32]	; (8002c3c <ssi_handler+0x1cd0>)
 8002c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1c:	f014 fe26 	bl	801786c <siprintf>

		}

		return strlen(pcInsert);
 8002c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c22:	f7fd fadf 	bl	80001e4 <strlen>
 8002c26:	4603      	mov	r3, r0
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	e001      	b.n	8002c30 <ssi_handler+0x1cc4>
		break;
	default:
		break;
 8002c2c:	bf00      	nop
	}
	return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3734      	adds	r7, #52	; 0x34
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	0801c1e8 	.word	0x0801c1e8
 8002c3c:	0801be84 	.word	0x0801be84
 8002c40:	200007be 	.word	0x200007be
 8002c44:	20001750 	.word	0x20001750
 8002c48:	0801c1e0 	.word	0x0801c1e0
 8002c4c:	0801c1ec 	.word	0x0801c1ec
 8002c50:	0801c200 	.word	0x0801c200

08002c54 <CGIForm_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d120      	bne.n	8002caa <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e019      	b.n	8002ca2 <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0) // if the "jsongo" string is found
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <CGIForm_Handler+0x60>)
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd faa8 	bl	80001d0 <strcmp>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f014 f818 	bl	8016cc6 <atoi>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <CGIForm_Handler+0x64>)
 8002c9a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	dbe1      	blt.n	8002c6e <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; //
 8002caa:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <CGIForm_Handler+0x68>)
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0801c284 	.word	0x0801c284
 8002cb8:	200007c8 	.word	0x200007c8
 8002cbc:	0801c218 	.word	0x0801c218

08002cc0 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d005      	beq.n	8002ce0 <CGIForm_Handler1+0x20>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d002      	beq.n	8002ce0 <CGIForm_Handler1+0x20>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d137      	bne.n	8002d50 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e030      	b.n	8002d48 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the "id" string is found
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4921      	ldr	r1, [pc, #132]	; (8002d78 <CGIForm_Handler1+0xb8>)
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fa6c 	bl	80001d0 <strcmp>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f013 ffdc 	bl	8016cc6 <atoi>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <CGIForm_Handler1+0xbc>)
 8002d12:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the "tab" string is found
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4918      	ldr	r1, [pc, #96]	; (8002d80 <CGIForm_Handler1+0xc0>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fa55 	bl	80001d0 <strcmp>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f013 ffc5 	bl	8016cc6 <atoi>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <CGIForm_Handler1+0xc4>)
 8002d40:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3301      	adds	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dbca      	blt.n	8002ce6 <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; //
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <CGIForm_Handler1+0xc8>)
 8002d58:	e00a      	b.n	8002d70 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d101      	bne.n	8002d64 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <CGIForm_Handler1+0xcc>)
 8002d62:	e005      	b.n	8002d70 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d101      	bne.n	8002d6e <CGIForm_Handler1+0xae>
		return "/form3.shtml";
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <CGIForm_Handler1+0xd0>)
 8002d6c:	e000      	b.n	8002d70 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <CGIForm_Handler1+0xd4>)
	}
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	0801b654 	.word	0x0801b654
 8002d7c:	200007cc 	.word	0x200007cc
 8002d80:	0801c28c 	.word	0x0801c28c
 8002d84:	200007d0 	.word	0x200007d0
 8002d88:	0801c224 	.word	0x0801c224
 8002d8c:	0801c234 	.word	0x0801c234
 8002d90:	0801c244 	.word	0x0801c244
 8002d94:	0801c290 	.word	0x0801c290

08002d98 <CGIForm_Handler2>:

const char* CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 4) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d140      	bne.n	8002e2e <CGIForm_Handler2+0x96>
		for (int i = 0; i < iNumParams; i++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e039      	b.n	8002e26 <CGIForm_Handler2+0x8e>
			if (strcmp(pcParam[i], "del") == 0)  // if the "del" string is found
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	491e      	ldr	r1, [pc, #120]	; (8002e38 <CGIForm_Handler2+0xa0>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa06 	bl	80001d0 <strcmp>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d12a      	bne.n	8002e20 <CGIForm_Handler2+0x88>
					{
				id = atoi(pcValue[i]);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f013 ff76 	bl	8016cc6 <atoi>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <CGIForm_Handler2+0xa4>)
 8002dde:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <CGIForm_Handler2+0xa4>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4916      	ldr	r1, [pc, #88]	; (8002e40 <CGIForm_Handler2+0xa8>)
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3304      	adds	r3, #4
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <CGIForm_Handler2+0xa4>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4911      	ldr	r1, [pc, #68]	; (8002e40 <CGIForm_Handler2+0xa8>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <CGIForm_Handler2+0xa4>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	490c      	ldr	r1, [pc, #48]	; (8002e40 <CGIForm_Handler2+0xa8>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	dbc1      	blt.n	8002db2 <CGIForm_Handler2+0x1a>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <CGIForm_Handler2+0xac>)
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0801c29c 	.word	0x0801c29c
 8002e3c:	200007cc 	.word	0x200007cc
 8002e40:	200026bc 	.word	0x200026bc
 8002e44:	0801c254 	.word	0x0801c254

08002e48 <CGIForm_Handler3>:

const char* CGIForm_Handler3(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b092      	sub	sp, #72	; 0x48
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
	if (iIndex == 5) // для странички settings
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	f040 832c 	bne.w	80034b6 <CGIForm_Handler3+0x66e>
			//printf("GET CGI_Handler 5 \n");
			{
		for (int i = 0; i < iNumParams; i++) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
 8002e62:	e323      	b.n	80034ac <CGIForm_Handler3+0x664>
			if (strcmp(pcParam[i], "tlon_de") == 0) // if the "tlat_de" string is found
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4974      	ldr	r1, [pc, #464]	; (8003040 <CGIForm_Handler3+0x1f8>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd f9ad 	bl	80001d0 <strcmp>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d115      	bne.n	8002ea8 <CGIForm_Handler3+0x60>
					{
				//memset(&(Settings.lon_de), 0, sizeof(Settings.lon_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lon_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002e7c:	4971      	ldr	r1, [pc, #452]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9c1 2300 	strd	r2, r3, [r1]
				Settings.lon_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f013 ff13 	bl	8016cc0 <atof>
 8002e9a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e9e:	eef0 7a60 	vmov.f32	s15, s1
 8002ea2:	4b68      	ldr	r3, [pc, #416]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002ea4:	ed83 7b00 	vstr	d7, [r3]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Longitude - %.6F\n\r",Settings.lon_de);
			}
			if (strcmp(pcParam[i], "tlat_de") == 0) // if the "tlat_de" string is found
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4965      	ldr	r1, [pc, #404]	; (8003048 <CGIForm_Handler3+0x200>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd f98b 	bl	80001d0 <strcmp>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d115      	bne.n	8002eec <CGIForm_Handler3+0xa4>
					{
				//memset(&(Settings.lat_de), 0, sizeof(Settings.lat_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lat_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002ec0:	4960      	ldr	r1, [pc, #384]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Settings.lat_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f013 fef1 	bl	8016cc0 <atof>
 8002ede:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee2:	eef0 7a60 	vmov.f32	s15, s1
 8002ee6:	4b57      	ldr	r3, [pc, #348]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002ee8:	ed83 7b02 	vstr	d7, [r3, #8]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Latitude - %.6F\n\r",Settings.lat_de);
			}
			if (strcmp(pcParam[i], "mqtt_prt") == 0)  // if the string is found
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4955      	ldr	r1, [pc, #340]	; (800304c <CGIForm_Handler3+0x204>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd f969 	bl	80001d0 <strcmp>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <CGIForm_Handler3+0xd8>
					{
				Settings.mqtt_prt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002f04:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
				Settings.mqtt_prt = atoi(pcValue[i]); // Сохраняем значение в переменную.
 8002f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f013 fed6 	bl	8016cc6 <atoi>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002f1e:	6113      	str	r3, [r2, #16]
			}
			if (strcmp(pcParam[i], "mqtt_clt") == 0)  // if the string is found
 8002f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4949      	ldr	r1, [pc, #292]	; (8003050 <CGIForm_Handler3+0x208>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd f94f 	bl	80001d0 <strcmp>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <CGIForm_Handler3+0xf6>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				Settings.mqtt_clt[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	751a      	strb	r2, [r3, #20]
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
				//Settings.mqtt_clt = pcValue[i]; // Сохраняем значение в переменную.
				//strcpy(Settings.mqtt_clt, pcValue[i]);
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
			}
			if (strcmp(pcParam[i], "mqtt_usr") == 0)  // if the string is found
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4942      	ldr	r1, [pc, #264]	; (8003054 <CGIForm_Handler3+0x20c>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f940 	bl	80001d0 <strcmp>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <CGIForm_Handler3+0x126>
					{
				Settings.mqtt_usr[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	779a      	strb	r2, [r3, #30]
				//Settings.mqtt_usr[10] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_usr, pcValue[i]);
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	483b      	ldr	r0, [pc, #236]	; (8003058 <CGIForm_Handler3+0x210>)
 8002f6a:	f014 fcbb 	bl	80178e4 <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_pswd") == 0)  // if the string is found
 8002f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4938      	ldr	r1, [pc, #224]	; (800305c <CGIForm_Handler3+0x214>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f928 	bl	80001d0 <strcmp>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <CGIForm_Handler3+0x158>
					{
				Settings.mqt_pswd[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				//Settings.mqt_pswd[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_pswd, pcValue[i]);
 8002f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4831      	ldr	r0, [pc, #196]	; (8003060 <CGIForm_Handler3+0x218>)
 8002f9c:	f014 fca2 	bl	80178e4 <strcpy>
			}
			if (strcmp(pcParam[i], "mqtt_tpc") == 0)  // if the string is found
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	492e      	ldr	r1, [pc, #184]	; (8003064 <CGIForm_Handler3+0x21c>)
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd f90f 	bl	80001d0 <strcmp>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10c      	bne.n	8002fd2 <CGIForm_Handler3+0x18a>
					{
				Settings.mqtt_tpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				//Settings.mqtt_tpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_tpc, pcValue[i]);
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4826      	ldr	r0, [pc, #152]	; (8003068 <CGIForm_Handler3+0x220>)
 8002fce:	f014 fc89 	bl	80178e4 <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_ftpc") == 0)  // if the string is found
 8002fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4923      	ldr	r1, [pc, #140]	; (800306c <CGIForm_Handler3+0x224>)
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd f8f6 	bl	80001d0 <strcmp>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <CGIForm_Handler3+0x1bc>
					{
				Settings.mqt_ftpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <CGIForm_Handler3+0x1fc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				//Settings.mqt_ftpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_ftpc, pcValue[i]);
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481c      	ldr	r0, [pc, #112]	; (8003070 <CGIForm_Handler3+0x228>)
 8003000:	f014 fc70 	bl	80178e4 <strcpy>
			}
			if (strcmp(pcParam[i], "ip_addr") == 0)  // if the string is found
 8003004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4919      	ldr	r1, [pc, #100]	; (8003074 <CGIForm_Handler3+0x22c>)
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd f8dd 	bl	80001d0 <strcmp>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 809b 	bne.w	8003154 <CGIForm_Handler3+0x30c>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				char delim[] = ".";
 800301e:	232e      	movs	r3, #46	; 0x2e
 8003020:	843b      	strh	r3, [r7, #32]
				int k = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
				char *ptr = strtok(pcValue[i], delim);
 8003026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4413      	add	r3, r2
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f107 0220 	add.w	r2, r7, #32
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f015 facc 	bl	80185d4 <strtok>
 800303c:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 800303e:	e086      	b.n	800314e <CGIForm_Handler3+0x306>
 8003040:	0801b52c 	.word	0x0801b52c
 8003044:	20000490 	.word	0x20000490
 8003048:	0801b534 	.word	0x0801b534
 800304c:	0801b53c 	.word	0x0801b53c
 8003050:	0801b548 	.word	0x0801b548
 8003054:	0801b554 	.word	0x0801b554
 8003058:	200004ae 	.word	0x200004ae
 800305c:	0801b560 	.word	0x0801b560
 8003060:	200004b8 	.word	0x200004b8
 8003064:	0801b56c 	.word	0x0801b56c
 8003068:	200004c7 	.word	0x200004c7
 800306c:	0801b578 	.word	0x0801b578
 8003070:	200004d6 	.word	0x200004d6
 8003074:	0801c2a0 	.word	0x0801c2a0
					if (k == 0) {
 8003078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <CGIForm_Handler3+0x262>
						//printf("k0 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr0 = 0;// Очищаем элимент структуры перед перед записью новых данных.
 800307e:	4b8a      	ldr	r3, [pc, #552]	; (80032a8 <CGIForm_Handler3+0x460>)
 8003080:	2200      	movs	r2, #0
 8003082:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						Settings.ip_addr0 = atoi(ptr);	// Сохраняю в переменную
 8003086:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003088:	f013 fe1d 	bl	8016cc6 <atoi>
 800308c:	4603      	mov	r3, r0
 800308e:	b21a      	sxth	r2, r3
 8003090:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <CGIForm_Handler3+0x460>)
 8003092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						//printf("Settings.ip_addr0 = %d\n", Settings.ip_addr0);
						ptr = strtok(NULL, delim);
 8003096:	f107 0320 	add.w	r3, r7, #32
 800309a:	4619      	mov	r1, r3
 800309c:	2000      	movs	r0, #0
 800309e:	f015 fa99 	bl	80185d4 <strtok>
 80030a2:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	3301      	adds	r3, #1
 80030a8:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 1) {
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d115      	bne.n	80030dc <CGIForm_Handler3+0x294>
						//printf("k1 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80030b0:	4b7d      	ldr	r3, [pc, #500]	; (80032a8 <CGIForm_Handler3+0x460>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						Settings.ip_addr1 = atoi(ptr); // Сохраняю в переменную
 80030b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030ba:	f013 fe04 	bl	8016cc6 <atoi>
 80030be:	4603      	mov	r3, r0
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	4b79      	ldr	r3, [pc, #484]	; (80032a8 <CGIForm_Handler3+0x460>)
 80030c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						//printf("Settings.ip_addr1 = %d\n", Settings.ip_addr1);
						ptr = strtok(NULL, delim);
 80030c8:	f107 0320 	add.w	r3, r7, #32
 80030cc:	4619      	mov	r1, r3
 80030ce:	2000      	movs	r0, #0
 80030d0:	f015 fa80 	bl	80185d4 <strtok>
 80030d4:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 80030d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d8:	3301      	adds	r3, #1
 80030da:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 2) {
 80030dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d115      	bne.n	800310e <CGIForm_Handler3+0x2c6>
						//printf("k2 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80030e2:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <CGIForm_Handler3+0x460>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						Settings.ip_addr2 = atoi(ptr); // Сохраняю в переменную
 80030ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030ec:	f013 fdeb 	bl	8016cc6 <atoi>
 80030f0:	4603      	mov	r3, r0
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <CGIForm_Handler3+0x460>)
 80030f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						//printf("Settings.ip_addr2 = %d\n", Settings.ip_addr2);
						ptr = strtok(NULL, delim);
 80030fa:	f107 0320 	add.w	r3, r7, #32
 80030fe:	4619      	mov	r1, r3
 8003100:	2000      	movs	r0, #0
 8003102:	f015 fa67 	bl	80185d4 <strtok>
 8003106:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	3301      	adds	r3, #1
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 3) {
 800310e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003110:	2b03      	cmp	r3, #3
 8003112:	d115      	bne.n	8003140 <CGIForm_Handler3+0x2f8>
						//printf("k3 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003114:	4b64      	ldr	r3, [pc, #400]	; (80032a8 <CGIForm_Handler3+0x460>)
 8003116:	2200      	movs	r2, #0
 8003118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						Settings.ip_addr3 = atoi(ptr); // Сохраняю в переменную
 800311c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800311e:	f013 fdd2 	bl	8016cc6 <atoi>
 8003122:	4603      	mov	r3, r0
 8003124:	b21a      	sxth	r2, r3
 8003126:	4b60      	ldr	r3, [pc, #384]	; (80032a8 <CGIForm_Handler3+0x460>)
 8003128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						//printf("Settings.ip_addr3 = %d\n", Settings.ip_addr3);
						ptr = strtok(NULL, delim);
 800312c:	f107 0320 	add.w	r3, r7, #32
 8003130:	4619      	mov	r1, r3
 8003132:	2000      	movs	r0, #0
 8003134:	f015 fa4e 	bl	80185d4 <strtok>
 8003138:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	3301      	adds	r3, #1
 800313e:	643b      	str	r3, [r7, #64]	; 0x40
					}
					ptr = strtok(NULL, delim);
 8003140:	f107 0320 	add.w	r3, r7, #32
 8003144:	4619      	mov	r1, r3
 8003146:	2000      	movs	r0, #0
 8003148:	f015 fa44 	bl	80185d4 <strtok>
 800314c:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d191      	bne.n	8003078 <CGIForm_Handler3+0x230>
				}
			}
			if (strcmp(pcParam[i], "sb_mask") == 0)  // if the string is found
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4953      	ldr	r1, [pc, #332]	; (80032ac <CGIForm_Handler3+0x464>)
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f835 	bl	80001d0 <strcmp>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d17e      	bne.n	800326a <CGIForm_Handler3+0x422>
					{
				char delim[] = ".";
 800316c:	232e      	movs	r3, #46	; 0x2e
 800316e:	83bb      	strh	r3, [r7, #28]
				int k = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
				char *ptr = strtok(pcValue[i], delim);
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f107 021c 	add.w	r2, r7, #28
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f015 fa25 	bl	80185d4 <strtok>
 800318a:	6378      	str	r0, [r7, #52]	; 0x34

				while (ptr != NULL) {
 800318c:	e06a      	b.n	8003264 <CGIForm_Handler3+0x41c>
					if (k == 0) {
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	d115      	bne.n	80031c0 <CGIForm_Handler3+0x378>
						Settings.sb_mask0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003194:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <CGIForm_Handler3+0x460>)
 8003196:	2200      	movs	r2, #0
 8003198:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						Settings.sb_mask0 = atoi(ptr);  // Сохраняю в переменную
 800319c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800319e:	f013 fd92 	bl	8016cc6 <atoi>
 80031a2:	4603      	mov	r3, r0
 80031a4:	b21a      	sxth	r2, r3
 80031a6:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <CGIForm_Handler3+0x460>)
 80031a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						ptr = strtok(NULL, delim);
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	2000      	movs	r0, #0
 80031b4:	f015 fa0e 	bl	80185d4 <strtok>
 80031b8:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	3301      	adds	r3, #1
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 1) {
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <CGIForm_Handler3+0x3aa>
						Settings.sb_mask1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <CGIForm_Handler3+0x460>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						Settings.sb_mask1 = atoi(ptr); // Сохраняю в переменную
 80031ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031d0:	f013 fd79 	bl	8016cc6 <atoi>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <CGIForm_Handler3+0x460>)
 80031da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						ptr = strtok(NULL, delim);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4619      	mov	r1, r3
 80031e4:	2000      	movs	r0, #0
 80031e6:	f015 f9f5 	bl	80185d4 <strtok>
 80031ea:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	3301      	adds	r3, #1
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 2) {
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d115      	bne.n	8003224 <CGIForm_Handler3+0x3dc>
						Settings.sb_mask2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <CGIForm_Handler3+0x460>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						Settings.sb_mask2 = atoi(ptr); // Сохраняю в переменную
 8003200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003202:	f013 fd60 	bl	8016cc6 <atoi>
 8003206:	4603      	mov	r3, r0
 8003208:	b21a      	sxth	r2, r3
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <CGIForm_Handler3+0x460>)
 800320c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						ptr = strtok(NULL, delim);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	2000      	movs	r0, #0
 8003218:	f015 f9dc 	bl	80185d4 <strtok>
 800321c:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	3301      	adds	r3, #1
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 3) {
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	2b03      	cmp	r3, #3
 8003228:	d115      	bne.n	8003256 <CGIForm_Handler3+0x40e>
						Settings.sb_mask3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <CGIForm_Handler3+0x460>)
 800322c:	2200      	movs	r2, #0
 800322e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						Settings.sb_mask3 = atoi(ptr); // Сохраняю в переменную
 8003232:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003234:	f013 fd47 	bl	8016cc6 <atoi>
 8003238:	4603      	mov	r3, r0
 800323a:	b21a      	sxth	r2, r3
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <CGIForm_Handler3+0x460>)
 800323e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						ptr = strtok(NULL, delim);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	2000      	movs	r0, #0
 800324a:	f015 f9c3 	bl	80185d4 <strtok>
 800324e:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	3301      	adds	r3, #1
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					ptr = strtok(NULL, delim);
 8003256:	f107 031c 	add.w	r3, r7, #28
 800325a:	4619      	mov	r1, r3
 800325c:	2000      	movs	r0, #0
 800325e:	f015 f9b9 	bl	80185d4 <strtok>
 8003262:	6378      	str	r0, [r7, #52]	; 0x34
				while (ptr != NULL) {
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	d191      	bne.n	800318e <CGIForm_Handler3+0x346>
				}
			}
			if (strcmp(pcParam[i], "gateway") == 0)  // if the string is found
 800326a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	490e      	ldr	r1, [pc, #56]	; (80032b0 <CGIForm_Handler3+0x468>)
 8003276:	4618      	mov	r0, r3
 8003278:	f7fc ffaa 	bl	80001d0 <strcmp>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 8086 	bne.w	8003390 <CGIForm_Handler3+0x548>
					{
				char delim[] = ".";
 8003284:	232e      	movs	r3, #46	; 0x2e
 8003286:	833b      	strh	r3, [r7, #24]
				int k = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
				char *ptr = strtok(pcValue[i], delim);
 800328c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	4413      	add	r3, r2
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f107 0218 	add.w	r2, r7, #24
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f015 f999 	bl	80185d4 <strtok>
 80032a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 80032a4:	e071      	b.n	800338a <CGIForm_Handler3+0x542>
 80032a6:	bf00      	nop
 80032a8:	20000490 	.word	0x20000490
 80032ac:	0801c2a8 	.word	0x0801c2a8
 80032b0:	0801c2b0 	.word	0x0801c2b0
					if (k == 0) {
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d115      	bne.n	80032e6 <CGIForm_Handler3+0x49e>
						Settings.gateway0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80032ba:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <CGIForm_Handler3+0x678>)
 80032bc:	2200      	movs	r2, #0
 80032be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						Settings.gateway0 = atoi(ptr);  // Сохраняю в переменную
 80032c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c4:	f013 fcff 	bl	8016cc6 <atoi>
 80032c8:	4603      	mov	r3, r0
 80032ca:	b21a      	sxth	r2, r3
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <CGIForm_Handler3+0x678>)
 80032ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						ptr = strtok(NULL, delim);
 80032d2:	f107 0318 	add.w	r3, r7, #24
 80032d6:	4619      	mov	r1, r3
 80032d8:	2000      	movs	r0, #0
 80032da:	f015 f97b 	bl	80185d4 <strtok>
 80032de:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	3301      	adds	r3, #1
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 1) {
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d115      	bne.n	8003318 <CGIForm_Handler3+0x4d0>
						Settings.gateway1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80032ec:	4b74      	ldr	r3, [pc, #464]	; (80034c0 <CGIForm_Handler3+0x678>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						Settings.gateway1 = atoi(ptr); // Сохраняю в переменную
 80032f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f6:	f013 fce6 	bl	8016cc6 <atoi>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b21a      	sxth	r2, r3
 80032fe:	4b70      	ldr	r3, [pc, #448]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						ptr = strtok(NULL, delim);
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	4619      	mov	r1, r3
 800330a:	2000      	movs	r0, #0
 800330c:	f015 f962 	bl	80185d4 <strtok>
 8003310:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	3301      	adds	r3, #1
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 2) {
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2b02      	cmp	r3, #2
 800331c:	d115      	bne.n	800334a <CGIForm_Handler3+0x502>
						Settings.gateway2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800331e:	4b68      	ldr	r3, [pc, #416]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003320:	2200      	movs	r2, #0
 8003322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						Settings.gateway2 = atoi(ptr); // Сохраняю в переменную
 8003326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003328:	f013 fccd 	bl	8016cc6 <atoi>
 800332c:	4603      	mov	r3, r0
 800332e:	b21a      	sxth	r2, r3
 8003330:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						ptr = strtok(NULL, delim);
 8003336:	f107 0318 	add.w	r3, r7, #24
 800333a:	4619      	mov	r1, r3
 800333c:	2000      	movs	r0, #0
 800333e:	f015 f949 	bl	80185d4 <strtok>
 8003342:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	3301      	adds	r3, #1
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 3) {
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b03      	cmp	r3, #3
 800334e:	d115      	bne.n	800337c <CGIForm_Handler3+0x534>
						Settings.gateway3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003352:	2200      	movs	r2, #0
 8003354:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						Settings.gateway3 = atoi(ptr); // Сохраняю в переменную
 8003358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800335a:	f013 fcb4 	bl	8016cc6 <atoi>
 800335e:	4603      	mov	r3, r0
 8003360:	b21a      	sxth	r2, r3
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003364:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						ptr = strtok(NULL, delim);
 8003368:	f107 0318 	add.w	r3, r7, #24
 800336c:	4619      	mov	r1, r3
 800336e:	2000      	movs	r0, #0
 8003370:	f015 f930 	bl	80185d4 <strtok>
 8003374:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	3301      	adds	r3, #1
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
					}
					ptr = strtok(NULL, delim);
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	4619      	mov	r1, r3
 8003382:	2000      	movs	r0, #0
 8003384:	f015 f926 	bl	80185d4 <strtok>
 8003388:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	2b00      	cmp	r3, #0
 800338e:	d191      	bne.n	80032b4 <CGIForm_Handler3+0x46c>
				}
			}
			if (strcmp(pcParam[i], "mqt_hst") == 0)  // if the string is found
 8003390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	494a      	ldr	r1, [pc, #296]	; (80034c4 <CGIForm_Handler3+0x67c>)
 800339c:	4618      	mov	r0, r3
 800339e:	f7fc ff17 	bl	80001d0 <strcmp>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d17e      	bne.n	80034a6 <CGIForm_Handler3+0x65e>
					{
				char delim[] = ".";
 80033a8:	232e      	movs	r3, #46	; 0x2e
 80033aa:	82bb      	strh	r3, [r7, #20]
				int k = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
				char *ptr = strtok(pcValue[i], delim);
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f107 0214 	add.w	r2, r7, #20
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f015 f907 	bl	80185d4 <strtok>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 80033c8:	e06a      	b.n	80034a0 <CGIForm_Handler3+0x658>
					if (k == 0) {
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <CGIForm_Handler3+0x5b4>
						Settings.mqt_hst0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <CGIForm_Handler3+0x678>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						Settings.mqt_hst0 = atoi(ptr);  // Сохраняю в переменную
 80033d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033da:	f013 fc74 	bl	8016cc6 <atoi>
 80033de:	4603      	mov	r3, r0
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <CGIForm_Handler3+0x678>)
 80033e4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						ptr = strtok(NULL, delim);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	2000      	movs	r0, #0
 80033f0:	f015 f8f0 	bl	80185d4 <strtok>
 80033f4:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	3301      	adds	r3, #1
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 1) {
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d115      	bne.n	800342e <CGIForm_Handler3+0x5e6>
						Settings.mqt_hst1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003404:	2200      	movs	r2, #0
 8003406:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						Settings.mqt_hst1 = atoi(ptr); // Сохраняю в переменную
 800340a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800340c:	f013 fc5b 	bl	8016cc6 <atoi>
 8003410:	4603      	mov	r3, r0
 8003412:	b21a      	sxth	r2, r3
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003416:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						ptr = strtok(NULL, delim);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	2000      	movs	r0, #0
 8003422:	f015 f8d7 	bl	80185d4 <strtok>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	3301      	adds	r3, #1
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 2) {
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2b02      	cmp	r3, #2
 8003432:	d115      	bne.n	8003460 <CGIForm_Handler3+0x618>
						Settings.mqt_hst2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003436:	2200      	movs	r2, #0
 8003438:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						Settings.mqt_hst2 = atoi(ptr); // Сохраняю в переменную
 800343c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800343e:	f013 fc42 	bl	8016cc6 <atoi>
 8003442:	4603      	mov	r3, r0
 8003444:	b21a      	sxth	r2, r3
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003448:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						ptr = strtok(NULL, delim);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	2000      	movs	r0, #0
 8003454:	f015 f8be 	bl	80185d4 <strtok>
 8003458:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	3301      	adds	r3, #1
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 3) {
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	d115      	bne.n	8003492 <CGIForm_Handler3+0x64a>
						Settings.mqt_hst3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <CGIForm_Handler3+0x678>)
 8003468:	2200      	movs	r2, #0
 800346a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						Settings.mqt_hst3 = atoi(ptr); // Сохраняю в переменную
 800346e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003470:	f013 fc29 	bl	8016cc6 <atoi>
 8003474:	4603      	mov	r3, r0
 8003476:	b21a      	sxth	r2, r3
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <CGIForm_Handler3+0x678>)
 800347a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						ptr = strtok(NULL, delim);
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	2000      	movs	r0, #0
 8003486:	f015 f8a5 	bl	80185d4 <strtok>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	3301      	adds	r3, #1
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					ptr = strtok(NULL, delim);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	2000      	movs	r0, #0
 800349a:	f015 f89b 	bl	80185d4 <strtok>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d191      	bne.n	80033ca <CGIForm_Handler3+0x582>
		for (int i = 0; i < iNumParams; i++) {
 80034a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a8:	3301      	adds	r3, #1
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
 80034ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f6ff acd7 	blt.w	8002e64 <CGIForm_Handler3+0x1c>
				}
			}
		}
	}
	return "/settings.shtml"; //
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <CGIForm_Handler3+0x680>)
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3748      	adds	r7, #72	; 0x48
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000490 	.word	0x20000490
 80034c4:	0801c2b8 	.word	0x0801c2b8
 80034c8:	0801c260 	.word	0x0801c260

080034cc <CGIForm_Handler4>:

const char* CGIForm_Handler4(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) // Для странички Edit Timers
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
	//printf("iIndex %d\n", iIndex);
	if (iIndex == 6) // Для странички Edit Timers
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	f040 835b 	bne.w	8003b98 <CGIForm_Handler4+0x6cc>
			//printf("GET CGI_Handler 6 \n");
			{
		//printf("iNumParams %d\n",iNumParams);
		for (int i = 0; i < iNumParams; i++) {
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e352      	b.n	8003b8e <CGIForm_Handler4+0x6c2>

			//printf("tmp_id %d\n",tmp_id);
			//printf("pcParam[i] = %s pcValue[i] %s\n", pcParam[i], pcValue[i]); // смотрим, что прилитело.
			// От формы GET запрос1
			if (strcmp(pcParam[i], "id_id") == 0) // if the "pins" string is found
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	49bb      	ldr	r1, [pc, #748]	; (80037e0 <CGIForm_Handler4+0x314>)
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fc fe6b 	bl	80001d0 <strcmp>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d12d      	bne.n	800355c <CGIForm_Handler4+0x90>
					{
				tmp_id = atoi(pcValue[i]);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	4413      	add	r3, r2
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f013 fbdb 	bl	8016cc6 <atoi>
 8003510:	4603      	mov	r3, r0
 8003512:	b21a      	sxth	r2, r3
 8003514:	4bb3      	ldr	r3, [pc, #716]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003516:	801a      	strh	r2, [r3, #0]
				//printf("tmp_id = %d\n", tmp_id);
				Tt[tmp_id].id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003518:	4bb2      	ldr	r3, [pc, #712]	; (80037e4 <CGIForm_Handler4+0x318>)
 800351a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351e:	4619      	mov	r1, r3
 8003520:	4ab1      	ldr	r2, [pc, #708]	; (80037e8 <CGIForm_Handler4+0x31c>)
 8003522:	460b      	mov	r3, r1
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	440b      	add	r3, r1
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	2200      	movs	r2, #0
 800352e:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].id = atoi(pcValue[i]); // Сохраняю в переменную
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	4413      	add	r3, r2
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f013 fbc3 	bl	8016cc6 <atoi>
 8003540:	4602      	mov	r2, r0
 8003542:	4ba8      	ldr	r3, [pc, #672]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003548:	4619      	mov	r1, r3
 800354a:	b210      	sxth	r0, r2
 800354c:	4aa6      	ldr	r2, [pc, #664]	; (80037e8 <CGIForm_Handler4+0x31c>)
 800354e:	460b      	mov	r3, r1
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	4602      	mov	r2, r0
 800355a:	801a      	strh	r2, [r3, #0]
				//printf("ID = %d\n", Tt[tmp_id].id);
			}
			// От формы GET запрос2
			if (strcmp(pcParam[i], "id") == 0)  // if the "id" string is found
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	49a1      	ldr	r1, [pc, #644]	; (80037ec <CGIForm_Handler4+0x320>)
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc fe31 	bl	80001d0 <strcmp>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11a      	bne.n	80035aa <CGIForm_Handler4+0xde>
					{
				tmp_id = atoi(pcValue[i]);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f013 fba1 	bl	8016cc6 <atoi>
 8003584:	4603      	mov	r3, r0
 8003586:	b21a      	sxth	r2, r3
 8003588:	4b96      	ldr	r3, [pc, #600]	; (80037e4 <CGIForm_Handler4+0x318>)
 800358a:	801a      	strh	r2, [r3, #0]
				t_id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800358c:	4b98      	ldr	r3, [pc, #608]	; (80037f0 <CGIForm_Handler4+0x324>)
 800358e:	2200      	movs	r2, #0
 8003590:	801a      	strh	r2, [r3, #0]
				t_id = atoi(pcValue[i]); // Сохраняю в переменную
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	4413      	add	r3, r2
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f013 fb92 	bl	8016cc6 <atoi>
 80035a2:	4603      	mov	r3, r0
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	4b92      	ldr	r3, [pc, #584]	; (80037f0 <CGIForm_Handler4+0x324>)
 80035a8:	801a      	strh	r2, [r3, #0]
				//printf("id ID = %d\n", Tt[tmp_id].id);
				//printf("id = %d\n", t_id);
			}
			if (strcmp(pcParam[i], "s_dt") == 0 && tmp_id != 0) // if the "s_dt" string is found
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	498f      	ldr	r1, [pc, #572]	; (80037f4 <CGIForm_Handler4+0x328>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc fe0a 	bl	80001d0 <strcmp>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d126      	bne.n	8003610 <CGIForm_Handler4+0x144>
 80035c2:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <CGIForm_Handler4+0x318>)
 80035c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d021      	beq.n	8003610 <CGIForm_Handler4+0x144>
					{
				Tt[tmp_id].s_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80035cc:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <CGIForm_Handler4+0x318>)
 80035ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4a84      	ldr	r2, [pc, #528]	; (80037e8 <CGIForm_Handler4+0x31c>)
 80035d6:	460b      	mov	r3, r1
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	440b      	add	r3, r1
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	330c      	adds	r3, #12
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].s_dt = atoi(pcValue[i]); // Сохраняю в переменную
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <CGIForm_Handler4+0x318>)
 80035f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80035f6:	4614      	mov	r4, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f013 fb64 	bl	8016cc6 <atoi>
 80035fe:	4602      	mov	r2, r0
 8003600:	4979      	ldr	r1, [pc, #484]	; (80037e8 <CGIForm_Handler4+0x31c>)
 8003602:	4623      	mov	r3, r4
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4423      	add	r3, r4
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	330c      	adds	r3, #12
 800360e:	601a      	str	r2, [r3, #0]
				//printf("s_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].s_dt = %d\n", Tt[tmp_id].s_dt);
			}
			if (strcmp(pcParam[i], "e_dt") == 0 && tmp_id != 0) // if the "e_dt" string is found
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4977      	ldr	r1, [pc, #476]	; (80037f8 <CGIForm_Handler4+0x32c>)
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc fdd7 	bl	80001d0 <strcmp>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d126      	bne.n	8003676 <CGIForm_Handler4+0x1aa>
 8003628:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <CGIForm_Handler4+0x318>)
 800362a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d021      	beq.n	8003676 <CGIForm_Handler4+0x1aa>
					{
				Tt[tmp_id].e_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003632:	4b6c      	ldr	r3, [pc, #432]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003638:	4619      	mov	r1, r3
 800363a:	4a6b      	ldr	r2, [pc, #428]	; (80037e8 <CGIForm_Handler4+0x31c>)
 800363c:	460b      	mov	r3, r1
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	3310      	adds	r3, #16
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].e_dt = atoi(pcValue[i]); // Сохраняю в переменную
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4413      	add	r3, r2
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003658:	f9b2 2000 	ldrsh.w	r2, [r2]
 800365c:	4614      	mov	r4, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f013 fb31 	bl	8016cc6 <atoi>
 8003664:	4602      	mov	r2, r0
 8003666:	4960      	ldr	r1, [pc, #384]	; (80037e8 <CGIForm_Handler4+0x31c>)
 8003668:	4623      	mov	r3, r4
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4423      	add	r3, r4
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3310      	adds	r3, #16
 8003674:	601a      	str	r2, [r3, #0]
				//printf("e_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].e_dt = %d\n", Tt[tmp_id].e_dt);
			}
			if (strcmp(pcParam[i], "pin_pin") == 0 && tmp_id != 0) // Переход от таблиц к форме
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	495e      	ldr	r1, [pc, #376]	; (80037fc <CGIForm_Handler4+0x330>)
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc fda4 	bl	80001d0 <strcmp>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d124      	bne.n	80036d8 <CGIForm_Handler4+0x20c>
 800368e:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01f      	beq.n	80036d8 <CGIForm_Handler4+0x20c>
					{
				Tt[tmp_id].pins[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8003698:	4b52      	ldr	r3, [pc, #328]	; (80037e4 <CGIForm_Handler4+0x318>)
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	4619      	mov	r1, r3
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <CGIForm_Handler4+0x31c>)
 80036a2:	460b      	mov	r3, r1
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	440b      	add	r3, r1
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3302      	adds	r3, #2
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
				strcpy(Tt[tmp_id].pins, pcValue[i]); // Сохраняю в переменную
 80036b2:	4b4c      	ldr	r3, [pc, #304]	; (80037e4 <CGIForm_Handler4+0x318>)
 80036b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a49      	ldr	r2, [pc, #292]	; (80037e8 <CGIForm_Handler4+0x31c>)
 80036c4:	4413      	add	r3, r2
 80036c6:	1c98      	adds	r0, r3, #2
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f014 f906 	bl	80178e4 <strcpy>
				//printf("pin_pin ID = %d\n", Tt[tmp_id].id);
				//printf("PINS = %s\n", Tt[tmp_id].pins);
			}
			// От таблицы к форме GET запрос

			if (strcmp(pcParam[i], "pin") == 0) {
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4947      	ldr	r1, [pc, #284]	; (8003800 <CGIForm_Handler4+0x334>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fd73 	bl	80001d0 <strcmp>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <CGIForm_Handler4+0x240>
				//pins[0] = 0; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&pins, '\0', sizeof(pins));
 80036f0:	2205      	movs	r2, #5
 80036f2:	2100      	movs	r1, #0
 80036f4:	4843      	ldr	r0, [pc, #268]	; (8003804 <CGIForm_Handler4+0x338>)
 80036f6:	f013 fb45 	bl	8016d84 <memset>
				strcpy(pins, pcValue[i]); // Сохраняю в переменную
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4413      	add	r3, r2
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	483f      	ldr	r0, [pc, #252]	; (8003804 <CGIForm_Handler4+0x338>)
 8003708:	f014 f8ec 	bl	80178e4 <strcpy>
				//printf("pin ID = %d\n", Tt[tmp_id].id);
				//printf("pin = %s\n", pins);
			}
			if (strcmp(pcParam[i], "h_repeat") == 0 && tmp_id != 0) // if the "t_repeat" string is found
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	493c      	ldr	r1, [pc, #240]	; (8003808 <CGIForm_Handler4+0x33c>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc fd59 	bl	80001d0 <strcmp>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d126      	bne.n	8003772 <CGIForm_Handler4+0x2a6>
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d021      	beq.n	8003772 <CGIForm_Handler4+0x2a6>
					{
				Tt[tmp_id].t_repeat = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003734:	4619      	mov	r1, r3
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <CGIForm_Handler4+0x31c>)
 8003738:	460b      	mov	r3, r1
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	440b      	add	r3, r1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	3314      	adds	r3, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].t_repeat = atoi(pcValue[i]); // Сохраняю в переменную
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	4413      	add	r3, r2
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003754:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003758:	4614      	mov	r4, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f013 fab3 	bl	8016cc6 <atoi>
 8003760:	4602      	mov	r2, r0
 8003762:	4921      	ldr	r1, [pc, #132]	; (80037e8 <CGIForm_Handler4+0x31c>)
 8003764:	4623      	mov	r3, r4
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4423      	add	r3, r4
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3314      	adds	r3, #20
 8003770:	601a      	str	r2, [r3, #0]
//				printf("t_repeat ID = %d\n", Tt[tmp_id].id);
//				printf("Tt[tmp_id].t_repeat = %d\n", Tt[tmp_id].t_repeat);
			}
			if (strcmp(pcParam[i], "set_num") == 0 && tmp_id != 0) // if the "e_dt" string is found
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4923      	ldr	r1, [pc, #140]	; (800380c <CGIForm_Handler4+0x340>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fc fd26 	bl	80001d0 <strcmp>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d142      	bne.n	8003810 <CGIForm_Handler4+0x344>
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <CGIForm_Handler4+0x318>)
 800378c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03d      	beq.n	8003810 <CGIForm_Handler4+0x344>
					{
				Tt[tmp_id].t_rept1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <CGIForm_Handler4+0x318>)
 8003796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379a:	4619      	mov	r1, r3
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <CGIForm_Handler4+0x31c>)
 800379e:	460b      	mov	r3, r1
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	440b      	add	r3, r1
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	333e      	adds	r3, #62	; 0x3e
 80037aa:	2200      	movs	r2, #0
 80037ac:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept1 = atoi(pcValue[i]); // Сохраняю в переменную
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f013 fa84 	bl	8016cc6 <atoi>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <CGIForm_Handler4+0x318>)
 80037c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c6:	4619      	mov	r1, r3
 80037c8:	b210      	sxth	r0, r2
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <CGIForm_Handler4+0x31c>)
 80037cc:	460b      	mov	r3, r1
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	440b      	add	r3, r1
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	333e      	adds	r3, #62	; 0x3e
 80037d8:	4602      	mov	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	e018      	b.n	8003810 <CGIForm_Handler4+0x344>
 80037de:	bf00      	nop
 80037e0:	0801c2c0 	.word	0x0801c2c0
 80037e4:	200007be 	.word	0x200007be
 80037e8:	20001750 	.word	0x20001750
 80037ec:	0801b654 	.word	0x0801b654
 80037f0:	200007bc 	.word	0x200007bc
 80037f4:	0801b644 	.word	0x0801b644
 80037f8:	0801b64c 	.word	0x0801b64c
 80037fc:	0801c2c8 	.word	0x0801c2c8
 8003800:	0801c2d0 	.word	0x0801c2d0
 8003804:	20000000 	.word	0x20000000
 8003808:	0801c2d4 	.word	0x0801c2d4
 800380c:	0801c2e0 	.word	0x0801c2e0
				//printf("t_rept1 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept1 = %d\n", Tt[tmp_id].t_rept1);
			}
			if (strcmp(pcParam[i], "repeat") == 0 && tmp_id != 0) // if the "e_dt" string is found
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	49c4      	ldr	r1, [pc, #784]	; (8003b2c <CGIForm_Handler4+0x660>)
 800381c:	4618      	mov	r0, r3
 800381e:	f7fc fcd7 	bl	80001d0 <strcmp>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d128      	bne.n	800387a <CGIForm_Handler4+0x3ae>
 8003828:	4bc1      	ldr	r3, [pc, #772]	; (8003b30 <CGIForm_Handler4+0x664>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d023      	beq.n	800387a <CGIForm_Handler4+0x3ae>
					{
				Tt[tmp_id].t_rept2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003832:	4bbf      	ldr	r3, [pc, #764]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003838:	4619      	mov	r1, r3
 800383a:	4abe      	ldr	r2, [pc, #760]	; (8003b34 <CGIForm_Handler4+0x668>)
 800383c:	460b      	mov	r3, r1
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	440b      	add	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	3340      	adds	r3, #64	; 0x40
 8003848:	2200      	movs	r2, #0
 800384a:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept2 = atoi(pcValue[i]); // Сохраняю в переменную
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	4413      	add	r3, r2
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f013 fa35 	bl	8016cc6 <atoi>
 800385c:	4602      	mov	r2, r0
 800385e:	4bb4      	ldr	r3, [pc, #720]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003864:	4619      	mov	r1, r3
 8003866:	b210      	sxth	r0, r2
 8003868:	4ab2      	ldr	r2, [pc, #712]	; (8003b34 <CGIForm_Handler4+0x668>)
 800386a:	460b      	mov	r3, r1
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	440b      	add	r3, r1
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	3340      	adds	r3, #64	; 0x40
 8003876:	4602      	mov	r2, r0
 8003878:	801a      	strh	r2, [r3, #0]
				//printf("t_rept2 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept2 = %d\n", Tt[tmp_id].t_rept2);
			}
			if (strcmp(pcParam[i], "action") == 0 && tmp_id != 0) // if the "e_dt" string is found
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	49ac      	ldr	r1, [pc, #688]	; (8003b38 <CGIForm_Handler4+0x66c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7fc fca2 	bl	80001d0 <strcmp>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d128      	bne.n	80038e4 <CGIForm_Handler4+0x418>
 8003892:	4ba7      	ldr	r3, [pc, #668]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <CGIForm_Handler4+0x418>
					{
				Tt[tmp_id].t_action = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800389c:	4ba4      	ldr	r3, [pc, #656]	; (8003b30 <CGIForm_Handler4+0x664>)
 800389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4aa3      	ldr	r2, [pc, #652]	; (8003b34 <CGIForm_Handler4+0x668>)
 80038a6:	460b      	mov	r3, r1
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	440b      	add	r3, r1
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3318      	adds	r3, #24
 80038b2:	2200      	movs	r2, #0
 80038b4:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_action = atoi(pcValue[i]); // Сохраняю в переменную
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4413      	add	r3, r2
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f013 fa00 	bl	8016cc6 <atoi>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b99      	ldr	r3, [pc, #612]	; (8003b30 <CGIForm_Handler4+0x664>)
 80038ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ce:	4619      	mov	r1, r3
 80038d0:	b210      	sxth	r0, r2
 80038d2:	4a98      	ldr	r2, [pc, #608]	; (8003b34 <CGIForm_Handler4+0x668>)
 80038d4:	460b      	mov	r3, r1
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	440b      	add	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	3318      	adds	r3, #24
 80038e0:	4602      	mov	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
				//printf("t_action ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_action = %d\n", Tt[tmp_id].t_action);
			}
			if (strcmp(pcParam[i], "immediately") == 0 && tmp_id != 0)  // if the "id" string is found
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4993      	ldr	r1, [pc, #588]	; (8003b3c <CGIForm_Handler4+0x670>)
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fc fc6d 	bl	80001d0 <strcmp>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d128      	bne.n	800394e <CGIForm_Handler4+0x482>
 80038fc:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <CGIForm_Handler4+0x664>)
 80038fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d023      	beq.n	800394e <CGIForm_Handler4+0x482>
					{
				Tt[tmp_id].imm_ly = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003906:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800390c:	4619      	mov	r1, r3
 800390e:	4a89      	ldr	r2, [pc, #548]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003910:	460b      	mov	r3, r1
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	440b      	add	r3, r1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3308      	adds	r3, #8
 800391c:	2200      	movs	r2, #0
 800391e:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].imm_ly = atoi(pcValue[i]); // Сохраняю в переменную
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	4413      	add	r3, r2
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f013 f9cb 	bl	8016cc6 <atoi>
 8003930:	4602      	mov	r2, r0
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003938:	4619      	mov	r1, r3
 800393a:	b210      	sxth	r0, r2
 800393c:	4a7d      	ldr	r2, [pc, #500]	; (8003b34 <CGIForm_Handler4+0x668>)
 800393e:	460b      	mov	r3, r1
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	440b      	add	r3, r1
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3308      	adds	r3, #8
 800394a:	4602      	mov	r2, r0
 800394c:	801a      	strh	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("imm_ly = %d\n", Tt[tmp_id].imm_ly);
			}
			if (strcmp(pcParam[i], "sunrise") == 0 && tmp_id != 0)  // if the "sunrise" string is found
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4979      	ldr	r1, [pc, #484]	; (8003b40 <CGIForm_Handler4+0x674>)
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc fc38 	bl	80001d0 <strcmp>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d126      	bne.n	80039b4 <CGIForm_Handler4+0x4e8>
 8003966:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d021      	beq.n	80039b4 <CGIForm_Handler4+0x4e8>
					{
				Tt[tmp_id].sunrise = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003970:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003976:	4619      	mov	r1, r3
 8003978:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <CGIForm_Handler4+0x668>)
 800397a:	460b      	mov	r3, r1
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	440b      	add	r3, r1
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunrise = atoi(pcValue[i]); // Сохраняю в переменную
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	4413      	add	r3, r2
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a66      	ldr	r2, [pc, #408]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003996:	f9b2 2000 	ldrsh.w	r2, [r2]
 800399a:	4614      	mov	r4, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f013 f992 	bl	8016cc6 <atoi>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4963      	ldr	r1, [pc, #396]	; (8003b34 <CGIForm_Handler4+0x668>)
 80039a6:	4623      	mov	r3, r4
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	4423      	add	r3, r4
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3324      	adds	r3, #36	; 0x24
 80039b2:	601a      	str	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("sunrise = %d\n", Tt[tmp_id].sunrise);
			}
			if (strcmp(pcParam[i], "sunset") == 0 && tmp_id != 0)  // if the "sunset" string is found
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4413      	add	r3, r2
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4961      	ldr	r1, [pc, #388]	; (8003b44 <CGIForm_Handler4+0x678>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fc fc05 	bl	80001d0 <strcmp>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d126      	bne.n	8003a1a <CGIForm_Handler4+0x54e>
 80039cc:	4b58      	ldr	r3, [pc, #352]	; (8003b30 <CGIForm_Handler4+0x664>)
 80039ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <CGIForm_Handler4+0x54e>
					{
				Tt[tmp_id].sunset = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <CGIForm_Handler4+0x664>)
 80039d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039dc:	4619      	mov	r1, r3
 80039de:	4a55      	ldr	r2, [pc, #340]	; (8003b34 <CGIForm_Handler4+0x668>)
 80039e0:	460b      	mov	r3, r1
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	440b      	add	r3, r1
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	3328      	adds	r3, #40	; 0x28
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunset = atoi(pcValue[i]); // Сохраняю в переменную
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <CGIForm_Handler4+0x664>)
 80039fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003a00:	4614      	mov	r4, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f013 f95f 	bl	8016cc6 <atoi>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	494a      	ldr	r1, [pc, #296]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003a0c:	4623      	mov	r3, r4
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4423      	add	r3, r4
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3328      	adds	r3, #40	; 0x28
 8003a18:	601a      	str	r2, [r3, #0]
				//printf("sunset ID = %d\n", Tt[tmp_id].id);
				//printf("sunset = %d\n", Tt[tmp_id].sunset);
			}


			if (strcmp(pcParam[i], "t_group") == 0 && tmp_id != 0)  // if the string is found
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4948      	ldr	r1, [pc, #288]	; (8003b48 <CGIForm_Handler4+0x67c>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fbd2 	bl	80001d0 <strcmp>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d129      	bne.n	8003a86 <CGIForm_Handler4+0x5ba>
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d024      	beq.n	8003a86 <CGIForm_Handler4+0x5ba>
					{
				//Tt[tmp_id].t_group[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_group , '\0', sizeof(Tt[tmp_id].t_group ));
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a42:	461a      	mov	r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003a50:	4413      	add	r3, r2
 8003a52:	3302      	adds	r3, #2
 8003a54:	220a      	movs	r2, #10
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f013 f993 	bl	8016d84 <memset>
				strcpy(Tt[tmp_id].t_group, pcValue[i]);// Сохраняем значение в переменную.
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	3318      	adds	r3, #24
 8003a70:	4a30      	ldr	r2, [pc, #192]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003a72:	4413      	add	r3, r2
 8003a74:	1c98      	adds	r0, r3, #2
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f013 ff2f 	bl	80178e4 <strcpy>
			}
			if (strcmp(pcParam[i], "t_info") == 0 && tmp_id != 0)  // if the string is found
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	492e      	ldr	r1, [pc, #184]	; (8003b4c <CGIForm_Handler4+0x680>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fb9c 	bl	80001d0 <strcmp>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d129      	bne.n	8003af2 <CGIForm_Handler4+0x626>
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d024      	beq.n	8003af2 <CGIForm_Handler4+0x626>
					{
				//Tt[tmp_id].t_info[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_info , '\0', sizeof(Tt[tmp_id].t_info ));
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3328      	adds	r3, #40	; 0x28
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f013 f95d 	bl	8016d84 <memset>
				strcpy(Tt[tmp_id].t_info, pcValue[i]);// Сохраняем значение в переменную.
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3328      	adds	r3, #40	; 0x28
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003ade:	4413      	add	r3, r2
 8003ae0:	1d18      	adds	r0, r3, #4
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f013 fef9 	bl	80178e4 <strcpy>
				//printf("Tt[tmp_id].t_info[15] = %s\n", Tt[tmp_id].t_info);
			}
			if (strcmp(pcParam[i], "t_onoff") == 0 && tmp_id != 0) // if the "t_onoff" string is found
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4914      	ldr	r1, [pc, #80]	; (8003b50 <CGIForm_Handler4+0x684>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fb66 	bl	80001d0 <strcmp>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13e      	bne.n	8003b88 <CGIForm_Handler4+0x6bc>
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d039      	beq.n	8003b88 <CGIForm_Handler4+0x6bc>
					{
				Tt[tmp_id].t_onoff = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <CGIForm_Handler4+0x664>)
 8003b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <CGIForm_Handler4+0x668>)
 8003b1e:	460b      	mov	r3, r1
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	440b      	add	r3, r1
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	e014      	b.n	8003b54 <CGIForm_Handler4+0x688>
 8003b2a:	bf00      	nop
 8003b2c:	0801c2e8 	.word	0x0801c2e8
 8003b30:	200007be 	.word	0x200007be
 8003b34:	20001750 	.word	0x20001750
 8003b38:	0801c2f0 	.word	0x0801c2f0
 8003b3c:	0801c2f8 	.word	0x0801c2f8
 8003b40:	0801b690 	.word	0x0801b690
 8003b44:	0801b698 	.word	0x0801b698
 8003b48:	0801b6a0 	.word	0x0801b6a0
 8003b4c:	0801b6a8 	.word	0x0801b6a8
 8003b50:	0801b6b0 	.word	0x0801b6b0
 8003b54:	333c      	adds	r3, #60	; 0x3c
 8003b56:	2200      	movs	r2, #0
 8003b58:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_onoff = atoi(pcValue[i]); // Сохраняю в переменную
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f013 f8ae 	bl	8016cc6 <atoi>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <CGIForm_Handler4+0x6d8>)
 8003b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b72:	4619      	mov	r1, r3
 8003b74:	b210      	sxth	r0, r2
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <CGIForm_Handler4+0x6dc>)
 8003b78:	460b      	mov	r3, r1
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	440b      	add	r3, r1
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	333c      	adds	r3, #60	; 0x3c
 8003b84:	4602      	mov	r2, r0
 8003b86:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	f6ff aca8 	blt.w	80034e8 <CGIForm_Handler4+0x1c>
				//printf("t_onoff ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_onoff = %d\n", Tt[tmp_id].t_onoff);
			}
		}
	}
	return "/edit_timers.shtml"; //
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <CGIForm_Handler4+0x6e0>)
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200007be 	.word	0x200007be
 8003ba8:	20001750 	.word	0x20001750
 8003bac:	0801c270 	.word	0x0801c270

08003bb0 <httpd_post_begin>:
int http_post_content_len;
char urls[30] = { 0 };

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	807b      	strh	r3, [r7, #2]

	http_post_content_len = content_len;
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <httpd_post_begin+0x44>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <httpd_post_begin+0x48>)
 8003bca:	f013 fea5 	bl	8017918 <strncpy>

	//printf("uri %s\r\n", uri);//////////////////////////////////

	if (current_connection != connection) {
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <httpd_post_begin+0x4c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d007      	beq.n	8003be8 <httpd_post_begin+0x38>
		current_connection = connection;
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <httpd_post_begin+0x4c>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <httpd_post_begin+0x50>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e001      	b.n	8003bec <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 8003be8:	f06f 0305 	mvn.w	r3, #5
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200026b8 	.word	0x200026b8
 8003bf8:	200007dc 	.word	0x200007dc
 8003bfc:	200007d4 	.word	0x200007d4
 8003c00:	200007d8 	.word	0x200007d8

08003c04 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	//printf("OK POST 2 \r\n");
	//char data;
	if (current_connection == connection && p != NULL) {
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <httpd_post_receive_data+0x54>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d113      	bne.n	8003c40 <httpd_post_receive_data+0x3c>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <httpd_post_receive_data+0x3c>
		//data = p->payload;
		//printf("DATA %s \r\n", data);
		//strcat(bufervar, p->payload);
		//strncpy(readvar, p->payload, p->tot_len);
		strncpy(readvar, p->payload, p->len);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	895b      	ldrh	r3, [r3, #10]
 8003c26:	461a      	mov	r2, r3
 8003c28:	480c      	ldr	r0, [pc, #48]	; (8003c5c <httpd_post_receive_data+0x58>)
 8003c2a:	f013 fe75 	bl	8017918 <strncpy>
		//strcpy(readvar, p->payload);
		//printf("DATA %s \r\n", readvar);
		//printf("num %d \r\n", p->len);
		strcat(bufervar, readvar);
 8003c2e:	490b      	ldr	r1, [pc, #44]	; (8003c5c <httpd_post_receive_data+0x58>)
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <httpd_post_receive_data+0x5c>)
 8003c32:	f013 fe3b 	bl	80178ac <strcat>
		pbuf_free(p);
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f007 fd1e 	bl	800b678 <pbuf_free>
		//memset(data, '\0', sizeof(data));
		return ERR_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e007      	b.n	8003c50 <httpd_post_receive_data+0x4c>
	}

	if (p != NULL) {
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <httpd_post_receive_data+0x48>
		//printf("Очищаем полученные данные! \r\n");
		pbuf_free(p);
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f007 fd16 	bl	800b678 <pbuf_free>
	}
	return ERR_VAL;
 8003c4c:	f06f 0305 	mvn.w	r3, #5
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200007d4 	.word	0x200007d4
 8003c5c:	20001368 	.word	0x20001368
 8003c60:	200041a0 	.word	0x200041a0

08003c64 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	6018      	str	r0, [r3, #0]
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	6019      	str	r1, [r3, #0]
 8003c78:	1dbb      	adds	r3, r7, #6
 8003c7a:	801a      	strh	r2, [r3, #0]

	char *token; // "&"
	char *token1;// "="
	char *token2;// "_"
	char *name1; // Для сравнения полученных тегов из uri
	int z = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	int variable2;
	//char urlline[http_post_content_len];
	char urlline[1000] = { 0 };
 8003c88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	3304      	adds	r3, #4
 8003c92:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f013 f873 	bl	8016d84 <memset>
	char name0[50] = { 0 };
 8003c9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	222e      	movs	r2, #46	; 0x2e
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f013 f869 	bl	8016d84 <memset>
	char nametoken[50] = { 0 };
 8003cb2:	f107 0320 	add.w	r3, r7, #32
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	222e      	movs	r2, #46	; 0x2e
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f013 f85f 	bl	8016d84 <memset>

	memset(name0, '\0', sizeof(name0));
 8003cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cca:	2232      	movs	r2, #50	; 0x32
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f013 f858 	bl	8016d84 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 8003cd4:	4bcb      	ldr	r3, [pc, #812]	; (8004004 <httpd_post_finished+0x3a0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003cde:	49ca      	ldr	r1, [pc, #808]	; (8004008 <httpd_post_finished+0x3a4>)
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f013 fe19 	bl	8017918 <strncpy>
	//printf("%s \r\n", urlline);
//	printf("COUNT %d \r\n", http_post_content_len);

	char *rest = urlline;
 8003ce6:	f107 031c 	add.w	r3, r7, #28
 8003cea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cee:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 8003cf0:	e26a      	b.n	80041c8 <httpd_post_finished+0x564>
		//printf("%s\n", token);
		char *rest1 = token;
 8003cf2:	f107 0318 	add.w	r3, r7, #24
 8003cf6:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003cfa:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 8003cfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d00:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8003d04:	4618      	mov	r0, r3
 8003d06:	f013 fdd1 	bl	80178ac <strcat>
		y = 0;
 8003d0a:	4bc0      	ldr	r3, [pc, #768]	; (800400c <httpd_post_finished+0x3a8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8003d10:	e216      	b.n	8004140 <httpd_post_finished+0x4dc>
			z = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 8003d18:	4bbc      	ldr	r3, [pc, #752]	; (800400c <httpd_post_finished+0x3a8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12b      	bne.n	8003d78 <httpd_post_finished+0x114>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8003d28:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8003d2a:	e016      	b.n	8003d5a <httpd_post_finished+0xf6>
					if (z == 0) {
 8003d2c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <httpd_post_finished+0xd8>
						name1 = token2;
 8003d34:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003d38:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 8003d3c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <httpd_post_finished+0xec>
						id = atoi(token2);
 8003d44:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8003d48:	f012 ffbd 	bl	8016cc6 <atoi>
 8003d4c:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 8003d50:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003d54:	3301      	adds	r3, #1
 8003d56:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f107 0214 	add.w	r2, r7, #20
 8003d64:	49aa      	ldr	r1, [pc, #680]	; (8004010 <httpd_post_finished+0x3ac>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f014 fc90 	bl	801868c <strtok_r>
 8003d6c:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 8003d70:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1d9      	bne.n	8003d2c <httpd_post_finished+0xc8>
				}
			}
			if (y == 1) {
 8003d78:	4ba4      	ldr	r3, [pc, #656]	; (800400c <httpd_post_finished+0x3a8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 81da 	bne.w	8004136 <httpd_post_finished+0x4d2>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 8003d82:	49a4      	ldr	r1, [pc, #656]	; (8004014 <httpd_post_finished+0x3b0>)
 8003d84:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003d88:	f7fc fa22 	bl	80001d0 <strcmp>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <httpd_post_finished+0x14a>
					strcpy(T[id].ptype, token1);
 8003d92:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003d96:	2268      	movs	r2, #104	; 0x68
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	3318      	adds	r3, #24
 8003d9e:	4a9e      	ldr	r2, [pc, #632]	; (8004018 <httpd_post_finished+0x3b4>)
 8003da0:	4413      	add	r3, r2
 8003da2:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003da6:	4618      	mov	r0, r3
 8003da8:	f013 fd9c 	bl	80178e4 <strcpy>
 8003dac:	e1c3      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "topin") == 0) {
 8003dae:	499b      	ldr	r1, [pc, #620]	; (800401c <httpd_post_finished+0x3b8>)
 8003db0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003db4:	f7fc fa0c 	bl	80001d0 <strcmp>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <httpd_post_finished+0x176>
					T[id].topin = atoi(token1);
 8003dbe:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003dc2:	f012 ff80 	bl	8016cc6 <atoi>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4993      	ldr	r1, [pc, #588]	; (8004018 <httpd_post_finished+0x3b4>)
 8003dca:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003dce:	2068      	movs	r0, #104	; 0x68
 8003dd0:	fb00 f303 	mul.w	r3, r0, r3
 8003dd4:	440b      	add	r3, r1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e1ad      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "binter") == 0) {
 8003dda:	4991      	ldr	r1, [pc, #580]	; (8004020 <httpd_post_finished+0x3bc>)
 8003ddc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003de0:	f7fc f9f6 	bl	80001d0 <strcmp>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10e      	bne.n	8003e08 <httpd_post_finished+0x1a4>
					T[id].binter = atoi(token1);
 8003dea:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003dee:	f012 ff6a 	bl	8016cc6 <atoi>
 8003df2:	4602      	mov	r2, r0
 8003df4:	4988      	ldr	r1, [pc, #544]	; (8004018 <httpd_post_finished+0x3b4>)
 8003df6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003dfa:	2068      	movs	r0, #104	; 0x68
 8003dfc:	fb00 f303 	mul.w	r3, r0, r3
 8003e00:	440b      	add	r3, r1
 8003e02:	332c      	adds	r3, #44	; 0x2c
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e196      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "hinter") == 0) {
 8003e08:	4986      	ldr	r1, [pc, #536]	; (8004024 <httpd_post_finished+0x3c0>)
 8003e0a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e0e:	f7fc f9df 	bl	80001d0 <strcmp>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10e      	bne.n	8003e36 <httpd_post_finished+0x1d2>
					T[id].hinter = atoi(token1);
 8003e18:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e1c:	f012 ff53 	bl	8016cc6 <atoi>
 8003e20:	4602      	mov	r2, r0
 8003e22:	497d      	ldr	r1, [pc, #500]	; (8004018 <httpd_post_finished+0x3b4>)
 8003e24:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e28:	2068      	movs	r0, #104	; 0x68
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	440b      	add	r3, r1
 8003e30:	3330      	adds	r3, #48	; 0x30
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e17f      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "repeat") == 0) {
 8003e36:	497c      	ldr	r1, [pc, #496]	; (8004028 <httpd_post_finished+0x3c4>)
 8003e38:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e3c:	f7fc f9c8 	bl	80001d0 <strcmp>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10e      	bne.n	8003e64 <httpd_post_finished+0x200>
					T[id].repeat = atoi(token1);
 8003e46:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e4a:	f012 ff3c 	bl	8016cc6 <atoi>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4971      	ldr	r1, [pc, #452]	; (8004018 <httpd_post_finished+0x3b4>)
 8003e52:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e56:	2068      	movs	r0, #104	; 0x68
 8003e58:	fb00 f303 	mul.w	r3, r0, r3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3334      	adds	r3, #52	; 0x34
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e168      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "rinter") == 0) {
 8003e64:	4971      	ldr	r1, [pc, #452]	; (800402c <httpd_post_finished+0x3c8>)
 8003e66:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e6a:	f7fc f9b1 	bl	80001d0 <strcmp>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10e      	bne.n	8003e92 <httpd_post_finished+0x22e>
					T[id].rinter = atoi(token1);
 8003e74:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e78:	f012 ff25 	bl	8016cc6 <atoi>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4966      	ldr	r1, [pc, #408]	; (8004018 <httpd_post_finished+0x3b4>)
 8003e80:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e84:	2068      	movs	r0, #104	; 0x68
 8003e86:	fb00 f303 	mul.w	r3, r0, r3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3338      	adds	r3, #56	; 0x38
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e151      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dcinter") == 0) {
 8003e92:	4967      	ldr	r1, [pc, #412]	; (8004030 <httpd_post_finished+0x3cc>)
 8003e94:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e98:	f7fc f99a 	bl	80001d0 <strcmp>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <httpd_post_finished+0x25c>
					T[id].dcinter = atoi(token1);
 8003ea2:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ea6:	f012 ff0e 	bl	8016cc6 <atoi>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	495a      	ldr	r1, [pc, #360]	; (8004018 <httpd_post_finished+0x3b4>)
 8003eae:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003eb2:	2068      	movs	r0, #104	; 0x68
 8003eb4:	fb00 f303 	mul.w	r3, r0, r3
 8003eb8:	440b      	add	r3, r1
 8003eba:	333c      	adds	r3, #60	; 0x3c
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e13a      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pclick") == 0) {
 8003ec0:	495c      	ldr	r1, [pc, #368]	; (8004034 <httpd_post_finished+0x3d0>)
 8003ec2:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003ec6:	f7fc f983 	bl	80001d0 <strcmp>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <httpd_post_finished+0x28a>
					T[id].pclick = atoi(token1);
 8003ed0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ed4:	f012 fef7 	bl	8016cc6 <atoi>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	494f      	ldr	r1, [pc, #316]	; (8004018 <httpd_post_finished+0x3b4>)
 8003edc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ee0:	2068      	movs	r0, #104	; 0x68
 8003ee2:	fb00 f303 	mul.w	r3, r0, r3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3340      	adds	r3, #64	; 0x40
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e123      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "info") == 0) {
 8003eee:	4952      	ldr	r1, [pc, #328]	; (8004038 <httpd_post_finished+0x3d4>)
 8003ef0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003ef4:	f7fc f96c 	bl	80001d0 <strcmp>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10e      	bne.n	8003f1c <httpd_post_finished+0x2b8>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 8003efe:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003f02:	2268      	movs	r2, #104	; 0x68
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	4a43      	ldr	r2, [pc, #268]	; (8004018 <httpd_post_finished+0x3b4>)
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3304      	adds	r3, #4
 8003f10:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003f14:	4618      	mov	r0, r3
 8003f16:	f013 fce5 	bl	80178e4 <strcpy>
 8003f1a:	e10c      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "onoff") == 0) {
 8003f1c:	4947      	ldr	r1, [pc, #284]	; (800403c <httpd_post_finished+0x3d8>)
 8003f1e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003f22:	f7fc f955 	bl	80001d0 <strcmp>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10e      	bne.n	8003f4a <httpd_post_finished+0x2e6>
					T[id].onoff = atoi(token1);
 8003f2c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f30:	f012 fec9 	bl	8016cc6 <atoi>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4938      	ldr	r1, [pc, #224]	; (8004018 <httpd_post_finished+0x3b4>)
 8003f38:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003f3c:	2068      	movs	r0, #104	; 0x68
 8003f3e:	fb00 f303 	mul.w	r3, r0, r3
 8003f42:	440b      	add	r3, r1
 8003f44:	3364      	adds	r3, #100	; 0x64
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e0f5      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pwm") == 0) {
 8003f4a:	493d      	ldr	r1, [pc, #244]	; (8004040 <httpd_post_finished+0x3dc>)
 8003f4c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003f50:	f7fc f93e 	bl	80001d0 <strcmp>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10e      	bne.n	8003f78 <httpd_post_finished+0x314>
					T[id].pwm = atoi(token1);
 8003f5a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f5e:	f012 feb2 	bl	8016cc6 <atoi>
 8003f62:	4602      	mov	r2, r0
 8003f64:	492c      	ldr	r1, [pc, #176]	; (8004018 <httpd_post_finished+0x3b4>)
 8003f66:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003f6a:	2068      	movs	r0, #104	; 0x68
 8003f6c:	fb00 f303 	mul.w	r3, r0, r3
 8003f70:	440b      	add	r3, r1
 8003f72:	3304      	adds	r3, #4
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e0de      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "on") == 0) {
 8003f78:	4932      	ldr	r1, [pc, #200]	; (8004044 <httpd_post_finished+0x3e0>)
 8003f7a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003f7e:	f7fc f927 	bl	80001d0 <strcmp>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10e      	bne.n	8003fa6 <httpd_post_finished+0x342>
					T[id].on = atoi(token1);
 8003f88:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f8c:	f012 fe9b 	bl	8016cc6 <atoi>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4921      	ldr	r1, [pc, #132]	; (8004018 <httpd_post_finished+0x3b4>)
 8003f94:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003f98:	2068      	movs	r0, #104	; 0x68
 8003f9a:	fb00 f303 	mul.w	r3, r0, r3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e0c7      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "istate") == 0) {
 8003fa6:	4928      	ldr	r1, [pc, #160]	; (8004048 <httpd_post_finished+0x3e4>)
 8003fa8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003fac:	f7fc f910 	bl	80001d0 <strcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10e      	bne.n	8003fd4 <httpd_post_finished+0x370>
					T[id].istate = atoi(token1);
 8003fb6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003fba:	f012 fe84 	bl	8016cc6 <atoi>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4915      	ldr	r1, [pc, #84]	; (8004018 <httpd_post_finished+0x3b4>)
 8003fc2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003fc6:	2068      	movs	r0, #104	; 0x68
 8003fc8:	fb00 f303 	mul.w	r3, r0, r3
 8003fcc:	440b      	add	r3, r1
 8003fce:	330c      	adds	r3, #12
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e0b0      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dvalue") == 0) {
 8003fd4:	491d      	ldr	r1, [pc, #116]	; (800404c <httpd_post_finished+0x3e8>)
 8003fd6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003fda:	f7fc f8f9 	bl	80001d0 <strcmp>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d135      	bne.n	8004050 <httpd_post_finished+0x3ec>
					T[id].dvalue = atoi(token1);
 8003fe4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003fe8:	f012 fe6d 	bl	8016cc6 <atoi>
 8003fec:	4602      	mov	r2, r0
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <httpd_post_finished+0x3b4>)
 8003ff0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ff4:	2068      	movs	r0, #104	; 0x68
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e099      	b.n	8004136 <httpd_post_finished+0x4d2>
 8004002:	bf00      	nop
 8004004:	200026b8 	.word	0x200026b8
 8004008:	200041a0 	.word	0x200041a0
 800400c:	20006c34 	.word	0x20006c34
 8004010:	0801c304 	.word	0x0801c304
 8004014:	0801c308 	.word	0x0801c308
 8004018:	20002a10 	.word	0x20002a10
 800401c:	0801c310 	.word	0x0801c310
 8004020:	0801c318 	.word	0x0801c318
 8004024:	0801c320 	.word	0x0801c320
 8004028:	0801c2e8 	.word	0x0801c2e8
 800402c:	0801c328 	.word	0x0801c328
 8004030:	0801c330 	.word	0x0801c330
 8004034:	0801c338 	.word	0x0801c338
 8004038:	0801c340 	.word	0x0801c340
 800403c:	0801c348 	.word	0x0801c348
 8004040:	0801c350 	.word	0x0801c350
 8004044:	0801c354 	.word	0x0801c354
 8004048:	0801c358 	.word	0x0801c358
 800404c:	0801c360 	.word	0x0801c360
				} else if (strcmp(name1, "ponr") == 0) {
 8004050:	4983      	ldr	r1, [pc, #524]	; (8004260 <httpd_post_finished+0x5fc>)
 8004052:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8004056:	f7fc f8bb 	bl	80001d0 <strcmp>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10e      	bne.n	800407e <httpd_post_finished+0x41a>
					T[id].ponr = atoi(token1);
 8004060:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004064:	f012 fe2f 	bl	8016cc6 <atoi>
 8004068:	4602      	mov	r2, r0
 800406a:	497e      	ldr	r1, [pc, #504]	; (8004264 <httpd_post_finished+0x600>)
 800406c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8004070:	2068      	movs	r0, #104	; 0x68
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	440b      	add	r3, r1
 8004078:	3314      	adds	r3, #20
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e05b      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idin") == 0) {
 800407e:	497a      	ldr	r1, [pc, #488]	; (8004268 <httpd_post_finished+0x604>)
 8004080:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8004084:	f7fc f8a4 	bl	80001d0 <strcmp>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d139      	bne.n	8004102 <httpd_post_finished+0x49e>
					//printf("idin------- %d \r\n", atoi(token1));
					while (variable1 <= numpintopin - 1) {
 800408e:	e030      	b.n	80040f2 <httpd_post_finished+0x48e>
						if (TO[variable1].flag == 0) {
 8004090:	4976      	ldr	r1, [pc, #472]	; (800426c <httpd_post_finished+0x608>)
 8004092:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3308      	adds	r3, #8
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11f      	bne.n	80040e8 <httpd_post_finished+0x484>
							TO[variable1].idin = atoi(token1);
 80040a8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80040ac:	f012 fe0b 	bl	8016cc6 <atoi>
 80040b0:	4601      	mov	r1, r0
 80040b2:	486e      	ldr	r0, [pc, #440]	; (800426c <httpd_post_finished+0x608>)
 80040b4:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80040b8:	4613      	mov	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4403      	add	r3, r0
 80040c2:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 80040c4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80040c8:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 80040cc:	4967      	ldr	r1, [pc, #412]	; (800426c <httpd_post_finished+0x608>)
 80040ce:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	3308      	adds	r3, #8
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 80040e2:	2346      	movs	r3, #70	; 0x46
 80040e4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 80040e8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80040ec:	3301      	adds	r3, #1
 80040ee:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while (variable1 <= numpintopin - 1) {
 80040f2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80040f6:	2b45      	cmp	r3, #69	; 0x45
 80040f8:	ddca      	ble.n	8004090 <httpd_post_finished+0x42c>
					}
					variable1 = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8004100:	e019      	b.n	8004136 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idout") == 0) {
 8004102:	495b      	ldr	r1, [pc, #364]	; (8004270 <httpd_post_finished+0x60c>)
 8004104:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8004108:	f7fc f862 	bl	80001d0 <strcmp>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d111      	bne.n	8004136 <httpd_post_finished+0x4d2>
					TO[variable2].idout = atoi(token1);
 8004112:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004116:	f012 fdd6 	bl	8016cc6 <atoi>
 800411a:	4601      	mov	r1, r0
 800411c:	4853      	ldr	r0, [pc, #332]	; (800426c <httpd_post_finished+0x608>)
 800411e:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3304      	adds	r3, #4
 800412e:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//							}
//							variable1 = 0;
					//////////////
				}
			}
			y++;
 8004136:	4b4f      	ldr	r3, [pc, #316]	; (8004274 <httpd_post_finished+0x610>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <httpd_post_finished+0x610>)
 800413e:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8004140:	f107 0318 	add.w	r3, r7, #24
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f107 0218 	add.w	r2, r7, #24
 800414a:	494b      	ldr	r1, [pc, #300]	; (8004278 <httpd_post_finished+0x614>)
 800414c:	4618      	mov	r0, r3
 800414e:	f014 fa9d 	bl	801868c <strtok_r>
 8004152:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 8004156:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800415a:	2b00      	cmp	r3, #0
 800415c:	f47f add9 	bne.w	8003d12 <httpd_post_finished+0xae>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
 8004160:	f107 0320 	add.w	r3, r7, #32
 8004164:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8004168:	4944      	ldr	r1, [pc, #272]	; (800427c <httpd_post_finished+0x618>)
 800416a:	4618      	mov	r0, r3
 800416c:	f013 fb7e 	bl	801786c <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8004170:	f107 0220 	add.w	r2, r7, #32
 8004174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc f828 	bl	80001d0 <strcmp>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <httpd_post_finished+0x53e>
			strcpy(T[id].info, "null");
 8004186:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800418a:	2268      	movs	r2, #104	; 0x68
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	3340      	adds	r3, #64	; 0x40
 8004192:	4a34      	ldr	r2, [pc, #208]	; (8004264 <httpd_post_finished+0x600>)
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	4a39      	ldr	r2, [pc, #228]	; (8004280 <httpd_post_finished+0x61c>)
 800419a:	6810      	ldr	r0, [r2, #0]
 800419c:	6018      	str	r0, [r3, #0]
 800419e:	7912      	ldrb	r2, [r2, #4]
 80041a0:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 80041a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041a6:	2232      	movs	r2, #50	; 0x32
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f012 fdea 	bl	8016d84 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 80041b0:	f107 0320 	add.w	r3, r7, #32
 80041b4:	2232      	movs	r2, #50	; 0x32
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f012 fde3 	bl	8016d84 <memset>
		z++;
 80041be:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80041c2:	3301      	adds	r3, #1
 80041c4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f107 021c 	add.w	r2, r7, #28
 80041d2:	492c      	ldr	r1, [pc, #176]	; (8004284 <httpd_post_finished+0x620>)
 80041d4:	4618      	mov	r0, r3
 80041d6:	f014 fa59 	bl	801868c <strtok_r>
 80041da:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 80041de:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f47f ad85 	bne.w	8003cf2 <httpd_post_finished+0x8e>
	}

	memset(urlline, '\0', sizeof(urlline));   // Очищаем urlline
 80041e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80041ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f012 fdc6 	bl	8016d84 <memset>
	memset(bufervar, '\0', sizeof(bufervar)); // Очищаем bufervar
 80041f8:	f642 1204 	movw	r2, #10500	; 0x2904
 80041fc:	2100      	movs	r1, #0
 80041fe:	4822      	ldr	r0, [pc, #136]	; (8004288 <httpd_post_finished+0x624>)
 8004200:	f012 fdc0 	bl	8016d84 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8004204:	1dbb      	adds	r3, r7, #6
 8004206:	8819      	ldrh	r1, [r3, #0]
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <httpd_post_finished+0x628>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	f013 faf8 	bl	8017804 <sniprintf>
	if (current_connection == connection) {
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <httpd_post_finished+0x62c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f107 020c 	add.w	r2, r7, #12
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d114      	bne.n	800424c <httpd_post_finished+0x5e8>
		if (valid_connection == connection) {
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <httpd_post_finished+0x630>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f107 020c 	add.w	r2, r7, #12
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d107      	bne.n	8004240 <httpd_post_finished+0x5dc>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8004230:	1dbb      	adds	r3, r7, #6
 8004232:	8819      	ldrh	r1, [r3, #0]
 8004234:	f107 0308 	add.w	r3, r7, #8
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <httpd_post_finished+0x628>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	f013 fae2 	bl	8017804 <sniprintf>
		}
		current_connection = NULL;
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <httpd_post_finished+0x62c>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <httpd_post_finished+0x630>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	0801c368 	.word	0x0801c368
 8004264:	20002a10 	.word	0x20002a10
 8004268:	0801c370 	.word	0x0801c370
 800426c:	200026bc 	.word	0x200026bc
 8004270:	0801c378 	.word	0x0801c378
 8004274:	20006c34 	.word	0x20006c34
 8004278:	0801c380 	.word	0x0801c380
 800427c:	0801c384 	.word	0x0801c384
 8004280:	0801c394 	.word	0x0801c394
 8004284:	0801c39c 	.word	0x0801c39c
 8004288:	200041a0 	.word	0x200041a0
 800428c:	200007dc 	.word	0x200007dc
 8004290:	200007d4 	.word	0x200007d4
 8004294:	200007d8 	.word	0x200007d8

08004298 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	httpd_init();
 800429c:	f005 fdc0 	bl	8009e20 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 42); // 2. Указал точное количество тегов.
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <http_server_init+0x24>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	222a      	movs	r2, #42	; 0x2a
 80042a6:	4619      	mov	r1, r3
 80042a8:	4805      	ldr	r0, [pc, #20]	; (80042c0 <http_server_init+0x28>)
 80042aa:	f005 fdd9 	bl	8009e60 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 80042ae:	2307      	movs	r3, #7
 80042b0:	4619      	mov	r1, r3
 80042b2:	4804      	ldr	r0, [pc, #16]	; (80042c4 <http_server_init+0x2c>)
 80042b4:	f005 fe16 	bl	8009ee4 <http_set_cgi_handlers>
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	200005b0 	.word	0x200005b0
 80042c0:	08000f6d 	.word	0x08000f6d
 80042c4:	0801f9c0 	.word	0x0801f9c0

080042c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80042d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80042d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80042e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80042e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80042e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80042f0:	e000      	b.n	80042f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80042f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80042f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f9      	beq.n	80042f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80042fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004308:	687b      	ldr	r3, [r7, #4]
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b29a      	uxth	r2, r3
 8004328:	2332      	movs	r3, #50	; 0x32
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <_write+0x48>)
 800432e:	f002 feba 	bl	80070a6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e009      	b.n	800434c <_write+0x34>
		ITM_SendChar(*ptr++);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ffc1 	bl	80042c8 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbf1      	blt.n	8004338 <_write+0x20>
	}
	return len;
 8004354:	687b      	ldr	r3, [r7, #4]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20006d64 	.word	0x20006d64

08004364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004368:	f000 faf2 	bl	8004950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800436c:	f000 f816 	bl	800439c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004370:	f000 f8a8 	bl	80044c4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8004374:	f000 f87c 	bl	8004470 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8004378:	f003 f95e 	bl	8007638 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 800437c:	f7ff ff8c 	bl	8004298 <http_server_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello world! \r\n");
 8004380:	4804      	ldr	r0, [pc, #16]	; (8004394 <main+0x30>)
 8004382:	f013 f9f7 	bl	8017774 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8004386:	4804      	ldr	r0, [pc, #16]	; (8004398 <main+0x34>)
 8004388:	f003 fd2e 	bl	8007de8 <ethernetif_input>
	  sys_check_timeouts();
 800438c:	f00d fe3e 	bl	801200c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8004390:	e7f9      	b.n	8004386 <main+0x22>
 8004392:	bf00      	nop
 8004394:	0801c3a0 	.word	0x0801c3a0
 8004398:	20006df8 	.word	0x20006df8

0800439c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b094      	sub	sp, #80	; 0x50
 80043a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043a2:	f107 0320 	add.w	r3, r7, #32
 80043a6:	2230      	movs	r2, #48	; 0x30
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f012 fcea 	bl	8016d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043c0:	2300      	movs	r3, #0
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	4b28      	ldr	r3, [pc, #160]	; (8004468 <SystemClock_Config+0xcc>)
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	4a27      	ldr	r2, [pc, #156]	; (8004468 <SystemClock_Config+0xcc>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	6413      	str	r3, [r2, #64]	; 0x40
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <SystemClock_Config+0xcc>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043dc:	2300      	movs	r3, #0
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <SystemClock_Config+0xd0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a21      	ldr	r2, [pc, #132]	; (800446c <SystemClock_Config+0xd0>)
 80043e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <SystemClock_Config+0xd0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004402:	2302      	movs	r3, #2
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800440c:	2304      	movs	r3, #4
 800440e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004410:	23a8      	movs	r3, #168	; 0xa8
 8004412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004414:	2302      	movs	r3, #2
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004418:	2304      	movs	r3, #4
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800441c:	f107 0320 	add.w	r3, r7, #32
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fe9f 	bl	8006164 <HAL_RCC_OscConfig>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800442c:	f000 f8a0 	bl	8004570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004430:	230f      	movs	r3, #15
 8004432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004434:	2302      	movs	r3, #2
 8004436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800443c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004446:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	2105      	movs	r1, #5
 800444e:	4618      	mov	r0, r3
 8004450:	f002 f900 	bl	8006654 <HAL_RCC_ClockConfig>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800445a:	f000 f889 	bl	8004570 <Error_Handler>
  }
}
 800445e:	bf00      	nop
 8004460:	3750      	adds	r7, #80	; 0x50
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000

08004470 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <MX_USART6_UART_Init+0x50>)
 8004478:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 800447c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004480:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 8004484:	2200      	movs	r2, #0
 8004486:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 800448a:	2200      	movs	r2, #0
 800448c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 8004496:	220c      	movs	r2, #12
 8004498:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 800449c:	2200      	movs	r2, #0
 800449e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80044a6:	4805      	ldr	r0, [pc, #20]	; (80044bc <MX_USART6_UART_Init+0x4c>)
 80044a8:	f002 fdb0 	bl	800700c <HAL_UART_Init>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80044b2:	f000 f85d 	bl	8004570 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20006d64 	.word	0x20006d64
 80044c0:	40011400 	.word	0x40011400

080044c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <MX_GPIO_Init+0x84>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <MX_GPIO_Init+0x84>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	6313      	str	r3, [r2, #48]	; 0x30
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <MX_GPIO_Init+0x84>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	4b17      	ldr	r3, [pc, #92]	; (8004548 <MX_GPIO_Init+0x84>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <MX_GPIO_Init+0x84>)
 80044f0:	f043 0304 	orr.w	r3, r3, #4
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <MX_GPIO_Init+0x84>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <MX_GPIO_Init+0x84>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <MX_GPIO_Init+0x84>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6313      	str	r3, [r2, #48]	; 0x30
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <MX_GPIO_Init+0x84>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <MX_GPIO_Init+0x84>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <MX_GPIO_Init+0x84>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <MX_GPIO_Init+0x84>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]

}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800455e:	f000 fa19 	bl	8004994 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40002000 	.word	0x40002000

08004570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004574:	b672      	cpsid	i
}
 8004576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004578:	e7fe      	b.n	8004578 <Error_Handler+0x8>
	...

0800457c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_MspInit+0x4c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_MspInit+0x4c>)
 800458c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_MspInit+0x4c>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_MspInit+0x4c>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <HAL_MspInit+0x4c>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_MspInit+0x4c>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800

080045cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_UART_MspInit+0x84>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d12b      	bne.n	8004646 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_UART_MspInit+0x88>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_UART_MspInit+0x88>)
 80045f8:	f043 0320 	orr.w	r3, r3, #32
 80045fc:	6453      	str	r3, [r2, #68]	; 0x44
 80045fe:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_UART_MspInit+0x88>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_UART_MspInit+0x88>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <HAL_UART_MspInit+0x88>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	6313      	str	r3, [r2, #48]	; 0x30
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_UART_MspInit+0x88>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004626:	23c0      	movs	r3, #192	; 0xc0
 8004628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	2302      	movs	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004632:	2303      	movs	r3, #3
 8004634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004636:	2308      	movs	r3, #8
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	4619      	mov	r1, r3
 8004640:	4805      	ldr	r0, [pc, #20]	; (8004658 <HAL_UART_MspInit+0x8c>)
 8004642:	f001 fbf3 	bl	8005e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004646:	bf00      	nop
 8004648:	3728      	adds	r7, #40	; 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40011400 	.word	0x40011400
 8004654:	40023800 	.word	0x40023800
 8004658:	40020800 	.word	0x40020800

0800465c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800466c:	2200      	movs	r2, #0
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	202d      	movs	r0, #45	; 0x2d
 8004672:	f000 fa8b 	bl	8004b8c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004676:	202d      	movs	r0, #45	; 0x2d
 8004678:	f000 faa4 	bl	8004bc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <HAL_InitTick+0xa4>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_InitTick+0xa4>)
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6413      	str	r3, [r2, #64]	; 0x40
 800468c:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <HAL_InitTick+0xa4>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004698:	f107 0210 	add.w	r2, r7, #16
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 f9d2 	bl	8006a4c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80046a8:	f002 f9a8 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 80046ac:	4603      	mov	r3, r0
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	4a13      	ldr	r2, [pc, #76]	; (8004704 <HAL_InitTick+0xa8>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0c9b      	lsrs	r3, r3, #18
 80046bc:	3b01      	subs	r3, #1
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_InitTick+0xac>)
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <HAL_InitTick+0xb0>)
 80046c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_InitTick+0xac>)
 80046c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046cc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80046ce:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_InitTick+0xac>)
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_InitTick+0xac>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_InitTick+0xac>)
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80046e0:	4809      	ldr	r0, [pc, #36]	; (8004708 <HAL_InitTick+0xac>)
 80046e2:	f002 f9e5 	bl	8006ab0 <HAL_TIM_Base_Init>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <HAL_InitTick+0xac>)
 80046ee:	f002 fa39 	bl	8006b64 <HAL_TIM_Base_Start_IT>
 80046f2:	4603      	mov	r3, r0
 80046f4:	e000      	b.n	80046f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3730      	adds	r7, #48	; 0x30
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	431bde83 	.word	0x431bde83
 8004708:	20006da8 	.word	0x20006da8
 800470c:	40002000 	.word	0x40002000

08004710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004714:	e7fe      	b.n	8004714 <NMI_Handler+0x4>

08004716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800471a:	e7fe      	b.n	800471a <HardFault_Handler+0x4>

0800471c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004720:	e7fe      	b.n	8004720 <MemManage_Handler+0x4>

08004722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004726:	e7fe      	b.n	8004726 <BusFault_Handler+0x4>

08004728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800472c:	e7fe      	b.n	800472c <UsageFault_Handler+0x4>

0800472e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800474a:	b480      	push	{r7}
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800475c:	bf00      	nop
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800476c:	4802      	ldr	r0, [pc, #8]	; (8004778 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800476e:	f002 fa69 	bl	8006c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20006da8 	.word	0x20006da8

0800477c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	return 1;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_kill>:

int _kill(int pid, int sig)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_kill+0x20>)
 8004798:	2216      	movs	r2, #22
 800479a:	601a      	str	r2, [r3, #0]
	return -1;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	2000d8a0 	.word	0x2000d8a0

080047b0 <_exit>:

void _exit (int status)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80047b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ffe5 	bl	800478c <_kill>
	while (1) {}		/* Make sure we hang here */
 80047c2:	e7fe      	b.n	80047c2 <_exit+0x12>

080047c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00a      	b.n	80047ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80047d6:	f3af 8000 	nop.w
 80047da:	4601      	mov	r1, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	60ba      	str	r2, [r7, #8]
 80047e2:	b2ca      	uxtb	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dbf0      	blt.n	80047d6 <_read+0x12>
	}

return len;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	return -1;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004826:	605a      	str	r2, [r3, #4]
	return 0;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_isatty>:

int _isatty(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
	return 1;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	return 0;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <_sbrk+0x5c>)
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <_sbrk+0x60>)
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <_sbrk+0x64>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <_sbrk+0x64>)
 8004886:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <_sbrk+0x68>)
 8004888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <_sbrk+0x64>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d205      	bcs.n	80048a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <_sbrk+0x6c>)
 800489a:	220c      	movs	r2, #12
 800489c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a2:	e009      	b.n	80048b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <_sbrk+0x64>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <_sbrk+0x64>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <_sbrk+0x64>)
 80048b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20020000 	.word	0x20020000
 80048c8:	00000400 	.word	0x00000400
 80048cc:	200007fc 	.word	0x200007fc
 80048d0:	2000d8b0 	.word	0x2000d8b0
 80048d4:	2000d8a0 	.word	0x2000d8a0

080048d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <SystemInit+0x20>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <SystemInit+0x20>)
 80048e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004900:	480d      	ldr	r0, [pc, #52]	; (8004938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004902:	490e      	ldr	r1, [pc, #56]	; (800493c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004904:	4a0e      	ldr	r2, [pc, #56]	; (8004940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004908:	e002      	b.n	8004910 <LoopCopyDataInit>

0800490a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800490a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800490c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800490e:	3304      	adds	r3, #4

08004910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004914:	d3f9      	bcc.n	800490a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004918:	4c0b      	ldr	r4, [pc, #44]	; (8004948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800491a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800491c:	e001      	b.n	8004922 <LoopFillZerobss>

0800491e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800491e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004920:	3204      	adds	r2, #4

08004922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004924:	d3fb      	bcc.n	800491e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004926:	f7ff ffd7 	bl	80048d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800492a:	f012 f9d1 	bl	8016cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800492e:	f7ff fd19 	bl	8004364 <main>
  bx  lr    
 8004932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800493c:	200007a0 	.word	0x200007a0
  ldr r2, =_sidata
 8004940:	08033fb0 	.word	0x08033fb0
  ldr r2, =_sbss
 8004944:	200007a0 	.word	0x200007a0
  ldr r4, =_ebss
 8004948:	2000d8b0 	.word	0x2000d8b0

0800494c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800494c:	e7fe      	b.n	800494c <ADC_IRQHandler>
	...

08004950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_Init+0x40>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <HAL_Init+0x40>)
 800495a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_Init+0x40>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <HAL_Init+0x40>)
 8004966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800496a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <HAL_Init+0x40>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HAL_Init+0x40>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004978:	2003      	movs	r0, #3
 800497a:	f000 f8fc 	bl	8004b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800497e:	200f      	movs	r0, #15
 8004980:	f7ff fe6c 	bl	800465c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004984:	f7ff fdfa 	bl	800457c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00

08004994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_IncTick+0x20>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_IncTick+0x24>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4413      	add	r3, r2
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <HAL_IncTick+0x24>)
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200005bc 	.word	0x200005bc
 80049b8:	20006df0 	.word	0x20006df0

080049bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return uwTick;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_GetTick+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20006df0 	.word	0x20006df0

080049d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049dc:	f7ff ffee 	bl	80049bc <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d005      	beq.n	80049fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_Delay+0x44>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049fa:	bf00      	nop
 80049fc:	f7ff ffde 	bl	80049bc <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d8f7      	bhi.n	80049fc <HAL_Delay+0x28>
  {
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200005bc 	.word	0x200005bc

08004a1c <__NVIC_SetPriorityGrouping>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	60d3      	str	r3, [r2, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_GetPriorityGrouping>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <__NVIC_GetPriorityGrouping+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0307 	and.w	r3, r3, #7
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_EnableIRQ>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0b      	blt.n	8004aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4907      	ldr	r1, [pc, #28]	; (8004ab8 <__NVIC_EnableIRQ+0x38>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	; (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	; (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	; 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff4c 	bl	8004a1c <__NVIC_SetPriorityGrouping>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b9e:	f7ff ff61 	bl	8004a64 <__NVIC_GetPriorityGrouping>
 8004ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7ff ffb1 	bl	8004b10 <NVIC_EncodePriority>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff80 	bl	8004abc <__NVIC_SetPriority>
}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff54 	bl	8004a80 <__NVIC_EnableIRQ>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004bf0:	4baa      	ldr	r3, [pc, #680]	; (8004e9c <HAL_ETH_Init+0x2bc>)
 8004bf2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e183      	b.n	8004f0e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f002 fe3e 	bl	800789c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
 8004c24:	4b9e      	ldr	r3, [pc, #632]	; (8004ea0 <HAL_ETH_Init+0x2c0>)
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	4a9d      	ldr	r2, [pc, #628]	; (8004ea0 <HAL_ETH_Init+0x2c0>)
 8004c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8004c30:	4b9b      	ldr	r3, [pc, #620]	; (8004ea0 <HAL_ETH_Init+0x2c0>)
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004c3c:	4b99      	ldr	r3, [pc, #612]	; (8004ea4 <HAL_ETH_Init+0x2c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a98      	ldr	r2, [pc, #608]	; (8004ea4 <HAL_ETH_Init+0x2c4>)
 8004c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c46:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004c48:	4b96      	ldr	r3, [pc, #600]	; (8004ea4 <HAL_ETH_Init+0x2c4>)
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4994      	ldr	r1, [pc, #592]	; (8004ea4 <HAL_ETH_Init+0x2c4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c6e:	f7ff fea5 	bl	80049bc <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c74:	e011      	b.n	8004c9a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004c76:	f7ff fea1 	bl	80049bc <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c84:	d909      	bls.n	8004c9a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e139      	b.n	8004f0e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e4      	bne.n	8004c76 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f023 031c 	bic.w	r3, r3, #28
 8004cba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004cbc:	f001 fe92 	bl	80069e4 <HAL_RCC_GetHCLKFreq>
 8004cc0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4a78      	ldr	r2, [pc, #480]	; (8004ea8 <HAL_ETH_Init+0x2c8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d908      	bls.n	8004cdc <HAL_ETH_Init+0xfc>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4a77      	ldr	r2, [pc, #476]	; (8004eac <HAL_ETH_Init+0x2cc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d804      	bhi.n	8004cdc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e027      	b.n	8004d2c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	4a73      	ldr	r2, [pc, #460]	; (8004eac <HAL_ETH_Init+0x2cc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d908      	bls.n	8004cf6 <HAL_ETH_Init+0x116>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	4a6d      	ldr	r2, [pc, #436]	; (8004e9c <HAL_ETH_Init+0x2bc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d204      	bcs.n	8004cf6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f043 030c 	orr.w	r3, r3, #12
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	e01a      	b.n	8004d2c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_ETH_Init+0x2bc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d303      	bcc.n	8004d06 <HAL_ETH_Init+0x126>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	4a6b      	ldr	r2, [pc, #428]	; (8004eb0 <HAL_ETH_Init+0x2d0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d911      	bls.n	8004d2a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <HAL_ETH_Init+0x2d0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d908      	bls.n	8004d20 <HAL_ETH_Init+0x140>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	4a68      	ldr	r2, [pc, #416]	; (8004eb4 <HAL_ETH_Init+0x2d4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d804      	bhi.n	8004d20 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e005      	b.n	8004d2c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f043 0310 	orr.w	r3, r3, #16
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e000      	b.n	8004d2c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004d2a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004d34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fb98 	bl	8005470 <HAL_ETH_WritePHYRegister>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fd4d 	bl	80057ec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0d7      	b.n	8004f0e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004d5e:	20ff      	movs	r0, #255	; 0xff
 8004d60:	f7ff fe38 	bl	80049d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a5 	beq.w	8004eb8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6e:	f7ff fe25 	bl	80049bc <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004d74:	f107 030c 	add.w	r3, r7, #12
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fb0f 	bl	80053a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004d82:	f7ff fe1b 	bl	80049bc <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d90f      	bls.n	8004db4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004d98:	6939      	ldr	r1, [r7, #16]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fd26 	bl	80057ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0ac      	b.n	8004f0e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0da      	beq.n	8004d74 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb53 	bl	8005470 <HAL_ETH_WritePHYRegister>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004dd4:	6939      	ldr	r1, [r7, #16]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fd08 	bl	80057ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004de4:	2301      	movs	r3, #1
 8004de6:	e092      	b.n	8004f0e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de8:	f7ff fde8 	bl	80049bc <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	461a      	mov	r2, r3
 8004df4:	2101      	movs	r1, #1
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fad2 	bl	80053a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004dfc:	f7ff fdde 	bl	80049bc <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d90f      	bls.n	8004e2e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004e12:	6939      	ldr	r1, [r7, #16]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fce9 	bl	80057ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e06f      	b.n	8004f0e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0da      	beq.n	8004dee <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004e38:	f107 030c 	add.w	r3, r7, #12
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2110      	movs	r1, #16
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 faad 	bl	80053a0 <HAL_ETH_ReadPHYRegister>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e50:	6939      	ldr	r1, [r7, #16]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fcca 	bl	80057ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e60:	2301      	movs	r3, #1
 8004e62:	e054      	b.n	8004f0e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e002      	b.n	8004e7e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	e035      	b.n	8004efc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	e030      	b.n	8004efc <HAL_ETH_Init+0x31c>
 8004e9a:	bf00      	nop
 8004e9c:	03938700 	.word	0x03938700
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40013800 	.word	0x40013800
 8004ea8:	01312cff 	.word	0x01312cff
 8004eac:	02160ebf 	.word	0x02160ebf
 8004eb0:	05f5e0ff 	.word	0x05f5e0ff
 8004eb4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2100      	movs	r1, #0
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 facd 	bl	8005470 <HAL_ETH_WritePHYRegister>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fc82 	bl	80057ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e00c      	b.n	8004f0e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004ef4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004ef8:	f7ff fd6c 	bl	80049d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004efc:	6939      	ldr	r1, [r7, #16]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fc74 	bl	80057ec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_ETH_DMATxDescListInit+0x20>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e052      	b.n	8004fde <HAL_ETH_DMATxDescListInit+0xc6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e030      	b.n	8004fb6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	015b      	lsls	r3, r3, #5
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f64:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f6c:	fb02 f303 	mul.w	r3, r2, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d208      	bcs.n	8004faa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	015b      	lsls	r3, r3, #5
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e002      	b.n	8004fb0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3ca      	bcc.n	8004f54 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc8:	3310      	adds	r3, #16
 8004fca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_ETH_DMARxDescListInit+0x20>
 8005006:	2302      	movs	r3, #2
 8005008:	e056      	b.n	80050b8 <HAL_ETH_DMARxDescListInit+0xce>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e034      	b.n	8005090 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	015b      	lsls	r3, r3, #5
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005036:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800503e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	461a      	mov	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	429a      	cmp	r2, r3
 8005070:	d208      	bcs.n	8005084 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3301      	adds	r3, #1
 8005076:	015b      	lsls	r3, r3, #5
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	4413      	add	r3, r2
 800507c:	461a      	mov	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	e002      	b.n	800508a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3301      	adds	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d3c6      	bcc.n	8005026 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a2:	330c      	adds	r3, #12
 80050a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_ETH_TransmitFrame+0x24>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e0cd      	b.n	8005284 <HAL_ETH_TransmitFrame+0x1c0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800510e:	2301      	movs	r3, #1
 8005110:	e0b8      	b.n	8005284 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	da09      	bge.n	8005130 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2212      	movs	r2, #18
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0a9      	b.n	8005284 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005136:	4293      	cmp	r3, r2
 8005138:	d915      	bls.n	8005166 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4a54      	ldr	r2, [pc, #336]	; (8005290 <HAL_ETH_TransmitFrame+0x1cc>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0a9b      	lsrs	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	4b51      	ldr	r3, [pc, #324]	; (8005290 <HAL_ETH_TransmitFrame+0x1cc>)
 800514a:	fba3 1302 	umull	r1, r3, r3, r2
 800514e:	0a9b      	lsrs	r3, r3, #10
 8005150:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e001      	b.n	800516a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8005166:	2301      	movs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d11c      	bne.n	80051aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800517e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800518a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800519a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80051a8:	e04b      	b.n	8005242 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e044      	b.n	800523a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051be:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d116      	bne.n	8005218 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_ETH_TransmitFrame+0x1d0>)
 80051fe:	fb02 f203 	mul.w	r2, r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	4413      	add	r3, r2
 8005206:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800520a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005216:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005226:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3301      	adds	r3, #1
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	429a      	cmp	r2, r3
 8005240:	d3b6      	bcc.n	80051b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524a:	3314      	adds	r3, #20
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525e:	3314      	adds	r3, #20
 8005260:	2204      	movs	r2, #4
 8005262:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526c:	3304      	adds	r3, #4
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	ac02b00b 	.word	0xac02b00b
 8005294:	fffffa0c 	.word	0xfffffa0c

08005298 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_ETH_GetReceivedFrame+0x1a>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e070      	b.n	8005394 <HAL_ETH_GetReceivedFrame+0xfc>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db5a      	blt.n	8005382 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d030      	beq.n	800533c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d103      	bne.n	80052f4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005308:	3b04      	subs	r3, #4
 800530a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	e02b      	b.n	8005394 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	2b00      	cmp	r3, #0
 8005348:	d010      	beq.n	800536c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	461a      	mov	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
 800536a:	e00a      	b.n	8005382 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	460b      	mov	r3, r1
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b82      	cmp	r3, #130	; 0x82
 80053c0:	d101      	bne.n	80053c6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	e050      	b.n	8005468 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2282      	movs	r2, #130	; 0x82
 80053ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 031c 	and.w	r3, r3, #28
 80053dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8a1b      	ldrh	r3, [r3, #16]
 80053e2:	02db      	lsls	r3, r3, #11
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80053ec:	897b      	ldrh	r3, [r7, #10]
 80053ee:	019b      	lsls	r3, r3, #6
 80053f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 0302 	bic.w	r3, r3, #2
 8005400:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005412:	f7ff fad3 	bl	80049bc <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005418:	e015      	b.n	8005446 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800541a:	f7ff facf 	bl	80049bc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005428:	d309      	bcc.n	800543e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e014      	b.n	8005468 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e4      	bne.n	800541a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	460b      	mov	r3, r1
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b42      	cmp	r3, #66	; 0x42
 8005490:	d101      	bne.n	8005496 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
 8005494:	e04e      	b.n	8005534 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2242      	movs	r2, #66	; 0x42
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 031c 	and.w	r3, r3, #28
 80054ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8a1b      	ldrh	r3, [r3, #16]
 80054b2:	02db      	lsls	r3, r3, #11
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	019b      	lsls	r3, r3, #6
 80054c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80054ec:	f7ff fa66 	bl	80049bc <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054f2:	e015      	b.n	8005520 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80054f4:	f7ff fa62 	bl	80049bc <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005502:	d309      	bcc.n	8005518 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e00d      	b.n	8005534 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e4      	bne.n	80054f4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_ETH_Start+0x16>
 800554e:	2302      	movs	r3, #2
 8005550:	e01f      	b.n	8005592 <HAL_ETH_Start+0x56>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb44 	bl	8005bf0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb7b 	bl	8005c64 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fc12 	bl	8005d98 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fbaf 	bl	8005cd8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fbdc 	bl	8005d38 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_ETH_Stop+0x16>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e01f      	b.n	80055f0 <HAL_ETH_Stop+0x56>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fba1 	bl	8005d08 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fbce 	bl	8005d68 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fb66 	bl	8005c9e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fbe0 	bl	8005d98 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb26 	bl	8005c2a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_ETH_ConfigMAC+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e0e4      	b.n	80057de <HAL_ETH_ConfigMAC+0x1e6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80b1 	beq.w	800578e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <HAL_ETH_ConfigMAC+0x1f0>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005644:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800564a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005650:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005656:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800565c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005662:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005668:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800566e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005674:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800567a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005680:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005686:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800569e:	2001      	movs	r0, #1
 80056a0:	f7ff f998 	bl	80049d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056b4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80056ba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80056c0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80056c6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80056cc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80056d2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80056de:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80056e0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80056ea:	2001      	movs	r0, #1
 80056ec:	f7ff f972 	bl	80049d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005700:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800570a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f64f 7341 	movw	r3, #65345	; 0xff41
 800571a:	4013      	ands	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005728:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800572e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005734:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800573a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005740:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005758:	2001      	movs	r0, #1
 800575a:	f7ff f93b 	bl	80049d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff f928 	bl	80049d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	61da      	str	r2, [r3, #28]
 800578c:	e01e      	b.n	80057cc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800579c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7ff f908 	bl	80049d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	ff20810f 	.word	0xff20810f

080057ec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0b0      	sub	sp, #192	; 0xc0
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005808:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005810:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005812:	2300      	movs	r3, #0
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800581a:	2300      	movs	r3, #0
 800581c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800581e:	2300      	movs	r3, #0
 8005820:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005826:	2300      	movs	r3, #0
 8005828:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005836:	663b      	str	r3, [r7, #96]	; 0x60
 8005838:	e001      	b.n	800583e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800583a:	2300      	movs	r3, #0
 800583c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800583e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005842:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005844:	2300      	movs	r3, #0
 8005846:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005848:	2300      	movs	r3, #0
 800584a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800584c:	2300      	movs	r3, #0
 800584e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005850:	2300      	movs	r3, #0
 8005852:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005854:	2300      	movs	r3, #0
 8005856:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005858:	2340      	movs	r3, #64	; 0x40
 800585a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005886:	2300      	movs	r3, #0
 8005888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005892:	2300      	movs	r3, #0
 8005894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80058c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058c4:	4bac      	ldr	r3, [pc, #688]	; (8005b78 <ETH_MACDMAConfig+0x38c>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80058cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80058d0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80058d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80058d4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80058d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80058d8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80058de:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80058e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80058e2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80058e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80058e6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80058ec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80058ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80058f0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80058f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80058f4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80058f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80058f8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80058fc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80058fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005900:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005914:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005920:	2001      	movs	r0, #1
 8005922:	f7ff f857 	bl	80049d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800592e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005930:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005934:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005938:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800593a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800593e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005944:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800594a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800594c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005950:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005954:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800595c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800595e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800596a:	2001      	movs	r0, #1
 800596c:	f7ff f832 	bl	80049d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005978:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005982:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800598c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005998:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800599c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80059a0:	4013      	ands	r3, r2
 80059a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059aa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80059ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059b0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80059b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80059b6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80059b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80059bc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80059be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80059c2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80059c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80059c8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80059ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059dc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7fe fff3 	bl	80049d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059f6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80059f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80059fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fe ffde 	bl	80049d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a20:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a2a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a34:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005a46:	2304      	movs	r3, #4
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a54:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a60:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a76:	3318      	adds	r3, #24
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005a7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a82:	4b3e      	ldr	r3, [pc, #248]	; (8005b7c <ETH_MACDMAConfig+0x390>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a8a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005a8c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005a8e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005a90:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005a92:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005a94:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005a96:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005a98:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005a9a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005a9c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005a9e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005aa2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005aa6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005aaa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005aac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	3318      	adds	r3, #24
 8005ac0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ac4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	3318      	adds	r3, #24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7fe ff7c 	bl	80049d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005af0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005af4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005af8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005afc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b00:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005b02:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005b06:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b14:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7fe ff55 	bl	80049d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b36:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10f      	bne.n	8005b60 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b48:	331c      	adds	r3, #28
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5c:	331c      	adds	r3, #28
 8005b5e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	461a      	mov	r2, r3
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f809 	bl	8005b80 <ETH_MACAddressConfig>
}
 8005b6e:	bf00      	nop
 8005b70:	37c0      	adds	r7, #192	; 0xc0
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	ff20810f 	.word	0xff20810f
 8005b7c:	f8de3f23 	.word	0xf8de3f23

08005b80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3305      	adds	r3, #5
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	3204      	adds	r2, #4
 8005b98:	7812      	ldrb	r2, [r2, #0]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <ETH_MACAddressConfig+0x68>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3303      	adds	r3, #3
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	061a      	lsls	r2, r3, #24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <ETH_MACAddressConfig+0x6c>)
 8005bd2:	4413      	add	r3, r2
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6013      	str	r3, [r2, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40028040 	.word	0x40028040
 8005bec:	40028044 	.word	0x40028044

08005bf0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0208 	orr.w	r2, r2, #8
 8005c0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c14:	2001      	movs	r0, #1
 8005c16:	f000 f8e9 	bl	8005dec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	601a      	str	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0208 	bic.w	r2, r2, #8
 8005c44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f000 f8cc 	bl	8005dec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0204 	orr.w	r2, r2, #4
 8005c7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005c88:	2001      	movs	r0, #1
 8005c8a:	f000 f8af 	bl	8005dec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0204 	bic.w	r2, r2, #4
 8005cb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f000 f892 	bl	8005dec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce8:	3318      	adds	r3, #24
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	601a      	str	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	3318      	adds	r3, #24
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	3318      	adds	r3, #24
 8005d2a:	601a      	str	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	3318      	adds	r3, #24
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0202 	orr.w	r2, r2, #2
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	3318      	adds	r3, #24
 8005d5a:	601a      	str	r2, [r3, #0]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	3318      	adds	r3, #24
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0202 	bic.w	r2, r2, #2
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	3318      	adds	r3, #24
 8005d8a:	601a      	str	r2, [r3, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	3318      	adds	r3, #24
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	3318      	adds	r3, #24
 8005dbe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	3318      	adds	r3, #24
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005dce:	2001      	movs	r0, #1
 8005dd0:	f000 f80c 	bl	8005dec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dde:	3318      	adds	r3, #24
 8005de0:	601a      	str	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <ETH_Delay+0x38>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a0b      	ldr	r2, [pc, #44]	; (8005e28 <ETH_Delay+0x3c>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	0a5b      	lsrs	r3, r3, #9
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005e08:	bf00      	nop
  } 
  while (Delay --);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	60fa      	str	r2, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f9      	bne.n	8005e08 <ETH_Delay+0x1c>
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200005b4 	.word	0x200005b4
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	e16b      	b.n	8006120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e48:	2201      	movs	r2, #1
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	f040 815a 	bne.w	800611a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d005      	beq.n	8005e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d130      	bne.n	8005ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	2203      	movs	r2, #3
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 0201 	and.w	r2, r3, #1
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d017      	beq.n	8005f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d123      	bne.n	8005f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	08da      	lsrs	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3208      	adds	r2, #8
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	220f      	movs	r2, #15
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	08da      	lsrs	r2, r3, #3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3208      	adds	r2, #8
 8005f6a:	69b9      	ldr	r1, [r7, #24]
 8005f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 0203 	and.w	r2, r3, #3
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80b4 	beq.w	800611a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	4b60      	ldr	r3, [pc, #384]	; (8006138 <HAL_GPIO_Init+0x30c>)
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	4a5f      	ldr	r2, [pc, #380]	; (8006138 <HAL_GPIO_Init+0x30c>)
 8005fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <HAL_GPIO_Init+0x30c>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fce:	4a5b      	ldr	r2, [pc, #364]	; (800613c <HAL_GPIO_Init+0x310>)
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	089b      	lsrs	r3, r3, #2
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	220f      	movs	r2, #15
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a52      	ldr	r2, [pc, #328]	; (8006140 <HAL_GPIO_Init+0x314>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <HAL_GPIO_Init+0x226>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a51      	ldr	r2, [pc, #324]	; (8006144 <HAL_GPIO_Init+0x318>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d025      	beq.n	800604e <HAL_GPIO_Init+0x222>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a50      	ldr	r2, [pc, #320]	; (8006148 <HAL_GPIO_Init+0x31c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01f      	beq.n	800604a <HAL_GPIO_Init+0x21e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a4f      	ldr	r2, [pc, #316]	; (800614c <HAL_GPIO_Init+0x320>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d019      	beq.n	8006046 <HAL_GPIO_Init+0x21a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a4e      	ldr	r2, [pc, #312]	; (8006150 <HAL_GPIO_Init+0x324>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_GPIO_Init+0x216>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a4d      	ldr	r2, [pc, #308]	; (8006154 <HAL_GPIO_Init+0x328>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00d      	beq.n	800603e <HAL_GPIO_Init+0x212>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a4c      	ldr	r2, [pc, #304]	; (8006158 <HAL_GPIO_Init+0x32c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <HAL_GPIO_Init+0x20e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a4b      	ldr	r2, [pc, #300]	; (800615c <HAL_GPIO_Init+0x330>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_GPIO_Init+0x20a>
 8006032:	2307      	movs	r3, #7
 8006034:	e00e      	b.n	8006054 <HAL_GPIO_Init+0x228>
 8006036:	2308      	movs	r3, #8
 8006038:	e00c      	b.n	8006054 <HAL_GPIO_Init+0x228>
 800603a:	2306      	movs	r3, #6
 800603c:	e00a      	b.n	8006054 <HAL_GPIO_Init+0x228>
 800603e:	2305      	movs	r3, #5
 8006040:	e008      	b.n	8006054 <HAL_GPIO_Init+0x228>
 8006042:	2304      	movs	r3, #4
 8006044:	e006      	b.n	8006054 <HAL_GPIO_Init+0x228>
 8006046:	2303      	movs	r3, #3
 8006048:	e004      	b.n	8006054 <HAL_GPIO_Init+0x228>
 800604a:	2302      	movs	r3, #2
 800604c:	e002      	b.n	8006054 <HAL_GPIO_Init+0x228>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <HAL_GPIO_Init+0x228>
 8006052:	2300      	movs	r3, #0
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	f002 0203 	and.w	r2, r2, #3
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	4093      	lsls	r3, r2
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006064:	4935      	ldr	r1, [pc, #212]	; (800613c <HAL_GPIO_Init+0x310>)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	3302      	adds	r3, #2
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006072:	4b3b      	ldr	r3, [pc, #236]	; (8006160 <HAL_GPIO_Init+0x334>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006096:	4a32      	ldr	r2, [pc, #200]	; (8006160 <HAL_GPIO_Init+0x334>)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800609c:	4b30      	ldr	r3, [pc, #192]	; (8006160 <HAL_GPIO_Init+0x334>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060c0:	4a27      	ldr	r2, [pc, #156]	; (8006160 <HAL_GPIO_Init+0x334>)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060c6:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_GPIO_Init+0x334>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ea:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <HAL_GPIO_Init+0x334>)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f0:	4b1b      	ldr	r3, [pc, #108]	; (8006160 <HAL_GPIO_Init+0x334>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006114:	4a12      	ldr	r2, [pc, #72]	; (8006160 <HAL_GPIO_Init+0x334>)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	f67f ae90 	bls.w	8005e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3724      	adds	r7, #36	; 0x24
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800
 800613c:	40013800 	.word	0x40013800
 8006140:	40020000 	.word	0x40020000
 8006144:	40020400 	.word	0x40020400
 8006148:	40020800 	.word	0x40020800
 800614c:	40020c00 	.word	0x40020c00
 8006150:	40021000 	.word	0x40021000
 8006154:	40021400 	.word	0x40021400
 8006158:	40021800 	.word	0x40021800
 800615c:	40021c00 	.word	0x40021c00
 8006160:	40013c00 	.word	0x40013c00

08006164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e264      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d075      	beq.n	800626e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006182:	4ba3      	ldr	r3, [pc, #652]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b04      	cmp	r3, #4
 800618c:	d00c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800618e:	4ba0      	ldr	r3, [pc, #640]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006196:	2b08      	cmp	r3, #8
 8006198:	d112      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619a:	4b9d      	ldr	r3, [pc, #628]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a6:	d10b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	4b99      	ldr	r3, [pc, #612]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05b      	beq.n	800626c <HAL_RCC_OscConfig+0x108>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d157      	bne.n	800626c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e23f      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_OscConfig+0x74>
 80061ca:	4b91      	ldr	r3, [pc, #580]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a90      	ldr	r2, [pc, #576]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e01d      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x98>
 80061e2:	4b8b      	ldr	r3, [pc, #556]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a8a      	ldr	r2, [pc, #552]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b88      	ldr	r3, [pc, #544]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a87      	ldr	r2, [pc, #540]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061fc:	4b84      	ldr	r3, [pc, #528]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a83      	ldr	r2, [pc, #524]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b81      	ldr	r3, [pc, #516]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a80      	ldr	r2, [pc, #512]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 800620e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fe fbce 	bl	80049bc <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006224:	f7fe fbca 	bl	80049bc <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e204      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0xc0>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fe fbba 	bl	80049bc <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800624c:	f7fe fbb6 	bl	80049bc <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	; 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1f0      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625e:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0xe8>
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d063      	beq.n	8006342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800627a:	4b65      	ldr	r3, [pc, #404]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b62      	ldr	r3, [pc, #392]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11c      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006292:	4b5f      	ldr	r3, [pc, #380]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d116      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629e:	4b5c      	ldr	r3, [pc, #368]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e1c4      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b6:	4b56      	ldr	r3, [pc, #344]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4952      	ldr	r1, [pc, #328]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	e03a      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	4b4f      	ldr	r3, [pc, #316]	; (8006414 <HAL_RCC_OscConfig+0x2b0>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7fe fb6f 	bl	80049bc <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e2:	f7fe fb6b 	bl	80049bc <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1a5      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f4:	4b46      	ldr	r3, [pc, #280]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4940      	ldr	r1, [pc, #256]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <HAL_RCC_OscConfig+0x2b0>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fe fb4e 	bl	80049bc <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006324:	f7fe fb4a 	bl	80049bc <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e184      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d030      	beq.n	80063b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006356:	4b30      	ldr	r3, [pc, #192]	; (8006418 <HAL_RCC_OscConfig+0x2b4>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fe fb2e 	bl	80049bc <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006364:	f7fe fb2a 	bl	80049bc <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e164      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 8006378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x200>
 8006382:	e015      	b.n	80063b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <HAL_RCC_OscConfig+0x2b4>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638a:	f7fe fb17 	bl	80049bc <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006392:	f7fe fb13 	bl	80049bc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e14d      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a0 	beq.w	80064fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063be:	2300      	movs	r3, #0
 80063c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c2:	4b13      	ldr	r3, [pc, #76]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	4a0e      	ldr	r2, [pc, #56]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6413      	str	r3, [r2, #64]	; 0x40
 80063de:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	60bb      	str	r3, [r7, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x2b8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d121      	bne.n	800643e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <HAL_RCC_OscConfig+0x2b8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a07      	ldr	r2, [pc, #28]	; (800641c <HAL_RCC_OscConfig+0x2b8>)
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006406:	f7fe fad9 	bl	80049bc <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640c:	e011      	b.n	8006432 <HAL_RCC_OscConfig+0x2ce>
 800640e:	bf00      	nop
 8006410:	40023800 	.word	0x40023800
 8006414:	42470000 	.word	0x42470000
 8006418:	42470e80 	.word	0x42470e80
 800641c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006420:	f7fe facc 	bl	80049bc <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e106      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006432:	4b85      	ldr	r3, [pc, #532]	; (8006648 <HAL_RCC_OscConfig+0x4e4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0f0      	beq.n	8006420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d106      	bne.n	8006454 <HAL_RCC_OscConfig+0x2f0>
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	4a80      	ldr	r2, [pc, #512]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6713      	str	r3, [r2, #112]	; 0x70
 8006452:	e01c      	b.n	800648e <HAL_RCC_OscConfig+0x32a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b05      	cmp	r3, #5
 800645a:	d10c      	bne.n	8006476 <HAL_RCC_OscConfig+0x312>
 800645c:	4b7b      	ldr	r3, [pc, #492]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	4a7a      	ldr	r2, [pc, #488]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006462:	f043 0304 	orr.w	r3, r3, #4
 8006466:	6713      	str	r3, [r2, #112]	; 0x70
 8006468:	4b78      	ldr	r3, [pc, #480]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800646a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646c:	4a77      	ldr	r2, [pc, #476]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	6713      	str	r3, [r2, #112]	; 0x70
 8006474:	e00b      	b.n	800648e <HAL_RCC_OscConfig+0x32a>
 8006476:	4b75      	ldr	r3, [pc, #468]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	4a74      	ldr	r2, [pc, #464]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	6713      	str	r3, [r2, #112]	; 0x70
 8006482:	4b72      	ldr	r3, [pc, #456]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	4a71      	ldr	r2, [pc, #452]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006488:	f023 0304 	bic.w	r3, r3, #4
 800648c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d015      	beq.n	80064c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006496:	f7fe fa91 	bl	80049bc <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800649c:	e00a      	b.n	80064b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649e:	f7fe fa8d 	bl	80049bc <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e0c5      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b4:	4b65      	ldr	r3, [pc, #404]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ee      	beq.n	800649e <HAL_RCC_OscConfig+0x33a>
 80064c0:	e014      	b.n	80064ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c2:	f7fe fa7b 	bl	80049bc <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fe fa77 	bl	80049bc <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0af      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e0:	4b5a      	ldr	r3, [pc, #360]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1ee      	bne.n	80064ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d105      	bne.n	80064fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f2:	4b56      	ldr	r3, [pc, #344]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	4a55      	ldr	r2, [pc, #340]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80064f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 809b 	beq.w	800663e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006508:	4b50      	ldr	r3, [pc, #320]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b08      	cmp	r3, #8
 8006512:	d05c      	beq.n	80065ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d141      	bne.n	80065a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCC_OscConfig+0x4ec>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006522:	f7fe fa4b 	bl	80049bc <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652a:	f7fe fa47 	bl	80049bc <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e081      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653c:	4b43      	ldr	r3, [pc, #268]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	019b      	lsls	r3, r3, #6
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	3b01      	subs	r3, #1
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	061b      	lsls	r3, r3, #24
 800656c:	4937      	ldr	r1, [pc, #220]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006572:	4b37      	ldr	r3, [pc, #220]	; (8006650 <HAL_RCC_OscConfig+0x4ec>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fe fa20 	bl	80049bc <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006580:	f7fe fa1c 	bl	80049bc <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e056      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0x41c>
 800659e:	e04e      	b.n	800663e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a0:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <HAL_RCC_OscConfig+0x4ec>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a6:	f7fe fa09 	bl	80049bc <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ae:	f7fe fa05 	bl	80049bc <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e03f      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c0:	4b22      	ldr	r3, [pc, #136]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f0      	bne.n	80065ae <HAL_RCC_OscConfig+0x44a>
 80065cc:	e037      	b.n	800663e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e032      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <HAL_RCC_OscConfig+0x4e8>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d028      	beq.n	800663a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d121      	bne.n	800663a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006600:	429a      	cmp	r2, r3
 8006602:	d11a      	bne.n	800663a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800660a:	4013      	ands	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006610:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006612:	4293      	cmp	r3, r2
 8006614:	d111      	bne.n	800663a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	3b01      	subs	r3, #1
 8006624:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006626:	429a      	cmp	r2, r3
 8006628:	d107      	bne.n	800663a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006636:	429a      	cmp	r2, r3
 8006638:	d001      	beq.n	800663e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40007000 	.word	0x40007000
 800664c:	40023800 	.word	0x40023800
 8006650:	42470060 	.word	0x42470060

08006654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0cc      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d90c      	bls.n	8006690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b65      	ldr	r3, [pc, #404]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b63      	ldr	r3, [pc, #396]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0b8      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d020      	beq.n	80066de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a8:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	4a58      	ldr	r2, [pc, #352]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c0:	4b53      	ldr	r3, [pc, #332]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	494d      	ldr	r1, [pc, #308]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d044      	beq.n	8006774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f2:	4b47      	ldr	r3, [pc, #284]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	2b03      	cmp	r3, #3
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e067      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4934      	ldr	r1, [pc, #208]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006744:	f7fe f93a 	bl	80049bc <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	e00a      	b.n	8006762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674c:	f7fe f936 	bl	80049bc <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	; 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e04f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 020c 	and.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d1eb      	bne.n	800674c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d20c      	bcs.n	800679c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e032      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4916      	ldr	r1, [pc, #88]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067c6:	4b12      	ldr	r3, [pc, #72]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	490e      	ldr	r1, [pc, #56]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067da:	f000 f821 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	490a      	ldr	r1, [pc, #40]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 80067ec:	5ccb      	ldrb	r3, [r1, r3]
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd ff2e 	bl	800465c <HAL_InitTick>

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023c00 	.word	0x40023c00
 8006810:	40023800 	.word	0x40023800
 8006814:	0801f9f8 	.word	0x0801f9f8
 8006818:	200005b4 	.word	0x200005b4
 800681c:	200005b8 	.word	0x200005b8

08006820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	2300      	movs	r3, #0
 8006832:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006838:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b08      	cmp	r3, #8
 8006842:	d00d      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x40>
 8006844:	2b08      	cmp	r3, #8
 8006846:	f200 80bd 	bhi.w	80069c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
 800684e:	2b04      	cmp	r3, #4
 8006850:	d003      	beq.n	800685a <HAL_RCC_GetSysClockFreq+0x3a>
 8006852:	e0b7      	b.n	80069c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006854:	4b61      	ldr	r3, [pc, #388]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006856:	60bb      	str	r3, [r7, #8]
       break;
 8006858:	e0b7      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685a:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800685c:	60bb      	str	r3, [r7, #8]
      break;
 800685e:	e0b4      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006860:	4b5d      	ldr	r3, [pc, #372]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006868:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686a:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d04d      	beq.n	8006912 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006876:	4b58      	ldr	r3, [pc, #352]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	461a      	mov	r2, r3
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006886:	f04f 0100 	mov.w	r1, #0
 800688a:	ea02 0800 	and.w	r8, r2, r0
 800688e:	ea03 0901 	and.w	r9, r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	014b      	lsls	r3, r1, #5
 80068a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068a4:	0142      	lsls	r2, r0, #5
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	ebb0 0008 	subs.w	r0, r0, r8
 80068ae:	eb61 0109 	sbc.w	r1, r1, r9
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	018b      	lsls	r3, r1, #6
 80068bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068c0:	0182      	lsls	r2, r0, #6
 80068c2:	1a12      	subs	r2, r2, r0
 80068c4:	eb63 0301 	sbc.w	r3, r3, r1
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	00d9      	lsls	r1, r3, #3
 80068d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068d6:	00d0      	lsls	r0, r2, #3
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	eb12 0208 	adds.w	r2, r2, r8
 80068e0:	eb43 0309 	adc.w	r3, r3, r9
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	f04f 0100 	mov.w	r1, #0
 80068ec:	0259      	lsls	r1, r3, #9
 80068ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80068f2:	0250      	lsls	r0, r2, #9
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	461a      	mov	r2, r3
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	f7fa f980 	bl	8000c08 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4613      	mov	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e04a      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	461a      	mov	r2, r3
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	ea02 0400 	and.w	r4, r2, r0
 800692a:	ea03 0501 	and.w	r5, r3, r1
 800692e:	4620      	mov	r0, r4
 8006930:	4629      	mov	r1, r5
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	014b      	lsls	r3, r1, #5
 800693c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006940:	0142      	lsls	r2, r0, #5
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	1b00      	subs	r0, r0, r4
 8006948:	eb61 0105 	sbc.w	r1, r1, r5
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	018b      	lsls	r3, r1, #6
 8006956:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800695a:	0182      	lsls	r2, r0, #6
 800695c:	1a12      	subs	r2, r2, r0
 800695e:	eb63 0301 	sbc.w	r3, r3, r1
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f04f 0100 	mov.w	r1, #0
 800696a:	00d9      	lsls	r1, r3, #3
 800696c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006970:	00d0      	lsls	r0, r2, #3
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	1912      	adds	r2, r2, r4
 8006978:	eb45 0303 	adc.w	r3, r5, r3
 800697c:	f04f 0000 	mov.w	r0, #0
 8006980:	f04f 0100 	mov.w	r1, #0
 8006984:	0299      	lsls	r1, r3, #10
 8006986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800698a:	0290      	lsls	r0, r2, #10
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	f7fa f934 	bl	8000c08 <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4613      	mov	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	3301      	adds	r3, #1
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	60bb      	str	r3, [r7, #8]
      break;
 80069c2:	e002      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80069c6:	60bb      	str	r3, [r7, #8]
      break;
 80069c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ca:	68bb      	ldr	r3, [r7, #8]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800
 80069dc:	00f42400 	.word	0x00f42400
 80069e0:	007a1200 	.word	0x007a1200

080069e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069e8:	4b03      	ldr	r3, [pc, #12]	; (80069f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069ea:	681b      	ldr	r3, [r3, #0]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	200005b4 	.word	0x200005b4

080069fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a00:	f7ff fff0 	bl	80069e4 <HAL_RCC_GetHCLKFreq>
 8006a04:	4602      	mov	r2, r0
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	0a9b      	lsrs	r3, r3, #10
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	4903      	ldr	r1, [pc, #12]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a12:	5ccb      	ldrb	r3, [r1, r3]
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	0801fa08 	.word	0x0801fa08

08006a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a28:	f7ff ffdc 	bl	80069e4 <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0b5b      	lsrs	r3, r3, #13
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0801fa08 	.word	0x0801fa08

08006a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	220f      	movs	r2, #15
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0203 	and.w	r2, r3, #3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <HAL_RCC_GetClockConfig+0x60>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0207 	and.w	r2, r3, #7
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40023c00 	.word	0x40023c00

08006ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f839 	bl	8006b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 f9d8 	bl	8006ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d001      	beq.n	8006b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e04e      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a23      	ldr	r2, [pc, #140]	; (8006c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba6:	d01d      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a19      	ldr	r2, [pc, #100]	; (8006c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x80>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d111      	bne.n	8006c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b06      	cmp	r3, #6
 8006bf4:	d010      	beq.n	8006c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	e007      	b.n	8006c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40001800 	.word	0x40001800

08006c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8ee 	bl	8006e68 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8e0 	bl	8006e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8f1 	bl	8006e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0204 	mvn.w	r2, #4
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8c4 	bl	8006e68 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8b6 	bl	8006e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8c7 	bl	8006e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0208 	mvn.w	r2, #8
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f89a 	bl	8006e68 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f88c 	bl	8006e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f89d 	bl	8006e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d122      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0210 	mvn.w	r2, #16
 8006d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2208      	movs	r2, #8
 8006d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f870 	bl	8006e68 <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f862 	bl	8006e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f873 	bl	8006e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0201 	mvn.w	r2, #1
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fd fbc2 	bl	800454c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f902 	bl	8006ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d10e      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d107      	bne.n	8006e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f838 	bl	8006e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d10e      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b20      	cmp	r3, #32
 8006e3a:	d107      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0220 	mvn.w	r2, #32
 8006e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8cc 	bl	8006fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a40      	ldr	r2, [pc, #256]	; (8006fb8 <TIM_Base_SetConfig+0x114>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d013      	beq.n	8006ee4 <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec2:	d00f      	beq.n	8006ee4 <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a3d      	ldr	r2, [pc, #244]	; (8006fbc <TIM_Base_SetConfig+0x118>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00b      	beq.n	8006ee4 <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3c      	ldr	r2, [pc, #240]	; (8006fc0 <TIM_Base_SetConfig+0x11c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d007      	beq.n	8006ee4 <TIM_Base_SetConfig+0x40>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3b      	ldr	r2, [pc, #236]	; (8006fc4 <TIM_Base_SetConfig+0x120>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_Base_SetConfig+0x40>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a3a      	ldr	r2, [pc, #232]	; (8006fc8 <TIM_Base_SetConfig+0x124>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d108      	bne.n	8006ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2f      	ldr	r2, [pc, #188]	; (8006fb8 <TIM_Base_SetConfig+0x114>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d02b      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f04:	d027      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <TIM_Base_SetConfig+0x118>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d023      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2b      	ldr	r2, [pc, #172]	; (8006fc0 <TIM_Base_SetConfig+0x11c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d01f      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2a      	ldr	r2, [pc, #168]	; (8006fc4 <TIM_Base_SetConfig+0x120>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01b      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a29      	ldr	r2, [pc, #164]	; (8006fc8 <TIM_Base_SetConfig+0x124>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d017      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a28      	ldr	r2, [pc, #160]	; (8006fcc <TIM_Base_SetConfig+0x128>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a27      	ldr	r2, [pc, #156]	; (8006fd0 <TIM_Base_SetConfig+0x12c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00f      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <TIM_Base_SetConfig+0x130>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00b      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <TIM_Base_SetConfig+0x134>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d007      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a24      	ldr	r2, [pc, #144]	; (8006fdc <TIM_Base_SetConfig+0x138>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <TIM_Base_SetConfig+0x13c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <TIM_Base_SetConfig+0x114>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0xf8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a0c      	ldr	r2, [pc, #48]	; (8006fc8 <TIM_Base_SetConfig+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d103      	bne.n	8006fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	615a      	str	r2, [r3, #20]
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40000c00 	.word	0x40000c00
 8006fc8:	40010400 	.word	0x40010400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40014400 	.word	0x40014400
 8006fd4:	40014800 	.word	0x40014800
 8006fd8:	40001800 	.word	0x40001800
 8006fdc:	40001c00 	.word	0x40001c00
 8006fe0:	40002000 	.word	0x40002000

08006fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e03f      	b.n	800709e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fd faca 	bl	80045cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2224      	movs	r2, #36	; 0x24
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800704e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f929 	bl	80072a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b08a      	sub	sp, #40	; 0x28
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	d17c      	bne.n	80071c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <HAL_UART_Transmit+0x2c>
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e075      	b.n	80071c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_UART_Transmit+0x3e>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e06e      	b.n	80071c2 <HAL_UART_Transmit+0x11c>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2221      	movs	r2, #33	; 0x21
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070fa:	f7fd fc5f 	bl	80049bc <HAL_GetTick>
 80070fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	88fa      	ldrh	r2, [r7, #6]
 8007104:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007114:	d108      	bne.n	8007128 <HAL_UART_Transmit+0x82>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	e003      	b.n	8007130 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007138:	e02a      	b.n	8007190 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2200      	movs	r2, #0
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f840 	bl	80071ca <UART_WaitOnFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e036      	b.n	80071c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	3302      	adds	r3, #2
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	e007      	b.n	8007182 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	3301      	adds	r3, #1
 8007180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1cf      	bne.n	800713a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	2140      	movs	r1, #64	; 0x40
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f810 	bl	80071ca <UART_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e006      	b.n	80071c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b090      	sub	sp, #64	; 0x40
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071da:	e050      	b.n	800727e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e2:	d04c      	beq.n	800727e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0x30>
 80071ea:	f7fd fbe7 	bl	80049bc <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d241      	bcs.n	800727e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800721a:	637a      	str	r2, [r7, #52]	; 0x34
 800721c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3314      	adds	r3, #20
 8007234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	613b      	str	r3, [r7, #16]
   return(result);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	63bb      	str	r3, [r7, #56]	; 0x38
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3314      	adds	r3, #20
 800724c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724e:	623a      	str	r2, [r7, #32]
 8007250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	69f9      	ldr	r1, [r7, #28]
 8007254:	6a3a      	ldr	r2, [r7, #32]
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	61bb      	str	r3, [r7, #24]
   return(result);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e5      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e00f      	b.n	800729e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4013      	ands	r3, r2
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	bf0c      	ite	eq
 800728e:	2301      	moveq	r3, #1
 8007290:	2300      	movne	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	429a      	cmp	r2, r3
 800729a:	d09f      	beq.n	80071dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3740      	adds	r7, #64	; 0x40
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	b09f      	sub	sp, #124	; 0x7c
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	68d9      	ldr	r1, [r3, #12]
 80072c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	ea40 0301 	orr.w	r3, r0, r1
 80072c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	431a      	orrs	r2, r3
 80072da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4313      	orrs	r3, r2
 80072e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072ec:	f021 010c 	bic.w	r1, r1, #12
 80072f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f6:	430b      	orrs	r3, r1
 80072f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	6999      	ldr	r1, [r3, #24]
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	ea40 0301 	orr.w	r3, r0, r1
 8007310:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4bc5      	ldr	r3, [pc, #788]	; (800762c <UART_SetConfig+0x384>)
 8007318:	429a      	cmp	r2, r3
 800731a:	d004      	beq.n	8007326 <UART_SetConfig+0x7e>
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4bc3      	ldr	r3, [pc, #780]	; (8007630 <UART_SetConfig+0x388>)
 8007322:	429a      	cmp	r2, r3
 8007324:	d103      	bne.n	800732e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007326:	f7ff fb7d 	bl	8006a24 <HAL_RCC_GetPCLK2Freq>
 800732a:	6778      	str	r0, [r7, #116]	; 0x74
 800732c:	e002      	b.n	8007334 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800732e:	f7ff fb65 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 8007332:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733c:	f040 80b6 	bne.w	80074ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007342:	461c      	mov	r4, r3
 8007344:	f04f 0500 	mov.w	r5, #0
 8007348:	4622      	mov	r2, r4
 800734a:	462b      	mov	r3, r5
 800734c:	1891      	adds	r1, r2, r2
 800734e:	6439      	str	r1, [r7, #64]	; 0x40
 8007350:	415b      	adcs	r3, r3
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
 8007354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007358:	1912      	adds	r2, r2, r4
 800735a:	eb45 0303 	adc.w	r3, r5, r3
 800735e:	f04f 0000 	mov.w	r0, #0
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	00d9      	lsls	r1, r3, #3
 8007368:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800736c:	00d0      	lsls	r0, r2, #3
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	1911      	adds	r1, r2, r4
 8007374:	6639      	str	r1, [r7, #96]	; 0x60
 8007376:	416b      	adcs	r3, r5
 8007378:	667b      	str	r3, [r7, #100]	; 0x64
 800737a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	1891      	adds	r1, r2, r2
 8007386:	63b9      	str	r1, [r7, #56]	; 0x38
 8007388:	415b      	adcs	r3, r3
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007390:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007394:	f7f9 fc38 	bl	8000c08 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4ba5      	ldr	r3, [pc, #660]	; (8007634 <UART_SetConfig+0x38c>)
 800739e:	fba3 2302 	umull	r2, r3, r3, r2
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	011e      	lsls	r6, r3, #4
 80073a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a8:	461c      	mov	r4, r3
 80073aa:	f04f 0500 	mov.w	r5, #0
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	1891      	adds	r1, r2, r2
 80073b4:	6339      	str	r1, [r7, #48]	; 0x30
 80073b6:	415b      	adcs	r3, r3
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073be:	1912      	adds	r2, r2, r4
 80073c0:	eb45 0303 	adc.w	r3, r5, r3
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	00d9      	lsls	r1, r3, #3
 80073ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073d2:	00d0      	lsls	r0, r2, #3
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	1911      	adds	r1, r2, r4
 80073da:	65b9      	str	r1, [r7, #88]	; 0x58
 80073dc:	416b      	adcs	r3, r5
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	1891      	adds	r1, r2, r2
 80073ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80073ee:	415b      	adcs	r3, r3
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073fa:	f7f9 fc05 	bl	8000c08 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4b8c      	ldr	r3, [pc, #560]	; (8007634 <UART_SetConfig+0x38c>)
 8007404:	fba3 1302 	umull	r1, r3, r3, r2
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	2164      	movs	r1, #100	; 0x64
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	3332      	adds	r3, #50	; 0x32
 8007416:	4a87      	ldr	r2, [pc, #540]	; (8007634 <UART_SetConfig+0x38c>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007424:	441e      	add	r6, r3
 8007426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007428:	4618      	mov	r0, r3
 800742a:	f04f 0100 	mov.w	r1, #0
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	1894      	adds	r4, r2, r2
 8007434:	623c      	str	r4, [r7, #32]
 8007436:	415b      	adcs	r3, r3
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
 800743a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800743e:	1812      	adds	r2, r2, r0
 8007440:	eb41 0303 	adc.w	r3, r1, r3
 8007444:	f04f 0400 	mov.w	r4, #0
 8007448:	f04f 0500 	mov.w	r5, #0
 800744c:	00dd      	lsls	r5, r3, #3
 800744e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007452:	00d4      	lsls	r4, r2, #3
 8007454:	4622      	mov	r2, r4
 8007456:	462b      	mov	r3, r5
 8007458:	1814      	adds	r4, r2, r0
 800745a:	653c      	str	r4, [r7, #80]	; 0x50
 800745c:	414b      	adcs	r3, r1
 800745e:	657b      	str	r3, [r7, #84]	; 0x54
 8007460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	461a      	mov	r2, r3
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	1891      	adds	r1, r2, r2
 800746c:	61b9      	str	r1, [r7, #24]
 800746e:	415b      	adcs	r3, r3
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007476:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800747a:	f7f9 fbc5 	bl	8000c08 <__aeabi_uldivmod>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4b6c      	ldr	r3, [pc, #432]	; (8007634 <UART_SetConfig+0x38c>)
 8007484:	fba3 1302 	umull	r1, r3, r3, r2
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	2164      	movs	r1, #100	; 0x64
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	3332      	adds	r3, #50	; 0x32
 8007496:	4a67      	ldr	r2, [pc, #412]	; (8007634 <UART_SetConfig+0x38c>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	f003 0207 	and.w	r2, r3, #7
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4432      	add	r2, r6
 80074a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074aa:	e0b9      	b.n	8007620 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ae:	461c      	mov	r4, r3
 80074b0:	f04f 0500 	mov.w	r5, #0
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	6139      	str	r1, [r7, #16]
 80074bc:	415b      	adcs	r3, r3
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074c4:	1912      	adds	r2, r2, r4
 80074c6:	eb45 0303 	adc.w	r3, r5, r3
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	00d9      	lsls	r1, r3, #3
 80074d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d8:	00d0      	lsls	r0, r2, #3
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	eb12 0804 	adds.w	r8, r2, r4
 80074e2:	eb43 0905 	adc.w	r9, r3, r5
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f04f 0100 	mov.w	r1, #0
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	008b      	lsls	r3, r1, #2
 80074fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074fe:	0082      	lsls	r2, r0, #2
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f9 fb80 	bl	8000c08 <__aeabi_uldivmod>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4b49      	ldr	r3, [pc, #292]	; (8007634 <UART_SetConfig+0x38c>)
 800750e:	fba3 2302 	umull	r2, r3, r3, r2
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	011e      	lsls	r6, r3, #4
 8007516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007518:	4618      	mov	r0, r3
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	1894      	adds	r4, r2, r2
 8007524:	60bc      	str	r4, [r7, #8]
 8007526:	415b      	adcs	r3, r3
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800752e:	1812      	adds	r2, r2, r0
 8007530:	eb41 0303 	adc.w	r3, r1, r3
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	f04f 0500 	mov.w	r5, #0
 800753c:	00dd      	lsls	r5, r3, #3
 800753e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007542:	00d4      	lsls	r4, r2, #3
 8007544:	4622      	mov	r2, r4
 8007546:	462b      	mov	r3, r5
 8007548:	1814      	adds	r4, r2, r0
 800754a:	64bc      	str	r4, [r7, #72]	; 0x48
 800754c:	414b      	adcs	r3, r1
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	f04f 0100 	mov.w	r1, #0
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	008b      	lsls	r3, r1, #2
 8007564:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007568:	0082      	lsls	r2, r0, #2
 800756a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800756e:	f7f9 fb4b 	bl	8000c08 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <UART_SetConfig+0x38c>)
 8007578:	fba3 1302 	umull	r1, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	2164      	movs	r1, #100	; 0x64
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	3332      	adds	r3, #50	; 0x32
 800758a:	4a2a      	ldr	r2, [pc, #168]	; (8007634 <UART_SetConfig+0x38c>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007596:	441e      	add	r6, r3
 8007598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800759a:	4618      	mov	r0, r3
 800759c:	f04f 0100 	mov.w	r1, #0
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	1894      	adds	r4, r2, r2
 80075a6:	603c      	str	r4, [r7, #0]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b0:	1812      	adds	r2, r2, r0
 80075b2:	eb41 0303 	adc.w	r3, r1, r3
 80075b6:	f04f 0400 	mov.w	r4, #0
 80075ba:	f04f 0500 	mov.w	r5, #0
 80075be:	00dd      	lsls	r5, r3, #3
 80075c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075c4:	00d4      	lsls	r4, r2, #3
 80075c6:	4622      	mov	r2, r4
 80075c8:	462b      	mov	r3, r5
 80075ca:	eb12 0a00 	adds.w	sl, r2, r0
 80075ce:	eb43 0b01 	adc.w	fp, r3, r1
 80075d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f04f 0100 	mov.w	r1, #0
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	008b      	lsls	r3, r1, #2
 80075e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075ea:	0082      	lsls	r2, r0, #2
 80075ec:	4650      	mov	r0, sl
 80075ee:	4659      	mov	r1, fp
 80075f0:	f7f9 fb0a 	bl	8000c08 <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <UART_SetConfig+0x38c>)
 80075fa:	fba3 1302 	umull	r1, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2164      	movs	r1, #100	; 0x64
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	; 0x32
 800760c:	4a09      	ldr	r2, [pc, #36]	; (8007634 <UART_SetConfig+0x38c>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4432      	add	r2, r6
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	377c      	adds	r7, #124	; 0x7c
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	bf00      	nop
 800762c:	40011000 	.word	0x40011000
 8007630:	40011400 	.word	0x40011400
 8007634:	51eb851f 	.word	0x51eb851f

08007638 <MX_LWIP_Init>:
  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */
#else
  void MX_LWIP_Init(void)
  {
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af04      	add	r7, sp, #16
    /* IP addresses initialization */
    IP_ADDRESS[0] = 192;
 800763e:	4b8d      	ldr	r3, [pc, #564]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007640:	22c0      	movs	r2, #192	; 0xc0
 8007642:	701a      	strb	r2, [r3, #0]
    IP_ADDRESS[1] = 168;
 8007644:	4b8b      	ldr	r3, [pc, #556]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007646:	22a8      	movs	r2, #168	; 0xa8
 8007648:	705a      	strb	r2, [r3, #1]
    IP_ADDRESS[2] = 18;
 800764a:	4b8a      	ldr	r3, [pc, #552]	; (8007874 <MX_LWIP_Init+0x23c>)
 800764c:	2212      	movs	r2, #18
 800764e:	709a      	strb	r2, [r3, #2]
    IP_ADDRESS[3] = 111;
 8007650:	4b88      	ldr	r3, [pc, #544]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007652:	226f      	movs	r2, #111	; 0x6f
 8007654:	70da      	strb	r2, [r3, #3]
    NETMASK_ADDRESS[0] = 255;
 8007656:	4b88      	ldr	r3, [pc, #544]	; (8007878 <MX_LWIP_Init+0x240>)
 8007658:	22ff      	movs	r2, #255	; 0xff
 800765a:	701a      	strb	r2, [r3, #0]
    NETMASK_ADDRESS[1] = 255;
 800765c:	4b86      	ldr	r3, [pc, #536]	; (8007878 <MX_LWIP_Init+0x240>)
 800765e:	22ff      	movs	r2, #255	; 0xff
 8007660:	705a      	strb	r2, [r3, #1]
    NETMASK_ADDRESS[2] = 255;
 8007662:	4b85      	ldr	r3, [pc, #532]	; (8007878 <MX_LWIP_Init+0x240>)
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	709a      	strb	r2, [r3, #2]
    NETMASK_ADDRESS[3] = 0;
 8007668:	4b83      	ldr	r3, [pc, #524]	; (8007878 <MX_LWIP_Init+0x240>)
 800766a:	2200      	movs	r2, #0
 800766c:	70da      	strb	r2, [r3, #3]
    GATEWAY_ADDRESS[0] = 192;
 800766e:	4b83      	ldr	r3, [pc, #524]	; (800787c <MX_LWIP_Init+0x244>)
 8007670:	22c0      	movs	r2, #192	; 0xc0
 8007672:	701a      	strb	r2, [r3, #0]
    GATEWAY_ADDRESS[1] = 168;
 8007674:	4b81      	ldr	r3, [pc, #516]	; (800787c <MX_LWIP_Init+0x244>)
 8007676:	22a8      	movs	r2, #168	; 0xa8
 8007678:	705a      	strb	r2, [r3, #1]
    GATEWAY_ADDRESS[2] = 18;
 800767a:	4b80      	ldr	r3, [pc, #512]	; (800787c <MX_LWIP_Init+0x244>)
 800767c:	2212      	movs	r2, #18
 800767e:	709a      	strb	r2, [r3, #2]
    GATEWAY_ADDRESS[3] = 1;
 8007680:	4b7e      	ldr	r3, [pc, #504]	; (800787c <MX_LWIP_Init+0x244>)
 8007682:	2201      	movs	r2, #1
 8007684:	70da      	strb	r2, [r3, #3]

  /* USER CODE BEGIN IP_ADDRESSES */
  /* USER CODE END IP_ADDRESSES */

    /* Initilialize the LwIP stack without RTOS */
    lwip_init();
 8007686:	f002 fd69 	bl	800a15c <lwip_init>

    /* IP addresses initialization without DHCP (IPv4) */
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);IP4_ADDR(
 800768a:	4b7a      	ldr	r3, [pc, #488]	; (8007874 <MX_LWIP_Init+0x23c>)
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	061a      	lsls	r2, r3, #24
 8007690:	4b78      	ldr	r3, [pc, #480]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	431a      	orrs	r2, r3
 8007698:	4b76      	ldr	r3, [pc, #472]	; (8007874 <MX_LWIP_Init+0x23c>)
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	4313      	orrs	r3, r2
 80076a0:	4a74      	ldr	r2, [pc, #464]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076a2:	78d2      	ldrb	r2, [r2, #3]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	061a      	lsls	r2, r3, #24
 80076a8:	4b72      	ldr	r3, [pc, #456]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	0619      	lsls	r1, r3, #24
 80076ae:	4b71      	ldr	r3, [pc, #452]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	4319      	orrs	r1, r3
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076b8:	789b      	ldrb	r3, [r3, #2]
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	430b      	orrs	r3, r1
 80076be:	496d      	ldr	r1, [pc, #436]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076c0:	78c9      	ldrb	r1, [r1, #3]
 80076c2:	430b      	orrs	r3, r1
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076ca:	431a      	orrs	r2, r3
 80076cc:	4b69      	ldr	r3, [pc, #420]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	0619      	lsls	r1, r3, #24
 80076d2:	4b68      	ldr	r3, [pc, #416]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	041b      	lsls	r3, r3, #16
 80076d8:	4319      	orrs	r1, r3
 80076da:	4b66      	ldr	r3, [pc, #408]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076dc:	789b      	ldrb	r3, [r3, #2]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	430b      	orrs	r3, r1
 80076e2:	4964      	ldr	r1, [pc, #400]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076e4:	78c9      	ldrb	r1, [r1, #3]
 80076e6:	430b      	orrs	r3, r1
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076ee:	431a      	orrs	r2, r3
 80076f0:	4b60      	ldr	r3, [pc, #384]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	0619      	lsls	r1, r3, #24
 80076f6:	4b5f      	ldr	r3, [pc, #380]	; (8007874 <MX_LWIP_Init+0x23c>)
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	4319      	orrs	r1, r3
 80076fe:	4b5d      	ldr	r3, [pc, #372]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007700:	789b      	ldrb	r3, [r3, #2]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	430b      	orrs	r3, r1
 8007706:	495b      	ldr	r1, [pc, #364]	; (8007874 <MX_LWIP_Init+0x23c>)
 8007708:	78c9      	ldrb	r1, [r1, #3]
 800770a:	430b      	orrs	r3, r1
 800770c:	0e1b      	lsrs	r3, r3, #24
 800770e:	4313      	orrs	r3, r2
 8007710:	4a5b      	ldr	r2, [pc, #364]	; (8007880 <MX_LWIP_Init+0x248>)
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b58      	ldr	r3, [pc, #352]	; (8007878 <MX_LWIP_Init+0x240>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	061a      	lsls	r2, r3, #24
 800771a:	4b57      	ldr	r3, [pc, #348]	; (8007878 <MX_LWIP_Init+0x240>)
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	431a      	orrs	r2, r3
 8007722:	4b55      	ldr	r3, [pc, #340]	; (8007878 <MX_LWIP_Init+0x240>)
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	4313      	orrs	r3, r2
 800772a:	4a53      	ldr	r2, [pc, #332]	; (8007878 <MX_LWIP_Init+0x240>)
 800772c:	78d2      	ldrb	r2, [r2, #3]
 800772e:	4313      	orrs	r3, r2
 8007730:	061a      	lsls	r2, r3, #24
 8007732:	4b51      	ldr	r3, [pc, #324]	; (8007878 <MX_LWIP_Init+0x240>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	0619      	lsls	r1, r3, #24
 8007738:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <MX_LWIP_Init+0x240>)
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	041b      	lsls	r3, r3, #16
 800773e:	4319      	orrs	r1, r3
 8007740:	4b4d      	ldr	r3, [pc, #308]	; (8007878 <MX_LWIP_Init+0x240>)
 8007742:	789b      	ldrb	r3, [r3, #2]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	430b      	orrs	r3, r1
 8007748:	494b      	ldr	r1, [pc, #300]	; (8007878 <MX_LWIP_Init+0x240>)
 800774a:	78c9      	ldrb	r1, [r1, #3]
 800774c:	430b      	orrs	r3, r1
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007754:	431a      	orrs	r2, r3
 8007756:	4b48      	ldr	r3, [pc, #288]	; (8007878 <MX_LWIP_Init+0x240>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	0619      	lsls	r1, r3, #24
 800775c:	4b46      	ldr	r3, [pc, #280]	; (8007878 <MX_LWIP_Init+0x240>)
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	041b      	lsls	r3, r3, #16
 8007762:	4319      	orrs	r1, r3
 8007764:	4b44      	ldr	r3, [pc, #272]	; (8007878 <MX_LWIP_Init+0x240>)
 8007766:	789b      	ldrb	r3, [r3, #2]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	430b      	orrs	r3, r1
 800776c:	4942      	ldr	r1, [pc, #264]	; (8007878 <MX_LWIP_Init+0x240>)
 800776e:	78c9      	ldrb	r1, [r1, #3]
 8007770:	430b      	orrs	r3, r1
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007778:	431a      	orrs	r2, r3
 800777a:	4b3f      	ldr	r3, [pc, #252]	; (8007878 <MX_LWIP_Init+0x240>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	0619      	lsls	r1, r3, #24
 8007780:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <MX_LWIP_Init+0x240>)
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	4319      	orrs	r1, r3
 8007788:	4b3b      	ldr	r3, [pc, #236]	; (8007878 <MX_LWIP_Init+0x240>)
 800778a:	789b      	ldrb	r3, [r3, #2]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	430b      	orrs	r3, r1
 8007790:	4939      	ldr	r1, [pc, #228]	; (8007878 <MX_LWIP_Init+0x240>)
 8007792:	78c9      	ldrb	r1, [r1, #3]
 8007794:	430b      	orrs	r3, r1
 8007796:	0e1b      	lsrs	r3, r3, #24
 8007798:	4313      	orrs	r3, r2
 800779a:	4a3a      	ldr	r2, [pc, #232]	; (8007884 <MX_LWIP_Init+0x24c>)
 800779c:	6013      	str	r3, [r2, #0]
  		&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2],
  		NETMASK_ADDRESS[3]);IP4_ADDR(&gw, GATEWAY_ADDRESS[0],
 800779e:	4b37      	ldr	r3, [pc, #220]	; (800787c <MX_LWIP_Init+0x244>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	061a      	lsls	r2, r3, #24
 80077a4:	4b35      	ldr	r3, [pc, #212]	; (800787c <MX_LWIP_Init+0x244>)
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	431a      	orrs	r2, r3
 80077ac:	4b33      	ldr	r3, [pc, #204]	; (800787c <MX_LWIP_Init+0x244>)
 80077ae:	789b      	ldrb	r3, [r3, #2]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	4313      	orrs	r3, r2
 80077b4:	4a31      	ldr	r2, [pc, #196]	; (800787c <MX_LWIP_Init+0x244>)
 80077b6:	78d2      	ldrb	r2, [r2, #3]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	061a      	lsls	r2, r3, #24
 80077bc:	4b2f      	ldr	r3, [pc, #188]	; (800787c <MX_LWIP_Init+0x244>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	0619      	lsls	r1, r3, #24
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <MX_LWIP_Init+0x244>)
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	4319      	orrs	r1, r3
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <MX_LWIP_Init+0x244>)
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	430b      	orrs	r3, r1
 80077d2:	492a      	ldr	r1, [pc, #168]	; (800787c <MX_LWIP_Init+0x244>)
 80077d4:	78c9      	ldrb	r1, [r1, #3]
 80077d6:	430b      	orrs	r3, r1
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077de:	431a      	orrs	r2, r3
 80077e0:	4b26      	ldr	r3, [pc, #152]	; (800787c <MX_LWIP_Init+0x244>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	0619      	lsls	r1, r3, #24
 80077e6:	4b25      	ldr	r3, [pc, #148]	; (800787c <MX_LWIP_Init+0x244>)
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	4319      	orrs	r1, r3
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <MX_LWIP_Init+0x244>)
 80077f0:	789b      	ldrb	r3, [r3, #2]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	430b      	orrs	r3, r1
 80077f6:	4921      	ldr	r1, [pc, #132]	; (800787c <MX_LWIP_Init+0x244>)
 80077f8:	78c9      	ldrb	r1, [r1, #3]
 80077fa:	430b      	orrs	r3, r1
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007802:	431a      	orrs	r2, r3
 8007804:	4b1d      	ldr	r3, [pc, #116]	; (800787c <MX_LWIP_Init+0x244>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	0619      	lsls	r1, r3, #24
 800780a:	4b1c      	ldr	r3, [pc, #112]	; (800787c <MX_LWIP_Init+0x244>)
 800780c:	785b      	ldrb	r3, [r3, #1]
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	4319      	orrs	r1, r3
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <MX_LWIP_Init+0x244>)
 8007814:	789b      	ldrb	r3, [r3, #2]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	430b      	orrs	r3, r1
 800781a:	4918      	ldr	r1, [pc, #96]	; (800787c <MX_LWIP_Init+0x244>)
 800781c:	78c9      	ldrb	r1, [r1, #3]
 800781e:	430b      	orrs	r3, r1
 8007820:	0e1b      	lsrs	r3, r3, #24
 8007822:	4313      	orrs	r3, r2
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <MX_LWIP_Init+0x250>)
 8007826:	6013      	str	r3, [r2, #0]
  		GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007828:	4b18      	ldr	r3, [pc, #96]	; (800788c <MX_LWIP_Init+0x254>)
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	4b18      	ldr	r3, [pc, #96]	; (8007890 <MX_LWIP_Init+0x258>)
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	2300      	movs	r3, #0
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <MX_LWIP_Init+0x250>)
 8007836:	4a13      	ldr	r2, [pc, #76]	; (8007884 <MX_LWIP_Init+0x24c>)
 8007838:	4911      	ldr	r1, [pc, #68]	; (8007880 <MX_LWIP_Init+0x248>)
 800783a:	4816      	ldr	r0, [pc, #88]	; (8007894 <MX_LWIP_Init+0x25c>)
 800783c:	f003 f934 	bl	800aaa8 <netif_add>

    /* Registers the default network interface */
    netif_set_default(&gnetif);
 8007840:	4814      	ldr	r0, [pc, #80]	; (8007894 <MX_LWIP_Init+0x25c>)
 8007842:	f003 faeb 	bl	800ae1c <netif_set_default>

    if (netif_is_link_up(&gnetif)
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <MX_LWIP_Init+0x25c>)
 8007848:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <MX_LWIP_Init+0x228>
  )
    {
      /* When the netif is fully configured this function must be called */
      netif_set_up(&gnetif);
 8007858:	480e      	ldr	r0, [pc, #56]	; (8007894 <MX_LWIP_Init+0x25c>)
 800785a:	f003 faef 	bl	800ae3c <netif_set_up>
 800785e:	e002      	b.n	8007866 <MX_LWIP_Init+0x22e>
    }
    else
    {
      /* When the netif link is down this function must be called */
      netif_set_down(&gnetif);
 8007860:	480c      	ldr	r0, [pc, #48]	; (8007894 <MX_LWIP_Init+0x25c>)
 8007862:	f003 fb57 	bl	800af14 <netif_set_down>
    }

    /* Set the link callback function, this function is called on change of link status*/
    netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007866:	490c      	ldr	r1, [pc, #48]	; (8007898 <MX_LWIP_Init+0x260>)
 8007868:	480a      	ldr	r0, [pc, #40]	; (8007894 <MX_LWIP_Init+0x25c>)
 800786a:	f003 fb85 	bl	800af78 <netif_set_link_callback>

    /* Create the Ethernet link handler thread */
  }
 800786e:	bf00      	nop
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20006e38 	.word	0x20006e38
 8007878:	20006e34 	.word	0x20006e34
 800787c:	20006df4 	.word	0x20006df4
 8007880:	20006e30 	.word	0x20006e30
 8007884:	20006e3c 	.word	0x20006e3c
 8007888:	20006e40 	.word	0x20006e40
 800788c:	08016b15 	.word	0x08016b15
 8007890:	08007e29 	.word	0x08007e29
 8007894:	20006df8 	.word	0x20006df8
 8007898:	08007e95 	.word	0x08007e95

0800789c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08e      	sub	sp, #56	; 0x38
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	605a      	str	r2, [r3, #4]
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a46      	ldr	r2, [pc, #280]	; (80079d4 <HAL_ETH_MspInit+0x138>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f040 8085 	bne.w	80079ca <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80078c0:	2300      	movs	r3, #0
 80078c2:	623b      	str	r3, [r7, #32]
 80078c4:	4b44      	ldr	r3, [pc, #272]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	4a43      	ldr	r2, [pc, #268]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80078ce:	6313      	str	r3, [r2, #48]	; 0x30
 80078d0:	4b41      	ldr	r3, [pc, #260]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d8:	623b      	str	r3, [r7, #32]
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	2300      	movs	r3, #0
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	4a3c      	ldr	r2, [pc, #240]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078ea:	6313      	str	r3, [r2, #48]	; 0x30
 80078ec:	4b3a      	ldr	r3, [pc, #232]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	4a35      	ldr	r2, [pc, #212]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007906:	6313      	str	r3, [r2, #48]	; 0x30
 8007908:	4b33      	ldr	r3, [pc, #204]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	4a2e      	ldr	r2, [pc, #184]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 800791e:	f043 0304 	orr.w	r3, r3, #4
 8007922:	6313      	str	r3, [r2, #48]	; 0x30
 8007924:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	6313      	str	r3, [r2, #48]	; 0x30
 8007940:	4b25      	ldr	r3, [pc, #148]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	4a20      	ldr	r2, [pc, #128]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 8007956:	f043 0302 	orr.w	r3, r3, #2
 800795a:	6313      	str	r3, [r2, #48]	; 0x30
 800795c:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <HAL_ETH_MspInit+0x13c>)
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007968:	2332      	movs	r3, #50	; 0x32
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796c:	2302      	movs	r3, #2
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007970:	2300      	movs	r3, #0
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007974:	2303      	movs	r3, #3
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007978:	230b      	movs	r3, #11
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800797c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007980:	4619      	mov	r1, r3
 8007982:	4816      	ldr	r0, [pc, #88]	; (80079dc <HAL_ETH_MspInit+0x140>)
 8007984:	f7fe fa52 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007988:	2386      	movs	r3, #134	; 0x86
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800798c:	2302      	movs	r3, #2
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007990:	2300      	movs	r3, #0
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007994:	2303      	movs	r3, #3
 8007996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007998:	230b      	movs	r3, #11
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800799c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a0:	4619      	mov	r1, r3
 80079a2:	480f      	ldr	r0, [pc, #60]	; (80079e0 <HAL_ETH_MspInit+0x144>)
 80079a4:	f7fe fa42 	bl	8005e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80079a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ae:	2302      	movs	r3, #2
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079b6:	2303      	movs	r3, #3
 80079b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079ba:	230b      	movs	r3, #11
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079c2:	4619      	mov	r1, r3
 80079c4:	4807      	ldr	r0, [pc, #28]	; (80079e4 <HAL_ETH_MspInit+0x148>)
 80079c6:	f7fe fa31 	bl	8005e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80079ca:	bf00      	nop
 80079cc:	3738      	adds	r7, #56	; 0x38
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40028000 	.word	0x40028000
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40020800 	.word	0x40020800
 80079e0:	40020000 	.word	0x40020000
 80079e4:	40020400 	.word	0x40020400

080079e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80079f4:	4b4d      	ldr	r3, [pc, #308]	; (8007b2c <low_level_init+0x144>)
 80079f6:	4a4e      	ldr	r2, [pc, #312]	; (8007b30 <low_level_init+0x148>)
 80079f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80079fa:	4b4c      	ldr	r3, [pc, #304]	; (8007b2c <low_level_init+0x144>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007a00:	4b4a      	ldr	r3, [pc, #296]	; (8007b2c <low_level_init+0x144>)
 8007a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a06:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a08:	4b48      	ldr	r3, [pc, #288]	; (8007b2c <low_level_init+0x144>)
 8007a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007a10:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <low_level_init+0x144>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007a16:	2300      	movs	r3, #0
 8007a18:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007a1a:	2380      	movs	r3, #128	; 0x80
 8007a1c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007a1e:	23e1      	movs	r3, #225	; 0xe1
 8007a20:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007a22:	2300      	movs	r3, #0
 8007a24:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007a26:	2300      	movs	r3, #0
 8007a28:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007a2e:	4a3f      	ldr	r2, [pc, #252]	; (8007b2c <low_level_init+0x144>)
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007a36:	4b3d      	ldr	r3, [pc, #244]	; (8007b2c <low_level_init+0x144>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007a3c:	4b3b      	ldr	r3, [pc, #236]	; (8007b2c <low_level_init+0x144>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007a42:	4b3a      	ldr	r3, [pc, #232]	; (8007b2c <low_level_init+0x144>)
 8007a44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007a48:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007a4a:	4838      	ldr	r0, [pc, #224]	; (8007b2c <low_level_init+0x144>)
 8007a4c:	f7fd f8c8 	bl	8004be0 <HAL_ETH_Init>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d108      	bne.n	8007a6c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a60:	f043 0304 	orr.w	r3, r3, #4
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	4a31      	ldr	r2, [pc, #196]	; (8007b34 <low_level_init+0x14c>)
 8007a70:	4931      	ldr	r1, [pc, #196]	; (8007b38 <low_level_init+0x150>)
 8007a72:	482e      	ldr	r0, [pc, #184]	; (8007b2c <low_level_init+0x144>)
 8007a74:	f7fd fa50 	bl	8004f18 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007a78:	2304      	movs	r3, #4
 8007a7a:	4a30      	ldr	r2, [pc, #192]	; (8007b3c <low_level_init+0x154>)
 8007a7c:	4930      	ldr	r1, [pc, #192]	; (8007b40 <low_level_init+0x158>)
 8007a7e:	482b      	ldr	r0, [pc, #172]	; (8007b2c <low_level_init+0x144>)
 8007a80:	f7fd fab3 	bl	8004fea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2206      	movs	r2, #6
 8007a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007a8c:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <low_level_init+0x144>)
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007a98:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <low_level_init+0x144>)
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007aa4:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <low_level_init+0x144>)
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	789a      	ldrb	r2, [r3, #2]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007ab0:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <low_level_init+0x144>)
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	78da      	ldrb	r2, [r3, #3]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007abc:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <low_level_init+0x144>)
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	791a      	ldrb	r2, [r3, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007ac8:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <low_level_init+0x144>)
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	795a      	ldrb	r2, [r3, #5]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007ada:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ae2:	f043 030a 	orr.w	r3, r3, #10
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007aee:	480f      	ldr	r0, [pc, #60]	; (8007b2c <low_level_init+0x144>)
 8007af0:	f7fd fd24 	bl	800553c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007af4:	f107 0310 	add.w	r3, r7, #16
 8007af8:	461a      	mov	r2, r3
 8007afa:	211d      	movs	r1, #29
 8007afc:	480b      	ldr	r0, [pc, #44]	; (8007b2c <low_level_init+0x144>)
 8007afe:	f7fd fc4f 	bl	80053a0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f043 030b 	orr.w	r3, r3, #11
 8007b08:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	211d      	movs	r1, #29
 8007b10:	4806      	ldr	r0, [pc, #24]	; (8007b2c <low_level_init+0x144>)
 8007b12:	f7fd fcad 	bl	8005470 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007b16:	f107 0310 	add.w	r3, r7, #16
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	211d      	movs	r1, #29
 8007b1e:	4803      	ldr	r0, [pc, #12]	; (8007b2c <low_level_init+0x144>)
 8007b20:	f7fd fc3e 	bl	80053a0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007b24:	bf00      	nop
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20008714 	.word	0x20008714
 8007b30:	40028000 	.word	0x40028000
 8007b34:	2000875c 	.word	0x2000875c
 8007b38:	20006e44 	.word	0x20006e44
 8007b3c:	20006ec4 	.word	0x20006ec4
 8007b40:	20008694 	.word	0x20008694

08007b44 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007b4e:	4b4b      	ldr	r3, [pc, #300]	; (8007c7c <low_level_output+0x138>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007b66:	4b45      	ldr	r3, [pc, #276]	; (8007c7c <low_level_output+0x138>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	e05a      	b.n	8007c2c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da03      	bge.n	8007b86 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007b7e:	23f8      	movs	r3, #248	; 0xf8
 8007b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007b84:	e05c      	b.n	8007c40 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	895b      	ldrh	r3, [r3, #10]
 8007b8a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007b90:	e02f      	b.n	8007bf2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	18d0      	adds	r0, r2, r3
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	18d1      	adds	r1, r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f00f f8c3 	bl	8016d34 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da03      	bge.n	8007bc4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007bbc:	23f8      	movs	r3, #248	; 0xf8
 8007bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007bc2:	e03d      	b.n	8007c40 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007bd4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007be0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007bec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d8c8      	bhi.n	8007b92 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	18d0      	adds	r0, r2, r3
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f00f f88f 	bl	8016d34 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	623b      	str	r3, [r7, #32]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1a1      	bne.n	8007b76 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	4811      	ldr	r0, [pc, #68]	; (8007c7c <low_level_output+0x138>)
 8007c36:	f7fd fa45 	bl	80050c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007c40:	4b0e      	ldr	r3, [pc, #56]	; (8007c7c <low_level_output+0x138>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c48:	3314      	adds	r3, #20
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007c54:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <low_level_output+0x138>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	2220      	movs	r2, #32
 8007c60:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <low_level_output+0x138>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20008714 	.word	0x20008714

08007c80 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08c      	sub	sp, #48	; 0x30
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007ca4:	484f      	ldr	r0, [pc, #316]	; (8007de4 <low_level_input+0x164>)
 8007ca6:	f7fd faf7 	bl	8005298 <HAL_ETH_GetReceivedFrame>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <low_level_input+0x34>

    return NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e092      	b.n	8007dda <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007cb4:	4b4b      	ldr	r3, [pc, #300]	; (8007de4 <low_level_input+0x164>)
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007cba:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <low_level_input+0x164>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007cc0:	89fb      	ldrh	r3, [r7, #14]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007cc6:	89fb      	ldrh	r3, [r7, #14]
 8007cc8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007ccc:	4619      	mov	r1, r3
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f003 f9ee 	bl	800b0b0 <pbuf_alloc>
 8007cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d04b      	beq.n	8007d74 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007cdc:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <low_level_input+0x164>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cea:	e040      	b.n	8007d6e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	895b      	ldrh	r3, [r3, #10]
 8007cf0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007cf6:	e021      	b.n	8007d3c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	18d0      	adds	r0, r2, r3
 8007d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	18d1      	adds	r1, r2, r3
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f00f f810 	bl	8016d34 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007d2a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007d36:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4413      	add	r3, r2
 8007d42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d8d6      	bhi.n	8007cf8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	18d0      	adds	r0, r2, r3
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4413      	add	r3, r2
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f00e ffea 	bl	8016d34 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	4413      	add	r3, r2
 8007d66:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1bb      	bne.n	8007cec <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007d74:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <low_level_input+0x164>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d78:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e00b      	b.n	8007d98 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <low_level_input+0x164>)
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d3ee      	bcc.n	8007d80 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007da2:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <low_level_input+0x164>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007da8:	4b0e      	ldr	r3, [pc, #56]	; (8007de4 <low_level_input+0x164>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db0:	3314      	adds	r3, #20
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <low_level_input+0x164>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc4:	3314      	adds	r3, #20
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <low_level_input+0x164>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3730      	adds	r7, #48	; 0x30
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20008714 	.word	0x20008714

08007de8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff ff45 	bl	8007c80 <low_level_input>
 8007df6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007e0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f003 fc2f 	bl	800b678 <pbuf_free>
    p = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e000      	b.n	8007e22 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007e20:	bf00      	nop
  }
}
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <ethernetif_init+0x1c>
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <ethernetif_init+0x48>)
 8007e38:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007e3c:	490d      	ldr	r1, [pc, #52]	; (8007e74 <ethernetif_init+0x4c>)
 8007e3e:	480e      	ldr	r0, [pc, #56]	; (8007e78 <ethernetif_init+0x50>)
 8007e40:	f00f fc12 	bl	8017668 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2273      	movs	r2, #115	; 0x73
 8007e48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2274      	movs	r2, #116	; 0x74
 8007e50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <ethernetif_init+0x54>)
 8007e58:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a08      	ldr	r2, [pc, #32]	; (8007e80 <ethernetif_init+0x58>)
 8007e5e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff fdc1 	bl	80079e8 <low_level_init>

  return ERR_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	0801c3b0 	.word	0x0801c3b0
 8007e74:	0801c3cc 	.word	0x0801c3cc
 8007e78:	0801c3dc 	.word	0x0801c3dc
 8007e7c:	08014f71 	.word	0x08014f71
 8007e80:	08007b45 	.word	0x08007b45

08007e84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007e88:	f7fc fd98 	bl	80049bc <HAL_GetTick>
 8007e8c:	4603      	mov	r3, r0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d05d      	beq.n	8007f72 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007eb6:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d03f      	beq.n	8007f3e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4830      	ldr	r0, [pc, #192]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007ec6:	f7fd fad3 	bl	8005470 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007eca:	f7fc fd77 	bl	80049bc <HAL_GetTick>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007ed2:	f107 0308 	add.w	r3, r7, #8
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2101      	movs	r1, #1
 8007eda:	482b      	ldr	r0, [pc, #172]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007edc:	f7fd fa60 	bl	80053a0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007ee0:	f7fc fd6c 	bl	80049bc <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eee:	d828      	bhi.n	8007f42 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0eb      	beq.n	8007ed2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	461a      	mov	r2, r3
 8007f00:	2110      	movs	r1, #16
 8007f02:	4821      	ldr	r0, [pc, #132]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f04:	f7fd fa4c 	bl	80053a0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e002      	b.n	8007f22 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	e016      	b.n	8007f62 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007f34:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	e011      	b.n	8007f62 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007f3e:	bf00      	nop
 8007f40:	e000      	b.n	8007f44 <ethernetif_update_config+0xb0>
          goto error;
 8007f42:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007f44:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	08db      	lsrs	r3, r3, #3
 8007f4a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	085b      	lsrs	r3, r3, #1
 8007f52:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	480a      	ldr	r0, [pc, #40]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f5e:	f7fd fa87 	bl	8005470 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007f62:	2100      	movs	r1, #0
 8007f64:	4808      	ldr	r0, [pc, #32]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f66:	f7fd fb47 	bl	80055f8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007f6a:	4807      	ldr	r0, [pc, #28]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f6c:	f7fd fae6 	bl	800553c <HAL_ETH_Start>
 8007f70:	e002      	b.n	8007f78 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007f72:	4805      	ldr	r0, [pc, #20]	; (8007f88 <ethernetif_update_config+0xf4>)
 8007f74:	f7fd fb11 	bl	800559a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f807 	bl	8007f8c <ethernetif_notify_conn_changed>
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20008714 	.word	0x20008714

08007f8c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <fs_open+0x16>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <fs_open+0x1c>
    return ERR_ARG;
 8007fb6:	f06f 030f 	mvn.w	r3, #15
 8007fba:	e028      	b.n	800800e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007fbc:	4b16      	ldr	r3, [pc, #88]	; (8008018 <fs_open+0x78>)
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e020      	b.n	8008004 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6838      	ldr	r0, [r7, #0]
 8007fca:	f7f8 f901 	bl	80001d0 <strcmp>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d114      	bne.n	8007ffe <fs_open+0x5e>
      file->data = (const char *)f->data;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	7c1a      	ldrb	r2, [r3, #16]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e007      	b.n	800800e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1db      	bne.n	8007fc2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800800a:	f06f 0305 	mvn.w	r3, #5
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	08033838 	.word	0x08033838

0800801c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	1ad3      	subs	r3, r2, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008054:	f44f 7051 	mov.w	r0, #836	; 0x344
 8008058:	f002 fb3a 	bl	800a6d0 <mem_malloc>
 800805c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008064:	f44f 7251 	mov.w	r2, #836	; 0x344
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f00e fe8a 	bl	8016d84 <memset>
  }
  return ret;
 8008070:	687b      	ldr	r3, [r7, #4]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f002 f9bb 	bl	800a404 <mem_free>
  }
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800809e:	22d8      	movs	r2, #216	; 0xd8
 80080a0:	2100      	movs	r1, #0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f00e fe6e 	bl	8016d84 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2205      	movs	r2, #5
 80080ac:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80080be:	20d8      	movs	r0, #216	; 0xd8
 80080c0:	f002 fb06 	bl	800a6d0 <mem_malloc>
 80080c4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ffe2 	bl	8008096 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80080d2:	687b      	ldr	r3, [r7, #4]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff93 	bl	800801c <fs_close>
    hs->handle = NULL;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ffb6 	bl	800807a <http_ssi_state_free>
    hs->ssi = NULL;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	4618      	mov	r0, r3
 8008122:	f003 faa9 	bl	800b678 <pbuf_free>
    hs->req = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <http_state_free+0x1a>
    http_state_eof(hs);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ffca 	bl	80080dc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f002 f95b 	bl	800a404 <mem_free>
  }
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d106      	bne.n	800817a <http_write+0x22>
 800816c:	4b2c      	ldr	r3, [pc, #176]	; (8008220 <http_write+0xc8>)
 800816e:	f240 2219 	movw	r2, #537	; 0x219
 8008172:	492c      	ldr	r1, [pc, #176]	; (8008224 <http_write+0xcc>)
 8008174:	482c      	ldr	r0, [pc, #176]	; (8008228 <http_write+0xd0>)
 8008176:	f00f fa77 	bl	8017668 <iprintf>
  len = *length;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008180:	8afb      	ldrh	r3, [r7, #22]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <http_write+0x32>
    return ERR_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	e045      	b.n	8008216 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008190:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008192:	8aba      	ldrh	r2, [r7, #20]
 8008194:	8afb      	ldrh	r3, [r7, #22]
 8008196:	429a      	cmp	r2, r3
 8008198:	d201      	bcs.n	800819e <http_write+0x46>
    len = max_len;
 800819a:	8abb      	ldrh	r3, [r7, #20]
 800819c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80081a6:	8afa      	ldrh	r2, [r7, #22]
 80081a8:	8abb      	ldrh	r3, [r7, #20]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d901      	bls.n	80081b2 <http_write+0x5a>
    len = max_len;
 80081ae:	8abb      	ldrh	r3, [r7, #20]
 80081b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	8afa      	ldrh	r2, [r7, #22]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f008 f8b9 	bl	8010330 <tcp_write>
 80081be:	4603      	mov	r3, r0
 80081c0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80081c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ca:	d10f      	bne.n	80081ec <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d902      	bls.n	80081e6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80081e0:	2301      	movs	r3, #1
 80081e2:	82fb      	strh	r3, [r7, #22]
 80081e4:	e002      	b.n	80081ec <http_write+0x94>
      } else {
        len /= 2;
 80081e6:	8afb      	ldrh	r3, [r7, #22]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80081ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f4:	d102      	bne.n	80081fc <http_write+0xa4>
 80081f6:	8afb      	ldrh	r3, [r7, #22]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d8da      	bhi.n	80081b2 <http_write+0x5a>

  if (err == ERR_OK) {
 80081fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8afa      	ldrh	r2, [r7, #22]
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	e002      	b.n	8008212 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008212:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	0801c8d4 	.word	0x0801c8d4
 8008224:	0801c90c 	.word	0x0801c90c
 8008228:	0801c91c 	.word	0x0801c91c

0800822c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00d      	beq.n	800825c <http_close_or_abort_conn+0x30>
    if ((hs->post_content_len_left != 0)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d008      	beq.n	800825c <http_close_or_abort_conn+0x30>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800824a:	4b20      	ldr	r3, [pc, #128]	; (80082cc <http_close_or_abort_conn+0xa0>)
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8008250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008254:	491d      	ldr	r1, [pc, #116]	; (80082cc <http_close_or_abort_conn+0xa0>)
 8008256:	68b8      	ldr	r0, [r7, #8]
 8008258:	f7fb fd04 	bl	8003c64 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800825c:	2100      	movs	r1, #0
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f005 f866 	bl	800d330 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f005 f874 	bl	800d354 <tcp_recv>
  altcp_err(pcb, NULL);
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f005 f8b4 	bl	800d3dc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008274:	2200      	movs	r2, #0
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f005 f8e9 	bl	800d450 <tcp_poll>
  altcp_sent(pcb, NULL);
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f005 f889 	bl	800d398 <tcp_sent>
  if (hs != NULL) {
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <http_close_or_abort_conn+0x66>
    http_state_free(hs);
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f7ff ff51 	bl	8008134 <http_state_free>
  }

  if (abort_conn) {
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <http_close_or_abort_conn+0x76>
    altcp_abort(pcb);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f003 ff89 	bl	800c1b0 <tcp_abort>
    return ERR_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e00f      	b.n	80082c2 <http_close_or_abort_conn+0x96>
  }
  err = altcp_close(pcb);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f003 fe96 	bl	800bfd4 <tcp_close>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80082ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <http_close_or_abort_conn+0x92>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80082b4:	2204      	movs	r2, #4
 80082b6:	4906      	ldr	r1, [pc, #24]	; (80082d0 <http_close_or_abort_conn+0xa4>)
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f005 f8c9 	bl	800d450 <tcp_poll>
  }
  return err;
 80082be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000de0 	.word	0x20000de0
 80082d0:	08009b5b 	.word	0x08009b5b

080082d4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80082de:	2200      	movs	r2, #0
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ffa2 	bl	800822c <http_close_or_abort_conn>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff ffe8 	bl	80082d4 <http_close_conn>
  }
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <extract_uri_parameters+0x18>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <extract_uri_parameters+0x1c>
    return (0);
 8008324:	2300      	movs	r3, #0
 8008326:	e04b      	b.n	80083c0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800832c:	2300      	movs	r3, #0
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	e03f      	b.n	80083b2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	320c      	adds	r2, #12
 8008338:	6979      	ldr	r1, [r7, #20]
 800833a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8008342:	2126      	movs	r1, #38	; 0x26
 8008344:	6978      	ldr	r0, [r7, #20]
 8008346:	f00f fac0 	bl	80178ca <strchr>
 800834a:	6178      	str	r0, [r7, #20]
    if (pair) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d006      	beq.n	8008360 <extract_uri_parameters+0x54>
      *pair = '\0';
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
      pair++;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	3301      	adds	r3, #1
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e00c      	b.n	800837a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008360:	2120      	movs	r1, #32
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f00f fab1 	bl	80178ca <strchr>
 8008368:	6178      	str	r0, [r7, #20]
      if (pair) {
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800837a:	213d      	movs	r1, #61	; 0x3d
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f00f faa4 	bl	80178ca <strchr>
 8008382:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <extract_uri_parameters+0x94>
      *equals = '\0';
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	1c59      	adds	r1, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	321c      	adds	r2, #28
 800839a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800839e:	e005      	b.n	80083ac <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	321c      	adds	r2, #28
 80083a6:	2100      	movs	r1, #0
 80083a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3301      	adds	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b0f      	cmp	r3, #15
 80083b6:	dc02      	bgt.n	80083be <extract_uri_parameters+0xb2>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1b9      	bne.n	8008332 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80083be:	693b      	ldr	r3, [r7, #16]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80083c8:	b590      	push	{r4, r7, lr}
 80083ca:	b089      	sub	sp, #36	; 0x24
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <get_tag_insert+0x1c>
 80083d6:	4b5b      	ldr	r3, [pc, #364]	; (8008544 <get_tag_insert+0x17c>)
 80083d8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80083dc:	495a      	ldr	r1, [pc, #360]	; (8008548 <get_tag_insert+0x180>)
 80083de:	485b      	ldr	r0, [pc, #364]	; (800854c <get_tag_insert+0x184>)
 80083e0:	f00f f942 	bl	8017668 <iprintf>
  ssi = hs->ssi;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <get_tag_insert+0x36>
 80083f0:	4b54      	ldr	r3, [pc, #336]	; (8008544 <get_tag_insert+0x17c>)
 80083f2:	f240 3206 	movw	r2, #774	; 0x306
 80083f6:	4956      	ldr	r1, [pc, #344]	; (8008550 <get_tag_insert+0x188>)
 80083f8:	4854      	ldr	r0, [pc, #336]	; (800854c <get_tag_insert+0x184>)
 80083fa:	f00f f935 	bl	8017668 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	8a9b      	ldrh	r3, [r3, #20]
 8008402:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800840a:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800840c:	4b51      	ldr	r3, [pc, #324]	; (8008554 <get_tag_insert+0x18c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d034      	beq.n	800847e <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8008414:	4b50      	ldr	r3, [pc, #320]	; (8008558 <get_tag_insert+0x190>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d030      	beq.n	800847e <get_tag_insert+0xb6>
 800841c:	4b4f      	ldr	r3, [pc, #316]	; (800855c <get_tag_insert+0x194>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02c      	beq.n	800847e <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	e024      	b.n	8008474 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f103 0018 	add.w	r0, r3, #24
 8008430:	4b49      	ldr	r3, [pc, #292]	; (8008558 <get_tag_insert+0x190>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	f7f7 fec7 	bl	80001d0 <strcmp>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d112      	bne.n	800846e <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8008448:	4b42      	ldr	r3, [pc, #264]	; (8008554 <get_tag_insert+0x18c>)
 800844a:	681c      	ldr	r4, [r3, #0]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	3314      	adds	r3, #20
 8008456:	89fa      	ldrh	r2, [r7, #14]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	4613      	mov	r3, r2
 800845c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008460:	6978      	ldr	r0, [r7, #20]
 8008462:	47a0      	blx	r4
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800846c:	e066      	b.n	800853c <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	3301      	adds	r3, #1
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	4b39      	ldr	r3, [pc, #228]	; (800855c <get_tag_insert+0x194>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	429a      	cmp	r2, r3
 800847c:	dbd5      	blt.n	800842a <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3318      	adds	r3, #24
 8008482:	4618      	mov	r0, r3
 8008484:	f7f7 feae 	bl	80001e4 <strlen>
 8008488:	4603      	mov	r3, r0
 800848a:	f240 3206 	movw	r2, #774	; 0x306
 800848e:	4293      	cmp	r3, r2
 8008490:	d81b      	bhi.n	80084ca <get_tag_insert+0x102>
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	3318      	adds	r3, #24
 8008496:	4618      	mov	r0, r3
 8008498:	f7f7 fea4 	bl	80001e4 <strlen>
 800849c:	4603      	mov	r3, r0
 800849e:	2b09      	cmp	r3, #9
 80084a0:	d813      	bhi.n	80084ca <get_tag_insert+0x102>
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	3318      	adds	r3, #24
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f7 fe9c 	bl	80001e4 <strlen>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f240 3206 	movw	r2, #774	; 0x306
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d806      	bhi.n	80084c4 <get_tag_insert+0xfc>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3318      	adds	r3, #24
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7f7 fe92 	bl	80001e4 <strlen>
 80084c0:	4603      	mov	r3, r0
 80084c2:	e003      	b.n	80084cc <get_tag_insert+0x104>
 80084c4:	f240 3307 	movw	r3, #775	; 0x307
 80084c8:	e000      	b.n	80084cc <get_tag_insert+0x104>
 80084ca:	2309      	movs	r3, #9
 80084cc:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3321      	adds	r3, #33	; 0x21
 80084d2:	2212      	movs	r2, #18
 80084d4:	4922      	ldr	r1, [pc, #136]	; (8008560 <get_tag_insert+0x198>)
 80084d6:	4618      	mov	r0, r3
 80084d8:	f00e fc2c 	bl	8016d34 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f103 0033 	add.w	r0, r3, #51	; 0x33
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	3318      	adds	r3, #24
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4619      	mov	r1, r3
 80084ea:	f00e fc23 	bl	8016d34 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	3312      	adds	r3, #18
 80084f2:	3320      	adds	r3, #32
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	3301      	adds	r3, #1
 80084fa:	2207      	movs	r2, #7
 80084fc:	4919      	ldr	r1, [pc, #100]	; (8008564 <get_tag_insert+0x19c>)
 80084fe:	4618      	mov	r0, r3
 8008500:	f00e fc18 	bl	8016d34 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3319      	adds	r3, #25
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3321      	adds	r3, #33	; 0x21
 8008516:	4618      	mov	r0, r3
 8008518:	f7f7 fe64 	bl	80001e4 <strlen>
 800851c:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d306      	bcc.n	8008534 <get_tag_insert+0x16c>
 8008526:	4b07      	ldr	r3, [pc, #28]	; (8008544 <get_tag_insert+0x17c>)
 8008528:	f240 323f 	movw	r2, #831	; 0x33f
 800852c:	490e      	ldr	r1, [pc, #56]	; (8008568 <get_tag_insert+0x1a0>)
 800852e:	4807      	ldr	r0, [pc, #28]	; (800854c <get_tag_insert+0x184>)
 8008530:	f00f f89a 	bl	8017668 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	b29a      	uxth	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	825a      	strh	r2, [r3, #18]
}
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd90      	pop	{r4, r7, pc}
 8008542:	bf00      	nop
 8008544:	0801c8d4 	.word	0x0801c8d4
 8008548:	0801c944 	.word	0x0801c944
 800854c:	0801c91c 	.word	0x0801c91c
 8008550:	0801c950 	.word	0x0801c950
 8008554:	200011cc 	.word	0x200011cc
 8008558:	200011d4 	.word	0x200011d4
 800855c:	200011d0 	.word	0x200011d0
 8008560:	0801c95c 	.word	0x0801c95c
 8008564:	0801c970 	.word	0x0801c970
 8008568:	0801c978 	.word	0x0801c978

0800856c <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8008576:	4a55      	ldr	r2, [pc, #340]	; (80086cc <get_http_headers+0x160>)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d110      	bne.n	80085b6 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8008594:	4a4e      	ldr	r2, [pc, #312]	; (80086d0 <get_http_headers+0x164>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800859c:	4a4d      	ldr	r2, [pc, #308]	; (80086d4 <get_http_headers+0x168>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 80085b4:	e087      	b.n	80086c6 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80085b6:	4948      	ldr	r1, [pc, #288]	; (80086d8 <get_http_headers+0x16c>)
 80085b8:	6838      	ldr	r0, [r7, #0]
 80085ba:	f00f f9c0 	bl	801793e <strstr>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80085c4:	4a42      	ldr	r2, [pc, #264]	; (80086d0 <get_http_headers+0x164>)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80085cc:	e01b      	b.n	8008606 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 80085ce:	4943      	ldr	r1, [pc, #268]	; (80086dc <get_http_headers+0x170>)
 80085d0:	6838      	ldr	r0, [r7, #0]
 80085d2:	f00f f9b4 	bl	801793e <strstr>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80085dc:	4a40      	ldr	r2, [pc, #256]	; (80086e0 <get_http_headers+0x174>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80085e4:	e00f      	b.n	8008606 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 80085e6:	493f      	ldr	r1, [pc, #252]	; (80086e4 <get_http_headers+0x178>)
 80085e8:	6838      	ldr	r0, [r7, #0]
 80085ea:	f00f f9a8 	bl	801793e <strstr>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 80085f4:	4a3c      	ldr	r2, [pc, #240]	; (80086e8 <get_http_headers+0x17c>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80085fc:	e003      	b.n	8008606 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80085fe:	4a3b      	ldr	r2, [pc, #236]	; (80086ec <get_http_headers+0x180>)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 8008606:	213f      	movs	r1, #63	; 0x3f
 8008608:	6838      	ldr	r0, [r7, #0]
 800860a:	f00f f95e 	bl	80178ca <strchr>
 800860e:	60b8      	str	r0, [r7, #8]
  if (vars) {
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <get_http_headers+0xb0>
    *vars = '\0';
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 8008620:	212e      	movs	r1, #46	; 0x2e
 8008622:	6838      	ldr	r0, [r7, #0]
 8008624:	f00f f951 	bl	80178ca <strchr>
 8008628:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800862a:	e007      	b.n	800863c <get_http_headers+0xd0>
    ext = tmp + 1;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 8008632:	212e      	movs	r1, #46	; 0x2e
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f00f f948 	bl	80178ca <strchr>
 800863a:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f4      	bne.n	800862c <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d014      	beq.n	8008672 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	e00d      	b.n	800866a <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800864e:	4a28      	ldr	r2, [pc, #160]	; (80086f0 <get_http_headers+0x184>)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008656:	68f9      	ldr	r1, [r7, #12]
 8008658:	4618      	mov	r0, r3
 800865a:	f001 fcd7 	bl	800a00c <lwip_stricmp>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d009      	beq.n	8008678 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	3301      	adds	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b13      	cmp	r3, #19
 800866e:	d9ee      	bls.n	800864e <get_http_headers+0xe2>
 8008670:	e003      	b.n	800867a <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 8008672:	2314      	movs	r3, #20
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e000      	b.n	800867a <get_http_headers+0x10e>
        break;
 8008678:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <get_http_headers+0x11a>
    *vars = '?';
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	223f      	movs	r2, #63	; 0x3f
 8008684:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b13      	cmp	r3, #19
 800868a:	d808      	bhi.n	800869e <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <get_http_headers+0x184>)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800869c:	e00b      	b.n	80086b6 <get_http_headers+0x14a>
  } else if (!ext) {
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <get_http_headers+0x188>)
 80086a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80086ac:	e003      	b.n	80086b6 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a11      	ldr	r2, [pc, #68]	; (80086f8 <get_http_headers+0x18c>)
 80086b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	0801c554 	.word	0x0801c554
 80086d0:	0801c418 	.word	0x0801c418
 80086d4:	0801c594 	.word	0x0801c594
 80086d8:	0801c988 	.word	0x0801c988
 80086dc:	0801c98c 	.word	0x0801c98c
 80086e0:	0801c438 	.word	0x0801c438
 80086e4:	0801c990 	.word	0x0801c990
 80086e8:	0801c454 	.word	0x0801c454
 80086ec:	0801c404 	.word	0x0801c404
 80086f0:	0803384c 	.word	0x0803384c
 80086f4:	0801c728 	.word	0x0801c728
 80086f8:	0801c994 	.word	0x0801c994

080086fc <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800870e:	2b00      	cmp	r3, #0
 8008710:	d006      	beq.n	8008720 <get_http_content_length+0x24>
 8008712:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <get_http_content_length+0xb4>)
 8008714:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8008718:	4926      	ldr	r1, [pc, #152]	; (80087b4 <get_http_content_length+0xb8>)
 800871a:	4827      	ldr	r0, [pc, #156]	; (80087b8 <get_http_content_length+0xbc>)
 800871c:	f00e ffa4 	bl	8017668 <iprintf>

  add_content_len = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10c      	bne.n	8008746 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d008      	beq.n	8008746 <get_http_content_length+0x4a>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	7c1b      	ldrb	r3, [r3, #16]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <get_http_content_length+0x4a>
      add_content_len = 1;
 8008742:	2301      	movs	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d025      	beq.n	8008798 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	461a      	mov	r2, r3
 800875a:	210c      	movs	r1, #12
 800875c:	f001 fc8a 	bl	800a074 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	33c4      	adds	r3, #196	; 0xc4
 8008764:	4618      	mov	r0, r3
 8008766:	f7f7 fd3d 	bl	80001e4 <strlen>
 800876a:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b09      	cmp	r3, #9
 8008770:	d810      	bhi.n	8008794 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	33c0      	adds	r3, #192	; 0xc0
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	2203      	movs	r2, #3
 800877e:	490f      	ldr	r1, [pc, #60]	; (80087bc <get_http_content_length+0xc0>)
 8008780:	4618      	mov	r0, r3
 8008782:	f00e fad7 	bl	8016d34 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8008792:	e001      	b.n	8008798 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800879e:	4a08      	ldr	r2, [pc, #32]	; (80087c0 <get_http_content_length+0xc4>)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	0801c8d4 	.word	0x0801c8d4
 80087b4:	0801c9b4 	.word	0x0801c9b4
 80087b8:	0801c91c 	.word	0x0801c91c
 80087bc:	0801c9c8 	.word	0x0801c9c8
 80087c0:	0801c4e4 	.word	0x0801c4e4

080087c4 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80087ce:	2300      	movs	r3, #0
 80087d0:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 80087dc:	6838      	ldr	r0, [r7, #0]
 80087de:	f7ff ff8d 	bl	80086fc <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087e8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 80087ea:	8bfb      	ldrh	r3, [r7, #30]
 80087ec:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80087ee:	e08b      	b.n	8008908 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80087f6:	461a      	mov	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	322c      	adds	r2, #44	; 0x2c
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	4618      	mov	r0, r3
 8008802:	f7f7 fcef 	bl	80001e4 <strlen>
 8008806:	4603      	mov	r3, r0
 8008808:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800880a:	8b7b      	ldrh	r3, [r7, #26]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8008812:	1a9a      	subs	r2, r3, r2
 8008814:	8bfb      	ldrh	r3, [r7, #30]
 8008816:	4293      	cmp	r3, r2
 8008818:	bfa8      	it	ge
 800881a:	4613      	movge	r3, r2
 800881c:	b29b      	uxth	r3, r3
 800881e:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008826:	461a      	mov	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	322c      	adds	r2, #44	; 0x2c
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8008836:	4413      	add	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800883a:	89fb      	ldrh	r3, [r7, #14]
 800883c:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800883e:	2300      	movs	r3, #0
 8008840:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008848:	2b03      	cmp	r3, #3
 800884a:	d103      	bne.n	8008854 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800884c:	7f3b      	ldrb	r3, [r7, #28]
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800885a:	2b03      	cmp	r3, #3
 800885c:	d803      	bhi.n	8008866 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800885e:	7f3b      	ldrb	r3, [r7, #28]
 8008860:	f043 0302 	orr.w	r3, r3, #2
 8008864:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8008866:	7f3b      	ldrb	r3, [r7, #28]
 8008868:	f107 020e 	add.w	r2, r7, #14
 800886c:	6979      	ldr	r1, [r7, #20]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff fc72 	bl	8008158 <http_write>
 8008874:	4603      	mov	r3, r0
 8008876:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8008878:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <http_send_headers+0xca>
 8008880:	89fb      	ldrh	r3, [r7, #14]
 8008882:	8a7a      	ldrh	r2, [r7, #18]
 8008884:	429a      	cmp	r2, r3
 8008886:	d002      	beq.n	800888e <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8008888:	2301      	movs	r3, #1
 800888a:	777b      	strb	r3, [r7, #29]
 800888c:	e005      	b.n	800889a <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800888e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	4413      	add	r3, r2
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	8bfa      	ldrh	r2, [r7, #30]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80088ba:	8b7a      	ldrh	r2, [r7, #26]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d123      	bne.n	8008908 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80088c6:	3301      	adds	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80088d0:	e007      	b.n	80088e2 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80088d8:	3301      	adds	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	d809      	bhi.n	8008900 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80088f2:	461a      	mov	r2, r3
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	322c      	adds	r2, #44	; 0x2c
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0e8      	beq.n	80088d2 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008908:	8bfb      	ldrh	r3, [r7, #30]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <http_send_headers+0x15c>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008914:	2b04      	cmp	r3, #4
 8008916:	d803      	bhi.n	8008920 <http_send_headers+0x15c>
 8008918:	89fb      	ldrh	r3, [r7, #14]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f af68 	bne.w	80087f0 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008926:	2b04      	cmp	r3, #4
 8008928:	d90f      	bls.n	800894a <http_send_headers+0x186>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f819 	bl	800896c <http_check_eof>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 8008940:	2302      	movs	r3, #2
 8008942:	777b      	strb	r3, [r7, #29]
 8008944:	e001      	b.n	800894a <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 8008946:	2303      	movs	r3, #3
 8008948:	e00b      	b.n	8008962 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008950:	2b04      	cmp	r3, #4
 8008952:	d903      	bls.n	800895c <http_send_headers+0x198>
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800895c:	2302      	movs	r3, #2
 800895e:	e000      	b.n	8008962 <http_send_headers+0x19e>
  }
  return data_to_send;
 8008960:	7f7b      	ldrb	r3, [r7, #29]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff fcb6 	bl	80082f2 <http_eof>
    return 0;
 8008986:	2300      	movs	r3, #0
 8008988:	e016      	b.n	80089b8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff fb4e 	bl	8008030 <fs_bytes_left>
 8008994:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc05      	bgt.n	80089a8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff fca7 	bl	80082f2 <http_eof>
    return 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	e007      	b.n	80089b8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <http_check_eof+0x54>)
 80089aa:	f240 429d 	movw	r2, #1181	; 0x49d
 80089ae:	4905      	ldr	r1, [pc, #20]	; (80089c4 <http_check_eof+0x58>)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <http_check_eof+0x5c>)
 80089b2:	f00e fe59 	bl	8017668 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80089b6:	2301      	movs	r3, #1
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	0801c8d4 	.word	0x0801c8d4
 80089c4:	0801c9cc 	.word	0x0801c9cc
 80089c8:	0801c91c 	.word	0x0801c91c

080089cc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d803      	bhi.n	80089ee <http_send_data_nonssi+0x22>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	e001      	b.n	80089f2 <http_send_data_nonssi+0x26>
 80089ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089f2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6999      	ldr	r1, [r3, #24]
 80089f8:	f107 020c 	add.w	r2, r7, #12
 80089fc:	2300      	movs	r3, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fbaa 	bl	8008158 <http_write>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10d      	bne.n	8008a2c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	89ba      	ldrh	r2, [r7, #12]
 8008a1a:	441a      	add	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	89ba      	ldrh	r2, [r7, #12]
 8008a26:	1a9a      	subs	r2, r3, r2
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <http_send_data_ssi+0x2c>
 8008a56:	4b89      	ldr	r3, [pc, #548]	; (8008c7c <http_send_data_ssi+0x244>)
 8008a58:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008a5c:	4988      	ldr	r1, [pc, #544]	; (8008c80 <http_send_data_ssi+0x248>)
 8008a5e:	4889      	ldr	r0, [pc, #548]	; (8008c84 <http_send_data_ssi+0x24c>)
 8008a60:	f00e fe02 	bl	8017668 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a6a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	f240 82c5 	bls.w	8009004 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	dc06      	bgt.n	8008a9a <http_send_data_ssi+0x62>
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	e001      	b.n	8008a9e <http_send_data_ssi+0x66>
 8008a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a9e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6999      	ldr	r1, [r3, #24]
 8008aa4:	f107 020e 	add.w	r2, r7, #14
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fb54 	bl	8008158 <http_write>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10d      	bne.n	8008ad8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	89fa      	ldrh	r2, [r7, #14]
 8008ac6:	441a      	add	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	89fa      	ldrh	r2, [r7, #14]
 8008ad2:	1a9a      	subs	r2, r3, r2
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 8290 	bne.w	8009004 <http_send_data_ssi+0x5cc>
      return data_to_send;
 8008ae4:	7dbb      	ldrb	r3, [r7, #22]
 8008ae6:	e2d6      	b.n	8009096 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8008ae8:	89fb      	ldrh	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <http_send_data_ssi+0xba>
      return data_to_send;
 8008aee:	7dbb      	ldrb	r3, [r7, #22]
 8008af0:	e2d1      	b.n	8009096 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	f200 8282 	bhi.w	8009002 <http_send_data_ssi+0x5ca>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <http_send_data_ssi+0xcc>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b73 	.word	0x08008b73
 8008b0c:	08008be5 	.word	0x08008be5
 8008b10:	08008d2d 	.word	0x08008d2d
 8008b14:	08008ea3 	.word	0x08008ea3
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008b18:	2300      	movs	r3, #0
 8008b1a:	757b      	strb	r3, [r7, #21]
 8008b1c:	e01b      	b.n	8008b56 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	7d7b      	ldrb	r3, [r7, #21]
 8008b26:	4958      	ldr	r1, [pc, #352]	; (8008c88 <http_send_data_ssi+0x250>)
 8008b28:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d10e      	bne.n	8008b50 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	7d7a      	ldrb	r2, [r7, #21]
 8008b36:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_index = 1;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2201      	movs	r2, #1
 8008b44:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8008b4e:	e005      	b.n	8008b5c <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008b50:	7d7b      	ldrb	r3, [r7, #21]
 8008b52:	3301      	adds	r3, #1
 8008b54:	757b      	strb	r3, [r7, #21]
 8008b56:	7d7b      	ldrb	r3, [r7, #21]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d9e0      	bls.n	8008b1e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	1e5a      	subs	r2, r3, #1
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	601a      	str	r2, [r3, #0]
        break;
 8008b70:	e248      	b.n	8009004 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	7d9b      	ldrb	r3, [r3, #22]
 8008b76:	461a      	mov	r2, r3
 8008b78:	4b43      	ldr	r3, [pc, #268]	; (8008c88 <http_send_data_ssi+0x250>)
 8008b7a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	8a12      	ldrh	r2, [r2, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d107      	bne.n	8008b9a <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8008b98:	e234      	b.n	8009004 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	7d9b      	ldrb	r3, [r3, #22]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4b38      	ldr	r3, [pc, #224]	; (8008c88 <http_send_data_ssi+0x250>)
 8008ba8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8008bac:	6939      	ldr	r1, [r7, #16]
 8008bae:	8a09      	ldrh	r1, [r1, #16]
 8008bb0:	440b      	add	r3, r1
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d106      	bne.n	8008bc6 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	8a1b      	ldrh	r3, [r3, #16]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	821a      	strh	r2, [r3, #16]
 8008bc4:	e003      	b.n	8008bce <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	1e5a      	subs	r2, r3, #1
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	601a      	str	r2, [r3, #0]
        }
        break;
 8008be2:	e20f      	b.n	8009004 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	8a1b      	ldrh	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d11e      	bne.n	8008c2a <http_send_data_ssi+0x1f2>
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d00e      	beq.n	8008c14 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d009      	beq.n	8008c14 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b0a      	cmp	r3, #10
 8008c08:	d004      	beq.n	8008c14 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008c10:	2b0d      	cmp	r3, #13
 8008c12:	d10a      	bne.n	8008c2a <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	601a      	str	r2, [r3, #0]
          break;
 8008c28:	e1ec      	b.n	8009004 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	7d9b      	ldrb	r3, [r3, #22]
 8008c34:	4914      	ldr	r1, [pc, #80]	; (8008c88 <http_send_data_ssi+0x250>)
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	440b      	add	r3, r1
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d013      	beq.n	8008c6a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d00e      	beq.n	8008c6a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d009      	beq.n	8008c6a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008c5c:	2b0a      	cmp	r3, #10
 8008c5e:	d004      	beq.n	8008c6a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b0d      	cmp	r3, #13
 8008c68:	d13f      	bne.n	8008cea <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	8a1b      	ldrh	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10c      	bne.n	8008c8c <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          if (ssi->tag_index == 0) {
 8008c7a:	e04c      	b.n	8008d16 <http_send_data_ssi+0x2de>
 8008c7c:	0801c8d4 	.word	0x0801c8d4
 8008c80:	0801c950 	.word	0x0801c950
 8008c84:	0801c91c 	.word	0x0801c91c
 8008c88:	08033928 	.word	0x08033928
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2203      	movs	r2, #3
 8008c90:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	8a1b      	ldrh	r3, [r3, #16]
 8008c98:	2bff      	cmp	r3, #255	; 0xff
 8008c9a:	d906      	bls.n	8008caa <http_send_data_ssi+0x272>
 8008c9c:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <http_send_data_ssi+0x4b0>)
 8008c9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ca2:	4992      	ldr	r1, [pc, #584]	; (8008eec <http_send_data_ssi+0x4b4>)
 8008ca4:	4892      	ldr	r0, [pc, #584]	; (8008ef0 <http_send_data_ssi+0x4b8>)
 8008ca6:	f00e fcdf 	bl	8017668 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	8a1b      	ldrh	r3, [r3, #16]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	8a1b      	ldrh	r3, [r3, #16]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	781a      	ldrb	r2, [r3, #0]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	7d9b      	ldrb	r3, [r3, #22]
 8008ccc:	4989      	ldr	r1, [pc, #548]	; (8008ef4 <http_send_data_ssi+0x4bc>)
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	440b      	add	r3, r1
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d103      	bne.n	8008ce2 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8008ce0:	e019      	b.n	8008d16 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8008ce8:	e015      	b.n	8008d16 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	8a1b      	ldrh	r3, [r3, #16]
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	d80d      	bhi.n	8008d0e <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	8a1b      	ldrh	r3, [r3, #16]
 8008cfa:	1c59      	adds	r1, r3, #1
 8008cfc:	b288      	uxth	r0, r1
 8008cfe:	6939      	ldr	r1, [r7, #16]
 8008d00:	8208      	strh	r0, [r1, #16]
 8008d02:	4619      	mov	r1, r3
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	440b      	add	r3, r1
 8008d0a:	761a      	strb	r2, [r3, #24]
 8008d0c:	e003      	b.n	8008d16 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	1e5a      	subs	r2, r3, #1
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	601a      	str	r2, [r3, #0]

        break;
 8008d2a:	e16b      	b.n	8009004 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	8a1b      	ldrh	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d11e      	bne.n	8008d72 <http_send_data_ssi+0x33a>
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d00e      	beq.n	8008d5c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008d44:	2b09      	cmp	r3, #9
 8008d46:	d009      	beq.n	8008d5c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b0a      	cmp	r3, #10
 8008d50:	d004      	beq.n	8008d5c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008d58:	2b0d      	cmp	r3, #13
 8008d5a:	d10a      	bne.n	8008d72 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	1e5a      	subs	r2, r3, #1
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	601a      	str	r2, [r3, #0]
          break;
 8008d70:	e148      	b.n	8009004 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	7d9b      	ldrb	r3, [r3, #22]
 8008d7c:	495d      	ldr	r1, [pc, #372]	; (8008ef4 <http_send_data_ssi+0x4bc>)
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	440b      	add	r3, r1
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	6939      	ldr	r1, [r7, #16]
 8008d86:	8a09      	ldrh	r1, [r1, #16]
 8008d88:	440b      	add	r3, r1
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d179      	bne.n	8008e84 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	1e5a      	subs	r2, r3, #1
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	8a1b      	ldrh	r3, [r3, #16]
 8008da8:	3301      	adds	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	7d9b      	ldrb	r3, [r3, #22]
 8008db4:	4a4f      	ldr	r2, [pc, #316]	; (8008ef4 <http_send_data_ssi+0x4bc>)
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	8a12      	ldrh	r2, [r2, #16]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 811d 	bne.w	8009004 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8008dd0:	6838      	ldr	r0, [r7, #0]
 8008dd2:	f7ff faf9 	bl	80083c8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2204      	movs	r2, #4
 8008de0:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_end = ssi->parsed;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	f240 8101 	bls.w	8009004 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e10:	4293      	cmp	r3, r2
 8008e12:	dc06      	bgt.n	8008e22 <http_send_data_ssi+0x3ea>
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	e001      	b.n	8008e26 <http_send_data_ssi+0x3ee>
 8008e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e26:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6999      	ldr	r1, [r3, #24]
 8008e2c:	f107 020e 	add.w	r2, r7, #14
 8008e30:	2300      	movs	r3, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff f990 	bl	8008158 <http_write>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8008e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 80df 	bne.w	8009004 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8008e46:	2301      	movs	r3, #1
 8008e48:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d809      	bhi.n	8008e6a <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	89fb      	ldrh	r3, [r7, #14]
 8008e64:	4413      	add	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	89fa      	ldrh	r2, [r7, #14]
 8008e70:	441a      	add	r2, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	89fa      	ldrh	r2, [r7, #14]
 8008e7c:	1a9a      	subs	r2, r3, r2
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24
 8008e82:	e0bf      	b.n	8009004 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	1e5a      	subs	r2, r3, #1
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        }
        break;
 8008ea0:	e0b0      	b.n	8009004 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d95c      	bls.n	8008f68 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d206      	bcs.n	8008ec8 <http_send_data_ssi+0x490>
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <http_send_data_ssi+0x4b0>)
 8008ebc:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8008ec0:	490d      	ldr	r1, [pc, #52]	; (8008ef8 <http_send_data_ssi+0x4c0>)
 8008ec2:	480b      	ldr	r0, [pc, #44]	; (8008ef0 <http_send_data_ssi+0x4b8>)
 8008ec4:	f00e fbd0 	bl	8017668 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	dc10      	bgt.n	8008efc <http_send_data_ssi+0x4c4>
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	e00b      	b.n	8008f00 <http_send_data_ssi+0x4c8>
 8008ee8:	0801c8d4 	.word	0x0801c8d4
 8008eec:	0801ca04 	.word	0x0801ca04
 8008ef0:	0801c91c 	.word	0x0801c91c
 8008ef4:	08033928 	.word	0x08033928
 8008ef8:	0801ca1c 	.word	0x0801ca1c
 8008efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f00:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8008f02:	89fb      	ldrh	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6999      	ldr	r1, [r3, #24]
 8008f0c:	f107 020e 	add.w	r2, r7, #14
 8008f10:	2300      	movs	r3, #0
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff f920 	bl	8008158 <http_write>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]
 8008f1c:	e001      	b.n	8008f22 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8008f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d16c      	bne.n	8009004 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d809      	bhi.n	8008f4e <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	4413      	add	r3, r2
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	89fa      	ldrh	r2, [r7, #14]
 8008f54:	441a      	add	r2, r3
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	89fa      	ldrh	r2, [r7, #14]
 8008f60:	1a9a      	subs	r2, r3, r2
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24
 8008f66:	e04d      	b.n	8009004 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	8a1a      	ldrh	r2, [r3, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	8a5b      	ldrh	r3, [r3, #18]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d30b      	bcc.n	8008f8c <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	8a9b      	ldrh	r3, [r3, #20]
 8008f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d005      	beq.n	8008f8c <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2200      	movs	r2, #0
 8008f84:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8008f86:	6838      	ldr	r0, [r7, #0]
 8008f88:	f7ff fa1e 	bl	80083c8 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	8a1a      	ldrh	r2, [r3, #16]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	8a5b      	ldrh	r3, [r3, #18]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d222      	bcs.n	8008fde <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	8a5a      	ldrh	r2, [r3, #18]
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	8a1b      	ldrh	r3, [r3, #16]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	8a1b      	ldrh	r3, [r3, #16]
 8008faa:	3320      	adds	r3, #32
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4413      	add	r3, r2
 8008fb0:	1c59      	adds	r1, r3, #1
 8008fb2:	f107 020e 	add.w	r2, r7, #14
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff f8cd 	bl	8008158 <http_write>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8008fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d11c      	bne.n	8009004 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	8a1a      	ldrh	r2, [r3, #16]
 8008fd2:	89fb      	ldrh	r3, [r7, #14]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	821a      	strh	r2, [r3, #16]
 8008fdc:	e012      	b.n	8009004 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	8a9b      	ldrh	r3, [r3, #20]
 8008fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d10c      	bne.n	8009004 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2200      	movs	r2, #0
 8008fee:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8009000:	e000      	b.n	8009004 <http_send_data_ssi+0x5cc>
        default:
          break;
 8009002:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 800900a:	2b04      	cmp	r3, #4
 800900c:	d003      	beq.n	8009016 <http_send_data_ssi+0x5de>
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <http_send_data_ssi+0x5e8>
 8009016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f43f ad64 	beq.w	8008ae8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8009026:	2b04      	cmp	r3, #4
 8009028:	d034      	beq.n	8009094 <http_send_data_ssi+0x65c>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	429a      	cmp	r2, r3
 8009034:	d92e      	bls.n	8009094 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009044:	4293      	cmp	r3, r2
 8009046:	dc06      	bgt.n	8009056 <http_send_data_ssi+0x61e>
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	b29b      	uxth	r3, r3
 8009054:	e001      	b.n	800905a <http_send_data_ssi+0x622>
 8009056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800905a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	6999      	ldr	r1, [r3, #24]
 8009060:	f107 020e 	add.w	r2, r7, #14
 8009064:	2300      	movs	r3, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff f876 	bl	8008158 <http_write>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10d      	bne.n	8009094 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8009078:	2301      	movs	r3, #1
 800907a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	89fa      	ldrh	r2, [r7, #14]
 8009082:	441a      	add	r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	89fa      	ldrh	r2, [r7, #14]
 800908e:	1a9a      	subs	r2, r3, r2
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8009094:	7dbb      	ldrb	r3, [r7, #22]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop

080090a0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <http_send+0x18>
    return 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	e048      	b.n	800914a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d812      	bhi.n	80090e8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fb7d 	bl	80087c4 <http_send_headers>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d007      	beq.n	80090e4 <http_send+0x44>
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d006      	beq.n	80090e8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	d801      	bhi.n	80090e8 <http_send+0x48>
      return data_to_send;
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	e030      	b.n	800914a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d108      	bne.n	8009102 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff fc3a 	bl	800896c <http_check_eof>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <http_send+0x62>
      return 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	e023      	b.n	800914a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	2b00      	cmp	r3, #0
 8009108:	d006      	beq.n	8009118 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff fc93 	bl	8008a38 <http_send_data_ssi>
 8009112:	4603      	mov	r3, r0
 8009114:	73fb      	strb	r3, [r7, #15]
 8009116:	e005      	b.n	8009124 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fc56 	bl	80089cc <http_send_data_nonssi>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10d      	bne.n	8009148 <http_send+0xa8>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe ff7d 	bl	8008030 <fs_bytes_left>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	dc05      	bgt.n	8009148 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f8d7 	bl	80082f2 <http_eof>
    return 0;
 8009144:	2300      	movs	r3, #0
 8009146:	e000      	b.n	800914a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	4a1c      	ldr	r2, [pc, #112]	; (80091d4 <http_get_404_file+0x80>)
 8009162:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f7fe ff17 	bl	8007fa0 <fs_open>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d024      	beq.n	80091c8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <http_get_404_file+0x84>)
 8009182:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f7fe ff07 	bl	8007fa0 <fs_open>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	4a0e      	ldr	r2, [pc, #56]	; (80091dc <http_get_404_file+0x88>)
 80091a2:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7fe fef7 	bl	8007fa0 <fs_open>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80091b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
        return NULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	e000      	b.n	80091ca <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80091c8:	687b      	ldr	r3, [r7, #4]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	0801ca34 	.word	0x0801ca34
 80091d8:	0801ca40 	.word	0x0801ca40
 80091dc:	0801ca4c 	.word	0x0801ca4c

080091e0 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 80091e8:	4b09      	ldr	r3, [pc, #36]	; (8009210 <http_handle_post_finished+0x30>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80091ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f2:	4907      	ldr	r1, [pc, #28]	; (8009210 <http_handle_post_finished+0x30>)
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fa fd35 	bl	8003c64 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80091fa:	2200      	movs	r2, #0
 80091fc:	4904      	ldr	r1, [pc, #16]	; (8009210 <http_handle_post_finished+0x30>)
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 faae 	bl	8009760 <http_find_file>
 8009204:	4603      	mov	r3, r0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000de0 	.word	0x20000de0

08009214 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d014      	beq.n	800924e <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	8912      	ldrh	r2, [r2, #8]
 800922e:	4293      	cmp	r3, r2
 8009230:	d204      	bcs.n	800923c <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800923a:	e008      	b.n	800924e <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	8912      	ldrh	r2, [r2, #8]
 8009246:	1a9a      	subs	r2, r3, r2
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d006      	beq.n	8009262 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fa fcd4 	bl	8003c04 <httpd_post_receive_data>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	e001      	b.n	8009266 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8009266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ffad 	bl	80091e0 <http_handle_post_finished>
 8009286:	4603      	mov	r3, r0
 8009288:	e000      	b.n	800928c <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b092      	sub	sp, #72	; 0x48
 8009298:	af04      	add	r7, sp, #16
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80092a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a4:	1c58      	adds	r0, r3, #1
 80092a6:	887a      	ldrh	r2, [r7, #2]
 80092a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092aa:	1c59      	adds	r1, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	1acb      	subs	r3, r1, r3
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	4966      	ldr	r1, [pc, #408]	; (8009450 <http_post_request+0x1bc>)
 80092b6:	f000 fe73 	bl	8009fa0 <lwip_strnstr>
 80092ba:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 80bf 	beq.w	8009442 <http_post_request+0x1ae>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80092c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c6:	1c58      	adds	r0, r3, #1
 80092c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ca:	3301      	adds	r3, #1
 80092cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	4960      	ldr	r1, [pc, #384]	; (8009454 <http_post_request+0x1c0>)
 80092d4:	f000 fe64 	bl	8009fa0 <lwip_strnstr>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80ad 	beq.w	800943c <http_post_request+0x1a8>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	3310      	adds	r3, #16
 80092e6:	220a      	movs	r2, #10
 80092e8:	495b      	ldr	r1, [pc, #364]	; (8009458 <http_post_request+0x1c4>)
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fe58 	bl	8009fa0 <lwip_strnstr>
 80092f0:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80a1 	beq.w	800943c <http_post_request+0x1a8>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	3310      	adds	r3, #16
 80092fe:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8009300:	69f8      	ldr	r0, [r7, #28]
 8009302:	f00d fce0 	bl	8016cc6 <atoi>
 8009306:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10b      	bne.n	8009326 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b30      	cmp	r3, #48	; 0x30
 8009314:	d104      	bne.n	8009320 <http_post_request+0x8c>
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	3301      	adds	r3, #1
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b0d      	cmp	r3, #13
 800931e:	d002      	beq.n	8009326 <http_post_request+0x92>
            content_len = -1;
 8009320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	f2c0 8084 	blt.w	8009436 <http_post_request+0x1a2>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800932e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009330:	3301      	adds	r3, #1
 8009332:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8009334:	887a      	ldrh	r2, [r7, #2]
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	1acb      	subs	r3, r1, r3
 800933e:	429a      	cmp	r2, r3
 8009340:	db05      	blt.n	800934e <http_post_request+0xba>
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	1d1a      	adds	r2, r3, #4
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	b29b      	uxth	r3, r3
 800934c:	e000      	b.n	8009350 <http_post_request+0xbc>
 800934e:	887b      	ldrh	r3, [r7, #2]
 8009350:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8009352:	887a      	ldrh	r2, [r7, #2]
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	1d19      	adds	r1, r3, #4
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	1acb      	subs	r3, r1, r3
 800935c:	429a      	cmp	r2, r3
 800935e:	db05      	blt.n	800936c <http_post_request+0xd8>
 8009360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009362:	1d1a      	adds	r2, r3, #4
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	b29b      	uxth	r3, r3
 800936a:	e000      	b.n	800936e <http_post_request+0xda>
 800936c:	887b      	ldrh	r3, [r7, #2]
 800936e:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8009370:	2301      	movs	r3, #1
 8009372:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <http_post_request+0x1c8>)
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	2200      	movs	r2, #0
 800937e:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8009380:	8aba      	ldrh	r2, [r7, #20]
 8009382:	f107 0312 	add.w	r3, r7, #18
 8009386:	9303      	str	r3, [sp, #12]
 8009388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800938c:	9302      	str	r3, [sp, #8]
 800938e:	4b33      	ldr	r3, [pc, #204]	; (800945c <http_post_request+0x1c8>)
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	4613      	mov	r3, r2
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800939c:	68b8      	ldr	r0, [r7, #8]
 800939e:	f7fa fc07 	bl	8003bb0 <httpd_post_begin>
 80093a2:	4603      	mov	r3, r0
 80093a4:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 80093a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d13c      	bne.n	8009428 <http_post_request+0x194>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80093b2:	8afb      	ldrh	r3, [r7, #22]
 80093b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80093b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80093be:	e007      	b.n	80093d0 <http_post_request+0x13c>
              start_offset -= q->len;
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	895b      	ldrh	r3, [r3, #10]
 80093c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <http_post_request+0x14c>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	895b      	ldrh	r3, [r3, #10]
 80093da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093dc:	429a      	cmp	r2, r3
 80093de:	d2ef      	bcs.n	80093c0 <http_post_request+0x12c>
            }
            if (q != NULL) {
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <http_post_request+0x16e>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80093e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093e8:	4619      	mov	r1, r3
 80093ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ec:	f002 f8be 	bl	800b56c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80093f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f2:	f002 f9e1 	bl	800b7b8 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80093f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093f8:	68b8      	ldr	r0, [r7, #8]
 80093fa:	f7ff ff0b 	bl	8009214 <http_post_rxpbuf>
 80093fe:	4603      	mov	r3, r0
 8009400:	e021      	b.n	8009446 <http_post_request+0x1b2>
            } else if (hs->post_content_len_left == 0) {
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <http_post_request+0x190>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800940c:	2241      	movs	r2, #65	; 0x41
 800940e:	2100      	movs	r1, #0
 8009410:	2000      	movs	r0, #0
 8009412:	f001 fe4d 	bl	800b0b0 <pbuf_alloc>
 8009416:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8009418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f7ff fefa 	bl	8009214 <http_post_rxpbuf>
 8009420:	4603      	mov	r3, r0
 8009422:	e010      	b.n	8009446 <http_post_request+0x1b2>
            } else {
              return ERR_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	e00e      	b.n	8009446 <http_post_request+0x1b2>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8009428:	2200      	movs	r2, #0
 800942a:	490c      	ldr	r1, [pc, #48]	; (800945c <http_post_request+0x1c8>)
 800942c:	68b8      	ldr	r0, [r7, #8]
 800942e:	f000 f997 	bl	8009760 <http_find_file>
 8009432:	4603      	mov	r3, r0
 8009434:	e007      	b.n	8009446 <http_post_request+0x1b2>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8009436:	f06f 030f 	mvn.w	r3, #15
 800943a:	e004      	b.n	8009446 <http_post_request+0x1b2>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800943c:	f06f 030f 	mvn.w	r3, #15
 8009440:	e001      	b.n	8009446 <http_post_request+0x1b2>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8009442:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009446:	4618      	mov	r0, r3
 8009448:	3738      	adds	r7, #56	; 0x38
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	0801ca58 	.word	0x0801ca58
 8009454:	0801c4e4 	.word	0x0801c4e4
 8009458:	0801c9c8 	.word	0x0801c9c8
 800945c:	20000de0 	.word	0x20000de0

08009460 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b092      	sub	sp, #72	; 0x48
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	2b00      	cmp	r3, #0
 8009474:	d106      	bne.n	8009484 <http_parse_request+0x24>
 8009476:	4b87      	ldr	r3, [pc, #540]	; (8009694 <http_parse_request+0x234>)
 8009478:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800947c:	4986      	ldr	r1, [pc, #536]	; (8009698 <http_parse_request+0x238>)
 800947e:	4887      	ldr	r0, [pc, #540]	; (800969c <http_parse_request+0x23c>)
 8009480:	f00e f8f2 	bl	8017668 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d106      	bne.n	8009498 <http_parse_request+0x38>
 800948a:	4b82      	ldr	r3, [pc, #520]	; (8009694 <http_parse_request+0x234>)
 800948c:	f240 72af 	movw	r2, #1967	; 0x7af
 8009490:	4983      	ldr	r1, [pc, #524]	; (80096a0 <http_parse_request+0x240>)
 8009492:	4882      	ldr	r0, [pc, #520]	; (800969c <http_parse_request+0x23c>)
 8009494:	f00e f8e8 	bl	8017668 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <http_parse_request+0x48>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80094a8:	f06f 0307 	mvn.w	r3, #7
 80094ac:	e0ee      	b.n	800968c <http_parse_request+0x22c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d103      	bne.n	80094be <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ba:	621a      	str	r2, [r3, #32]
 80094bc:	e005      	b.n	80094ca <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f002 f999 	bl	800b7fc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80094ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094cc:	f002 f974 	bl	800b7b8 <pbuf_ref>

  if (hs->req->next != NULL) {
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d012      	beq.n	8009500 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	891b      	ldrh	r3, [r3, #8]
 80094e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bf28      	it	cs
 80094e8:	4613      	movcs	r3, r2
 80094ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6a18      	ldr	r0, [r3, #32]
 80094f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80094f2:	2300      	movs	r3, #0
 80094f4:	496b      	ldr	r1, [pc, #428]	; (80096a4 <http_parse_request+0x244>)
 80094f6:	f002 fab9 	bl	800ba6c <pbuf_copy_partial>
    data = httpd_req_buf;
 80094fa:	4b6a      	ldr	r3, [pc, #424]	; (80096a4 <http_parse_request+0x244>)
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fe:	e005      	b.n	800950c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	895b      	ldrh	r3, [r3, #10]
 800950a:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800950c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800950e:	2b06      	cmp	r3, #6
 8009510:	f240 80a1 	bls.w	8009656 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009514:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009516:	461a      	mov	r2, r3
 8009518:	4963      	ldr	r1, [pc, #396]	; (80096a8 <http_parse_request+0x248>)
 800951a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800951c:	f000 fd40 	bl	8009fa0 <lwip_strnstr>
 8009520:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8096 	beq.w	8009656 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009532:	2204      	movs	r2, #4
 8009534:	495d      	ldr	r1, [pc, #372]	; (80096ac <http_parse_request+0x24c>)
 8009536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009538:	f00e f9dc 	bl	80178f4 <strncmp>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <http_parse_request+0xea>
        sp1 = data + 3;
 8009542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009544:	3303      	adds	r3, #3
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009548:	e014      	b.n	8009574 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800954a:	2205      	movs	r2, #5
 800954c:	4958      	ldr	r1, [pc, #352]	; (80096b0 <http_parse_request+0x250>)
 800954e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009550:	f00e f9d0 	bl	80178f4 <strncmp>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d105      	bne.n	8009566 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800955a:	2301      	movs	r3, #1
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009560:	3304      	adds	r3, #4
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009564:	e006      	b.n	8009574 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8009566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009568:	3304      	adds	r3, #4
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800956e:	f06f 030f 	mvn.w	r3, #15
 8009572:	e08b      	b.n	800968c <http_parse_request+0x22c>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	b29b      	uxth	r3, r3
 800957e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	3301      	adds	r3, #1
 8009588:	8bfa      	ldrh	r2, [r7, #30]
 800958a:	494a      	ldr	r1, [pc, #296]	; (80096b4 <http_parse_request+0x254>)
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fd07 	bl	8009fa0 <lwip_strnstr>
 8009592:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10c      	bne.n	80095b4 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	3301      	adds	r3, #1
 800959e:	8bfa      	ldrh	r2, [r7, #30]
 80095a0:	4941      	ldr	r1, [pc, #260]	; (80096a8 <http_parse_request+0x248>)
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fcfc 	bl	8009fa0 <lwip_strnstr>
 80095a8:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80095aa:	2301      	movs	r3, #1
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d164      	bne.n	800967e <http_parse_request+0x21e>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	3301      	adds	r3, #1
 80095b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d048      	beq.n	8009656 <http_parse_request+0x1f6>
 80095c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d944      	bls.n	8009656 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80095cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095ce:	461a      	mov	r2, r3
 80095d0:	4939      	ldr	r1, [pc, #228]	; (80096b8 <http_parse_request+0x258>)
 80095d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80095d4:	f000 fce4 	bl	8009fa0 <lwip_strnstr>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d03b      	beq.n	8009656 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	3301      	adds	r3, #1
 80095e2:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80095ea:	8bbb      	ldrh	r3, [r7, #28]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4413      	add	r3, r2
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 80095f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d026      	beq.n	8009648 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8009600:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	4613      	mov	r3, r2
 800960c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800960e:	68b9      	ldr	r1, [r7, #8]
 8009610:	6978      	ldr	r0, [r7, #20]
 8009612:	f7ff fe3f 	bl	8009294 <http_post_request>
 8009616:	4603      	mov	r3, r0
 8009618:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800961a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	2220      	movs	r2, #32
 8009626:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	2220      	movs	r2, #32
 800962c:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800962e:	8bbb      	ldrh	r3, [r7, #28]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	4413      	add	r3, r2
 8009634:	2220      	movs	r2, #32
 8009636:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8009638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800963c:	f113 0f10 	cmn.w	r3, #16
 8009640:	d01f      	beq.n	8009682 <http_parse_request+0x222>
              goto badrequest;
            }
            return err;
 8009642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009646:	e021      	b.n	800968c <http_parse_request+0x22c>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964a:	69b9      	ldr	r1, [r7, #24]
 800964c:	68b8      	ldr	r0, [r7, #8]
 800964e:	f000 f887 	bl	8009760 <http_find_file>
 8009652:	4603      	mov	r3, r0
 8009654:	e01a      	b.n	800968c <http_parse_request+0x22c>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	4618      	mov	r0, r3
 800965c:	f002 f894 	bl	800b788 <pbuf_clen>
 8009660:	4603      	mov	r3, r0
 8009662:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	891b      	ldrh	r3, [r3, #8]
 800966a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800966e:	4293      	cmp	r3, r2
 8009670:	d809      	bhi.n	8009686 <http_parse_request+0x226>
 8009672:	8a3b      	ldrh	r3, [r7, #16]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d806      	bhi.n	8009686 <http_parse_request+0x226>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009678:	f06f 0304 	mvn.w	r3, #4
 800967c:	e006      	b.n	800968c <http_parse_request+0x22c>
          goto badrequest;
 800967e:	bf00      	nop
 8009680:	e002      	b.n	8009688 <http_parse_request+0x228>
              goto badrequest;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <http_parse_request+0x228>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8009686:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009688:	f06f 030f 	mvn.w	r3, #15
  }
}
 800968c:	4618      	mov	r0, r3
 800968e:	3740      	adds	r7, #64	; 0x40
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	0801c8d4 	.word	0x0801c8d4
 8009698:	0801ca60 	.word	0x0801ca60
 800969c:	0801c91c 	.word	0x0801c91c
 80096a0:	0801c944 	.word	0x0801c944
 80096a4:	20000800 	.word	0x20000800
 80096a8:	0801c9c8 	.word	0x0801c9c8
 80096ac:	0801ca6c 	.word	0x0801ca6c
 80096b0:	0801ca74 	.word	0x0801ca74
 80096b4:	0801ca7c 	.word	0x0801ca7c
 80096b8:	0801ca58 	.word	0x0801ca58

080096bc <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d040      	beq.n	8009752 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80096d4:	213f      	movs	r1, #63	; 0x3f
 80096d6:	6838      	ldr	r0, [r7, #0]
 80096d8:	f00e f8f7 	bl	80178ca <strchr>
 80096dc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	613b      	str	r3, [r7, #16]
    ext = uri;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80096f2:	212e      	movs	r1, #46	; 0x2e
 80096f4:	6938      	ldr	r0, [r7, #16]
 80096f6:	f00e f8e8 	bl	80178ca <strchr>
 80096fa:	6138      	str	r0, [r7, #16]
 80096fc:	e009      	b.n	8009712 <http_uri_is_ssi+0x56>
      ext = sub;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	617b      	str	r3, [r7, #20]
      sub++;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3301      	adds	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009708:	212e      	movs	r1, #46	; 0x2e
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f00e f8dd 	bl	80178ca <strchr>
 8009710:	6138      	str	r0, [r7, #16]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1f2      	bne.n	80096fe <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009718:	2300      	movs	r3, #0
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	e010      	b.n	8009740 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800971e:	4a0f      	ldr	r2, [pc, #60]	; (800975c <http_uri_is_ssi+0xa0>)
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009726:	4619      	mov	r1, r3
 8009728:	6978      	ldr	r0, [r7, #20]
 800972a:	f000 fc6f 	bl	800a00c <lwip_stricmp>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	76fb      	strb	r3, [r7, #27]
        break;
 8009738:	e005      	b.n	8009746 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3301      	adds	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	2b04      	cmp	r3, #4
 8009744:	d9eb      	bls.n	800971e <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <http_uri_is_ssi+0x96>
      *param = '?';
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	223f      	movs	r2, #63	; 0x3f
 8009750:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8009752:	7efb      	ldrb	r3, [r7, #27]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3720      	adds	r7, #32
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	080338ec 	.word	0x080338ec

08009760 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b093      	sub	sp, #76	; 0x4c
 8009764:	af02      	add	r7, sp, #8
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8009770:	2300      	movs	r3, #0
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	4618      	mov	r0, r3
 800977e:	f7f6 fd31 	bl	80001e4 <strlen>
 8009782:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d074      	beq.n	8009874 <http_find_file+0x114>
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	3b01      	subs	r3, #1
 8009790:	4413      	add	r3, r2
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b2f      	cmp	r3, #47	; 0x2f
 8009796:	d16d      	bne.n	8009874 <http_find_file+0x114>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009798:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800979a:	4a81      	ldr	r2, [pc, #516]	; (80099a0 <http_find_file+0x240>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d102      	bne.n	80097a6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d166      	bne.n	8009874 <http_find_file+0x114>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	3b01      	subs	r3, #1
 80097aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ae:	bf28      	it	cs
 80097b0:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80097b4:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <http_find_file+0x72>
      MEMCPY(http_uri_buf, uri, copy_len);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6a3a      	ldr	r2, [r7, #32]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4877      	ldr	r0, [pc, #476]	; (80099a0 <http_find_file+0x240>)
 80097c4:	f00d fab6 	bl	8016d34 <memcpy>
      http_uri_buf[copy_len] = 0;
 80097c8:	4a75      	ldr	r2, [pc, #468]	; (80099a0 <http_find_file+0x240>)
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	4413      	add	r3, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80097d2:	2300      	movs	r3, #0
 80097d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d6:	e04a      	b.n	800986e <http_find_file+0x10e>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d028      	beq.n	8009830 <http_find_file+0xd0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80097e4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01e      	beq.n	800982a <http_find_file+0xca>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80097ec:	4a6d      	ldr	r2, [pc, #436]	; (80099a4 <http_find_file+0x244>)
 80097ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f6 fcf5 	bl	80001e4 <strlen>
 80097fa:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4293      	cmp	r3, r2
 8009802:	bf28      	it	cs
 8009804:	4613      	movcs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	4a65      	ldr	r2, [pc, #404]	; (80099a0 <http_find_file+0x240>)
 800980c:	1898      	adds	r0, r3, r2
 800980e:	4a65      	ldr	r2, [pc, #404]	; (80099a4 <http_find_file+0x244>)
 8009810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009812:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4619      	mov	r1, r3
 800981a:	f00d fa8b 	bl	8016d34 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	4413      	add	r3, r2
 8009824:	4a5e      	ldr	r2, [pc, #376]	; (80099a0 <http_find_file+0x240>)
 8009826:	2100      	movs	r1, #0
 8009828:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800982a:	4b5d      	ldr	r3, [pc, #372]	; (80099a0 <http_find_file+0x240>)
 800982c:	62bb      	str	r3, [r7, #40]	; 0x28
 800982e:	e004      	b.n	800983a <http_find_file+0xda>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009830:	4a5c      	ldr	r2, [pc, #368]	; (80099a4 <http_find_file+0x244>)
 8009832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fbae 	bl	8007fa0 <fs_open>
 8009844:	4603      	mov	r3, r0
 8009846:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8009848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10b      	bne.n	8009868 <http_find_file+0x108>
        uri = file_name;
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8009858:	4a52      	ldr	r2, [pc, #328]	; (80099a4 <http_find_file+0x244>)
 800985a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8009866:	e005      	b.n	8009874 <http_find_file+0x114>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986a:	3301      	adds	r3, #1
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009870:	2b04      	cmp	r3, #4
 8009872:	d9b1      	bls.n	80097d8 <http_find_file+0x78>
      }
    }
  }
  if (file == NULL) {
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d176      	bne.n	8009968 <http_find_file+0x208>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	213f      	movs	r1, #63	; 0x3f
 800987e:	4618      	mov	r0, r3
 8009880:	f00e f823 	bl	80178ca <strchr>
 8009884:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <http_find_file+0x138>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800988c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
      params++;
 8009892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009894:	3301      	adds	r3, #1
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8009898:	4b43      	ldr	r3, [pc, #268]	; (80099a8 <http_find_file+0x248>)
 800989a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800989e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80098a0:	4b42      	ldr	r3, [pc, #264]	; (80099ac <http_find_file+0x24c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d034      	beq.n	8009912 <http_find_file+0x1b2>
 80098a8:	4b41      	ldr	r3, [pc, #260]	; (80099b0 <http_find_file+0x250>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d030      	beq.n	8009912 <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 80098b0:	2300      	movs	r3, #0
 80098b2:	633b      	str	r3, [r7, #48]	; 0x30
 80098b4:	e028      	b.n	8009908 <http_find_file+0x1a8>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80098b6:	68b8      	ldr	r0, [r7, #8]
 80098b8:	4b3d      	ldr	r3, [pc, #244]	; (80099b0 <http_find_file+0x250>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	f7f6 fc83 	bl	80001d0 <strcmp>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d118      	bne.n	8009902 <http_find_file+0x1a2>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80098d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7fe fd1a 	bl	800830c <extract_uri_parameters>
 80098d8:	4603      	mov	r3, r0
 80098da:	4a33      	ldr	r2, [pc, #204]	; (80099a8 <http_find_file+0x248>)
 80098dc:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80098de:	4b34      	ldr	r3, [pc, #208]	; (80099b0 <http_find_file+0x250>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	4413      	add	r3, r2
 80098e8:	685c      	ldr	r4, [r3, #4]
 80098ea:	4b2f      	ldr	r3, [pc, #188]	; (80099a8 <http_find_file+0x248>)
 80098ec:	6819      	ldr	r1, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80098f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098fa:	47a0      	blx	r4
 80098fc:	4603      	mov	r3, r0
 80098fe:	60bb      	str	r3, [r7, #8]
          break;
 8009900:	e007      	b.n	8009912 <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	3301      	adds	r3, #1
 8009906:	633b      	str	r3, [r7, #48]	; 0x30
 8009908:	4b28      	ldr	r3, [pc, #160]	; (80099ac <http_find_file+0x24c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800990e:	429a      	cmp	r2, r3
 8009910:	dbd1      	blt.n	80098b6 <http_find_file+0x156>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fb41 	bl	8007fa0 <fs_open>
 800991e:	4603      	mov	r3, r0
 8009920:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8009922:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <http_find_file+0x1d0>
      file = &hs->file_handle;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	63bb      	str	r3, [r7, #56]	; 0x38
 800992e:	e006      	b.n	800993e <http_find_file+0x1de>
    } else {
      file = http_get_404_file(hs, &uri);
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4619      	mov	r1, r3
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff fc0c 	bl	8009154 <http_get_404_file>
 800993c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d011      	beq.n	8009968 <http_find_file+0x208>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	7c1b      	ldrb	r3, [r3, #16]
 8009948:	f003 0308 	and.w	r3, r3, #8
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <http_find_file+0x1f8>
        tag_check = 1;
 8009950:	2301      	movs	r3, #1
 8009952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009956:	e007      	b.n	8009968 <http_find_file+0x208>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4619      	mov	r1, r3
 800995c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800995e:	f7ff fead 	bl	80096bc <http_uri_is_ssi>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <http_find_file+0x21c>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800996e:	f107 0308 	add.w	r3, r7, #8
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fbed 	bl	8009154 <http_get_404_file>
 800997a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 f810 	bl	80099b4 <http_init_file>
 8009994:	4603      	mov	r3, r0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3744      	adds	r7, #68	; 0x44
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000de0 	.word	0x20000de0
 80099a4:	08033900 	.word	0x08033900
 80099a8:	200011e0 	.word	0x200011e0
 80099ac:	200011dc 	.word	0x200011dc
 80099b0:	200011d8 	.word	0x200011d8

080099b4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d06f      	beq.n	8009aa8 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <http_init_file+0x2a>
 80099d0:	4b46      	ldr	r3, [pc, #280]	; (8009aec <http_init_file+0x138>)
 80099d2:	f640 120b 	movw	r2, #2315	; 0x90b
 80099d6:	4946      	ldr	r1, [pc, #280]	; (8009af0 <http_init_file+0x13c>)
 80099d8:	4846      	ldr	r0, [pc, #280]	; (8009af4 <http_init_file+0x140>)
 80099da:	f00d fe45 	bl	8017668 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80099de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01c      	beq.n	8009a20 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80099e6:	f7fe fb32 	bl	800804e <http_ssi_state_alloc>
 80099ea:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d016      	beq.n	8009a20 <http_init_file+0x6c>
        ssi->tag_index = 0;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2200      	movs	r2, #0
 80099f6:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        ssi->parsed = file->data;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	69fa      	ldr	r2, [r7, #28]
 8009a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da06      	bge.n	8009a44 <http_init_file+0x90>
 8009a36:	4b2d      	ldr	r3, [pc, #180]	; (8009aec <http_init_file+0x138>)
 8009a38:	f640 1234 	movw	r2, #2356	; 0x934
 8009a3c:	492e      	ldr	r1, [pc, #184]	; (8009af8 <http_init_file+0x144>)
 8009a3e:	482d      	ldr	r0, [pc, #180]	; (8009af4 <http_init_file+0x140>)
 8009a40:	f00d fe12 	bl	8017668 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d032      	beq.n	8009ac2 <http_init_file+0x10e>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	7c1b      	ldrb	r3, [r3, #16]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d02b      	beq.n	8009ac2 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6998      	ldr	r0, [r3, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	461a      	mov	r2, r3
 8009a74:	4921      	ldr	r1, [pc, #132]	; (8009afc <http_init_file+0x148>)
 8009a76:	f000 fa93 	bl	8009fa0 <lwip_strnstr>
 8009a7a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01f      	beq.n	8009ac2 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	1d1a      	adds	r2, r3, #4
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	441a      	add	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	1ad2      	subs	r2, r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8009aa6:	e00c      	b.n	8009ac2 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d006      	beq.n	8009ad8 <http_init_file+0x124>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	7c1b      	ldrb	r3, [r3, #16]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d103      	bne.n	8009ae0 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7fe fd46 	bl	800856c <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3720      	adds	r7, #32
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	0801c8d4 	.word	0x0801c8d4
 8009af0:	0801ca80 	.word	0x0801ca80
 8009af4:	0801c91c 	.word	0x0801c91c
 8009af8:	0801ca94 	.word	0x0801ca94
 8009afc:	0801ca58 	.word	0x0801ca58

08009b00 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <http_err+0x1c>
    http_state_free(hs);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fe fb0c 	bl	8008134 <http_state_free>
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <http_sent+0x1c>
    return ERR_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e008      	b.n	8009b52 <http_sent+0x2e>
  }

  hs->retries = 0;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8009b48:	6979      	ldr	r1, [r7, #20]
 8009b4a:	68b8      	ldr	r0, [r7, #8]
 8009b4c:	f7ff faa8 	bl	80090a0 <http_send>

  return ERR_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d107      	bne.n	8009b7e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009b6e:	2100      	movs	r1, #0
 8009b70:	6838      	ldr	r0, [r7, #0]
 8009b72:	f7fe fbaf 	bl	80082d4 <http_close_conn>
 8009b76:	4603      	mov	r3, r0
 8009b78:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e021      	b.n	8009bc2 <http_poll+0x68>
  } else {
    hs->retries++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b84:	3301      	adds	r3, #1
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d105      	bne.n	8009ba4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009b98:	68f9      	ldr	r1, [r7, #12]
 8009b9a:	6838      	ldr	r0, [r7, #0]
 8009b9c:	f7fe fb9a 	bl	80082d4 <http_close_conn>
      return ERR_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	e00e      	b.n	8009bc2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d009      	beq.n	8009bc0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	6838      	ldr	r0, [r7, #0]
 8009bb0:	f7ff fa76 	bl	80090a0 <http_send>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009bba:	6838      	ldr	r0, [r7, #0]
 8009bbc:	f007 f9a2 	bl	8010f04 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <http_recv+0x26>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <http_recv+0x26>
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d111      	bne.n	8009c16 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	891b      	ldrh	r3, [r3, #8]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	68b8      	ldr	r0, [r7, #8]
 8009c00:	f002 fcb0 	bl	800c564 <tcp_recved>
      pbuf_free(p);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fd37 	bl	800b678 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009c0a:	6979      	ldr	r1, [r7, #20]
 8009c0c:	68b8      	ldr	r0, [r7, #8]
 8009c0e:	f7fe fb61 	bl	80082d4 <http_close_conn>
    return ERR_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	e072      	b.n	8009cfc <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	891b      	ldrh	r3, [r3, #8]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68b8      	ldr	r0, [r7, #8]
 8009c1e:	f002 fca1 	bl	800c564 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d012      	beq.n	8009c52 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f7ff faec 	bl	8009214 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d103      	bne.n	8009c4e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	68b8      	ldr	r0, [r7, #8]
 8009c4a:	f7ff fa29 	bl	80090a0 <http_send>
    }
    return ERR_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e054      	b.n	8009cfc <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d14c      	bne.n	8009cf4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	6979      	ldr	r1, [r7, #20]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fbfe 	bl	8009460 <http_parse_request>
 8009c64:	4603      	mov	r3, r0
 8009c66:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009c68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d015      	beq.n	8009c9c <http_recv+0xd0>
 8009c70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c74:	f113 0f05 	cmn.w	r3, #5
 8009c78:	d010      	beq.n	8009c9c <http_recv+0xd0>
 8009c7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c7e:	f113 0f10 	cmn.w	r3, #16
 8009c82:	d00b      	beq.n	8009c9c <http_recv+0xd0>
 8009c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c88:	f113 0f08 	cmn.w	r3, #8
 8009c8c:	d006      	beq.n	8009c9c <http_recv+0xd0>
 8009c8e:	4b1d      	ldr	r3, [pc, #116]	; (8009d04 <http_recv+0x138>)
 8009c90:	f640 2204 	movw	r2, #2564	; 0xa04
 8009c94:	491c      	ldr	r1, [pc, #112]	; (8009d08 <http_recv+0x13c>)
 8009c96:	481d      	ldr	r0, [pc, #116]	; (8009d0c <http_recv+0x140>)
 8009c98:	f00d fce6 	bl	8017668 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ca0:	f113 0f05 	cmn.w	r3, #5
 8009ca4:	d00b      	beq.n	8009cbe <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <http_recv+0xf2>
          pbuf_free(hs->req);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 fce0 	bl	800b678 <pbuf_free>
          hs->req = NULL;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fcda 	bl	800b678 <pbuf_free>
      if (parsed == ERR_OK) {
 8009cc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d111      	bne.n	8009cfa <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009cd6:	6979      	ldr	r1, [r7, #20]
 8009cd8:	68b8      	ldr	r0, [r7, #8]
 8009cda:	f7ff f9e1 	bl	80090a0 <http_send>
 8009cde:	e00c      	b.n	8009cfa <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8009ce0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ce4:	f113 0f10 	cmn.w	r3, #16
 8009ce8:	d107      	bne.n	8009cfa <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009cea:	6979      	ldr	r1, [r7, #20]
 8009cec:	68b8      	ldr	r0, [r7, #8]
 8009cee:	f7fe faf1 	bl	80082d4 <http_close_conn>
 8009cf2:	e002      	b.n	8009cfa <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fcbf 	bl	800b678 <pbuf_free>
    }
  }
  return ERR_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	0801c8d4 	.word	0x0801c8d4
 8009d08:	0801cab4 	.word	0x0801cab4
 8009d0c:	0801c91c 	.word	0x0801c91c

08009d10 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8009d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <http_accept+0x1c>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <http_accept+0x22>
    return ERR_VAL;
 8009d2c:	f06f 0305 	mvn.w	r3, #5
 8009d30:	e025      	b.n	8009d7e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009d32:	2101      	movs	r1, #1
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f003 f8fb 	bl	800cf30 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8009d3a:	f7fe f9bd 	bl	80080b8 <http_state_alloc>
 8009d3e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d4a:	e018      	b.n	8009d7e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	68b8      	ldr	r0, [r7, #8]
 8009d56:	f003 faeb 	bl	800d330 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8009d5a:	490b      	ldr	r1, [pc, #44]	; (8009d88 <http_accept+0x78>)
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f003 faf9 	bl	800d354 <tcp_recv>
  altcp_err(pcb, http_err);
 8009d62:	490a      	ldr	r1, [pc, #40]	; (8009d8c <http_accept+0x7c>)
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f003 fb39 	bl	800d3dc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009d6a:	2204      	movs	r2, #4
 8009d6c:	4908      	ldr	r1, [pc, #32]	; (8009d90 <http_accept+0x80>)
 8009d6e:	68b8      	ldr	r0, [r7, #8]
 8009d70:	f003 fb6e 	bl	800d450 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009d74:	4907      	ldr	r1, [pc, #28]	; (8009d94 <http_accept+0x84>)
 8009d76:	68b8      	ldr	r0, [r7, #8]
 8009d78:	f003 fb0e 	bl	800d398 <tcp_sent>

  return ERR_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	08009bcd 	.word	0x08009bcd
 8009d8c:	08009b01 	.word	0x08009b01
 8009d90:	08009b5b 	.word	0x08009b5b
 8009d94:	08009b25 	.word	0x08009b25

08009d98 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d029      	beq.n	8009dfe <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009daa:	2101      	movs	r1, #1
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f003 f8bf 	bl	800cf30 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8009db2:	887b      	ldrh	r3, [r7, #2]
 8009db4:	461a      	mov	r2, r3
 8009db6:	4914      	ldr	r1, [pc, #80]	; (8009e08 <httpd_init_pcb+0x70>)
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f002 fa05 	bl	800c1c8 <tcp_bind>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8009dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d006      	beq.n	8009dd8 <httpd_init_pcb+0x40>
 8009dca:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <httpd_init_pcb+0x74>)
 8009dcc:	f640 2257 	movw	r2, #2647	; 0xa57
 8009dd0:	490f      	ldr	r1, [pc, #60]	; (8009e10 <httpd_init_pcb+0x78>)
 8009dd2:	4810      	ldr	r0, [pc, #64]	; (8009e14 <httpd_init_pcb+0x7c>)
 8009dd4:	f00d fc48 	bl	8017668 <iprintf>
    pcb = altcp_listen(pcb);
 8009dd8:	21ff      	movs	r1, #255	; 0xff
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f002 faac 	bl	800c338 <tcp_listen_with_backlog>
 8009de0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d106      	bne.n	8009df6 <httpd_init_pcb+0x5e>
 8009de8:	4b08      	ldr	r3, [pc, #32]	; (8009e0c <httpd_init_pcb+0x74>)
 8009dea:	f640 2259 	movw	r2, #2649	; 0xa59
 8009dee:	490a      	ldr	r1, [pc, #40]	; (8009e18 <httpd_init_pcb+0x80>)
 8009df0:	4808      	ldr	r0, [pc, #32]	; (8009e14 <httpd_init_pcb+0x7c>)
 8009df2:	f00d fc39 	bl	8017668 <iprintf>
    altcp_accept(pcb, http_accept);
 8009df6:	4909      	ldr	r1, [pc, #36]	; (8009e1c <httpd_init_pcb+0x84>)
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f003 fb11 	bl	800d420 <tcp_accept>
  }
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	08033a18 	.word	0x08033a18
 8009e0c:	0801c8d4 	.word	0x0801c8d4
 8009e10:	0801cae0 	.word	0x0801cae0
 8009e14:	0801c91c 	.word	0x0801c91c
 8009e18:	0801cafc 	.word	0x0801cafc
 8009e1c:	08009d11 	.word	0x08009d11

08009e20 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009e26:	202e      	movs	r0, #46	; 0x2e
 8009e28:	f003 fa74 	bl	800d314 <tcp_new_ip_type>
 8009e2c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d106      	bne.n	8009e42 <httpd_init+0x22>
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <httpd_init+0x34>)
 8009e36:	f640 2272 	movw	r2, #2674	; 0xa72
 8009e3a:	4907      	ldr	r1, [pc, #28]	; (8009e58 <httpd_init+0x38>)
 8009e3c:	4807      	ldr	r0, [pc, #28]	; (8009e5c <httpd_init+0x3c>)
 8009e3e:	f00d fc13 	bl	8017668 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009e42:	2150      	movs	r1, #80	; 0x50
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ffa7 	bl	8009d98 <httpd_init_pcb>
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	0801c8d4 	.word	0x0801c8d4
 8009e58:	0801cb1c 	.word	0x0801cb1c
 8009e5c:	0801c91c 	.word	0x0801c91c

08009e60 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <http_set_ssi_handler+0x20>
 8009e72:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <http_set_ssi_handler+0x64>)
 8009e74:	f640 2297 	movw	r2, #2711	; 0xa97
 8009e78:	4913      	ldr	r1, [pc, #76]	; (8009ec8 <http_set_ssi_handler+0x68>)
 8009e7a:	4814      	ldr	r0, [pc, #80]	; (8009ecc <http_set_ssi_handler+0x6c>)
 8009e7c:	f00d fbf4 	bl	8017668 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8009e80:	4a13      	ldr	r2, [pc, #76]	; (8009ed0 <http_set_ssi_handler+0x70>)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <http_set_ssi_handler+0x3a>
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <http_set_ssi_handler+0x64>)
 8009e8e:	f640 229e 	movw	r2, #2718	; 0xa9e
 8009e92:	4910      	ldr	r1, [pc, #64]	; (8009ed4 <http_set_ssi_handler+0x74>)
 8009e94:	480d      	ldr	r0, [pc, #52]	; (8009ecc <http_set_ssi_handler+0x6c>)
 8009e96:	f00d fbe7 	bl	8017668 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc06      	bgt.n	8009eae <http_set_ssi_handler+0x4e>
 8009ea0:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <http_set_ssi_handler+0x64>)
 8009ea2:	f640 229f 	movw	r2, #2719	; 0xa9f
 8009ea6:	490c      	ldr	r1, [pc, #48]	; (8009ed8 <http_set_ssi_handler+0x78>)
 8009ea8:	4808      	ldr	r0, [pc, #32]	; (8009ecc <http_set_ssi_handler+0x6c>)
 8009eaa:	f00d fbdd 	bl	8017668 <iprintf>

  httpd_tags = tags;
 8009eae:	4a0b      	ldr	r2, [pc, #44]	; (8009edc <http_set_ssi_handler+0x7c>)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8009eb4:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <http_set_ssi_handler+0x80>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0801c8d4 	.word	0x0801c8d4
 8009ec8:	0801cb38 	.word	0x0801cb38
 8009ecc:	0801c91c 	.word	0x0801c91c
 8009ed0:	200011cc 	.word	0x200011cc
 8009ed4:	0801cb50 	.word	0x0801cb50
 8009ed8:	0801cb60 	.word	0x0801cb60
 8009edc:	200011d4 	.word	0x200011d4
 8009ee0:	200011d0 	.word	0x200011d0

08009ee4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d106      	bne.n	8009f02 <http_set_cgi_handlers+0x1e>
 8009ef4:	4b0d      	ldr	r3, [pc, #52]	; (8009f2c <http_set_cgi_handlers+0x48>)
 8009ef6:	f640 22b2 	movw	r2, #2738	; 0xab2
 8009efa:	490d      	ldr	r1, [pc, #52]	; (8009f30 <http_set_cgi_handlers+0x4c>)
 8009efc:	480d      	ldr	r0, [pc, #52]	; (8009f34 <http_set_cgi_handlers+0x50>)
 8009efe:	f00d fbb3 	bl	8017668 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dc06      	bgt.n	8009f16 <http_set_cgi_handlers+0x32>
 8009f08:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <http_set_cgi_handlers+0x48>)
 8009f0a:	f640 22b3 	movw	r2, #2739	; 0xab3
 8009f0e:	490a      	ldr	r1, [pc, #40]	; (8009f38 <http_set_cgi_handlers+0x54>)
 8009f10:	4808      	ldr	r0, [pc, #32]	; (8009f34 <http_set_cgi_handlers+0x50>)
 8009f12:	f00d fba9 	bl	8017668 <iprintf>

  httpd_cgis = cgis;
 8009f16:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <http_set_cgi_handlers+0x58>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8009f1c:	4a08      	ldr	r2, [pc, #32]	; (8009f40 <http_set_cgi_handlers+0x5c>)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6013      	str	r3, [r2, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	0801c8d4 	.word	0x0801c8d4
 8009f30:	0801cb78 	.word	0x0801cb78
 8009f34:	0801c91c 	.word	0x0801c91c
 8009f38:	0801cb88 	.word	0x0801cb88
 8009f3c:	200011d8 	.word	0x200011d8
 8009f40:	200011dc 	.word	0x200011dc

08009f44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	b21a      	sxth	r2, r3
 8009f54:	88fb      	ldrh	r3, [r7, #6]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	b21b      	sxth	r3, r3
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	b21b      	sxth	r3, r3
 8009f60:	b29b      	uxth	r3, r3
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	061a      	lsls	r2, r3, #24
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	0a1b      	lsrs	r3, r3, #8
 8009f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	0e1b      	lsrs	r3, r3, #24
 8009f92:	4313      	orrs	r3, r2
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f7f6 f919 	bl	80001e4 <strlen>
 8009fb2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	e022      	b.n	800a004 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e012      	b.n	8009fea <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d109      	bne.n	8009fe4 <lwip_strnstr+0x44>
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	68b9      	ldr	r1, [r7, #8]
 8009fd4:	6978      	ldr	r0, [r7, #20]
 8009fd6:	f00d fc8d 	bl	80178f4 <strncmp>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	e00f      	b.n	800a004 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d007      	beq.n	800a002 <lwip_strnstr+0x62>
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	441a      	add	r2, r3
 8009ff8:	68f9      	ldr	r1, [r7, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	440b      	add	r3, r1
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d9e0      	bls.n	8009fc4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	603a      	str	r2, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800a02a:	7bfa      	ldrb	r2, [r7, #15]
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d016      	beq.n	800a060 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	f043 0320 	orr.w	r3, r3, #32
 800a038:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a03a:	7b7b      	ldrb	r3, [r7, #13]
 800a03c:	2b60      	cmp	r3, #96	; 0x60
 800a03e:	d90c      	bls.n	800a05a <lwip_stricmp+0x4e>
 800a040:	7b7b      	ldrb	r3, [r7, #13]
 800a042:	2b7a      	cmp	r3, #122	; 0x7a
 800a044:	d809      	bhi.n	800a05a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	f043 0320 	orr.w	r3, r3, #32
 800a04c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800a04e:	7b7a      	ldrb	r2, [r7, #13]
 800a050:	7b3b      	ldrb	r3, [r7, #12]
 800a052:	429a      	cmp	r2, r3
 800a054:	d003      	beq.n	800a05e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a056:	2301      	movs	r3, #1
 800a058:	e006      	b.n	800a068 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e004      	b.n	800a068 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a05e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1d7      	bne.n	800a016 <lwip_stricmp+0xa>
  return 0;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  char *res = result;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3b01      	subs	r3, #1
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfb8      	it	lt
 800a094:	425b      	neglt	r3, r3
 800a096:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d806      	bhi.n	800a0ac <lwip_itoa+0x38>
    if (bufsize == 1) {
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d154      	bne.n	800a14e <lwip_itoa+0xda>
      *result = 0;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
    }
    return;
 800a0aa:	e050      	b.n	800a14e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	da04      	bge.n	800a0bc <lwip_itoa+0x48>
    *res++ = '-';
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	61fa      	str	r2, [r7, #28]
 800a0b8:	222d      	movs	r2, #45	; 0x2d
 800a0ba:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800a0c2:	e01c      	b.n	800a0fe <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	4b24      	ldr	r3, [pc, #144]	; (800a158 <lwip_itoa+0xe4>)
 800a0c8:	fb83 1302 	smull	r1, r3, r3, r2
 800a0cc:	1099      	asrs	r1, r3, #2
 800a0ce:	17d3      	asrs	r3, r2, #31
 800a0d0:	1ac9      	subs	r1, r1, r3
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	1ad1      	subs	r1, r2, r3
 800a0dc:	b2cb      	uxtb	r3, r1
 800a0de:	3330      	adds	r3, #48	; 0x30
 800a0e0:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	7cfa      	ldrb	r2, [r7, #19]
 800a0ec:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	4a19      	ldr	r2, [pc, #100]	; (800a158 <lwip_itoa+0xe4>)
 800a0f2:	fb82 1203 	smull	r1, r2, r2, r3
 800a0f6:	1092      	asrs	r2, r2, #2
 800a0f8:	17db      	asrs	r3, r3, #31
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <lwip_itoa+0x98>
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d8db      	bhi.n	800a0c4 <lwip_itoa+0x50>
  }
  if (n) {
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
    return;
 800a118:	e01a      	b.n	800a150 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	61fa      	str	r2, [r7, #28]
 800a128:	2230      	movs	r2, #48	; 0x30
 800a12a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	61fa      	str	r2, [r7, #28]
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
    return;
 800a136:	e00b      	b.n	800a150 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	441a      	add	r2, r3
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	461a      	mov	r2, r3
 800a144:	69b9      	ldr	r1, [r7, #24]
 800a146:	69f8      	ldr	r0, [r7, #28]
 800a148:	f00c fe02 	bl	8016d50 <memmove>
 800a14c:	e000      	b.n	800a150 <lwip_itoa+0xdc>
    return;
 800a14e:	bf00      	nop
}
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	66666667 	.word	0x66666667

0800a15c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a166:	f000 f8d5 	bl	800a314 <mem_init>
  memp_init();
 800a16a:	f000 fbdb 	bl	800a924 <memp_init>
  pbuf_init();
  netif_init();
 800a16e:	f000 fc93 	bl	800aa98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a172:	f007 ff8d 	bl	8012090 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a176:	f001 fd1d 	bl	800bbb4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a17a:	f007 feff 	bl	8011f7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a17e:	bf00      	nop
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <ptr_to_mem+0x20>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	4413      	add	r3, r2
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	200011e4 	.word	0x200011e4

0800a1ac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a1b4:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <mem_to_ptr+0x20>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	b29b      	uxth	r3, r3
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	200011e4 	.word	0x200011e4

0800a1d0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a1d8:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <plug_holes+0x120>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d206      	bcs.n	800a1f0 <plug_holes+0x20>
 800a1e2:	4b44      	ldr	r3, [pc, #272]	; (800a2f4 <plug_holes+0x124>)
 800a1e4:	f240 12df 	movw	r2, #479	; 0x1df
 800a1e8:	4943      	ldr	r1, [pc, #268]	; (800a2f8 <plug_holes+0x128>)
 800a1ea:	4844      	ldr	r0, [pc, #272]	; (800a2fc <plug_holes+0x12c>)
 800a1ec:	f00d fa3c 	bl	8017668 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a1f0:	4b43      	ldr	r3, [pc, #268]	; (800a300 <plug_holes+0x130>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d306      	bcc.n	800a208 <plug_holes+0x38>
 800a1fa:	4b3e      	ldr	r3, [pc, #248]	; (800a2f4 <plug_holes+0x124>)
 800a1fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a200:	4940      	ldr	r1, [pc, #256]	; (800a304 <plug_holes+0x134>)
 800a202:	483e      	ldr	r0, [pc, #248]	; (800a2fc <plug_holes+0x12c>)
 800a204:	f00d fa30 	bl	8017668 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	791b      	ldrb	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <plug_holes+0x4e>
 800a210:	4b38      	ldr	r3, [pc, #224]	; (800a2f4 <plug_holes+0x124>)
 800a212:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a216:	493c      	ldr	r1, [pc, #240]	; (800a308 <plug_holes+0x138>)
 800a218:	4838      	ldr	r0, [pc, #224]	; (800a2fc <plug_holes+0x12c>)
 800a21a:	f00d fa25 	bl	8017668 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	881b      	ldrh	r3, [r3, #0]
 800a222:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a226:	d906      	bls.n	800a236 <plug_holes+0x66>
 800a228:	4b32      	ldr	r3, [pc, #200]	; (800a2f4 <plug_holes+0x124>)
 800a22a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a22e:	4937      	ldr	r1, [pc, #220]	; (800a30c <plug_holes+0x13c>)
 800a230:	4832      	ldr	r0, [pc, #200]	; (800a2fc <plug_holes+0x12c>)
 800a232:	f00d fa19 	bl	8017668 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff ffa4 	bl	800a188 <ptr_to_mem>
 800a240:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	429a      	cmp	r2, r3
 800a248:	d024      	beq.n	800a294 <plug_holes+0xc4>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d120      	bne.n	800a294 <plug_holes+0xc4>
 800a252:	4b2b      	ldr	r3, [pc, #172]	; (800a300 <plug_holes+0x130>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d01b      	beq.n	800a294 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a25c:	4b2c      	ldr	r3, [pc, #176]	; (800a310 <plug_holes+0x140>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	429a      	cmp	r2, r3
 800a264:	d102      	bne.n	800a26c <plug_holes+0x9c>
      lfree = mem;
 800a266:	4a2a      	ldr	r2, [pc, #168]	; (800a310 <plug_holes+0x140>)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	881a      	ldrh	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a27c:	d00a      	beq.n	800a294 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff ff80 	bl	800a188 <ptr_to_mem>
 800a288:	4604      	mov	r4, r0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff ff8e 	bl	800a1ac <mem_to_ptr>
 800a290:	4603      	mov	r3, r0
 800a292:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	885b      	ldrh	r3, [r3, #2]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff ff75 	bl	800a188 <ptr_to_mem>
 800a29e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d01f      	beq.n	800a2e8 <plug_holes+0x118>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	791b      	ldrb	r3, [r3, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d11b      	bne.n	800a2e8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a2b0:	4b17      	ldr	r3, [pc, #92]	; (800a310 <plug_holes+0x140>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d102      	bne.n	800a2c0 <plug_holes+0xf0>
      lfree = pmem;
 800a2ba:	4a15      	ldr	r2, [pc, #84]	; (800a310 <plug_holes+0x140>)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2d0:	d00a      	beq.n	800a2e8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff ff56 	bl	800a188 <ptr_to_mem>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	68b8      	ldr	r0, [r7, #8]
 800a2e0:	f7ff ff64 	bl	800a1ac <mem_to_ptr>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd90      	pop	{r4, r7, pc}
 800a2f0:	200011e4 	.word	0x200011e4
 800a2f4:	0801cba4 	.word	0x0801cba4
 800a2f8:	0801cbd4 	.word	0x0801cbd4
 800a2fc:	0801cbec 	.word	0x0801cbec
 800a300:	200011e8 	.word	0x200011e8
 800a304:	0801cc14 	.word	0x0801cc14
 800a308:	0801cc30 	.word	0x0801cc30
 800a30c:	0801cc4c 	.word	0x0801cc4c
 800a310:	200011ec 	.word	0x200011ec

0800a314 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a31a:	4b18      	ldr	r3, [pc, #96]	; (800a37c <mem_init+0x68>)
 800a31c:	3303      	adds	r3, #3
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	461a      	mov	r2, r3
 800a324:	4b16      	ldr	r3, [pc, #88]	; (800a380 <mem_init+0x6c>)
 800a326:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <mem_init+0x6c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a334:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a342:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a346:	f7ff ff1f 	bl	800a188 <ptr_to_mem>
 800a34a:	4603      	mov	r3, r0
 800a34c:	4a0d      	ldr	r2, [pc, #52]	; (800a384 <mem_init+0x70>)
 800a34e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <mem_init+0x70>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2201      	movs	r2, #1
 800a356:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a358:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <mem_init+0x70>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a360:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a362:	4b08      	ldr	r3, [pc, #32]	; (800a384 <mem_init+0x70>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a36a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <mem_init+0x6c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a05      	ldr	r2, [pc, #20]	; (800a388 <mem_init+0x74>)
 800a372:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20009f44 	.word	0x20009f44
 800a380:	200011e4 	.word	0x200011e4
 800a384:	200011e8 	.word	0x200011e8
 800a388:	200011ec 	.word	0x200011ec

0800a38c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ff09 	bl	800a1ac <mem_to_ptr>
 800a39a:	4603      	mov	r3, r0
 800a39c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fef0 	bl	800a188 <ptr_to_mem>
 800a3a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff feea 	bl	800a188 <ptr_to_mem>
 800a3b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3be:	d818      	bhi.n	800a3f2 <mem_link_valid+0x66>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	885b      	ldrh	r3, [r3, #2]
 800a3c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3c8:	d813      	bhi.n	800a3f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3ce:	8afa      	ldrh	r2, [r7, #22]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d004      	beq.n	800a3de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	8afa      	ldrh	r2, [r7, #22]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d109      	bne.n	800a3f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <mem_link_valid+0x74>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d006      	beq.n	800a3f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	885b      	ldrh	r3, [r3, #2]
 800a3ec:	8afa      	ldrh	r2, [r7, #22]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d001      	beq.n	800a3f6 <mem_link_valid+0x6a>
    return 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e000      	b.n	800a3f8 <mem_link_valid+0x6c>
  }
  return 1;
 800a3f6:	2301      	movs	r3, #1
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	200011e8 	.word	0x200011e8

0800a404 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d04c      	beq.n	800a4ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d007      	beq.n	800a42c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a41c:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <mem_free+0xb0>)
 800a41e:	f240 2273 	movw	r2, #627	; 0x273
 800a422:	4925      	ldr	r1, [pc, #148]	; (800a4b8 <mem_free+0xb4>)
 800a424:	4825      	ldr	r0, [pc, #148]	; (800a4bc <mem_free+0xb8>)
 800a426:	f00d f91f 	bl	8017668 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a42a:	e040      	b.n	800a4ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3b08      	subs	r3, #8
 800a430:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a432:	4b23      	ldr	r3, [pc, #140]	; (800a4c0 <mem_free+0xbc>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d306      	bcc.n	800a44a <mem_free+0x46>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f103 020c 	add.w	r2, r3, #12
 800a442:	4b20      	ldr	r3, [pc, #128]	; (800a4c4 <mem_free+0xc0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d907      	bls.n	800a45a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a44a:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <mem_free+0xb0>)
 800a44c:	f240 227f 	movw	r2, #639	; 0x27f
 800a450:	491d      	ldr	r1, [pc, #116]	; (800a4c8 <mem_free+0xc4>)
 800a452:	481a      	ldr	r0, [pc, #104]	; (800a4bc <mem_free+0xb8>)
 800a454:	f00d f908 	bl	8017668 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a458:	e029      	b.n	800a4ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d107      	bne.n	800a472 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a462:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <mem_free+0xb0>)
 800a464:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a468:	4918      	ldr	r1, [pc, #96]	; (800a4cc <mem_free+0xc8>)
 800a46a:	4814      	ldr	r0, [pc, #80]	; (800a4bc <mem_free+0xb8>)
 800a46c:	f00d f8fc 	bl	8017668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a470:	e01d      	b.n	800a4ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff ff8a 	bl	800a38c <mem_link_valid>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d107      	bne.n	800a48e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <mem_free+0xb0>)
 800a480:	f240 2295 	movw	r2, #661	; 0x295
 800a484:	4912      	ldr	r1, [pc, #72]	; (800a4d0 <mem_free+0xcc>)
 800a486:	480d      	ldr	r0, [pc, #52]	; (800a4bc <mem_free+0xb8>)
 800a488:	f00d f8ee 	bl	8017668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a48c:	e00f      	b.n	800a4ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <mem_free+0xd0>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d202      	bcs.n	800a4a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a49e:	4a0d      	ldr	r2, [pc, #52]	; (800a4d4 <mem_free+0xd0>)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fe93 	bl	800a1d0 <plug_holes>
 800a4aa:	e000      	b.n	800a4ae <mem_free+0xaa>
    return;
 800a4ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	0801cba4 	.word	0x0801cba4
 800a4b8:	0801cc78 	.word	0x0801cc78
 800a4bc:	0801cbec 	.word	0x0801cbec
 800a4c0:	200011e4 	.word	0x200011e4
 800a4c4:	200011e8 	.word	0x200011e8
 800a4c8:	0801cc9c 	.word	0x0801cc9c
 800a4cc:	0801ccb8 	.word	0x0801ccb8
 800a4d0:	0801cce0 	.word	0x0801cce0
 800a4d4:	200011ec 	.word	0x200011ec

0800a4d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a4e4:	887b      	ldrh	r3, [r7, #2]
 800a4e6:	3303      	adds	r3, #3
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f023 0303 	bic.w	r3, r3, #3
 800a4ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a4f0:	8bfb      	ldrh	r3, [r7, #30]
 800a4f2:	2b0b      	cmp	r3, #11
 800a4f4:	d801      	bhi.n	800a4fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a4fa:	8bfb      	ldrh	r3, [r7, #30]
 800a4fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a500:	d803      	bhi.n	800a50a <mem_trim+0x32>
 800a502:	8bfa      	ldrh	r2, [r7, #30]
 800a504:	887b      	ldrh	r3, [r7, #2]
 800a506:	429a      	cmp	r2, r3
 800a508:	d201      	bcs.n	800a50e <mem_trim+0x36>
    return NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e0cc      	b.n	800a6a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a50e:	4b68      	ldr	r3, [pc, #416]	; (800a6b0 <mem_trim+0x1d8>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d304      	bcc.n	800a522 <mem_trim+0x4a>
 800a518:	4b66      	ldr	r3, [pc, #408]	; (800a6b4 <mem_trim+0x1dc>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d306      	bcc.n	800a530 <mem_trim+0x58>
 800a522:	4b65      	ldr	r3, [pc, #404]	; (800a6b8 <mem_trim+0x1e0>)
 800a524:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a528:	4964      	ldr	r1, [pc, #400]	; (800a6bc <mem_trim+0x1e4>)
 800a52a:	4865      	ldr	r0, [pc, #404]	; (800a6c0 <mem_trim+0x1e8>)
 800a52c:	f00d f89c 	bl	8017668 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a530:	4b5f      	ldr	r3, [pc, #380]	; (800a6b0 <mem_trim+0x1d8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	429a      	cmp	r2, r3
 800a538:	d304      	bcc.n	800a544 <mem_trim+0x6c>
 800a53a:	4b5e      	ldr	r3, [pc, #376]	; (800a6b4 <mem_trim+0x1dc>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d301      	bcc.n	800a548 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	e0af      	b.n	800a6a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3b08      	subs	r3, #8
 800a54c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a54e:	69b8      	ldr	r0, [r7, #24]
 800a550:	f7ff fe2c 	bl	800a1ac <mem_to_ptr>
 800a554:	4603      	mov	r3, r0
 800a556:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	881a      	ldrh	r2, [r3, #0]
 800a55c:	8afb      	ldrh	r3, [r7, #22]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b08      	subs	r3, #8
 800a564:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a566:	8bfa      	ldrh	r2, [r7, #30]
 800a568:	8abb      	ldrh	r3, [r7, #20]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d906      	bls.n	800a57c <mem_trim+0xa4>
 800a56e:	4b52      	ldr	r3, [pc, #328]	; (800a6b8 <mem_trim+0x1e0>)
 800a570:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a574:	4953      	ldr	r1, [pc, #332]	; (800a6c4 <mem_trim+0x1ec>)
 800a576:	4852      	ldr	r0, [pc, #328]	; (800a6c0 <mem_trim+0x1e8>)
 800a578:	f00d f876 	bl	8017668 <iprintf>
  if (newsize > size) {
 800a57c:	8bfa      	ldrh	r2, [r7, #30]
 800a57e:	8abb      	ldrh	r3, [r7, #20]
 800a580:	429a      	cmp	r2, r3
 800a582:	d901      	bls.n	800a588 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	e08f      	b.n	800a6a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a588:	8bfa      	ldrh	r2, [r7, #30]
 800a58a:	8abb      	ldrh	r3, [r7, #20]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d101      	bne.n	800a594 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	e089      	b.n	800a6a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff fdf5 	bl	800a188 <ptr_to_mem>
 800a59e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	791b      	ldrb	r3, [r3, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d13f      	bne.n	800a628 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5b0:	d106      	bne.n	800a5c0 <mem_trim+0xe8>
 800a5b2:	4b41      	ldr	r3, [pc, #260]	; (800a6b8 <mem_trim+0x1e0>)
 800a5b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a5b8:	4943      	ldr	r1, [pc, #268]	; (800a6c8 <mem_trim+0x1f0>)
 800a5ba:	4841      	ldr	r0, [pc, #260]	; (800a6c0 <mem_trim+0x1e8>)
 800a5bc:	f00d f854 	bl	8017668 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a5c6:	8afa      	ldrh	r2, [r7, #22]
 800a5c8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a5d2:	4b3e      	ldr	r3, [pc, #248]	; (800a6cc <mem_trim+0x1f4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d106      	bne.n	800a5ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fdd2 	bl	800a188 <ptr_to_mem>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4a39      	ldr	r2, [pc, #228]	; (800a6cc <mem_trim+0x1f4>)
 800a5e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a5ea:	89fb      	ldrh	r3, [r7, #14]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff fdcb 	bl	800a188 <ptr_to_mem>
 800a5f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	89ba      	ldrh	r2, [r7, #12]
 800a5fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	8afa      	ldrh	r2, [r7, #22]
 800a604:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	89fa      	ldrh	r2, [r7, #14]
 800a60a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a614:	d047      	beq.n	800a6a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff fdb4 	bl	800a188 <ptr_to_mem>
 800a620:	4602      	mov	r2, r0
 800a622:	89fb      	ldrh	r3, [r7, #14]
 800a624:	8053      	strh	r3, [r2, #2]
 800a626:	e03e      	b.n	800a6a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a628:	8bfb      	ldrh	r3, [r7, #30]
 800a62a:	f103 0214 	add.w	r2, r3, #20
 800a62e:	8abb      	ldrh	r3, [r7, #20]
 800a630:	429a      	cmp	r2, r3
 800a632:	d838      	bhi.n	800a6a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a634:	8afa      	ldrh	r2, [r7, #22]
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	4413      	add	r3, r2
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3308      	adds	r3, #8
 800a63e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a648:	d106      	bne.n	800a658 <mem_trim+0x180>
 800a64a:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <mem_trim+0x1e0>)
 800a64c:	f240 3216 	movw	r2, #790	; 0x316
 800a650:	491d      	ldr	r1, [pc, #116]	; (800a6c8 <mem_trim+0x1f0>)
 800a652:	481b      	ldr	r0, [pc, #108]	; (800a6c0 <mem_trim+0x1e8>)
 800a654:	f00d f808 	bl	8017668 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a658:	89fb      	ldrh	r3, [r7, #14]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff fd94 	bl	800a188 <ptr_to_mem>
 800a660:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a662:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <mem_trim+0x1f4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d202      	bcs.n	800a672 <mem_trim+0x19a>
      lfree = mem2;
 800a66c:	4a17      	ldr	r2, [pc, #92]	; (800a6cc <mem_trim+0x1f4>)
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2200      	movs	r2, #0
 800a676:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	881a      	ldrh	r2, [r3, #0]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	8afa      	ldrh	r2, [r7, #22]
 800a684:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	89fa      	ldrh	r2, [r7, #14]
 800a68a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a694:	d007      	beq.n	800a6a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fd74 	bl	800a188 <ptr_to_mem>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	89fb      	ldrh	r3, [r7, #14]
 800a6a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a6a6:	687b      	ldr	r3, [r7, #4]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	200011e4 	.word	0x200011e4
 800a6b4:	200011e8 	.word	0x200011e8
 800a6b8:	0801cba4 	.word	0x0801cba4
 800a6bc:	0801cd14 	.word	0x0801cd14
 800a6c0:	0801cbec 	.word	0x0801cbec
 800a6c4:	0801cd2c 	.word	0x0801cd2c
 800a6c8:	0801cd4c 	.word	0x0801cd4c
 800a6cc:	200011ec 	.word	0x200011ec

0800a6d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <mem_malloc+0x14>
    return NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e0d9      	b.n	800a898 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a6e4:	88fb      	ldrh	r3, [r7, #6]
 800a6e6:	3303      	adds	r3, #3
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a6f0:	8bbb      	ldrh	r3, [r7, #28]
 800a6f2:	2b0b      	cmp	r3, #11
 800a6f4:	d801      	bhi.n	800a6fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a6f6:	230c      	movs	r3, #12
 800a6f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a6fa:	8bbb      	ldrh	r3, [r7, #28]
 800a6fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a700:	d803      	bhi.n	800a70a <mem_malloc+0x3a>
 800a702:	8bba      	ldrh	r2, [r7, #28]
 800a704:	88fb      	ldrh	r3, [r7, #6]
 800a706:	429a      	cmp	r2, r3
 800a708:	d201      	bcs.n	800a70e <mem_malloc+0x3e>
    return NULL;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e0c4      	b.n	800a898 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a70e:	4b64      	ldr	r3, [pc, #400]	; (800a8a0 <mem_malloc+0x1d0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fd4a 	bl	800a1ac <mem_to_ptr>
 800a718:	4603      	mov	r3, r0
 800a71a:	83fb      	strh	r3, [r7, #30]
 800a71c:	e0b4      	b.n	800a888 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a71e:	8bfb      	ldrh	r3, [r7, #30]
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fd31 	bl	800a188 <ptr_to_mem>
 800a726:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	791b      	ldrb	r3, [r3, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 80a4 	bne.w	800a87a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	8bfb      	ldrh	r3, [r7, #30]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	f1a3 0208 	sub.w	r2, r3, #8
 800a740:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a742:	429a      	cmp	r2, r3
 800a744:	f0c0 8099 	bcc.w	800a87a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	8bfb      	ldrh	r3, [r7, #30]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	f1a3 0208 	sub.w	r2, r3, #8
 800a756:	8bbb      	ldrh	r3, [r7, #28]
 800a758:	3314      	adds	r3, #20
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d333      	bcc.n	800a7c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a75e:	8bfa      	ldrh	r2, [r7, #30]
 800a760:	8bbb      	ldrh	r3, [r7, #28]
 800a762:	4413      	add	r3, r2
 800a764:	b29b      	uxth	r3, r3
 800a766:	3308      	adds	r3, #8
 800a768:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a76a:	8a7b      	ldrh	r3, [r7, #18]
 800a76c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a770:	d106      	bne.n	800a780 <mem_malloc+0xb0>
 800a772:	4b4c      	ldr	r3, [pc, #304]	; (800a8a4 <mem_malloc+0x1d4>)
 800a774:	f240 3287 	movw	r2, #903	; 0x387
 800a778:	494b      	ldr	r1, [pc, #300]	; (800a8a8 <mem_malloc+0x1d8>)
 800a77a:	484c      	ldr	r0, [pc, #304]	; (800a8ac <mem_malloc+0x1dc>)
 800a77c:	f00c ff74 	bl	8017668 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a780:	8a7b      	ldrh	r3, [r7, #18]
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff fd00 	bl	800a188 <ptr_to_mem>
 800a788:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	881a      	ldrh	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8bfa      	ldrh	r2, [r7, #30]
 800a79c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	8a7a      	ldrh	r2, [r7, #18]
 800a7a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7b2:	d00b      	beq.n	800a7cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fce5 	bl	800a188 <ptr_to_mem>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	8a7b      	ldrh	r3, [r7, #18]
 800a7c2:	8053      	strh	r3, [r2, #2]
 800a7c4:	e002      	b.n	800a7cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a7cc:	4b34      	ldr	r3, [pc, #208]	; (800a8a0 <mem_malloc+0x1d0>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d127      	bne.n	800a826 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a7d6:	4b32      	ldr	r3, [pc, #200]	; (800a8a0 <mem_malloc+0x1d0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a7dc:	e005      	b.n	800a7ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff fcd0 	bl	800a188 <ptr_to_mem>
 800a7e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	791b      	ldrb	r3, [r3, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <mem_malloc+0x12c>
 800a7f2:	4b2f      	ldr	r3, [pc, #188]	; (800a8b0 <mem_malloc+0x1e0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d1f0      	bne.n	800a7de <mem_malloc+0x10e>
          }
          lfree = cur;
 800a7fc:	4a28      	ldr	r2, [pc, #160]	; (800a8a0 <mem_malloc+0x1d0>)
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a802:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <mem_malloc+0x1d0>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <mem_malloc+0x1e0>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d00b      	beq.n	800a826 <mem_malloc+0x156>
 800a80e:	4b24      	ldr	r3, [pc, #144]	; (800a8a0 <mem_malloc+0x1d0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	791b      	ldrb	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <mem_malloc+0x156>
 800a818:	4b22      	ldr	r3, [pc, #136]	; (800a8a4 <mem_malloc+0x1d4>)
 800a81a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a81e:	4925      	ldr	r1, [pc, #148]	; (800a8b4 <mem_malloc+0x1e4>)
 800a820:	4822      	ldr	r0, [pc, #136]	; (800a8ac <mem_malloc+0x1dc>)
 800a822:	f00c ff21 	bl	8017668 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a826:	8bba      	ldrh	r2, [r7, #28]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4413      	add	r3, r2
 800a82c:	3308      	adds	r3, #8
 800a82e:	4a20      	ldr	r2, [pc, #128]	; (800a8b0 <mem_malloc+0x1e0>)
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	4293      	cmp	r3, r2
 800a834:	d906      	bls.n	800a844 <mem_malloc+0x174>
 800a836:	4b1b      	ldr	r3, [pc, #108]	; (800a8a4 <mem_malloc+0x1d4>)
 800a838:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a83c:	491e      	ldr	r1, [pc, #120]	; (800a8b8 <mem_malloc+0x1e8>)
 800a83e:	481b      	ldr	r0, [pc, #108]	; (800a8ac <mem_malloc+0x1dc>)
 800a840:	f00c ff12 	bl	8017668 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d006      	beq.n	800a85c <mem_malloc+0x18c>
 800a84e:	4b15      	ldr	r3, [pc, #84]	; (800a8a4 <mem_malloc+0x1d4>)
 800a850:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a854:	4919      	ldr	r1, [pc, #100]	; (800a8bc <mem_malloc+0x1ec>)
 800a856:	4815      	ldr	r0, [pc, #84]	; (800a8ac <mem_malloc+0x1dc>)
 800a858:	f00c ff06 	bl	8017668 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <mem_malloc+0x1a4>
 800a866:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <mem_malloc+0x1d4>)
 800a868:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a86c:	4914      	ldr	r1, [pc, #80]	; (800a8c0 <mem_malloc+0x1f0>)
 800a86e:	480f      	ldr	r0, [pc, #60]	; (800a8ac <mem_malloc+0x1dc>)
 800a870:	f00c fefa 	bl	8017668 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	3308      	adds	r3, #8
 800a878:	e00e      	b.n	800a898 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a87a:	8bfb      	ldrh	r3, [r7, #30]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fc83 	bl	800a188 <ptr_to_mem>
 800a882:	4603      	mov	r3, r0
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a888:	8bfa      	ldrh	r2, [r7, #30]
 800a88a:	8bbb      	ldrh	r3, [r7, #28]
 800a88c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a890:	429a      	cmp	r2, r3
 800a892:	f4ff af44 	bcc.w	800a71e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200011ec 	.word	0x200011ec
 800a8a4:	0801cba4 	.word	0x0801cba4
 800a8a8:	0801cd4c 	.word	0x0801cd4c
 800a8ac:	0801cbec 	.word	0x0801cbec
 800a8b0:	200011e8 	.word	0x200011e8
 800a8b4:	0801cd60 	.word	0x0801cd60
 800a8b8:	0801cd7c 	.word	0x0801cd7c
 800a8bc:	0801cdac 	.word	0x0801cdac
 800a8c0:	0801cddc 	.word	0x0801cddc

0800a8c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	3303      	adds	r3, #3
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e011      	b.n	800a90a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	4413      	add	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	3301      	adds	r3, #1
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	885b      	ldrh	r3, [r3, #2]
 800a90e:	461a      	mov	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4293      	cmp	r3, r2
 800a914:	dbe7      	blt.n	800a8e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a916:	bf00      	nop
 800a918:	bf00      	nop
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a92a:	2300      	movs	r3, #0
 800a92c:	80fb      	strh	r3, [r7, #6]
 800a92e:	e009      	b.n	800a944 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	4a08      	ldr	r2, [pc, #32]	; (800a954 <memp_init+0x30>)
 800a934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff ffc3 	bl	800a8c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a93e:	88fb      	ldrh	r3, [r7, #6]
 800a940:	3301      	adds	r3, #1
 800a942:	80fb      	strh	r3, [r7, #6]
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	2b08      	cmp	r3, #8
 800a948:	d9f2      	bls.n	800a930 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a94a:	bf00      	nop
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	080339a4 	.word	0x080339a4

0800a958 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d012      	beq.n	800a994 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d006      	beq.n	800a990 <do_memp_malloc_pool+0x38>
 800a982:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <do_memp_malloc_pool+0x48>)
 800a984:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a988:	4906      	ldr	r1, [pc, #24]	; (800a9a4 <do_memp_malloc_pool+0x4c>)
 800a98a:	4807      	ldr	r0, [pc, #28]	; (800a9a8 <do_memp_malloc_pool+0x50>)
 800a98c:	f00c fe6c 	bl	8017668 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	e000      	b.n	800a996 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	0801ce00 	.word	0x0801ce00
 800a9a4:	0801ce30 	.word	0x0801ce30
 800a9a8:	0801ce54 	.word	0x0801ce54

0800a9ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d908      	bls.n	800a9ce <memp_malloc+0x22>
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <memp_malloc+0x3c>)
 800a9be:	f240 1257 	movw	r2, #343	; 0x157
 800a9c2:	490a      	ldr	r1, [pc, #40]	; (800a9ec <memp_malloc+0x40>)
 800a9c4:	480a      	ldr	r0, [pc, #40]	; (800a9f0 <memp_malloc+0x44>)
 800a9c6:	f00c fe4f 	bl	8017668 <iprintf>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e008      	b.n	800a9e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	4a08      	ldr	r2, [pc, #32]	; (800a9f4 <memp_malloc+0x48>)
 800a9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ffbe 	bl	800a958 <do_memp_malloc_pool>
 800a9dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a9de:	68fb      	ldr	r3, [r7, #12]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0801ce00 	.word	0x0801ce00
 800a9ec:	0801ce90 	.word	0x0801ce90
 800a9f0:	0801ce54 	.word	0x0801ce54
 800a9f4:	080339a4 	.word	0x080339a4

0800a9f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	f003 0303 	and.w	r3, r3, #3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d006      	beq.n	800aa1a <do_memp_free_pool+0x22>
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <do_memp_free_pool+0x40>)
 800aa0e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aa12:	490a      	ldr	r1, [pc, #40]	; (800aa3c <do_memp_free_pool+0x44>)
 800aa14:	480a      	ldr	r0, [pc, #40]	; (800aa40 <do_memp_free_pool+0x48>)
 800aa16:	f00c fe27 	bl	8017668 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	0801ce00 	.word	0x0801ce00
 800aa3c:	0801ceb0 	.word	0x0801ceb0
 800aa40:	0801ce54 	.word	0x0801ce54

0800aa44 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d907      	bls.n	800aa66 <memp_free+0x22>
 800aa56:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <memp_free+0x44>)
 800aa58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800aa5c:	490b      	ldr	r1, [pc, #44]	; (800aa8c <memp_free+0x48>)
 800aa5e:	480c      	ldr	r0, [pc, #48]	; (800aa90 <memp_free+0x4c>)
 800aa60:	f00c fe02 	bl	8017668 <iprintf>
 800aa64:	e00c      	b.n	800aa80 <memp_free+0x3c>

  if (mem == NULL) {
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <memp_free+0x50>)
 800aa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff ffbe 	bl	800a9f8 <do_memp_free_pool>
 800aa7c:	e000      	b.n	800aa80 <memp_free+0x3c>
    return;
 800aa7e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	0801ce00 	.word	0x0801ce00
 800aa8c:	0801ced0 	.word	0x0801ced0
 800aa90:	0801ce54 	.word	0x0801ce54
 800aa94:	080339a4 	.word	0x080339a4

0800aa98 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa9c:	bf00      	nop
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d108      	bne.n	800aace <netif_add+0x26>
 800aabc:	4b5b      	ldr	r3, [pc, #364]	; (800ac2c <netif_add+0x184>)
 800aabe:	f240 1227 	movw	r2, #295	; 0x127
 800aac2:	495b      	ldr	r1, [pc, #364]	; (800ac30 <netif_add+0x188>)
 800aac4:	485b      	ldr	r0, [pc, #364]	; (800ac34 <netif_add+0x18c>)
 800aac6:	f00c fdcf 	bl	8017668 <iprintf>
 800aaca:	2300      	movs	r3, #0
 800aacc:	e0a9      	b.n	800ac22 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d108      	bne.n	800aae6 <netif_add+0x3e>
 800aad4:	4b55      	ldr	r3, [pc, #340]	; (800ac2c <netif_add+0x184>)
 800aad6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aada:	4957      	ldr	r1, [pc, #348]	; (800ac38 <netif_add+0x190>)
 800aadc:	4855      	ldr	r0, [pc, #340]	; (800ac34 <netif_add+0x18c>)
 800aade:	f00c fdc3 	bl	8017668 <iprintf>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e09d      	b.n	800ac22 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aaec:	4b53      	ldr	r3, [pc, #332]	; (800ac3c <netif_add+0x194>)
 800aaee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aaf6:	4b51      	ldr	r3, [pc, #324]	; (800ac3c <netif_add+0x194>)
 800aaf8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ab00:	4b4e      	ldr	r3, [pc, #312]	; (800ac3c <netif_add+0x194>)
 800ab02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4a49      	ldr	r2, [pc, #292]	; (800ac40 <netif_add+0x198>)
 800ab1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3324      	adds	r3, #36	; 0x24
 800ab2e:	2204      	movs	r2, #4
 800ab30:	2100      	movs	r1, #0
 800ab32:	4618      	mov	r0, r3
 800ab34:	f00c f926 	bl	8016d84 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6a3a      	ldr	r2, [r7, #32]
 800ab42:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ab44:	4b3f      	ldr	r3, [pc, #252]	; (800ac44 <netif_add+0x19c>)
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab52:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 f914 	bl	800ad88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <netif_add+0xc8>
    return NULL;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	e058      	b.n	800ac22 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab76:	2bff      	cmp	r3, #255	; 0xff
 800ab78:	d103      	bne.n	800ab82 <netif_add+0xda>
        netif->num = 0;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab86:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <netif_add+0x1a0>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e02b      	b.n	800abe6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d106      	bne.n	800aba4 <netif_add+0xfc>
 800ab96:	4b25      	ldr	r3, [pc, #148]	; (800ac2c <netif_add+0x184>)
 800ab98:	f240 128b 	movw	r2, #395	; 0x18b
 800ab9c:	492b      	ldr	r1, [pc, #172]	; (800ac4c <netif_add+0x1a4>)
 800ab9e:	4825      	ldr	r0, [pc, #148]	; (800ac34 <netif_add+0x18c>)
 800aba0:	f00c fd62 	bl	8017668 <iprintf>
        num_netifs++;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	3301      	adds	r3, #1
 800aba8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2bff      	cmp	r3, #255	; 0xff
 800abae:	dd06      	ble.n	800abbe <netif_add+0x116>
 800abb0:	4b1e      	ldr	r3, [pc, #120]	; (800ac2c <netif_add+0x184>)
 800abb2:	f240 128d 	movw	r2, #397	; 0x18d
 800abb6:	4926      	ldr	r1, [pc, #152]	; (800ac50 <netif_add+0x1a8>)
 800abb8:	481e      	ldr	r0, [pc, #120]	; (800ac34 <netif_add+0x18c>)
 800abba:	f00c fd55 	bl	8017668 <iprintf>
        if (netif2->num == netif->num) {
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abca:	429a      	cmp	r2, r3
 800abcc:	d108      	bne.n	800abe0 <netif_add+0x138>
          netif->num++;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abd4:	3301      	adds	r3, #1
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800abde:	e005      	b.n	800abec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	617b      	str	r3, [r7, #20]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1d0      	bne.n	800ab8e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1be      	bne.n	800ab70 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abf8:	2bfe      	cmp	r3, #254	; 0xfe
 800abfa:	d103      	bne.n	800ac04 <netif_add+0x15c>
    netif_num = 0;
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <netif_add+0x19c>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]
 800ac02:	e006      	b.n	800ac12 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <netif_add+0x19c>)
 800ac10:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ac12:	4b0d      	ldr	r3, [pc, #52]	; (800ac48 <netif_add+0x1a0>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ac1a:	4a0b      	ldr	r2, [pc, #44]	; (800ac48 <netif_add+0x1a0>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ac20:	68fb      	ldr	r3, [r7, #12]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	0801ceec 	.word	0x0801ceec
 800ac30:	0801cf80 	.word	0x0801cf80
 800ac34:	0801cf3c 	.word	0x0801cf3c
 800ac38:	0801cf9c 	.word	0x0801cf9c
 800ac3c:	08033a18 	.word	0x08033a18
 800ac40:	0800af9b 	.word	0x0800af9b
 800ac44:	20001214 	.word	0x20001214
 800ac48:	2000d84c 	.word	0x2000d84c
 800ac4c:	0801cfc0 	.word	0x0801cfc0
 800ac50:	0801cfd4 	.word	0x0801cfd4

0800ac54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f002 fda9 	bl	800d7b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f007 fea1 	bl	80129b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <netif_do_set_ipaddr+0x20>
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <netif_do_set_ipaddr+0x88>)
 800ac8c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ac90:	491c      	ldr	r1, [pc, #112]	; (800ad04 <netif_do_set_ipaddr+0x8c>)
 800ac92:	481d      	ldr	r0, [pc, #116]	; (800ad08 <netif_do_set_ipaddr+0x90>)
 800ac94:	f00c fce8 	bl	8017668 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <netif_do_set_ipaddr+0x34>
 800ac9e:	4b18      	ldr	r3, [pc, #96]	; (800ad00 <netif_do_set_ipaddr+0x88>)
 800aca0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aca4:	4917      	ldr	r1, [pc, #92]	; (800ad04 <netif_do_set_ipaddr+0x8c>)
 800aca6:	4818      	ldr	r0, [pc, #96]	; (800ad08 <netif_do_set_ipaddr+0x90>)
 800aca8:	f00c fcde 	bl	8017668 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3304      	adds	r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d01c      	beq.n	800acf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3304      	adds	r3, #4
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800acca:	f107 0314 	add.w	r3, r7, #20
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ffbf 	bl	800ac54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <netif_do_set_ipaddr+0x6a>
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	e000      	b.n	800ace4 <netif_do_set_ipaddr+0x6c>
 800ace2:	2300      	movs	r3, #0
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ace8:	2101      	movs	r1, #1
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f000 f8d2 	bl	800ae94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800acf0:	2301      	movs	r3, #1
 800acf2:	e000      	b.n	800acf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0801ceec 	.word	0x0801ceec
 800ad04:	0801d004 	.word	0x0801d004
 800ad08:	0801cf3c 	.word	0x0801cf3c

0800ad0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d00a      	beq.n	800ad3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <netif_do_set_netmask+0x26>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	e000      	b.n	800ad34 <netif_do_set_netmask+0x28>
 800ad32:	2300      	movs	r3, #0
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e000      	b.n	800ad3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d00a      	beq.n	800ad7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <netif_do_set_gw+0x26>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	e000      	b.n	800ad72 <netif_do_set_gw+0x28>
 800ad70:	2300      	movs	r3, #0
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ada4:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <netif_set_addr+0x90>)
 800ada6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800adae:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <netif_set_addr+0x90>)
 800adb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800adb8:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <netif_set_addr+0x90>)
 800adba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <netif_set_addr+0x42>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <netif_set_addr+0x46>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <netif_set_addr+0x48>
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800add8:	f107 0310 	add.w	r3, r7, #16
 800addc:	461a      	mov	r2, r3
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff ff49 	bl	800ac78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ade6:	69fa      	ldr	r2, [r7, #28]
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff ff8e 	bl	800ad0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff ffa8 	bl	800ad4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae00:	f107 0310 	add.w	r3, r7, #16
 800ae04:	461a      	mov	r2, r3
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff ff35 	bl	800ac78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ae0e:	bf00      	nop
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	08033a18 	.word	0x08033a18

0800ae1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ae24:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <netif_set_default+0x1c>)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	2000d850 	.word	0x2000d850

0800ae3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d107      	bne.n	800ae5a <netif_set_up+0x1e>
 800ae4a:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <netif_set_up+0x4c>)
 800ae4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ae50:	490e      	ldr	r1, [pc, #56]	; (800ae8c <netif_set_up+0x50>)
 800ae52:	480f      	ldr	r0, [pc, #60]	; (800ae90 <netif_set_up+0x54>)
 800ae54:	f00c fc08 	bl	8017668 <iprintf>
 800ae58:	e013      	b.n	800ae82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10c      	bne.n	800ae82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ae7a:	2103      	movs	r1, #3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f809 	bl	800ae94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	0801ceec 	.word	0x0801ceec
 800ae8c:	0801d074 	.word	0x0801d074
 800ae90:	0801cf3c 	.word	0x0801cf3c

0800ae94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d106      	bne.n	800aeb4 <netif_issue_reports+0x20>
 800aea6:	4b18      	ldr	r3, [pc, #96]	; (800af08 <netif_issue_reports+0x74>)
 800aea8:	f240 326d 	movw	r2, #877	; 0x36d
 800aeac:	4917      	ldr	r1, [pc, #92]	; (800af0c <netif_issue_reports+0x78>)
 800aeae:	4818      	ldr	r0, [pc, #96]	; (800af10 <netif_issue_reports+0x7c>)
 800aeb0:	f00c fbda 	bl	8017668 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aeba:	f003 0304 	and.w	r3, r3, #4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d01e      	beq.n	800af00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aec8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d017      	beq.n	800af00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d013      	beq.n	800af02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3304      	adds	r3, #4
 800aede:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00e      	beq.n	800af02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aeea:	f003 0308 	and.w	r3, r3, #8
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3304      	adds	r3, #4
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f00a fb27 	bl	801554c <etharp_request>
 800aefe:	e000      	b.n	800af02 <netif_issue_reports+0x6e>
    return;
 800af00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	0801ceec 	.word	0x0801ceec
 800af0c:	0801d090 	.word	0x0801d090
 800af10:	0801cf3c 	.word	0x0801cf3c

0800af14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d107      	bne.n	800af32 <netif_set_down+0x1e>
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <netif_set_down+0x58>)
 800af24:	f240 329b 	movw	r2, #923	; 0x39b
 800af28:	4911      	ldr	r1, [pc, #68]	; (800af70 <netif_set_down+0x5c>)
 800af2a:	4812      	ldr	r0, [pc, #72]	; (800af74 <netif_set_down+0x60>)
 800af2c:	f00c fb9c 	bl	8017668 <iprintf>
 800af30:	e019      	b.n	800af66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d012      	beq.n	800af66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af46:	f023 0301 	bic.w	r3, r3, #1
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af58:	f003 0308 	and.w	r3, r3, #8
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f009 fead 	bl	8014cc0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	0801ceec 	.word	0x0801ceec
 800af70:	0801d0b4 	.word	0x0801d0b4
 800af74:	0801cf3c 	.word	0x0801cf3c

0800af78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	61da      	str	r2, [r3, #28]
  }
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b085      	sub	sp, #20
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800afa6:	f06f 030b 	mvn.w	r3, #11
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
	...

0800afb8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d013      	beq.n	800aff0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800afc8:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <netif_get_by_index+0x48>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e00c      	b.n	800afea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afd6:	3301      	adds	r3, #1
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d101      	bne.n	800afe4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	e006      	b.n	800aff2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1ef      	bne.n	800afd0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	2000d84c 	.word	0x2000d84c

0800b004 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b00a:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <pbuf_free_ooseq+0x38>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b010:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <pbuf_free_ooseq+0x3c>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	607b      	str	r3, [r7, #4]
 800b016:	e00a      	b.n	800b02e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f002 fc07 	bl	800d834 <tcp_free_ooseq>
      return;
 800b026:	e005      	b.n	800b034 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	607b      	str	r3, [r7, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f1      	bne.n	800b018 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	2000d854 	.word	0x2000d854
 800b040:	2000d85c 	.word	0x2000d85c

0800b044 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b044:	b480      	push	{r7}
 800b046:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b048:	4b03      	ldr	r3, [pc, #12]	; (800b058 <pbuf_pool_is_empty+0x14>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b04e:	bf00      	nop
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	2000d854 	.word	0x2000d854

0800b05c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4611      	mov	r1, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	460b      	mov	r3, r1
 800b06c:	80fb      	strh	r3, [r7, #6]
 800b06e:	4613      	mov	r3, r2
 800b070:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	88fa      	ldrh	r2, [r7, #6]
 800b082:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	88ba      	ldrh	r2, [r7, #4]
 800b088:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b08a:	8b3b      	ldrh	r3, [r7, #24]
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	7f3a      	ldrb	r2, [r7, #28]
 800b096:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2201      	movs	r2, #1
 800b09c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	73da      	strb	r2, [r3, #15]
}
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08c      	sub	sp, #48	; 0x30
 800b0b4:	af02      	add	r7, sp, #8
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	80bb      	strh	r3, [r7, #4]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b0c6:	887b      	ldrh	r3, [r7, #2]
 800b0c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0cc:	d07f      	beq.n	800b1ce <pbuf_alloc+0x11e>
 800b0ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b0d2:	f300 80c8 	bgt.w	800b266 <pbuf_alloc+0x1b6>
 800b0d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b0da:	d010      	beq.n	800b0fe <pbuf_alloc+0x4e>
 800b0dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b0e0:	f300 80c1 	bgt.w	800b266 <pbuf_alloc+0x1b6>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d002      	beq.n	800b0ee <pbuf_alloc+0x3e>
 800b0e8:	2b41      	cmp	r3, #65	; 0x41
 800b0ea:	f040 80bc 	bne.w	800b266 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b0ee:	887a      	ldrh	r2, [r7, #2]
 800b0f0:	88bb      	ldrh	r3, [r7, #4]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	f000 f8d1 	bl	800b29c <pbuf_alloc_reference>
 800b0fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b0fc:	e0bd      	b.n	800b27a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b106:	88bb      	ldrh	r3, [r7, #4]
 800b108:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b10a:	2008      	movs	r0, #8
 800b10c:	f7ff fc4e 	bl	800a9ac <memp_malloc>
 800b110:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d109      	bne.n	800b12c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b118:	f7ff ff94 	bl	800b044 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b124:	f000 faa8 	bl	800b678 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b128:	2300      	movs	r3, #0
 800b12a:	e0a7      	b.n	800b27c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b12c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b12e:	3303      	adds	r3, #3
 800b130:	b29b      	uxth	r3, r3
 800b132:	f023 0303 	bic.w	r3, r3, #3
 800b136:	b29b      	uxth	r3, r3
 800b138:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	8b7a      	ldrh	r2, [r7, #26]
 800b140:	4293      	cmp	r3, r2
 800b142:	bf28      	it	cs
 800b144:	4613      	movcs	r3, r2
 800b146:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b14a:	3310      	adds	r3, #16
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4413      	add	r3, r2
 800b150:	3303      	adds	r3, #3
 800b152:	f023 0303 	bic.w	r3, r3, #3
 800b156:	4618      	mov	r0, r3
 800b158:	89f9      	ldrh	r1, [r7, #14]
 800b15a:	8b7a      	ldrh	r2, [r7, #26]
 800b15c:	2300      	movs	r3, #0
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	887b      	ldrh	r3, [r7, #2]
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	460b      	mov	r3, r1
 800b166:	4601      	mov	r1, r0
 800b168:	6938      	ldr	r0, [r7, #16]
 800b16a:	f7ff ff77 	bl	800b05c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d006      	beq.n	800b188 <pbuf_alloc+0xd8>
 800b17a:	4b42      	ldr	r3, [pc, #264]	; (800b284 <pbuf_alloc+0x1d4>)
 800b17c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b180:	4941      	ldr	r1, [pc, #260]	; (800b288 <pbuf_alloc+0x1d8>)
 800b182:	4842      	ldr	r0, [pc, #264]	; (800b28c <pbuf_alloc+0x1dc>)
 800b184:	f00c fa70 	bl	8017668 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b18a:	3303      	adds	r3, #3
 800b18c:	f023 0303 	bic.w	r3, r3, #3
 800b190:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b194:	d106      	bne.n	800b1a4 <pbuf_alloc+0xf4>
 800b196:	4b3b      	ldr	r3, [pc, #236]	; (800b284 <pbuf_alloc+0x1d4>)
 800b198:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b19c:	493c      	ldr	r1, [pc, #240]	; (800b290 <pbuf_alloc+0x1e0>)
 800b19e:	483b      	ldr	r0, [pc, #236]	; (800b28c <pbuf_alloc+0x1dc>)
 800b1a0:	f00c fa62 	bl	8017668 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ae:	e002      	b.n	800b1b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b1ba:	8b7a      	ldrh	r2, [r7, #26]
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b1c6:	8b7b      	ldrh	r3, [r7, #26]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d19e      	bne.n	800b10a <pbuf_alloc+0x5a>
      break;
 800b1cc:	e055      	b.n	800b27a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1d0:	3303      	adds	r3, #3
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	88bb      	ldrh	r3, [r7, #4]
 800b1dc:	3303      	adds	r3, #3
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	f023 0303 	bic.w	r3, r3, #3
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4413      	add	r3, r2
 800b1e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b1ea:	8b3b      	ldrh	r3, [r7, #24]
 800b1ec:	3310      	adds	r3, #16
 800b1ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b1f0:	8b3a      	ldrh	r2, [r7, #24]
 800b1f2:	88bb      	ldrh	r3, [r7, #4]
 800b1f4:	3303      	adds	r3, #3
 800b1f6:	f023 0303 	bic.w	r3, r3, #3
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d306      	bcc.n	800b20c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b1fe:	8afa      	ldrh	r2, [r7, #22]
 800b200:	88bb      	ldrh	r3, [r7, #4]
 800b202:	3303      	adds	r3, #3
 800b204:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b208:	429a      	cmp	r2, r3
 800b20a:	d201      	bcs.n	800b210 <pbuf_alloc+0x160>
        return NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e035      	b.n	800b27c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b210:	8afb      	ldrh	r3, [r7, #22]
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fa5c 	bl	800a6d0 <mem_malloc>
 800b218:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <pbuf_alloc+0x174>
        return NULL;
 800b220:	2300      	movs	r3, #0
 800b222:	e02b      	b.n	800b27c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b226:	3310      	adds	r3, #16
 800b228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22a:	4413      	add	r3, r2
 800b22c:	3303      	adds	r3, #3
 800b22e:	f023 0303 	bic.w	r3, r3, #3
 800b232:	4618      	mov	r0, r3
 800b234:	88b9      	ldrh	r1, [r7, #4]
 800b236:	88ba      	ldrh	r2, [r7, #4]
 800b238:	2300      	movs	r3, #0
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	887b      	ldrh	r3, [r7, #2]
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	460b      	mov	r3, r1
 800b242:	4601      	mov	r1, r0
 800b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b246:	f7ff ff09 	bl	800b05c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d010      	beq.n	800b278 <pbuf_alloc+0x1c8>
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <pbuf_alloc+0x1d4>)
 800b258:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b25c:	490d      	ldr	r1, [pc, #52]	; (800b294 <pbuf_alloc+0x1e4>)
 800b25e:	480b      	ldr	r0, [pc, #44]	; (800b28c <pbuf_alloc+0x1dc>)
 800b260:	f00c fa02 	bl	8017668 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b264:	e008      	b.n	800b278 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <pbuf_alloc+0x1d4>)
 800b268:	f240 1227 	movw	r2, #295	; 0x127
 800b26c:	490a      	ldr	r1, [pc, #40]	; (800b298 <pbuf_alloc+0x1e8>)
 800b26e:	4807      	ldr	r0, [pc, #28]	; (800b28c <pbuf_alloc+0x1dc>)
 800b270:	f00c f9fa 	bl	8017668 <iprintf>
      return NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	e001      	b.n	800b27c <pbuf_alloc+0x1cc>
      break;
 800b278:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3728      	adds	r7, #40	; 0x28
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	0801d11c 	.word	0x0801d11c
 800b288:	0801d14c 	.word	0x0801d14c
 800b28c:	0801d17c 	.word	0x0801d17c
 800b290:	0801d1a4 	.word	0x0801d1a4
 800b294:	0801d1d8 	.word	0x0801d1d8
 800b298:	0801d204 	.word	0x0801d204

0800b29c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	807b      	strh	r3, [r7, #2]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b2ac:	883b      	ldrh	r3, [r7, #0]
 800b2ae:	2b41      	cmp	r3, #65	; 0x41
 800b2b0:	d009      	beq.n	800b2c6 <pbuf_alloc_reference+0x2a>
 800b2b2:	883b      	ldrh	r3, [r7, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d006      	beq.n	800b2c6 <pbuf_alloc_reference+0x2a>
 800b2b8:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <pbuf_alloc_reference+0x5c>)
 800b2ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b2be:	490f      	ldr	r1, [pc, #60]	; (800b2fc <pbuf_alloc_reference+0x60>)
 800b2c0:	480f      	ldr	r0, [pc, #60]	; (800b300 <pbuf_alloc_reference+0x64>)
 800b2c2:	f00c f9d1 	bl	8017668 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b2c6:	2007      	movs	r0, #7
 800b2c8:	f7ff fb70 	bl	800a9ac <memp_malloc>
 800b2cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e00b      	b.n	800b2f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b2d8:	8879      	ldrh	r1, [r7, #2]
 800b2da:	887a      	ldrh	r2, [r7, #2]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	883b      	ldrh	r3, [r7, #0]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff feb7 	bl	800b05c <pbuf_init_alloced_pbuf>
  return p;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	0801d11c 	.word	0x0801d11c
 800b2fc:	0801d220 	.word	0x0801d220
 800b300:	0801d17c 	.word	0x0801d17c

0800b304 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af02      	add	r7, sp, #8
 800b30a:	607b      	str	r3, [r7, #4]
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
 800b310:	460b      	mov	r3, r1
 800b312:	81bb      	strh	r3, [r7, #12]
 800b314:	4613      	mov	r3, r2
 800b316:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b31c:	8a7b      	ldrh	r3, [r7, #18]
 800b31e:	3303      	adds	r3, #3
 800b320:	f023 0203 	bic.w	r2, r3, #3
 800b324:	89bb      	ldrh	r3, [r7, #12]
 800b326:	441a      	add	r2, r3
 800b328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d901      	bls.n	800b332 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	e018      	b.n	800b364 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d007      	beq.n	800b348 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b338:	8a7b      	ldrh	r3, [r7, #18]
 800b33a:	3303      	adds	r3, #3
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	6a3a      	ldr	r2, [r7, #32]
 800b342:	4413      	add	r3, r2
 800b344:	617b      	str	r3, [r7, #20]
 800b346:	e001      	b.n	800b34c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	89b9      	ldrh	r1, [r7, #12]
 800b350:	89ba      	ldrh	r2, [r7, #12]
 800b352:	2302      	movs	r3, #2
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	897b      	ldrh	r3, [r7, #10]
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	460b      	mov	r3, r1
 800b35c:	6979      	ldr	r1, [r7, #20]
 800b35e:	f7ff fe7d 	bl	800b05c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b362:	687b      	ldr	r3, [r7, #4]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <pbuf_realloc+0x20>
 800b37e:	4b3a      	ldr	r3, [pc, #232]	; (800b468 <pbuf_realloc+0xfc>)
 800b380:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b384:	4939      	ldr	r1, [pc, #228]	; (800b46c <pbuf_realloc+0x100>)
 800b386:	483a      	ldr	r0, [pc, #232]	; (800b470 <pbuf_realloc+0x104>)
 800b388:	f00c f96e 	bl	8017668 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	891b      	ldrh	r3, [r3, #8]
 800b390:	887a      	ldrh	r2, [r7, #2]
 800b392:	429a      	cmp	r2, r3
 800b394:	d263      	bcs.n	800b45e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	891a      	ldrh	r2, [r3, #8]
 800b39a:	887b      	ldrh	r3, [r7, #2]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b3a0:	887b      	ldrh	r3, [r7, #2]
 800b3a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b3a8:	e018      	b.n	800b3dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	895b      	ldrh	r3, [r3, #10]
 800b3ae:	897a      	ldrh	r2, [r7, #10]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	891a      	ldrh	r2, [r3, #8]
 800b3b8:	893b      	ldrh	r3, [r7, #8]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d106      	bne.n	800b3dc <pbuf_realloc+0x70>
 800b3ce:	4b26      	ldr	r3, [pc, #152]	; (800b468 <pbuf_realloc+0xfc>)
 800b3d0:	f240 12af 	movw	r2, #431	; 0x1af
 800b3d4:	4927      	ldr	r1, [pc, #156]	; (800b474 <pbuf_realloc+0x108>)
 800b3d6:	4826      	ldr	r0, [pc, #152]	; (800b470 <pbuf_realloc+0x104>)
 800b3d8:	f00c f946 	bl	8017668 <iprintf>
  while (rem_len > q->len) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	895b      	ldrh	r3, [r3, #10]
 800b3e0:	897a      	ldrh	r2, [r7, #10]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d8e1      	bhi.n	800b3aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	7b1b      	ldrb	r3, [r3, #12]
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d121      	bne.n	800b436 <pbuf_realloc+0xca>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	895b      	ldrh	r3, [r3, #10]
 800b3f6:	897a      	ldrh	r2, [r7, #10]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d01c      	beq.n	800b436 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	7b5b      	ldrb	r3, [r3, #13]
 800b400:	f003 0302 	and.w	r3, r3, #2
 800b404:	2b00      	cmp	r3, #0
 800b406:	d116      	bne.n	800b436 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	b29a      	uxth	r2, r3
 800b412:	897b      	ldrh	r3, [r7, #10]
 800b414:	4413      	add	r3, r2
 800b416:	b29b      	uxth	r3, r3
 800b418:	4619      	mov	r1, r3
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff f85c 	bl	800a4d8 <mem_trim>
 800b420:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <pbuf_realloc+0xca>
 800b428:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <pbuf_realloc+0xfc>)
 800b42a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b42e:	4912      	ldr	r1, [pc, #72]	; (800b478 <pbuf_realloc+0x10c>)
 800b430:	480f      	ldr	r0, [pc, #60]	; (800b470 <pbuf_realloc+0x104>)
 800b432:	f00c f919 	bl	8017668 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	897a      	ldrh	r2, [r7, #10]
 800b43a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	895a      	ldrh	r2, [r3, #10]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4618      	mov	r0, r3
 800b452:	f000 f911 	bl	800b678 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e000      	b.n	800b460 <pbuf_realloc+0xf4>
    return;
 800b45e:	bf00      	nop

}
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	0801d11c 	.word	0x0801d11c
 800b46c:	0801d234 	.word	0x0801d234
 800b470:	0801d17c 	.word	0x0801d17c
 800b474:	0801d24c 	.word	0x0801d24c
 800b478:	0801d264 	.word	0x0801d264

0800b47c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <pbuf_add_header_impl+0x22>
 800b490:	4b2b      	ldr	r3, [pc, #172]	; (800b540 <pbuf_add_header_impl+0xc4>)
 800b492:	f240 12df 	movw	r2, #479	; 0x1df
 800b496:	492b      	ldr	r1, [pc, #172]	; (800b544 <pbuf_add_header_impl+0xc8>)
 800b498:	482b      	ldr	r0, [pc, #172]	; (800b548 <pbuf_add_header_impl+0xcc>)
 800b49a:	f00c f8e5 	bl	8017668 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d003      	beq.n	800b4ac <pbuf_add_header_impl+0x30>
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4aa:	d301      	bcc.n	800b4b0 <pbuf_add_header_impl+0x34>
    return 1;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e043      	b.n	800b538 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <pbuf_add_header_impl+0x3e>
    return 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	e03e      	b.n	800b538 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	891a      	ldrh	r2, [r3, #8]
 800b4c2:	8a7b      	ldrh	r3, [r7, #18]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	8a7a      	ldrh	r2, [r7, #18]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d901      	bls.n	800b4d2 <pbuf_add_header_impl+0x56>
    return 1;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e032      	b.n	800b538 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	7b1b      	ldrb	r3, [r3, #12]
 800b4d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b4d8:	8a3b      	ldrh	r3, [r7, #16]
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00c      	beq.n	800b4fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	425b      	negs	r3, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3310      	adds	r3, #16
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d20d      	bcs.n	800b514 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e01d      	b.n	800b538 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b4fc:	79fb      	ldrb	r3, [r7, #7]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d006      	beq.n	800b510 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	425b      	negs	r3, r3
 800b50a:	4413      	add	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
 800b50e:	e001      	b.n	800b514 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b510:	2301      	movs	r3, #1
 800b512:	e011      	b.n	800b538 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	895a      	ldrh	r2, [r3, #10]
 800b51e:	8a7b      	ldrh	r3, [r7, #18]
 800b520:	4413      	add	r3, r2
 800b522:	b29a      	uxth	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	891a      	ldrh	r2, [r3, #8]
 800b52c:	8a7b      	ldrh	r3, [r7, #18]
 800b52e:	4413      	add	r3, r2
 800b530:	b29a      	uxth	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	811a      	strh	r2, [r3, #8]


  return 0;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	0801d11c 	.word	0x0801d11c
 800b544:	0801d280 	.word	0x0801d280
 800b548:	0801d17c 	.word	0x0801d17c

0800b54c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b556:	2200      	movs	r2, #0
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff ff8e 	bl	800b47c <pbuf_add_header_impl>
 800b560:	4603      	mov	r3, r0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <pbuf_remove_header+0x1e>
 800b57c:	4b20      	ldr	r3, [pc, #128]	; (800b600 <pbuf_remove_header+0x94>)
 800b57e:	f240 224b 	movw	r2, #587	; 0x24b
 800b582:	4920      	ldr	r1, [pc, #128]	; (800b604 <pbuf_remove_header+0x98>)
 800b584:	4820      	ldr	r0, [pc, #128]	; (800b608 <pbuf_remove_header+0x9c>)
 800b586:	f00c f86f 	bl	8017668 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <pbuf_remove_header+0x2c>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b596:	d301      	bcc.n	800b59c <pbuf_remove_header+0x30>
    return 1;
 800b598:	2301      	movs	r3, #1
 800b59a:	e02c      	b.n	800b5f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <pbuf_remove_header+0x3a>
    return 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e027      	b.n	800b5f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	89fa      	ldrh	r2, [r7, #14]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d908      	bls.n	800b5c6 <pbuf_remove_header+0x5a>
 800b5b4:	4b12      	ldr	r3, [pc, #72]	; (800b600 <pbuf_remove_header+0x94>)
 800b5b6:	f240 2255 	movw	r2, #597	; 0x255
 800b5ba:	4914      	ldr	r1, [pc, #80]	; (800b60c <pbuf_remove_header+0xa0>)
 800b5bc:	4812      	ldr	r0, [pc, #72]	; (800b608 <pbuf_remove_header+0x9c>)
 800b5be:	f00c f853 	bl	8017668 <iprintf>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e017      	b.n	800b5f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	441a      	add	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	895a      	ldrh	r2, [r3, #10]
 800b5dc:	89fb      	ldrh	r3, [r7, #14]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	891a      	ldrh	r2, [r3, #8]
 800b5ea:	89fb      	ldrh	r3, [r7, #14]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	0801d11c 	.word	0x0801d11c
 800b604:	0801d280 	.word	0x0801d280
 800b608:	0801d17c 	.word	0x0801d17c
 800b60c:	0801d28c 	.word	0x0801d28c

0800b610 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	807b      	strh	r3, [r7, #2]
 800b61c:	4613      	mov	r3, r2
 800b61e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b624:	2b00      	cmp	r3, #0
 800b626:	da08      	bge.n	800b63a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b62c:	425b      	negs	r3, r3
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff ff9b 	bl	800b56c <pbuf_remove_header>
 800b636:	4603      	mov	r3, r0
 800b638:	e007      	b.n	800b64a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b63a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b63e:	787a      	ldrb	r2, [r7, #1]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff ff1a 	bl	800b47c <pbuf_add_header_impl>
 800b648:	4603      	mov	r3, r0
  }
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b082      	sub	sp, #8
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b65e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b662:	2201      	movs	r2, #1
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff ffd2 	bl	800b610 <pbuf_header_impl>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10b      	bne.n	800b69e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d106      	bne.n	800b69a <pbuf_free+0x22>
 800b68c:	4b38      	ldr	r3, [pc, #224]	; (800b770 <pbuf_free+0xf8>)
 800b68e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b692:	4938      	ldr	r1, [pc, #224]	; (800b774 <pbuf_free+0xfc>)
 800b694:	4838      	ldr	r0, [pc, #224]	; (800b778 <pbuf_free+0x100>)
 800b696:	f00b ffe7 	bl	8017668 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e063      	b.n	800b766 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b6a2:	e05c      	b.n	800b75e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	7b9b      	ldrb	r3, [r3, #14]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <pbuf_free+0x42>
 800b6ac:	4b30      	ldr	r3, [pc, #192]	; (800b770 <pbuf_free+0xf8>)
 800b6ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b6b2:	4932      	ldr	r1, [pc, #200]	; (800b77c <pbuf_free+0x104>)
 800b6b4:	4830      	ldr	r0, [pc, #192]	; (800b778 <pbuf_free+0x100>)
 800b6b6:	f00b ffd7 	bl	8017668 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	7b9b      	ldrb	r3, [r3, #14]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	739a      	strb	r2, [r3, #14]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	7b9b      	ldrb	r3, [r3, #14]
 800b6ca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b6cc:	7dbb      	ldrb	r3, [r7, #22]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d143      	bne.n	800b75a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7b1b      	ldrb	r3, [r3, #12]
 800b6dc:	f003 030f 	and.w	r3, r3, #15
 800b6e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7b5b      	ldrb	r3, [r3, #13]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d011      	beq.n	800b712 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <pbuf_free+0x90>
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	; (800b770 <pbuf_free+0xf8>)
 800b6fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b700:	491f      	ldr	r1, [pc, #124]	; (800b780 <pbuf_free+0x108>)
 800b702:	481d      	ldr	r0, [pc, #116]	; (800b778 <pbuf_free+0x100>)
 800b704:	f00b ffb0 	bl	8017668 <iprintf>
        pc->custom_free_function(p);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	4798      	blx	r3
 800b710:	e01d      	b.n	800b74e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	2b02      	cmp	r3, #2
 800b716:	d104      	bne.n	800b722 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	2008      	movs	r0, #8
 800b71c:	f7ff f992 	bl	800aa44 <memp_free>
 800b720:	e015      	b.n	800b74e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d104      	bne.n	800b732 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	2007      	movs	r0, #7
 800b72c:	f7ff f98a 	bl	800aa44 <memp_free>
 800b730:	e00d      	b.n	800b74e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <pbuf_free+0xc8>
          mem_free(p);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7fe fe63 	bl	800a404 <mem_free>
 800b73e:	e006      	b.n	800b74e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b740:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <pbuf_free+0xf8>)
 800b742:	f240 320f 	movw	r2, #783	; 0x30f
 800b746:	490f      	ldr	r1, [pc, #60]	; (800b784 <pbuf_free+0x10c>)
 800b748:	480b      	ldr	r0, [pc, #44]	; (800b778 <pbuf_free+0x100>)
 800b74a:	f00b ff8d 	bl	8017668 <iprintf>
        }
      }
      count++;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	607b      	str	r3, [r7, #4]
 800b758:	e001      	b.n	800b75e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d19f      	bne.n	800b6a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0801d11c 	.word	0x0801d11c
 800b774:	0801d280 	.word	0x0801d280
 800b778:	0801d17c 	.word	0x0801d17c
 800b77c:	0801d2ac 	.word	0x0801d2ac
 800b780:	0801d2c4 	.word	0x0801d2c4
 800b784:	0801d2e8 	.word	0x0801d2e8

0800b788 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b794:	e005      	b.n	800b7a2 <pbuf_clen+0x1a>
    ++len;
 800b796:	89fb      	ldrh	r3, [r7, #14]
 800b798:	3301      	adds	r3, #1
 800b79a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f6      	bne.n	800b796 <pbuf_clen+0xe>
  }
  return len;
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d010      	beq.n	800b7e8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7b9b      	ldrb	r3, [r3, #14]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7b9b      	ldrb	r3, [r3, #14]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <pbuf_ref+0x30>
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <pbuf_ref+0x38>)
 800b7dc:	f240 3242 	movw	r2, #834	; 0x342
 800b7e0:	4904      	ldr	r1, [pc, #16]	; (800b7f4 <pbuf_ref+0x3c>)
 800b7e2:	4805      	ldr	r0, [pc, #20]	; (800b7f8 <pbuf_ref+0x40>)
 800b7e4:	f00b ff40 	bl	8017668 <iprintf>
  }
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	0801d11c 	.word	0x0801d11c
 800b7f4:	0801d2fc 	.word	0x0801d2fc
 800b7f8:	0801d17c 	.word	0x0801d17c

0800b7fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <pbuf_cat+0x16>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d107      	bne.n	800b822 <pbuf_cat+0x26>
 800b812:	4b20      	ldr	r3, [pc, #128]	; (800b894 <pbuf_cat+0x98>)
 800b814:	f240 3259 	movw	r2, #857	; 0x359
 800b818:	491f      	ldr	r1, [pc, #124]	; (800b898 <pbuf_cat+0x9c>)
 800b81a:	4820      	ldr	r0, [pc, #128]	; (800b89c <pbuf_cat+0xa0>)
 800b81c:	f00b ff24 	bl	8017668 <iprintf>
 800b820:	e034      	b.n	800b88c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	e00a      	b.n	800b83e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	891a      	ldrh	r2, [r3, #8]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	891b      	ldrh	r3, [r3, #8]
 800b830:	4413      	add	r3, r2
 800b832:	b29a      	uxth	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1f0      	bne.n	800b828 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	891a      	ldrh	r2, [r3, #8]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	895b      	ldrh	r3, [r3, #10]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d006      	beq.n	800b860 <pbuf_cat+0x64>
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <pbuf_cat+0x98>)
 800b854:	f240 3262 	movw	r2, #866	; 0x362
 800b858:	4911      	ldr	r1, [pc, #68]	; (800b8a0 <pbuf_cat+0xa4>)
 800b85a:	4810      	ldr	r0, [pc, #64]	; (800b89c <pbuf_cat+0xa0>)
 800b85c:	f00b ff04 	bl	8017668 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d006      	beq.n	800b876 <pbuf_cat+0x7a>
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <pbuf_cat+0x98>)
 800b86a:	f240 3263 	movw	r2, #867	; 0x363
 800b86e:	490d      	ldr	r1, [pc, #52]	; (800b8a4 <pbuf_cat+0xa8>)
 800b870:	480a      	ldr	r0, [pc, #40]	; (800b89c <pbuf_cat+0xa0>)
 800b872:	f00b fef9 	bl	8017668 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	891a      	ldrh	r2, [r3, #8]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	891b      	ldrh	r3, [r3, #8]
 800b87e:	4413      	add	r3, r2
 800b880:	b29a      	uxth	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	0801d11c 	.word	0x0801d11c
 800b898:	0801d310 	.word	0x0801d310
 800b89c:	0801d17c 	.word	0x0801d17c
 800b8a0:	0801d348 	.word	0x0801d348
 800b8a4:	0801d378 	.word	0x0801d378

0800b8a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ffa1 	bl	800b7fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b8ba:	6838      	ldr	r0, [r7, #0]
 800b8bc:	f7ff ff7c 	bl	800b7b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <pbuf_copy+0x2a>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <pbuf_copy+0x2a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	891a      	ldrh	r2, [r3, #8]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	891b      	ldrh	r3, [r3, #8]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d209      	bcs.n	800b906 <pbuf_copy+0x3e>
 800b8f2:	4b57      	ldr	r3, [pc, #348]	; (800ba50 <pbuf_copy+0x188>)
 800b8f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b8f8:	4956      	ldr	r1, [pc, #344]	; (800ba54 <pbuf_copy+0x18c>)
 800b8fa:	4857      	ldr	r0, [pc, #348]	; (800ba58 <pbuf_copy+0x190>)
 800b8fc:	f00b feb4 	bl	8017668 <iprintf>
 800b900:	f06f 030f 	mvn.w	r3, #15
 800b904:	e09f      	b.n	800ba46 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	461a      	mov	r2, r3
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	895b      	ldrh	r3, [r3, #10]
 800b914:	4619      	mov	r1, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1acb      	subs	r3, r1, r3
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d306      	bcc.n	800b92c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	895b      	ldrh	r3, [r3, #10]
 800b922:	461a      	mov	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	e005      	b.n	800b938 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	895b      	ldrh	r3, [r3, #10]
 800b930:	461a      	mov	r2, r3
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	18d0      	adds	r0, r2, r3
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	4413      	add	r3, r2
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4619      	mov	r1, r3
 800b94c:	f00b f9f2 	bl	8016d34 <memcpy>
    offset_to += len;
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4413      	add	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	895b      	ldrh	r3, [r3, #10]
 800b964:	461a      	mov	r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	4293      	cmp	r3, r2
 800b96a:	d906      	bls.n	800b97a <pbuf_copy+0xb2>
 800b96c:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <pbuf_copy+0x188>)
 800b96e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b972:	493a      	ldr	r1, [pc, #232]	; (800ba5c <pbuf_copy+0x194>)
 800b974:	4838      	ldr	r0, [pc, #224]	; (800ba58 <pbuf_copy+0x190>)
 800b976:	f00b fe77 	bl	8017668 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	895b      	ldrh	r3, [r3, #10]
 800b97e:	461a      	mov	r2, r3
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	4293      	cmp	r3, r2
 800b984:	d906      	bls.n	800b994 <pbuf_copy+0xcc>
 800b986:	4b32      	ldr	r3, [pc, #200]	; (800ba50 <pbuf_copy+0x188>)
 800b988:	f240 32da 	movw	r2, #986	; 0x3da
 800b98c:	4934      	ldr	r1, [pc, #208]	; (800ba60 <pbuf_copy+0x198>)
 800b98e:	4832      	ldr	r0, [pc, #200]	; (800ba58 <pbuf_copy+0x190>)
 800b990:	f00b fe6a 	bl	8017668 <iprintf>
    if (offset_from >= p_from->len) {
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	895b      	ldrh	r3, [r3, #10]
 800b998:	461a      	mov	r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d304      	bcc.n	800b9aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	895b      	ldrh	r3, [r3, #10]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d114      	bne.n	800b9e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10c      	bne.n	800b9e0 <pbuf_copy+0x118>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d009      	beq.n	800b9e0 <pbuf_copy+0x118>
 800b9cc:	4b20      	ldr	r3, [pc, #128]	; (800ba50 <pbuf_copy+0x188>)
 800b9ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b9d2:	4924      	ldr	r1, [pc, #144]	; (800ba64 <pbuf_copy+0x19c>)
 800b9d4:	4820      	ldr	r0, [pc, #128]	; (800ba58 <pbuf_copy+0x190>)
 800b9d6:	f00b fe47 	bl	8017668 <iprintf>
 800b9da:	f06f 030f 	mvn.w	r3, #15
 800b9de:	e032      	b.n	800ba46 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d013      	beq.n	800ba0e <pbuf_copy+0x146>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	895a      	ldrh	r2, [r3, #10]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	891b      	ldrh	r3, [r3, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d10d      	bne.n	800ba0e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d009      	beq.n	800ba0e <pbuf_copy+0x146>
 800b9fa:	4b15      	ldr	r3, [pc, #84]	; (800ba50 <pbuf_copy+0x188>)
 800b9fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ba00:	4919      	ldr	r1, [pc, #100]	; (800ba68 <pbuf_copy+0x1a0>)
 800ba02:	4815      	ldr	r0, [pc, #84]	; (800ba58 <pbuf_copy+0x190>)
 800ba04:	f00b fe30 	bl	8017668 <iprintf>
 800ba08:	f06f 0305 	mvn.w	r3, #5
 800ba0c:	e01b      	b.n	800ba46 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d013      	beq.n	800ba3c <pbuf_copy+0x174>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	895a      	ldrh	r2, [r3, #10]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	891b      	ldrh	r3, [r3, #8]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d10d      	bne.n	800ba3c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d009      	beq.n	800ba3c <pbuf_copy+0x174>
 800ba28:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <pbuf_copy+0x188>)
 800ba2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ba2e:	490e      	ldr	r1, [pc, #56]	; (800ba68 <pbuf_copy+0x1a0>)
 800ba30:	4809      	ldr	r0, [pc, #36]	; (800ba58 <pbuf_copy+0x190>)
 800ba32:	f00b fe19 	bl	8017668 <iprintf>
 800ba36:	f06f 0305 	mvn.w	r3, #5
 800ba3a:	e004      	b.n	800ba46 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f47f af61 	bne.w	800b906 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	0801d11c 	.word	0x0801d11c
 800ba54:	0801d3c4 	.word	0x0801d3c4
 800ba58:	0801d17c 	.word	0x0801d17c
 800ba5c:	0801d3f4 	.word	0x0801d3f4
 800ba60:	0801d40c 	.word	0x0801d40c
 800ba64:	0801d428 	.word	0x0801d428
 800ba68:	0801d438 	.word	0x0801d438

0800ba6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	4611      	mov	r1, r2
 800ba78:	461a      	mov	r2, r3
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	80fb      	strh	r3, [r7, #6]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d108      	bne.n	800baa2 <pbuf_copy_partial+0x36>
 800ba90:	4b2b      	ldr	r3, [pc, #172]	; (800bb40 <pbuf_copy_partial+0xd4>)
 800ba92:	f240 420a 	movw	r2, #1034	; 0x40a
 800ba96:	492b      	ldr	r1, [pc, #172]	; (800bb44 <pbuf_copy_partial+0xd8>)
 800ba98:	482b      	ldr	r0, [pc, #172]	; (800bb48 <pbuf_copy_partial+0xdc>)
 800ba9a:	f00b fde5 	bl	8017668 <iprintf>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	e04a      	b.n	800bb38 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d108      	bne.n	800baba <pbuf_copy_partial+0x4e>
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <pbuf_copy_partial+0xd4>)
 800baaa:	f240 420b 	movw	r2, #1035	; 0x40b
 800baae:	4927      	ldr	r1, [pc, #156]	; (800bb4c <pbuf_copy_partial+0xe0>)
 800bab0:	4825      	ldr	r0, [pc, #148]	; (800bb48 <pbuf_copy_partial+0xdc>)
 800bab2:	f00b fdd9 	bl	8017668 <iprintf>
 800bab6:	2300      	movs	r3, #0
 800bab8:	e03e      	b.n	800bb38 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	e034      	b.n	800bb2a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bac0:	88bb      	ldrh	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <pbuf_copy_partial+0x70>
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	895b      	ldrh	r3, [r3, #10]
 800baca:	88ba      	ldrh	r2, [r7, #4]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d305      	bcc.n	800badc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	895b      	ldrh	r3, [r3, #10]
 800bad4:	88ba      	ldrh	r2, [r7, #4]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	80bb      	strh	r3, [r7, #4]
 800bada:	e023      	b.n	800bb24 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	895a      	ldrh	r2, [r3, #10]
 800bae0:	88bb      	ldrh	r3, [r7, #4]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bae6:	8b3a      	ldrh	r2, [r7, #24]
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	429a      	cmp	r2, r3
 800baec:	d901      	bls.n	800baf2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800baee:	88fb      	ldrh	r3, [r7, #6]
 800baf0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800baf2:	8b7b      	ldrh	r3, [r7, #26]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	18d0      	adds	r0, r2, r3
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	88bb      	ldrh	r3, [r7, #4]
 800bafe:	4413      	add	r3, r2
 800bb00:	8b3a      	ldrh	r2, [r7, #24]
 800bb02:	4619      	mov	r1, r3
 800bb04:	f00b f916 	bl	8016d34 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bb08:	8afa      	ldrh	r2, [r7, #22]
 800bb0a:	8b3b      	ldrh	r3, [r7, #24]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bb10:	8b7a      	ldrh	r2, [r7, #26]
 800bb12:	8b3b      	ldrh	r3, [r7, #24]
 800bb14:	4413      	add	r3, r2
 800bb16:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bb18:	88fa      	ldrh	r2, [r7, #6]
 800bb1a:	8b3b      	ldrh	r3, [r7, #24]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <pbuf_copy_partial+0xca>
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1c4      	bne.n	800bac0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bb36:	8afb      	ldrh	r3, [r7, #22]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3720      	adds	r7, #32
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0801d11c 	.word	0x0801d11c
 800bb44:	0801d464 	.word	0x0801d464
 800bb48:	0801d17c 	.word	0x0801d17c
 800bb4c:	0801d484 	.word	0x0801d484

0800bb50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	603a      	str	r2, [r7, #0]
 800bb5a:	71fb      	strb	r3, [r7, #7]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	8919      	ldrh	r1, [r3, #8]
 800bb64:	88ba      	ldrh	r2, [r7, #4]
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff faa1 	bl	800b0b0 <pbuf_alloc>
 800bb6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <pbuf_clone+0x2a>
    return NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	e011      	b.n	800bb9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fea3 	bl	800b8c8 <pbuf_copy>
 800bb82:	4603      	mov	r3, r0
 800bb84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bb86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <pbuf_clone+0x4c>
 800bb8e:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <pbuf_clone+0x58>)
 800bb90:	f240 5224 	movw	r2, #1316	; 0x524
 800bb94:	4905      	ldr	r1, [pc, #20]	; (800bbac <pbuf_clone+0x5c>)
 800bb96:	4806      	ldr	r0, [pc, #24]	; (800bbb0 <pbuf_clone+0x60>)
 800bb98:	f00b fd66 	bl	8017668 <iprintf>
  return q;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	0801d11c 	.word	0x0801d11c
 800bbac:	0801d590 	.word	0x0801d590
 800bbb0:	0801d17c 	.word	0x0801d17c

0800bbb4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bbb8:	f00b fde4 	bl	8017784 <rand>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	4b01      	ldr	r3, [pc, #4]	; (800bbd4 <tcp_init+0x20>)
 800bbce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bbd0:	bf00      	nop
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	200005be 	.word	0x200005be

0800bbd8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7d1b      	ldrb	r3, [r3, #20]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d105      	bne.n	800bbf4 <tcp_free+0x1c>
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <tcp_free+0x2c>)
 800bbea:	22d4      	movs	r2, #212	; 0xd4
 800bbec:	4906      	ldr	r1, [pc, #24]	; (800bc08 <tcp_free+0x30>)
 800bbee:	4807      	ldr	r0, [pc, #28]	; (800bc0c <tcp_free+0x34>)
 800bbf0:	f00b fd3a 	bl	8017668 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	f7fe ff24 	bl	800aa44 <memp_free>
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0801d61c 	.word	0x0801d61c
 800bc08:	0801d64c 	.word	0x0801d64c
 800bc0c:	0801d660 	.word	0x0801d660

0800bc10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7d1b      	ldrb	r3, [r3, #20]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d105      	bne.n	800bc2c <tcp_free_listen+0x1c>
 800bc20:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <tcp_free_listen+0x2c>)
 800bc22:	22df      	movs	r2, #223	; 0xdf
 800bc24:	4906      	ldr	r1, [pc, #24]	; (800bc40 <tcp_free_listen+0x30>)
 800bc26:	4807      	ldr	r0, [pc, #28]	; (800bc44 <tcp_free_listen+0x34>)
 800bc28:	f00b fd1e 	bl	8017668 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	2002      	movs	r0, #2
 800bc30:	f7fe ff08 	bl	800aa44 <memp_free>
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	0801d61c 	.word	0x0801d61c
 800bc40:	0801d688 	.word	0x0801d688
 800bc44:	0801d660 	.word	0x0801d660

0800bc48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bc4c:	f001 f860 	bl	800cd10 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <tcp_tmr+0x28>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <tcp_tmr+0x28>)
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <tcp_tmr+0x28>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d001      	beq.n	800bc6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bc68:	f000 fd12 	bl	800c690 <tcp_slowtmr>
  }
}
 800bc6c:	bf00      	nop
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20001215 	.word	0x20001215

0800bc74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d105      	bne.n	800bc90 <tcp_remove_listener+0x1c>
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <tcp_remove_listener+0x48>)
 800bc86:	22ff      	movs	r2, #255	; 0xff
 800bc88:	490d      	ldr	r1, [pc, #52]	; (800bcc0 <tcp_remove_listener+0x4c>)
 800bc8a:	480e      	ldr	r0, [pc, #56]	; (800bcc4 <tcp_remove_listener+0x50>)
 800bc8c:	f00b fcec 	bl	8017668 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	60fb      	str	r3, [r7, #12]
 800bc94:	e00a      	b.n	800bcac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d102      	bne.n	800bca6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1f1      	bne.n	800bc96 <tcp_remove_listener+0x22>
    }
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	bf00      	nop
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	0801d61c 	.word	0x0801d61c
 800bcc0:	0801d6a4 	.word	0x0801d6a4
 800bcc4:	0801d660 	.word	0x0801d660

0800bcc8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d106      	bne.n	800bce4 <tcp_listen_closed+0x1c>
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <tcp_listen_closed+0x60>)
 800bcd8:	f240 1211 	movw	r2, #273	; 0x111
 800bcdc:	4913      	ldr	r1, [pc, #76]	; (800bd2c <tcp_listen_closed+0x64>)
 800bcde:	4814      	ldr	r0, [pc, #80]	; (800bd30 <tcp_listen_closed+0x68>)
 800bce0:	f00b fcc2 	bl	8017668 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7d1b      	ldrb	r3, [r3, #20]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d006      	beq.n	800bcfa <tcp_listen_closed+0x32>
 800bcec:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <tcp_listen_closed+0x60>)
 800bcee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bcf2:	4910      	ldr	r1, [pc, #64]	; (800bd34 <tcp_listen_closed+0x6c>)
 800bcf4:	480e      	ldr	r0, [pc, #56]	; (800bd30 <tcp_listen_closed+0x68>)
 800bcf6:	f00b fcb7 	bl	8017668 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e00b      	b.n	800bd18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd00:	4a0d      	ldr	r2, [pc, #52]	; (800bd38 <tcp_listen_closed+0x70>)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff ffb1 	bl	800bc74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d9f0      	bls.n	800bd00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bd1e:	bf00      	nop
 800bd20:	bf00      	nop
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	0801d61c 	.word	0x0801d61c
 800bd2c:	0801d6cc 	.word	0x0801d6cc
 800bd30:	0801d660 	.word	0x0801d660
 800bd34:	0801d6d8 	.word	0x0801d6d8
 800bd38:	080339e0 	.word	0x080339e0

0800bd3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bd3c:	b5b0      	push	{r4, r5, r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af04      	add	r7, sp, #16
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <tcp_close_shutdown+0x20>
 800bd4e:	4b63      	ldr	r3, [pc, #396]	; (800bedc <tcp_close_shutdown+0x1a0>)
 800bd50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bd54:	4962      	ldr	r1, [pc, #392]	; (800bee0 <tcp_close_shutdown+0x1a4>)
 800bd56:	4863      	ldr	r0, [pc, #396]	; (800bee4 <tcp_close_shutdown+0x1a8>)
 800bd58:	f00b fc86 	bl	8017668 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d066      	beq.n	800be30 <tcp_close_shutdown+0xf4>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7d1b      	ldrb	r3, [r3, #20]
 800bd66:	2b04      	cmp	r3, #4
 800bd68:	d003      	beq.n	800bd72 <tcp_close_shutdown+0x36>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7d1b      	ldrb	r3, [r3, #20]
 800bd6e:	2b07      	cmp	r3, #7
 800bd70:	d15e      	bne.n	800be30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <tcp_close_shutdown+0x48>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd82:	d055      	beq.n	800be30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	8b5b      	ldrh	r3, [r3, #26]
 800bd88:	f003 0310 	and.w	r3, r3, #16
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d106      	bne.n	800bd9e <tcp_close_shutdown+0x62>
 800bd90:	4b52      	ldr	r3, [pc, #328]	; (800bedc <tcp_close_shutdown+0x1a0>)
 800bd92:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bd96:	4954      	ldr	r1, [pc, #336]	; (800bee8 <tcp_close_shutdown+0x1ac>)
 800bd98:	4852      	ldr	r0, [pc, #328]	; (800bee4 <tcp_close_shutdown+0x1a8>)
 800bd9a:	f00b fc65 	bl	8017668 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bda6:	687d      	ldr	r5, [r7, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	8ad2      	ldrh	r2, [r2, #22]
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	8b09      	ldrh	r1, [r1, #24]
 800bdb4:	9102      	str	r1, [sp, #8]
 800bdb6:	9201      	str	r2, [sp, #4]
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	462b      	mov	r3, r5
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f005 fe59 	bl	8011a78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f001 fb72 	bl	800d4b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bdcc:	4b47      	ldr	r3, [pc, #284]	; (800beec <tcp_close_shutdown+0x1b0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d105      	bne.n	800bde2 <tcp_close_shutdown+0xa6>
 800bdd6:	4b45      	ldr	r3, [pc, #276]	; (800beec <tcp_close_shutdown+0x1b0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	4a43      	ldr	r2, [pc, #268]	; (800beec <tcp_close_shutdown+0x1b0>)
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	e013      	b.n	800be0a <tcp_close_shutdown+0xce>
 800bde2:	4b42      	ldr	r3, [pc, #264]	; (800beec <tcp_close_shutdown+0x1b0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e00c      	b.n	800be04 <tcp_close_shutdown+0xc8>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d104      	bne.n	800bdfe <tcp_close_shutdown+0xc2>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	60da      	str	r2, [r3, #12]
 800bdfc:	e005      	b.n	800be0a <tcp_close_shutdown+0xce>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1ef      	bne.n	800bdea <tcp_close_shutdown+0xae>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	60da      	str	r2, [r3, #12]
 800be10:	4b37      	ldr	r3, [pc, #220]	; (800bef0 <tcp_close_shutdown+0x1b4>)
 800be12:	2201      	movs	r2, #1
 800be14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800be16:	4b37      	ldr	r3, [pc, #220]	; (800bef4 <tcp_close_shutdown+0x1b8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d102      	bne.n	800be26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800be20:	f004 f8c8 	bl	800ffb4 <tcp_trigger_input_pcb_close>
 800be24:	e002      	b.n	800be2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f7ff fed6 	bl	800bbd8 <tcp_free>
      }
      return ERR_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	e050      	b.n	800bed2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	2b02      	cmp	r3, #2
 800be36:	d03b      	beq.n	800beb0 <tcp_close_shutdown+0x174>
 800be38:	2b02      	cmp	r3, #2
 800be3a:	dc44      	bgt.n	800bec6 <tcp_close_shutdown+0x18a>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <tcp_close_shutdown+0x10a>
 800be40:	2b01      	cmp	r3, #1
 800be42:	d02a      	beq.n	800be9a <tcp_close_shutdown+0x15e>
 800be44:	e03f      	b.n	800bec6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8adb      	ldrh	r3, [r3, #22]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d021      	beq.n	800be92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be4e:	4b2a      	ldr	r3, [pc, #168]	; (800bef8 <tcp_close_shutdown+0x1bc>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	429a      	cmp	r2, r3
 800be56:	d105      	bne.n	800be64 <tcp_close_shutdown+0x128>
 800be58:	4b27      	ldr	r3, [pc, #156]	; (800bef8 <tcp_close_shutdown+0x1bc>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	4a26      	ldr	r2, [pc, #152]	; (800bef8 <tcp_close_shutdown+0x1bc>)
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	e013      	b.n	800be8c <tcp_close_shutdown+0x150>
 800be64:	4b24      	ldr	r3, [pc, #144]	; (800bef8 <tcp_close_shutdown+0x1bc>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	e00c      	b.n	800be86 <tcp_close_shutdown+0x14a>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	429a      	cmp	r2, r3
 800be74:	d104      	bne.n	800be80 <tcp_close_shutdown+0x144>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68da      	ldr	r2, [r3, #12]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	e005      	b.n	800be8c <tcp_close_shutdown+0x150>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	60bb      	str	r3, [r7, #8]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1ef      	bne.n	800be6c <tcp_close_shutdown+0x130>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff fea0 	bl	800bbd8 <tcp_free>
      break;
 800be98:	e01a      	b.n	800bed0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff ff14 	bl	800bcc8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	4816      	ldr	r0, [pc, #88]	; (800befc <tcp_close_shutdown+0x1c0>)
 800bea4:	f001 fb54 	bl	800d550 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff feb1 	bl	800bc10 <tcp_free_listen>
      break;
 800beae:	e00f      	b.n	800bed0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800beb0:	6879      	ldr	r1, [r7, #4]
 800beb2:	480e      	ldr	r0, [pc, #56]	; (800beec <tcp_close_shutdown+0x1b0>)
 800beb4:	f001 fb4c 	bl	800d550 <tcp_pcb_remove>
 800beb8:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <tcp_close_shutdown+0x1b4>)
 800beba:	2201      	movs	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fe8a 	bl	800bbd8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bec4:	e004      	b.n	800bed0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f81a 	bl	800bf00 <tcp_close_shutdown_fin>
 800becc:	4603      	mov	r3, r0
 800bece:	e000      	b.n	800bed2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bdb0      	pop	{r4, r5, r7, pc}
 800beda:	bf00      	nop
 800bedc:	0801d61c 	.word	0x0801d61c
 800bee0:	0801d6f0 	.word	0x0801d6f0
 800bee4:	0801d660 	.word	0x0801d660
 800bee8:	0801d710 	.word	0x0801d710
 800beec:	2000d85c 	.word	0x2000d85c
 800bef0:	2000d858 	.word	0x2000d858
 800bef4:	2000d870 	.word	0x2000d870
 800bef8:	2000d868 	.word	0x2000d868
 800befc:	2000d864 	.word	0x2000d864

0800bf00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <tcp_close_shutdown_fin+0x1c>
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	; (800bfc8 <tcp_close_shutdown_fin+0xc8>)
 800bf10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bf14:	492d      	ldr	r1, [pc, #180]	; (800bfcc <tcp_close_shutdown_fin+0xcc>)
 800bf16:	482e      	ldr	r0, [pc, #184]	; (800bfd0 <tcp_close_shutdown_fin+0xd0>)
 800bf18:	f00b fba6 	bl	8017668 <iprintf>

  switch (pcb->state) {
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7d1b      	ldrb	r3, [r3, #20]
 800bf20:	2b07      	cmp	r3, #7
 800bf22:	d020      	beq.n	800bf66 <tcp_close_shutdown_fin+0x66>
 800bf24:	2b07      	cmp	r3, #7
 800bf26:	dc2b      	bgt.n	800bf80 <tcp_close_shutdown_fin+0x80>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d002      	beq.n	800bf32 <tcp_close_shutdown_fin+0x32>
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d00d      	beq.n	800bf4c <tcp_close_shutdown_fin+0x4c>
 800bf30:	e026      	b.n	800bf80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f004 fea8 	bl	8010c88 <tcp_send_fin>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11f      	bne.n	800bf84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2205      	movs	r2, #5
 800bf48:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf4a:	e01b      	b.n	800bf84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f004 fe9b 	bl	8010c88 <tcp_send_fin>
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d114      	bne.n	800bf88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2205      	movs	r2, #5
 800bf62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf64:	e010      	b.n	800bf88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f004 fe8e 	bl	8010c88 <tcp_send_fin>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bf70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2209      	movs	r2, #9
 800bf7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bf7e:	e005      	b.n	800bf8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e01c      	b.n	800bfbe <tcp_close_shutdown_fin+0xbe>
      break;
 800bf84:	bf00      	nop
 800bf86:	e002      	b.n	800bf8e <tcp_close_shutdown_fin+0x8e>
      break;
 800bf88:	bf00      	nop
 800bf8a:	e000      	b.n	800bf8e <tcp_close_shutdown_fin+0x8e>
      break;
 800bf8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bf8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f004 ffb4 	bl	8010f04 <tcp_output>
 800bf9c:	e00d      	b.n	800bfba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bf9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfa6:	d108      	bne.n	800bfba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8b5b      	ldrh	r3, [r3, #26]
 800bfac:	f043 0308 	orr.w	r3, r3, #8
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	e001      	b.n	800bfbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0801d61c 	.word	0x0801d61c
 800bfcc:	0801d6cc 	.word	0x0801d6cc
 800bfd0:	0801d660 	.word	0x0801d660

0800bfd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d109      	bne.n	800bff6 <tcp_close+0x22>
 800bfe2:	4b11      	ldr	r3, [pc, #68]	; (800c028 <tcp_close+0x54>)
 800bfe4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bfe8:	4910      	ldr	r1, [pc, #64]	; (800c02c <tcp_close+0x58>)
 800bfea:	4811      	ldr	r0, [pc, #68]	; (800c030 <tcp_close+0x5c>)
 800bfec:	f00b fb3c 	bl	8017668 <iprintf>
 800bff0:	f06f 030f 	mvn.w	r3, #15
 800bff4:	e014      	b.n	800c020 <tcp_close+0x4c>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 fc44 	bl	800d888 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7d1b      	ldrb	r3, [r3, #20]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d006      	beq.n	800c016 <tcp_close+0x42>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	8b5b      	ldrh	r3, [r3, #26]
 800c00c:	f043 0310 	orr.w	r3, r3, #16
 800c010:	b29a      	uxth	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c016:	2101      	movs	r1, #1
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fe8f 	bl	800bd3c <tcp_close_shutdown>
 800c01e:	4603      	mov	r3, r0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	0801d61c 	.word	0x0801d61c
 800c02c:	0801d72c 	.word	0x0801d72c
 800c030:	0801d660 	.word	0x0801d660

0800c034 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08e      	sub	sp, #56	; 0x38
 800c038:	af04      	add	r7, sp, #16
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d107      	bne.n	800c054 <tcp_abandon+0x20>
 800c044:	4b52      	ldr	r3, [pc, #328]	; (800c190 <tcp_abandon+0x15c>)
 800c046:	f240 223d 	movw	r2, #573	; 0x23d
 800c04a:	4952      	ldr	r1, [pc, #328]	; (800c194 <tcp_abandon+0x160>)
 800c04c:	4852      	ldr	r0, [pc, #328]	; (800c198 <tcp_abandon+0x164>)
 800c04e:	f00b fb0b 	bl	8017668 <iprintf>
 800c052:	e099      	b.n	800c188 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7d1b      	ldrb	r3, [r3, #20]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d106      	bne.n	800c06a <tcp_abandon+0x36>
 800c05c:	4b4c      	ldr	r3, [pc, #304]	; (800c190 <tcp_abandon+0x15c>)
 800c05e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c062:	494e      	ldr	r1, [pc, #312]	; (800c19c <tcp_abandon+0x168>)
 800c064:	484c      	ldr	r0, [pc, #304]	; (800c198 <tcp_abandon+0x164>)
 800c066:	f00b faff 	bl	8017668 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	7d1b      	ldrb	r3, [r3, #20]
 800c06e:	2b0a      	cmp	r3, #10
 800c070:	d107      	bne.n	800c082 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	484a      	ldr	r0, [pc, #296]	; (800c1a0 <tcp_abandon+0x16c>)
 800c076:	f001 fa6b 	bl	800d550 <tcp_pcb_remove>
    tcp_free(pcb);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fdac 	bl	800bbd8 <tcp_free>
 800c080:	e082      	b.n	800c188 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c08e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c09c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7d1b      	ldrb	r3, [r3, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d126      	bne.n	800c0fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8adb      	ldrh	r3, [r3, #22]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d02e      	beq.n	800c112 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c0b4:	4b3b      	ldr	r3, [pc, #236]	; (800c1a4 <tcp_abandon+0x170>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d105      	bne.n	800c0ca <tcp_abandon+0x96>
 800c0be:	4b39      	ldr	r3, [pc, #228]	; (800c1a4 <tcp_abandon+0x170>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	4a37      	ldr	r2, [pc, #220]	; (800c1a4 <tcp_abandon+0x170>)
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	e013      	b.n	800c0f2 <tcp_abandon+0xbe>
 800c0ca:	4b36      	ldr	r3, [pc, #216]	; (800c1a4 <tcp_abandon+0x170>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	61fb      	str	r3, [r7, #28]
 800c0d0:	e00c      	b.n	800c0ec <tcp_abandon+0xb8>
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d104      	bne.n	800c0e6 <tcp_abandon+0xb2>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	60da      	str	r2, [r3, #12]
 800c0e4:	e005      	b.n	800c0f2 <tcp_abandon+0xbe>
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	61fb      	str	r3, [r7, #28]
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1ef      	bne.n	800c0d2 <tcp_abandon+0x9e>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	60da      	str	r2, [r3, #12]
 800c0f8:	e00b      	b.n	800c112 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8adb      	ldrh	r3, [r3, #22]
 800c102:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	4828      	ldr	r0, [pc, #160]	; (800c1a8 <tcp_abandon+0x174>)
 800c108:	f001 fa22 	bl	800d550 <tcp_pcb_remove>
 800c10c:	4b27      	ldr	r3, [pc, #156]	; (800c1ac <tcp_abandon+0x178>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c116:	2b00      	cmp	r3, #0
 800c118:	d004      	beq.n	800c124 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 fed6 	bl	800ced0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c130:	4618      	mov	r0, r3
 800c132:	f000 fecd 	bl	800ced0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d004      	beq.n	800c148 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fec4 	bl	800ced0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00e      	beq.n	800c16c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3304      	adds	r3, #4
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	8b12      	ldrh	r2, [r2, #24]
 800c158:	9202      	str	r2, [sp, #8]
 800c15a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c15c:	9201      	str	r2, [sp, #4]
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	460b      	mov	r3, r1
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	69b9      	ldr	r1, [r7, #24]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f005 fc86 	bl	8011a78 <tcp_rst>
    }
    last_state = pcb->state;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	7d1b      	ldrb	r3, [r3, #20]
 800c170:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fd30 	bl	800bbd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <tcp_abandon+0x154>
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f06f 010c 	mvn.w	r1, #12
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	4798      	blx	r3
  }
}
 800c188:	3728      	adds	r7, #40	; 0x28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	0801d61c 	.word	0x0801d61c
 800c194:	0801d760 	.word	0x0801d760
 800c198:	0801d660 	.word	0x0801d660
 800c19c:	0801d77c 	.word	0x0801d77c
 800c1a0:	2000d86c 	.word	0x2000d86c
 800c1a4:	2000d868 	.word	0x2000d868
 800c1a8:	2000d85c 	.word	0x2000d85c
 800c1ac:	2000d858 	.word	0x2000d858

0800c1b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff ff3a 	bl	800c034 <tcp_abandon>
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c1d6:	2304      	movs	r3, #4
 800c1d8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c1e0:	4b3e      	ldr	r3, [pc, #248]	; (800c2dc <tcp_bind+0x114>)
 800c1e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <tcp_bind+0x36>
 800c1ea:	4b3d      	ldr	r3, [pc, #244]	; (800c2e0 <tcp_bind+0x118>)
 800c1ec:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c1f0:	493c      	ldr	r1, [pc, #240]	; (800c2e4 <tcp_bind+0x11c>)
 800c1f2:	483d      	ldr	r0, [pc, #244]	; (800c2e8 <tcp_bind+0x120>)
 800c1f4:	f00b fa38 	bl	8017668 <iprintf>
 800c1f8:	f06f 030f 	mvn.w	r3, #15
 800c1fc:	e06a      	b.n	800c2d4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	7d1b      	ldrb	r3, [r3, #20]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <tcp_bind+0x52>
 800c206:	4b36      	ldr	r3, [pc, #216]	; (800c2e0 <tcp_bind+0x118>)
 800c208:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c20c:	4937      	ldr	r1, [pc, #220]	; (800c2ec <tcp_bind+0x124>)
 800c20e:	4836      	ldr	r0, [pc, #216]	; (800c2e8 <tcp_bind+0x120>)
 800c210:	f00b fa2a 	bl	8017668 <iprintf>
 800c214:	f06f 0305 	mvn.w	r3, #5
 800c218:	e05c      	b.n	800c2d4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d109      	bne.n	800c234 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c220:	f000 f9f0 	bl	800c604 <tcp_new_port>
 800c224:	4603      	mov	r3, r0
 800c226:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d135      	bne.n	800c29a <tcp_bind+0xd2>
      return ERR_BUF;
 800c22e:	f06f 0301 	mvn.w	r3, #1
 800c232:	e04f      	b.n	800c2d4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c234:	2300      	movs	r3, #0
 800c236:	61fb      	str	r3, [r7, #28]
 800c238:	e02b      	b.n	800c292 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c23a:	4a2d      	ldr	r2, [pc, #180]	; (800c2f0 <tcp_bind+0x128>)
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	61bb      	str	r3, [r7, #24]
 800c246:	e01e      	b.n	800c286 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	8adb      	ldrh	r3, [r3, #22]
 800c24c:	88fa      	ldrh	r2, [r7, #6]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d116      	bne.n	800c280 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c252:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c254:	2b00      	cmp	r3, #0
 800c256:	d010      	beq.n	800c27a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00c      	beq.n	800c27a <tcp_bind+0xb2>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d009      	beq.n	800c27a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c276:	429a      	cmp	r2, r3
 800c278:	d102      	bne.n	800c280 <tcp_bind+0xb8>
              return ERR_USE;
 800c27a:	f06f 0307 	mvn.w	r3, #7
 800c27e:	e029      	b.n	800c2d4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1dd      	bne.n	800c248 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	3301      	adds	r3, #1
 800c290:	61fb      	str	r3, [r7, #28]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	429a      	cmp	r2, r3
 800c298:	dbcf      	blt.n	800c23a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00c      	beq.n	800c2ba <tcp_bind+0xf2>
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d008      	beq.n	800c2ba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <tcp_bind+0xec>
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	e000      	b.n	800c2b6 <tcp_bind+0xee>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	88fa      	ldrh	r2, [r7, #6]
 800c2be:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <tcp_bind+0x12c>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	60da      	str	r2, [r3, #12]
 800c2c8:	4a0a      	ldr	r2, [pc, #40]	; (800c2f4 <tcp_bind+0x12c>)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	f005 fd95 	bl	8011dfc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	08033a18 	.word	0x08033a18
 800c2e0:	0801d61c 	.word	0x0801d61c
 800c2e4:	0801d7b0 	.word	0x0801d7b0
 800c2e8:	0801d660 	.word	0x0801d660
 800c2ec:	0801d7c8 	.word	0x0801d7c8
 800c2f0:	080339e0 	.word	0x080339e0
 800c2f4:	2000d868 	.word	0x2000d868

0800c2f8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	4613      	mov	r3, r2
 800c304:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <tcp_accept_null+0x22>
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <tcp_accept_null+0x34>)
 800c30e:	f240 320f 	movw	r2, #783	; 0x30f
 800c312:	4907      	ldr	r1, [pc, #28]	; (800c330 <tcp_accept_null+0x38>)
 800c314:	4807      	ldr	r0, [pc, #28]	; (800c334 <tcp_accept_null+0x3c>)
 800c316:	f00b f9a7 	bl	8017668 <iprintf>

  tcp_abort(pcb);
 800c31a:	68b8      	ldr	r0, [r7, #8]
 800c31c:	f7ff ff48 	bl	800c1b0 <tcp_abort>

  return ERR_ABRT;
 800c320:	f06f 030c 	mvn.w	r3, #12
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	0801d61c 	.word	0x0801d61c
 800c330:	0801d7f0 	.word	0x0801d7f0
 800c334:	0801d660 	.word	0x0801d660

0800c338 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	2200      	movs	r2, #0
 800c348:	4619      	mov	r1, r3
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f806 	bl	800c35c <tcp_listen_with_backlog_and_err>
 800c350:	4603      	mov	r3, r0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	460b      	mov	r3, r1
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d109      	bne.n	800c388 <tcp_listen_with_backlog_and_err+0x2c>
 800c374:	4b47      	ldr	r3, [pc, #284]	; (800c494 <tcp_listen_with_backlog_and_err+0x138>)
 800c376:	f240 3259 	movw	r2, #857	; 0x359
 800c37a:	4947      	ldr	r1, [pc, #284]	; (800c498 <tcp_listen_with_backlog_and_err+0x13c>)
 800c37c:	4847      	ldr	r0, [pc, #284]	; (800c49c <tcp_listen_with_backlog_and_err+0x140>)
 800c37e:	f00b f973 	bl	8017668 <iprintf>
 800c382:	23f0      	movs	r3, #240	; 0xf0
 800c384:	76fb      	strb	r3, [r7, #27]
 800c386:	e079      	b.n	800c47c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	7d1b      	ldrb	r3, [r3, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <tcp_listen_with_backlog_and_err+0x48>
 800c390:	4b40      	ldr	r3, [pc, #256]	; (800c494 <tcp_listen_with_backlog_and_err+0x138>)
 800c392:	f240 325a 	movw	r2, #858	; 0x35a
 800c396:	4942      	ldr	r1, [pc, #264]	; (800c4a0 <tcp_listen_with_backlog_and_err+0x144>)
 800c398:	4840      	ldr	r0, [pc, #256]	; (800c49c <tcp_listen_with_backlog_and_err+0x140>)
 800c39a:	f00b f965 	bl	8017668 <iprintf>
 800c39e:	23f1      	movs	r3, #241	; 0xf1
 800c3a0:	76fb      	strb	r3, [r7, #27]
 800c3a2:	e06b      	b.n	800c47c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	7d1b      	ldrb	r3, [r3, #20]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d104      	bne.n	800c3b6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c3b0:	23f7      	movs	r3, #247	; 0xf7
 800c3b2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c3b4:	e062      	b.n	800c47c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c3b6:	2002      	movs	r0, #2
 800c3b8:	f7fe faf8 	bl	800a9ac <memp_malloc>
 800c3bc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c3c4:	23ff      	movs	r3, #255	; 0xff
 800c3c6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c3c8:	e058      	b.n	800c47c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	8ada      	ldrh	r2, [r3, #22]
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7d5a      	ldrb	r2, [r3, #21]
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	7a5a      	ldrb	r2, [r3, #9]
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	7ada      	ldrb	r2, [r3, #11]
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	7a9a      	ldrb	r2, [r3, #10]
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	8adb      	ldrh	r3, [r3, #22]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d021      	beq.n	800c45a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c416:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <tcp_listen_with_backlog_and_err+0x148>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d105      	bne.n	800c42c <tcp_listen_with_backlog_and_err+0xd0>
 800c420:	4b20      	ldr	r3, [pc, #128]	; (800c4a4 <tcp_listen_with_backlog_and_err+0x148>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	4a1f      	ldr	r2, [pc, #124]	; (800c4a4 <tcp_listen_with_backlog_and_err+0x148>)
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	e013      	b.n	800c454 <tcp_listen_with_backlog_and_err+0xf8>
 800c42c:	4b1d      	ldr	r3, [pc, #116]	; (800c4a4 <tcp_listen_with_backlog_and_err+0x148>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	e00c      	b.n	800c44e <tcp_listen_with_backlog_and_err+0xf2>
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d104      	bne.n	800c448 <tcp_listen_with_backlog_and_err+0xec>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	60da      	str	r2, [r3, #12]
 800c446:	e005      	b.n	800c454 <tcp_listen_with_backlog_and_err+0xf8>
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	617b      	str	r3, [r7, #20]
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1ef      	bne.n	800c434 <tcp_listen_with_backlog_and_err+0xd8>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fbbc 	bl	800bbd8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	4a11      	ldr	r2, [pc, #68]	; (800c4a8 <tcp_listen_with_backlog_and_err+0x14c>)
 800c464:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c466:	4b11      	ldr	r3, [pc, #68]	; (800c4ac <tcp_listen_with_backlog_and_err+0x150>)
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	60da      	str	r2, [r3, #12]
 800c46e:	4a0f      	ldr	r2, [pc, #60]	; (800c4ac <tcp_listen_with_backlog_and_err+0x150>)
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	f005 fcc2 	bl	8011dfc <tcp_timer_needed>
  res = ERR_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d002      	beq.n	800c488 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	7efa      	ldrb	r2, [r7, #27]
 800c486:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c488:	69fb      	ldr	r3, [r7, #28]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3720      	adds	r7, #32
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0801d61c 	.word	0x0801d61c
 800c498:	0801d810 	.word	0x0801d810
 800c49c:	0801d660 	.word	0x0801d660
 800c4a0:	0801d840 	.word	0x0801d840
 800c4a4:	2000d868 	.word	0x2000d868
 800c4a8:	0800c2f9 	.word	0x0800c2f9
 800c4ac:	2000d864 	.word	0x2000d864

0800c4b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <tcp_update_rcv_ann_wnd+0x1c>
 800c4be:	4b25      	ldr	r3, [pc, #148]	; (800c554 <tcp_update_rcv_ann_wnd+0xa4>)
 800c4c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c4c4:	4924      	ldr	r1, [pc, #144]	; (800c558 <tcp_update_rcv_ann_wnd+0xa8>)
 800c4c6:	4825      	ldr	r0, [pc, #148]	; (800c55c <tcp_update_rcv_ann_wnd+0xac>)
 800c4c8:	f00b f8ce 	bl	8017668 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c4d4:	4413      	add	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c4e0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c4e4:	bf28      	it	cs
 800c4e6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	db08      	blt.n	800c508 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	e020      	b.n	800c54a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	dd03      	ble.n	800c51e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c51c:	e014      	b.n	800c548 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c530:	d306      	bcc.n	800c540 <tcp_update_rcv_ann_wnd+0x90>
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <tcp_update_rcv_ann_wnd+0xa4>)
 800c534:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c538:	4909      	ldr	r1, [pc, #36]	; (800c560 <tcp_update_rcv_ann_wnd+0xb0>)
 800c53a:	4808      	ldr	r0, [pc, #32]	; (800c55c <tcp_update_rcv_ann_wnd+0xac>)
 800c53c:	f00b f894 	bl	8017668 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	b29a      	uxth	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c548:	2300      	movs	r3, #0
  }
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0801d61c 	.word	0x0801d61c
 800c558:	0801d878 	.word	0x0801d878
 800c55c:	0801d660 	.word	0x0801d660
 800c560:	0801d89c 	.word	0x0801d89c

0800c564 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d107      	bne.n	800c586 <tcp_recved+0x22>
 800c576:	4b1f      	ldr	r3, [pc, #124]	; (800c5f4 <tcp_recved+0x90>)
 800c578:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c57c:	491e      	ldr	r1, [pc, #120]	; (800c5f8 <tcp_recved+0x94>)
 800c57e:	481f      	ldr	r0, [pc, #124]	; (800c5fc <tcp_recved+0x98>)
 800c580:	f00b f872 	bl	8017668 <iprintf>
 800c584:	e032      	b.n	800c5ec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7d1b      	ldrb	r3, [r3, #20]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d106      	bne.n	800c59c <tcp_recved+0x38>
 800c58e:	4b19      	ldr	r3, [pc, #100]	; (800c5f4 <tcp_recved+0x90>)
 800c590:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c594:	491a      	ldr	r1, [pc, #104]	; (800c600 <tcp_recved+0x9c>)
 800c596:	4819      	ldr	r0, [pc, #100]	; (800c5fc <tcp_recved+0x98>)
 800c598:	f00b f866 	bl	8017668 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c5a0:	887b      	ldrh	r3, [r7, #2]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c5a6:	89fb      	ldrh	r3, [r7, #14]
 800c5a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c5ac:	d804      	bhi.n	800c5b8 <tcp_recved+0x54>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5b2:	89fa      	ldrh	r2, [r7, #14]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d204      	bcs.n	800c5c2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c5be:	851a      	strh	r2, [r3, #40]	; 0x28
 800c5c0:	e002      	b.n	800c5c8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	89fa      	ldrh	r2, [r7, #14]
 800c5c6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff ff71 	bl	800c4b0 <tcp_update_rcv_ann_wnd>
 800c5ce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c5d6:	d309      	bcc.n	800c5ec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8b5b      	ldrh	r3, [r3, #26]
 800c5dc:	f043 0302 	orr.w	r3, r3, #2
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f004 fc8c 	bl	8010f04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	0801d61c 	.word	0x0801d61c
 800c5f8:	0801d8b8 	.word	0x0801d8b8
 800c5fc:	0801d660 	.word	0x0801d660
 800c600:	0801d8d0 	.word	0x0801d8d0

0800c604 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <tcp_new_port+0x84>)
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	b29a      	uxth	r2, r3
 800c616:	4b1c      	ldr	r3, [pc, #112]	; (800c688 <tcp_new_port+0x84>)
 800c618:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c61a:	4b1b      	ldr	r3, [pc, #108]	; (800c688 <tcp_new_port+0x84>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c622:	4293      	cmp	r3, r2
 800c624:	d103      	bne.n	800c62e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c626:	4b18      	ldr	r3, [pc, #96]	; (800c688 <tcp_new_port+0x84>)
 800c628:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c62c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c62e:	2300      	movs	r3, #0
 800c630:	71fb      	strb	r3, [r7, #7]
 800c632:	e01e      	b.n	800c672 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	4a15      	ldr	r2, [pc, #84]	; (800c68c <tcp_new_port+0x88>)
 800c638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	e011      	b.n	800c666 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	8ada      	ldrh	r2, [r3, #22]
 800c646:	4b10      	ldr	r3, [pc, #64]	; (800c688 <tcp_new_port+0x84>)
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d108      	bne.n	800c660 <tcp_new_port+0x5c>
        n++;
 800c64e:	88bb      	ldrh	r3, [r7, #4]
 800c650:	3301      	adds	r3, #1
 800c652:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c654:	88bb      	ldrh	r3, [r7, #4]
 800c656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c65a:	d3d8      	bcc.n	800c60e <tcp_new_port+0xa>
          return 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	e00d      	b.n	800c67c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	603b      	str	r3, [r7, #0]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1ea      	bne.n	800c642 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	3301      	adds	r3, #1
 800c670:	71fb      	strb	r3, [r7, #7]
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	2b03      	cmp	r3, #3
 800c676:	d9dd      	bls.n	800c634 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c678:	4b03      	ldr	r3, [pc, #12]	; (800c688 <tcp_new_port+0x84>)
 800c67a:	881b      	ldrh	r3, [r3, #0]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	200005be 	.word	0x200005be
 800c68c:	080339e0 	.word	0x080339e0

0800c690 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c690:	b5b0      	push	{r4, r5, r7, lr}
 800c692:	b090      	sub	sp, #64	; 0x40
 800c694:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c69c:	4b94      	ldr	r3, [pc, #592]	; (800c8f0 <tcp_slowtmr+0x260>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	4a93      	ldr	r2, [pc, #588]	; (800c8f0 <tcp_slowtmr+0x260>)
 800c6a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c6a6:	4b93      	ldr	r3, [pc, #588]	; (800c8f4 <tcp_slowtmr+0x264>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	4b91      	ldr	r3, [pc, #580]	; (800c8f4 <tcp_slowtmr+0x264>)
 800c6b0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c6b6:	4b90      	ldr	r3, [pc, #576]	; (800c8f8 <tcp_slowtmr+0x268>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c6bc:	e29f      	b.n	800cbfe <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	7d1b      	ldrb	r3, [r3, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <tcp_slowtmr+0x44>
 800c6c6:	4b8d      	ldr	r3, [pc, #564]	; (800c8fc <tcp_slowtmr+0x26c>)
 800c6c8:	f240 42be 	movw	r2, #1214	; 0x4be
 800c6cc:	498c      	ldr	r1, [pc, #560]	; (800c900 <tcp_slowtmr+0x270>)
 800c6ce:	488d      	ldr	r0, [pc, #564]	; (800c904 <tcp_slowtmr+0x274>)
 800c6d0:	f00a ffca 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	7d1b      	ldrb	r3, [r3, #20]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d106      	bne.n	800c6ea <tcp_slowtmr+0x5a>
 800c6dc:	4b87      	ldr	r3, [pc, #540]	; (800c8fc <tcp_slowtmr+0x26c>)
 800c6de:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c6e2:	4989      	ldr	r1, [pc, #548]	; (800c908 <tcp_slowtmr+0x278>)
 800c6e4:	4887      	ldr	r0, [pc, #540]	; (800c904 <tcp_slowtmr+0x274>)
 800c6e6:	f00a ffbf 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	2b0a      	cmp	r3, #10
 800c6f0:	d106      	bne.n	800c700 <tcp_slowtmr+0x70>
 800c6f2:	4b82      	ldr	r3, [pc, #520]	; (800c8fc <tcp_slowtmr+0x26c>)
 800c6f4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c6f8:	4984      	ldr	r1, [pc, #528]	; (800c90c <tcp_slowtmr+0x27c>)
 800c6fa:	4882      	ldr	r0, [pc, #520]	; (800c904 <tcp_slowtmr+0x274>)
 800c6fc:	f00a ffb4 	bl	8017668 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	7f9a      	ldrb	r2, [r3, #30]
 800c704:	4b7b      	ldr	r3, [pc, #492]	; (800c8f4 <tcp_slowtmr+0x264>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d105      	bne.n	800c718 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c716:	e272      	b.n	800cbfe <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c718:	4b76      	ldr	r3, [pc, #472]	; (800c8f4 <tcp_slowtmr+0x264>)
 800c71a:	781a      	ldrb	r2, [r3, #0]
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	7d1b      	ldrb	r3, [r3, #20]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d10a      	bne.n	800c74a <tcp_slowtmr+0xba>
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d905      	bls.n	800c74a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c742:	3301      	adds	r3, #1
 800c744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c748:	e11e      	b.n	800c988 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c750:	2b0b      	cmp	r3, #11
 800c752:	d905      	bls.n	800c760 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c758:	3301      	adds	r3, #1
 800c75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c75e:	e113      	b.n	800c988 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c762:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c766:	2b00      	cmp	r3, #0
 800c768:	d075      	beq.n	800c856 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d006      	beq.n	800c780 <tcp_slowtmr+0xf0>
 800c772:	4b62      	ldr	r3, [pc, #392]	; (800c8fc <tcp_slowtmr+0x26c>)
 800c774:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c778:	4965      	ldr	r1, [pc, #404]	; (800c910 <tcp_slowtmr+0x280>)
 800c77a:	4862      	ldr	r0, [pc, #392]	; (800c904 <tcp_slowtmr+0x274>)
 800c77c:	f00a ff74 	bl	8017668 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d106      	bne.n	800c796 <tcp_slowtmr+0x106>
 800c788:	4b5c      	ldr	r3, [pc, #368]	; (800c8fc <tcp_slowtmr+0x26c>)
 800c78a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c78e:	4961      	ldr	r1, [pc, #388]	; (800c914 <tcp_slowtmr+0x284>)
 800c790:	485c      	ldr	r0, [pc, #368]	; (800c904 <tcp_slowtmr+0x274>)
 800c792:	f00a ff69 	bl	8017668 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c79c:	2b0b      	cmp	r3, #11
 800c79e:	d905      	bls.n	800c7ac <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7aa:	e0ed      	b.n	800c988 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	4a58      	ldr	r2, [pc, #352]	; (800c918 <tcp_slowtmr+0x288>)
 800c7b6:	5cd3      	ldrb	r3, [r2, r3]
 800c7b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7c0:	7c7a      	ldrb	r2, [r7, #17]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d907      	bls.n	800c7d6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c7dc:	7c7a      	ldrb	r2, [r7, #17]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	f200 80d2 	bhi.w	800c988 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d108      	bne.n	800c804 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7f4:	f005 fa34 	bl	8011c60 <tcp_zero_window_probe>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d014      	beq.n	800c828 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c7fe:	2300      	movs	r3, #0
 800c800:	623b      	str	r3, [r7, #32]
 800c802:	e011      	b.n	800c828 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c80a:	4619      	mov	r1, r3
 800c80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c80e:	f004 f8f3 	bl	80109f8 <tcp_split_unsent_seg>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d107      	bne.n	800c828 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c81a:	f004 fb73 	bl	8010f04 <tcp_output>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 80ac 	beq.w	800c988 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	2200      	movs	r2, #0
 800c834:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c83e:	2b06      	cmp	r3, #6
 800c840:	f200 80a2 	bhi.w	800c988 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c84a:	3301      	adds	r3, #1
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c854:	e098      	b.n	800c988 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	db0f      	blt.n	800c880 <tcp_slowtmr+0x1f0>
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c866:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d008      	beq.n	800c880 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c874:	b29b      	uxth	r3, r3
 800c876:	3301      	adds	r3, #1
 800c878:	b29b      	uxth	r3, r3
 800c87a:	b21a      	sxth	r2, r3
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c88c:	429a      	cmp	r2, r3
 800c88e:	db7b      	blt.n	800c988 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c892:	f004 fe2f 	bl	80114f4 <tcp_rexmit_rto_prepare>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d007      	beq.n	800c8ac <tcp_slowtmr+0x21c>
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d171      	bne.n	800c988 <tcp_slowtmr+0x2f8>
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d06d      	beq.n	800c988 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	7d1b      	ldrb	r3, [r3, #20]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d03a      	beq.n	800c92a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8ba:	2b0c      	cmp	r3, #12
 800c8bc:	bf28      	it	cs
 800c8be:	230c      	movcs	r3, #12
 800c8c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8c8:	10db      	asrs	r3, r3, #3
 800c8ca:	b21b      	sxth	r3, r3
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c8d4:	4413      	add	r3, r2
 800c8d6:	7efa      	ldrb	r2, [r7, #27]
 800c8d8:	4910      	ldr	r1, [pc, #64]	; (800c91c <tcp_slowtmr+0x28c>)
 800c8da:	5c8a      	ldrb	r2, [r1, r2]
 800c8dc:	4093      	lsls	r3, r2
 800c8de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	dc1a      	bgt.n	800c920 <tcp_slowtmr+0x290>
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	b21a      	sxth	r2, r3
 800c8ee:	e019      	b.n	800c924 <tcp_slowtmr+0x294>
 800c8f0:	2000d860 	.word	0x2000d860
 800c8f4:	20001216 	.word	0x20001216
 800c8f8:	2000d85c 	.word	0x2000d85c
 800c8fc:	0801d61c 	.word	0x0801d61c
 800c900:	0801d960 	.word	0x0801d960
 800c904:	0801d660 	.word	0x0801d660
 800c908:	0801d98c 	.word	0x0801d98c
 800c90c:	0801d9b8 	.word	0x0801d9b8
 800c910:	0801d9e8 	.word	0x0801d9e8
 800c914:	0801da1c 	.word	0x0801da1c
 800c918:	080339d8 	.word	0x080339d8
 800c91c:	080339c8 	.word	0x080339c8
 800c920:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	2200      	movs	r2, #0
 800c92e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c932:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c93c:	4293      	cmp	r3, r2
 800c93e:	bf28      	it	cs
 800c940:	4613      	movcs	r3, r2
 800c942:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c944:	8a7b      	ldrh	r3, [r7, #18]
 800c946:	085b      	lsrs	r3, r3, #1
 800c948:	b29a      	uxth	r2, r3
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	429a      	cmp	r2, r3
 800c960:	d206      	bcs.n	800c970 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	b29a      	uxth	r2, r3
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c984:	f004 fe26 	bl	80115d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	2b06      	cmp	r3, #6
 800c98e:	d111      	bne.n	800c9b4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	8b5b      	ldrh	r3, [r3, #26]
 800c994:	f003 0310 	and.w	r3, r3, #16
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c99c:	4b9d      	ldr	r3, [pc, #628]	; (800cc14 <tcp_slowtmr+0x584>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a2:	6a1b      	ldr	r3, [r3, #32]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	2b28      	cmp	r3, #40	; 0x28
 800c9a8:	d904      	bls.n	800c9b4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	7a5b      	ldrb	r3, [r3, #9]
 800c9b8:	f003 0308 	and.w	r3, r3, #8
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d04c      	beq.n	800ca5a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9c4:	2b04      	cmp	r3, #4
 800c9c6:	d003      	beq.n	800c9d0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c9cc:	2b07      	cmp	r3, #7
 800c9ce:	d144      	bne.n	800ca5a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9d0:	4b90      	ldr	r3, [pc, #576]	; (800cc14 <tcp_slowtmr+0x584>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9e0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c9e4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c9e8:	498b      	ldr	r1, [pc, #556]	; (800cc18 <tcp_slowtmr+0x588>)
 800c9ea:	fba1 1303 	umull	r1, r3, r1, r3
 800c9ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d90a      	bls.n	800ca0a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca02:	3301      	adds	r3, #1
 800ca04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca08:	e027      	b.n	800ca5a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca0a:	4b82      	ldr	r3, [pc, #520]	; (800cc14 <tcp_slowtmr+0x584>)
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	6a1b      	ldr	r3, [r3, #32]
 800ca12:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca20:	4618      	mov	r0, r3
 800ca22:	4b7e      	ldr	r3, [pc, #504]	; (800cc1c <tcp_slowtmr+0x58c>)
 800ca24:	fb03 f300 	mul.w	r3, r3, r0
 800ca28:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ca2a:	497b      	ldr	r1, [pc, #492]	; (800cc18 <tcp_slowtmr+0x588>)
 800ca2c:	fba1 1303 	umull	r1, r3, r1, r3
 800ca30:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d911      	bls.n	800ca5a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ca36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca38:	f005 f8d2 	bl	8011be0 <tcp_keepalive>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ca42:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ca50:	3301      	adds	r3, #1
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d011      	beq.n	800ca86 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca62:	4b6c      	ldr	r3, [pc, #432]	; (800cc14 <tcp_slowtmr+0x584>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ca72:	4619      	mov	r1, r3
 800ca74:	460b      	mov	r3, r1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	440b      	add	r3, r1
 800ca7a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d302      	bcc.n	800ca86 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ca80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca82:	f000 fed7 	bl	800d834 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	7d1b      	ldrb	r3, [r3, #20]
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	d10b      	bne.n	800caa6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca8e:	4b61      	ldr	r3, [pc, #388]	; (800cc14 <tcp_slowtmr+0x584>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	2b28      	cmp	r3, #40	; 0x28
 800ca9a:	d904      	bls.n	800caa6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ca9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa0:	3301      	adds	r3, #1
 800caa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	7d1b      	ldrb	r3, [r3, #20]
 800caaa:	2b09      	cmp	r3, #9
 800caac:	d10b      	bne.n	800cac6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800caae:	4b59      	ldr	r3, [pc, #356]	; (800cc14 <tcp_slowtmr+0x584>)
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	2bf0      	cmp	r3, #240	; 0xf0
 800caba:	d904      	bls.n	800cac6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac0:	3301      	adds	r3, #1
 800cac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d060      	beq.n	800cb90 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cad8:	f000 fcea 	bl	800d4b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d010      	beq.n	800cb04 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cae2:	4b4f      	ldr	r3, [pc, #316]	; (800cc20 <tcp_slowtmr+0x590>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cae8:	429a      	cmp	r2, r3
 800caea:	d106      	bne.n	800cafa <tcp_slowtmr+0x46a>
 800caec:	4b4d      	ldr	r3, [pc, #308]	; (800cc24 <tcp_slowtmr+0x594>)
 800caee:	f240 526d 	movw	r2, #1389	; 0x56d
 800caf2:	494d      	ldr	r1, [pc, #308]	; (800cc28 <tcp_slowtmr+0x598>)
 800caf4:	484d      	ldr	r0, [pc, #308]	; (800cc2c <tcp_slowtmr+0x59c>)
 800caf6:	f00a fdb7 	bl	8017668 <iprintf>
        prev->next = pcb->next;
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	68da      	ldr	r2, [r3, #12]
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	e00f      	b.n	800cb24 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cb04:	4b46      	ldr	r3, [pc, #280]	; (800cc20 <tcp_slowtmr+0x590>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d006      	beq.n	800cb1c <tcp_slowtmr+0x48c>
 800cb0e:	4b45      	ldr	r3, [pc, #276]	; (800cc24 <tcp_slowtmr+0x594>)
 800cb10:	f240 5271 	movw	r2, #1393	; 0x571
 800cb14:	4946      	ldr	r1, [pc, #280]	; (800cc30 <tcp_slowtmr+0x5a0>)
 800cb16:	4845      	ldr	r0, [pc, #276]	; (800cc2c <tcp_slowtmr+0x59c>)
 800cb18:	f00a fda6 	bl	8017668 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	4a3f      	ldr	r2, [pc, #252]	; (800cc20 <tcp_slowtmr+0x590>)
 800cb22:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cb24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d013      	beq.n	800cb54 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb32:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb34:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb38:	3304      	adds	r3, #4
 800cb3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb3c:	8ad2      	ldrh	r2, [r2, #22]
 800cb3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb40:	8b09      	ldrh	r1, [r1, #24]
 800cb42:	9102      	str	r1, [sp, #8]
 800cb44:	9201      	str	r2, [sp, #4]
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	462b      	mov	r3, r5
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb50:	f004 ff92 	bl	8011a78 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	7d1b      	ldrb	r3, [r3, #20]
 800cb5e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb6a:	6838      	ldr	r0, [r7, #0]
 800cb6c:	f7ff f834 	bl	800bbd8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cb70:	4b30      	ldr	r3, [pc, #192]	; (800cc34 <tcp_slowtmr+0x5a4>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <tcp_slowtmr+0x4f6>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f06f 010c 	mvn.w	r1, #12
 800cb82:	68b8      	ldr	r0, [r7, #8]
 800cb84:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb86:	4b2b      	ldr	r3, [pc, #172]	; (800cc34 <tcp_slowtmr+0x5a4>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d037      	beq.n	800cbfe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cb8e:	e590      	b.n	800c6b2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	7f1b      	ldrb	r3, [r3, #28]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	7f1a      	ldrb	r2, [r3, #28]
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	7f5b      	ldrb	r3, [r3, #29]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d325      	bcc.n	800cbfe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cbb8:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <tcp_slowtmr+0x5a4>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00b      	beq.n	800cbe0 <tcp_slowtmr+0x550>
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd0:	6912      	ldr	r2, [r2, #16]
 800cbd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	4603      	mov	r3, r0
 800cbda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cbde:	e002      	b.n	800cbe6 <tcp_slowtmr+0x556>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cbe6:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <tcp_slowtmr+0x5a4>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d000      	beq.n	800cbf0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cbee:	e560      	b.n	800c6b2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cbf0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cbf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbfa:	f004 f983 	bl	8010f04 <tcp_output>
  while (pcb != NULL) {
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f47f ad5c 	bne.w	800c6be <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cc0a:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <tcp_slowtmr+0x5a8>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc10:	e067      	b.n	800cce2 <tcp_slowtmr+0x652>
 800cc12:	bf00      	nop
 800cc14:	2000d860 	.word	0x2000d860
 800cc18:	10624dd3 	.word	0x10624dd3
 800cc1c:	000124f8 	.word	0x000124f8
 800cc20:	2000d85c 	.word	0x2000d85c
 800cc24:	0801d61c 	.word	0x0801d61c
 800cc28:	0801da54 	.word	0x0801da54
 800cc2c:	0801d660 	.word	0x0801d660
 800cc30:	0801da80 	.word	0x0801da80
 800cc34:	2000d858 	.word	0x2000d858
 800cc38:	2000d86c 	.word	0x2000d86c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	7d1b      	ldrb	r3, [r3, #20]
 800cc40:	2b0a      	cmp	r3, #10
 800cc42:	d006      	beq.n	800cc52 <tcp_slowtmr+0x5c2>
 800cc44:	4b2b      	ldr	r3, [pc, #172]	; (800ccf4 <tcp_slowtmr+0x664>)
 800cc46:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cc4a:	492b      	ldr	r1, [pc, #172]	; (800ccf8 <tcp_slowtmr+0x668>)
 800cc4c:	482b      	ldr	r0, [pc, #172]	; (800ccfc <tcp_slowtmr+0x66c>)
 800cc4e:	f00a fd0b 	bl	8017668 <iprintf>
    pcb_remove = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc58:	4b29      	ldr	r3, [pc, #164]	; (800cd00 <tcp_slowtmr+0x670>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	6a1b      	ldr	r3, [r3, #32]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2bf0      	cmp	r3, #240	; 0xf0
 800cc64:	d904      	bls.n	800cc70 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cc66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d02f      	beq.n	800ccd8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cc78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc7a:	f000 fc19 	bl	800d4b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d010      	beq.n	800cca6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc84:	4b1f      	ldr	r3, [pc, #124]	; (800cd04 <tcp_slowtmr+0x674>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d106      	bne.n	800cc9c <tcp_slowtmr+0x60c>
 800cc8e:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <tcp_slowtmr+0x664>)
 800cc90:	f240 52af 	movw	r2, #1455	; 0x5af
 800cc94:	491c      	ldr	r1, [pc, #112]	; (800cd08 <tcp_slowtmr+0x678>)
 800cc96:	4819      	ldr	r0, [pc, #100]	; (800ccfc <tcp_slowtmr+0x66c>)
 800cc98:	f00a fce6 	bl	8017668 <iprintf>
        prev->next = pcb->next;
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	68da      	ldr	r2, [r3, #12]
 800cca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca2:	60da      	str	r2, [r3, #12]
 800cca4:	e00f      	b.n	800ccc6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cca6:	4b17      	ldr	r3, [pc, #92]	; (800cd04 <tcp_slowtmr+0x674>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d006      	beq.n	800ccbe <tcp_slowtmr+0x62e>
 800ccb0:	4b10      	ldr	r3, [pc, #64]	; (800ccf4 <tcp_slowtmr+0x664>)
 800ccb2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ccb6:	4915      	ldr	r1, [pc, #84]	; (800cd0c <tcp_slowtmr+0x67c>)
 800ccb8:	4810      	ldr	r0, [pc, #64]	; (800ccfc <tcp_slowtmr+0x66c>)
 800ccba:	f00a fcd5 	bl	8017668 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	4a10      	ldr	r2, [pc, #64]	; (800cd04 <tcp_slowtmr+0x674>)
 800ccc4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ccd0:	69f8      	ldr	r0, [r7, #28]
 800ccd2:	f7fe ff81 	bl	800bbd8 <tcp_free>
 800ccd6:	e004      	b.n	800cce2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1a9      	bne.n	800cc3c <tcp_slowtmr+0x5ac>
    }
  }
}
 800cce8:	bf00      	nop
 800ccea:	bf00      	nop
 800ccec:	3730      	adds	r7, #48	; 0x30
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bdb0      	pop	{r4, r5, r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0801d61c 	.word	0x0801d61c
 800ccf8:	0801daac 	.word	0x0801daac
 800ccfc:	0801d660 	.word	0x0801d660
 800cd00:	2000d860 	.word	0x2000d860
 800cd04:	2000d86c 	.word	0x2000d86c
 800cd08:	0801dadc 	.word	0x0801dadc
 800cd0c:	0801db04 	.word	0x0801db04

0800cd10 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cd16:	4b2d      	ldr	r3, [pc, #180]	; (800cdcc <tcp_fasttmr+0xbc>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	4b2b      	ldr	r3, [pc, #172]	; (800cdcc <tcp_fasttmr+0xbc>)
 800cd20:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cd22:	4b2b      	ldr	r3, [pc, #172]	; (800cdd0 <tcp_fasttmr+0xc0>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd28:	e048      	b.n	800cdbc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	7f9a      	ldrb	r2, [r3, #30]
 800cd2e:	4b27      	ldr	r3, [pc, #156]	; (800cdcc <tcp_fasttmr+0xbc>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d03f      	beq.n	800cdb6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cd36:	4b25      	ldr	r3, [pc, #148]	; (800cdcc <tcp_fasttmr+0xbc>)
 800cd38:	781a      	ldrb	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8b5b      	ldrh	r3, [r3, #26]
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d010      	beq.n	800cd6c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8b5b      	ldrh	r3, [r3, #26]
 800cd4e:	f043 0302 	orr.w	r3, r3, #2
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f004 f8d3 	bl	8010f04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8b5b      	ldrh	r3, [r3, #26]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8b5b      	ldrh	r3, [r3, #26]
 800cd70:	f003 0308 	and.w	r3, r3, #8
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8b5b      	ldrh	r3, [r3, #26]
 800cd7c:	f023 0308 	bic.w	r3, r3, #8
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff f8ba 	bl	800bf00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <tcp_fasttmr+0xc4>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f819 	bl	800cdd8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <tcp_fasttmr+0xc4>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d000      	beq.n	800cdb0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cdae:	e7b8      	b.n	800cd22 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	607b      	str	r3, [r7, #4]
 800cdb4:	e002      	b.n	800cdbc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1b3      	bne.n	800cd2a <tcp_fasttmr+0x1a>
    }
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	bf00      	nop
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	20001216 	.word	0x20001216
 800cdd0:	2000d85c 	.word	0x2000d85c
 800cdd4:	2000d858 	.word	0x2000d858

0800cdd8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cdd8:	b590      	push	{r4, r7, lr}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <tcp_process_refused_data+0x22>
 800cde6:	4b37      	ldr	r3, [pc, #220]	; (800cec4 <tcp_process_refused_data+0xec>)
 800cde8:	f240 6209 	movw	r2, #1545	; 0x609
 800cdec:	4936      	ldr	r1, [pc, #216]	; (800cec8 <tcp_process_refused_data+0xf0>)
 800cdee:	4837      	ldr	r0, [pc, #220]	; (800cecc <tcp_process_refused_data+0xf4>)
 800cdf0:	f00a fc3a 	bl	8017668 <iprintf>
 800cdf4:	f06f 030f 	mvn.w	r3, #15
 800cdf8:	e060      	b.n	800cebc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdfe:	7b5b      	ldrb	r3, [r3, #13]
 800ce00:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce06:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <tcp_process_refused_data+0x58>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6918      	ldr	r0, [r3, #16]
 800ce22:	2300      	movs	r3, #0
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	6879      	ldr	r1, [r7, #4]
 800ce28:	47a0      	blx	r4
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73fb      	strb	r3, [r7, #15]
 800ce2e:	e007      	b.n	800ce40 <tcp_process_refused_data+0x68>
 800ce30:	2300      	movs	r3, #0
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	6879      	ldr	r1, [r7, #4]
 800ce36:	2000      	movs	r0, #0
 800ce38:	f000 f8c4 	bl	800cfc4 <tcp_recv_null>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ce40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d12a      	bne.n	800ce9e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
 800ce4a:	f003 0320 	and.w	r3, r3, #32
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d033      	beq.n	800ceba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce5a:	d005      	beq.n	800ce68 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce60:	3301      	adds	r3, #1
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <tcp_process_refused_data+0xb2>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6918      	ldr	r0, [r3, #16]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	2200      	movs	r2, #0
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	47a0      	blx	r4
 800ce84:	4603      	mov	r3, r0
 800ce86:	73fb      	strb	r3, [r7, #15]
 800ce88:	e001      	b.n	800ce8e <tcp_process_refused_data+0xb6>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce92:	f113 0f0d 	cmn.w	r3, #13
 800ce96:	d110      	bne.n	800ceba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce98:	f06f 030c 	mvn.w	r3, #12
 800ce9c:	e00e      	b.n	800cebc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cea2:	f113 0f0d 	cmn.w	r3, #13
 800cea6:	d102      	bne.n	800ceae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cea8:	f06f 030c 	mvn.w	r3, #12
 800ceac:	e006      	b.n	800cebc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ceb4:	f06f 0304 	mvn.w	r3, #4
 800ceb8:	e000      	b.n	800cebc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd90      	pop	{r4, r7, pc}
 800cec4:	0801d61c 	.word	0x0801d61c
 800cec8:	0801db2c 	.word	0x0801db2c
 800cecc:	0801d660 	.word	0x0801d660

0800ced0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ced8:	e007      	b.n	800ceea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f80a 	bl	800cefa <tcp_seg_free>
    seg = next;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1f4      	bne.n	800ceda <tcp_segs_free+0xa>
  }
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b082      	sub	sp, #8
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00f      	beq.n	800cf28 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d007      	beq.n	800cf20 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fbaf 	bl	800b678 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	2003      	movs	r0, #3
 800cf24:	f7fd fd8e 	bl	800aa44 <memp_free>
  }
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d107      	bne.n	800cf52 <tcp_setprio+0x22>
 800cf42:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <tcp_setprio+0x30>)
 800cf44:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800cf48:	4906      	ldr	r1, [pc, #24]	; (800cf64 <tcp_setprio+0x34>)
 800cf4a:	4807      	ldr	r0, [pc, #28]	; (800cf68 <tcp_setprio+0x38>)
 800cf4c:	f00a fb8c 	bl	8017668 <iprintf>
 800cf50:	e002      	b.n	800cf58 <tcp_setprio+0x28>

  pcb->prio = prio;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	78fa      	ldrb	r2, [r7, #3]
 800cf56:	755a      	strb	r2, [r3, #21]
}
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	0801d61c 	.word	0x0801d61c
 800cf64:	0801db54 	.word	0x0801db54
 800cf68:	0801d660 	.word	0x0801d660

0800cf6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <tcp_seg_copy+0x1c>
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <tcp_seg_copy+0x4c>)
 800cf7c:	f240 6282 	movw	r2, #1666	; 0x682
 800cf80:	490e      	ldr	r1, [pc, #56]	; (800cfbc <tcp_seg_copy+0x50>)
 800cf82:	480f      	ldr	r0, [pc, #60]	; (800cfc0 <tcp_seg_copy+0x54>)
 800cf84:	f00a fb70 	bl	8017668 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cf88:	2003      	movs	r0, #3
 800cf8a:	f7fd fd0f 	bl	800a9ac <memp_malloc>
 800cf8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <tcp_seg_copy+0x2e>
    return NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e00a      	b.n	800cfb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf9a:	2210      	movs	r2, #16
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f009 fec8 	bl	8016d34 <memcpy>
  pbuf_ref(cseg->p);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe fc05 	bl	800b7b8 <pbuf_ref>
  return cseg;
 800cfae:	68fb      	ldr	r3, [r7, #12]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	0801d61c 	.word	0x0801d61c
 800cfbc:	0801db70 	.word	0x0801db70
 800cfc0:	0801d660 	.word	0x0801d660

0800cfc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
 800cfd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d109      	bne.n	800cfec <tcp_recv_null+0x28>
 800cfd8:	4b12      	ldr	r3, [pc, #72]	; (800d024 <tcp_recv_null+0x60>)
 800cfda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cfde:	4912      	ldr	r1, [pc, #72]	; (800d028 <tcp_recv_null+0x64>)
 800cfe0:	4812      	ldr	r0, [pc, #72]	; (800d02c <tcp_recv_null+0x68>)
 800cfe2:	f00a fb41 	bl	8017668 <iprintf>
 800cfe6:	f06f 030f 	mvn.w	r3, #15
 800cfea:	e016      	b.n	800d01a <tcp_recv_null+0x56>

  if (p != NULL) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d009      	beq.n	800d006 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	891b      	ldrh	r3, [r3, #8]
 800cff6:	4619      	mov	r1, r3
 800cff8:	68b8      	ldr	r0, [r7, #8]
 800cffa:	f7ff fab3 	bl	800c564 <tcp_recved>
    pbuf_free(p);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7fe fb3a 	bl	800b678 <pbuf_free>
 800d004:	e008      	b.n	800d018 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d00e:	68b8      	ldr	r0, [r7, #8]
 800d010:	f7fe ffe0 	bl	800bfd4 <tcp_close>
 800d014:	4603      	mov	r3, r0
 800d016:	e000      	b.n	800d01a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	0801d61c 	.word	0x0801d61c
 800d028:	0801db8c 	.word	0x0801db8c
 800d02c:	0801d660 	.word	0x0801d660

0800d030 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d03a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	db01      	blt.n	800d046 <tcp_kill_prio+0x16>
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	e000      	b.n	800d048 <tcp_kill_prio+0x18>
 800d046:	237f      	movs	r3, #127	; 0x7f
 800d048:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d04a:	7afb      	ldrb	r3, [r7, #11]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d034      	beq.n	800d0ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d050:	7afb      	ldrb	r3, [r7, #11]
 800d052:	3b01      	subs	r3, #1
 800d054:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d05a:	2300      	movs	r3, #0
 800d05c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d05e:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <tcp_kill_prio+0x94>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	617b      	str	r3, [r7, #20]
 800d064:	e01f      	b.n	800d0a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	7d5b      	ldrb	r3, [r3, #21]
 800d06a:	7afa      	ldrb	r2, [r7, #11]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d80c      	bhi.n	800d08a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d074:	7afa      	ldrb	r2, [r7, #11]
 800d076:	429a      	cmp	r2, r3
 800d078:	d112      	bne.n	800d0a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d07a:	4b13      	ldr	r3, [pc, #76]	; (800d0c8 <tcp_kill_prio+0x98>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	429a      	cmp	r2, r3
 800d088:	d80a      	bhi.n	800d0a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d08a:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <tcp_kill_prio+0x98>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	7d5b      	ldrb	r3, [r3, #21]
 800d09e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1dc      	bne.n	800d066 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d004      	beq.n	800d0bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d0b2:	6938      	ldr	r0, [r7, #16]
 800d0b4:	f7ff f87c 	bl	800c1b0 <tcp_abort>
 800d0b8:	e000      	b.n	800d0bc <tcp_kill_prio+0x8c>
    return;
 800d0ba:	bf00      	nop
  }
}
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000d85c 	.word	0x2000d85c
 800d0c8:	2000d860 	.word	0x2000d860

0800d0cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d009      	beq.n	800d0f0 <tcp_kill_state+0x24>
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d006      	beq.n	800d0f0 <tcp_kill_state+0x24>
 800d0e2:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <tcp_kill_state+0x80>)
 800d0e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d0e8:	4919      	ldr	r1, [pc, #100]	; (800d150 <tcp_kill_state+0x84>)
 800d0ea:	481a      	ldr	r0, [pc, #104]	; (800d154 <tcp_kill_state+0x88>)
 800d0ec:	f00a fabc 	bl	8017668 <iprintf>

  inactivity = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0f8:	4b17      	ldr	r3, [pc, #92]	; (800d158 <tcp_kill_state+0x8c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	617b      	str	r3, [r7, #20]
 800d0fe:	e017      	b.n	800d130 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	7d1b      	ldrb	r3, [r3, #20]
 800d104:	79fa      	ldrb	r2, [r7, #7]
 800d106:	429a      	cmp	r2, r3
 800d108:	d10f      	bne.n	800d12a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d10a:	4b14      	ldr	r3, [pc, #80]	; (800d15c <tcp_kill_state+0x90>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	429a      	cmp	r2, r3
 800d118:	d807      	bhi.n	800d12a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d11a:	4b10      	ldr	r3, [pc, #64]	; (800d15c <tcp_kill_state+0x90>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	617b      	str	r3, [r7, #20]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e4      	bne.n	800d100 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d13c:	2100      	movs	r1, #0
 800d13e:	6938      	ldr	r0, [r7, #16]
 800d140:	f7fe ff78 	bl	800c034 <tcp_abandon>
  }
}
 800d144:	bf00      	nop
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0801d61c 	.word	0x0801d61c
 800d150:	0801dba8 	.word	0x0801dba8
 800d154:	0801d660 	.word	0x0801d660
 800d158:	2000d85c 	.word	0x2000d85c
 800d15c:	2000d860 	.word	0x2000d860

0800d160 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d16e:	4b12      	ldr	r3, [pc, #72]	; (800d1b8 <tcp_kill_timewait+0x58>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	e012      	b.n	800d19c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d176:	4b11      	ldr	r3, [pc, #68]	; (800d1bc <tcp_kill_timewait+0x5c>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	429a      	cmp	r2, r3
 800d184:	d807      	bhi.n	800d196 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d186:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <tcp_kill_timewait+0x5c>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e9      	bne.n	800d176 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1a8:	68b8      	ldr	r0, [r7, #8]
 800d1aa:	f7ff f801 	bl	800c1b0 <tcp_abort>
  }
}
 800d1ae:	bf00      	nop
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000d86c 	.word	0x2000d86c
 800d1bc:	2000d860 	.word	0x2000d860

0800d1c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d1c6:	4b10      	ldr	r3, [pc, #64]	; (800d208 <tcp_handle_closepend+0x48>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1cc:	e014      	b.n	800d1f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	8b5b      	ldrh	r3, [r3, #26]
 800d1d8:	f003 0308 	and.w	r3, r3, #8
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d009      	beq.n	800d1f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	8b5b      	ldrh	r3, [r3, #26]
 800d1e4:	f023 0308 	bic.w	r3, r3, #8
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7fe fe86 	bl	800bf00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e7      	bne.n	800d1ce <tcp_handle_closepend+0xe>
  }
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	2000d85c 	.word	0x2000d85c

0800d20c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d216:	2001      	movs	r0, #1
 800d218:	f7fd fbc8 	bl	800a9ac <memp_malloc>
 800d21c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d126      	bne.n	800d272 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d224:	f7ff ffcc 	bl	800d1c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d228:	f7ff ff9a 	bl	800d160 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d22c:	2001      	movs	r0, #1
 800d22e:	f7fd fbbd 	bl	800a9ac <memp_malloc>
 800d232:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d11b      	bne.n	800d272 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d23a:	2009      	movs	r0, #9
 800d23c:	f7ff ff46 	bl	800d0cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d240:	2001      	movs	r0, #1
 800d242:	f7fd fbb3 	bl	800a9ac <memp_malloc>
 800d246:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d111      	bne.n	800d272 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d24e:	2008      	movs	r0, #8
 800d250:	f7ff ff3c 	bl	800d0cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d254:	2001      	movs	r0, #1
 800d256:	f7fd fba9 	bl	800a9ac <memp_malloc>
 800d25a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d107      	bne.n	800d272 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff fee3 	bl	800d030 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d26a:	2001      	movs	r0, #1
 800d26c:	f7fd fb9e 	bl	800a9ac <memp_malloc>
 800d270:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d03f      	beq.n	800d2f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d278:	229c      	movs	r2, #156	; 0x9c
 800d27a:	2100      	movs	r1, #0
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f009 fd81 	bl	8016d84 <memset>
    pcb->prio = prio;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	79fa      	ldrb	r2, [r7, #7]
 800d286:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d28e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	22ff      	movs	r2, #255	; 0xff
 800d2a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d2ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2206      	movs	r2, #6
 800d2b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2206      	movs	r2, #6
 800d2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <tcp_alloc+0xf8>)
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	; (800d308 <tcp_alloc+0xfc>)
 800d2d8:	781a      	ldrb	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	4a08      	ldr	r2, [pc, #32]	; (800d30c <tcp_alloc+0x100>)
 800d2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	4a07      	ldr	r2, [pc, #28]	; (800d310 <tcp_alloc+0x104>)
 800d2f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	2000d860 	.word	0x2000d860
 800d308:	20001216 	.word	0x20001216
 800d30c:	0800cfc5 	.word	0x0800cfc5
 800d310:	006ddd00 	.word	0x006ddd00

0800d314 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	4603      	mov	r3, r0
 800d31c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d31e:	2040      	movs	r0, #64	; 0x40
 800d320:	f7ff ff74 	bl	800d20c <tcp_alloc>
 800d324:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d326:	68fb      	ldr	r3, [r7, #12]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d002      	beq.n	800d346 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	611a      	str	r2, [r3, #16]
  }
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
	...

0800d354 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00e      	beq.n	800d382 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	7d1b      	ldrb	r3, [r3, #20]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d106      	bne.n	800d37a <tcp_recv+0x26>
 800d36c:	4b07      	ldr	r3, [pc, #28]	; (800d38c <tcp_recv+0x38>)
 800d36e:	f240 72df 	movw	r2, #2015	; 0x7df
 800d372:	4907      	ldr	r1, [pc, #28]	; (800d390 <tcp_recv+0x3c>)
 800d374:	4807      	ldr	r0, [pc, #28]	; (800d394 <tcp_recv+0x40>)
 800d376:	f00a f977 	bl	8017668 <iprintf>
    pcb->recv = recv;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d382:	bf00      	nop
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	0801d61c 	.word	0x0801d61c
 800d390:	0801dbb8 	.word	0x0801dbb8
 800d394:	0801d660 	.word	0x0801d660

0800d398 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00e      	beq.n	800d3c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7d1b      	ldrb	r3, [r3, #20]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d106      	bne.n	800d3be <tcp_sent+0x26>
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <tcp_sent+0x38>)
 800d3b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d3b6:	4907      	ldr	r1, [pc, #28]	; (800d3d4 <tcp_sent+0x3c>)
 800d3b8:	4807      	ldr	r0, [pc, #28]	; (800d3d8 <tcp_sent+0x40>)
 800d3ba:	f00a f955 	bl	8017668 <iprintf>
    pcb->sent = sent;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	0801d61c 	.word	0x0801d61c
 800d3d4:	0801dbe0 	.word	0x0801dbe0
 800d3d8:	0801d660 	.word	0x0801d660

0800d3dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00e      	beq.n	800d40a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7d1b      	ldrb	r3, [r3, #20]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d106      	bne.n	800d402 <tcp_err+0x26>
 800d3f4:	4b07      	ldr	r3, [pc, #28]	; (800d414 <tcp_err+0x38>)
 800d3f6:	f640 020d 	movw	r2, #2061	; 0x80d
 800d3fa:	4907      	ldr	r1, [pc, #28]	; (800d418 <tcp_err+0x3c>)
 800d3fc:	4807      	ldr	r0, [pc, #28]	; (800d41c <tcp_err+0x40>)
 800d3fe:	f00a f933 	bl	8017668 <iprintf>
    pcb->errf = err;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d40a:	bf00      	nop
 800d40c:	3708      	adds	r7, #8
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	0801d61c 	.word	0x0801d61c
 800d418:	0801dc08 	.word	0x0801dc08
 800d41c:	0801d660 	.word	0x0801d660

0800d420 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d008      	beq.n	800d442 <tcp_accept+0x22>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d104      	bne.n	800d442 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	619a      	str	r2, [r3, #24]
  }
}
 800d442:	bf00      	nop
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
	...

0800d450 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	4613      	mov	r3, r2
 800d45c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <tcp_poll+0x24>
 800d464:	4b0e      	ldr	r3, [pc, #56]	; (800d4a0 <tcp_poll+0x50>)
 800d466:	f640 023d 	movw	r2, #2109	; 0x83d
 800d46a:	490e      	ldr	r1, [pc, #56]	; (800d4a4 <tcp_poll+0x54>)
 800d46c:	480e      	ldr	r0, [pc, #56]	; (800d4a8 <tcp_poll+0x58>)
 800d46e:	f00a f8fb 	bl	8017668 <iprintf>
 800d472:	e011      	b.n	800d498 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	7d1b      	ldrb	r3, [r3, #20]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d106      	bne.n	800d48a <tcp_poll+0x3a>
 800d47c:	4b08      	ldr	r3, [pc, #32]	; (800d4a0 <tcp_poll+0x50>)
 800d47e:	f640 023e 	movw	r2, #2110	; 0x83e
 800d482:	490a      	ldr	r1, [pc, #40]	; (800d4ac <tcp_poll+0x5c>)
 800d484:	4808      	ldr	r0, [pc, #32]	; (800d4a8 <tcp_poll+0x58>)
 800d486:	f00a f8ef 	bl	8017668 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	79fa      	ldrb	r2, [r7, #7]
 800d496:	775a      	strb	r2, [r3, #29]
}
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	0801d61c 	.word	0x0801d61c
 800d4a4:	0801dc30 	.word	0x0801dc30
 800d4a8:	0801d660 	.word	0x0801d660
 800d4ac:	0801dc48 	.word	0x0801dc48

0800d4b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d107      	bne.n	800d4ce <tcp_pcb_purge+0x1e>
 800d4be:	4b21      	ldr	r3, [pc, #132]	; (800d544 <tcp_pcb_purge+0x94>)
 800d4c0:	f640 0251 	movw	r2, #2129	; 0x851
 800d4c4:	4920      	ldr	r1, [pc, #128]	; (800d548 <tcp_pcb_purge+0x98>)
 800d4c6:	4821      	ldr	r0, [pc, #132]	; (800d54c <tcp_pcb_purge+0x9c>)
 800d4c8:	f00a f8ce 	bl	8017668 <iprintf>
 800d4cc:	e037      	b.n	800d53e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	7d1b      	ldrb	r3, [r3, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d033      	beq.n	800d53e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d4da:	2b0a      	cmp	r3, #10
 800d4dc:	d02f      	beq.n	800d53e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d02b      	beq.n	800d53e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d007      	beq.n	800d4fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f8c0 	bl	800b678 <pbuf_free>
      pcb->refused_data = NULL;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d502:	2b00      	cmp	r3, #0
 800d504:	d002      	beq.n	800d50c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f994 	bl	800d834 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d512:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fcd9 	bl	800ced0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff fcd4 	bl	800ced0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	0801d61c 	.word	0x0801d61c
 800d548:	0801dc68 	.word	0x0801dc68
 800d54c:	0801d660 	.word	0x0801d660

0800d550 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <tcp_pcb_remove+0x1e>
 800d560:	4b44      	ldr	r3, [pc, #272]	; (800d674 <tcp_pcb_remove+0x124>)
 800d562:	f640 0283 	movw	r2, #2179	; 0x883
 800d566:	4944      	ldr	r1, [pc, #272]	; (800d678 <tcp_pcb_remove+0x128>)
 800d568:	4844      	ldr	r0, [pc, #272]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d56a:	f00a f87d 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d106      	bne.n	800d582 <tcp_pcb_remove+0x32>
 800d574:	4b3f      	ldr	r3, [pc, #252]	; (800d674 <tcp_pcb_remove+0x124>)
 800d576:	f640 0284 	movw	r2, #2180	; 0x884
 800d57a:	4941      	ldr	r1, [pc, #260]	; (800d680 <tcp_pcb_remove+0x130>)
 800d57c:	483f      	ldr	r0, [pc, #252]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d57e:	f00a f873 	bl	8017668 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d105      	bne.n	800d598 <tcp_pcb_remove+0x48>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	e013      	b.n	800d5c0 <tcp_pcb_remove+0x70>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	e00c      	b.n	800d5ba <tcp_pcb_remove+0x6a>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d104      	bne.n	800d5b4 <tcp_pcb_remove+0x64>
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	60da      	str	r2, [r3, #12]
 800d5b2:	e005      	b.n	800d5c0 <tcp_pcb_remove+0x70>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1ef      	bne.n	800d5a0 <tcp_pcb_remove+0x50>
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d5c6:	6838      	ldr	r0, [r7, #0]
 800d5c8:	f7ff ff72 	bl	800d4b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	7d1b      	ldrb	r3, [r3, #20]
 800d5d0:	2b0a      	cmp	r3, #10
 800d5d2:	d013      	beq.n	800d5fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d00f      	beq.n	800d5fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	8b5b      	ldrh	r3, [r3, #26]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d009      	beq.n	800d5fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	8b5b      	ldrh	r3, [r3, #26]
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d5f6:	6838      	ldr	r0, [r7, #0]
 800d5f8:	f003 fc84 	bl	8010f04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	7d1b      	ldrb	r3, [r3, #20]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d020      	beq.n	800d646 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <tcp_pcb_remove+0xca>
 800d60c:	4b19      	ldr	r3, [pc, #100]	; (800d674 <tcp_pcb_remove+0x124>)
 800d60e:	f640 0293 	movw	r2, #2195	; 0x893
 800d612:	491c      	ldr	r1, [pc, #112]	; (800d684 <tcp_pcb_remove+0x134>)
 800d614:	4819      	ldr	r0, [pc, #100]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d616:	f00a f827 	bl	8017668 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d006      	beq.n	800d630 <tcp_pcb_remove+0xe0>
 800d622:	4b14      	ldr	r3, [pc, #80]	; (800d674 <tcp_pcb_remove+0x124>)
 800d624:	f640 0294 	movw	r2, #2196	; 0x894
 800d628:	4917      	ldr	r1, [pc, #92]	; (800d688 <tcp_pcb_remove+0x138>)
 800d62a:	4814      	ldr	r0, [pc, #80]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d62c:	f00a f81c 	bl	8017668 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d634:	2b00      	cmp	r3, #0
 800d636:	d006      	beq.n	800d646 <tcp_pcb_remove+0xf6>
 800d638:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <tcp_pcb_remove+0x124>)
 800d63a:	f640 0296 	movw	r2, #2198	; 0x896
 800d63e:	4913      	ldr	r1, [pc, #76]	; (800d68c <tcp_pcb_remove+0x13c>)
 800d640:	480e      	ldr	r0, [pc, #56]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d642:	f00a f811 	bl	8017668 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2200      	movs	r2, #0
 800d64a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2200      	movs	r2, #0
 800d650:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800d652:	f000 f92f 	bl	800d8b4 <tcp_pcbs_sane>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <tcp_pcb_remove+0x11a>
 800d65c:	4b05      	ldr	r3, [pc, #20]	; (800d674 <tcp_pcb_remove+0x124>)
 800d65e:	f640 029e 	movw	r2, #2206	; 0x89e
 800d662:	490b      	ldr	r1, [pc, #44]	; (800d690 <tcp_pcb_remove+0x140>)
 800d664:	4805      	ldr	r0, [pc, #20]	; (800d67c <tcp_pcb_remove+0x12c>)
 800d666:	f009 ffff 	bl	8017668 <iprintf>
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0801d61c 	.word	0x0801d61c
 800d678:	0801dc84 	.word	0x0801dc84
 800d67c:	0801d660 	.word	0x0801d660
 800d680:	0801dca0 	.word	0x0801dca0
 800d684:	0801dcc0 	.word	0x0801dcc0
 800d688:	0801dcd8 	.word	0x0801dcd8
 800d68c:	0801dcf4 	.word	0x0801dcf4
 800d690:	0801dd0c 	.word	0x0801dd0c

0800d694 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d106      	bne.n	800d6b0 <tcp_next_iss+0x1c>
 800d6a2:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <tcp_next_iss+0x38>)
 800d6a4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d6a8:	4909      	ldr	r1, [pc, #36]	; (800d6d0 <tcp_next_iss+0x3c>)
 800d6aa:	480a      	ldr	r0, [pc, #40]	; (800d6d4 <tcp_next_iss+0x40>)
 800d6ac:	f009 ffdc 	bl	8017668 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <tcp_next_iss+0x44>)
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	4b09      	ldr	r3, [pc, #36]	; (800d6dc <tcp_next_iss+0x48>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	4a07      	ldr	r2, [pc, #28]	; (800d6d8 <tcp_next_iss+0x44>)
 800d6bc:	6013      	str	r3, [r2, #0]
  return iss;
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <tcp_next_iss+0x44>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	0801d61c 	.word	0x0801d61c
 800d6d0:	0801dd2c 	.word	0x0801dd2c
 800d6d4:	0801d660 	.word	0x0801d660
 800d6d8:	200005c0 	.word	0x200005c0
 800d6dc:	2000d860 	.word	0x2000d860

0800d6e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <tcp_eff_send_mss_netif+0x22>
 800d6f4:	4b14      	ldr	r3, [pc, #80]	; (800d748 <tcp_eff_send_mss_netif+0x68>)
 800d6f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d6fa:	4914      	ldr	r1, [pc, #80]	; (800d74c <tcp_eff_send_mss_netif+0x6c>)
 800d6fc:	4814      	ldr	r0, [pc, #80]	; (800d750 <tcp_eff_send_mss_netif+0x70>)
 800d6fe:	f009 ffb3 	bl	8017668 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d708:	89fb      	ldrh	r3, [r7, #14]
 800d70a:	e019      	b.n	800d740 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d710:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d712:	8afb      	ldrh	r3, [r7, #22]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d012      	beq.n	800d73e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d718:	2328      	movs	r3, #40	; 0x28
 800d71a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d71c:	8afa      	ldrh	r2, [r7, #22]
 800d71e:	8abb      	ldrh	r3, [r7, #20]
 800d720:	429a      	cmp	r2, r3
 800d722:	d904      	bls.n	800d72e <tcp_eff_send_mss_netif+0x4e>
 800d724:	8afa      	ldrh	r2, [r7, #22]
 800d726:	8abb      	ldrh	r3, [r7, #20]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	e000      	b.n	800d730 <tcp_eff_send_mss_netif+0x50>
 800d72e:	2300      	movs	r3, #0
 800d730:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d732:	8a7a      	ldrh	r2, [r7, #18]
 800d734:	89fb      	ldrh	r3, [r7, #14]
 800d736:	4293      	cmp	r3, r2
 800d738:	bf28      	it	cs
 800d73a:	4613      	movcs	r3, r2
 800d73c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d73e:	89fb      	ldrh	r3, [r7, #14]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	0801d61c 	.word	0x0801d61c
 800d74c:	0801dd48 	.word	0x0801dd48
 800d750:	0801d660 	.word	0x0801d660

0800d754 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d119      	bne.n	800d79c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d768:	4b10      	ldr	r3, [pc, #64]	; (800d7ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d76a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d76e:	4910      	ldr	r1, [pc, #64]	; (800d7b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d770:	4810      	ldr	r0, [pc, #64]	; (800d7b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d772:	f009 ff79 	bl	8017668 <iprintf>

  while (pcb != NULL) {
 800d776:	e011      	b.n	800d79c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	429a      	cmp	r2, r3
 800d782:	d108      	bne.n	800d796 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f7fe fd10 	bl	800c1b0 <tcp_abort>
      pcb = next;
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e002      	b.n	800d79c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1ea      	bne.n	800d778 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	0801d61c 	.word	0x0801d61c
 800d7b0:	0801dd70 	.word	0x0801dd70
 800d7b4:	0801d660 	.word	0x0801d660

0800d7b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d02a      	beq.n	800d81e <tcp_netif_ip_addr_changed+0x66>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d026      	beq.n	800d81e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d7d0:	4b15      	ldr	r3, [pc, #84]	; (800d828 <tcp_netif_ip_addr_changed+0x70>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff ffbc 	bl	800d754 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d7dc:	4b13      	ldr	r3, [pc, #76]	; (800d82c <tcp_netif_ip_addr_changed+0x74>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff ffb6 	bl	800d754 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d017      	beq.n	800d81e <tcp_netif_ip_addr_changed+0x66>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d013      	beq.n	800d81e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d7f6:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <tcp_netif_ip_addr_changed+0x78>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	e00c      	b.n	800d818 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	429a      	cmp	r2, r3
 800d808:	d103      	bne.n	800d812 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1ef      	bne.n	800d7fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d81e:	bf00      	nop
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	2000d85c 	.word	0x2000d85c
 800d82c:	2000d868 	.word	0x2000d868
 800d830:	2000d864 	.word	0x2000d864

0800d834 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d848:	4618      	mov	r0, r3
 800d84a:	f7ff fb41 	bl	800ced0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d854:	bf00      	nop
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	899b      	ldrh	r3, [r3, #12]
 800d868:	b29b      	uxth	r3, r3
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fc fb6a 	bl	8009f44 <lwip_htons>
 800d870:	4603      	mov	r3, r0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f80f 	bl	800d89e <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
}
 800d892:	bf00      	nop
 800d894:	370c      	adds	r7, #12
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr

0800d89e <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 800d89e:	b480      	push	{r7}
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	71fb      	strb	r3, [r7, #7]
  }
  if (flags & TCP_CWR) {
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ba:	4b22      	ldr	r3, [pc, #136]	; (800d944 <tcp_pcbs_sane+0x90>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	e023      	b.n	800d90a <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d106      	bne.n	800d8d8 <tcp_pcbs_sane+0x24>
 800d8ca:	4b1f      	ldr	r3, [pc, #124]	; (800d948 <tcp_pcbs_sane+0x94>)
 800d8cc:	f640 12d9 	movw	r2, #2521	; 0x9d9
 800d8d0:	491e      	ldr	r1, [pc, #120]	; (800d94c <tcp_pcbs_sane+0x98>)
 800d8d2:	481f      	ldr	r0, [pc, #124]	; (800d950 <tcp_pcbs_sane+0x9c>)
 800d8d4:	f009 fec8 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7d1b      	ldrb	r3, [r3, #20]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d106      	bne.n	800d8ee <tcp_pcbs_sane+0x3a>
 800d8e0:	4b19      	ldr	r3, [pc, #100]	; (800d948 <tcp_pcbs_sane+0x94>)
 800d8e2:	f640 12da 	movw	r2, #2522	; 0x9da
 800d8e6:	491b      	ldr	r1, [pc, #108]	; (800d954 <tcp_pcbs_sane+0xa0>)
 800d8e8:	4819      	ldr	r0, [pc, #100]	; (800d950 <tcp_pcbs_sane+0x9c>)
 800d8ea:	f009 febd 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	7d1b      	ldrb	r3, [r3, #20]
 800d8f2:	2b0a      	cmp	r3, #10
 800d8f4:	d106      	bne.n	800d904 <tcp_pcbs_sane+0x50>
 800d8f6:	4b14      	ldr	r3, [pc, #80]	; (800d948 <tcp_pcbs_sane+0x94>)
 800d8f8:	f640 12db 	movw	r2, #2523	; 0x9db
 800d8fc:	4916      	ldr	r1, [pc, #88]	; (800d958 <tcp_pcbs_sane+0xa4>)
 800d8fe:	4814      	ldr	r0, [pc, #80]	; (800d950 <tcp_pcbs_sane+0x9c>)
 800d900:	f009 feb2 	bl	8017668 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	607b      	str	r3, [r7, #4]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1d8      	bne.n	800d8c2 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d910:	4b12      	ldr	r3, [pc, #72]	; (800d95c <tcp_pcbs_sane+0xa8>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	607b      	str	r3, [r7, #4]
 800d916:	e00d      	b.n	800d934 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7d1b      	ldrb	r3, [r3, #20]
 800d91c:	2b0a      	cmp	r3, #10
 800d91e:	d006      	beq.n	800d92e <tcp_pcbs_sane+0x7a>
 800d920:	4b09      	ldr	r3, [pc, #36]	; (800d948 <tcp_pcbs_sane+0x94>)
 800d922:	f640 12de 	movw	r2, #2526	; 0x9de
 800d926:	490e      	ldr	r1, [pc, #56]	; (800d960 <tcp_pcbs_sane+0xac>)
 800d928:	4809      	ldr	r0, [pc, #36]	; (800d950 <tcp_pcbs_sane+0x9c>)
 800d92a:	f009 fe9d 	bl	8017668 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	607b      	str	r3, [r7, #4]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1ee      	bne.n	800d918 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800d93a:	2301      	movs	r3, #1
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	2000d85c 	.word	0x2000d85c
 800d948:	0801d61c 	.word	0x0801d61c
 800d94c:	0801dda4 	.word	0x0801dda4
 800d950:	0801d660 	.word	0x0801d660
 800d954:	0801ddd0 	.word	0x0801ddd0
 800d958:	0801ddfc 	.word	0x0801ddfc
 800d95c:	2000d86c 	.word	0x2000d86c
 800d960:	0801de2c 	.word	0x0801de2c

0800d964 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b08d      	sub	sp, #52	; 0x34
 800d968:	af04      	add	r7, sp, #16
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d105      	bne.n	800d980 <tcp_input+0x1c>
 800d974:	4b9d      	ldr	r3, [pc, #628]	; (800dbec <tcp_input+0x288>)
 800d976:	2283      	movs	r2, #131	; 0x83
 800d978:	499d      	ldr	r1, [pc, #628]	; (800dbf0 <tcp_input+0x28c>)
 800d97a:	489e      	ldr	r0, [pc, #632]	; (800dbf4 <tcp_input+0x290>)
 800d97c:	f009 fe74 	bl	8017668 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	4a9c      	ldr	r2, [pc, #624]	; (800dbf8 <tcp_input+0x294>)
 800d986:	6013      	str	r3, [r2, #0]

#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
 800d988:	4b9b      	ldr	r3, [pc, #620]	; (800dbf8 <tcp_input+0x294>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff ff65 	bl	800d85c <tcp_debug_print>
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	895b      	ldrh	r3, [r3, #10]
 800d996:	2b13      	cmp	r3, #19
 800d998:	f240 83f4 	bls.w	800e184 <tcp_input+0x820>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d99c:	4b97      	ldr	r3, [pc, #604]	; (800dbfc <tcp_input+0x298>)
 800d99e:	695b      	ldr	r3, [r3, #20]
 800d9a0:	4a96      	ldr	r2, [pc, #600]	; (800dbfc <tcp_input+0x298>)
 800d9a2:	6812      	ldr	r2, [r2, #0]
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f008 fa3b 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 83ea 	bne.w	800e188 <tcp_input+0x824>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d9b4:	4b91      	ldr	r3, [pc, #580]	; (800dbfc <tcp_input+0x298>)
 800d9b6:	695b      	ldr	r3, [r3, #20]
 800d9b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d9bc:	2be0      	cmp	r3, #224	; 0xe0
 800d9be:	f000 83e3 	beq.w	800e188 <tcp_input+0x824>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d9c2:	4b8d      	ldr	r3, [pc, #564]	; (800dbf8 <tcp_input+0x294>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	899b      	ldrh	r3, [r3, #12]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fc faba 	bl	8009f44 <lwip_htons>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	0b1b      	lsrs	r3, r3, #12
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d9dc:	7cbb      	ldrb	r3, [r7, #18]
 800d9de:	2b13      	cmp	r3, #19
 800d9e0:	f240 83d4 	bls.w	800e18c <tcp_input+0x828>
 800d9e4:	7cbb      	ldrb	r3, [r7, #18]
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	891b      	ldrh	r3, [r3, #8]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	f200 83cd 	bhi.w	800e18c <tcp_input+0x828>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d9f2:	7cbb      	ldrb	r3, [r7, #18]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	3b14      	subs	r3, #20
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	4b81      	ldr	r3, [pc, #516]	; (800dc00 <tcp_input+0x29c>)
 800d9fc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d9fe:	4b81      	ldr	r3, [pc, #516]	; (800dc04 <tcp_input+0x2a0>)
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	895a      	ldrh	r2, [r3, #10]
 800da08:	7cbb      	ldrb	r3, [r7, #18]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d309      	bcc.n	800da24 <tcp_input+0xc0>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800da10:	4b7b      	ldr	r3, [pc, #492]	; (800dc00 <tcp_input+0x29c>)
 800da12:	881a      	ldrh	r2, [r3, #0]
 800da14:	4b7c      	ldr	r3, [pc, #496]	; (800dc08 <tcp_input+0x2a4>)
 800da16:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800da18:	7cbb      	ldrb	r3, [r7, #18]
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7fd fda5 	bl	800b56c <pbuf_remove_header>
 800da22:	e04e      	b.n	800dac2 <tcp_input+0x15e>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d105      	bne.n	800da38 <tcp_input+0xd4>
 800da2c:	4b6f      	ldr	r3, [pc, #444]	; (800dbec <tcp_input+0x288>)
 800da2e:	22c2      	movs	r2, #194	; 0xc2
 800da30:	4976      	ldr	r1, [pc, #472]	; (800dc0c <tcp_input+0x2a8>)
 800da32:	4870      	ldr	r0, [pc, #448]	; (800dbf4 <tcp_input+0x290>)
 800da34:	f009 fe18 	bl	8017668 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800da38:	2114      	movs	r1, #20
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7fd fd96 	bl	800b56c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	895a      	ldrh	r2, [r3, #10]
 800da44:	4b70      	ldr	r3, [pc, #448]	; (800dc08 <tcp_input+0x2a4>)
 800da46:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800da48:	4b6d      	ldr	r3, [pc, #436]	; (800dc00 <tcp_input+0x29c>)
 800da4a:	881a      	ldrh	r2, [r3, #0]
 800da4c:	4b6e      	ldr	r3, [pc, #440]	; (800dc08 <tcp_input+0x2a4>)
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800da54:	4b6c      	ldr	r3, [pc, #432]	; (800dc08 <tcp_input+0x2a4>)
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7fd fd86 	bl	800b56c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	895b      	ldrh	r3, [r3, #10]
 800da66:	8a3a      	ldrh	r2, [r7, #16]
 800da68:	429a      	cmp	r2, r3
 800da6a:	f200 8391 	bhi.w	800e190 <tcp_input+0x82c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	4a63      	ldr	r2, [pc, #396]	; (800dc04 <tcp_input+0x2a0>)
 800da76:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	8a3a      	ldrh	r2, [r7, #16]
 800da7e:	4611      	mov	r1, r2
 800da80:	4618      	mov	r0, r3
 800da82:	f7fd fd73 	bl	800b56c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	891a      	ldrh	r2, [r3, #8]
 800da8a:	8a3b      	ldrh	r3, [r7, #16]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	895b      	ldrh	r3, [r3, #10]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <tcp_input+0x144>
 800da9c:	4b53      	ldr	r3, [pc, #332]	; (800dbec <tcp_input+0x288>)
 800da9e:	22df      	movs	r2, #223	; 0xdf
 800daa0:	495b      	ldr	r1, [pc, #364]	; (800dc10 <tcp_input+0x2ac>)
 800daa2:	4854      	ldr	r0, [pc, #336]	; (800dbf4 <tcp_input+0x290>)
 800daa4:	f009 fde0 	bl	8017668 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	891a      	ldrh	r2, [r3, #8]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	891b      	ldrh	r3, [r3, #8]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d005      	beq.n	800dac2 <tcp_input+0x15e>
 800dab6:	4b4d      	ldr	r3, [pc, #308]	; (800dbec <tcp_input+0x288>)
 800dab8:	22e0      	movs	r2, #224	; 0xe0
 800daba:	4956      	ldr	r1, [pc, #344]	; (800dc14 <tcp_input+0x2b0>)
 800dabc:	484d      	ldr	r0, [pc, #308]	; (800dbf4 <tcp_input+0x290>)
 800dabe:	f009 fdd3 	bl	8017668 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dac2:	4b4d      	ldr	r3, [pc, #308]	; (800dbf8 <tcp_input+0x294>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	4a4b      	ldr	r2, [pc, #300]	; (800dbf8 <tcp_input+0x294>)
 800dacc:	6814      	ldr	r4, [r2, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fc fa38 	bl	8009f44 <lwip_htons>
 800dad4:	4603      	mov	r3, r0
 800dad6:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dad8:	4b47      	ldr	r3, [pc, #284]	; (800dbf8 <tcp_input+0x294>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	885b      	ldrh	r3, [r3, #2]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	4a45      	ldr	r2, [pc, #276]	; (800dbf8 <tcp_input+0x294>)
 800dae2:	6814      	ldr	r4, [r2, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fc fa2d 	bl	8009f44 <lwip_htons>
 800daea:	4603      	mov	r3, r0
 800daec:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800daee:	4b42      	ldr	r3, [pc, #264]	; (800dbf8 <tcp_input+0x294>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4a40      	ldr	r2, [pc, #256]	; (800dbf8 <tcp_input+0x294>)
 800daf6:	6814      	ldr	r4, [r2, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fc fa38 	bl	8009f6e <lwip_htonl>
 800dafe:	4603      	mov	r3, r0
 800db00:	6063      	str	r3, [r4, #4]
 800db02:	6863      	ldr	r3, [r4, #4]
 800db04:	4a44      	ldr	r2, [pc, #272]	; (800dc18 <tcp_input+0x2b4>)
 800db06:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800db08:	4b3b      	ldr	r3, [pc, #236]	; (800dbf8 <tcp_input+0x294>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	4a3a      	ldr	r2, [pc, #232]	; (800dbf8 <tcp_input+0x294>)
 800db10:	6814      	ldr	r4, [r2, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	f7fc fa2b 	bl	8009f6e <lwip_htonl>
 800db18:	4603      	mov	r3, r0
 800db1a:	60a3      	str	r3, [r4, #8]
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	4a3f      	ldr	r2, [pc, #252]	; (800dc1c <tcp_input+0x2b8>)
 800db20:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800db22:	4b35      	ldr	r3, [pc, #212]	; (800dbf8 <tcp_input+0x294>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	89db      	ldrh	r3, [r3, #14]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4a33      	ldr	r2, [pc, #204]	; (800dbf8 <tcp_input+0x294>)
 800db2c:	6814      	ldr	r4, [r2, #0]
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fc fa08 	bl	8009f44 <lwip_htons>
 800db34:	4603      	mov	r3, r0
 800db36:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800db38:	4b2f      	ldr	r3, [pc, #188]	; (800dbf8 <tcp_input+0x294>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	899b      	ldrh	r3, [r3, #12]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	4618      	mov	r0, r3
 800db42:	f7fc f9ff 	bl	8009f44 <lwip_htons>
 800db46:	4603      	mov	r3, r0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	4b33      	ldr	r3, [pc, #204]	; (800dc20 <tcp_input+0x2bc>)
 800db52:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	891a      	ldrh	r2, [r3, #8]
 800db58:	4b32      	ldr	r3, [pc, #200]	; (800dc24 <tcp_input+0x2c0>)
 800db5a:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800db5c:	4b30      	ldr	r3, [pc, #192]	; (800dc20 <tcp_input+0x2bc>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f003 0303 	and.w	r3, r3, #3
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00c      	beq.n	800db82 <tcp_input+0x21e>
    tcplen++;
 800db68:	4b2e      	ldr	r3, [pc, #184]	; (800dc24 <tcp_input+0x2c0>)
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	3301      	adds	r3, #1
 800db6e:	b29a      	uxth	r2, r3
 800db70:	4b2c      	ldr	r3, [pc, #176]	; (800dc24 <tcp_input+0x2c0>)
 800db72:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	891a      	ldrh	r2, [r3, #8]
 800db78:	4b2a      	ldr	r3, [pc, #168]	; (800dc24 <tcp_input+0x2c0>)
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	f200 8309 	bhi.w	800e194 <tcp_input+0x830>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db86:	4b28      	ldr	r3, [pc, #160]	; (800dc28 <tcp_input+0x2c4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	e09c      	b.n	800dcc8 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	7d1b      	ldrb	r3, [r3, #20]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <tcp_input+0x23e>
 800db96:	4b15      	ldr	r3, [pc, #84]	; (800dbec <tcp_input+0x288>)
 800db98:	22fb      	movs	r2, #251	; 0xfb
 800db9a:	4924      	ldr	r1, [pc, #144]	; (800dc2c <tcp_input+0x2c8>)
 800db9c:	4815      	ldr	r0, [pc, #84]	; (800dbf4 <tcp_input+0x290>)
 800db9e:	f009 fd63 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	7d1b      	ldrb	r3, [r3, #20]
 800dba6:	2b0a      	cmp	r3, #10
 800dba8:	d105      	bne.n	800dbb6 <tcp_input+0x252>
 800dbaa:	4b10      	ldr	r3, [pc, #64]	; (800dbec <tcp_input+0x288>)
 800dbac:	22fc      	movs	r2, #252	; 0xfc
 800dbae:	4920      	ldr	r1, [pc, #128]	; (800dc30 <tcp_input+0x2cc>)
 800dbb0:	4810      	ldr	r0, [pc, #64]	; (800dbf4 <tcp_input+0x290>)
 800dbb2:	f009 fd59 	bl	8017668 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	7d1b      	ldrb	r3, [r3, #20]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d105      	bne.n	800dbca <tcp_input+0x266>
 800dbbe:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <tcp_input+0x288>)
 800dbc0:	22fd      	movs	r2, #253	; 0xfd
 800dbc2:	491c      	ldr	r1, [pc, #112]	; (800dc34 <tcp_input+0x2d0>)
 800dbc4:	480b      	ldr	r0, [pc, #44]	; (800dbf4 <tcp_input+0x290>)
 800dbc6:	f009 fd4f 	bl	8017668 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	7a1b      	ldrb	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d032      	beq.n	800dc38 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	7a1a      	ldrb	r2, [r3, #8]
 800dbd6:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <tcp_input+0x298>)
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbde:	3301      	adds	r3, #1
 800dbe0:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d028      	beq.n	800dc38 <tcp_input+0x2d4>
      prev = pcb;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	61bb      	str	r3, [r7, #24]
      continue;
 800dbea:	e06a      	b.n	800dcc2 <tcp_input+0x35e>
 800dbec:	0801de58 	.word	0x0801de58
 800dbf0:	0801de8c 	.word	0x0801de8c
 800dbf4:	0801dea4 	.word	0x0801dea4
 800dbf8:	20001228 	.word	0x20001228
 800dbfc:	20009f2c 	.word	0x20009f2c
 800dc00:	2000122c 	.word	0x2000122c
 800dc04:	20001230 	.word	0x20001230
 800dc08:	2000122e 	.word	0x2000122e
 800dc0c:	0801decc 	.word	0x0801decc
 800dc10:	0801dedc 	.word	0x0801dedc
 800dc14:	0801dee8 	.word	0x0801dee8
 800dc18:	20001238 	.word	0x20001238
 800dc1c:	2000123c 	.word	0x2000123c
 800dc20:	20001244 	.word	0x20001244
 800dc24:	20001242 	.word	0x20001242
 800dc28:	2000d85c 	.word	0x2000d85c
 800dc2c:	0801df08 	.word	0x0801df08
 800dc30:	0801df30 	.word	0x0801df30
 800dc34:	0801df5c 	.word	0x0801df5c
    }

    if (pcb->remote_port == tcphdr->src &&
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	8b1a      	ldrh	r2, [r3, #24]
 800dc3c:	4b72      	ldr	r3, [pc, #456]	; (800de08 <tcp_input+0x4a4>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	881b      	ldrh	r3, [r3, #0]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d13a      	bne.n	800dcbe <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	8ada      	ldrh	r2, [r3, #22]
 800dc4c:	4b6e      	ldr	r3, [pc, #440]	; (800de08 <tcp_input+0x4a4>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	885b      	ldrh	r3, [r3, #2]
 800dc52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d132      	bne.n	800dcbe <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	685a      	ldr	r2, [r3, #4]
 800dc5c:	4b6b      	ldr	r3, [pc, #428]	; (800de0c <tcp_input+0x4a8>)
 800dc5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d12c      	bne.n	800dcbe <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	4b68      	ldr	r3, [pc, #416]	; (800de0c <tcp_input+0x4a8>)
 800dc6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d126      	bne.n	800dcbe <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	69fa      	ldr	r2, [r7, #28]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d106      	bne.n	800dc88 <tcp_input+0x324>
 800dc7a:	4b65      	ldr	r3, [pc, #404]	; (800de10 <tcp_input+0x4ac>)
 800dc7c:	f240 120d 	movw	r2, #269	; 0x10d
 800dc80:	4964      	ldr	r1, [pc, #400]	; (800de14 <tcp_input+0x4b0>)
 800dc82:	4865      	ldr	r0, [pc, #404]	; (800de18 <tcp_input+0x4b4>)
 800dc84:	f009 fcf0 	bl	8017668 <iprintf>
      if (prev != NULL) {
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00a      	beq.n	800dca4 <tcp_input+0x340>
        prev->next = pcb->next;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	68da      	ldr	r2, [r3, #12]
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc96:	4b61      	ldr	r3, [pc, #388]	; (800de1c <tcp_input+0x4b8>)
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc9e:	4a5f      	ldr	r2, [pc, #380]	; (800de1c <tcp_input+0x4b8>)
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	69fa      	ldr	r2, [r7, #28]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d111      	bne.n	800dcd2 <tcp_input+0x36e>
 800dcae:	4b58      	ldr	r3, [pc, #352]	; (800de10 <tcp_input+0x4ac>)
 800dcb0:	f240 1215 	movw	r2, #277	; 0x115
 800dcb4:	495a      	ldr	r1, [pc, #360]	; (800de20 <tcp_input+0x4bc>)
 800dcb6:	4858      	ldr	r0, [pc, #352]	; (800de18 <tcp_input+0x4b4>)
 800dcb8:	f009 fcd6 	bl	8017668 <iprintf>
      break;
 800dcbc:	e009      	b.n	800dcd2 <tcp_input+0x36e>
    }
    prev = pcb;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	61fb      	str	r3, [r7, #28]
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f47f af5f 	bne.w	800db8e <tcp_input+0x22a>
 800dcd0:	e000      	b.n	800dcd4 <tcp_input+0x370>
      break;
 800dcd2:	bf00      	nop
  }

  if (pcb == NULL) {
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f040 80aa 	bne.w	800de30 <tcp_input+0x4cc>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcdc:	4b51      	ldr	r3, [pc, #324]	; (800de24 <tcp_input+0x4c0>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e03f      	b.n	800dd64 <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b0a      	cmp	r3, #10
 800dcea:	d006      	beq.n	800dcfa <tcp_input+0x396>
 800dcec:	4b48      	ldr	r3, [pc, #288]	; (800de10 <tcp_input+0x4ac>)
 800dcee:	f240 121f 	movw	r2, #287	; 0x11f
 800dcf2:	494d      	ldr	r1, [pc, #308]	; (800de28 <tcp_input+0x4c4>)
 800dcf4:	4848      	ldr	r0, [pc, #288]	; (800de18 <tcp_input+0x4b4>)
 800dcf6:	f009 fcb7 	bl	8017668 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	7a1b      	ldrb	r3, [r3, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d009      	beq.n	800dd16 <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	7a1a      	ldrb	r2, [r3, #8]
 800dd06:	4b41      	ldr	r3, [pc, #260]	; (800de0c <tcp_input+0x4a8>)
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd0e:	3301      	adds	r3, #1
 800dd10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d122      	bne.n	800dd5c <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	8b1a      	ldrh	r2, [r3, #24]
 800dd1a:	4b3b      	ldr	r3, [pc, #236]	; (800de08 <tcp_input+0x4a4>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d11b      	bne.n	800dd5e <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	8ada      	ldrh	r2, [r3, #22]
 800dd2a:	4b37      	ldr	r3, [pc, #220]	; (800de08 <tcp_input+0x4a4>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	885b      	ldrh	r3, [r3, #2]
 800dd30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d113      	bne.n	800dd5e <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	4b34      	ldr	r3, [pc, #208]	; (800de0c <tcp_input+0x4a8>)
 800dd3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d10d      	bne.n	800dd5e <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	4b31      	ldr	r3, [pc, #196]	; (800de0c <tcp_input+0x4a8>)
 800dd48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d107      	bne.n	800dd5e <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dd4e:	69f8      	ldr	r0, [r7, #28]
 800dd50:	f000 fb80 	bl	800e454 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7fd fc8f 	bl	800b678 <pbuf_free>
        return;
 800dd5a:	e221      	b.n	800e1a0 <tcp_input+0x83c>
        continue;
 800dd5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1bc      	bne.n	800dce4 <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd6e:	4b2f      	ldr	r3, [pc, #188]	; (800de2c <tcp_input+0x4c8>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	e02a      	b.n	800ddcc <tcp_input+0x468>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	7a1b      	ldrb	r3, [r3, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00c      	beq.n	800dd98 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	7a1a      	ldrb	r2, [r3, #8]
 800dd82:	4b22      	ldr	r3, [pc, #136]	; (800de0c <tcp_input+0x4a8>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d002      	beq.n	800dd98 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	61bb      	str	r3, [r7, #24]
        continue;
 800dd96:	e016      	b.n	800ddc6 <tcp_input+0x462>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	8ada      	ldrh	r2, [r3, #22]
 800dd9c:	4b1a      	ldr	r3, [pc, #104]	; (800de08 <tcp_input+0x4a4>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	885b      	ldrh	r3, [r3, #2]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d10c      	bne.n	800ddc2 <tcp_input+0x45e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	4b17      	ldr	r3, [pc, #92]	; (800de0c <tcp_input+0x4a8>)
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d00f      	beq.n	800ddd4 <tcp_input+0x470>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00d      	beq.n	800ddd6 <tcp_input+0x472>
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <tcp_input+0x472>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1d1      	bne.n	800dd76 <tcp_input+0x412>
 800ddd2:	e000      	b.n	800ddd6 <tcp_input+0x472>
            break;
 800ddd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d029      	beq.n	800de30 <tcp_input+0x4cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <tcp_input+0x494>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ddea:	4b10      	ldr	r3, [pc, #64]	; (800de2c <tcp_input+0x4c8>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ddf2:	4a0e      	ldr	r2, [pc, #56]	; (800de2c <tcp_input+0x4c8>)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ddf8:	6978      	ldr	r0, [r7, #20]
 800ddfa:	f000 fa2d 	bl	800e258 <tcp_listen_input>
      }
      pbuf_free(p);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fd fc3a 	bl	800b678 <pbuf_free>
      return;
 800de04:	e1cc      	b.n	800e1a0 <tcp_input+0x83c>
 800de06:	bf00      	nop
 800de08:	20001228 	.word	0x20001228
 800de0c:	20009f2c 	.word	0x20009f2c
 800de10:	0801de58 	.word	0x0801de58
 800de14:	0801df84 	.word	0x0801df84
 800de18:	0801dea4 	.word	0x0801dea4
 800de1c:	2000d85c 	.word	0x2000d85c
 800de20:	0801dfb0 	.word	0x0801dfb0
 800de24:	2000d86c 	.word	0x2000d86c
 800de28:	0801dfdc 	.word	0x0801dfdc
 800de2c:	2000d864 	.word	0x2000d864
    }
  }

#if TCP_INPUT_DEBUG
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800de30:	4ba3      	ldr	r3, [pc, #652]	; (800e0c0 <tcp_input+0x75c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	899b      	ldrh	r3, [r3, #12]
 800de36:	b29b      	uxth	r3, r3
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fc f883 	bl	8009f44 <lwip_htons>
 800de3e:	4603      	mov	r3, r0
 800de40:	b2db      	uxtb	r3, r3
 800de42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de46:	b2db      	uxtb	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fd28 	bl	800d89e <tcp_debug_print_flags>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 8161 	beq.w	800e118 <tcp_input+0x7b4>
    /* The incoming segment belongs to a connection. */
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	7d1b      	ldrb	r3, [r3, #20]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fd14 	bl	800d888 <tcp_debug_print_state>
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800de60:	4b98      	ldr	r3, [pc, #608]	; (800e0c4 <tcp_input+0x760>)
 800de62:	2200      	movs	r2, #0
 800de64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	891a      	ldrh	r2, [r3, #8]
 800de6a:	4b96      	ldr	r3, [pc, #600]	; (800e0c4 <tcp_input+0x760>)
 800de6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800de6e:	4a95      	ldr	r2, [pc, #596]	; (800e0c4 <tcp_input+0x760>)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800de74:	4b92      	ldr	r3, [pc, #584]	; (800e0c0 <tcp_input+0x75c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a92      	ldr	r2, [pc, #584]	; (800e0c4 <tcp_input+0x760>)
 800de7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800de7c:	4b92      	ldr	r3, [pc, #584]	; (800e0c8 <tcp_input+0x764>)
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800de82:	4b92      	ldr	r3, [pc, #584]	; (800e0cc <tcp_input+0x768>)
 800de84:	2200      	movs	r2, #0
 800de86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800de88:	4b91      	ldr	r3, [pc, #580]	; (800e0d0 <tcp_input+0x76c>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800de8e:	4b91      	ldr	r3, [pc, #580]	; (800e0d4 <tcp_input+0x770>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	f003 0308 	and.w	r3, r3, #8
 800de96:	2b00      	cmp	r3, #0
 800de98:	d006      	beq.n	800dea8 <tcp_input+0x544>
      p->flags |= PBUF_FLAG_PUSH;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7b5b      	ldrb	r3, [r3, #13]
 800de9e:	f043 0301 	orr.w	r3, r3, #1
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deac:	2b00      	cmp	r3, #0
 800deae:	d017      	beq.n	800dee0 <tcp_input+0x57c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800deb0:	69f8      	ldr	r0, [r7, #28]
 800deb2:	f7fe ff91 	bl	800cdd8 <tcp_process_refused_data>
 800deb6:	4603      	mov	r3, r0
 800deb8:	f113 0f0d 	cmn.w	r3, #13
 800debc:	d007      	beq.n	800dece <tcp_input+0x56a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00c      	beq.n	800dee0 <tcp_input+0x57c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dec6:	4b84      	ldr	r3, [pc, #528]	; (800e0d8 <tcp_input+0x774>)
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d008      	beq.n	800dee0 <tcp_input+0x57c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f040 80e8 	bne.w	800e0a8 <tcp_input+0x744>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ded8:	69f8      	ldr	r0, [r7, #28]
 800deda:	f003 fe1f 	bl	8011b1c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dede:	e0e3      	b.n	800e0a8 <tcp_input+0x744>
      }
    }
    tcp_input_pcb = pcb;
 800dee0:	4a7e      	ldr	r2, [pc, #504]	; (800e0dc <tcp_input+0x778>)
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dee6:	69f8      	ldr	r0, [r7, #28]
 800dee8:	f000 fb2e 	bl	800e548 <tcp_process>
 800deec:	4603      	mov	r3, r0
 800deee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800def0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800def4:	f113 0f0d 	cmn.w	r3, #13
 800def8:	f000 80d8 	beq.w	800e0ac <tcp_input+0x748>
      if (recv_flags & TF_RESET) {
 800defc:	4b73      	ldr	r3, [pc, #460]	; (800e0cc <tcp_input+0x768>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	f003 0308 	and.w	r3, r3, #8
 800df04:	2b00      	cmp	r3, #0
 800df06:	d015      	beq.n	800df34 <tcp_input+0x5d0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d008      	beq.n	800df24 <tcp_input+0x5c0>
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df18:	69fa      	ldr	r2, [r7, #28]
 800df1a:	6912      	ldr	r2, [r2, #16]
 800df1c:	f06f 010d 	mvn.w	r1, #13
 800df20:	4610      	mov	r0, r2
 800df22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df24:	69f9      	ldr	r1, [r7, #28]
 800df26:	486e      	ldr	r0, [pc, #440]	; (800e0e0 <tcp_input+0x77c>)
 800df28:	f7ff fb12 	bl	800d550 <tcp_pcb_remove>
        tcp_free(pcb);
 800df2c:	69f8      	ldr	r0, [r7, #28]
 800df2e:	f7fd fe53 	bl	800bbd8 <tcp_free>
 800df32:	e0de      	b.n	800e0f2 <tcp_input+0x78e>
      } else {
        err = ERR_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800df38:	4b65      	ldr	r3, [pc, #404]	; (800e0d0 <tcp_input+0x76c>)
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d01d      	beq.n	800df7c <tcp_input+0x618>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800df40:	4b63      	ldr	r3, [pc, #396]	; (800e0d0 <tcp_input+0x76c>)
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00a      	beq.n	800df66 <tcp_input+0x602>
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df56:	69fa      	ldr	r2, [r7, #28]
 800df58:	6910      	ldr	r0, [r2, #16]
 800df5a:	89fa      	ldrh	r2, [r7, #14]
 800df5c:	69f9      	ldr	r1, [r7, #28]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	74fb      	strb	r3, [r7, #19]
 800df64:	e001      	b.n	800df6a <tcp_input+0x606>
 800df66:	2300      	movs	r3, #0
 800df68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df6e:	f113 0f0d 	cmn.w	r3, #13
 800df72:	f000 809d 	beq.w	800e0b0 <tcp_input+0x74c>
              goto aborted;
            }
          }
          recv_acked = 0;
 800df76:	4b56      	ldr	r3, [pc, #344]	; (800e0d0 <tcp_input+0x76c>)
 800df78:	2200      	movs	r2, #0
 800df7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800df7c:	69f8      	ldr	r0, [r7, #28]
 800df7e:	f000 f92b 	bl	800e1d8 <tcp_input_delayed_close>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 8095 	bne.w	800e0b4 <tcp_input+0x750>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800df8a:	4b4f      	ldr	r3, [pc, #316]	; (800e0c8 <tcp_input+0x764>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d041      	beq.n	800e016 <tcp_input+0x6b2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df96:	2b00      	cmp	r3, #0
 800df98:	d006      	beq.n	800dfa8 <tcp_input+0x644>
 800df9a:	4b52      	ldr	r3, [pc, #328]	; (800e0e4 <tcp_input+0x780>)
 800df9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dfa0:	4951      	ldr	r1, [pc, #324]	; (800e0e8 <tcp_input+0x784>)
 800dfa2:	4852      	ldr	r0, [pc, #328]	; (800e0ec <tcp_input+0x788>)
 800dfa4:	f009 fb60 	bl	8017668 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	8b5b      	ldrh	r3, [r3, #26]
 800dfac:	f003 0310 	and.w	r3, r3, #16
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d008      	beq.n	800dfc6 <tcp_input+0x662>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dfb4:	4b44      	ldr	r3, [pc, #272]	; (800e0c8 <tcp_input+0x764>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fd fb5d 	bl	800b678 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dfbe:	69f8      	ldr	r0, [r7, #28]
 800dfc0:	f7fe f8f6 	bl	800c1b0 <tcp_abort>
            goto aborted;
 800dfc4:	e095      	b.n	800e0f2 <tcp_input+0x78e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00c      	beq.n	800dfea <tcp_input+0x686>
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	6918      	ldr	r0, [r3, #16]
 800dfda:	4b3b      	ldr	r3, [pc, #236]	; (800e0c8 <tcp_input+0x764>)
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	69f9      	ldr	r1, [r7, #28]
 800dfe2:	47a0      	blx	r4
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	74fb      	strb	r3, [r7, #19]
 800dfe8:	e008      	b.n	800dffc <tcp_input+0x698>
 800dfea:	4b37      	ldr	r3, [pc, #220]	; (800e0c8 <tcp_input+0x764>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	2300      	movs	r3, #0
 800dff0:	69f9      	ldr	r1, [r7, #28]
 800dff2:	2000      	movs	r0, #0
 800dff4:	f7fe ffe6 	bl	800cfc4 <tcp_recv_null>
 800dff8:	4603      	mov	r3, r0
 800dffa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e000:	f113 0f0d 	cmn.w	r3, #13
 800e004:	d058      	beq.n	800e0b8 <tcp_input+0x754>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e00e:	4b2e      	ldr	r3, [pc, #184]	; (800e0c8 <tcp_input+0x764>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e016:	4b2d      	ldr	r3, [pc, #180]	; (800e0cc <tcp_input+0x768>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	f003 0320 	and.w	r3, r3, #32
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d030      	beq.n	800e084 <tcp_input+0x720>
          if (pcb->refused_data != NULL) {
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e026:	2b00      	cmp	r3, #0
 800e028:	d009      	beq.n	800e03e <tcp_input+0x6da>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e02e:	7b5a      	ldrb	r2, [r3, #13]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e034:	f042 0220 	orr.w	r2, r2, #32
 800e038:	b2d2      	uxtb	r2, r2
 800e03a:	735a      	strb	r2, [r3, #13]
 800e03c:	e022      	b.n	800e084 <tcp_input+0x720>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e042:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e046:	d005      	beq.n	800e054 <tcp_input+0x6f0>
              pcb->rcv_wnd++;
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e04c:	3301      	adds	r3, #1
 800e04e:	b29a      	uxth	r2, r3
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00b      	beq.n	800e076 <tcp_input+0x712>
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	6918      	ldr	r0, [r3, #16]
 800e068:	2300      	movs	r3, #0
 800e06a:	2200      	movs	r2, #0
 800e06c:	69f9      	ldr	r1, [r7, #28]
 800e06e:	47a0      	blx	r4
 800e070:	4603      	mov	r3, r0
 800e072:	74fb      	strb	r3, [r7, #19]
 800e074:	e001      	b.n	800e07a <tcp_input+0x716>
 800e076:	2300      	movs	r3, #0
 800e078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e07e:	f113 0f0d 	cmn.w	r3, #13
 800e082:	d01b      	beq.n	800e0bc <tcp_input+0x758>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e084:	4b15      	ldr	r3, [pc, #84]	; (800e0dc <tcp_input+0x778>)
 800e086:	2200      	movs	r2, #0
 800e088:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e08a:	69f8      	ldr	r0, [r7, #28]
 800e08c:	f000 f8a4 	bl	800e1d8 <tcp_input_delayed_close>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d12c      	bne.n	800e0f0 <tcp_input+0x78c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e096:	69f8      	ldr	r0, [r7, #28]
 800e098:	f002 ff34 	bl	8010f04 <tcp_output>
#if TCP_INPUT_DEBUG
#if TCP_DEBUG
        tcp_debug_print_state(pcb->state);
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	7d1b      	ldrb	r3, [r3, #20]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fbf1 	bl	800d888 <tcp_debug_print_state>
 800e0a6:	e024      	b.n	800e0f2 <tcp_input+0x78e>
        goto aborted;
 800e0a8:	bf00      	nop
 800e0aa:	e022      	b.n	800e0f2 <tcp_input+0x78e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e0ac:	bf00      	nop
 800e0ae:	e020      	b.n	800e0f2 <tcp_input+0x78e>
              goto aborted;
 800e0b0:	bf00      	nop
 800e0b2:	e01e      	b.n	800e0f2 <tcp_input+0x78e>
          goto aborted;
 800e0b4:	bf00      	nop
 800e0b6:	e01c      	b.n	800e0f2 <tcp_input+0x78e>
            goto aborted;
 800e0b8:	bf00      	nop
 800e0ba:	e01a      	b.n	800e0f2 <tcp_input+0x78e>
              goto aborted;
 800e0bc:	bf00      	nop
 800e0be:	e018      	b.n	800e0f2 <tcp_input+0x78e>
 800e0c0:	20001228 	.word	0x20001228
 800e0c4:	20001218 	.word	0x20001218
 800e0c8:	20001248 	.word	0x20001248
 800e0cc:	20001245 	.word	0x20001245
 800e0d0:	20001240 	.word	0x20001240
 800e0d4:	20001244 	.word	0x20001244
 800e0d8:	20001242 	.word	0x20001242
 800e0dc:	2000d870 	.word	0x2000d870
 800e0e0:	2000d85c 	.word	0x2000d85c
 800e0e4:	0801de58 	.word	0x0801de58
 800e0e8:	0801e00c 	.word	0x0801e00c
 800e0ec:	0801dea4 	.word	0x0801dea4
          goto aborted;
 800e0f0:	bf00      	nop
    tcp_input_pcb = NULL;
 800e0f2:	4b2d      	ldr	r3, [pc, #180]	; (800e1a8 <tcp_input+0x844>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e0f8:	4b2c      	ldr	r3, [pc, #176]	; (800e1ac <tcp_input+0x848>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e0fe:	4b2c      	ldr	r3, [pc, #176]	; (800e1b0 <tcp_input+0x84c>)
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d031      	beq.n	800e16a <tcp_input+0x806>
      pbuf_free(inseg.p);
 800e106:	4b2a      	ldr	r3, [pc, #168]	; (800e1b0 <tcp_input+0x84c>)
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd fab4 	bl	800b678 <pbuf_free>
      inseg.p = NULL;
 800e110:	4b27      	ldr	r3, [pc, #156]	; (800e1b0 <tcp_input+0x84c>)
 800e112:	2200      	movs	r2, #0
 800e114:	605a      	str	r2, [r3, #4]
 800e116:	e028      	b.n	800e16a <tcp_input+0x806>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e118:	4b26      	ldr	r3, [pc, #152]	; (800e1b4 <tcp_input+0x850>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	899b      	ldrh	r3, [r3, #12]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	4618      	mov	r0, r3
 800e122:	f7fb ff0f 	bl	8009f44 <lwip_htons>
 800e126:	4603      	mov	r3, r0
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 0304 	and.w	r3, r3, #4
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d118      	bne.n	800e164 <tcp_input+0x800>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e132:	4b21      	ldr	r3, [pc, #132]	; (800e1b8 <tcp_input+0x854>)
 800e134:	6819      	ldr	r1, [r3, #0]
 800e136:	4b21      	ldr	r3, [pc, #132]	; (800e1bc <tcp_input+0x858>)
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	461a      	mov	r2, r3
 800e13c:	4b20      	ldr	r3, [pc, #128]	; (800e1c0 <tcp_input+0x85c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e142:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <tcp_input+0x850>)
 800e144:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e146:	885b      	ldrh	r3, [r3, #2]
 800e148:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e14a:	4a1a      	ldr	r2, [pc, #104]	; (800e1b4 <tcp_input+0x850>)
 800e14c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e14e:	8812      	ldrh	r2, [r2, #0]
 800e150:	b292      	uxth	r2, r2
 800e152:	9202      	str	r2, [sp, #8]
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	4b1b      	ldr	r3, [pc, #108]	; (800e1c4 <tcp_input+0x860>)
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	4b1b      	ldr	r3, [pc, #108]	; (800e1c8 <tcp_input+0x864>)
 800e15c:	4602      	mov	r2, r0
 800e15e:	2000      	movs	r0, #0
 800e160:	f003 fc8a 	bl	8011a78 <tcp_rst>
    }
    pbuf_free(p);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7fd fa87 	bl	800b678 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800e16a:	f7ff fba3 	bl	800d8b4 <tcp_pcbs_sane>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d114      	bne.n	800e19e <tcp_input+0x83a>
 800e174:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <tcp_input+0x868>)
 800e176:	f240 2249 	movw	r2, #585	; 0x249
 800e17a:	4915      	ldr	r1, [pc, #84]	; (800e1d0 <tcp_input+0x86c>)
 800e17c:	4815      	ldr	r0, [pc, #84]	; (800e1d4 <tcp_input+0x870>)
 800e17e:	f009 fa73 	bl	8017668 <iprintf>
  PERF_STOP("tcp_input");
  return;
 800e182:	e00c      	b.n	800e19e <tcp_input+0x83a>
    goto dropped;
 800e184:	bf00      	nop
 800e186:	e006      	b.n	800e196 <tcp_input+0x832>
    goto dropped;
 800e188:	bf00      	nop
 800e18a:	e004      	b.n	800e196 <tcp_input+0x832>
    goto dropped;
 800e18c:	bf00      	nop
 800e18e:	e002      	b.n	800e196 <tcp_input+0x832>
      goto dropped;
 800e190:	bf00      	nop
 800e192:	e000      	b.n	800e196 <tcp_input+0x832>
      goto dropped;
 800e194:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7fd fa6e 	bl	800b678 <pbuf_free>
 800e19c:	e000      	b.n	800e1a0 <tcp_input+0x83c>
  return;
 800e19e:	bf00      	nop
}
 800e1a0:	3724      	adds	r7, #36	; 0x24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd90      	pop	{r4, r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2000d870 	.word	0x2000d870
 800e1ac:	20001248 	.word	0x20001248
 800e1b0:	20001218 	.word	0x20001218
 800e1b4:	20001228 	.word	0x20001228
 800e1b8:	2000123c 	.word	0x2000123c
 800e1bc:	20001242 	.word	0x20001242
 800e1c0:	20001238 	.word	0x20001238
 800e1c4:	20009f3c 	.word	0x20009f3c
 800e1c8:	20009f40 	.word	0x20009f40
 800e1cc:	0801de58 	.word	0x0801de58
 800e1d0:	0801e028 	.word	0x0801e028
 800e1d4:	0801dea4 	.word	0x0801dea4

0800e1d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <tcp_input_delayed_close+0x1c>
 800e1e6:	4b17      	ldr	r3, [pc, #92]	; (800e244 <tcp_input_delayed_close+0x6c>)
 800e1e8:	f240 225a 	movw	r2, #602	; 0x25a
 800e1ec:	4916      	ldr	r1, [pc, #88]	; (800e248 <tcp_input_delayed_close+0x70>)
 800e1ee:	4817      	ldr	r0, [pc, #92]	; (800e24c <tcp_input_delayed_close+0x74>)
 800e1f0:	f009 fa3a 	bl	8017668 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e1f4:	4b16      	ldr	r3, [pc, #88]	; (800e250 <tcp_input_delayed_close+0x78>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	f003 0310 	and.w	r3, r3, #16
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d01c      	beq.n	800e23a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	8b5b      	ldrh	r3, [r3, #26]
 800e204:	f003 0310 	and.w	r3, r3, #16
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10d      	bne.n	800e228 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e212:	2b00      	cmp	r3, #0
 800e214:	d008      	beq.n	800e228 <tcp_input_delayed_close+0x50>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	6912      	ldr	r2, [r2, #16]
 800e220:	f06f 010e 	mvn.w	r1, #14
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e228:	6879      	ldr	r1, [r7, #4]
 800e22a:	480a      	ldr	r0, [pc, #40]	; (800e254 <tcp_input_delayed_close+0x7c>)
 800e22c:	f7ff f990 	bl	800d550 <tcp_pcb_remove>
    tcp_free(pcb);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7fd fcd1 	bl	800bbd8 <tcp_free>
    return 1;
 800e236:	2301      	movs	r3, #1
 800e238:	e000      	b.n	800e23c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	0801de58 	.word	0x0801de58
 800e248:	0801e044 	.word	0x0801e044
 800e24c:	0801dea4 	.word	0x0801dea4
 800e250:	20001245 	.word	0x20001245
 800e254:	2000d85c 	.word	0x2000d85c

0800e258 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b08b      	sub	sp, #44	; 0x2c
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e260:	4b6f      	ldr	r3, [pc, #444]	; (800e420 <tcp_listen_input+0x1c8>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f040 80d2 	bne.w	800e412 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <tcp_listen_input+0x2a>
 800e274:	4b6b      	ldr	r3, [pc, #428]	; (800e424 <tcp_listen_input+0x1cc>)
 800e276:	f240 2281 	movw	r2, #641	; 0x281
 800e27a:	496b      	ldr	r1, [pc, #428]	; (800e428 <tcp_listen_input+0x1d0>)
 800e27c:	486b      	ldr	r0, [pc, #428]	; (800e42c <tcp_listen_input+0x1d4>)
 800e27e:	f009 f9f3 	bl	8017668 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e282:	4b67      	ldr	r3, [pc, #412]	; (800e420 <tcp_listen_input+0x1c8>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	f003 0310 	and.w	r3, r3, #16
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d019      	beq.n	800e2c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e28e:	4b68      	ldr	r3, [pc, #416]	; (800e430 <tcp_listen_input+0x1d8>)
 800e290:	6819      	ldr	r1, [r3, #0]
 800e292:	4b68      	ldr	r3, [pc, #416]	; (800e434 <tcp_listen_input+0x1dc>)
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	461a      	mov	r2, r3
 800e298:	4b67      	ldr	r3, [pc, #412]	; (800e438 <tcp_listen_input+0x1e0>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e29e:	4b67      	ldr	r3, [pc, #412]	; (800e43c <tcp_listen_input+0x1e4>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2a2:	885b      	ldrh	r3, [r3, #2]
 800e2a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2a6:	4a65      	ldr	r2, [pc, #404]	; (800e43c <tcp_listen_input+0x1e4>)
 800e2a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2aa:	8812      	ldrh	r2, [r2, #0]
 800e2ac:	b292      	uxth	r2, r2
 800e2ae:	9202      	str	r2, [sp, #8]
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	4b63      	ldr	r3, [pc, #396]	; (800e440 <tcp_listen_input+0x1e8>)
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	4b63      	ldr	r3, [pc, #396]	; (800e444 <tcp_listen_input+0x1ec>)
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f003 fbdc 	bl	8011a78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e2c0:	e0a9      	b.n	800e416 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e2c2:	4b57      	ldr	r3, [pc, #348]	; (800e420 <tcp_listen_input+0x1c8>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	f003 0302 	and.w	r3, r3, #2
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80a3 	beq.w	800e416 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7d5b      	ldrb	r3, [r3, #21]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe ff99 	bl	800d20c <tcp_alloc>
 800e2da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d111      	bne.n	800e306 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <tcp_listen_input+0xa8>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	6910      	ldr	r0, [r2, #16]
 800e2f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	4798      	blx	r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	73bb      	strb	r3, [r7, #14]
      return;
 800e2fe:	e08b      	b.n	800e418 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e300:	23f0      	movs	r3, #240	; 0xf0
 800e302:	73bb      	strb	r3, [r7, #14]
      return;
 800e304:	e088      	b.n	800e418 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e306:	4b50      	ldr	r3, [pc, #320]	; (800e448 <tcp_listen_input+0x1f0>)
 800e308:	695a      	ldr	r2, [r3, #20]
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e30e:	4b4e      	ldr	r3, [pc, #312]	; (800e448 <tcp_listen_input+0x1f0>)
 800e310:	691a      	ldr	r2, [r3, #16]
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	8ada      	ldrh	r2, [r3, #22]
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e31e:	4b47      	ldr	r3, [pc, #284]	; (800e43c <tcp_listen_input+0x1e4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	b29a      	uxth	r2, r3
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2203      	movs	r2, #3
 800e32e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e330:	4b41      	ldr	r3, [pc, #260]	; (800e438 <tcp_listen_input+0x1e0>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e342:	6978      	ldr	r0, [r7, #20]
 800e344:	f7ff f9a6 	bl	800d694 <tcp_next_iss>
 800e348:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	693a      	ldr	r2, [r7, #16]
 800e34e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e362:	4b35      	ldr	r3, [pc, #212]	; (800e438 <tcp_listen_input+0x1e0>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	1e5a      	subs	r2, r3, #1
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	691a      	ldr	r2, [r3, #16]
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	7a5b      	ldrb	r3, [r3, #9]
 800e37e:	f003 030c 	and.w	r3, r3, #12
 800e382:	b2da      	uxtb	r2, r3
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	7a1a      	ldrb	r2, [r3, #8]
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e390:	4b2e      	ldr	r3, [pc, #184]	; (800e44c <tcp_listen_input+0x1f4>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	60da      	str	r2, [r3, #12]
 800e398:	4a2c      	ldr	r2, [pc, #176]	; (800e44c <tcp_listen_input+0x1f4>)
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	f003 fd2d 	bl	8011dfc <tcp_timer_needed>
 800e3a2:	4b2b      	ldr	r3, [pc, #172]	; (800e450 <tcp_listen_input+0x1f8>)
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e3a8:	6978      	ldr	r0, [r7, #20]
 800e3aa:	f001 fd8d 	bl	800fec8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e3ae:	4b23      	ldr	r3, [pc, #140]	; (800e43c <tcp_listen_input+0x1e4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	89db      	ldrh	r3, [r3, #14]
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f007 fa5b 	bl	801588c <ip4_route>
 800e3d6:	4601      	mov	r1, r0
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f7ff f97e 	bl	800d6e0 <tcp_eff_send_mss_netif>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e3ec:	2112      	movs	r1, #18
 800e3ee:	6978      	ldr	r0, [r7, #20]
 800e3f0:	f002 fc9a 	bl	8010d28 <tcp_enqueue_flags>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e400:	2100      	movs	r1, #0
 800e402:	6978      	ldr	r0, [r7, #20]
 800e404:	f7fd fe16 	bl	800c034 <tcp_abandon>
      return;
 800e408:	e006      	b.n	800e418 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e40a:	6978      	ldr	r0, [r7, #20]
 800e40c:	f002 fd7a 	bl	8010f04 <tcp_output>
  return;
 800e410:	e001      	b.n	800e416 <tcp_listen_input+0x1be>
    return;
 800e412:	bf00      	nop
 800e414:	e000      	b.n	800e418 <tcp_listen_input+0x1c0>
  return;
 800e416:	bf00      	nop
}
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd90      	pop	{r4, r7, pc}
 800e41e:	bf00      	nop
 800e420:	20001244 	.word	0x20001244
 800e424:	0801de58 	.word	0x0801de58
 800e428:	0801e06c 	.word	0x0801e06c
 800e42c:	0801dea4 	.word	0x0801dea4
 800e430:	2000123c 	.word	0x2000123c
 800e434:	20001242 	.word	0x20001242
 800e438:	20001238 	.word	0x20001238
 800e43c:	20001228 	.word	0x20001228
 800e440:	20009f3c 	.word	0x20009f3c
 800e444:	20009f40 	.word	0x20009f40
 800e448:	20009f2c 	.word	0x20009f2c
 800e44c:	2000d85c 	.word	0x2000d85c
 800e450:	2000d858 	.word	0x2000d858

0800e454 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af04      	add	r7, sp, #16
 800e45a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e45c:	4b2f      	ldr	r3, [pc, #188]	; (800e51c <tcp_timewait_input+0xc8>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f003 0304 	and.w	r3, r3, #4
 800e464:	2b00      	cmp	r3, #0
 800e466:	d153      	bne.n	800e510 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d106      	bne.n	800e47c <tcp_timewait_input+0x28>
 800e46e:	4b2c      	ldr	r3, [pc, #176]	; (800e520 <tcp_timewait_input+0xcc>)
 800e470:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e474:	492b      	ldr	r1, [pc, #172]	; (800e524 <tcp_timewait_input+0xd0>)
 800e476:	482c      	ldr	r0, [pc, #176]	; (800e528 <tcp_timewait_input+0xd4>)
 800e478:	f009 f8f6 	bl	8017668 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e47c:	4b27      	ldr	r3, [pc, #156]	; (800e51c <tcp_timewait_input+0xc8>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 0302 	and.w	r3, r3, #2
 800e484:	2b00      	cmp	r3, #0
 800e486:	d02a      	beq.n	800e4de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e488:	4b28      	ldr	r3, [pc, #160]	; (800e52c <tcp_timewait_input+0xd8>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	db2d      	blt.n	800e4f2 <tcp_timewait_input+0x9e>
 800e496:	4b25      	ldr	r3, [pc, #148]	; (800e52c <tcp_timewait_input+0xd8>)
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49e:	6879      	ldr	r1, [r7, #4]
 800e4a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4a2:	440b      	add	r3, r1
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	dc23      	bgt.n	800e4f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4aa:	4b21      	ldr	r3, [pc, #132]	; (800e530 <tcp_timewait_input+0xdc>)
 800e4ac:	6819      	ldr	r1, [r3, #0]
 800e4ae:	4b21      	ldr	r3, [pc, #132]	; (800e534 <tcp_timewait_input+0xe0>)
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	4b1d      	ldr	r3, [pc, #116]	; (800e52c <tcp_timewait_input+0xd8>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4ba:	4b1f      	ldr	r3, [pc, #124]	; (800e538 <tcp_timewait_input+0xe4>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4be:	885b      	ldrh	r3, [r3, #2]
 800e4c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4c2:	4a1d      	ldr	r2, [pc, #116]	; (800e538 <tcp_timewait_input+0xe4>)
 800e4c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4c6:	8812      	ldrh	r2, [r2, #0]
 800e4c8:	b292      	uxth	r2, r2
 800e4ca:	9202      	str	r2, [sp, #8]
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	4b1b      	ldr	r3, [pc, #108]	; (800e53c <tcp_timewait_input+0xe8>)
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4b1b      	ldr	r3, [pc, #108]	; (800e540 <tcp_timewait_input+0xec>)
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f003 face 	bl	8011a78 <tcp_rst>
      return;
 800e4dc:	e01b      	b.n	800e516 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e4de:	4b0f      	ldr	r3, [pc, #60]	; (800e51c <tcp_timewait_input+0xc8>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e4ea:	4b16      	ldr	r3, [pc, #88]	; (800e544 <tcp_timewait_input+0xf0>)
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e4f2:	4b10      	ldr	r3, [pc, #64]	; (800e534 <tcp_timewait_input+0xe0>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00c      	beq.n	800e514 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8b5b      	ldrh	r3, [r3, #26]
 800e4fe:	f043 0302 	orr.w	r3, r3, #2
 800e502:	b29a      	uxth	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f002 fcfb 	bl	8010f04 <tcp_output>
  }
  return;
 800e50e:	e001      	b.n	800e514 <tcp_timewait_input+0xc0>
    return;
 800e510:	bf00      	nop
 800e512:	e000      	b.n	800e516 <tcp_timewait_input+0xc2>
  return;
 800e514:	bf00      	nop
}
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20001244 	.word	0x20001244
 800e520:	0801de58 	.word	0x0801de58
 800e524:	0801e08c 	.word	0x0801e08c
 800e528:	0801dea4 	.word	0x0801dea4
 800e52c:	20001238 	.word	0x20001238
 800e530:	2000123c 	.word	0x2000123c
 800e534:	20001242 	.word	0x20001242
 800e538:	20001228 	.word	0x20001228
 800e53c:	20009f3c 	.word	0x20009f3c
 800e540:	20009f40 	.word	0x20009f40
 800e544:	2000d860 	.word	0x2000d860

0800e548 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e548:	b590      	push	{r4, r7, lr}
 800e54a:	b08d      	sub	sp, #52	; 0x34
 800e54c:	af04      	add	r7, sp, #16
 800e54e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <tcp_process+0x24>
 800e55e:	4ba5      	ldr	r3, [pc, #660]	; (800e7f4 <tcp_process+0x2ac>)
 800e560:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e564:	49a4      	ldr	r1, [pc, #656]	; (800e7f8 <tcp_process+0x2b0>)
 800e566:	48a5      	ldr	r0, [pc, #660]	; (800e7fc <tcp_process+0x2b4>)
 800e568:	f009 f87e 	bl	8017668 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e56c:	4ba4      	ldr	r3, [pc, #656]	; (800e800 <tcp_process+0x2b8>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 0304 	and.w	r3, r3, #4
 800e574:	2b00      	cmp	r3, #0
 800e576:	d04e      	beq.n	800e616 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d108      	bne.n	800e592 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e584:	4b9f      	ldr	r3, [pc, #636]	; (800e804 <tcp_process+0x2bc>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d123      	bne.n	800e5d4 <tcp_process+0x8c>
        acceptable = 1;
 800e58c:	2301      	movs	r3, #1
 800e58e:	76fb      	strb	r3, [r7, #27]
 800e590:	e020      	b.n	800e5d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e596:	4b9c      	ldr	r3, [pc, #624]	; (800e808 <tcp_process+0x2c0>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d102      	bne.n	800e5a4 <tcp_process+0x5c>
        acceptable = 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	76fb      	strb	r3, [r7, #27]
 800e5a2:	e017      	b.n	800e5d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e5a4:	4b98      	ldr	r3, [pc, #608]	; (800e808 <tcp_process+0x2c0>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	db10      	blt.n	800e5d4 <tcp_process+0x8c>
 800e5b2:	4b95      	ldr	r3, [pc, #596]	; (800e808 <tcp_process+0x2c0>)
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ba:	6879      	ldr	r1, [r7, #4]
 800e5bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5be:	440b      	add	r3, r1
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dc06      	bgt.n	800e5d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	8b5b      	ldrh	r3, [r3, #26]
 800e5ca:	f043 0302 	orr.w	r3, r3, #2
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e5d4:	7efb      	ldrb	r3, [r7, #27]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d01b      	beq.n	800e612 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	7d1b      	ldrb	r3, [r3, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d106      	bne.n	800e5f0 <tcp_process+0xa8>
 800e5e2:	4b84      	ldr	r3, [pc, #528]	; (800e7f4 <tcp_process+0x2ac>)
 800e5e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e5e8:	4988      	ldr	r1, [pc, #544]	; (800e80c <tcp_process+0x2c4>)
 800e5ea:	4884      	ldr	r0, [pc, #528]	; (800e7fc <tcp_process+0x2b4>)
 800e5ec:	f009 f83c 	bl	8017668 <iprintf>
      recv_flags |= TF_RESET;
 800e5f0:	4b87      	ldr	r3, [pc, #540]	; (800e810 <tcp_process+0x2c8>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	f043 0308 	orr.w	r3, r3, #8
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b85      	ldr	r3, [pc, #532]	; (800e810 <tcp_process+0x2c8>)
 800e5fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8b5b      	ldrh	r3, [r3, #26]
 800e602:	f023 0301 	bic.w	r3, r3, #1
 800e606:	b29a      	uxth	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e60c:	f06f 030d 	mvn.w	r3, #13
 800e610:	e37a      	b.n	800ed08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	e378      	b.n	800ed08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e616:	4b7a      	ldr	r3, [pc, #488]	; (800e800 <tcp_process+0x2b8>)
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d010      	beq.n	800e644 <tcp_process+0xfc>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	2b02      	cmp	r3, #2
 800e628:	d00c      	beq.n	800e644 <tcp_process+0xfc>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	7d1b      	ldrb	r3, [r3, #20]
 800e62e:	2b03      	cmp	r3, #3
 800e630:	d008      	beq.n	800e644 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8b5b      	ldrh	r3, [r3, #26]
 800e636:	f043 0302 	orr.w	r3, r3, #2
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	e361      	b.n	800ed08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	8b5b      	ldrh	r3, [r3, #26]
 800e648:	f003 0310 	and.w	r3, r3, #16
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d103      	bne.n	800e658 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e650:	4b70      	ldr	r3, [pc, #448]	; (800e814 <tcp_process+0x2cc>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f001 fc2d 	bl	800fec8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7d1b      	ldrb	r3, [r3, #20]
 800e672:	3b02      	subs	r3, #2
 800e674:	2b07      	cmp	r3, #7
 800e676:	f200 8337 	bhi.w	800ece8 <tcp_process+0x7a0>
 800e67a:	a201      	add	r2, pc, #4	; (adr r2, 800e680 <tcp_process+0x138>)
 800e67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e680:	0800e6a1 	.word	0x0800e6a1
 800e684:	0800e8d1 	.word	0x0800e8d1
 800e688:	0800ea49 	.word	0x0800ea49
 800e68c:	0800ea73 	.word	0x0800ea73
 800e690:	0800eb97 	.word	0x0800eb97
 800e694:	0800ea49 	.word	0x0800ea49
 800e698:	0800ec23 	.word	0x0800ec23
 800e69c:	0800ecb3 	.word	0x0800ecb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e6a0:	4b57      	ldr	r3, [pc, #348]	; (800e800 <tcp_process+0x2b8>)
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	f003 0310 	and.w	r3, r3, #16
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 80e4 	beq.w	800e876 <tcp_process+0x32e>
 800e6ae:	4b54      	ldr	r3, [pc, #336]	; (800e800 <tcp_process+0x2b8>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 80dd 	beq.w	800e876 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	4b50      	ldr	r3, [pc, #320]	; (800e804 <tcp_process+0x2bc>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	f040 80d5 	bne.w	800e876 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e6cc:	4b4e      	ldr	r3, [pc, #312]	; (800e808 <tcp_process+0x2c0>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e6de:	4b49      	ldr	r3, [pc, #292]	; (800e804 <tcp_process+0x2bc>)
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e6e6:	4b4c      	ldr	r3, [pc, #304]	; (800e818 <tcp_process+0x2d0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	89db      	ldrh	r3, [r3, #14]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e700:	4b41      	ldr	r3, [pc, #260]	; (800e808 <tcp_process+0x2c0>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	1e5a      	subs	r2, r3, #1
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2204      	movs	r2, #4
 800e70e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3304      	adds	r3, #4
 800e718:	4618      	mov	r0, r3
 800e71a:	f007 f8b7 	bl	801588c <ip4_route>
 800e71e:	4601      	mov	r1, r0
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	3304      	adds	r3, #4
 800e724:	461a      	mov	r2, r3
 800e726:	4620      	mov	r0, r4
 800e728:	f7fe ffda 	bl	800d6e0 <tcp_eff_send_mss_netif>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461a      	mov	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e738:	009a      	lsls	r2, r3, #2
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	f241 111c 	movw	r1, #4380	; 0x111c
 800e744:	428b      	cmp	r3, r1
 800e746:	bf38      	it	cc
 800e748:	460b      	movcc	r3, r1
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d204      	bcs.n	800e758 <tcp_process+0x210>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	b29b      	uxth	r3, r3
 800e756:	e00d      	b.n	800e774 <tcp_process+0x22c>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	f241 121c 	movw	r2, #4380	; 0x111c
 800e762:	4293      	cmp	r3, r2
 800e764:	d904      	bls.n	800e770 <tcp_process+0x228>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	e001      	b.n	800e774 <tcp_process+0x22c>
 800e770:	f241 131c 	movw	r3, #4380	; 0x111c
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <tcp_process+0x24a>
 800e784:	4b1b      	ldr	r3, [pc, #108]	; (800e7f4 <tcp_process+0x2ac>)
 800e786:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e78a:	4924      	ldr	r1, [pc, #144]	; (800e81c <tcp_process+0x2d4>)
 800e78c:	481b      	ldr	r0, [pc, #108]	; (800e7fc <tcp_process+0x2b4>)
 800e78e:	f008 ff6b 	bl	8017668 <iprintf>
        --pcb->snd_queuelen;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e798:	3b01      	subs	r3, #1
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d111      	bne.n	800e7d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <tcp_process+0x280>
 800e7ba:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <tcp_process+0x2ac>)
 800e7bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e7c0:	4917      	ldr	r1, [pc, #92]	; (800e820 <tcp_process+0x2d8>)
 800e7c2:	480e      	ldr	r0, [pc, #56]	; (800e7fc <tcp_process+0x2b4>)
 800e7c4:	f008 ff50 	bl	8017668 <iprintf>
          pcb->unsent = rseg->next;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	66da      	str	r2, [r3, #108]	; 0x6c
 800e7d0:	e003      	b.n	800e7da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e7da:	69f8      	ldr	r0, [r7, #28]
 800e7dc:	f7fe fb8d 	bl	800cefa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d11d      	bne.n	800e824 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ee:	861a      	strh	r2, [r3, #48]	; 0x30
 800e7f0:	e01f      	b.n	800e832 <tcp_process+0x2ea>
 800e7f2:	bf00      	nop
 800e7f4:	0801de58 	.word	0x0801de58
 800e7f8:	0801e0ac 	.word	0x0801e0ac
 800e7fc:	0801dea4 	.word	0x0801dea4
 800e800:	20001244 	.word	0x20001244
 800e804:	2000123c 	.word	0x2000123c
 800e808:	20001238 	.word	0x20001238
 800e80c:	0801e0c8 	.word	0x0801e0c8
 800e810:	20001245 	.word	0x20001245
 800e814:	2000d860 	.word	0x2000d860
 800e818:	20001228 	.word	0x20001228
 800e81c:	0801e0e8 	.word	0x0801e0e8
 800e820:	0801e100 	.word	0x0801e100
        } else {
          pcb->rtime = 0;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00a      	beq.n	800e852 <tcp_process+0x30a>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	6910      	ldr	r0, [r2, #16]
 800e846:	2200      	movs	r2, #0
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	4798      	blx	r3
 800e84c:	4603      	mov	r3, r0
 800e84e:	76bb      	strb	r3, [r7, #26]
 800e850:	e001      	b.n	800e856 <tcp_process+0x30e>
 800e852:	2300      	movs	r3, #0
 800e854:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e856:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e85a:	f113 0f0d 	cmn.w	r3, #13
 800e85e:	d102      	bne.n	800e866 <tcp_process+0x31e>
          return ERR_ABRT;
 800e860:	f06f 030c 	mvn.w	r3, #12
 800e864:	e250      	b.n	800ed08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	8b5b      	ldrh	r3, [r3, #26]
 800e86a:	f043 0302 	orr.w	r3, r3, #2
 800e86e:	b29a      	uxth	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e874:	e23a      	b.n	800ecec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e876:	4b9d      	ldr	r3, [pc, #628]	; (800eaec <tcp_process+0x5a4>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	f003 0310 	and.w	r3, r3, #16
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f000 8234 	beq.w	800ecec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e884:	4b9a      	ldr	r3, [pc, #616]	; (800eaf0 <tcp_process+0x5a8>)
 800e886:	6819      	ldr	r1, [r3, #0]
 800e888:	4b9a      	ldr	r3, [pc, #616]	; (800eaf4 <tcp_process+0x5ac>)
 800e88a:	881b      	ldrh	r3, [r3, #0]
 800e88c:	461a      	mov	r2, r3
 800e88e:	4b9a      	ldr	r3, [pc, #616]	; (800eaf8 <tcp_process+0x5b0>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e894:	4b99      	ldr	r3, [pc, #612]	; (800eafc <tcp_process+0x5b4>)
 800e896:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e898:	885b      	ldrh	r3, [r3, #2]
 800e89a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e89c:	4a97      	ldr	r2, [pc, #604]	; (800eafc <tcp_process+0x5b4>)
 800e89e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8a0:	8812      	ldrh	r2, [r2, #0]
 800e8a2:	b292      	uxth	r2, r2
 800e8a4:	9202      	str	r2, [sp, #8]
 800e8a6:	9301      	str	r3, [sp, #4]
 800e8a8:	4b95      	ldr	r3, [pc, #596]	; (800eb00 <tcp_process+0x5b8>)
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	4b95      	ldr	r3, [pc, #596]	; (800eb04 <tcp_process+0x5bc>)
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f003 f8e1 	bl	8011a78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8bc:	2b05      	cmp	r3, #5
 800e8be:	f200 8215 	bhi.w	800ecec <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f002 feab 	bl	8011624 <tcp_rexmit_rto>
      break;
 800e8ce:	e20d      	b.n	800ecec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e8d0:	4b86      	ldr	r3, [pc, #536]	; (800eaec <tcp_process+0x5a4>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 80a1 	beq.w	800ea20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e8de:	4b84      	ldr	r3, [pc, #528]	; (800eaf0 <tcp_process+0x5a8>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	db7e      	blt.n	800e9ec <tcp_process+0x4a4>
 800e8ee:	4b80      	ldr	r3, [pc, #512]	; (800eaf0 <tcp_process+0x5a8>)
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	dc77      	bgt.n	800e9ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2204      	movs	r2, #4
 800e900:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e90a:	23fa      	movs	r3, #250	; 0xfa
 800e90c:	76bb      	strb	r3, [r7, #26]
 800e90e:	e01d      	b.n	800e94c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <tcp_process+0x3e0>
 800e91a:	4b7b      	ldr	r3, [pc, #492]	; (800eb08 <tcp_process+0x5c0>)
 800e91c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e920:	497a      	ldr	r1, [pc, #488]	; (800eb0c <tcp_process+0x5c4>)
 800e922:	487b      	ldr	r0, [pc, #492]	; (800eb10 <tcp_process+0x5c8>)
 800e924:	f008 fea0 	bl	8017668 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00a      	beq.n	800e948 <tcp_process+0x400>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	6910      	ldr	r0, [r2, #16]
 800e93c:	2200      	movs	r2, #0
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	4798      	blx	r3
 800e942:	4603      	mov	r3, r0
 800e944:	76bb      	strb	r3, [r7, #26]
 800e946:	e001      	b.n	800e94c <tcp_process+0x404>
 800e948:	23f0      	movs	r3, #240	; 0xf0
 800e94a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e94c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00a      	beq.n	800e96a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e954:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e958:	f113 0f0d 	cmn.w	r3, #13
 800e95c:	d002      	beq.n	800e964 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7fd fc26 	bl	800c1b0 <tcp_abort>
            }
            return ERR_ABRT;
 800e964:	f06f 030c 	mvn.w	r3, #12
 800e968:	e1ce      	b.n	800ed08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fae0 	bl	800ef30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e970:	4b68      	ldr	r3, [pc, #416]	; (800eb14 <tcp_process+0x5cc>)
 800e972:	881b      	ldrh	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d005      	beq.n	800e984 <tcp_process+0x43c>
            recv_acked--;
 800e978:	4b66      	ldr	r3, [pc, #408]	; (800eb14 <tcp_process+0x5cc>)
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	4b64      	ldr	r3, [pc, #400]	; (800eb14 <tcp_process+0x5cc>)
 800e982:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e988:	009a      	lsls	r2, r3, #2
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	f241 111c 	movw	r1, #4380	; 0x111c
 800e994:	428b      	cmp	r3, r1
 800e996:	bf38      	it	cc
 800e998:	460b      	movcc	r3, r1
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d204      	bcs.n	800e9a8 <tcp_process+0x460>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	e00d      	b.n	800e9c4 <tcp_process+0x47c>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	f241 121c 	movw	r2, #4380	; 0x111c
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d904      	bls.n	800e9c0 <tcp_process+0x478>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	e001      	b.n	800e9c4 <tcp_process+0x47c>
 800e9c0:	f241 131c 	movw	r3, #4380	; 0x111c
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e9ca:	4b53      	ldr	r3, [pc, #332]	; (800eb18 <tcp_process+0x5d0>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	f003 0320 	and.w	r3, r3, #32
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d037      	beq.n	800ea46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8b5b      	ldrh	r3, [r3, #26]
 800e9da:	f043 0302 	orr.w	r3, r3, #2
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2207      	movs	r2, #7
 800e9e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e9ea:	e02c      	b.n	800ea46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ec:	4b40      	ldr	r3, [pc, #256]	; (800eaf0 <tcp_process+0x5a8>)
 800e9ee:	6819      	ldr	r1, [r3, #0]
 800e9f0:	4b40      	ldr	r3, [pc, #256]	; (800eaf4 <tcp_process+0x5ac>)
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	4b40      	ldr	r3, [pc, #256]	; (800eaf8 <tcp_process+0x5b0>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9fc:	4b3f      	ldr	r3, [pc, #252]	; (800eafc <tcp_process+0x5b4>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea00:	885b      	ldrh	r3, [r3, #2]
 800ea02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea04:	4a3d      	ldr	r2, [pc, #244]	; (800eafc <tcp_process+0x5b4>)
 800ea06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea08:	8812      	ldrh	r2, [r2, #0]
 800ea0a:	b292      	uxth	r2, r2
 800ea0c:	9202      	str	r2, [sp, #8]
 800ea0e:	9301      	str	r3, [sp, #4]
 800ea10:	4b3b      	ldr	r3, [pc, #236]	; (800eb00 <tcp_process+0x5b8>)
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	4b3b      	ldr	r3, [pc, #236]	; (800eb04 <tcp_process+0x5bc>)
 800ea16:	4602      	mov	r2, r0
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f003 f82d 	bl	8011a78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ea1e:	e167      	b.n	800ecf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ea20:	4b32      	ldr	r3, [pc, #200]	; (800eaec <tcp_process+0x5a4>)
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f000 8161 	beq.w	800ecf0 <tcp_process+0x7a8>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea32:	1e5a      	subs	r2, r3, #1
 800ea34:	4b30      	ldr	r3, [pc, #192]	; (800eaf8 <tcp_process+0x5b0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	f040 8159 	bne.w	800ecf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f002 fe12 	bl	8011668 <tcp_rexmit>
      break;
 800ea44:	e154      	b.n	800ecf0 <tcp_process+0x7a8>
 800ea46:	e153      	b.n	800ecf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fa71 	bl	800ef30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ea4e:	4b32      	ldr	r3, [pc, #200]	; (800eb18 <tcp_process+0x5d0>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	f003 0320 	and.w	r3, r3, #32
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 814c 	beq.w	800ecf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	8b5b      	ldrh	r3, [r3, #26]
 800ea60:	f043 0302 	orr.w	r3, r3, #2
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2207      	movs	r2, #7
 800ea6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea70:	e140      	b.n	800ecf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 fa5c 	bl	800ef30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ea78:	4b27      	ldr	r3, [pc, #156]	; (800eb18 <tcp_process+0x5d0>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	f003 0320 	and.w	r3, r3, #32
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d071      	beq.n	800eb68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea84:	4b19      	ldr	r3, [pc, #100]	; (800eaec <tcp_process+0x5a4>)
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	f003 0310 	and.w	r3, r3, #16
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d060      	beq.n	800eb52 <tcp_process+0x60a>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea94:	4b16      	ldr	r3, [pc, #88]	; (800eaf0 <tcp_process+0x5a8>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d15a      	bne.n	800eb52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d156      	bne.n	800eb52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	8b5b      	ldrh	r3, [r3, #26]
 800eaa8:	f043 0302 	orr.w	r3, r3, #2
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7fe fcfc 	bl	800d4b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eab8:	4b18      	ldr	r3, [pc, #96]	; (800eb1c <tcp_process+0x5d4>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d105      	bne.n	800eace <tcp_process+0x586>
 800eac2:	4b16      	ldr	r3, [pc, #88]	; (800eb1c <tcp_process+0x5d4>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	4a14      	ldr	r2, [pc, #80]	; (800eb1c <tcp_process+0x5d4>)
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	e02e      	b.n	800eb2c <tcp_process+0x5e4>
 800eace:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <tcp_process+0x5d4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	617b      	str	r3, [r7, #20]
 800ead4:	e027      	b.n	800eb26 <tcp_process+0x5de>
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d11f      	bne.n	800eb20 <tcp_process+0x5d8>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68da      	ldr	r2, [r3, #12]
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	60da      	str	r2, [r3, #12]
 800eae8:	e020      	b.n	800eb2c <tcp_process+0x5e4>
 800eaea:	bf00      	nop
 800eaec:	20001244 	.word	0x20001244
 800eaf0:	2000123c 	.word	0x2000123c
 800eaf4:	20001242 	.word	0x20001242
 800eaf8:	20001238 	.word	0x20001238
 800eafc:	20001228 	.word	0x20001228
 800eb00:	20009f3c 	.word	0x20009f3c
 800eb04:	20009f40 	.word	0x20009f40
 800eb08:	0801de58 	.word	0x0801de58
 800eb0c:	0801e114 	.word	0x0801e114
 800eb10:	0801dea4 	.word	0x0801dea4
 800eb14:	20001240 	.word	0x20001240
 800eb18:	20001245 	.word	0x20001245
 800eb1c:	2000d85c 	.word	0x2000d85c
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1d4      	bne.n	800ead6 <tcp_process+0x58e>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	60da      	str	r2, [r3, #12]
 800eb32:	4b77      	ldr	r3, [pc, #476]	; (800ed10 <tcp_process+0x7c8>)
 800eb34:	2201      	movs	r2, #1
 800eb36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	220a      	movs	r2, #10
 800eb3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eb3e:	4b75      	ldr	r3, [pc, #468]	; (800ed14 <tcp_process+0x7cc>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	60da      	str	r2, [r3, #12]
 800eb46:	4a73      	ldr	r2, [pc, #460]	; (800ed14 <tcp_process+0x7cc>)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6013      	str	r3, [r2, #0]
 800eb4c:	f003 f956 	bl	8011dfc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eb50:	e0d2      	b.n	800ecf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	8b5b      	ldrh	r3, [r3, #26]
 800eb56:	f043 0302 	orr.w	r3, r3, #2
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2208      	movs	r2, #8
 800eb64:	751a      	strb	r2, [r3, #20]
      break;
 800eb66:	e0c7      	b.n	800ecf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb68:	4b6b      	ldr	r3, [pc, #428]	; (800ed18 <tcp_process+0x7d0>)
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	f003 0310 	and.w	r3, r3, #16
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f000 80c1 	beq.w	800ecf8 <tcp_process+0x7b0>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb7a:	4b68      	ldr	r3, [pc, #416]	; (800ed1c <tcp_process+0x7d4>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	f040 80ba 	bne.w	800ecf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f040 80b5 	bne.w	800ecf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2206      	movs	r2, #6
 800eb92:	751a      	strb	r2, [r3, #20]
      break;
 800eb94:	e0b0      	b.n	800ecf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f9ca 	bl	800ef30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb9c:	4b60      	ldr	r3, [pc, #384]	; (800ed20 <tcp_process+0x7d8>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	f003 0320 	and.w	r3, r3, #32
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 80a9 	beq.w	800ecfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	8b5b      	ldrh	r3, [r3, #26]
 800ebae:	f043 0302 	orr.w	r3, r3, #2
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7fe fc79 	bl	800d4b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebbe:	4b59      	ldr	r3, [pc, #356]	; (800ed24 <tcp_process+0x7dc>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d105      	bne.n	800ebd4 <tcp_process+0x68c>
 800ebc8:	4b56      	ldr	r3, [pc, #344]	; (800ed24 <tcp_process+0x7dc>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	4a55      	ldr	r2, [pc, #340]	; (800ed24 <tcp_process+0x7dc>)
 800ebd0:	6013      	str	r3, [r2, #0]
 800ebd2:	e013      	b.n	800ebfc <tcp_process+0x6b4>
 800ebd4:	4b53      	ldr	r3, [pc, #332]	; (800ed24 <tcp_process+0x7dc>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	e00c      	b.n	800ebf6 <tcp_process+0x6ae>
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d104      	bne.n	800ebf0 <tcp_process+0x6a8>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	60da      	str	r2, [r3, #12]
 800ebee:	e005      	b.n	800ebfc <tcp_process+0x6b4>
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	613b      	str	r3, [r7, #16]
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1ef      	bne.n	800ebdc <tcp_process+0x694>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	60da      	str	r2, [r3, #12]
 800ec02:	4b43      	ldr	r3, [pc, #268]	; (800ed10 <tcp_process+0x7c8>)
 800ec04:	2201      	movs	r2, #1
 800ec06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	220a      	movs	r2, #10
 800ec0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec0e:	4b41      	ldr	r3, [pc, #260]	; (800ed14 <tcp_process+0x7cc>)
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	60da      	str	r2, [r3, #12]
 800ec16:	4a3f      	ldr	r2, [pc, #252]	; (800ed14 <tcp_process+0x7cc>)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	f003 f8ee 	bl	8011dfc <tcp_timer_needed>
      }
      break;
 800ec20:	e06c      	b.n	800ecfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 f984 	bl	800ef30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec28:	4b3b      	ldr	r3, [pc, #236]	; (800ed18 <tcp_process+0x7d0>)
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	f003 0310 	and.w	r3, r3, #16
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d065      	beq.n	800ed00 <tcp_process+0x7b8>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec38:	4b38      	ldr	r3, [pc, #224]	; (800ed1c <tcp_process+0x7d4>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d15f      	bne.n	800ed00 <tcp_process+0x7b8>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d15b      	bne.n	800ed00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7fe fc31 	bl	800d4b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec4e:	4b35      	ldr	r3, [pc, #212]	; (800ed24 <tcp_process+0x7dc>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d105      	bne.n	800ec64 <tcp_process+0x71c>
 800ec58:	4b32      	ldr	r3, [pc, #200]	; (800ed24 <tcp_process+0x7dc>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	4a31      	ldr	r2, [pc, #196]	; (800ed24 <tcp_process+0x7dc>)
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	e013      	b.n	800ec8c <tcp_process+0x744>
 800ec64:	4b2f      	ldr	r3, [pc, #188]	; (800ed24 <tcp_process+0x7dc>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	e00c      	b.n	800ec86 <tcp_process+0x73e>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d104      	bne.n	800ec80 <tcp_process+0x738>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68da      	ldr	r2, [r3, #12]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	60da      	str	r2, [r3, #12]
 800ec7e:	e005      	b.n	800ec8c <tcp_process+0x744>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1ef      	bne.n	800ec6c <tcp_process+0x724>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	60da      	str	r2, [r3, #12]
 800ec92:	4b1f      	ldr	r3, [pc, #124]	; (800ed10 <tcp_process+0x7c8>)
 800ec94:	2201      	movs	r2, #1
 800ec96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	220a      	movs	r2, #10
 800ec9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec9e:	4b1d      	ldr	r3, [pc, #116]	; (800ed14 <tcp_process+0x7cc>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	4a1b      	ldr	r2, [pc, #108]	; (800ed14 <tcp_process+0x7cc>)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6013      	str	r3, [r2, #0]
 800ecac:	f003 f8a6 	bl	8011dfc <tcp_timer_needed>
      }
      break;
 800ecb0:	e026      	b.n	800ed00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f93c 	bl	800ef30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ecb8:	4b17      	ldr	r3, [pc, #92]	; (800ed18 <tcp_process+0x7d0>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	f003 0310 	and.w	r3, r3, #16
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d01f      	beq.n	800ed04 <tcp_process+0x7bc>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecc8:	4b14      	ldr	r3, [pc, #80]	; (800ed1c <tcp_process+0x7d4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d119      	bne.n	800ed04 <tcp_process+0x7bc>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d115      	bne.n	800ed04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ecd8:	4b11      	ldr	r3, [pc, #68]	; (800ed20 <tcp_process+0x7d8>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f043 0310 	orr.w	r3, r3, #16
 800ece0:	b2da      	uxtb	r2, r3
 800ece2:	4b0f      	ldr	r3, [pc, #60]	; (800ed20 <tcp_process+0x7d8>)
 800ece4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ece6:	e00d      	b.n	800ed04 <tcp_process+0x7bc>
    default:
      break;
 800ece8:	bf00      	nop
 800ecea:	e00c      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ecec:	bf00      	nop
 800ecee:	e00a      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ecf0:	bf00      	nop
 800ecf2:	e008      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ecf4:	bf00      	nop
 800ecf6:	e006      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ecf8:	bf00      	nop
 800ecfa:	e004      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ecfc:	bf00      	nop
 800ecfe:	e002      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ed00:	bf00      	nop
 800ed02:	e000      	b.n	800ed06 <tcp_process+0x7be>
      break;
 800ed04:	bf00      	nop
  }
  return ERR_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3724      	adds	r7, #36	; 0x24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd90      	pop	{r4, r7, pc}
 800ed10:	2000d858 	.word	0x2000d858
 800ed14:	2000d86c 	.word	0x2000d86c
 800ed18:	20001244 	.word	0x20001244
 800ed1c:	2000123c 	.word	0x2000123c
 800ed20:	20001245 	.word	0x20001245
 800ed24:	2000d85c 	.word	0x2000d85c

0800ed28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ed28:	b590      	push	{r4, r7, lr}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d106      	bne.n	800ed46 <tcp_oos_insert_segment+0x1e>
 800ed38:	4b3b      	ldr	r3, [pc, #236]	; (800ee28 <tcp_oos_insert_segment+0x100>)
 800ed3a:	f240 421f 	movw	r2, #1055	; 0x41f
 800ed3e:	493b      	ldr	r1, [pc, #236]	; (800ee2c <tcp_oos_insert_segment+0x104>)
 800ed40:	483b      	ldr	r0, [pc, #236]	; (800ee30 <tcp_oos_insert_segment+0x108>)
 800ed42:	f008 fc91 	bl	8017668 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	68db      	ldr	r3, [r3, #12]
 800ed4a:	899b      	ldrh	r3, [r3, #12]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fb f8f8 	bl	8009f44 <lwip_htons>
 800ed54:	4603      	mov	r3, r0
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	f003 0301 	and.w	r3, r3, #1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d028      	beq.n	800edb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ed60:	6838      	ldr	r0, [r7, #0]
 800ed62:	f7fe f8b5 	bl	800ced0 <tcp_segs_free>
    next = NULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	603b      	str	r3, [r7, #0]
 800ed6a:	e056      	b.n	800ee1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	899b      	ldrh	r3, [r3, #12]
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fb f8e5 	bl	8009f44 <lwip_htons>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00d      	beq.n	800eda2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	899b      	ldrh	r3, [r3, #12]
 800ed8c:	b29c      	uxth	r4, r3
 800ed8e:	2001      	movs	r0, #1
 800ed90:	f7fb f8d8 	bl	8009f44 <lwip_htons>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	4322      	orrs	r2, r4
 800ed9e:	b292      	uxth	r2, r2
 800eda0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7fe f8a4 	bl	800cefa <tcp_seg_free>
    while (next &&
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00e      	beq.n	800edd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	891b      	ldrh	r3, [r3, #8]
 800edbc:	461a      	mov	r2, r3
 800edbe:	4b1d      	ldr	r3, [pc, #116]	; (800ee34 <tcp_oos_insert_segment+0x10c>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	441a      	add	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	8909      	ldrh	r1, [r1, #8]
 800edce:	440b      	add	r3, r1
 800edd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	daca      	bge.n	800ed6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d01e      	beq.n	800ee1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	891b      	ldrh	r3, [r3, #8]
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b14      	ldr	r3, [pc, #80]	; (800ee34 <tcp_oos_insert_segment+0x10c>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	441a      	add	r2, r3
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	1ad3      	subs	r3, r2, r3
    if (next &&
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	dd12      	ble.n	800ee1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	4b0d      	ldr	r3, [pc, #52]	; (800ee34 <tcp_oos_insert_segment+0x10c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	891b      	ldrh	r3, [r3, #8]
 800ee12:	4619      	mov	r1, r3
 800ee14:	4610      	mov	r0, r2
 800ee16:	f7fc faa9 	bl	800b36c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	601a      	str	r2, [r3, #0]
}
 800ee20:	bf00      	nop
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd90      	pop	{r4, r7, pc}
 800ee28:	0801de58 	.word	0x0801de58
 800ee2c:	0801e134 	.word	0x0801e134
 800ee30:	0801dea4 	.word	0x0801dea4
 800ee34:	20001238 	.word	0x20001238

0800ee38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ee38:	b5b0      	push	{r4, r5, r7, lr}
 800ee3a:	b086      	sub	sp, #24
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ee46:	e03e      	b.n	800eec6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fc fc96 	bl	800b788 <pbuf_clen>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee66:	8a7a      	ldrh	r2, [r7, #18]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d906      	bls.n	800ee7a <tcp_free_acked_segments+0x42>
 800ee6c:	4b2a      	ldr	r3, [pc, #168]	; (800ef18 <tcp_free_acked_segments+0xe0>)
 800ee6e:	f240 4257 	movw	r2, #1111	; 0x457
 800ee72:	492a      	ldr	r1, [pc, #168]	; (800ef1c <tcp_free_acked_segments+0xe4>)
 800ee74:	482a      	ldr	r0, [pc, #168]	; (800ef20 <tcp_free_acked_segments+0xe8>)
 800ee76:	f008 fbf7 	bl	8017668 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ee80:	8a7b      	ldrh	r3, [r7, #18]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	891a      	ldrh	r2, [r3, #8]
 800ee90:	4b24      	ldr	r3, [pc, #144]	; (800ef24 <tcp_free_acked_segments+0xec>)
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	4413      	add	r3, r2
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	4b22      	ldr	r3, [pc, #136]	; (800ef24 <tcp_free_acked_segments+0xec>)
 800ee9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ee9c:	6978      	ldr	r0, [r7, #20]
 800ee9e:	f7fe f82c 	bl	800cefa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00c      	beq.n	800eec6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d109      	bne.n	800eec6 <tcp_free_acked_segments+0x8e>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d106      	bne.n	800eec6 <tcp_free_acked_segments+0x8e>
 800eeb8:	4b17      	ldr	r3, [pc, #92]	; (800ef18 <tcp_free_acked_segments+0xe0>)
 800eeba:	f240 4261 	movw	r2, #1121	; 0x461
 800eebe:	491a      	ldr	r1, [pc, #104]	; (800ef28 <tcp_free_acked_segments+0xf0>)
 800eec0:	4817      	ldr	r0, [pc, #92]	; (800ef20 <tcp_free_acked_segments+0xe8>)
 800eec2:	f008 fbd1 	bl	8017668 <iprintf>
  while (seg_list != NULL &&
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d020      	beq.n	800ef0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb f84b 	bl	8009f6e <lwip_htonl>
 800eed8:	4604      	mov	r4, r0
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	891b      	ldrh	r3, [r3, #8]
 800eede:	461d      	mov	r5, r3
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	899b      	ldrh	r3, [r3, #12]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fb f82b 	bl	8009f44 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <tcp_free_acked_segments+0xc6>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e000      	b.n	800ef00 <tcp_free_acked_segments+0xc8>
 800eefe:	2300      	movs	r3, #0
 800ef00:	442b      	add	r3, r5
 800ef02:	18e2      	adds	r2, r4, r3
 800ef04:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <tcp_free_acked_segments+0xf4>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	dd9c      	ble.n	800ee48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ef0e:	68bb      	ldr	r3, [r7, #8]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bdb0      	pop	{r4, r5, r7, pc}
 800ef18:	0801de58 	.word	0x0801de58
 800ef1c:	0801e15c 	.word	0x0801e15c
 800ef20:	0801dea4 	.word	0x0801dea4
 800ef24:	20001240 	.word	0x20001240
 800ef28:	0801e184 	.word	0x0801e184
 800ef2c:	2000123c 	.word	0x2000123c

0800ef30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ef30:	b5b0      	push	{r4, r5, r7, lr}
 800ef32:	b094      	sub	sp, #80	; 0x50
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d106      	bne.n	800ef50 <tcp_receive+0x20>
 800ef42:	4ba6      	ldr	r3, [pc, #664]	; (800f1dc <tcp_receive+0x2ac>)
 800ef44:	f240 427b 	movw	r2, #1147	; 0x47b
 800ef48:	49a5      	ldr	r1, [pc, #660]	; (800f1e0 <tcp_receive+0x2b0>)
 800ef4a:	48a6      	ldr	r0, [pc, #664]	; (800f1e4 <tcp_receive+0x2b4>)
 800ef4c:	f008 fb8c 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	7d1b      	ldrb	r3, [r3, #20]
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d806      	bhi.n	800ef66 <tcp_receive+0x36>
 800ef58:	4ba0      	ldr	r3, [pc, #640]	; (800f1dc <tcp_receive+0x2ac>)
 800ef5a:	f240 427c 	movw	r2, #1148	; 0x47c
 800ef5e:	49a2      	ldr	r1, [pc, #648]	; (800f1e8 <tcp_receive+0x2b8>)
 800ef60:	48a0      	ldr	r0, [pc, #640]	; (800f1e4 <tcp_receive+0x2b4>)
 800ef62:	f008 fb81 	bl	8017668 <iprintf>

  if (flags & TCP_ACK) {
 800ef66:	4ba1      	ldr	r3, [pc, #644]	; (800f1ec <tcp_receive+0x2bc>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	f003 0310 	and.w	r3, r3, #16
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 8263 	beq.w	800f43a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef80:	4413      	add	r3, r2
 800ef82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef88:	4b99      	ldr	r3, [pc, #612]	; (800f1f0 <tcp_receive+0x2c0>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	db1b      	blt.n	800efca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef96:	4b96      	ldr	r3, [pc, #600]	; (800f1f0 <tcp_receive+0x2c0>)
 800ef98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d106      	bne.n	800efac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efa2:	4b94      	ldr	r3, [pc, #592]	; (800f1f4 <tcp_receive+0x2c4>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	db0e      	blt.n	800efca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efb0:	4b90      	ldr	r3, [pc, #576]	; (800f1f4 <tcp_receive+0x2c4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d125      	bne.n	800f004 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efb8:	4b8f      	ldr	r3, [pc, #572]	; (800f1f8 <tcp_receive+0x2c8>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	89db      	ldrh	r3, [r3, #14]
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d91c      	bls.n	800f004 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800efca:	4b8b      	ldr	r3, [pc, #556]	; (800f1f8 <tcp_receive+0x2c8>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	89db      	ldrh	r3, [r3, #14]
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d205      	bcs.n	800eff4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eff4:	4b7e      	ldr	r3, [pc, #504]	; (800f1f0 <tcp_receive+0x2c0>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800effc:	4b7d      	ldr	r3, [pc, #500]	; (800f1f4 <tcp_receive+0x2c4>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f004:	4b7b      	ldr	r3, [pc, #492]	; (800f1f4 <tcp_receive+0x2c4>)
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dc58      	bgt.n	800f0c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f012:	4b7a      	ldr	r3, [pc, #488]	; (800f1fc <tcp_receive+0x2cc>)
 800f014:	881b      	ldrh	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d14b      	bne.n	800f0b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f024:	4413      	add	r3, r2
 800f026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f028:	429a      	cmp	r2, r3
 800f02a:	d142      	bne.n	800f0b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f032:	2b00      	cmp	r3, #0
 800f034:	db3d      	blt.n	800f0b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f03a:	4b6e      	ldr	r3, [pc, #440]	; (800f1f4 <tcp_receive+0x2c4>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d137      	bne.n	800f0b2 <tcp_receive+0x182>
              found_dupack = 1;
 800f042:	2301      	movs	r3, #1
 800f044:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f04c:	2bff      	cmp	r3, #255	; 0xff
 800f04e:	d007      	beq.n	800f060 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f056:	3301      	adds	r3, #1
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f066:	2b03      	cmp	r3, #3
 800f068:	d91b      	bls.n	800f0a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f074:	4413      	add	r3, r2
 800f076:	b29a      	uxth	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f07e:	429a      	cmp	r2, r3
 800f080:	d30a      	bcc.n	800f098 <tcp_receive+0x168>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f08c:	4413      	add	r3, r2
 800f08e:	b29a      	uxth	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f096:	e004      	b.n	800f0a2 <tcp_receive+0x172>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f09e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d902      	bls.n	800f0b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f002 fb47 	bl	8011740 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f040 8160 	bne.w	800f37a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0c2:	e15a      	b.n	800f37a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0c4:	4b4b      	ldr	r3, [pc, #300]	; (800f1f4 <tcp_receive+0x2c4>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f2c0 814d 	blt.w	800f370 <tcp_receive+0x440>
 800f0d6:	4b47      	ldr	r3, [pc, #284]	; (800f1f4 <tcp_receive+0x2c4>)
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f300 8145 	bgt.w	800f370 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d010      	beq.n	800f114 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8b5b      	ldrh	r3, [r3, #26]
 800f0f6:	f023 0304 	bic.w	r3, r3, #4
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f122:	10db      	asrs	r3, r3, #3
 800f124:	b21b      	sxth	r3, r3
 800f126:	b29a      	uxth	r2, r3
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f12e:	b29b      	uxth	r3, r3
 800f130:	4413      	add	r3, r2
 800f132:	b29b      	uxth	r3, r3
 800f134:	b21a      	sxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f13c:	4b2d      	ldr	r3, [pc, #180]	; (800f1f4 <tcp_receive+0x2c4>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	b29a      	uxth	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f146:	b29b      	uxth	r3, r3
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f154:	4b27      	ldr	r3, [pc, #156]	; (800f1f4 <tcp_receive+0x2c4>)
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	7d1b      	ldrb	r3, [r3, #20]
 800f160:	2b03      	cmp	r3, #3
 800f162:	f240 8096 	bls.w	800f292 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f172:	429a      	cmp	r2, r3
 800f174:	d244      	bcs.n	800f200 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	8b5b      	ldrh	r3, [r3, #26]
 800f17a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <tcp_receive+0x256>
 800f182:	2301      	movs	r3, #1
 800f184:	e000      	b.n	800f188 <tcp_receive+0x258>
 800f186:	2302      	movs	r3, #2
 800f188:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f18c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f190:	b29a      	uxth	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f196:	fb12 f303 	smulbb	r3, r2, r3
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	bf28      	it	cs
 800f1a2:	4613      	movcs	r3, r2
 800f1a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1ae:	4413      	add	r3, r2
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d309      	bcc.n	800f1d0 <tcp_receive+0x2a0>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1ce:	e060      	b.n	800f292 <tcp_receive+0x362>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1da:	e05a      	b.n	800f292 <tcp_receive+0x362>
 800f1dc:	0801de58 	.word	0x0801de58
 800f1e0:	0801e1a4 	.word	0x0801e1a4
 800f1e4:	0801dea4 	.word	0x0801dea4
 800f1e8:	0801e1c0 	.word	0x0801e1c0
 800f1ec:	20001244 	.word	0x20001244
 800f1f0:	20001238 	.word	0x20001238
 800f1f4:	2000123c 	.word	0x2000123c
 800f1f8:	20001228 	.word	0x20001228
 800f1fc:	20001242 	.word	0x20001242
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f208:	4413      	add	r3, r2
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f212:	429a      	cmp	r2, r3
 800f214:	d309      	bcc.n	800f22a <tcp_receive+0x2fa>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f21c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f21e:	4413      	add	r3, r2
 800f220:	b29a      	uxth	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f228:	e004      	b.n	800f234 <tcp_receive+0x304>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f240:	429a      	cmp	r2, r3
 800f242:	d326      	bcc.n	800f292 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	b29a      	uxth	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f264:	4413      	add	r3, r2
 800f266:	b29a      	uxth	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f26e:	429a      	cmp	r2, r3
 800f270:	d30a      	bcc.n	800f288 <tcp_receive+0x358>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27c:	4413      	add	r3, r2
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f286:	e004      	b.n	800f292 <tcp_receive+0x362>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f28e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f29a:	4a98      	ldr	r2, [pc, #608]	; (800f4fc <tcp_receive+0x5cc>)
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff fdcb 	bl	800ee38 <tcp_free_acked_segments>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2b0:	4a93      	ldr	r2, [pc, #588]	; (800f500 <tcp_receive+0x5d0>)
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fdc0 	bl	800ee38 <tcp_free_acked_segments>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d104      	bne.n	800f2d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2cc:	861a      	strh	r2, [r3, #48]	; 0x30
 800f2ce:	e002      	b.n	800f2d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d103      	bne.n	800f2ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f2f2:	4b84      	ldr	r3, [pc, #528]	; (800f504 <tcp_receive+0x5d4>)
 800f2f4:	881b      	ldrh	r3, [r3, #0]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	8b5b      	ldrh	r3, [r3, #26]
 800f304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d035      	beq.n	800f378 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f310:	2b00      	cmp	r3, #0
 800f312:	d118      	bne.n	800f346 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00c      	beq.n	800f336 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fa fe20 	bl	8009f6e <lwip_htonl>
 800f32e:	4603      	mov	r3, r0
 800f330:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f332:	2b00      	cmp	r3, #0
 800f334:	dc20      	bgt.n	800f378 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	8b5b      	ldrh	r3, [r3, #26]
 800f33a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f33e:	b29a      	uxth	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f344:	e018      	b.n	800f378 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f7fa fe0b 	bl	8009f6e <lwip_htonl>
 800f358:	4603      	mov	r3, r0
 800f35a:	1ae3      	subs	r3, r4, r3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	dc0b      	bgt.n	800f378 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	8b5b      	ldrh	r3, [r3, #26]
 800f364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f368:	b29a      	uxth	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f36e:	e003      	b.n	800f378 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f002 fbd3 	bl	8011b1c <tcp_send_empty_ack>
 800f376:	e000      	b.n	800f37a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f378:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d05b      	beq.n	800f43a <tcp_receive+0x50a>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f386:	4b60      	ldr	r3, [pc, #384]	; (800f508 <tcp_receive+0x5d8>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da54      	bge.n	800f43a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f390:	4b5e      	ldr	r3, [pc, #376]	; (800f50c <tcp_receive+0x5dc>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	b29a      	uxth	r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	1ad3      	subs	r3, r2, r3
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3ae:	10db      	asrs	r3, r3, #3
 800f3b0:	b21b      	sxth	r3, r3
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3c8:	4413      	add	r3, r2
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	b21a      	sxth	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f3d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	da05      	bge.n	800f3e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f3da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3de:	425b      	negs	r3, r3
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f3e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3f0:	109b      	asrs	r3, r3, #2
 800f3f2:	b21b      	sxth	r3, r3
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f404:	b29a      	uxth	r2, r3
 800f406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f40a:	4413      	add	r3, r2
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	b21a      	sxth	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f41a:	10db      	asrs	r3, r3, #3
 800f41c:	b21b      	sxth	r3, r3
 800f41e:	b29a      	uxth	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f426:	b29b      	uxth	r3, r3
 800f428:	4413      	add	r3, r2
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b21a      	sxth	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f43a:	4b35      	ldr	r3, [pc, #212]	; (800f510 <tcp_receive+0x5e0>)
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 84e1 	beq.w	800fe06 <tcp_receive+0xed6>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
 800f448:	2b06      	cmp	r3, #6
 800f44a:	f200 84dc 	bhi.w	800fe06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f452:	4b30      	ldr	r3, [pc, #192]	; (800f514 <tcp_receive+0x5e4>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	3b01      	subs	r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f2c0 808e 	blt.w	800f57c <tcp_receive+0x64c>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f464:	4b2a      	ldr	r3, [pc, #168]	; (800f510 <tcp_receive+0x5e0>)
 800f466:	881b      	ldrh	r3, [r3, #0]
 800f468:	4619      	mov	r1, r3
 800f46a:	4b2a      	ldr	r3, [pc, #168]	; (800f514 <tcp_receive+0x5e4>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	440b      	add	r3, r1
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	3301      	adds	r3, #1
 800f474:	2b00      	cmp	r3, #0
 800f476:	f300 8081 	bgt.w	800f57c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f47a:	4b27      	ldr	r3, [pc, #156]	; (800f518 <tcp_receive+0x5e8>)
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f484:	4b23      	ldr	r3, [pc, #140]	; (800f514 <tcp_receive+0x5e4>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f48c:	4b22      	ldr	r3, [pc, #136]	; (800f518 <tcp_receive+0x5e8>)
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d106      	bne.n	800f4a2 <tcp_receive+0x572>
 800f494:	4b21      	ldr	r3, [pc, #132]	; (800f51c <tcp_receive+0x5ec>)
 800f496:	f240 5294 	movw	r2, #1428	; 0x594
 800f49a:	4921      	ldr	r1, [pc, #132]	; (800f520 <tcp_receive+0x5f0>)
 800f49c:	4821      	ldr	r0, [pc, #132]	; (800f524 <tcp_receive+0x5f4>)
 800f49e:	f008 f8e3 	bl	8017668 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d906      	bls.n	800f4ba <tcp_receive+0x58a>
 800f4ac:	4b1b      	ldr	r3, [pc, #108]	; (800f51c <tcp_receive+0x5ec>)
 800f4ae:	f240 5295 	movw	r2, #1429	; 0x595
 800f4b2:	491d      	ldr	r1, [pc, #116]	; (800f528 <tcp_receive+0x5f8>)
 800f4b4:	481b      	ldr	r0, [pc, #108]	; (800f524 <tcp_receive+0x5f4>)
 800f4b6:	f008 f8d7 	bl	8017668 <iprintf>
      off = (u16_t)off32;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f4c0:	4b15      	ldr	r3, [pc, #84]	; (800f518 <tcp_receive+0x5e8>)
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	891b      	ldrh	r3, [r3, #8]
 800f4c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d906      	bls.n	800f4dc <tcp_receive+0x5ac>
 800f4ce:	4b13      	ldr	r3, [pc, #76]	; (800f51c <tcp_receive+0x5ec>)
 800f4d0:	f240 5297 	movw	r2, #1431	; 0x597
 800f4d4:	4915      	ldr	r1, [pc, #84]	; (800f52c <tcp_receive+0x5fc>)
 800f4d6:	4813      	ldr	r0, [pc, #76]	; (800f524 <tcp_receive+0x5f4>)
 800f4d8:	f008 f8c6 	bl	8017668 <iprintf>
      inseg.len -= off;
 800f4dc:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <tcp_receive+0x5e8>)
 800f4de:	891a      	ldrh	r2, [r3, #8]
 800f4e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	4b0b      	ldr	r3, [pc, #44]	; (800f518 <tcp_receive+0x5e8>)
 800f4ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f4ec:	4b0a      	ldr	r3, [pc, #40]	; (800f518 <tcp_receive+0x5e8>)
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	891a      	ldrh	r2, [r3, #8]
 800f4f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f4fa:	e029      	b.n	800f550 <tcp_receive+0x620>
 800f4fc:	0801e1dc 	.word	0x0801e1dc
 800f500:	0801e1e4 	.word	0x0801e1e4
 800f504:	20001240 	.word	0x20001240
 800f508:	2000123c 	.word	0x2000123c
 800f50c:	2000d860 	.word	0x2000d860
 800f510:	20001242 	.word	0x20001242
 800f514:	20001238 	.word	0x20001238
 800f518:	20001218 	.word	0x20001218
 800f51c:	0801de58 	.word	0x0801de58
 800f520:	0801e1ec 	.word	0x0801e1ec
 800f524:	0801dea4 	.word	0x0801dea4
 800f528:	0801e1fc 	.word	0x0801e1fc
 800f52c:	0801e20c 	.word	0x0801e20c
        off -= p->len;
 800f530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f532:	895b      	ldrh	r3, [r3, #10]
 800f534:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f540:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f542:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f546:	2200      	movs	r2, #0
 800f548:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f552:	895b      	ldrh	r3, [r3, #10]
 800f554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f558:	429a      	cmp	r2, r3
 800f55a:	d8e9      	bhi.n	800f530 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f55c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f560:	4619      	mov	r1, r3
 800f562:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f564:	f7fc f802 	bl	800b56c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56c:	4a91      	ldr	r2, [pc, #580]	; (800f7b4 <tcp_receive+0x884>)
 800f56e:	6013      	str	r3, [r2, #0]
 800f570:	4b91      	ldr	r3, [pc, #580]	; (800f7b8 <tcp_receive+0x888>)
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	4a8f      	ldr	r2, [pc, #572]	; (800f7b4 <tcp_receive+0x884>)
 800f576:	6812      	ldr	r2, [r2, #0]
 800f578:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f57a:	e00d      	b.n	800f598 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f57c:	4b8d      	ldr	r3, [pc, #564]	; (800f7b4 <tcp_receive+0x884>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f584:	1ad3      	subs	r3, r2, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	da06      	bge.n	800f598 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	8b5b      	ldrh	r3, [r3, #26]
 800f58e:	f043 0302 	orr.w	r3, r3, #2
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f598:	4b86      	ldr	r3, [pc, #536]	; (800f7b4 <tcp_receive+0x884>)
 800f59a:	681a      	ldr	r2, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f2c0 842a 	blt.w	800fdfc <tcp_receive+0xecc>
 800f5a8:	4b82      	ldr	r3, [pc, #520]	; (800f7b4 <tcp_receive+0x884>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5b4:	440b      	add	r3, r1
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f300 841e 	bgt.w	800fdfc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5c4:	4b7b      	ldr	r3, [pc, #492]	; (800f7b4 <tcp_receive+0x884>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	f040 829a 	bne.w	800fb02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f5ce:	4b7a      	ldr	r3, [pc, #488]	; (800f7b8 <tcp_receive+0x888>)
 800f5d0:	891c      	ldrh	r4, [r3, #8]
 800f5d2:	4b79      	ldr	r3, [pc, #484]	; (800f7b8 <tcp_receive+0x888>)
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	899b      	ldrh	r3, [r3, #12]
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fa fcb2 	bl	8009f44 <lwip_htons>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	f003 0303 	and.w	r3, r3, #3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d001      	beq.n	800f5f0 <tcp_receive+0x6c0>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e000      	b.n	800f5f2 <tcp_receive+0x6c2>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4423      	add	r3, r4
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	4b71      	ldr	r3, [pc, #452]	; (800f7bc <tcp_receive+0x88c>)
 800f5f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5fe:	4b6f      	ldr	r3, [pc, #444]	; (800f7bc <tcp_receive+0x88c>)
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	429a      	cmp	r2, r3
 800f604:	d275      	bcs.n	800f6f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f606:	4b6c      	ldr	r3, [pc, #432]	; (800f7b8 <tcp_receive+0x888>)
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fa fc98 	bl	8009f44 <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d01f      	beq.n	800f660 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f620:	4b65      	ldr	r3, [pc, #404]	; (800f7b8 <tcp_receive+0x888>)
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	899b      	ldrh	r3, [r3, #12]
 800f626:	b29b      	uxth	r3, r3
 800f628:	b21b      	sxth	r3, r3
 800f62a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f62e:	b21c      	sxth	r4, r3
 800f630:	4b61      	ldr	r3, [pc, #388]	; (800f7b8 <tcp_receive+0x888>)
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	899b      	ldrh	r3, [r3, #12]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fa fc83 	bl	8009f44 <lwip_htons>
 800f63e:	4603      	mov	r3, r0
 800f640:	b2db      	uxtb	r3, r3
 800f642:	b29b      	uxth	r3, r3
 800f644:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f648:	b29b      	uxth	r3, r3
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fa fc7a 	bl	8009f44 <lwip_htons>
 800f650:	4603      	mov	r3, r0
 800f652:	b21b      	sxth	r3, r3
 800f654:	4323      	orrs	r3, r4
 800f656:	b21a      	sxth	r2, r3
 800f658:	4b57      	ldr	r3, [pc, #348]	; (800f7b8 <tcp_receive+0x888>)
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	b292      	uxth	r2, r2
 800f65e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f664:	4b54      	ldr	r3, [pc, #336]	; (800f7b8 <tcp_receive+0x888>)
 800f666:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f668:	4b53      	ldr	r3, [pc, #332]	; (800f7b8 <tcp_receive+0x888>)
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	899b      	ldrh	r3, [r3, #12]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	4618      	mov	r0, r3
 800f672:	f7fa fc67 	bl	8009f44 <lwip_htons>
 800f676:	4603      	mov	r3, r0
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	f003 0302 	and.w	r3, r3, #2
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d005      	beq.n	800f68e <tcp_receive+0x75e>
            inseg.len -= 1;
 800f682:	4b4d      	ldr	r3, [pc, #308]	; (800f7b8 <tcp_receive+0x888>)
 800f684:	891b      	ldrh	r3, [r3, #8]
 800f686:	3b01      	subs	r3, #1
 800f688:	b29a      	uxth	r2, r3
 800f68a:	4b4b      	ldr	r3, [pc, #300]	; (800f7b8 <tcp_receive+0x888>)
 800f68c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f68e:	4b4a      	ldr	r3, [pc, #296]	; (800f7b8 <tcp_receive+0x888>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	4a49      	ldr	r2, [pc, #292]	; (800f7b8 <tcp_receive+0x888>)
 800f694:	8912      	ldrh	r2, [r2, #8]
 800f696:	4611      	mov	r1, r2
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fb fe67 	bl	800b36c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f69e:	4b46      	ldr	r3, [pc, #280]	; (800f7b8 <tcp_receive+0x888>)
 800f6a0:	891c      	ldrh	r4, [r3, #8]
 800f6a2:	4b45      	ldr	r3, [pc, #276]	; (800f7b8 <tcp_receive+0x888>)
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	899b      	ldrh	r3, [r3, #12]
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fa fc4a 	bl	8009f44 <lwip_htons>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	f003 0303 	and.w	r3, r3, #3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <tcp_receive+0x790>
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e000      	b.n	800f6c2 <tcp_receive+0x792>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	4423      	add	r3, r4
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	4b3d      	ldr	r3, [pc, #244]	; (800f7bc <tcp_receive+0x88c>)
 800f6c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f6ca:	4b3c      	ldr	r3, [pc, #240]	; (800f7bc <tcp_receive+0x88c>)
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	4b38      	ldr	r3, [pc, #224]	; (800f7b4 <tcp_receive+0x884>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6da:	6879      	ldr	r1, [r7, #4]
 800f6dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6de:	440b      	add	r3, r1
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d006      	beq.n	800f6f2 <tcp_receive+0x7c2>
 800f6e4:	4b36      	ldr	r3, [pc, #216]	; (800f7c0 <tcp_receive+0x890>)
 800f6e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f6ea:	4936      	ldr	r1, [pc, #216]	; (800f7c4 <tcp_receive+0x894>)
 800f6ec:	4836      	ldr	r0, [pc, #216]	; (800f7c8 <tcp_receive+0x898>)
 800f6ee:	f007 ffbb 	bl	8017668 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f000 80e7 	beq.w	800f8ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6fc:	4b2e      	ldr	r3, [pc, #184]	; (800f7b8 <tcp_receive+0x888>)
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7fa fc1d 	bl	8009f44 <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	d010      	beq.n	800f738 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f716:	e00a      	b.n	800f72e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f71c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f7fd fbe6 	bl	800cefa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f0      	bne.n	800f718 <tcp_receive+0x7e8>
 800f736:	e0c8      	b.n	800f8ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f73c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f73e:	e052      	b.n	800f7e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	899b      	ldrh	r3, [r3, #12]
 800f746:	b29b      	uxth	r3, r3
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fa fbfb 	bl	8009f44 <lwip_htons>
 800f74e:	4603      	mov	r3, r0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b00      	cmp	r3, #0
 800f758:	d03d      	beq.n	800f7d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f75a:	4b17      	ldr	r3, [pc, #92]	; (800f7b8 <tcp_receive+0x888>)
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	899b      	ldrh	r3, [r3, #12]
 800f760:	b29b      	uxth	r3, r3
 800f762:	4618      	mov	r0, r3
 800f764:	f7fa fbee 	bl	8009f44 <lwip_htons>
 800f768:	4603      	mov	r3, r0
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f770:	2b00      	cmp	r3, #0
 800f772:	d130      	bne.n	800f7d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f774:	4b10      	ldr	r3, [pc, #64]	; (800f7b8 <tcp_receive+0x888>)
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	899b      	ldrh	r3, [r3, #12]
 800f77a:	b29c      	uxth	r4, r3
 800f77c:	2001      	movs	r0, #1
 800f77e:	f7fa fbe1 	bl	8009f44 <lwip_htons>
 800f782:	4603      	mov	r3, r0
 800f784:	461a      	mov	r2, r3
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <tcp_receive+0x888>)
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	4322      	orrs	r2, r4
 800f78c:	b292      	uxth	r2, r2
 800f78e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f790:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <tcp_receive+0x888>)
 800f792:	891c      	ldrh	r4, [r3, #8]
 800f794:	4b08      	ldr	r3, [pc, #32]	; (800f7b8 <tcp_receive+0x888>)
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	899b      	ldrh	r3, [r3, #12]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fa fbd1 	bl	8009f44 <lwip_htons>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	f003 0303 	and.w	r3, r3, #3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00e      	beq.n	800f7cc <tcp_receive+0x89c>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e00d      	b.n	800f7ce <tcp_receive+0x89e>
 800f7b2:	bf00      	nop
 800f7b4:	20001238 	.word	0x20001238
 800f7b8:	20001218 	.word	0x20001218
 800f7bc:	20001242 	.word	0x20001242
 800f7c0:	0801de58 	.word	0x0801de58
 800f7c4:	0801e21c 	.word	0x0801e21c
 800f7c8:	0801dea4 	.word	0x0801dea4
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4423      	add	r3, r4
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	4b98      	ldr	r3, [pc, #608]	; (800fa34 <tcp_receive+0xb04>)
 800f7d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f7e0:	6938      	ldr	r0, [r7, #16]
 800f7e2:	f7fd fb8a 	bl	800cefa <tcp_seg_free>
            while (next &&
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00e      	beq.n	800f80a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f7ec:	4b91      	ldr	r3, [pc, #580]	; (800fa34 <tcp_receive+0xb04>)
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b91      	ldr	r3, [pc, #580]	; (800fa38 <tcp_receive+0xb08>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	441a      	add	r2, r3
 800f7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f800:	8909      	ldrh	r1, [r1, #8]
 800f802:	440b      	add	r3, r1
 800f804:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f806:	2b00      	cmp	r3, #0
 800f808:	da9a      	bge.n	800f740 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d059      	beq.n	800f8c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f810:	4b88      	ldr	r3, [pc, #544]	; (800fa34 <tcp_receive+0xb04>)
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	461a      	mov	r2, r3
 800f816:	4b88      	ldr	r3, [pc, #544]	; (800fa38 <tcp_receive+0xb08>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	441a      	add	r2, r3
 800f81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd4d      	ble.n	800f8c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	b29a      	uxth	r2, r3
 800f830:	4b81      	ldr	r3, [pc, #516]	; (800fa38 <tcp_receive+0xb08>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	b29b      	uxth	r3, r3
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	b29a      	uxth	r2, r3
 800f83a:	4b80      	ldr	r3, [pc, #512]	; (800fa3c <tcp_receive+0xb0c>)
 800f83c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f83e:	4b7f      	ldr	r3, [pc, #508]	; (800fa3c <tcp_receive+0xb0c>)
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	899b      	ldrh	r3, [r3, #12]
 800f844:	b29b      	uxth	r3, r3
 800f846:	4618      	mov	r0, r3
 800f848:	f7fa fb7c 	bl	8009f44 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	f003 0302 	and.w	r3, r3, #2
 800f854:	2b00      	cmp	r3, #0
 800f856:	d005      	beq.n	800f864 <tcp_receive+0x934>
                inseg.len -= 1;
 800f858:	4b78      	ldr	r3, [pc, #480]	; (800fa3c <tcp_receive+0xb0c>)
 800f85a:	891b      	ldrh	r3, [r3, #8]
 800f85c:	3b01      	subs	r3, #1
 800f85e:	b29a      	uxth	r2, r3
 800f860:	4b76      	ldr	r3, [pc, #472]	; (800fa3c <tcp_receive+0xb0c>)
 800f862:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f864:	4b75      	ldr	r3, [pc, #468]	; (800fa3c <tcp_receive+0xb0c>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4a74      	ldr	r2, [pc, #464]	; (800fa3c <tcp_receive+0xb0c>)
 800f86a:	8912      	ldrh	r2, [r2, #8]
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fb fd7c 	bl	800b36c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f874:	4b71      	ldr	r3, [pc, #452]	; (800fa3c <tcp_receive+0xb0c>)
 800f876:	891c      	ldrh	r4, [r3, #8]
 800f878:	4b70      	ldr	r3, [pc, #448]	; (800fa3c <tcp_receive+0xb0c>)
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	899b      	ldrh	r3, [r3, #12]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	4618      	mov	r0, r3
 800f882:	f7fa fb5f 	bl	8009f44 <lwip_htons>
 800f886:	4603      	mov	r3, r0
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	f003 0303 	and.w	r3, r3, #3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <tcp_receive+0x966>
 800f892:	2301      	movs	r3, #1
 800f894:	e000      	b.n	800f898 <tcp_receive+0x968>
 800f896:	2300      	movs	r3, #0
 800f898:	4423      	add	r3, r4
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	4b65      	ldr	r3, [pc, #404]	; (800fa34 <tcp_receive+0xb04>)
 800f89e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f8a0:	4b64      	ldr	r3, [pc, #400]	; (800fa34 <tcp_receive+0xb04>)
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b64      	ldr	r3, [pc, #400]	; (800fa38 <tcp_receive+0xb08>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d006      	beq.n	800f8c4 <tcp_receive+0x994>
 800f8b6:	4b62      	ldr	r3, [pc, #392]	; (800fa40 <tcp_receive+0xb10>)
 800f8b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f8bc:	4961      	ldr	r1, [pc, #388]	; (800fa44 <tcp_receive+0xb14>)
 800f8be:	4862      	ldr	r0, [pc, #392]	; (800fa48 <tcp_receive+0xb18>)
 800f8c0:	f007 fed2 	bl	8017668 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f8ca:	4b5a      	ldr	r3, [pc, #360]	; (800fa34 <tcp_receive+0xb04>)
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4b59      	ldr	r3, [pc, #356]	; (800fa38 <tcp_receive+0xb08>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	441a      	add	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8de:	4b55      	ldr	r3, [pc, #340]	; (800fa34 <tcp_receive+0xb04>)
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d206      	bcs.n	800f8f4 <tcp_receive+0x9c4>
 800f8e6:	4b56      	ldr	r3, [pc, #344]	; (800fa40 <tcp_receive+0xb10>)
 800f8e8:	f240 6207 	movw	r2, #1543	; 0x607
 800f8ec:	4957      	ldr	r1, [pc, #348]	; (800fa4c <tcp_receive+0xb1c>)
 800f8ee:	4856      	ldr	r0, [pc, #344]	; (800fa48 <tcp_receive+0xb18>)
 800f8f0:	f007 feba 	bl	8017668 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8f8:	4b4e      	ldr	r3, [pc, #312]	; (800fa34 <tcp_receive+0xb04>)
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7fc fdd3 	bl	800c4b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f90a:	4b4c      	ldr	r3, [pc, #304]	; (800fa3c <tcp_receive+0xb0c>)
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	891b      	ldrh	r3, [r3, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d006      	beq.n	800f922 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f914:	4b49      	ldr	r3, [pc, #292]	; (800fa3c <tcp_receive+0xb0c>)
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	4a4d      	ldr	r2, [pc, #308]	; (800fa50 <tcp_receive+0xb20>)
 800f91a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f91c:	4b47      	ldr	r3, [pc, #284]	; (800fa3c <tcp_receive+0xb0c>)
 800f91e:	2200      	movs	r2, #0
 800f920:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f922:	4b46      	ldr	r3, [pc, #280]	; (800fa3c <tcp_receive+0xb0c>)
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	899b      	ldrh	r3, [r3, #12]
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fa fb0a 	bl	8009f44 <lwip_htons>
 800f930:	4603      	mov	r3, r0
 800f932:	b2db      	uxtb	r3, r3
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 80b8 	beq.w	800faae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f93e:	4b45      	ldr	r3, [pc, #276]	; (800fa54 <tcp_receive+0xb24>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	f043 0320 	orr.w	r3, r3, #32
 800f946:	b2da      	uxtb	r2, r3
 800f948:	4b42      	ldr	r3, [pc, #264]	; (800fa54 <tcp_receive+0xb24>)
 800f94a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f94c:	e0af      	b.n	800faae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f952:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	4a36      	ldr	r2, [pc, #216]	; (800fa38 <tcp_receive+0xb08>)
 800f95e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	891b      	ldrh	r3, [r3, #8]
 800f964:	461c      	mov	r4, r3
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	899b      	ldrh	r3, [r3, #12]
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fa fae8 	bl	8009f44 <lwip_htons>
 800f974:	4603      	mov	r3, r0
 800f976:	b2db      	uxtb	r3, r3
 800f978:	f003 0303 	and.w	r3, r3, #3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <tcp_receive+0xa54>
 800f980:	2301      	movs	r3, #1
 800f982:	e000      	b.n	800f986 <tcp_receive+0xa56>
 800f984:	2300      	movs	r3, #0
 800f986:	191a      	adds	r2, r3, r4
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	441a      	add	r2, r3
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f996:	461c      	mov	r4, r3
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	891b      	ldrh	r3, [r3, #8]
 800f99c:	461d      	mov	r5, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	899b      	ldrh	r3, [r3, #12]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fa facc 	bl	8009f44 <lwip_htons>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	f003 0303 	and.w	r3, r3, #3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <tcp_receive+0xa8c>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <tcp_receive+0xa8e>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	442b      	add	r3, r5
 800f9c0:	429c      	cmp	r4, r3
 800f9c2:	d206      	bcs.n	800f9d2 <tcp_receive+0xaa2>
 800f9c4:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <tcp_receive+0xb10>)
 800f9c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800f9ca:	4923      	ldr	r1, [pc, #140]	; (800fa58 <tcp_receive+0xb28>)
 800f9cc:	481e      	ldr	r0, [pc, #120]	; (800fa48 <tcp_receive+0xb18>)
 800f9ce:	f007 fe4b 	bl	8017668 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	891b      	ldrh	r3, [r3, #8]
 800f9d6:	461c      	mov	r4, r3
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	899b      	ldrh	r3, [r3, #12]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fa faaf 	bl	8009f44 <lwip_htons>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	f003 0303 	and.w	r3, r3, #3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <tcp_receive+0xac6>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e000      	b.n	800f9f8 <tcp_receive+0xac8>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	1919      	adds	r1, r3, r4
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9fe:	b28b      	uxth	r3, r1
 800fa00:	1ad3      	subs	r3, r2, r3
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7fc fd51 	bl	800c4b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	891b      	ldrh	r3, [r3, #8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d028      	beq.n	800fa6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fa18:	4b0d      	ldr	r3, [pc, #52]	; (800fa50 <tcp_receive+0xb20>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d01d      	beq.n	800fa5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fa20:	4b0b      	ldr	r3, [pc, #44]	; (800fa50 <tcp_receive+0xb20>)
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	f7fb fee6 	bl	800b7fc <pbuf_cat>
 800fa30:	e018      	b.n	800fa64 <tcp_receive+0xb34>
 800fa32:	bf00      	nop
 800fa34:	20001242 	.word	0x20001242
 800fa38:	20001238 	.word	0x20001238
 800fa3c:	20001218 	.word	0x20001218
 800fa40:	0801de58 	.word	0x0801de58
 800fa44:	0801e254 	.word	0x0801e254
 800fa48:	0801dea4 	.word	0x0801dea4
 800fa4c:	0801e290 	.word	0x0801e290
 800fa50:	20001248 	.word	0x20001248
 800fa54:	20001245 	.word	0x20001245
 800fa58:	0801e2b0 	.word	0x0801e2b0
            } else {
              recv_data = cseg->p;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	4a70      	ldr	r2, [pc, #448]	; (800fc24 <tcp_receive+0xcf4>)
 800fa62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	2200      	movs	r2, #0
 800fa68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	899b      	ldrh	r3, [r3, #12]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fa fa66 	bl	8009f44 <lwip_htons>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00d      	beq.n	800faa0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fa84:	4b68      	ldr	r3, [pc, #416]	; (800fc28 <tcp_receive+0xcf8>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	f043 0320 	orr.w	r3, r3, #32
 800fa8c:	b2da      	uxtb	r2, r3
 800fa8e:	4b66      	ldr	r3, [pc, #408]	; (800fc28 <tcp_receive+0xcf8>)
 800fa90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	7d1b      	ldrb	r3, [r3, #20]
 800fa96:	2b04      	cmp	r3, #4
 800fa98:	d102      	bne.n	800faa0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2207      	movs	r2, #7
 800fa9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800faa8:	68b8      	ldr	r0, [r7, #8]
 800faaa:	f7fd fa26 	bl	800cefa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d008      	beq.n	800fac8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fac2:	429a      	cmp	r2, r3
 800fac4:	f43f af43 	beq.w	800f94e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8b5b      	ldrh	r3, [r3, #26]
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00e      	beq.n	800faf2 <tcp_receive+0xbc2>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	8b5b      	ldrh	r3, [r3, #26]
 800fad8:	f023 0301 	bic.w	r3, r3, #1
 800fadc:	b29a      	uxth	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	835a      	strh	r2, [r3, #26]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8b5b      	ldrh	r3, [r3, #26]
 800fae6:	f043 0302 	orr.w	r3, r3, #2
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800faf0:	e188      	b.n	800fe04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	8b5b      	ldrh	r3, [r3, #26]
 800faf6:	f043 0301 	orr.w	r3, r3, #1
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb00:	e180      	b.n	800fe04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fb0a:	4848      	ldr	r0, [pc, #288]	; (800fc2c <tcp_receive+0xcfc>)
 800fb0c:	f7fd fa2e 	bl	800cf6c <tcp_seg_copy>
 800fb10:	4602      	mov	r2, r0
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	675a      	str	r2, [r3, #116]	; 0x74
 800fb16:	e16d      	b.n	800fdf4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb20:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb22:	e157      	b.n	800fdd4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	685a      	ldr	r2, [r3, #4]
 800fb2a:	4b41      	ldr	r3, [pc, #260]	; (800fc30 <tcp_receive+0xd00>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d11d      	bne.n	800fb6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fb32:	4b3e      	ldr	r3, [pc, #248]	; (800fc2c <tcp_receive+0xcfc>)
 800fb34:	891a      	ldrh	r2, [r3, #8]
 800fb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb38:	891b      	ldrh	r3, [r3, #8]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	f240 814f 	bls.w	800fdde <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb40:	483a      	ldr	r0, [pc, #232]	; (800fc2c <tcp_receive+0xcfc>)
 800fb42:	f7fd fa13 	bl	800cf6c <tcp_seg_copy>
 800fb46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f000 8149 	beq.w	800fde2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d003      	beq.n	800fb5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	601a      	str	r2, [r3, #0]
 800fb5c:	e002      	b.n	800fb64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fb64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb66:	6978      	ldr	r0, [r7, #20]
 800fb68:	f7ff f8de 	bl	800ed28 <tcp_oos_insert_segment>
                }
                break;
 800fb6c:	e139      	b.n	800fde2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d117      	bne.n	800fba4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fb74:	4b2e      	ldr	r3, [pc, #184]	; (800fc30 <tcp_receive+0xd00>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	da57      	bge.n	800fc34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb84:	4829      	ldr	r0, [pc, #164]	; (800fc2c <tcp_receive+0xcfc>)
 800fb86:	f7fd f9f1 	bl	800cf6c <tcp_seg_copy>
 800fb8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f000 8129 	beq.w	800fde6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	69ba      	ldr	r2, [r7, #24]
 800fb98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fb9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb9c:	69b8      	ldr	r0, [r7, #24]
 800fb9e:	f7ff f8c3 	bl	800ed28 <tcp_oos_insert_segment>
                  }
                  break;
 800fba2:	e120      	b.n	800fde6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fba4:	4b22      	ldr	r3, [pc, #136]	; (800fc30 <tcp_receive+0xd00>)
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	1ad3      	subs	r3, r2, r3
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	db3e      	blt.n	800fc34 <tcp_receive+0xd04>
 800fbb6:	4b1e      	ldr	r3, [pc, #120]	; (800fc30 <tcp_receive+0xd00>)
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	dc35      	bgt.n	800fc34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbc8:	4818      	ldr	r0, [pc, #96]	; (800fc2c <tcp_receive+0xcfc>)
 800fbca:	f7fd f9cf 	bl	800cf6c <tcp_seg_copy>
 800fbce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 8109 	beq.w	800fdea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbe0:	8912      	ldrh	r2, [r2, #8]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	4b12      	ldr	r3, [pc, #72]	; (800fc30 <tcp_receive+0xd00>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	dd12      	ble.n	800fc14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fbee:	4b10      	ldr	r3, [pc, #64]	; (800fc30 <tcp_receive+0xd00>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc06:	685a      	ldr	r2, [r3, #4]
 800fc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0a:	891b      	ldrh	r3, [r3, #8]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4610      	mov	r0, r2
 800fc10:	f7fb fbac 	bl	800b36c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc16:	69fa      	ldr	r2, [r7, #28]
 800fc18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fc1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc1c:	69f8      	ldr	r0, [r7, #28]
 800fc1e:	f7ff f883 	bl	800ed28 <tcp_oos_insert_segment>
                  }
                  break;
 800fc22:	e0e2      	b.n	800fdea <tcp_receive+0xeba>
 800fc24:	20001248 	.word	0x20001248
 800fc28:	20001245 	.word	0x20001245
 800fc2c:	20001218 	.word	0x20001218
 800fc30:	20001238 	.word	0x20001238
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f040 80c6 	bne.w	800fdce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fc42:	4b80      	ldr	r3, [pc, #512]	; (800fe44 <tcp_receive+0xf14>)
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f340 80bd 	ble.w	800fdce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	899b      	ldrh	r3, [r3, #12]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fa f971 	bl	8009f44 <lwip_htons>
 800fc62:	4603      	mov	r3, r0
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 80bf 	bne.w	800fdee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fc70:	4875      	ldr	r0, [pc, #468]	; (800fe48 <tcp_receive+0xf18>)
 800fc72:	f7fd f97b 	bl	800cf6c <tcp_seg_copy>
 800fc76:	4602      	mov	r2, r0
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f000 80b6 	beq.w	800fdf2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc8e:	8912      	ldrh	r2, [r2, #8]
 800fc90:	441a      	add	r2, r3
 800fc92:	4b6c      	ldr	r3, [pc, #432]	; (800fe44 <tcp_receive+0xf14>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	dd12      	ble.n	800fcc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fc9c:	4b69      	ldr	r3, [pc, #420]	; (800fe44 <tcp_receive+0xf14>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	1ad3      	subs	r3, r2, r3
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb8:	891b      	ldrh	r3, [r3, #8]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	f7fb fb55 	bl	800b36c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fcc2:	4b62      	ldr	r3, [pc, #392]	; (800fe4c <tcp_receive+0xf1c>)
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	4b5e      	ldr	r3, [pc, #376]	; (800fe44 <tcp_receive+0xf14>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	441a      	add	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcd6:	440b      	add	r3, r1
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f340 8089 	ble.w	800fdf2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fa f92a 	bl	8009f44 <lwip_htons>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d022      	beq.n	800fd42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	b21b      	sxth	r3, r3
 800fd08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd0c:	b21c      	sxth	r4, r3
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	899b      	ldrh	r3, [r3, #12]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fa f913 	bl	8009f44 <lwip_htons>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fa f90a 	bl	8009f44 <lwip_htons>
 800fd30:	4603      	mov	r3, r0
 800fd32:	b21b      	sxth	r3, r3
 800fd34:	4323      	orrs	r3, r4
 800fd36:	b21a      	sxth	r2, r3
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	b292      	uxth	r2, r2
 800fd40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd4c:	4413      	add	r3, r2
 800fd4e:	b299      	uxth	r1, r3
 800fd50:	4b3c      	ldr	r3, [pc, #240]	; (800fe44 <tcp_receive+0xf14>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	1a8a      	subs	r2, r1, r2
 800fd5c:	b292      	uxth	r2, r2
 800fd5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	685a      	ldr	r2, [r3, #4]
 800fd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	891b      	ldrh	r3, [r3, #8]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4610      	mov	r0, r2
 800fd70:	f7fb fafc 	bl	800b36c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	891c      	ldrh	r4, [r3, #8]
 800fd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	899b      	ldrh	r3, [r3, #12]
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fa f8dd 	bl	8009f44 <lwip_htons>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	f003 0303 	and.w	r3, r3, #3
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <tcp_receive+0xe6a>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <tcp_receive+0xe6c>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	4423      	add	r3, r4
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	4b2a      	ldr	r3, [pc, #168]	; (800fe4c <tcp_receive+0xf1c>)
 800fda2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fda4:	4b29      	ldr	r3, [pc, #164]	; (800fe4c <tcp_receive+0xf1c>)
 800fda6:	881b      	ldrh	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b26      	ldr	r3, [pc, #152]	; (800fe44 <tcp_receive+0xf14>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	441a      	add	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb4:	6879      	ldr	r1, [r7, #4]
 800fdb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdb8:	440b      	add	r3, r1
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d019      	beq.n	800fdf2 <tcp_receive+0xec2>
 800fdbe:	4b24      	ldr	r3, [pc, #144]	; (800fe50 <tcp_receive+0xf20>)
 800fdc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fdc4:	4923      	ldr	r1, [pc, #140]	; (800fe54 <tcp_receive+0xf24>)
 800fdc6:	4824      	ldr	r0, [pc, #144]	; (800fe58 <tcp_receive+0xf28>)
 800fdc8:	f007 fc4e 	bl	8017668 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fdcc:	e011      	b.n	800fdf2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f47f aea4 	bne.w	800fb24 <tcp_receive+0xbf4>
 800fddc:	e00a      	b.n	800fdf4 <tcp_receive+0xec4>
                break;
 800fdde:	bf00      	nop
 800fde0:	e008      	b.n	800fdf4 <tcp_receive+0xec4>
                break;
 800fde2:	bf00      	nop
 800fde4:	e006      	b.n	800fdf4 <tcp_receive+0xec4>
                  break;
 800fde6:	bf00      	nop
 800fde8:	e004      	b.n	800fdf4 <tcp_receive+0xec4>
                  break;
 800fdea:	bf00      	nop
 800fdec:	e002      	b.n	800fdf4 <tcp_receive+0xec4>
                  break;
 800fdee:	bf00      	nop
 800fdf0:	e000      	b.n	800fdf4 <tcp_receive+0xec4>
                break;
 800fdf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f001 fe91 	bl	8011b1c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fdfa:	e003      	b.n	800fe04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f001 fe8d 	bl	8011b1c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe02:	e01a      	b.n	800fe3a <tcp_receive+0xf0a>
 800fe04:	e019      	b.n	800fe3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fe06:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <tcp_receive+0xf14>)
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	db0a      	blt.n	800fe2a <tcp_receive+0xefa>
 800fe14:	4b0b      	ldr	r3, [pc, #44]	; (800fe44 <tcp_receive+0xf14>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1c:	6879      	ldr	r1, [r7, #4]
 800fe1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe20:	440b      	add	r3, r1
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	3301      	adds	r3, #1
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	dd07      	ble.n	800fe3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	8b5b      	ldrh	r3, [r3, #26]
 800fe2e:	f043 0302 	orr.w	r3, r3, #2
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fe38:	e7ff      	b.n	800fe3a <tcp_receive+0xf0a>
 800fe3a:	bf00      	nop
 800fe3c:	3750      	adds	r7, #80	; 0x50
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bdb0      	pop	{r4, r5, r7, pc}
 800fe42:	bf00      	nop
 800fe44:	20001238 	.word	0x20001238
 800fe48:	20001218 	.word	0x20001218
 800fe4c:	20001242 	.word	0x20001242
 800fe50:	0801de58 	.word	0x0801de58
 800fe54:	0801e21c 	.word	0x0801e21c
 800fe58:	0801dea4 	.word	0x0801dea4

0800fe5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fe62:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <tcp_get_next_optbyte+0x5c>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	1c5a      	adds	r2, r3, #1
 800fe68:	b291      	uxth	r1, r2
 800fe6a:	4a13      	ldr	r2, [pc, #76]	; (800feb8 <tcp_get_next_optbyte+0x5c>)
 800fe6c:	8011      	strh	r1, [r2, #0]
 800fe6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fe70:	4b12      	ldr	r3, [pc, #72]	; (800febc <tcp_get_next_optbyte+0x60>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d004      	beq.n	800fe82 <tcp_get_next_optbyte+0x26>
 800fe78:	4b11      	ldr	r3, [pc, #68]	; (800fec0 <tcp_get_next_optbyte+0x64>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	88fa      	ldrh	r2, [r7, #6]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d208      	bcs.n	800fe94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fe82:	4b10      	ldr	r3, [pc, #64]	; (800fec4 <tcp_get_next_optbyte+0x68>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	3314      	adds	r3, #20
 800fe88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fe8a:	88fb      	ldrh	r3, [r7, #6]
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	4413      	add	r3, r2
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	e00b      	b.n	800feac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fe94:	88fb      	ldrh	r3, [r7, #6]
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	4b09      	ldr	r3, [pc, #36]	; (800fec0 <tcp_get_next_optbyte+0x64>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	1ad3      	subs	r3, r2, r3
 800fea0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fea2:	4b06      	ldr	r3, [pc, #24]	; (800febc <tcp_get_next_optbyte+0x60>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	797b      	ldrb	r3, [r7, #5]
 800fea8:	4413      	add	r3, r2
 800feaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800feac:	4618      	mov	r0, r3
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	20001234 	.word	0x20001234
 800febc:	20001230 	.word	0x20001230
 800fec0:	2000122e 	.word	0x2000122e
 800fec4:	20001228 	.word	0x20001228

0800fec8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_parseopt+0x1c>
 800fed6:	4b32      	ldr	r3, [pc, #200]	; (800ffa0 <tcp_parseopt+0xd8>)
 800fed8:	f240 727d 	movw	r2, #1917	; 0x77d
 800fedc:	4931      	ldr	r1, [pc, #196]	; (800ffa4 <tcp_parseopt+0xdc>)
 800fede:	4832      	ldr	r0, [pc, #200]	; (800ffa8 <tcp_parseopt+0xe0>)
 800fee0:	f007 fbc2 	bl	8017668 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fee4:	4b31      	ldr	r3, [pc, #196]	; (800ffac <tcp_parseopt+0xe4>)
 800fee6:	881b      	ldrh	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d055      	beq.n	800ff98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800feec:	4b30      	ldr	r3, [pc, #192]	; (800ffb0 <tcp_parseopt+0xe8>)
 800feee:	2200      	movs	r2, #0
 800fef0:	801a      	strh	r2, [r3, #0]
 800fef2:	e045      	b.n	800ff80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fef4:	f7ff ffb2 	bl	800fe5c <tcp_get_next_optbyte>
 800fef8:	4603      	mov	r3, r0
 800fefa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d006      	beq.n	800ff10 <tcp_parseopt+0x48>
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	dc2b      	bgt.n	800ff5e <tcp_parseopt+0x96>
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d041      	beq.n	800ff8e <tcp_parseopt+0xc6>
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d127      	bne.n	800ff5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ff0e:	e037      	b.n	800ff80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ff10:	f7ff ffa4 	bl	800fe5c <tcp_get_next_optbyte>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d13b      	bne.n	800ff92 <tcp_parseopt+0xca>
 800ff1a:	4b25      	ldr	r3, [pc, #148]	; (800ffb0 <tcp_parseopt+0xe8>)
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	4a22      	ldr	r2, [pc, #136]	; (800ffac <tcp_parseopt+0xe4>)
 800ff22:	8812      	ldrh	r2, [r2, #0]
 800ff24:	4293      	cmp	r3, r2
 800ff26:	da34      	bge.n	800ff92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ff28:	f7ff ff98 	bl	800fe5c <tcp_get_next_optbyte>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	021b      	lsls	r3, r3, #8
 800ff32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ff34:	f7ff ff92 	bl	800fe5c <tcp_get_next_optbyte>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	89bb      	ldrh	r3, [r7, #12]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ff42:	89bb      	ldrh	r3, [r7, #12]
 800ff44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ff48:	d804      	bhi.n	800ff54 <tcp_parseopt+0x8c>
 800ff4a:	89bb      	ldrh	r3, [r7, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <tcp_parseopt+0x8c>
 800ff50:	89ba      	ldrh	r2, [r7, #12]
 800ff52:	e001      	b.n	800ff58 <tcp_parseopt+0x90>
 800ff54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ff5c:	e010      	b.n	800ff80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ff5e:	f7ff ff7d 	bl	800fe5c <tcp_get_next_optbyte>
 800ff62:	4603      	mov	r3, r0
 800ff64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ff66:	7afb      	ldrb	r3, [r7, #11]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d914      	bls.n	800ff96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ff6c:	7afb      	ldrb	r3, [r7, #11]
 800ff6e:	b29a      	uxth	r2, r3
 800ff70:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <tcp_parseopt+0xe8>)
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	4413      	add	r3, r2
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	3b02      	subs	r3, #2
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b0c      	ldr	r3, [pc, #48]	; (800ffb0 <tcp_parseopt+0xe8>)
 800ff7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff80:	4b0b      	ldr	r3, [pc, #44]	; (800ffb0 <tcp_parseopt+0xe8>)
 800ff82:	881a      	ldrh	r2, [r3, #0]
 800ff84:	4b09      	ldr	r3, [pc, #36]	; (800ffac <tcp_parseopt+0xe4>)
 800ff86:	881b      	ldrh	r3, [r3, #0]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d3b3      	bcc.n	800fef4 <tcp_parseopt+0x2c>
 800ff8c:	e004      	b.n	800ff98 <tcp_parseopt+0xd0>
          return;
 800ff8e:	bf00      	nop
 800ff90:	e002      	b.n	800ff98 <tcp_parseopt+0xd0>
            return;
 800ff92:	bf00      	nop
 800ff94:	e000      	b.n	800ff98 <tcp_parseopt+0xd0>
            return;
 800ff96:	bf00      	nop
      }
    }
  }
}
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	0801de58 	.word	0x0801de58
 800ffa4:	0801e2d8 	.word	0x0801e2d8
 800ffa8:	0801dea4 	.word	0x0801dea4
 800ffac:	2000122c 	.word	0x2000122c
 800ffb0:	20001234 	.word	0x20001234

0800ffb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ffb8:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <tcp_trigger_input_pcb_close+0x1c>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	f043 0310 	orr.w	r3, r3, #16
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	4b03      	ldr	r3, [pc, #12]	; (800ffd0 <tcp_trigger_input_pcb_close+0x1c>)
 800ffc4:	701a      	strb	r2, [r3, #0]
}
 800ffc6:	bf00      	nop
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	20001245 	.word	0x20001245

0800ffd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00a      	beq.n	800fffc <tcp_route+0x28>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	7a1b      	ldrb	r3, [r3, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	7a1b      	ldrb	r3, [r3, #8]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fa ffe0 	bl	800afb8 <netif_get_by_index>
 800fff8:	4603      	mov	r3, r0
 800fffa:	e003      	b.n	8010004 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f005 fc45 	bl	801588c <ip4_route>
 8010002:	4603      	mov	r3, r0
  }
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801000c:	b590      	push	{r4, r7, lr}
 801000e:	b087      	sub	sp, #28
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	603b      	str	r3, [r7, #0]
 8010018:	4613      	mov	r3, r2
 801001a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d105      	bne.n	801002e <tcp_create_segment+0x22>
 8010022:	4b44      	ldr	r3, [pc, #272]	; (8010134 <tcp_create_segment+0x128>)
 8010024:	22a3      	movs	r2, #163	; 0xa3
 8010026:	4944      	ldr	r1, [pc, #272]	; (8010138 <tcp_create_segment+0x12c>)
 8010028:	4844      	ldr	r0, [pc, #272]	; (801013c <tcp_create_segment+0x130>)
 801002a:	f007 fb1d 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d105      	bne.n	8010040 <tcp_create_segment+0x34>
 8010034:	4b3f      	ldr	r3, [pc, #252]	; (8010134 <tcp_create_segment+0x128>)
 8010036:	22a4      	movs	r2, #164	; 0xa4
 8010038:	4941      	ldr	r1, [pc, #260]	; (8010140 <tcp_create_segment+0x134>)
 801003a:	4840      	ldr	r0, [pc, #256]	; (801013c <tcp_create_segment+0x130>)
 801003c:	f007 fb14 	bl	8017668 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	b2db      	uxtb	r3, r3
 8010048:	f003 0304 	and.w	r3, r3, #4
 801004c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801004e:	2003      	movs	r0, #3
 8010050:	f7fa fcac 	bl	800a9ac <memp_malloc>
 8010054:	6138      	str	r0, [r7, #16]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d104      	bne.n	8010066 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801005c:	68b8      	ldr	r0, [r7, #8]
 801005e:	f7fb fb0b 	bl	800b678 <pbuf_free>
    return NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	e061      	b.n	801012a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801006c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	68ba      	ldr	r2, [r7, #8]
 8010078:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	891a      	ldrh	r2, [r3, #8]
 801007e:	7dfb      	ldrb	r3, [r7, #23]
 8010080:	b29b      	uxth	r3, r3
 8010082:	429a      	cmp	r2, r3
 8010084:	d205      	bcs.n	8010092 <tcp_create_segment+0x86>
 8010086:	4b2b      	ldr	r3, [pc, #172]	; (8010134 <tcp_create_segment+0x128>)
 8010088:	22b0      	movs	r2, #176	; 0xb0
 801008a:	492e      	ldr	r1, [pc, #184]	; (8010144 <tcp_create_segment+0x138>)
 801008c:	482b      	ldr	r0, [pc, #172]	; (801013c <tcp_create_segment+0x130>)
 801008e:	f007 faeb 	bl	8017668 <iprintf>
  seg->len = p->tot_len - optlen;
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	891a      	ldrh	r2, [r3, #8]
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	b29b      	uxth	r3, r3
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	b29a      	uxth	r2, r3
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80100a2:	2114      	movs	r1, #20
 80100a4:	68b8      	ldr	r0, [r7, #8]
 80100a6:	f7fb fa51 	bl	800b54c <pbuf_add_header>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d004      	beq.n	80100ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80100b0:	6938      	ldr	r0, [r7, #16]
 80100b2:	f7fc ff22 	bl	800cefa <tcp_seg_free>
    return NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	e037      	b.n	801012a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	685a      	ldr	r2, [r3, #4]
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	8ada      	ldrh	r2, [r3, #22]
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	68dc      	ldr	r4, [r3, #12]
 80100cc:	4610      	mov	r0, r2
 80100ce:	f7f9 ff39 	bl	8009f44 <lwip_htons>
 80100d2:	4603      	mov	r3, r0
 80100d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	8b1a      	ldrh	r2, [r3, #24]
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	68dc      	ldr	r4, [r3, #12]
 80100de:	4610      	mov	r0, r2
 80100e0:	f7f9 ff30 	bl	8009f44 <lwip_htons>
 80100e4:	4603      	mov	r3, r0
 80100e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	68dc      	ldr	r4, [r3, #12]
 80100ec:	6838      	ldr	r0, [r7, #0]
 80100ee:	f7f9 ff3e 	bl	8009f6e <lwip_htonl>
 80100f2:	4603      	mov	r3, r0
 80100f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
 80100f8:	089b      	lsrs	r3, r3, #2
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	3305      	adds	r3, #5
 8010100:	b29b      	uxth	r3, r3
 8010102:	031b      	lsls	r3, r3, #12
 8010104:	b29a      	uxth	r2, r3
 8010106:	79fb      	ldrb	r3, [r7, #7]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4313      	orrs	r3, r2
 801010c:	b29a      	uxth	r2, r3
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	68dc      	ldr	r4, [r3, #12]
 8010112:	4610      	mov	r0, r2
 8010114:	f7f9 ff16 	bl	8009f44 <lwip_htons>
 8010118:	4603      	mov	r3, r0
 801011a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	749a      	strb	r2, [r3, #18]
 8010124:	2200      	movs	r2, #0
 8010126:	74da      	strb	r2, [r3, #19]
  return seg;
 8010128:	693b      	ldr	r3, [r7, #16]
}
 801012a:	4618      	mov	r0, r3
 801012c:	371c      	adds	r7, #28
 801012e:	46bd      	mov	sp, r7
 8010130:	bd90      	pop	{r4, r7, pc}
 8010132:	bf00      	nop
 8010134:	0801e2f4 	.word	0x0801e2f4
 8010138:	0801e328 	.word	0x0801e328
 801013c:	0801e348 	.word	0x0801e348
 8010140:	0801e370 	.word	0x0801e370
 8010144:	0801e394 	.word	0x0801e394

08010148 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b086      	sub	sp, #24
 801014c:	af00      	add	r7, sp, #0
 801014e:	607b      	str	r3, [r7, #4]
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]
 8010154:	460b      	mov	r3, r1
 8010156:	81bb      	strh	r3, [r7, #12]
 8010158:	4613      	mov	r3, r2
 801015a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801015c:	89bb      	ldrh	r3, [r7, #12]
 801015e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <tcp_pbuf_prealloc+0x2a>
 8010166:	4b30      	ldr	r3, [pc, #192]	; (8010228 <tcp_pbuf_prealloc+0xe0>)
 8010168:	22e8      	movs	r2, #232	; 0xe8
 801016a:	4930      	ldr	r1, [pc, #192]	; (801022c <tcp_pbuf_prealloc+0xe4>)
 801016c:	4830      	ldr	r0, [pc, #192]	; (8010230 <tcp_pbuf_prealloc+0xe8>)
 801016e:	f007 fa7b 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010172:	6a3b      	ldr	r3, [r7, #32]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d105      	bne.n	8010184 <tcp_pbuf_prealloc+0x3c>
 8010178:	4b2b      	ldr	r3, [pc, #172]	; (8010228 <tcp_pbuf_prealloc+0xe0>)
 801017a:	22e9      	movs	r2, #233	; 0xe9
 801017c:	492d      	ldr	r1, [pc, #180]	; (8010234 <tcp_pbuf_prealloc+0xec>)
 801017e:	482c      	ldr	r0, [pc, #176]	; (8010230 <tcp_pbuf_prealloc+0xe8>)
 8010180:	f007 fa72 	bl	8017668 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010184:	89ba      	ldrh	r2, [r7, #12]
 8010186:	897b      	ldrh	r3, [r7, #10]
 8010188:	429a      	cmp	r2, r3
 801018a:	d221      	bcs.n	80101d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801018c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010190:	f003 0302 	and.w	r3, r3, #2
 8010194:	2b00      	cmp	r3, #0
 8010196:	d111      	bne.n	80101bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	8b5b      	ldrh	r3, [r3, #26]
 801019c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d115      	bne.n	80101d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80101a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d007      	beq.n	80101bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80101ac:	6a3b      	ldr	r3, [r7, #32]
 80101ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d103      	bne.n	80101bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d009      	beq.n	80101d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80101bc:	89bb      	ldrh	r3, [r7, #12]
 80101be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80101c2:	f023 0203 	bic.w	r2, r3, #3
 80101c6:	897b      	ldrh	r3, [r7, #10]
 80101c8:	4293      	cmp	r3, r2
 80101ca:	bf28      	it	cs
 80101cc:	4613      	movcs	r3, r2
 80101ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80101d0:	8af9      	ldrh	r1, [r7, #22]
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
 80101d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fa ff69 	bl	800b0b0 <pbuf_alloc>
 80101de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	e019      	b.n	801021e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d006      	beq.n	8010200 <tcp_pbuf_prealloc+0xb8>
 80101f2:	4b0d      	ldr	r3, [pc, #52]	; (8010228 <tcp_pbuf_prealloc+0xe0>)
 80101f4:	f240 120b 	movw	r2, #267	; 0x10b
 80101f8:	490f      	ldr	r1, [pc, #60]	; (8010238 <tcp_pbuf_prealloc+0xf0>)
 80101fa:	480d      	ldr	r0, [pc, #52]	; (8010230 <tcp_pbuf_prealloc+0xe8>)
 80101fc:	f007 fa34 	bl	8017668 <iprintf>
  *oversize = p->len - length;
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	895a      	ldrh	r2, [r3, #10]
 8010204:	89bb      	ldrh	r3, [r7, #12]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	b29a      	uxth	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	89ba      	ldrh	r2, [r7, #12]
 8010212:	811a      	strh	r2, [r3, #8]
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	891a      	ldrh	r2, [r3, #8]
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	815a      	strh	r2, [r3, #10]
  return p;
 801021c:	693b      	ldr	r3, [r7, #16]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	0801e2f4 	.word	0x0801e2f4
 801022c:	0801e3ac 	.word	0x0801e3ac
 8010230:	0801e348 	.word	0x0801e348
 8010234:	0801e3d0 	.word	0x0801e3d0
 8010238:	0801e3f0 	.word	0x0801e3f0

0801023c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d106      	bne.n	801025c <tcp_write_checks+0x20>
 801024e:	4b33      	ldr	r3, [pc, #204]	; (801031c <tcp_write_checks+0xe0>)
 8010250:	f240 1233 	movw	r2, #307	; 0x133
 8010254:	4932      	ldr	r1, [pc, #200]	; (8010320 <tcp_write_checks+0xe4>)
 8010256:	4833      	ldr	r0, [pc, #204]	; (8010324 <tcp_write_checks+0xe8>)
 8010258:	f007 fa06 	bl	8017668 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	2b04      	cmp	r3, #4
 8010262:	d00e      	beq.n	8010282 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010268:	2b07      	cmp	r3, #7
 801026a:	d00a      	beq.n	8010282 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010270:	2b02      	cmp	r3, #2
 8010272:	d006      	beq.n	8010282 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010278:	2b03      	cmp	r3, #3
 801027a:	d002      	beq.n	8010282 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801027c:	f06f 030a 	mvn.w	r3, #10
 8010280:	e048      	b.n	8010314 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010282:	887b      	ldrh	r3, [r7, #2]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d101      	bne.n	801028c <tcp_write_checks+0x50>
    return ERR_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	e043      	b.n	8010314 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010292:	887a      	ldrh	r2, [r7, #2]
 8010294:	429a      	cmp	r2, r3
 8010296:	d909      	bls.n	80102ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8b5b      	ldrh	r3, [r3, #26]
 801029c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102aa:	e033      	b.n	8010314 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102b2:	2b08      	cmp	r3, #8
 80102b4:	d909      	bls.n	80102ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8b5b      	ldrh	r3, [r3, #26]
 80102ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80102c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102c8:	e024      	b.n	8010314 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00f      	beq.n	80102f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d11a      	bne.n	8010312 <tcp_write_checks+0xd6>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d116      	bne.n	8010312 <tcp_write_checks+0xd6>
 80102e4:	4b0d      	ldr	r3, [pc, #52]	; (801031c <tcp_write_checks+0xe0>)
 80102e6:	f240 1255 	movw	r2, #341	; 0x155
 80102ea:	490f      	ldr	r1, [pc, #60]	; (8010328 <tcp_write_checks+0xec>)
 80102ec:	480d      	ldr	r0, [pc, #52]	; (8010324 <tcp_write_checks+0xe8>)
 80102ee:	f007 f9bb 	bl	8017668 <iprintf>
 80102f2:	e00e      	b.n	8010312 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d103      	bne.n	8010304 <tcp_write_checks+0xc8>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <tcp_write_checks+0xd6>
 8010304:	4b05      	ldr	r3, [pc, #20]	; (801031c <tcp_write_checks+0xe0>)
 8010306:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801030a:	4908      	ldr	r1, [pc, #32]	; (801032c <tcp_write_checks+0xf0>)
 801030c:	4805      	ldr	r0, [pc, #20]	; (8010324 <tcp_write_checks+0xe8>)
 801030e:	f007 f9ab 	bl	8017668 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010312:	2300      	movs	r3, #0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	0801e2f4 	.word	0x0801e2f4
 8010320:	0801e404 	.word	0x0801e404
 8010324:	0801e348 	.word	0x0801e348
 8010328:	0801e424 	.word	0x0801e424
 801032c:	0801e460 	.word	0x0801e460

08010330 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010330:	b590      	push	{r4, r7, lr}
 8010332:	b09b      	sub	sp, #108	; 0x6c
 8010334:	af04      	add	r7, sp, #16
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	4611      	mov	r1, r2
 801033c:	461a      	mov	r2, r3
 801033e:	460b      	mov	r3, r1
 8010340:	80fb      	strh	r3, [r7, #6]
 8010342:	4613      	mov	r3, r2
 8010344:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801034a:	2300      	movs	r3, #0
 801034c:	653b      	str	r3, [r7, #80]	; 0x50
 801034e:	2300      	movs	r3, #0
 8010350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010352:	2300      	movs	r3, #0
 8010354:	64bb      	str	r3, [r7, #72]	; 0x48
 8010356:	2300      	movs	r3, #0
 8010358:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801035a:	2300      	movs	r3, #0
 801035c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801036e:	2300      	movs	r3, #0
 8010370:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d109      	bne.n	801038c <tcp_write+0x5c>
 8010378:	4ba4      	ldr	r3, [pc, #656]	; (801060c <tcp_write+0x2dc>)
 801037a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801037e:	49a4      	ldr	r1, [pc, #656]	; (8010610 <tcp_write+0x2e0>)
 8010380:	48a4      	ldr	r0, [pc, #656]	; (8010614 <tcp_write+0x2e4>)
 8010382:	f007 f971 	bl	8017668 <iprintf>
 8010386:	f06f 030f 	mvn.w	r3, #15
 801038a:	e32a      	b.n	80109e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010392:	085b      	lsrs	r3, r3, #1
 8010394:	b29a      	uxth	r2, r3
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801039a:	4293      	cmp	r3, r2
 801039c:	bf28      	it	cs
 801039e:	4613      	movcs	r3, r2
 80103a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80103a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d102      	bne.n	80103ae <tcp_write+0x7e>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ac:	e000      	b.n	80103b0 <tcp_write+0x80>
 80103ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <tcp_write+0x9c>
 80103b8:	4b94      	ldr	r3, [pc, #592]	; (801060c <tcp_write+0x2dc>)
 80103ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 80103be:	4996      	ldr	r1, [pc, #600]	; (8010618 <tcp_write+0x2e8>)
 80103c0:	4894      	ldr	r0, [pc, #592]	; (8010614 <tcp_write+0x2e4>)
 80103c2:	f007 f951 	bl	8017668 <iprintf>
 80103c6:	f06f 030f 	mvn.w	r3, #15
 80103ca:	e30a      	b.n	80109e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80103cc:	88fb      	ldrh	r3, [r7, #6]
 80103ce:	4619      	mov	r1, r3
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7ff ff33 	bl	801023c <tcp_write_checks>
 80103d6:	4603      	mov	r3, r0
 80103d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80103dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <tcp_write+0xba>
    return err;
 80103e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80103e8:	e2fb      	b.n	80109e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80103f4:	2300      	movs	r3, #0
 80103f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	f000 80f6 	beq.w	80105f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010408:	653b      	str	r3, [r7, #80]	; 0x50
 801040a:	e002      	b.n	8010412 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801040c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1f8      	bne.n	801040c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801041a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041c:	7a9b      	ldrb	r3, [r3, #10]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	b29b      	uxth	r3, r3
 8010422:	f003 0304 	and.w	r3, r3, #4
 8010426:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801042a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801042c:	891b      	ldrh	r3, [r3, #8]
 801042e:	4619      	mov	r1, r3
 8010430:	8c3b      	ldrh	r3, [r7, #32]
 8010432:	440b      	add	r3, r1
 8010434:	429a      	cmp	r2, r3
 8010436:	da06      	bge.n	8010446 <tcp_write+0x116>
 8010438:	4b74      	ldr	r3, [pc, #464]	; (801060c <tcp_write+0x2dc>)
 801043a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801043e:	4977      	ldr	r1, [pc, #476]	; (801061c <tcp_write+0x2ec>)
 8010440:	4874      	ldr	r0, [pc, #464]	; (8010614 <tcp_write+0x2e4>)
 8010442:	f007 f911 	bl	8017668 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010448:	891a      	ldrh	r2, [r3, #8]
 801044a:	8c3b      	ldrh	r3, [r7, #32]
 801044c:	4413      	add	r3, r2
 801044e:	b29b      	uxth	r3, r3
 8010450:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801045c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801045e:	8a7b      	ldrh	r3, [r7, #18]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d026      	beq.n	80104b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010464:	8a7b      	ldrh	r3, [r7, #18]
 8010466:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010468:	429a      	cmp	r2, r3
 801046a:	d206      	bcs.n	801047a <tcp_write+0x14a>
 801046c:	4b67      	ldr	r3, [pc, #412]	; (801060c <tcp_write+0x2dc>)
 801046e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010472:	496b      	ldr	r1, [pc, #428]	; (8010620 <tcp_write+0x2f0>)
 8010474:	4867      	ldr	r0, [pc, #412]	; (8010614 <tcp_write+0x2e4>)
 8010476:	f007 f8f7 	bl	8017668 <iprintf>
      seg = last_unsent;
 801047a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801047c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801047e:	8a7b      	ldrh	r3, [r7, #18]
 8010480:	88fa      	ldrh	r2, [r7, #6]
 8010482:	4293      	cmp	r3, r2
 8010484:	bf28      	it	cs
 8010486:	4613      	movcs	r3, r2
 8010488:	b29b      	uxth	r3, r3
 801048a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801048c:	4293      	cmp	r3, r2
 801048e:	bf28      	it	cs
 8010490:	4613      	movcs	r3, r2
 8010492:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801049a:	4413      	add	r3, r2
 801049c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80104a0:	8a7a      	ldrh	r2, [r7, #18]
 80104a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80104aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80104b2:	8a7b      	ldrh	r3, [r7, #18]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00b      	beq.n	80104d0 <tcp_write+0x1a0>
 80104b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104bc:	88fb      	ldrh	r3, [r7, #6]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d006      	beq.n	80104d0 <tcp_write+0x1a0>
 80104c2:	4b52      	ldr	r3, [pc, #328]	; (801060c <tcp_write+0x2dc>)
 80104c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104c8:	4956      	ldr	r1, [pc, #344]	; (8010624 <tcp_write+0x2f4>)
 80104ca:	4852      	ldr	r0, [pc, #328]	; (8010614 <tcp_write+0x2e4>)
 80104cc:	f007 f8cc 	bl	8017668 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80104d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104d4:	88fb      	ldrh	r3, [r7, #6]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	f080 8167 	bcs.w	80107aa <tcp_write+0x47a>
 80104dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 8163 	beq.w	80107aa <tcp_write+0x47a>
 80104e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e6:	891b      	ldrh	r3, [r3, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 815e 	beq.w	80107aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80104ee:	88fa      	ldrh	r2, [r7, #6]
 80104f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104f4:	1ad2      	subs	r2, r2, r3
 80104f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104f8:	4293      	cmp	r3, r2
 80104fa:	bfa8      	it	ge
 80104fc:	4613      	movge	r3, r2
 80104fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010502:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010504:	797b      	ldrb	r3, [r7, #5]
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b00      	cmp	r3, #0
 801050c:	d027      	beq.n	801055e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801050e:	f107 0012 	add.w	r0, r7, #18
 8010512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010514:	8bf9      	ldrh	r1, [r7, #30]
 8010516:	2301      	movs	r3, #1
 8010518:	9302      	str	r3, [sp, #8]
 801051a:	797b      	ldrb	r3, [r7, #5]
 801051c:	9301      	str	r3, [sp, #4]
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4603      	mov	r3, r0
 8010524:	2000      	movs	r0, #0
 8010526:	f7ff fe0f 	bl	8010148 <tcp_pbuf_prealloc>
 801052a:	6578      	str	r0, [r7, #84]	; 0x54
 801052c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 8225 	beq.w	801097e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010536:	6858      	ldr	r0, [r3, #4]
 8010538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801053c:	68ba      	ldr	r2, [r7, #8]
 801053e:	4413      	add	r3, r2
 8010540:	8bfa      	ldrh	r2, [r7, #30]
 8010542:	4619      	mov	r1, r3
 8010544:	f006 fbf6 	bl	8016d34 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010548:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801054a:	f7fb f91d 	bl	800b788 <pbuf_clen>
 801054e:	4603      	mov	r3, r0
 8010550:	461a      	mov	r2, r3
 8010552:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010556:	4413      	add	r3, r2
 8010558:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801055c:	e041      	b.n	80105e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801055e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	637b      	str	r3, [r7, #52]	; 0x34
 8010564:	e002      	b.n	801056c <tcp_write+0x23c>
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1f8      	bne.n	8010566 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010576:	7b1b      	ldrb	r3, [r3, #12]
 8010578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d115      	bne.n	80105ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010586:	8952      	ldrh	r2, [r2, #10]
 8010588:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	429a      	cmp	r2, r3
 801058e:	d10d      	bne.n	80105ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010594:	2b00      	cmp	r3, #0
 8010596:	d006      	beq.n	80105a6 <tcp_write+0x276>
 8010598:	4b1c      	ldr	r3, [pc, #112]	; (801060c <tcp_write+0x2dc>)
 801059a:	f240 2231 	movw	r2, #561	; 0x231
 801059e:	4922      	ldr	r1, [pc, #136]	; (8010628 <tcp_write+0x2f8>)
 80105a0:	481c      	ldr	r0, [pc, #112]	; (8010614 <tcp_write+0x2e4>)
 80105a2:	f007 f861 	bl	8017668 <iprintf>
          extendlen = seglen;
 80105a6:	8bfb      	ldrh	r3, [r7, #30]
 80105a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80105aa:	e01a      	b.n	80105e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80105ac:	8bfb      	ldrh	r3, [r7, #30]
 80105ae:	2201      	movs	r2, #1
 80105b0:	4619      	mov	r1, r3
 80105b2:	2000      	movs	r0, #0
 80105b4:	f7fa fd7c 	bl	800b0b0 <pbuf_alloc>
 80105b8:	6578      	str	r0, [r7, #84]	; 0x54
 80105ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 81e0 	beq.w	8010982 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80105c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	441a      	add	r2, r3
 80105ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80105ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80105d0:	f7fb f8da 	bl	800b788 <pbuf_clen>
 80105d4:	4603      	mov	r3, r0
 80105d6:	461a      	mov	r2, r3
 80105d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80105dc:	4413      	add	r3, r2
 80105de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80105e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80105e6:	8bfb      	ldrh	r3, [r7, #30]
 80105e8:	4413      	add	r3, r2
 80105ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80105ee:	e0dc      	b.n	80107aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f000 80d7 	beq.w	80107aa <tcp_write+0x47a>
 80105fc:	4b03      	ldr	r3, [pc, #12]	; (801060c <tcp_write+0x2dc>)
 80105fe:	f240 224a 	movw	r2, #586	; 0x24a
 8010602:	490a      	ldr	r1, [pc, #40]	; (801062c <tcp_write+0x2fc>)
 8010604:	4803      	ldr	r0, [pc, #12]	; (8010614 <tcp_write+0x2e4>)
 8010606:	f007 f82f 	bl	8017668 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801060a:	e0ce      	b.n	80107aa <tcp_write+0x47a>
 801060c:	0801e2f4 	.word	0x0801e2f4
 8010610:	0801e494 	.word	0x0801e494
 8010614:	0801e348 	.word	0x0801e348
 8010618:	0801e4ac 	.word	0x0801e4ac
 801061c:	0801e4e0 	.word	0x0801e4e0
 8010620:	0801e4f8 	.word	0x0801e4f8
 8010624:	0801e518 	.word	0x0801e518
 8010628:	0801e538 	.word	0x0801e538
 801062c:	0801e564 	.word	0x0801e564
    struct pbuf *p;
    u16_t left = len - pos;
 8010630:	88fa      	ldrh	r2, [r7, #6]
 8010632:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801063a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801063e:	b29b      	uxth	r3, r3
 8010640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010646:	8b7a      	ldrh	r2, [r7, #26]
 8010648:	8bbb      	ldrh	r3, [r7, #28]
 801064a:	4293      	cmp	r3, r2
 801064c:	bf28      	it	cs
 801064e:	4613      	movcs	r3, r2
 8010650:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010652:	797b      	ldrb	r3, [r7, #5]
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	2b00      	cmp	r3, #0
 801065a:	d036      	beq.n	80106ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801065c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010660:	b29a      	uxth	r2, r3
 8010662:	8b3b      	ldrh	r3, [r7, #24]
 8010664:	4413      	add	r3, r2
 8010666:	b299      	uxth	r1, r3
 8010668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066a:	2b00      	cmp	r3, #0
 801066c:	bf0c      	ite	eq
 801066e:	2301      	moveq	r3, #1
 8010670:	2300      	movne	r3, #0
 8010672:	b2db      	uxtb	r3, r3
 8010674:	f107 0012 	add.w	r0, r7, #18
 8010678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	797b      	ldrb	r3, [r7, #5]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4603      	mov	r3, r0
 8010686:	2036      	movs	r0, #54	; 0x36
 8010688:	f7ff fd5e 	bl	8010148 <tcp_pbuf_prealloc>
 801068c:	6338      	str	r0, [r7, #48]	; 0x30
 801068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010690:	2b00      	cmp	r3, #0
 8010692:	f000 8178 	beq.w	8010986 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	895b      	ldrh	r3, [r3, #10]
 801069a:	8b3a      	ldrh	r2, [r7, #24]
 801069c:	429a      	cmp	r2, r3
 801069e:	d906      	bls.n	80106ae <tcp_write+0x37e>
 80106a0:	4b8c      	ldr	r3, [pc, #560]	; (80108d4 <tcp_write+0x5a4>)
 80106a2:	f240 2266 	movw	r2, #614	; 0x266
 80106a6:	498c      	ldr	r1, [pc, #560]	; (80108d8 <tcp_write+0x5a8>)
 80106a8:	488c      	ldr	r0, [pc, #560]	; (80108dc <tcp_write+0x5ac>)
 80106aa:	f006 ffdd 	bl	8017668 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	685a      	ldr	r2, [r3, #4]
 80106b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80106b6:	18d0      	adds	r0, r2, r3
 80106b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106bc:	68ba      	ldr	r2, [r7, #8]
 80106be:	4413      	add	r3, r2
 80106c0:	8b3a      	ldrh	r2, [r7, #24]
 80106c2:	4619      	mov	r1, r3
 80106c4:	f006 fb36 	bl	8016d34 <memcpy>
 80106c8:	e02f      	b.n	801072a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80106ca:	8a7b      	ldrh	r3, [r7, #18]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d006      	beq.n	80106de <tcp_write+0x3ae>
 80106d0:	4b80      	ldr	r3, [pc, #512]	; (80108d4 <tcp_write+0x5a4>)
 80106d2:	f240 2271 	movw	r2, #625	; 0x271
 80106d6:	4982      	ldr	r1, [pc, #520]	; (80108e0 <tcp_write+0x5b0>)
 80106d8:	4880      	ldr	r0, [pc, #512]	; (80108dc <tcp_write+0x5ac>)
 80106da:	f006 ffc5 	bl	8017668 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80106de:	8b3b      	ldrh	r3, [r7, #24]
 80106e0:	2201      	movs	r2, #1
 80106e2:	4619      	mov	r1, r3
 80106e4:	2036      	movs	r0, #54	; 0x36
 80106e6:	f7fa fce3 	bl	800b0b0 <pbuf_alloc>
 80106ea:	6178      	str	r0, [r7, #20]
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 814b 	beq.w	801098a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80106f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	441a      	add	r2, r3
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010704:	b29b      	uxth	r3, r3
 8010706:	f44f 7220 	mov.w	r2, #640	; 0x280
 801070a:	4619      	mov	r1, r3
 801070c:	2036      	movs	r0, #54	; 0x36
 801070e:	f7fa fccf 	bl	800b0b0 <pbuf_alloc>
 8010712:	6338      	str	r0, [r7, #48]	; 0x30
 8010714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010716:	2b00      	cmp	r3, #0
 8010718:	d103      	bne.n	8010722 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801071a:	6978      	ldr	r0, [r7, #20]
 801071c:	f7fa ffac 	bl	800b678 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010720:	e136      	b.n	8010990 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010722:	6979      	ldr	r1, [r7, #20]
 8010724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010726:	f7fb f869 	bl	800b7fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801072a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801072c:	f7fb f82c 	bl	800b788 <pbuf_clen>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010738:	4413      	add	r3, r2
 801073a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801073e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010742:	2b09      	cmp	r3, #9
 8010744:	d903      	bls.n	801074e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010748:	f7fa ff96 	bl	800b678 <pbuf_free>
      goto memerr;
 801074c:	e120      	b.n	8010990 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010752:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010756:	441a      	add	r2, r3
 8010758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801075c:	9300      	str	r3, [sp, #0]
 801075e:	4613      	mov	r3, r2
 8010760:	2200      	movs	r2, #0
 8010762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7ff fc51 	bl	801000c <tcp_create_segment>
 801076a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801076c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076e:	2b00      	cmp	r3, #0
 8010770:	f000 810d 	beq.w	801098e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010776:	2b00      	cmp	r3, #0
 8010778:	d102      	bne.n	8010780 <tcp_write+0x450>
      queue = seg;
 801077a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801077c:	647b      	str	r3, [r7, #68]	; 0x44
 801077e:	e00c      	b.n	801079a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010782:	2b00      	cmp	r3, #0
 8010784:	d106      	bne.n	8010794 <tcp_write+0x464>
 8010786:	4b53      	ldr	r3, [pc, #332]	; (80108d4 <tcp_write+0x5a4>)
 8010788:	f240 22ab 	movw	r2, #683	; 0x2ab
 801078c:	4955      	ldr	r1, [pc, #340]	; (80108e4 <tcp_write+0x5b4>)
 801078e:	4853      	ldr	r0, [pc, #332]	; (80108dc <tcp_write+0x5ac>)
 8010790:	f006 ff6a 	bl	8017668 <iprintf>
      prev_seg->next = seg;
 8010794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010798:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801079a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801079c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801079e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107a2:	8b3b      	ldrh	r3, [r7, #24]
 80107a4:	4413      	add	r3, r2
 80107a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80107aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107ae:	88fb      	ldrh	r3, [r7, #6]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	f4ff af3d 	bcc.w	8010630 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80107b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d02c      	beq.n	8010816 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80107bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107c2:	e01e      	b.n	8010802 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80107c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c6:	891a      	ldrh	r2, [r3, #8]
 80107c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107ca:	4413      	add	r3, r2
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d110      	bne.n	80107fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e0:	8952      	ldrh	r2, [r2, #10]
 80107e2:	4413      	add	r3, r2
 80107e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80107e6:	68b9      	ldr	r1, [r7, #8]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f006 faa3 	bl	8016d34 <memcpy>
        p->len += oversize_used;
 80107ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f0:	895a      	ldrh	r2, [r3, #10]
 80107f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107f4:	4413      	add	r3, r2
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80107fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1dd      	bne.n	80107c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801080a:	891a      	ldrh	r2, [r3, #8]
 801080c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801080e:	4413      	add	r3, r2
 8010810:	b29a      	uxth	r2, r3
 8010812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010814:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010816:	8a7a      	ldrh	r2, [r7, #18]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801081e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010820:	2b00      	cmp	r3, #0
 8010822:	d018      	beq.n	8010856 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010826:	2b00      	cmp	r3, #0
 8010828:	d106      	bne.n	8010838 <tcp_write+0x508>
 801082a:	4b2a      	ldr	r3, [pc, #168]	; (80108d4 <tcp_write+0x5a4>)
 801082c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010830:	492d      	ldr	r1, [pc, #180]	; (80108e8 <tcp_write+0x5b8>)
 8010832:	482a      	ldr	r0, [pc, #168]	; (80108dc <tcp_write+0x5ac>)
 8010834:	f006 ff18 	bl	8017668 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801083e:	4618      	mov	r0, r3
 8010840:	f7fa ffdc 	bl	800b7fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010846:	891a      	ldrh	r2, [r3, #8]
 8010848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084a:	891b      	ldrh	r3, [r3, #8]
 801084c:	4413      	add	r3, r2
 801084e:	b29a      	uxth	r2, r3
 8010850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010852:	811a      	strh	r2, [r3, #8]
 8010854:	e037      	b.n	80108c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010858:	2b00      	cmp	r3, #0
 801085a:	d034      	beq.n	80108c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801085c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801085e:	2b00      	cmp	r3, #0
 8010860:	d003      	beq.n	801086a <tcp_write+0x53a>
 8010862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_write+0x548>
 801086a:	4b1a      	ldr	r3, [pc, #104]	; (80108d4 <tcp_write+0x5a4>)
 801086c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010870:	491e      	ldr	r1, [pc, #120]	; (80108ec <tcp_write+0x5bc>)
 8010872:	481a      	ldr	r0, [pc, #104]	; (80108dc <tcp_write+0x5ac>)
 8010874:	f006 fef8 	bl	8017668 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	62bb      	str	r3, [r7, #40]	; 0x28
 801087e:	e009      	b.n	8010894 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010882:	891a      	ldrh	r2, [r3, #8]
 8010884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010886:	4413      	add	r3, r2
 8010888:	b29a      	uxth	r2, r3
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	62bb      	str	r3, [r7, #40]	; 0x28
 8010894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1f1      	bne.n	8010880 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	891a      	ldrh	r2, [r3, #8]
 80108a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108a2:	4413      	add	r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80108aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ac:	895a      	ldrh	r2, [r3, #10]
 80108ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108b0:	4413      	add	r3, r2
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80108b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ba:	891a      	ldrh	r2, [r3, #8]
 80108bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108be:	4413      	add	r3, r2
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80108c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d111      	bne.n	80108f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80108d2:	e010      	b.n	80108f6 <tcp_write+0x5c6>
 80108d4:	0801e2f4 	.word	0x0801e2f4
 80108d8:	0801e594 	.word	0x0801e594
 80108dc:	0801e348 	.word	0x0801e348
 80108e0:	0801e5d4 	.word	0x0801e5d4
 80108e4:	0801e5e4 	.word	0x0801e5e4
 80108e8:	0801e5f8 	.word	0x0801e5f8
 80108ec:	0801e630 	.word	0x0801e630
  } else {
    last_unsent->next = queue;
 80108f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108fa:	88fb      	ldrh	r3, [r7, #6]
 80108fc:	441a      	add	r2, r3
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010908:	88fb      	ldrh	r3, [r7, #6]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	b29a      	uxth	r2, r3
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801091a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00e      	beq.n	8010946 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10a      	bne.n	8010946 <tcp_write+0x616>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d106      	bne.n	8010946 <tcp_write+0x616>
 8010938:	4b2c      	ldr	r3, [pc, #176]	; (80109ec <tcp_write+0x6bc>)
 801093a:	f240 3212 	movw	r2, #786	; 0x312
 801093e:	492c      	ldr	r1, [pc, #176]	; (80109f0 <tcp_write+0x6c0>)
 8010940:	482c      	ldr	r0, [pc, #176]	; (80109f4 <tcp_write+0x6c4>)
 8010942:	f006 fe91 	bl	8017668 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d016      	beq.n	801097a <tcp_write+0x64a>
 801094c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d012      	beq.n	801097a <tcp_write+0x64a>
 8010954:	797b      	ldrb	r3, [r7, #5]
 8010956:	f003 0302 	and.w	r3, r3, #2
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10d      	bne.n	801097a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801095e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	899b      	ldrh	r3, [r3, #12]
 8010964:	b29c      	uxth	r4, r3
 8010966:	2008      	movs	r0, #8
 8010968:	f7f9 faec 	bl	8009f44 <lwip_htons>
 801096c:	4603      	mov	r3, r0
 801096e:	461a      	mov	r2, r3
 8010970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	4322      	orrs	r2, r4
 8010976:	b292      	uxth	r2, r2
 8010978:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801097a:	2300      	movs	r3, #0
 801097c:	e031      	b.n	80109e2 <tcp_write+0x6b2>
          goto memerr;
 801097e:	bf00      	nop
 8010980:	e006      	b.n	8010990 <tcp_write+0x660>
            goto memerr;
 8010982:	bf00      	nop
 8010984:	e004      	b.n	8010990 <tcp_write+0x660>
        goto memerr;
 8010986:	bf00      	nop
 8010988:	e002      	b.n	8010990 <tcp_write+0x660>
        goto memerr;
 801098a:	bf00      	nop
 801098c:	e000      	b.n	8010990 <tcp_write+0x660>
      goto memerr;
 801098e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	8b5b      	ldrh	r3, [r3, #26]
 8010994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010998:	b29a      	uxth	r2, r3
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801099e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80109a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80109a6:	f7fa fe67 	bl	800b678 <pbuf_free>
  }
  if (queue != NULL) {
 80109aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80109b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109b2:	f7fc fa8d 	bl	800ced0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00e      	beq.n	80109de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d10a      	bne.n	80109de <tcp_write+0x6ae>
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d106      	bne.n	80109de <tcp_write+0x6ae>
 80109d0:	4b06      	ldr	r3, [pc, #24]	; (80109ec <tcp_write+0x6bc>)
 80109d2:	f240 3227 	movw	r2, #807	; 0x327
 80109d6:	4906      	ldr	r1, [pc, #24]	; (80109f0 <tcp_write+0x6c0>)
 80109d8:	4806      	ldr	r0, [pc, #24]	; (80109f4 <tcp_write+0x6c4>)
 80109da:	f006 fe45 	bl	8017668 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80109de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	375c      	adds	r7, #92	; 0x5c
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd90      	pop	{r4, r7, pc}
 80109ea:	bf00      	nop
 80109ec:	0801e2f4 	.word	0x0801e2f4
 80109f0:	0801e668 	.word	0x0801e668
 80109f4:	0801e348 	.word	0x0801e348

080109f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80109f8:	b590      	push	{r4, r7, lr}
 80109fa:	b08b      	sub	sp, #44	; 0x2c
 80109fc:	af02      	add	r7, sp, #8
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	460b      	mov	r3, r1
 8010a02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a04:	2300      	movs	r3, #0
 8010a06:	61fb      	str	r3, [r7, #28]
 8010a08:	2300      	movs	r3, #0
 8010a0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <tcp_split_unsent_seg+0x2c>
 8010a16:	4b95      	ldr	r3, [pc, #596]	; (8010c6c <tcp_split_unsent_seg+0x274>)
 8010a18:	f240 324b 	movw	r2, #843	; 0x34b
 8010a1c:	4994      	ldr	r1, [pc, #592]	; (8010c70 <tcp_split_unsent_seg+0x278>)
 8010a1e:	4895      	ldr	r0, [pc, #596]	; (8010c74 <tcp_split_unsent_seg+0x27c>)
 8010a20:	f006 fe22 	bl	8017668 <iprintf>

  useg = pcb->unsent;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d102      	bne.n	8010a36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a34:	e116      	b.n	8010c64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010a36:	887b      	ldrh	r3, [r7, #2]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d109      	bne.n	8010a50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010a3c:	4b8b      	ldr	r3, [pc, #556]	; (8010c6c <tcp_split_unsent_seg+0x274>)
 8010a3e:	f240 3253 	movw	r2, #851	; 0x353
 8010a42:	498d      	ldr	r1, [pc, #564]	; (8010c78 <tcp_split_unsent_seg+0x280>)
 8010a44:	488b      	ldr	r0, [pc, #556]	; (8010c74 <tcp_split_unsent_seg+0x27c>)
 8010a46:	f006 fe0f 	bl	8017668 <iprintf>
    return ERR_VAL;
 8010a4a:	f06f 0305 	mvn.w	r3, #5
 8010a4e:	e109      	b.n	8010c64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	891b      	ldrh	r3, [r3, #8]
 8010a54:	887a      	ldrh	r2, [r7, #2]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d301      	bcc.n	8010a5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e102      	b.n	8010c64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a62:	887a      	ldrh	r2, [r7, #2]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d906      	bls.n	8010a76 <tcp_split_unsent_seg+0x7e>
 8010a68:	4b80      	ldr	r3, [pc, #512]	; (8010c6c <tcp_split_unsent_seg+0x274>)
 8010a6a:	f240 325b 	movw	r2, #859	; 0x35b
 8010a6e:	4983      	ldr	r1, [pc, #524]	; (8010c7c <tcp_split_unsent_seg+0x284>)
 8010a70:	4880      	ldr	r0, [pc, #512]	; (8010c74 <tcp_split_unsent_seg+0x27c>)
 8010a72:	f006 fdf9 	bl	8017668 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	891b      	ldrh	r3, [r3, #8]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <tcp_split_unsent_seg+0x94>
 8010a7e:	4b7b      	ldr	r3, [pc, #492]	; (8010c6c <tcp_split_unsent_seg+0x274>)
 8010a80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010a84:	497e      	ldr	r1, [pc, #504]	; (8010c80 <tcp_split_unsent_seg+0x288>)
 8010a86:	487b      	ldr	r0, [pc, #492]	; (8010c74 <tcp_split_unsent_seg+0x27c>)
 8010a88:	f006 fdee 	bl	8017668 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	7a9b      	ldrb	r3, [r3, #10]
 8010a90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f003 0304 	and.w	r3, r3, #4
 8010a9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	891a      	ldrh	r2, [r3, #8]
 8010aa2:	887b      	ldrh	r3, [r7, #2]
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010aa8:	7bbb      	ldrb	r3, [r7, #14]
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	89bb      	ldrh	r3, [r7, #12]
 8010aae:	4413      	add	r3, r2
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	2036      	movs	r0, #54	; 0x36
 8010aba:	f7fa faf9 	bl	800b0b0 <pbuf_alloc>
 8010abe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 80b7 	beq.w	8010c36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	891a      	ldrh	r2, [r3, #8]
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	891b      	ldrh	r3, [r3, #8]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	887b      	ldrh	r3, [r7, #2]
 8010ad8:	4413      	add	r3, r2
 8010ada:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	6858      	ldr	r0, [r3, #4]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	685a      	ldr	r2, [r3, #4]
 8010ae4:	7bbb      	ldrb	r3, [r7, #14]
 8010ae6:	18d1      	adds	r1, r2, r3
 8010ae8:	897b      	ldrh	r3, [r7, #10]
 8010aea:	89ba      	ldrh	r2, [r7, #12]
 8010aec:	f7fa ffbe 	bl	800ba6c <pbuf_copy_partial>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	89bb      	ldrh	r3, [r7, #12]
 8010af6:	4293      	cmp	r3, r2
 8010af8:	f040 809f 	bne.w	8010c3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	899b      	ldrh	r3, [r3, #12]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7f9 fa1d 	bl	8009f44 <lwip_htons>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b14:	2300      	movs	r3, #0
 8010b16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010b18:	7efb      	ldrb	r3, [r7, #27]
 8010b1a:	f003 0308 	and.w	r3, r3, #8
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d007      	beq.n	8010b32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010b22:	7efb      	ldrb	r3, [r7, #27]
 8010b24:	f023 0308 	bic.w	r3, r3, #8
 8010b28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010b2a:	7ebb      	ldrb	r3, [r7, #26]
 8010b2c:	f043 0308 	orr.w	r3, r3, #8
 8010b30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010b32:	7efb      	ldrb	r3, [r7, #27]
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d007      	beq.n	8010b4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010b3c:	7efb      	ldrb	r3, [r7, #27]
 8010b3e:	f023 0301 	bic.w	r3, r3, #1
 8010b42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010b44:	7ebb      	ldrb	r3, [r7, #26]
 8010b46:	f043 0301 	orr.w	r3, r3, #1
 8010b4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7f9 fa0b 	bl	8009f6e <lwip_htonl>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	887b      	ldrh	r3, [r7, #2]
 8010b5c:	18d1      	adds	r1, r2, r3
 8010b5e:	7eba      	ldrb	r2, [r7, #26]
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	460b      	mov	r3, r1
 8010b66:	6939      	ldr	r1, [r7, #16]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff fa4f 	bl	801000c <tcp_create_segment>
 8010b6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d063      	beq.n	8010c3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fa fe04 	bl	800b788 <pbuf_clen>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b8a:	1a9b      	subs	r3, r3, r2
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	6858      	ldr	r0, [r3, #4]
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	891a      	ldrh	r2, [r3, #8]
 8010b9e:	89bb      	ldrh	r3, [r7, #12]
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f7fa fbe1 	bl	800b36c <pbuf_realloc>
  useg->len -= remainder;
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	891a      	ldrh	r2, [r3, #8]
 8010bae:	89bb      	ldrh	r3, [r7, #12]
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	899b      	ldrh	r3, [r3, #12]
 8010bbe:	b29c      	uxth	r4, r3
 8010bc0:	7efb      	ldrb	r3, [r7, #27]
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7f9 f9bd 	bl	8009f44 <lwip_htons>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	461a      	mov	r2, r3
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	4322      	orrs	r2, r4
 8010bd4:	b292      	uxth	r2, r2
 8010bd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fa fdd3 	bl	800b788 <pbuf_clen>
 8010be2:	4603      	mov	r3, r0
 8010be4:	461a      	mov	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bec:	4413      	add	r3, r2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fa fdc4 	bl	800b788 <pbuf_clen>
 8010c00:	4603      	mov	r3, r0
 8010c02:	461a      	mov	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c0a:	4413      	add	r3, r2
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	69fa      	ldr	r2, [r7, #28]
 8010c20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d103      	bne.n	8010c32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	e016      	b.n	8010c64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010c36:	bf00      	nop
 8010c38:	e002      	b.n	8010c40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c3a:	bf00      	nop
 8010c3c:	e000      	b.n	8010c40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010c3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d006      	beq.n	8010c54 <tcp_split_unsent_seg+0x25c>
 8010c46:	4b09      	ldr	r3, [pc, #36]	; (8010c6c <tcp_split_unsent_seg+0x274>)
 8010c48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010c4c:	490d      	ldr	r1, [pc, #52]	; (8010c84 <tcp_split_unsent_seg+0x28c>)
 8010c4e:	4809      	ldr	r0, [pc, #36]	; (8010c74 <tcp_split_unsent_seg+0x27c>)
 8010c50:	f006 fd0a 	bl	8017668 <iprintf>
  if (p != NULL) {
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d002      	beq.n	8010c60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010c5a:	6938      	ldr	r0, [r7, #16]
 8010c5c:	f7fa fd0c 	bl	800b678 <pbuf_free>
  }

  return ERR_MEM;
 8010c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3724      	adds	r7, #36	; 0x24
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd90      	pop	{r4, r7, pc}
 8010c6c:	0801e2f4 	.word	0x0801e2f4
 8010c70:	0801e688 	.word	0x0801e688
 8010c74:	0801e348 	.word	0x0801e348
 8010c78:	0801e6ac 	.word	0x0801e6ac
 8010c7c:	0801e6d0 	.word	0x0801e6d0
 8010c80:	0801e6e0 	.word	0x0801e6e0
 8010c84:	0801e6f0 	.word	0x0801e6f0

08010c88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d106      	bne.n	8010ca4 <tcp_send_fin+0x1c>
 8010c96:	4b21      	ldr	r3, [pc, #132]	; (8010d1c <tcp_send_fin+0x94>)
 8010c98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010c9c:	4920      	ldr	r1, [pc, #128]	; (8010d20 <tcp_send_fin+0x98>)
 8010c9e:	4821      	ldr	r0, [pc, #132]	; (8010d24 <tcp_send_fin+0x9c>)
 8010ca0:	f006 fce2 	bl	8017668 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d02e      	beq.n	8010d0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	e002      	b.n	8010cba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1f8      	bne.n	8010cb4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	899b      	ldrh	r3, [r3, #12]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7f9 f93a 	bl	8009f44 <lwip_htons>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	f003 0307 	and.w	r3, r3, #7
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d116      	bne.n	8010d0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	899b      	ldrh	r3, [r3, #12]
 8010ce2:	b29c      	uxth	r4, r3
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	f7f9 f92d 	bl	8009f44 <lwip_htons>
 8010cea:	4603      	mov	r3, r0
 8010cec:	461a      	mov	r2, r3
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	4322      	orrs	r2, r4
 8010cf4:	b292      	uxth	r2, r2
 8010cf6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	8b5b      	ldrh	r3, [r3, #26]
 8010cfc:	f043 0320 	orr.w	r3, r3, #32
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e004      	b.n	8010d14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d0a:	2101      	movs	r1, #1
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 f80b 	bl	8010d28 <tcp_enqueue_flags>
 8010d12:	4603      	mov	r3, r0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd90      	pop	{r4, r7, pc}
 8010d1c:	0801e2f4 	.word	0x0801e2f4
 8010d20:	0801e6fc 	.word	0x0801e6fc
 8010d24:	0801e348 	.word	0x0801e348

08010d28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b08a      	sub	sp, #40	; 0x28
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d34:	2300      	movs	r3, #0
 8010d36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d3c:	78fb      	ldrb	r3, [r7, #3]
 8010d3e:	f003 0303 	and.w	r3, r3, #3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <tcp_enqueue_flags+0x2c>
 8010d46:	4b67      	ldr	r3, [pc, #412]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010d48:	f240 4211 	movw	r2, #1041	; 0x411
 8010d4c:	4966      	ldr	r1, [pc, #408]	; (8010ee8 <tcp_enqueue_flags+0x1c0>)
 8010d4e:	4867      	ldr	r0, [pc, #412]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010d50:	f006 fc8a 	bl	8017668 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d106      	bne.n	8010d68 <tcp_enqueue_flags+0x40>
 8010d5a:	4b62      	ldr	r3, [pc, #392]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010d5c:	f240 4213 	movw	r2, #1043	; 0x413
 8010d60:	4963      	ldr	r1, [pc, #396]	; (8010ef0 <tcp_enqueue_flags+0x1c8>)
 8010d62:	4862      	ldr	r0, [pc, #392]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010d64:	f006 fc80 	bl	8017668 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010d68:	78fb      	ldrb	r3, [r7, #3]
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010d72:	2301      	movs	r3, #1
 8010d74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010d76:	7ffb      	ldrb	r3, [r7, #31]
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010d82:	7dfb      	ldrb	r3, [r7, #23]
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	2036      	movs	r0, #54	; 0x36
 8010d8e:	f7fa f98f 	bl	800b0b0 <pbuf_alloc>
 8010d92:	6138      	str	r0, [r7, #16]
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d109      	bne.n	8010dae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	8b5b      	ldrh	r3, [r3, #26]
 8010d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dac:	e095      	b.n	8010eda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	895a      	ldrh	r2, [r3, #10]
 8010db2:	7dfb      	ldrb	r3, [r7, #23]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d206      	bcs.n	8010dc8 <tcp_enqueue_flags+0xa0>
 8010dba:	4b4a      	ldr	r3, [pc, #296]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010dbc:	f240 4239 	movw	r2, #1081	; 0x439
 8010dc0:	494c      	ldr	r1, [pc, #304]	; (8010ef4 <tcp_enqueue_flags+0x1cc>)
 8010dc2:	484a      	ldr	r0, [pc, #296]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010dc4:	f006 fc50 	bl	8017668 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010dcc:	78fa      	ldrb	r2, [r7, #3]
 8010dce:	7ffb      	ldrb	r3, [r7, #31]
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	6939      	ldr	r1, [r7, #16]
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff f918 	bl	801000c <tcp_create_segment>
 8010ddc:	60f8      	str	r0, [r7, #12]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d109      	bne.n	8010df8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	8b5b      	ldrh	r3, [r3, #26]
 8010de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010df6:	e070      	b.n	8010eda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	f003 0303 	and.w	r3, r3, #3
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <tcp_enqueue_flags+0xea>
 8010e04:	4b37      	ldr	r3, [pc, #220]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010e06:	f240 4242 	movw	r2, #1090	; 0x442
 8010e0a:	493b      	ldr	r1, [pc, #236]	; (8010ef8 <tcp_enqueue_flags+0x1d0>)
 8010e0c:	4837      	ldr	r0, [pc, #220]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010e0e:	f006 fc2b 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	891b      	ldrh	r3, [r3, #8]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d006      	beq.n	8010e28 <tcp_enqueue_flags+0x100>
 8010e1a:	4b32      	ldr	r3, [pc, #200]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010e1c:	f240 4243 	movw	r2, #1091	; 0x443
 8010e20:	4936      	ldr	r1, [pc, #216]	; (8010efc <tcp_enqueue_flags+0x1d4>)
 8010e22:	4832      	ldr	r0, [pc, #200]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010e24:	f006 fc20 	bl	8017668 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d103      	bne.n	8010e38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e36:	e00d      	b.n	8010e54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3c:	61bb      	str	r3, [r7, #24]
 8010e3e:	e002      	b.n	8010e46 <tcp_enqueue_flags+0x11e>
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	61bb      	str	r3, [r7, #24]
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1f8      	bne.n	8010e40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	68fa      	ldr	r2, [r7, #12]
 8010e52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010e5c:	78fb      	ldrb	r3, [r7, #3]
 8010e5e:	f003 0302 	and.w	r3, r3, #2
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d104      	bne.n	8010e70 <tcp_enqueue_flags+0x148>
 8010e66:	78fb      	ldrb	r3, [r7, #3]
 8010e68:	f003 0301 	and.w	r3, r3, #1
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010e7a:	78fb      	ldrb	r3, [r7, #3]
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	8b5b      	ldrh	r3, [r3, #26]
 8010e88:	f043 0320 	orr.w	r3, r3, #32
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fa fc76 	bl	800b788 <pbuf_clen>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ea6:	4413      	add	r3, r2
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00e      	beq.n	8010ed8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d10a      	bne.n	8010ed8 <tcp_enqueue_flags+0x1b0>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <tcp_enqueue_flags+0x1b0>
 8010eca:	4b06      	ldr	r3, [pc, #24]	; (8010ee4 <tcp_enqueue_flags+0x1bc>)
 8010ecc:	f240 4265 	movw	r2, #1125	; 0x465
 8010ed0:	490b      	ldr	r1, [pc, #44]	; (8010f00 <tcp_enqueue_flags+0x1d8>)
 8010ed2:	4806      	ldr	r0, [pc, #24]	; (8010eec <tcp_enqueue_flags+0x1c4>)
 8010ed4:	f006 fbc8 	bl	8017668 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3720      	adds	r7, #32
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	0801e2f4 	.word	0x0801e2f4
 8010ee8:	0801e718 	.word	0x0801e718
 8010eec:	0801e348 	.word	0x0801e348
 8010ef0:	0801e770 	.word	0x0801e770
 8010ef4:	0801e790 	.word	0x0801e790
 8010ef8:	0801e7cc 	.word	0x0801e7cc
 8010efc:	0801e7e4 	.word	0x0801e7e4
 8010f00:	0801e810 	.word	0x0801e810

08010f04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f04:	b5b0      	push	{r4, r5, r7, lr}
 8010f06:	b08c      	sub	sp, #48	; 0x30
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg, *useg;
  u32_t wnd, snd_nxt;
  err_t err;
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d106      	bne.n	8010f24 <tcp_output+0x20>
 8010f16:	4ba0      	ldr	r3, [pc, #640]	; (8011198 <tcp_output+0x294>)
 8010f18:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010f1c:	499f      	ldr	r1, [pc, #636]	; (801119c <tcp_output+0x298>)
 8010f1e:	48a0      	ldr	r0, [pc, #640]	; (80111a0 <tcp_output+0x29c>)
 8010f20:	f006 fba2 	bl	8017668 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	7d1b      	ldrb	r3, [r3, #20]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d106      	bne.n	8010f3a <tcp_output+0x36>
 8010f2c:	4b9a      	ldr	r3, [pc, #616]	; (8011198 <tcp_output+0x294>)
 8010f2e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010f32:	499c      	ldr	r1, [pc, #624]	; (80111a4 <tcp_output+0x2a0>)
 8010f34:	489a      	ldr	r0, [pc, #616]	; (80111a0 <tcp_output+0x29c>)
 8010f36:	f006 fb97 	bl	8017668 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f3a:	4b9b      	ldr	r3, [pc, #620]	; (80111a8 <tcp_output+0x2a4>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d101      	bne.n	8010f48 <tcp_output+0x44>
    return ERR_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	e1d2      	b.n	80112ee <tcp_output+0x3ea>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f54:	4293      	cmp	r3, r2
 8010f56:	bf28      	it	cs
 8010f58:	4613      	movcs	r3, r2
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	61fb      	str	r3, [r7, #28]

  seg = pcb->unsent;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (seg == NULL) {
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d10b      	bne.n	8010f82 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	8b5b      	ldrh	r3, [r3, #26]
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	f000 81ae 	beq.w	80112d4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fdcf 	bl	8011b1c <tcp_send_empty_ack>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	e1b5      	b.n	80112ee <tcp_output+0x3ea>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010f82:	6879      	ldr	r1, [r7, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3304      	adds	r3, #4
 8010f88:	461a      	mov	r2, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff f822 	bl	800ffd4 <tcp_route>
 8010f90:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <tcp_output+0x9a>
    return ERR_RTE;
 8010f98:	f06f 0303 	mvn.w	r3, #3
 8010f9c:	e1a7      	b.n	80112ee <tcp_output+0x3ea>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d003      	beq.n	8010fac <tcp_output+0xa8>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d111      	bne.n	8010fd0 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d002      	beq.n	8010fb8 <tcp_output+0xb4>
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	e000      	b.n	8010fba <tcp_output+0xb6>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	617b      	str	r3, [r7, #20]
    if (local_ip == NULL) {
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d102      	bne.n	8010fc8 <tcp_output+0xc4>
      return ERR_RTE;
 8010fc2:	f06f 0303 	mvn.w	r3, #3
 8010fc6:	e192      	b.n	80112ee <tcp_output+0x3ea>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7f8 ffc9 	bl	8009f6e <lwip_htonl>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fe6:	8912      	ldrh	r2, [r2, #8]
 8010fe8:	4413      	add	r3, r2
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d227      	bcs.n	8011040 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d114      	bne.n	8011028 <tcp_output+0x124>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011002:	2b00      	cmp	r3, #0
 8011004:	d110      	bne.n	8011028 <tcp_output+0x124>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801100c:	2b00      	cmp	r3, #0
 801100e:	d10b      	bne.n	8011028 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2201      	movs	r2, #1
 801101c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2200      	movs	r2, #0
 8011024:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	8b5b      	ldrh	r3, [r3, #26]
 801102c:	f003 0302 	and.w	r3, r3, #2
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 8151 	beq.w	80112d8 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fd70 	bl	8011b1c <tcp_send_empty_ack>
 801103c:	4603      	mov	r3, r0
 801103e:	e156      	b.n	80112ee <tcp_output+0x3ea>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801104c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (useg != NULL) {
 801104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 8120 	beq.w	8011296 <tcp_output+0x392>
    for (; useg->next != NULL; useg = useg->next);
 8011056:	e002      	b.n	801105e <tcp_output+0x15a>
 8011058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	62bb      	str	r3, [r7, #40]	; 0x28
 801105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f8      	bne.n	8011058 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011066:	e116      	b.n	8011296 <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	899b      	ldrh	r3, [r3, #12]
 801106e:	b29b      	uxth	r3, r3
 8011070:	4618      	mov	r0, r3
 8011072:	f7f8 ff67 	bl	8009f44 <lwip_htons>
 8011076:	4603      	mov	r3, r0
 8011078:	b2db      	uxtb	r3, r3
 801107a:	f003 0304 	and.w	r3, r3, #4
 801107e:	2b00      	cmp	r3, #0
 8011080:	d006      	beq.n	8011090 <tcp_output+0x18c>
 8011082:	4b45      	ldr	r3, [pc, #276]	; (8011198 <tcp_output+0x294>)
 8011084:	f240 5236 	movw	r2, #1334	; 0x536
 8011088:	4948      	ldr	r1, [pc, #288]	; (80111ac <tcp_output+0x2a8>)
 801108a:	4845      	ldr	r0, [pc, #276]	; (80111a0 <tcp_output+0x29c>)
 801108c:	f006 faec 	bl	8017668 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011094:	2b00      	cmp	r3, #0
 8011096:	d01f      	beq.n	80110d8 <tcp_output+0x1d4>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8b5b      	ldrh	r3, [r3, #26]
 801109c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d119      	bne.n	80110d8 <tcp_output+0x1d4>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00b      	beq.n	80110c4 <tcp_output+0x1c0>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d110      	bne.n	80110d8 <tcp_output+0x1d4>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ba:	891a      	ldrh	r2, [r3, #8]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d209      	bcs.n	80110d8 <tcp_output+0x1d4>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d004      	beq.n	80110d8 <tcp_output+0x1d4>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110d4:	2b08      	cmp	r3, #8
 80110d6:	d901      	bls.n	80110dc <tcp_output+0x1d8>
 80110d8:	2301      	movs	r3, #1
 80110da:	e000      	b.n	80110de <tcp_output+0x1da>
 80110dc:	2300      	movs	r3, #0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8b5b      	ldrh	r3, [r3, #26]
 80110e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f000 80e8 	beq.w	80112c0 <tcp_output+0x3bc>
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd,
                                 lwip_ntohl(seg->tcphdr->seqno) + seg->len -
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
 80110f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80110f2:	3301      	adds	r3, #1
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	7d1b      	ldrb	r3, [r3, #20]
 80110fc:	2b02      	cmp	r3, #2
 80110fe:	d00d      	beq.n	801111c <tcp_output+0x218>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	899b      	ldrh	r3, [r3, #12]
 8011106:	b29c      	uxth	r4, r3
 8011108:	2010      	movs	r0, #16
 801110a:	f7f8 ff1b 	bl	8009f44 <lwip_htons>
 801110e:	4603      	mov	r3, r0
 8011110:	461a      	mov	r2, r3
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	4322      	orrs	r2, r4
 8011118:	b292      	uxth	r2, r2
 801111a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801111c:	69ba      	ldr	r2, [r7, #24]
 801111e:	6879      	ldr	r1, [r7, #4]
 8011120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011122:	f000 f909 	bl	8011338 <tcp_output_segment>
 8011126:	4603      	mov	r3, r0
 8011128:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801112a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d009      	beq.n	8011146 <tcp_output+0x242>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	8b5b      	ldrh	r3, [r3, #26]
 8011136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801113a:	b29a      	uxth	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	835a      	strh	r2, [r3, #26]
      return err;
 8011140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011144:	e0d3      	b.n	80112ee <tcp_output+0x3ea>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	7d1b      	ldrb	r3, [r3, #20]
 8011152:	2b02      	cmp	r3, #2
 8011154:	d006      	beq.n	8011164 <tcp_output+0x260>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8b5b      	ldrh	r3, [r3, #26]
 801115a:	f023 0303 	bic.w	r3, r3, #3
 801115e:	b29a      	uxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	4618      	mov	r0, r3
 801116c:	f7f8 feff 	bl	8009f6e <lwip_htonl>
 8011170:	4604      	mov	r4, r0
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	891b      	ldrh	r3, [r3, #8]
 8011176:	461d      	mov	r5, r3
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	899b      	ldrh	r3, [r3, #12]
 801117e:	b29b      	uxth	r3, r3
 8011180:	4618      	mov	r0, r3
 8011182:	f7f8 fedf 	bl	8009f44 <lwip_htons>
 8011186:	4603      	mov	r3, r0
 8011188:	b2db      	uxtb	r3, r3
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00e      	beq.n	80111b0 <tcp_output+0x2ac>
 8011192:	2301      	movs	r3, #1
 8011194:	e00d      	b.n	80111b2 <tcp_output+0x2ae>
 8011196:	bf00      	nop
 8011198:	0801e2f4 	.word	0x0801e2f4
 801119c:	0801e838 	.word	0x0801e838
 80111a0:	0801e348 	.word	0x0801e348
 80111a4:	0801e850 	.word	0x0801e850
 80111a8:	2000d870 	.word	0x2000d870
 80111ac:	0801e878 	.word	0x0801e878
 80111b0:	2300      	movs	r3, #0
 80111b2:	442b      	add	r3, r5
 80111b4:	4423      	add	r3, r4
 80111b6:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	da02      	bge.n	80111ca <tcp_output+0x2c6>
      pcb->snd_nxt = snd_nxt;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80111ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111cc:	891b      	ldrh	r3, [r3, #8]
 80111ce:	461c      	mov	r4, r3
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f8 feb3 	bl	8009f44 <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	f003 0303 	and.w	r3, r3, #3
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <tcp_output+0x2ea>
 80111ea:	2301      	movs	r3, #1
 80111ec:	e000      	b.n	80111f0 <tcp_output+0x2ec>
 80111ee:	2300      	movs	r3, #0
 80111f0:	4423      	add	r3, r4
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d049      	beq.n	801128a <tcp_output+0x386>
      seg->next = NULL;
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	2200      	movs	r2, #0
 80111fa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011200:	2b00      	cmp	r3, #0
 8011202:	d105      	bne.n	8011210 <tcp_output+0x30c>
        pcb->unacked = seg;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011208:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	62bb      	str	r3, [r7, #40]	; 0x28
 801120e:	e03f      	b.n	8011290 <tcp_output+0x38c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	4618      	mov	r0, r3
 8011218:	f7f8 fea9 	bl	8009f6e <lwip_htonl>
 801121c:	4604      	mov	r4, r0
 801121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f7f8 fea2 	bl	8009f6e <lwip_htonl>
 801122a:	4603      	mov	r3, r0
 801122c:	1ae3      	subs	r3, r4, r3
 801122e:	2b00      	cmp	r3, #0
 8011230:	da24      	bge.n	801127c <tcp_output+0x378>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	3370      	adds	r3, #112	; 0x70
 8011236:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8011238:	e002      	b.n	8011240 <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801123a:	6a3b      	ldr	r3, [r7, #32]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d011      	beq.n	801126c <tcp_output+0x368>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	f7f8 fe8c 	bl	8009f6e <lwip_htonl>
 8011256:	4604      	mov	r4, r0
 8011258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	4618      	mov	r0, r3
 8011260:	f7f8 fe85 	bl	8009f6e <lwip_htonl>
 8011264:	4603      	mov	r3, r0
 8011266:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011268:	2b00      	cmp	r3, #0
 801126a:	dbe6      	blt.n	801123a <tcp_output+0x336>
          }
          seg->next = (*cur_seg);
 801126c:	6a3b      	ldr	r3, [r7, #32]
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011272:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	e009      	b.n	8011290 <tcp_output+0x38c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011280:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	62bb      	str	r3, [r7, #40]	; 0x28
 8011288:	e002      	b.n	8011290 <tcp_output+0x38c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801128a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801128c:	f7fb fe35 	bl	800cefa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011294:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (seg != NULL &&
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	2b00      	cmp	r3, #0
 801129a:	d012      	beq.n	80112c2 <tcp_output+0x3be>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f8 fe63 	bl	8009f6e <lwip_htonl>
 80112a8:	4602      	mov	r2, r0
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112b2:	8912      	ldrh	r2, [r2, #8]
 80112b4:	4413      	add	r3, r2
  while (seg != NULL &&
 80112b6:	69fa      	ldr	r2, [r7, #28]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	f4bf aed5 	bcs.w	8011068 <tcp_output+0x164>
 80112be:	e000      	b.n	80112c2 <tcp_output+0x3be>
      break;
 80112c0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d108      	bne.n	80112dc <tcp_output+0x3d8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80112d2:	e004      	b.n	80112de <tcp_output+0x3da>
    goto output_done;
 80112d4:	bf00      	nop
 80112d6:	e002      	b.n	80112de <tcp_output+0x3da>
    goto output_done;
 80112d8:	bf00      	nop
 80112da:	e000      	b.n	80112de <tcp_output+0x3da>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80112dc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	8b5b      	ldrh	r3, [r3, #26]
 80112e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80112ec:	2300      	movs	r3, #0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3730      	adds	r7, #48	; 0x30
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bdb0      	pop	{r4, r5, r7, pc}
 80112f6:	bf00      	nop

080112f8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d106      	bne.n	8011314 <tcp_output_segment_busy+0x1c>
 8011306:	4b09      	ldr	r3, [pc, #36]	; (801132c <tcp_output_segment_busy+0x34>)
 8011308:	f240 529a 	movw	r2, #1434	; 0x59a
 801130c:	4908      	ldr	r1, [pc, #32]	; (8011330 <tcp_output_segment_busy+0x38>)
 801130e:	4809      	ldr	r0, [pc, #36]	; (8011334 <tcp_output_segment_busy+0x3c>)
 8011310:	f006 f9aa 	bl	8017668 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	7b9b      	ldrb	r3, [r3, #14]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d001      	beq.n	8011322 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801131e:	2301      	movs	r3, #1
 8011320:	e000      	b.n	8011324 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0801e2f4 	.word	0x0801e2f4
 8011330:	0801e890 	.word	0x0801e890
 8011334:	0801e348 	.word	0x0801e348

08011338 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011338:	b5b0      	push	{r4, r5, r7, lr}
 801133a:	b08c      	sub	sp, #48	; 0x30
 801133c:	af04      	add	r7, sp, #16
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <tcp_output_segment+0x20>
 801134a:	4b63      	ldr	r3, [pc, #396]	; (80114d8 <tcp_output_segment+0x1a0>)
 801134c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011350:	4962      	ldr	r1, [pc, #392]	; (80114dc <tcp_output_segment+0x1a4>)
 8011352:	4863      	ldr	r0, [pc, #396]	; (80114e0 <tcp_output_segment+0x1a8>)
 8011354:	f006 f988 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d106      	bne.n	801136c <tcp_output_segment+0x34>
 801135e:	4b5e      	ldr	r3, [pc, #376]	; (80114d8 <tcp_output_segment+0x1a0>)
 8011360:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011364:	495f      	ldr	r1, [pc, #380]	; (80114e4 <tcp_output_segment+0x1ac>)
 8011366:	485e      	ldr	r0, [pc, #376]	; (80114e0 <tcp_output_segment+0x1a8>)
 8011368:	f006 f97e 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <tcp_output_segment+0x48>
 8011372:	4b59      	ldr	r3, [pc, #356]	; (80114d8 <tcp_output_segment+0x1a0>)
 8011374:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011378:	495b      	ldr	r1, [pc, #364]	; (80114e8 <tcp_output_segment+0x1b0>)
 801137a:	4859      	ldr	r0, [pc, #356]	; (80114e0 <tcp_output_segment+0x1a8>)
 801137c:	f006 f974 	bl	8017668 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	f7ff ffb9 	bl	80112f8 <tcp_output_segment_busy>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d001      	beq.n	8011390 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	e09f      	b.n	80114d0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	68dc      	ldr	r4, [r3, #12]
 8011398:	4610      	mov	r0, r2
 801139a:	f7f8 fde8 	bl	8009f6e <lwip_htonl>
 801139e:	4603      	mov	r3, r0
 80113a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	68dc      	ldr	r4, [r3, #12]
 80113aa:	4610      	mov	r0, r2
 80113ac:	f7f8 fdca 	bl	8009f44 <lwip_htons>
 80113b0:	4603      	mov	r3, r0
 80113b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	68ba      	ldr	r2, [r7, #8]
 80113ba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80113bc:	441a      	add	r2, r3
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	3314      	adds	r3, #20
 80113c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	7a9b      	ldrb	r3, [r3, #10]
 80113ce:	f003 0301 	and.w	r3, r3, #1
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d015      	beq.n	8011402 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	3304      	adds	r3, #4
 80113da:	461a      	mov	r2, r3
 80113dc:	6879      	ldr	r1, [r7, #4]
 80113de:	f44f 7006 	mov.w	r0, #536	; 0x218
 80113e2:	f7fc f97d 	bl	800d6e0 <tcp_eff_send_mss_netif>
 80113e6:	4603      	mov	r3, r0
 80113e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80113ea:	8b7b      	ldrh	r3, [r7, #26]
 80113ec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7f8 fdbc 	bl	8009f6e <lwip_htonl>
 80113f6:	4602      	mov	r2, r0
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	3304      	adds	r3, #4
 8011400:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011408:	2b00      	cmp	r3, #0
 801140a:	da02      	bge.n	8011412 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2200      	movs	r2, #0
 8011410:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10c      	bne.n	8011434 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801141a:	4b34      	ldr	r3, [pc, #208]	; (80114ec <tcp_output_segment+0x1b4>)
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	4618      	mov	r0, r3
 801142a:	f7f8 fda0 	bl	8009f6e <lwip_htonl>
 801142e:	4602      	mov	r2, r0
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	68da      	ldr	r2, [r3, #12]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	8959      	ldrh	r1, [r3, #10]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	8b3a      	ldrh	r2, [r7, #24]
 801144e:	1a8a      	subs	r2, r1, r2
 8011450:	b292      	uxth	r2, r2
 8011452:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	8919      	ldrh	r1, [r3, #8]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	8b3a      	ldrh	r2, [r7, #24]
 8011460:	1a8a      	subs	r2, r1, r2
 8011462:	b292      	uxth	r2, r2
 8011464:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	68fa      	ldr	r2, [r7, #12]
 801146c:	68d2      	ldr	r2, [r2, #12]
 801146e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	2200      	movs	r2, #0
 8011476:	741a      	strb	r2, [r3, #16]
 8011478:	2200      	movs	r2, #0
 801147a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	f103 0214 	add.w	r2, r3, #20
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	7a9b      	ldrb	r3, [r3, #10]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	f003 0304 	and.w	r3, r3, #4
 801148e:	4413      	add	r3, r2
 8011490:	69fa      	ldr	r2, [r7, #28]
 8011492:	429a      	cmp	r2, r3
 8011494:	d006      	beq.n	80114a4 <tcp_output_segment+0x16c>
 8011496:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <tcp_output_segment+0x1a0>)
 8011498:	f240 621c 	movw	r2, #1564	; 0x61c
 801149c:	4914      	ldr	r1, [pc, #80]	; (80114f0 <tcp_output_segment+0x1b8>)
 801149e:	4810      	ldr	r0, [pc, #64]	; (80114e0 <tcp_output_segment+0x1a8>)
 80114a0:	f006 f8e2 	bl	8017668 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6858      	ldr	r0, [r3, #4]
 80114a8:	68b9      	ldr	r1, [r7, #8]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	1d1c      	adds	r4, r3, #4
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	7add      	ldrb	r5, [r3, #11]
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	7a9b      	ldrb	r3, [r3, #10]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	9202      	str	r2, [sp, #8]
 80114ba:	2206      	movs	r2, #6
 80114bc:	9201      	str	r2, [sp, #4]
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	462b      	mov	r3, r5
 80114c2:	4622      	mov	r2, r4
 80114c4:	f004 fbc4 	bl	8015c50 <ip4_output_if>
 80114c8:	4603      	mov	r3, r0
 80114ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80114cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3720      	adds	r7, #32
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bdb0      	pop	{r4, r5, r7, pc}
 80114d8:	0801e2f4 	.word	0x0801e2f4
 80114dc:	0801e8b8 	.word	0x0801e8b8
 80114e0:	0801e348 	.word	0x0801e348
 80114e4:	0801e8d8 	.word	0x0801e8d8
 80114e8:	0801e8f8 	.word	0x0801e8f8
 80114ec:	2000d860 	.word	0x2000d860
 80114f0:	0801e91c 	.word	0x0801e91c

080114f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80114f4:	b5b0      	push	{r4, r5, r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d106      	bne.n	8011510 <tcp_rexmit_rto_prepare+0x1c>
 8011502:	4b31      	ldr	r3, [pc, #196]	; (80115c8 <tcp_rexmit_rto_prepare+0xd4>)
 8011504:	f240 6263 	movw	r2, #1635	; 0x663
 8011508:	4930      	ldr	r1, [pc, #192]	; (80115cc <tcp_rexmit_rto_prepare+0xd8>)
 801150a:	4831      	ldr	r0, [pc, #196]	; (80115d0 <tcp_rexmit_rto_prepare+0xdc>)
 801150c:	f006 f8ac 	bl	8017668 <iprintf>

  if (pcb->unacked == NULL) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011514:	2b00      	cmp	r3, #0
 8011516:	d102      	bne.n	801151e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011518:	f06f 0305 	mvn.w	r3, #5
 801151c:	e050      	b.n	80115c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e00b      	b.n	801153e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011526:	68f8      	ldr	r0, [r7, #12]
 8011528:	f7ff fee6 	bl	80112f8 <tcp_output_segment_busy>
 801152c:	4603      	mov	r3, r0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011532:	f06f 0305 	mvn.w	r3, #5
 8011536:	e043      	b.n	80115c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	60fb      	str	r3, [r7, #12]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d1ef      	bne.n	8011526 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f7ff fed6 	bl	80112f8 <tcp_output_segment_busy>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d002      	beq.n	8011558 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011552:	f06f 0305 	mvn.w	r3, #5
 8011556:	e033      	b.n	80115c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	8b5b      	ldrh	r3, [r3, #26]
 8011572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011576:	b29a      	uxth	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	4618      	mov	r0, r3
 8011584:	f7f8 fcf3 	bl	8009f6e <lwip_htonl>
 8011588:	4604      	mov	r4, r0
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	461d      	mov	r5, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	899b      	ldrh	r3, [r3, #12]
 8011596:	b29b      	uxth	r3, r3
 8011598:	4618      	mov	r0, r3
 801159a:	f7f8 fcd3 	bl	8009f44 <lwip_htons>
 801159e:	4603      	mov	r3, r0
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	f003 0303 	and.w	r3, r3, #3
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <tcp_rexmit_rto_prepare+0xba>
 80115aa:	2301      	movs	r3, #1
 80115ac:	e000      	b.n	80115b0 <tcp_rexmit_rto_prepare+0xbc>
 80115ae:	2300      	movs	r3, #0
 80115b0:	442b      	add	r3, r5
 80115b2:	18e2      	adds	r2, r4, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2200      	movs	r2, #0
 80115bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3710      	adds	r7, #16
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bdb0      	pop	{r4, r5, r7, pc}
 80115c8:	0801e2f4 	.word	0x0801e2f4
 80115cc:	0801e930 	.word	0x0801e930
 80115d0:	0801e348 	.word	0x0801e348

080115d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d106      	bne.n	80115f0 <tcp_rexmit_rto_commit+0x1c>
 80115e2:	4b0d      	ldr	r3, [pc, #52]	; (8011618 <tcp_rexmit_rto_commit+0x44>)
 80115e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80115e8:	490c      	ldr	r1, [pc, #48]	; (801161c <tcp_rexmit_rto_commit+0x48>)
 80115ea:	480d      	ldr	r0, [pc, #52]	; (8011620 <tcp_rexmit_rto_commit+0x4c>)
 80115ec:	f006 f83c 	bl	8017668 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80115f6:	2bff      	cmp	r3, #255	; 0xff
 80115f8:	d007      	beq.n	801160a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011600:	3301      	adds	r3, #1
 8011602:	b2da      	uxtb	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7ff fc7a 	bl	8010f04 <tcp_output>
}
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	0801e2f4 	.word	0x0801e2f4
 801161c:	0801e954 	.word	0x0801e954
 8011620:	0801e348 	.word	0x0801e348

08011624 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <tcp_rexmit_rto+0x1c>
 8011632:	4b0a      	ldr	r3, [pc, #40]	; (801165c <tcp_rexmit_rto+0x38>)
 8011634:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011638:	4909      	ldr	r1, [pc, #36]	; (8011660 <tcp_rexmit_rto+0x3c>)
 801163a:	480a      	ldr	r0, [pc, #40]	; (8011664 <tcp_rexmit_rto+0x40>)
 801163c:	f006 f814 	bl	8017668 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ff57 	bl	80114f4 <tcp_rexmit_rto_prepare>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f7ff ffc1 	bl	80115d4 <tcp_rexmit_rto_commit>
  }
}
 8011652:	bf00      	nop
 8011654:	3708      	adds	r7, #8
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	0801e2f4 	.word	0x0801e2f4
 8011660:	0801e978 	.word	0x0801e978
 8011664:	0801e348 	.word	0x0801e348

08011668 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011668:	b590      	push	{r4, r7, lr}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d106      	bne.n	8011684 <tcp_rexmit+0x1c>
 8011676:	4b2f      	ldr	r3, [pc, #188]	; (8011734 <tcp_rexmit+0xcc>)
 8011678:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801167c:	492e      	ldr	r1, [pc, #184]	; (8011738 <tcp_rexmit+0xd0>)
 801167e:	482f      	ldr	r0, [pc, #188]	; (801173c <tcp_rexmit+0xd4>)
 8011680:	f005 fff2 	bl	8017668 <iprintf>

  if (pcb->unacked == NULL) {
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801168c:	f06f 0305 	mvn.w	r3, #5
 8011690:	e04c      	b.n	801172c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011696:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011698:	68b8      	ldr	r0, [r7, #8]
 801169a:	f7ff fe2d 	bl	80112f8 <tcp_output_segment_busy>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80116a4:	f06f 0305 	mvn.w	r3, #5
 80116a8:	e040      	b.n	801172c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	336c      	adds	r3, #108	; 0x6c
 80116b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116b8:	e002      	b.n	80116c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d011      	beq.n	80116ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7f8 fc4c 	bl	8009f6e <lwip_htonl>
 80116d6:	4604      	mov	r4, r0
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	4618      	mov	r0, r3
 80116e0:	f7f8 fc45 	bl	8009f6e <lwip_htonl>
 80116e4:	4603      	mov	r3, r0
 80116e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	dbe6      	blt.n	80116ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	68ba      	ldr	r2, [r7, #8]
 80116f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d103      	bne.n	801170a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011710:	2bff      	cmp	r3, #255	; 0xff
 8011712:	d007      	beq.n	8011724 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801171a:	3301      	adds	r3, #1
 801171c:	b2da      	uxtb	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	bd90      	pop	{r4, r7, pc}
 8011734:	0801e2f4 	.word	0x0801e2f4
 8011738:	0801e994 	.word	0x0801e994
 801173c:	0801e348 	.word	0x0801e348

08011740 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d106      	bne.n	801175c <tcp_rexmit_fast+0x1c>
 801174e:	4b2a      	ldr	r3, [pc, #168]	; (80117f8 <tcp_rexmit_fast+0xb8>)
 8011750:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011754:	4929      	ldr	r1, [pc, #164]	; (80117fc <tcp_rexmit_fast+0xbc>)
 8011756:	482a      	ldr	r0, [pc, #168]	; (8011800 <tcp_rexmit_fast+0xc0>)
 8011758:	f005 ff86 	bl	8017668 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011760:	2b00      	cmp	r3, #0
 8011762:	d044      	beq.n	80117ee <tcp_rexmit_fast+0xae>
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	8b5b      	ldrh	r3, [r3, #26]
 8011768:	f003 0304 	and.w	r3, r3, #4
 801176c:	2b00      	cmp	r3, #0
 801176e:	d13e      	bne.n	80117ee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff ff79 	bl	8011668 <tcp_rexmit>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d138      	bne.n	80117ee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011788:	4293      	cmp	r3, r2
 801178a:	bf28      	it	cs
 801178c:	4613      	movcs	r3, r2
 801178e:	b29b      	uxth	r3, r3
 8011790:	0fda      	lsrs	r2, r3, #31
 8011792:	4413      	add	r3, r2
 8011794:	105b      	asrs	r3, r3, #1
 8011796:	b29a      	uxth	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117a4:	461a      	mov	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d206      	bcs.n	80117be <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	b29a      	uxth	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117c8:	4619      	mov	r1, r3
 80117ca:	0049      	lsls	r1, r1, #1
 80117cc:	440b      	add	r3, r1
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	4413      	add	r3, r2
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8b5b      	ldrh	r3, [r3, #26]
 80117de:	f043 0304 	orr.w	r3, r3, #4
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80117ee:	bf00      	nop
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	0801e2f4 	.word	0x0801e2f4
 80117fc:	0801e9ac 	.word	0x0801e9ac
 8011800:	0801e348 	.word	0x0801e348

08011804 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b086      	sub	sp, #24
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	607b      	str	r3, [r7, #4]
 801180e:	460b      	mov	r3, r1
 8011810:	817b      	strh	r3, [r7, #10]
 8011812:	4613      	mov	r3, r2
 8011814:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011816:	897a      	ldrh	r2, [r7, #10]
 8011818:	893b      	ldrh	r3, [r7, #8]
 801181a:	4413      	add	r3, r2
 801181c:	b29b      	uxth	r3, r3
 801181e:	3314      	adds	r3, #20
 8011820:	b29b      	uxth	r3, r3
 8011822:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011826:	4619      	mov	r1, r3
 8011828:	2022      	movs	r0, #34	; 0x22
 801182a:	f7f9 fc41 	bl	800b0b0 <pbuf_alloc>
 801182e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d04d      	beq.n	80118d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011836:	897b      	ldrh	r3, [r7, #10]
 8011838:	3313      	adds	r3, #19
 801183a:	697a      	ldr	r2, [r7, #20]
 801183c:	8952      	ldrh	r2, [r2, #10]
 801183e:	4293      	cmp	r3, r2
 8011840:	db06      	blt.n	8011850 <tcp_output_alloc_header_common+0x4c>
 8011842:	4b26      	ldr	r3, [pc, #152]	; (80118dc <tcp_output_alloc_header_common+0xd8>)
 8011844:	f240 7223 	movw	r2, #1827	; 0x723
 8011848:	4925      	ldr	r1, [pc, #148]	; (80118e0 <tcp_output_alloc_header_common+0xdc>)
 801184a:	4826      	ldr	r0, [pc, #152]	; (80118e4 <tcp_output_alloc_header_common+0xe0>)
 801184c:	f005 ff0c 	bl	8017668 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011856:	8c3b      	ldrh	r3, [r7, #32]
 8011858:	4618      	mov	r0, r3
 801185a:	f7f8 fb73 	bl	8009f44 <lwip_htons>
 801185e:	4603      	mov	r3, r0
 8011860:	461a      	mov	r2, r3
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011868:	4618      	mov	r0, r3
 801186a:	f7f8 fb6b 	bl	8009f44 <lwip_htons>
 801186e:	4603      	mov	r3, r0
 8011870:	461a      	mov	r2, r3
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801187c:	68f8      	ldr	r0, [r7, #12]
 801187e:	f7f8 fb76 	bl	8009f6e <lwip_htonl>
 8011882:	4602      	mov	r2, r0
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011888:	897b      	ldrh	r3, [r7, #10]
 801188a:	089b      	lsrs	r3, r3, #2
 801188c:	b29b      	uxth	r3, r3
 801188e:	3305      	adds	r3, #5
 8011890:	b29b      	uxth	r3, r3
 8011892:	031b      	lsls	r3, r3, #12
 8011894:	b29a      	uxth	r2, r3
 8011896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801189a:	b29b      	uxth	r3, r3
 801189c:	4313      	orrs	r3, r2
 801189e:	b29b      	uxth	r3, r3
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f8 fb4f 	bl	8009f44 <lwip_htons>
 80118a6:	4603      	mov	r3, r0
 80118a8:	461a      	mov	r2, r3
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80118ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7f8 fb47 	bl	8009f44 <lwip_htons>
 80118b6:	4603      	mov	r3, r0
 80118b8:	461a      	mov	r2, r3
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	2200      	movs	r2, #0
 80118c2:	741a      	strb	r2, [r3, #16]
 80118c4:	2200      	movs	r2, #0
 80118c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	2200      	movs	r2, #0
 80118cc:	749a      	strb	r2, [r3, #18]
 80118ce:	2200      	movs	r2, #0
 80118d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80118d2:	697b      	ldr	r3, [r7, #20]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3718      	adds	r7, #24
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	0801e2f4 	.word	0x0801e2f4
 80118e0:	0801e9cc 	.word	0x0801e9cc
 80118e4:	0801e348 	.word	0x0801e348

080118e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80118e8:	b5b0      	push	{r4, r5, r7, lr}
 80118ea:	b08a      	sub	sp, #40	; 0x28
 80118ec:	af04      	add	r7, sp, #16
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	607b      	str	r3, [r7, #4]
 80118f2:	460b      	mov	r3, r1
 80118f4:	817b      	strh	r3, [r7, #10]
 80118f6:	4613      	mov	r3, r2
 80118f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d106      	bne.n	801190e <tcp_output_alloc_header+0x26>
 8011900:	4b15      	ldr	r3, [pc, #84]	; (8011958 <tcp_output_alloc_header+0x70>)
 8011902:	f240 7242 	movw	r2, #1858	; 0x742
 8011906:	4915      	ldr	r1, [pc, #84]	; (801195c <tcp_output_alloc_header+0x74>)
 8011908:	4815      	ldr	r0, [pc, #84]	; (8011960 <tcp_output_alloc_header+0x78>)
 801190a:	f005 fead 	bl	8017668 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	8adb      	ldrh	r3, [r3, #22]
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	8b12      	ldrh	r2, [r2, #24]
 801191a:	68f9      	ldr	r1, [r7, #12]
 801191c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801191e:	893d      	ldrh	r5, [r7, #8]
 8011920:	897c      	ldrh	r4, [r7, #10]
 8011922:	9103      	str	r1, [sp, #12]
 8011924:	2110      	movs	r1, #16
 8011926:	9102      	str	r1, [sp, #8]
 8011928:	9201      	str	r2, [sp, #4]
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	462a      	mov	r2, r5
 8011930:	4621      	mov	r1, r4
 8011932:	f7ff ff67 	bl	8011804 <tcp_output_alloc_header_common>
 8011936:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d006      	beq.n	801194c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011946:	441a      	add	r2, r3
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801194c:	697b      	ldr	r3, [r7, #20]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bdb0      	pop	{r4, r5, r7, pc}
 8011956:	bf00      	nop
 8011958:	0801e2f4 	.word	0x0801e2f4
 801195c:	0801e9fc 	.word	0x0801e9fc
 8011960:	0801e348 	.word	0x0801e348

08011964 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	4611      	mov	r1, r2
 8011970:	461a      	mov	r2, r3
 8011972:	460b      	mov	r3, r1
 8011974:	71fb      	strb	r3, [r7, #7]
 8011976:	4613      	mov	r3, r2
 8011978:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d106      	bne.n	8011992 <tcp_output_fill_options+0x2e>
 8011984:	4b13      	ldr	r3, [pc, #76]	; (80119d4 <tcp_output_fill_options+0x70>)
 8011986:	f240 7256 	movw	r2, #1878	; 0x756
 801198a:	4913      	ldr	r1, [pc, #76]	; (80119d8 <tcp_output_fill_options+0x74>)
 801198c:	4813      	ldr	r0, [pc, #76]	; (80119dc <tcp_output_fill_options+0x78>)
 801198e:	f005 fe6b 	bl	8017668 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011998:	69bb      	ldr	r3, [r7, #24]
 801199a:	3314      	adds	r3, #20
 801199c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	f103 0214 	add.w	r2, r3, #20
 80119a4:	8bfb      	ldrh	r3, [r7, #30]
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4619      	mov	r1, r3
 80119aa:	79fb      	ldrb	r3, [r7, #7]
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	f003 0304 	and.w	r3, r3, #4
 80119b2:	440b      	add	r3, r1
 80119b4:	4413      	add	r3, r2
 80119b6:	697a      	ldr	r2, [r7, #20]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d006      	beq.n	80119ca <tcp_output_fill_options+0x66>
 80119bc:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <tcp_output_fill_options+0x70>)
 80119be:	f240 7275 	movw	r2, #1909	; 0x775
 80119c2:	4907      	ldr	r1, [pc, #28]	; (80119e0 <tcp_output_fill_options+0x7c>)
 80119c4:	4805      	ldr	r0, [pc, #20]	; (80119dc <tcp_output_fill_options+0x78>)
 80119c6:	f005 fe4f 	bl	8017668 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80119ca:	bf00      	nop
 80119cc:	3720      	adds	r7, #32
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	0801e2f4 	.word	0x0801e2f4
 80119d8:	0801ea24 	.word	0x0801ea24
 80119dc:	0801e348 	.word	0x0801e348
 80119e0:	0801e91c 	.word	0x0801e91c

080119e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b08a      	sub	sp, #40	; 0x28
 80119e8:	af04      	add	r7, sp, #16
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	607a      	str	r2, [r7, #4]
 80119f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <tcp_output_control_segment+0x22>
 80119f8:	4b1c      	ldr	r3, [pc, #112]	; (8011a6c <tcp_output_control_segment+0x88>)
 80119fa:	f240 7287 	movw	r2, #1927	; 0x787
 80119fe:	491c      	ldr	r1, [pc, #112]	; (8011a70 <tcp_output_control_segment+0x8c>)
 8011a00:	481c      	ldr	r0, [pc, #112]	; (8011a74 <tcp_output_control_segment+0x90>)
 8011a02:	f005 fe31 	bl	8017668 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011a06:	683a      	ldr	r2, [r7, #0]
 8011a08:	6879      	ldr	r1, [r7, #4]
 8011a0a:	68f8      	ldr	r0, [r7, #12]
 8011a0c:	f7fe fae2 	bl	800ffd4 <tcp_route>
 8011a10:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d102      	bne.n	8011a1e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a18:	23fc      	movs	r3, #252	; 0xfc
 8011a1a:	75fb      	strb	r3, [r7, #23]
 8011a1c:	e01c      	b.n	8011a58 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d006      	beq.n	8011a32 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	7adb      	ldrb	r3, [r3, #11]
 8011a28:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	7a9b      	ldrb	r3, [r3, #10]
 8011a2e:	757b      	strb	r3, [r7, #21]
 8011a30:	e003      	b.n	8011a3a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011a32:	23ff      	movs	r3, #255	; 0xff
 8011a34:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011a36:	2300      	movs	r3, #0
 8011a38:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011a3a:	7dba      	ldrb	r2, [r7, #22]
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	9302      	str	r3, [sp, #8]
 8011a40:	2306      	movs	r3, #6
 8011a42:	9301      	str	r3, [sp, #4]
 8011a44:	7d7b      	ldrb	r3, [r7, #21]
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	6879      	ldr	r1, [r7, #4]
 8011a4e:	68b8      	ldr	r0, [r7, #8]
 8011a50:	f004 f8fe 	bl	8015c50 <ip4_output_if>
 8011a54:	4603      	mov	r3, r0
 8011a56:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011a58:	68b8      	ldr	r0, [r7, #8]
 8011a5a:	f7f9 fe0d 	bl	800b678 <pbuf_free>
  return err;
 8011a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3718      	adds	r7, #24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	0801e2f4 	.word	0x0801e2f4
 8011a70:	0801ea4c 	.word	0x0801ea4c
 8011a74:	0801e348 	.word	0x0801e348

08011a78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011a78:	b590      	push	{r4, r7, lr}
 8011a7a:	b08b      	sub	sp, #44	; 0x2c
 8011a7c:	af04      	add	r7, sp, #16
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d106      	bne.n	8011a9a <tcp_rst+0x22>
 8011a8c:	4b1f      	ldr	r3, [pc, #124]	; (8011b0c <tcp_rst+0x94>)
 8011a8e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011a92:	491f      	ldr	r1, [pc, #124]	; (8011b10 <tcp_rst+0x98>)
 8011a94:	481f      	ldr	r0, [pc, #124]	; (8011b14 <tcp_rst+0x9c>)
 8011a96:	f005 fde7 	bl	8017668 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d106      	bne.n	8011aae <tcp_rst+0x36>
 8011aa0:	4b1a      	ldr	r3, [pc, #104]	; (8011b0c <tcp_rst+0x94>)
 8011aa2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011aa6:	491c      	ldr	r1, [pc, #112]	; (8011b18 <tcp_rst+0xa0>)
 8011aa8:	481a      	ldr	r0, [pc, #104]	; (8011b14 <tcp_rst+0x9c>)
 8011aaa:	f005 fddd 	bl	8017668 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011aae:	2300      	movs	r3, #0
 8011ab0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011ab2:	f246 0308 	movw	r3, #24584	; 0x6008
 8011ab6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011ab8:	7dfb      	ldrb	r3, [r7, #23]
 8011aba:	b29c      	uxth	r4, r3
 8011abc:	68b8      	ldr	r0, [r7, #8]
 8011abe:	f7f8 fa56 	bl	8009f6e <lwip_htonl>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	8abb      	ldrh	r3, [r7, #20]
 8011ac6:	9303      	str	r3, [sp, #12]
 8011ac8:	2314      	movs	r3, #20
 8011aca:	9302      	str	r3, [sp, #8]
 8011acc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011ace:	9301      	str	r3, [sp, #4]
 8011ad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ad2:	9300      	str	r3, [sp, #0]
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	4621      	mov	r1, r4
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7ff fe92 	bl	8011804 <tcp_output_alloc_header_common>
 8011ae0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00c      	beq.n	8011b02 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011ae8:	7dfb      	ldrb	r3, [r7, #23]
 8011aea:	2200      	movs	r2, #0
 8011aec:	6939      	ldr	r1, [r7, #16]
 8011aee:	68f8      	ldr	r0, [r7, #12]
 8011af0:	f7ff ff38 	bl	8011964 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af6:	683a      	ldr	r2, [r7, #0]
 8011af8:	6939      	ldr	r1, [r7, #16]
 8011afa:	68f8      	ldr	r0, [r7, #12]
 8011afc:	f7ff ff72 	bl	80119e4 <tcp_output_control_segment>
 8011b00:	e000      	b.n	8011b04 <tcp_rst+0x8c>
    return;
 8011b02:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b04:	371c      	adds	r7, #28
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd90      	pop	{r4, r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0801e2f4 	.word	0x0801e2f4
 8011b10:	0801ea78 	.word	0x0801ea78
 8011b14:	0801e348 	.word	0x0801e348
 8011b18:	0801ea94 	.word	0x0801ea94

08011b1c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011b1c:	b590      	push	{r4, r7, lr}
 8011b1e:	b087      	sub	sp, #28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011b24:	2300      	movs	r3, #0
 8011b26:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d106      	bne.n	8011b40 <tcp_send_empty_ack+0x24>
 8011b32:	4b28      	ldr	r3, [pc, #160]	; (8011bd4 <tcp_send_empty_ack+0xb8>)
 8011b34:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011b38:	4927      	ldr	r1, [pc, #156]	; (8011bd8 <tcp_send_empty_ack+0xbc>)
 8011b3a:	4828      	ldr	r0, [pc, #160]	; (8011bdc <tcp_send_empty_ack+0xc0>)
 8011b3c:	f005 fd94 	bl	8017668 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b40:	7dfb      	ldrb	r3, [r7, #23]
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	b2db      	uxtb	r3, r3
 8011b46:	f003 0304 	and.w	r3, r3, #4
 8011b4a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011b4c:	7d7b      	ldrb	r3, [r7, #21]
 8011b4e:	b29c      	uxth	r4, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f8 fa0a 	bl	8009f6e <lwip_htonl>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	4621      	mov	r1, r4
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff fec1 	bl	80118e8 <tcp_output_alloc_header>
 8011b66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d109      	bne.n	8011b82 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8b5b      	ldrh	r3, [r3, #26]
 8011b72:	f043 0303 	orr.w	r3, r3, #3
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011b7c:	f06f 0301 	mvn.w	r3, #1
 8011b80:	e023      	b.n	8011bca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011b82:	7dbb      	ldrb	r3, [r7, #22]
 8011b84:	7dfa      	ldrb	r2, [r7, #23]
 8011b86:	6939      	ldr	r1, [r7, #16]
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7ff feeb 	bl	8011964 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	3304      	adds	r3, #4
 8011b94:	6939      	ldr	r1, [r7, #16]
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff ff24 	bl	80119e4 <tcp_output_control_segment>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d007      	beq.n	8011bb8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	8b5b      	ldrh	r3, [r3, #26]
 8011bac:	f043 0303 	orr.w	r3, r3, #3
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	835a      	strh	r2, [r3, #26]
 8011bb6:	e006      	b.n	8011bc6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f023 0303 	bic.w	r3, r3, #3
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	371c      	adds	r7, #28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd90      	pop	{r4, r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	0801e2f4 	.word	0x0801e2f4
 8011bd8:	0801eab0 	.word	0x0801eab0
 8011bdc:	0801e348 	.word	0x0801e348

08011be0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b087      	sub	sp, #28
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011be8:	2300      	movs	r3, #0
 8011bea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d106      	bne.n	8011c00 <tcp_keepalive+0x20>
 8011bf2:	4b18      	ldr	r3, [pc, #96]	; (8011c54 <tcp_keepalive+0x74>)
 8011bf4:	f640 0224 	movw	r2, #2084	; 0x824
 8011bf8:	4917      	ldr	r1, [pc, #92]	; (8011c58 <tcp_keepalive+0x78>)
 8011bfa:	4818      	ldr	r0, [pc, #96]	; (8011c5c <tcp_keepalive+0x7c>)
 8011bfc:	f005 fd34 	bl	8017668 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
 8011c02:	b29c      	uxth	r4, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7f8 f9af 	bl	8009f6e <lwip_htonl>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2200      	movs	r2, #0
 8011c14:	4621      	mov	r1, r4
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f7ff fe66 	bl	80118e8 <tcp_output_alloc_header>
 8011c1c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d102      	bne.n	8011c2a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c28:	e010      	b.n	8011c4c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	6939      	ldr	r1, [r7, #16]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff fe97 	bl	8011964 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	6939      	ldr	r1, [r7, #16]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ff fed0 	bl	80119e4 <tcp_output_control_segment>
 8011c44:	4603      	mov	r3, r0
 8011c46:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	371c      	adds	r7, #28
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd90      	pop	{r4, r7, pc}
 8011c54:	0801e2f4 	.word	0x0801e2f4
 8011c58:	0801ead0 	.word	0x0801ead0
 8011c5c:	0801e348 	.word	0x0801e348

08011c60 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	b08b      	sub	sp, #44	; 0x2c
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c68:	2300      	movs	r3, #0
 8011c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d106      	bne.n	8011c82 <tcp_zero_window_probe+0x22>
 8011c74:	4b4c      	ldr	r3, [pc, #304]	; (8011da8 <tcp_zero_window_probe+0x148>)
 8011c76:	f640 024f 	movw	r2, #2127	; 0x84f
 8011c7a:	494c      	ldr	r1, [pc, #304]	; (8011dac <tcp_zero_window_probe+0x14c>)
 8011c7c:	484c      	ldr	r0, [pc, #304]	; (8011db0 <tcp_zero_window_probe+0x150>)
 8011c7e:	f005 fcf3 	bl	8017668 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c86:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d101      	bne.n	8011c92 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e086      	b.n	8011da0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011c98:	2bff      	cmp	r3, #255	; 0xff
 8011c9a:	d007      	beq.n	8011cac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7f8 f945 	bl	8009f44 <lwip_htons>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 0301 	and.w	r3, r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d005      	beq.n	8011cd2 <tcp_zero_window_probe+0x72>
 8011cc6:	6a3b      	ldr	r3, [r7, #32]
 8011cc8:	891b      	ldrh	r3, [r3, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d101      	bne.n	8011cd2 <tcp_zero_window_probe+0x72>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e000      	b.n	8011cd4 <tcp_zero_window_probe+0x74>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011cd6:	7ffb      	ldrb	r3, [r7, #31]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	bf0c      	ite	eq
 8011cdc:	2301      	moveq	r3, #1
 8011cde:	2300      	movne	r3, #0
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce8:	b299      	uxth	r1, r3
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	8bba      	ldrh	r2, [r7, #28]
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff fdf8 	bl	80118e8 <tcp_output_alloc_header>
 8011cf8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d04:	e04c      	b.n	8011da0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d0c:	7ffb      	ldrb	r3, [r7, #31]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d011      	beq.n	8011d36 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	899b      	ldrh	r3, [r3, #12]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	b21b      	sxth	r3, r3
 8011d1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d1e:	b21c      	sxth	r4, r3
 8011d20:	2011      	movs	r0, #17
 8011d22:	f7f8 f90f 	bl	8009f44 <lwip_htons>
 8011d26:	4603      	mov	r3, r0
 8011d28:	b21b      	sxth	r3, r3
 8011d2a:	4323      	orrs	r3, r4
 8011d2c:	b21b      	sxth	r3, r3
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	819a      	strh	r2, [r3, #12]
 8011d34:	e010      	b.n	8011d58 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	3314      	adds	r3, #20
 8011d3c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d3e:	6a3b      	ldr	r3, [r7, #32]
 8011d40:	6858      	ldr	r0, [r3, #4]
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	891a      	ldrh	r2, [r3, #8]
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	891b      	ldrh	r3, [r3, #8]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	2201      	movs	r2, #1
 8011d52:	6939      	ldr	r1, [r7, #16]
 8011d54:	f7f9 fe8a 	bl	800ba6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7f8 f905 	bl	8009f6e <lwip_htonl>
 8011d64:	4603      	mov	r3, r0
 8011d66:	3301      	adds	r3, #1
 8011d68:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	da02      	bge.n	8011d7c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d80:	2200      	movs	r2, #0
 8011d82:	69b9      	ldr	r1, [r7, #24]
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7ff fded 	bl	8011964 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	69b9      	ldr	r1, [r7, #24]
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f7ff fe26 	bl	80119e4 <tcp_output_control_segment>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	372c      	adds	r7, #44	; 0x2c
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}
 8011da8:	0801e2f4 	.word	0x0801e2f4
 8011dac:	0801eaec 	.word	0x0801eaec
 8011db0:	0801e348 	.word	0x0801e348

08011db4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011dbc:	f7f9 ff44 	bl	800bc48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011dc0:	4b0a      	ldr	r3, [pc, #40]	; (8011dec <tcpip_tcp_timer+0x38>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d103      	bne.n	8011dd0 <tcpip_tcp_timer+0x1c>
 8011dc8:	4b09      	ldr	r3, [pc, #36]	; (8011df0 <tcpip_tcp_timer+0x3c>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d005      	beq.n	8011ddc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	4908      	ldr	r1, [pc, #32]	; (8011df4 <tcpip_tcp_timer+0x40>)
 8011dd4:	20fa      	movs	r0, #250	; 0xfa
 8011dd6:	f000 f8f3 	bl	8011fc0 <sys_timeout>
 8011dda:	e003      	b.n	8011de4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011ddc:	4b06      	ldr	r3, [pc, #24]	; (8011df8 <tcpip_tcp_timer+0x44>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	601a      	str	r2, [r3, #0]
  }
}
 8011de2:	bf00      	nop
 8011de4:	bf00      	nop
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	2000d85c 	.word	0x2000d85c
 8011df0:	2000d86c 	.word	0x2000d86c
 8011df4:	08011db5 	.word	0x08011db5
 8011df8:	20001254 	.word	0x20001254

08011dfc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e00:	4b0a      	ldr	r3, [pc, #40]	; (8011e2c <tcp_timer_needed+0x30>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10f      	bne.n	8011e28 <tcp_timer_needed+0x2c>
 8011e08:	4b09      	ldr	r3, [pc, #36]	; (8011e30 <tcp_timer_needed+0x34>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d103      	bne.n	8011e18 <tcp_timer_needed+0x1c>
 8011e10:	4b08      	ldr	r3, [pc, #32]	; (8011e34 <tcp_timer_needed+0x38>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d007      	beq.n	8011e28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e18:	4b04      	ldr	r3, [pc, #16]	; (8011e2c <tcp_timer_needed+0x30>)
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e1e:	2200      	movs	r2, #0
 8011e20:	4905      	ldr	r1, [pc, #20]	; (8011e38 <tcp_timer_needed+0x3c>)
 8011e22:	20fa      	movs	r0, #250	; 0xfa
 8011e24:	f000 f8cc 	bl	8011fc0 <sys_timeout>
  }
}
 8011e28:	bf00      	nop
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	20001254 	.word	0x20001254
 8011e30:	2000d85c 	.word	0x2000d85c
 8011e34:	2000d86c 	.word	0x2000d86c
 8011e38:	08011db5 	.word	0x08011db5

08011e3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b086      	sub	sp, #24
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011e48:	2006      	movs	r0, #6
 8011e4a:	f7f8 fdaf 	bl	800a9ac <memp_malloc>
 8011e4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d109      	bne.n	8011e6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d151      	bne.n	8011f00 <sys_timeout_abs+0xc4>
 8011e5c:	4b2a      	ldr	r3, [pc, #168]	; (8011f08 <sys_timeout_abs+0xcc>)
 8011e5e:	22be      	movs	r2, #190	; 0xbe
 8011e60:	492a      	ldr	r1, [pc, #168]	; (8011f0c <sys_timeout_abs+0xd0>)
 8011e62:	482b      	ldr	r0, [pc, #172]	; (8011f10 <sys_timeout_abs+0xd4>)
 8011e64:	f005 fc00 	bl	8017668 <iprintf>
    return;
 8011e68:	e04a      	b.n	8011f00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011e82:	4b24      	ldr	r3, [pc, #144]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d103      	bne.n	8011e92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011e8a:	4a22      	ldr	r2, [pc, #136]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	6013      	str	r3, [r2, #0]
    return;
 8011e90:	e037      	b.n	8011f02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	685a      	ldr	r2, [r3, #4]
 8011e96:	4b1f      	ldr	r3, [pc, #124]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	0fdb      	lsrs	r3, r3, #31
 8011ea0:	f003 0301 	and.w	r3, r3, #1
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d007      	beq.n	8011eba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011eaa:	4b1a      	ldr	r3, [pc, #104]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011eb2:	4a18      	ldr	r2, [pc, #96]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	e023      	b.n	8011f02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011eba:	4b16      	ldr	r3, [pc, #88]	; (8011f14 <sys_timeout_abs+0xd8>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	617b      	str	r3, [r7, #20]
 8011ec0:	e01a      	b.n	8011ef8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00b      	beq.n	8011ee2 <sys_timeout_abs+0xa6>
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	685a      	ldr	r2, [r3, #4]
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	0fdb      	lsrs	r3, r3, #31
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d007      	beq.n	8011ef2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	601a      	str	r2, [r3, #0]
        break;
 8011ef0:	e007      	b.n	8011f02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	617b      	str	r3, [r7, #20]
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d1e1      	bne.n	8011ec2 <sys_timeout_abs+0x86>
 8011efe:	e000      	b.n	8011f02 <sys_timeout_abs+0xc6>
    return;
 8011f00:	bf00      	nop
      }
    }
  }
}
 8011f02:	3718      	adds	r7, #24
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	0801eb10 	.word	0x0801eb10
 8011f0c:	0801eb44 	.word	0x0801eb44
 8011f10:	0801eb84 	.word	0x0801eb84
 8011f14:	2000124c 	.word	0x2000124c

08011f18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	4798      	blx	r3

  now = sys_now();
 8011f2a:	f7f5 ffab 	bl	8007e84 <sys_now>
 8011f2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	4b0f      	ldr	r3, [pc, #60]	; (8011f74 <lwip_cyclic_timer+0x5c>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4413      	add	r3, r2
 8011f3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	1ad3      	subs	r3, r2, r3
 8011f42:	0fdb      	lsrs	r3, r3, #31
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	b2db      	uxtb	r3, r3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d009      	beq.n	8011f62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	4413      	add	r3, r2
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4907      	ldr	r1, [pc, #28]	; (8011f78 <lwip_cyclic_timer+0x60>)
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7ff ff6e 	bl	8011e3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011f60:	e004      	b.n	8011f6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	4904      	ldr	r1, [pc, #16]	; (8011f78 <lwip_cyclic_timer+0x60>)
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff ff68 	bl	8011e3c <sys_timeout_abs>
}
 8011f6c:	bf00      	nop
 8011f6e:	3718      	adds	r7, #24
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20001250 	.word	0x20001250
 8011f78:	08011f19 	.word	0x08011f19

08011f7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011f82:	2301      	movs	r3, #1
 8011f84:	607b      	str	r3, [r7, #4]
 8011f86:	e00e      	b.n	8011fa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011f88:	4a0b      	ldr	r2, [pc, #44]	; (8011fb8 <sys_timeouts_init+0x3c>)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	00db      	lsls	r3, r3, #3
 8011f94:	4a08      	ldr	r2, [pc, #32]	; (8011fb8 <sys_timeouts_init+0x3c>)
 8011f96:	4413      	add	r3, r2
 8011f98:	461a      	mov	r2, r3
 8011f9a:	4908      	ldr	r1, [pc, #32]	; (8011fbc <sys_timeouts_init+0x40>)
 8011f9c:	f000 f810 	bl	8011fc0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	607b      	str	r3, [r7, #4]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b04      	cmp	r3, #4
 8011faa:	d9ed      	bls.n	8011f88 <sys_timeouts_init+0xc>
  }
}
 8011fac:	bf00      	nop
 8011fae:	bf00      	nop
 8011fb0:	3708      	adds	r7, #8
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	080339f0 	.word	0x080339f0
 8011fbc:	08011f19 	.word	0x08011f19

08011fc0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011fd2:	d306      	bcc.n	8011fe2 <sys_timeout+0x22>
 8011fd4:	4b0a      	ldr	r3, [pc, #40]	; (8012000 <sys_timeout+0x40>)
 8011fd6:	f240 1229 	movw	r2, #297	; 0x129
 8011fda:	490a      	ldr	r1, [pc, #40]	; (8012004 <sys_timeout+0x44>)
 8011fdc:	480a      	ldr	r0, [pc, #40]	; (8012008 <sys_timeout+0x48>)
 8011fde:	f005 fb43 	bl	8017668 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011fe2:	f7f5 ff4f 	bl	8007e84 <sys_now>
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	4413      	add	r3, r2
 8011fec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	68b9      	ldr	r1, [r7, #8]
 8011ff2:	6978      	ldr	r0, [r7, #20]
 8011ff4:	f7ff ff22 	bl	8011e3c <sys_timeout_abs>
#endif
}
 8011ff8:	bf00      	nop
 8011ffa:	3718      	adds	r7, #24
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	0801eb10 	.word	0x0801eb10
 8012004:	0801ebac 	.word	0x0801ebac
 8012008:	0801eb84 	.word	0x0801eb84

0801200c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012012:	f7f5 ff37 	bl	8007e84 <sys_now>
 8012016:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012018:	4b1a      	ldr	r3, [pc, #104]	; (8012084 <sys_check_timeouts+0x78>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <sys_check_timeouts+0x1a>
 8012022:	f7f8 ffef 	bl	800b004 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012026:	4b18      	ldr	r3, [pc, #96]	; (8012088 <sys_check_timeouts+0x7c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d022      	beq.n	8012078 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	0fdb      	lsrs	r3, r3, #31
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d11a      	bne.n	801207c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4a0f      	ldr	r2, [pc, #60]	; (8012088 <sys_check_timeouts+0x7c>)
 801204c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	4a0b      	ldr	r2, [pc, #44]	; (801208c <sys_check_timeouts+0x80>)
 8012060:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	2006      	movs	r0, #6
 8012066:	f7f8 fced 	bl	800aa44 <memp_free>
    if (handler != NULL) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d0d3      	beq.n	8012018 <sys_check_timeouts+0xc>
      handler(arg);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6838      	ldr	r0, [r7, #0]
 8012074:	4798      	blx	r3
  do {
 8012076:	e7cf      	b.n	8012018 <sys_check_timeouts+0xc>
      return;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <sys_check_timeouts+0x72>
      return;
 801207c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	2000d854 	.word	0x2000d854
 8012088:	2000124c 	.word	0x2000124c
 801208c:	20001250 	.word	0x20001250

08012090 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012094:	f005 fb76 	bl	8017784 <rand>
 8012098:	4603      	mov	r3, r0
 801209a:	b29b      	uxth	r3, r3
 801209c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	4b01      	ldr	r3, [pc, #4]	; (80120b0 <udp_init+0x20>)
 80120aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80120ac:	bf00      	nop
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	200005c4 	.word	0x200005c4

080120b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80120ba:	2300      	movs	r3, #0
 80120bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80120be:	4b17      	ldr	r3, [pc, #92]	; (801211c <udp_new_port+0x68>)
 80120c0:	881b      	ldrh	r3, [r3, #0]
 80120c2:	1c5a      	adds	r2, r3, #1
 80120c4:	b291      	uxth	r1, r2
 80120c6:	4a15      	ldr	r2, [pc, #84]	; (801211c <udp_new_port+0x68>)
 80120c8:	8011      	strh	r1, [r2, #0]
 80120ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d103      	bne.n	80120da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80120d2:	4b12      	ldr	r3, [pc, #72]	; (801211c <udp_new_port+0x68>)
 80120d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80120d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120da:	4b11      	ldr	r3, [pc, #68]	; (8012120 <udp_new_port+0x6c>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	603b      	str	r3, [r7, #0]
 80120e0:	e011      	b.n	8012106 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	8a5a      	ldrh	r2, [r3, #18]
 80120e6:	4b0d      	ldr	r3, [pc, #52]	; (801211c <udp_new_port+0x68>)
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d108      	bne.n	8012100 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80120ee:	88fb      	ldrh	r3, [r7, #6]
 80120f0:	3301      	adds	r3, #1
 80120f2:	80fb      	strh	r3, [r7, #6]
 80120f4:	88fb      	ldrh	r3, [r7, #6]
 80120f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120fa:	d3e0      	bcc.n	80120be <udp_new_port+0xa>
        return 0;
 80120fc:	2300      	movs	r3, #0
 80120fe:	e007      	b.n	8012110 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	603b      	str	r3, [r7, #0]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1ea      	bne.n	80120e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801210c:	4b03      	ldr	r3, [pc, #12]	; (801211c <udp_new_port+0x68>)
 801210e:	881b      	ldrh	r3, [r3, #0]
}
 8012110:	4618      	mov	r0, r3
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr
 801211c:	200005c4 	.word	0x200005c4
 8012120:	2000d874 	.word	0x2000d874

08012124 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	4613      	mov	r3, r2
 8012130:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d105      	bne.n	8012144 <udp_input_local_match+0x20>
 8012138:	4b27      	ldr	r3, [pc, #156]	; (80121d8 <udp_input_local_match+0xb4>)
 801213a:	2287      	movs	r2, #135	; 0x87
 801213c:	4927      	ldr	r1, [pc, #156]	; (80121dc <udp_input_local_match+0xb8>)
 801213e:	4828      	ldr	r0, [pc, #160]	; (80121e0 <udp_input_local_match+0xbc>)
 8012140:	f005 fa92 	bl	8017668 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d105      	bne.n	8012156 <udp_input_local_match+0x32>
 801214a:	4b23      	ldr	r3, [pc, #140]	; (80121d8 <udp_input_local_match+0xb4>)
 801214c:	2288      	movs	r2, #136	; 0x88
 801214e:	4925      	ldr	r1, [pc, #148]	; (80121e4 <udp_input_local_match+0xc0>)
 8012150:	4823      	ldr	r0, [pc, #140]	; (80121e0 <udp_input_local_match+0xbc>)
 8012152:	f005 fa89 	bl	8017668 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	7a1b      	ldrb	r3, [r3, #8]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	7a1a      	ldrb	r2, [r3, #8]
 8012162:	4b21      	ldr	r3, [pc, #132]	; (80121e8 <udp_input_local_match+0xc4>)
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801216a:	3301      	adds	r3, #1
 801216c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801216e:	429a      	cmp	r2, r3
 8012170:	d001      	beq.n	8012176 <udp_input_local_match+0x52>
    return 0;
 8012172:	2300      	movs	r3, #0
 8012174:	e02b      	b.n	80121ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012176:	79fb      	ldrb	r3, [r7, #7]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d018      	beq.n	80121ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d013      	beq.n	80121aa <udp_input_local_match+0x86>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00f      	beq.n	80121aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801218a:	4b17      	ldr	r3, [pc, #92]	; (80121e8 <udp_input_local_match+0xc4>)
 801218c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801218e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012192:	d00a      	beq.n	80121aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681a      	ldr	r2, [r3, #0]
 8012198:	4b13      	ldr	r3, [pc, #76]	; (80121e8 <udp_input_local_match+0xc4>)
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	405a      	eors	r2, r3
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	3308      	adds	r3, #8
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d110      	bne.n	80121cc <udp_input_local_match+0xa8>
          return 1;
 80121aa:	2301      	movs	r3, #1
 80121ac:	e00f      	b.n	80121ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d009      	beq.n	80121c8 <udp_input_local_match+0xa4>
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d005      	beq.n	80121c8 <udp_input_local_match+0xa4>
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	4b09      	ldr	r3, [pc, #36]	; (80121e8 <udp_input_local_match+0xc4>)
 80121c2:	695b      	ldr	r3, [r3, #20]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d101      	bne.n	80121cc <udp_input_local_match+0xa8>
        return 1;
 80121c8:	2301      	movs	r3, #1
 80121ca:	e000      	b.n	80121ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	0801ebf8 	.word	0x0801ebf8
 80121dc:	0801ec28 	.word	0x0801ec28
 80121e0:	0801ec4c 	.word	0x0801ec4c
 80121e4:	0801ec74 	.word	0x0801ec74
 80121e8:	20009f2c 	.word	0x20009f2c

080121ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80121ec:	b590      	push	{r4, r7, lr}
 80121ee:	b08d      	sub	sp, #52	; 0x34
 80121f0:	af02      	add	r7, sp, #8
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d105      	bne.n	801220c <udp_input+0x20>
 8012200:	4b7e      	ldr	r3, [pc, #504]	; (80123fc <udp_input+0x210>)
 8012202:	22cf      	movs	r2, #207	; 0xcf
 8012204:	497e      	ldr	r1, [pc, #504]	; (8012400 <udp_input+0x214>)
 8012206:	487f      	ldr	r0, [pc, #508]	; (8012404 <udp_input+0x218>)
 8012208:	f005 fa2e 	bl	8017668 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d105      	bne.n	801221e <udp_input+0x32>
 8012212:	4b7a      	ldr	r3, [pc, #488]	; (80123fc <udp_input+0x210>)
 8012214:	22d0      	movs	r2, #208	; 0xd0
 8012216:	497c      	ldr	r1, [pc, #496]	; (8012408 <udp_input+0x21c>)
 8012218:	487a      	ldr	r0, [pc, #488]	; (8012404 <udp_input+0x218>)
 801221a:	f005 fa25 	bl	8017668 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	895b      	ldrh	r3, [r3, #10]
 8012222:	2b07      	cmp	r3, #7
 8012224:	d803      	bhi.n	801222e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7f9 fa26 	bl	800b678 <pbuf_free>
    goto end;
 801222c:	e0e1      	b.n	80123f2 <udp_input+0x206>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012234:	4b75      	ldr	r3, [pc, #468]	; (801240c <udp_input+0x220>)
 8012236:	695b      	ldr	r3, [r3, #20]
 8012238:	4a74      	ldr	r2, [pc, #464]	; (801240c <udp_input+0x220>)
 801223a:	6812      	ldr	r2, [r2, #0]
 801223c:	4611      	mov	r1, r2
 801223e:	4618      	mov	r0, r3
 8012240:	f003 fdef 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 8012244:	4603      	mov	r3, r0
 8012246:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	b29b      	uxth	r3, r3
 801224e:	4618      	mov	r0, r3
 8012250:	f7f7 fe78 	bl	8009f44 <lwip_htons>
 8012254:	4603      	mov	r3, r0
 8012256:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	885b      	ldrh	r3, [r3, #2]
 801225c:	b29b      	uxth	r3, r3
 801225e:	4618      	mov	r0, r3
 8012260:	f7f7 fe70 	bl	8009f44 <lwip_htons>
 8012264:	4603      	mov	r3, r0
 8012266:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8012268:	6978      	ldr	r0, [r7, #20]
 801226a:	f000 fbd1 	bl	8012a10 <udp_debug_print>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801226e:	2300      	movs	r3, #0
 8012270:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012272:	2300      	movs	r3, #0
 8012274:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012276:	2300      	movs	r3, #0
 8012278:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801227a:	4b65      	ldr	r3, [pc, #404]	; (8012410 <udp_input+0x224>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	627b      	str	r3, [r7, #36]	; 0x24
 8012280:	e054      	b.n	801232c <udp_input+0x140>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	8a5b      	ldrh	r3, [r3, #18]
 8012286:	89fa      	ldrh	r2, [r7, #14]
 8012288:	429a      	cmp	r2, r3
 801228a:	d14a      	bne.n	8012322 <udp_input+0x136>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801228c:	7cfb      	ldrb	r3, [r7, #19]
 801228e:	461a      	mov	r2, r3
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012294:	f7ff ff46 	bl	8012124 <udp_input_local_match>
 8012298:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801229a:	2b00      	cmp	r3, #0
 801229c:	d041      	beq.n	8012322 <udp_input+0x136>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	7c1b      	ldrb	r3, [r3, #16]
 80122a2:	f003 0304 	and.w	r3, r3, #4
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d11d      	bne.n	80122e6 <udp_input+0xfa>
        if (uncon_pcb == NULL) {
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <udp_input+0xca>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	61fb      	str	r3, [r7, #28]
 80122b4:	e017      	b.n	80122e6 <udp_input+0xfa>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80122b6:	7cfb      	ldrb	r3, [r7, #19]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d014      	beq.n	80122e6 <udp_input+0xfa>
 80122bc:	4b53      	ldr	r3, [pc, #332]	; (801240c <udp_input+0x220>)
 80122be:	695b      	ldr	r3, [r3, #20]
 80122c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122c4:	d10f      	bne.n	80122e6 <udp_input+0xfa>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	3304      	adds	r3, #4
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d008      	beq.n	80122e6 <udp_input+0xfa>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	3304      	adds	r3, #4
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d101      	bne.n	80122e6 <udp_input+0xfa>
              /* better match */
              uncon_pcb = pcb;
 80122e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e4:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80122e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e8:	8a9b      	ldrh	r3, [r3, #20]
 80122ea:	8a3a      	ldrh	r2, [r7, #16]
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d118      	bne.n	8012322 <udp_input+0x136>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d005      	beq.n	8012304 <udp_input+0x118>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b43      	ldr	r3, [pc, #268]	; (801240c <udp_input+0x220>)
 80122fe:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012300:	429a      	cmp	r2, r3
 8012302:	d10e      	bne.n	8012322 <udp_input+0x136>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d014      	beq.n	8012334 <udp_input+0x148>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	68da      	ldr	r2, [r3, #12]
 801230e:	6a3b      	ldr	r3, [r7, #32]
 8012310:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012312:	4b3f      	ldr	r3, [pc, #252]	; (8012410 <udp_input+0x224>)
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801231a:	4a3d      	ldr	r2, [pc, #244]	; (8012410 <udp_input+0x224>)
 801231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012320:	e008      	b.n	8012334 <udp_input+0x148>
      }
    }

    prev = pcb;
 8012322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012324:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	627b      	str	r3, [r7, #36]	; 0x24
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1a7      	bne.n	8012282 <udp_input+0x96>
 8012332:	e000      	b.n	8012336 <udp_input+0x14a>
        break;
 8012334:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <udp_input+0x154>
    pcb = uncon_pcb;
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	2b00      	cmp	r3, #0
 8012344:	d002      	beq.n	801234c <udp_input+0x160>
    for_us = 1;
 8012346:	2301      	movs	r3, #1
 8012348:	76fb      	strb	r3, [r7, #27]
 801234a:	e00a      	b.n	8012362 <udp_input+0x176>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	3304      	adds	r3, #4
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	4b2e      	ldr	r3, [pc, #184]	; (801240c <udp_input+0x220>)
 8012354:	695b      	ldr	r3, [r3, #20]
 8012356:	429a      	cmp	r2, r3
 8012358:	bf0c      	ite	eq
 801235a:	2301      	moveq	r3, #1
 801235c:	2300      	movne	r3, #0
 801235e:	b2db      	uxtb	r3, r3
 8012360:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012362:	7efb      	ldrb	r3, [r7, #27]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d041      	beq.n	80123ec <udp_input+0x200>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012368:	2108      	movs	r1, #8
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7f9 f8fe 	bl	800b56c <pbuf_remove_header>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00a      	beq.n	801238c <udp_input+0x1a0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012376:	4b21      	ldr	r3, [pc, #132]	; (80123fc <udp_input+0x210>)
 8012378:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801237c:	4925      	ldr	r1, [pc, #148]	; (8012414 <udp_input+0x228>)
 801237e:	4821      	ldr	r0, [pc, #132]	; (8012404 <udp_input+0x218>)
 8012380:	f005 f972 	bl	8017668 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7f9 f977 	bl	800b678 <pbuf_free>
      goto end;
 801238a:	e032      	b.n	80123f2 <udp_input+0x206>
    }

    if (pcb != NULL) {
 801238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238e:	2b00      	cmp	r3, #0
 8012390:	d012      	beq.n	80123b8 <udp_input+0x1cc>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012394:	699b      	ldr	r3, [r3, #24]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00a      	beq.n	80123b0 <udp_input+0x1c4>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	699c      	ldr	r4, [r3, #24]
 801239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a0:	69d8      	ldr	r0, [r3, #28]
 80123a2:	8a3b      	ldrh	r3, [r7, #16]
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	4b1c      	ldr	r3, [pc, #112]	; (8012418 <udp_input+0x22c>)
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123ac:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80123ae:	e021      	b.n	80123f4 <udp_input+0x208>
        pbuf_free(p);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7f9 f961 	bl	800b678 <pbuf_free>
        goto end;
 80123b6:	e01c      	b.n	80123f2 <udp_input+0x206>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80123b8:	7cfb      	ldrb	r3, [r7, #19]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d112      	bne.n	80123e4 <udp_input+0x1f8>
 80123be:	4b13      	ldr	r3, [pc, #76]	; (801240c <udp_input+0x220>)
 80123c0:	695b      	ldr	r3, [r3, #20]
 80123c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123c6:	2be0      	cmp	r3, #224	; 0xe0
 80123c8:	d00c      	beq.n	80123e4 <udp_input+0x1f8>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80123ca:	4b10      	ldr	r3, [pc, #64]	; (801240c <udp_input+0x220>)
 80123cc:	899b      	ldrh	r3, [r3, #12]
 80123ce:	3308      	adds	r3, #8
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	b21b      	sxth	r3, r3
 80123d4:	4619      	mov	r1, r3
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7f9 f93b 	bl	800b652 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80123dc:	2103      	movs	r1, #3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f003 f9ca 	bl	8015778 <icmp_dest_unreach>
      pbuf_free(p);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7f9 f947 	bl	800b678 <pbuf_free>
  return;
 80123ea:	e003      	b.n	80123f4 <udp_input+0x208>
    pbuf_free(p);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7f9 f943 	bl	800b678 <pbuf_free>
  return;
 80123f2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80123f4:	372c      	adds	r7, #44	; 0x2c
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd90      	pop	{r4, r7, pc}
 80123fa:	bf00      	nop
 80123fc:	0801ebf8 	.word	0x0801ebf8
 8012400:	0801ec9c 	.word	0x0801ec9c
 8012404:	0801ec4c 	.word	0x0801ec4c
 8012408:	0801ecb4 	.word	0x0801ecb4
 801240c:	20009f2c 	.word	0x20009f2c
 8012410:	2000d874 	.word	0x2000d874
 8012414:	0801ecd0 	.word	0x0801ecd0
 8012418:	20009f3c 	.word	0x20009f3c

0801241c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b088      	sub	sp, #32
 8012420:	af02      	add	r7, sp, #8
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d109      	bne.n	8012444 <udp_sendto_if+0x28>
 8012430:	4b2e      	ldr	r3, [pc, #184]	; (80124ec <udp_sendto_if+0xd0>)
 8012432:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012436:	492e      	ldr	r1, [pc, #184]	; (80124f0 <udp_sendto_if+0xd4>)
 8012438:	482e      	ldr	r0, [pc, #184]	; (80124f4 <udp_sendto_if+0xd8>)
 801243a:	f005 f915 	bl	8017668 <iprintf>
 801243e:	f06f 030f 	mvn.w	r3, #15
 8012442:	e04f      	b.n	80124e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d109      	bne.n	801245e <udp_sendto_if+0x42>
 801244a:	4b28      	ldr	r3, [pc, #160]	; (80124ec <udp_sendto_if+0xd0>)
 801244c:	f240 2281 	movw	r2, #641	; 0x281
 8012450:	4929      	ldr	r1, [pc, #164]	; (80124f8 <udp_sendto_if+0xdc>)
 8012452:	4828      	ldr	r0, [pc, #160]	; (80124f4 <udp_sendto_if+0xd8>)
 8012454:	f005 f908 	bl	8017668 <iprintf>
 8012458:	f06f 030f 	mvn.w	r3, #15
 801245c:	e042      	b.n	80124e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d109      	bne.n	8012478 <udp_sendto_if+0x5c>
 8012464:	4b21      	ldr	r3, [pc, #132]	; (80124ec <udp_sendto_if+0xd0>)
 8012466:	f240 2282 	movw	r2, #642	; 0x282
 801246a:	4924      	ldr	r1, [pc, #144]	; (80124fc <udp_sendto_if+0xe0>)
 801246c:	4821      	ldr	r0, [pc, #132]	; (80124f4 <udp_sendto_if+0xd8>)
 801246e:	f005 f8fb 	bl	8017668 <iprintf>
 8012472:	f06f 030f 	mvn.w	r3, #15
 8012476:	e035      	b.n	80124e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012478:	6a3b      	ldr	r3, [r7, #32]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d109      	bne.n	8012492 <udp_sendto_if+0x76>
 801247e:	4b1b      	ldr	r3, [pc, #108]	; (80124ec <udp_sendto_if+0xd0>)
 8012480:	f240 2283 	movw	r2, #643	; 0x283
 8012484:	491e      	ldr	r1, [pc, #120]	; (8012500 <udp_sendto_if+0xe4>)
 8012486:	481b      	ldr	r0, [pc, #108]	; (80124f4 <udp_sendto_if+0xd8>)
 8012488:	f005 f8ee 	bl	8017668 <iprintf>
 801248c:	f06f 030f 	mvn.w	r3, #15
 8012490:	e028      	b.n	80124e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d009      	beq.n	80124ac <udp_sendto_if+0x90>
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d005      	beq.n	80124ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124a8:	2be0      	cmp	r3, #224	; 0xe0
 80124aa:	d103      	bne.n	80124b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80124ac:	6a3b      	ldr	r3, [r7, #32]
 80124ae:	3304      	adds	r3, #4
 80124b0:	617b      	str	r3, [r7, #20]
 80124b2:	e00b      	b.n	80124cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	6a3b      	ldr	r3, [r7, #32]
 80124ba:	3304      	adds	r3, #4
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d002      	beq.n	80124c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80124c2:	f06f 0303 	mvn.w	r3, #3
 80124c6:	e00d      	b.n	80124e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80124cc:	887a      	ldrh	r2, [r7, #2]
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	9301      	str	r3, [sp, #4]
 80124d2:	6a3b      	ldr	r3, [r7, #32]
 80124d4:	9300      	str	r3, [sp, #0]
 80124d6:	4613      	mov	r3, r2
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	68b9      	ldr	r1, [r7, #8]
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f000 f811 	bl	8012504 <udp_sendto_if_src>
 80124e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3718      	adds	r7, #24
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	0801ebf8 	.word	0x0801ebf8
 80124f0:	0801ed6c 	.word	0x0801ed6c
 80124f4:	0801ec4c 	.word	0x0801ec4c
 80124f8:	0801ed88 	.word	0x0801ed88
 80124fc:	0801eda4 	.word	0x0801eda4
 8012500:	0801edc4 	.word	0x0801edc4

08012504 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b08c      	sub	sp, #48	; 0x30
 8012508:	af04      	add	r7, sp, #16
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]
 8012510:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d109      	bne.n	801252c <udp_sendto_if_src+0x28>
 8012518:	4b65      	ldr	r3, [pc, #404]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 801251a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801251e:	4965      	ldr	r1, [pc, #404]	; (80126b4 <udp_sendto_if_src+0x1b0>)
 8012520:	4865      	ldr	r0, [pc, #404]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 8012522:	f005 f8a1 	bl	8017668 <iprintf>
 8012526:	f06f 030f 	mvn.w	r3, #15
 801252a:	e0bc      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <udp_sendto_if_src+0x42>
 8012532:	4b5f      	ldr	r3, [pc, #380]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 8012534:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012538:	4960      	ldr	r1, [pc, #384]	; (80126bc <udp_sendto_if_src+0x1b8>)
 801253a:	485f      	ldr	r0, [pc, #380]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 801253c:	f005 f894 	bl	8017668 <iprintf>
 8012540:	f06f 030f 	mvn.w	r3, #15
 8012544:	e0af      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d109      	bne.n	8012560 <udp_sendto_if_src+0x5c>
 801254c:	4b58      	ldr	r3, [pc, #352]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 801254e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012552:	495b      	ldr	r1, [pc, #364]	; (80126c0 <udp_sendto_if_src+0x1bc>)
 8012554:	4858      	ldr	r0, [pc, #352]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 8012556:	f005 f887 	bl	8017668 <iprintf>
 801255a:	f06f 030f 	mvn.w	r3, #15
 801255e:	e0a2      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012562:	2b00      	cmp	r3, #0
 8012564:	d109      	bne.n	801257a <udp_sendto_if_src+0x76>
 8012566:	4b52      	ldr	r3, [pc, #328]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 8012568:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801256c:	4955      	ldr	r1, [pc, #340]	; (80126c4 <udp_sendto_if_src+0x1c0>)
 801256e:	4852      	ldr	r0, [pc, #328]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 8012570:	f005 f87a 	bl	8017668 <iprintf>
 8012574:	f06f 030f 	mvn.w	r3, #15
 8012578:	e095      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257c:	2b00      	cmp	r3, #0
 801257e:	d109      	bne.n	8012594 <udp_sendto_if_src+0x90>
 8012580:	4b4b      	ldr	r3, [pc, #300]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 8012582:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012586:	4950      	ldr	r1, [pc, #320]	; (80126c8 <udp_sendto_if_src+0x1c4>)
 8012588:	484b      	ldr	r0, [pc, #300]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 801258a:	f005 f86d 	bl	8017668 <iprintf>
 801258e:	f06f 030f 	mvn.w	r3, #15
 8012592:	e088      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	8a5b      	ldrh	r3, [r3, #18]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d10f      	bne.n	80125bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801259c:	68f9      	ldr	r1, [r7, #12]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	8a5b      	ldrh	r3, [r3, #18]
 80125a2:	461a      	mov	r2, r3
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f000 f893 	bl	80126d0 <udp_bind>
 80125aa:	4603      	mov	r3, r0
 80125ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80125ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d002      	beq.n	80125bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80125b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125ba:	e074      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	891b      	ldrh	r3, [r3, #8]
 80125c0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d902      	bls.n	80125ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80125c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125cc:	e06b      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80125ce:	2108      	movs	r1, #8
 80125d0:	68b8      	ldr	r0, [r7, #8]
 80125d2:	f7f8 ffbb 	bl	800b54c <pbuf_add_header>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d015      	beq.n	8012608 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80125dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125e0:	2108      	movs	r1, #8
 80125e2:	2022      	movs	r0, #34	; 0x22
 80125e4:	f7f8 fd64 	bl	800b0b0 <pbuf_alloc>
 80125e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80125f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125f4:	e057      	b.n	80126a6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	891b      	ldrh	r3, [r3, #8]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d006      	beq.n	801260c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80125fe:	68b9      	ldr	r1, [r7, #8]
 8012600:	69f8      	ldr	r0, [r7, #28]
 8012602:	f7f9 f951 	bl	800b8a8 <pbuf_chain>
 8012606:	e001      	b.n	801260c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	895b      	ldrh	r3, [r3, #10]
 8012610:	2b07      	cmp	r3, #7
 8012612:	d806      	bhi.n	8012622 <udp_sendto_if_src+0x11e>
 8012614:	4b26      	ldr	r3, [pc, #152]	; (80126b0 <udp_sendto_if_src+0x1ac>)
 8012616:	f240 320d 	movw	r2, #781	; 0x30d
 801261a:	492c      	ldr	r1, [pc, #176]	; (80126cc <udp_sendto_if_src+0x1c8>)
 801261c:	4826      	ldr	r0, [pc, #152]	; (80126b8 <udp_sendto_if_src+0x1b4>)
 801261e:	f005 f823 	bl	8017668 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	8a5b      	ldrh	r3, [r3, #18]
 801262c:	4618      	mov	r0, r3
 801262e:	f7f7 fc89 	bl	8009f44 <lwip_htons>
 8012632:	4603      	mov	r3, r0
 8012634:	461a      	mov	r2, r3
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801263a:	887b      	ldrh	r3, [r7, #2]
 801263c:	4618      	mov	r0, r3
 801263e:	f7f7 fc81 	bl	8009f44 <lwip_htons>
 8012642:	4603      	mov	r3, r0
 8012644:	461a      	mov	r2, r3
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	2200      	movs	r2, #0
 801264e:	719a      	strb	r2, [r3, #6]
 8012650:	2200      	movs	r2, #0
 8012652:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	891b      	ldrh	r3, [r3, #8]
 8012658:	4618      	mov	r0, r3
 801265a:	f7f7 fc73 	bl	8009f44 <lwip_htons>
 801265e:	4603      	mov	r3, r0
 8012660:	461a      	mov	r2, r3
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012666:	2311      	movs	r3, #17
 8012668:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	7adb      	ldrb	r3, [r3, #11]
 801266e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	7a9b      	ldrb	r3, [r3, #10]
 8012674:	7cb9      	ldrb	r1, [r7, #18]
 8012676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012678:	9202      	str	r2, [sp, #8]
 801267a:	7cfa      	ldrb	r2, [r7, #19]
 801267c:	9201      	str	r2, [sp, #4]
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	460b      	mov	r3, r1
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012686:	69f8      	ldr	r0, [r7, #28]
 8012688:	f003 fb0c 	bl	8015ca4 <ip4_output_if_src>
 801268c:	4603      	mov	r3, r0
 801268e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012690:	69fa      	ldr	r2, [r7, #28]
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	429a      	cmp	r2, r3
 8012696:	d004      	beq.n	80126a2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012698:	69f8      	ldr	r0, [r7, #28]
 801269a:	f7f8 ffed 	bl	800b678 <pbuf_free>
    q = NULL;
 801269e:	2300      	movs	r3, #0
 80126a0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80126a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3720      	adds	r7, #32
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	0801ebf8 	.word	0x0801ebf8
 80126b4:	0801ede4 	.word	0x0801ede4
 80126b8:	0801ec4c 	.word	0x0801ec4c
 80126bc:	0801ee04 	.word	0x0801ee04
 80126c0:	0801ee24 	.word	0x0801ee24
 80126c4:	0801ee48 	.word	0x0801ee48
 80126c8:	0801ee6c 	.word	0x0801ee6c
 80126cc:	0801ee90 	.word	0x0801ee90

080126d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b086      	sub	sp, #24
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	4613      	mov	r3, r2
 80126dc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d101      	bne.n	80126e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80126e4:	4b39      	ldr	r3, [pc, #228]	; (80127cc <udp_bind+0xfc>)
 80126e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d109      	bne.n	8012702 <udp_bind+0x32>
 80126ee:	4b38      	ldr	r3, [pc, #224]	; (80127d0 <udp_bind+0x100>)
 80126f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80126f4:	4937      	ldr	r1, [pc, #220]	; (80127d4 <udp_bind+0x104>)
 80126f6:	4838      	ldr	r0, [pc, #224]	; (80127d8 <udp_bind+0x108>)
 80126f8:	f004 ffb6 	bl	8017668 <iprintf>
 80126fc:	f06f 030f 	mvn.w	r3, #15
 8012700:	e060      	b.n	80127c4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012706:	4b35      	ldr	r3, [pc, #212]	; (80127dc <udp_bind+0x10c>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	617b      	str	r3, [r7, #20]
 801270c:	e009      	b.n	8012722 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801270e:	68fa      	ldr	r2, [r7, #12]
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	429a      	cmp	r2, r3
 8012714:	d102      	bne.n	801271c <udp_bind+0x4c>
      rebind = 1;
 8012716:	2301      	movs	r3, #1
 8012718:	74fb      	strb	r3, [r7, #19]
      break;
 801271a:	e005      	b.n	8012728 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	617b      	str	r3, [r7, #20]
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1f2      	bne.n	801270e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012728:	88fb      	ldrh	r3, [r7, #6]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d109      	bne.n	8012742 <udp_bind+0x72>
    port = udp_new_port();
 801272e:	f7ff fcc1 	bl	80120b4 <udp_new_port>
 8012732:	4603      	mov	r3, r0
 8012734:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012736:	88fb      	ldrh	r3, [r7, #6]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d12c      	bne.n	8012796 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801273c:	f06f 0307 	mvn.w	r3, #7
 8012740:	e040      	b.n	80127c4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012742:	4b26      	ldr	r3, [pc, #152]	; (80127dc <udp_bind+0x10c>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	617b      	str	r3, [r7, #20]
 8012748:	e022      	b.n	8012790 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801274a:	68fa      	ldr	r2, [r7, #12]
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	429a      	cmp	r2, r3
 8012750:	d01b      	beq.n	801278a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	8a5b      	ldrh	r3, [r3, #18]
 8012756:	88fa      	ldrh	r2, [r7, #6]
 8012758:	429a      	cmp	r2, r3
 801275a:	d116      	bne.n	801278a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012764:	429a      	cmp	r2, r3
 8012766:	d00d      	beq.n	8012784 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00a      	beq.n	8012784 <udp_bind+0xb4>
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d006      	beq.n	8012784 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012776:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012778:	2b00      	cmp	r3, #0
 801277a:	d003      	beq.n	8012784 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d102      	bne.n	801278a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012784:	f06f 0307 	mvn.w	r3, #7
 8012788:	e01c      	b.n	80127c4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	617b      	str	r3, [r7, #20]
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1d9      	bne.n	801274a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d002      	beq.n	80127a2 <udp_bind+0xd2>
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	e000      	b.n	80127a4 <udp_bind+0xd4>
 80127a2:	2300      	movs	r3, #0
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	88fa      	ldrh	r2, [r7, #6]
 80127ac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80127ae:	7cfb      	ldrb	r3, [r7, #19]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d106      	bne.n	80127c2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80127b4:	4b09      	ldr	r3, [pc, #36]	; (80127dc <udp_bind+0x10c>)
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80127bc:	4a07      	ldr	r2, [pc, #28]	; (80127dc <udp_bind+0x10c>)
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80127c2:	2300      	movs	r3, #0
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3718      	adds	r7, #24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	08033a18 	.word	0x08033a18
 80127d0:	0801ebf8 	.word	0x0801ebf8
 80127d4:	0801eec0 	.word	0x0801eec0
 80127d8:	0801ec4c 	.word	0x0801ec4c
 80127dc:	2000d874 	.word	0x2000d874

080127e0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	4613      	mov	r3, r2
 80127ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d109      	bne.n	8012808 <udp_connect+0x28>
 80127f4:	4b2c      	ldr	r3, [pc, #176]	; (80128a8 <udp_connect+0xc8>)
 80127f6:	f240 4235 	movw	r2, #1077	; 0x435
 80127fa:	492c      	ldr	r1, [pc, #176]	; (80128ac <udp_connect+0xcc>)
 80127fc:	482c      	ldr	r0, [pc, #176]	; (80128b0 <udp_connect+0xd0>)
 80127fe:	f004 ff33 	bl	8017668 <iprintf>
 8012802:	f06f 030f 	mvn.w	r3, #15
 8012806:	e04b      	b.n	80128a0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d109      	bne.n	8012822 <udp_connect+0x42>
 801280e:	4b26      	ldr	r3, [pc, #152]	; (80128a8 <udp_connect+0xc8>)
 8012810:	f240 4236 	movw	r2, #1078	; 0x436
 8012814:	4927      	ldr	r1, [pc, #156]	; (80128b4 <udp_connect+0xd4>)
 8012816:	4826      	ldr	r0, [pc, #152]	; (80128b0 <udp_connect+0xd0>)
 8012818:	f004 ff26 	bl	8017668 <iprintf>
 801281c:	f06f 030f 	mvn.w	r3, #15
 8012820:	e03e      	b.n	80128a0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	8a5b      	ldrh	r3, [r3, #18]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d10f      	bne.n	801284a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801282a:	68f9      	ldr	r1, [r7, #12]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	8a5b      	ldrh	r3, [r3, #18]
 8012830:	461a      	mov	r2, r3
 8012832:	68f8      	ldr	r0, [r7, #12]
 8012834:	f7ff ff4c 	bl	80126d0 <udp_bind>
 8012838:	4603      	mov	r3, r0
 801283a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801283c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d002      	beq.n	801284a <udp_connect+0x6a>
      return err;
 8012844:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012848:	e02a      	b.n	80128a0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d002      	beq.n	8012856 <udp_connect+0x76>
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	e000      	b.n	8012858 <udp_connect+0x78>
 8012856:	2300      	movs	r3, #0
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	88fa      	ldrh	r2, [r7, #6]
 8012860:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	7c1b      	ldrb	r3, [r3, #16]
 8012866:	f043 0304 	orr.w	r3, r3, #4
 801286a:	b2da      	uxtb	r2, r3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012870:	4b11      	ldr	r3, [pc, #68]	; (80128b8 <udp_connect+0xd8>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	617b      	str	r3, [r7, #20]
 8012876:	e008      	b.n	801288a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	429a      	cmp	r2, r3
 801287e:	d101      	bne.n	8012884 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012880:	2300      	movs	r3, #0
 8012882:	e00d      	b.n	80128a0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	617b      	str	r3, [r7, #20]
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d1f3      	bne.n	8012878 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012890:	4b09      	ldr	r3, [pc, #36]	; (80128b8 <udp_connect+0xd8>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012898:	4a07      	ldr	r2, [pc, #28]	; (80128b8 <udp_connect+0xd8>)
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0801ebf8 	.word	0x0801ebf8
 80128ac:	0801eed8 	.word	0x0801eed8
 80128b0:	0801ec4c 	.word	0x0801ec4c
 80128b4:	0801eef4 	.word	0x0801eef4
 80128b8:	2000d874 	.word	0x2000d874

080128bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d107      	bne.n	80128de <udp_recv+0x22>
 80128ce:	4b08      	ldr	r3, [pc, #32]	; (80128f0 <udp_recv+0x34>)
 80128d0:	f240 428a 	movw	r2, #1162	; 0x48a
 80128d4:	4907      	ldr	r1, [pc, #28]	; (80128f4 <udp_recv+0x38>)
 80128d6:	4808      	ldr	r0, [pc, #32]	; (80128f8 <udp_recv+0x3c>)
 80128d8:	f004 fec6 	bl	8017668 <iprintf>
 80128dc:	e005      	b.n	80128ea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	61da      	str	r2, [r3, #28]
}
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	0801ebf8 	.word	0x0801ebf8
 80128f4:	0801ef2c 	.word	0x0801ef2c
 80128f8:	0801ec4c 	.word	0x0801ec4c

080128fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d107      	bne.n	801291a <udp_remove+0x1e>
 801290a:	4b19      	ldr	r3, [pc, #100]	; (8012970 <udp_remove+0x74>)
 801290c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012910:	4918      	ldr	r1, [pc, #96]	; (8012974 <udp_remove+0x78>)
 8012912:	4819      	ldr	r0, [pc, #100]	; (8012978 <udp_remove+0x7c>)
 8012914:	f004 fea8 	bl	8017668 <iprintf>
 8012918:	e026      	b.n	8012968 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801291a:	4b18      	ldr	r3, [pc, #96]	; (801297c <udp_remove+0x80>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	429a      	cmp	r2, r3
 8012922:	d105      	bne.n	8012930 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012924:	4b15      	ldr	r3, [pc, #84]	; (801297c <udp_remove+0x80>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4a14      	ldr	r2, [pc, #80]	; (801297c <udp_remove+0x80>)
 801292c:	6013      	str	r3, [r2, #0]
 801292e:	e017      	b.n	8012960 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012930:	4b12      	ldr	r3, [pc, #72]	; (801297c <udp_remove+0x80>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	60fb      	str	r3, [r7, #12]
 8012936:	e010      	b.n	801295a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d009      	beq.n	8012954 <udp_remove+0x58>
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	429a      	cmp	r2, r3
 8012948:	d104      	bne.n	8012954 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	68da      	ldr	r2, [r3, #12]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	60da      	str	r2, [r3, #12]
        break;
 8012952:	e005      	b.n	8012960 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	60fb      	str	r3, [r7, #12]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1eb      	bne.n	8012938 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012960:	6879      	ldr	r1, [r7, #4]
 8012962:	2000      	movs	r0, #0
 8012964:	f7f8 f86e 	bl	800aa44 <memp_free>
}
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	0801ebf8 	.word	0x0801ebf8
 8012974:	0801ef44 	.word	0x0801ef44
 8012978:	0801ec4c 	.word	0x0801ec4c
 801297c:	2000d874 	.word	0x2000d874

08012980 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012986:	2000      	movs	r0, #0
 8012988:	f7f8 f810 	bl	800a9ac <memp_malloc>
 801298c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012994:	2220      	movs	r2, #32
 8012996:	2100      	movs	r1, #0
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f004 f9f3 	bl	8016d84 <memset>
    pcb->ttl = UDP_TTL;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	22ff      	movs	r2, #255	; 0xff
 80129a2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80129a4:	687b      	ldr	r3, [r7, #4]
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3708      	adds	r7, #8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
	...

080129b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d01e      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01a      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d017      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d013      	beq.n	80129fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129d6:	4b0d      	ldr	r3, [pc, #52]	; (8012a0c <udp_netif_ip_addr_changed+0x5c>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	60fb      	str	r3, [r7, #12]
 80129dc:	e00c      	b.n	80129f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d103      	bne.n	80129f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	60fb      	str	r3, [r7, #12]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1ef      	bne.n	80129de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80129fe:	bf00      	nop
 8012a00:	3714      	adds	r7, #20
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	2000d874 	.word	0x2000d874

08012a10 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b083      	sub	sp, #12
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 8012a18:	bf00      	nop
 8012a1a:	370c      	adds	r7, #12
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012a28:	4b20      	ldr	r3, [pc, #128]	; (8012aac <dhcp_inc_pcb_refcount+0x88>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d133      	bne.n	8012a98 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012a30:	4b1f      	ldr	r3, [pc, #124]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d005      	beq.n	8012a44 <dhcp_inc_pcb_refcount+0x20>
 8012a38:	4b1e      	ldr	r3, [pc, #120]	; (8012ab4 <dhcp_inc_pcb_refcount+0x90>)
 8012a3a:	22e5      	movs	r2, #229	; 0xe5
 8012a3c:	491e      	ldr	r1, [pc, #120]	; (8012ab8 <dhcp_inc_pcb_refcount+0x94>)
 8012a3e:	481f      	ldr	r0, [pc, #124]	; (8012abc <dhcp_inc_pcb_refcount+0x98>)
 8012a40:	f004 fe12 	bl	8017668 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012a44:	f7ff ff9c 	bl	8012980 <udp_new>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	4a19      	ldr	r2, [pc, #100]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a4c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012a4e:	4b18      	ldr	r3, [pc, #96]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d102      	bne.n	8012a5c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a5a:	e024      	b.n	8012aa6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012a5c:	4b14      	ldr	r3, [pc, #80]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	7a5a      	ldrb	r2, [r3, #9]
 8012a62:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f042 0220 	orr.w	r2, r2, #32
 8012a6a:	b2d2      	uxtb	r2, r2
 8012a6c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012a6e:	4b10      	ldr	r3, [pc, #64]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2244      	movs	r2, #68	; 0x44
 8012a74:	4912      	ldr	r1, [pc, #72]	; (8012ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7ff fe2a 	bl	80126d0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012a7c:	4b0c      	ldr	r3, [pc, #48]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2243      	movs	r2, #67	; 0x43
 8012a82:	490f      	ldr	r1, [pc, #60]	; (8012ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7ff feab 	bl	80127e0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012a8a:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	490c      	ldr	r1, [pc, #48]	; (8012ac4 <dhcp_inc_pcb_refcount+0xa0>)
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff ff12 	bl	80128bc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012a98:	4b04      	ldr	r3, [pc, #16]	; (8012aac <dhcp_inc_pcb_refcount+0x88>)
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	4b02      	ldr	r3, [pc, #8]	; (8012aac <dhcp_inc_pcb_refcount+0x88>)
 8012aa2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012aa4:	2300      	movs	r3, #0
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	2000125c 	.word	0x2000125c
 8012ab0:	20001258 	.word	0x20001258
 8012ab4:	0801ef5c 	.word	0x0801ef5c
 8012ab8:	0801ef94 	.word	0x0801ef94
 8012abc:	0801efbc 	.word	0x0801efbc
 8012ac0:	08033a18 	.word	0x08033a18
 8012ac4:	080142e1 	.word	0x080142e1

08012ac8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012acc:	4b0e      	ldr	r3, [pc, #56]	; (8012b08 <dhcp_dec_pcb_refcount+0x40>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d105      	bne.n	8012ae0 <dhcp_dec_pcb_refcount+0x18>
 8012ad4:	4b0d      	ldr	r3, [pc, #52]	; (8012b0c <dhcp_dec_pcb_refcount+0x44>)
 8012ad6:	22ff      	movs	r2, #255	; 0xff
 8012ad8:	490d      	ldr	r1, [pc, #52]	; (8012b10 <dhcp_dec_pcb_refcount+0x48>)
 8012ada:	480e      	ldr	r0, [pc, #56]	; (8012b14 <dhcp_dec_pcb_refcount+0x4c>)
 8012adc:	f004 fdc4 	bl	8017668 <iprintf>
  dhcp_pcb_refcount--;
 8012ae0:	4b09      	ldr	r3, [pc, #36]	; (8012b08 <dhcp_dec_pcb_refcount+0x40>)
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	b2da      	uxtb	r2, r3
 8012ae8:	4b07      	ldr	r3, [pc, #28]	; (8012b08 <dhcp_dec_pcb_refcount+0x40>)
 8012aea:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <dhcp_dec_pcb_refcount+0x40>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d107      	bne.n	8012b04 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012af4:	4b08      	ldr	r3, [pc, #32]	; (8012b18 <dhcp_dec_pcb_refcount+0x50>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff feff 	bl	80128fc <udp_remove>
    dhcp_pcb = NULL;
 8012afe:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <dhcp_dec_pcb_refcount+0x50>)
 8012b00:	2200      	movs	r2, #0
 8012b02:	601a      	str	r2, [r3, #0]
  }
}
 8012b04:	bf00      	nop
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	2000125c 	.word	0x2000125c
 8012b0c:	0801ef5c 	.word	0x0801ef5c
 8012b10:	0801efe4 	.word	0x0801efe4
 8012b14:	0801efbc 	.word	0x0801efbc
 8012b18:	20001258 	.word	0x20001258

08012b1c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012b2a:	210c      	movs	r1, #12
 8012b2c:	68f8      	ldr	r0, [r7, #12]
 8012b2e:	f001 f819 	bl	8013b64 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012b32:	4b06      	ldr	r3, [pc, #24]	; (8012b4c <dhcp_handle_nak+0x30>)
 8012b34:	4a05      	ldr	r2, [pc, #20]	; (8012b4c <dhcp_handle_nak+0x30>)
 8012b36:	4905      	ldr	r1, [pc, #20]	; (8012b4c <dhcp_handle_nak+0x30>)
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7f8 f925 	bl	800ad88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fc0c 	bl	801335c <dhcp_discover>
}
 8012b44:	bf00      	nop
 8012b46:	3710      	adds	r7, #16
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	08033a18 	.word	0x08033a18

08012b50 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012b5e:	2108      	movs	r1, #8
 8012b60:	68f8      	ldr	r0, [r7, #12]
 8012b62:	f000 ffff 	bl	8013b64 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	331c      	adds	r3, #28
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f002 fb00 	bl	8015174 <etharp_query>
 8012b74:	4603      	mov	r3, r0
 8012b76:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	799b      	ldrb	r3, [r3, #6]
 8012b7c:	2bff      	cmp	r3, #255	; 0xff
 8012b7e:	d005      	beq.n	8012b8c <dhcp_check+0x3c>
    dhcp->tries++;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	799b      	ldrb	r3, [r3, #6]
 8012b84:	3301      	adds	r3, #1
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012b90:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012b92:	893b      	ldrh	r3, [r7, #8]
 8012b94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012b98:	4a06      	ldr	r2, [pc, #24]	; (8012bb4 <dhcp_check+0x64>)
 8012b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8012b9e:	1152      	asrs	r2, r2, #5
 8012ba0:	17db      	asrs	r3, r3, #31
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012baa:	bf00      	nop
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	10624dd3 	.word	0x10624dd3

08012bb8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012bc8:	4b0c      	ldr	r3, [pc, #48]	; (8012bfc <dhcp_handle_offer+0x44>)
 8012bca:	789b      	ldrb	r3, [r3, #2]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d011      	beq.n	8012bf4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012bd6:	4b0a      	ldr	r3, [pc, #40]	; (8012c00 <dhcp_handle_offer+0x48>)
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7f7 f9c7 	bl	8009f6e <lwip_htonl>
 8012be0:	4602      	mov	r2, r0
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	691a      	ldr	r2, [r3, #16]
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 f808 	bl	8012c04 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012bf4:	bf00      	nop
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	2000d878 	.word	0x2000d878
 8012c00:	2000d880 	.word	0x2000d880

08012c04 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012c04:	b5b0      	push	{r4, r5, r7, lr}
 8012c06:	b08a      	sub	sp, #40	; 0x28
 8012c08:	af02      	add	r7, sp, #8
 8012c0a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d109      	bne.n	8012c26 <dhcp_select+0x22>
 8012c12:	4b71      	ldr	r3, [pc, #452]	; (8012dd8 <dhcp_select+0x1d4>)
 8012c14:	f240 1277 	movw	r2, #375	; 0x177
 8012c18:	4970      	ldr	r1, [pc, #448]	; (8012ddc <dhcp_select+0x1d8>)
 8012c1a:	4871      	ldr	r0, [pc, #452]	; (8012de0 <dhcp_select+0x1dc>)
 8012c1c:	f004 fd24 	bl	8017668 <iprintf>
 8012c20:	f06f 030f 	mvn.w	r3, #15
 8012c24:	e0d3      	b.n	8012dce <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d109      	bne.n	8012c46 <dhcp_select+0x42>
 8012c32:	4b69      	ldr	r3, [pc, #420]	; (8012dd8 <dhcp_select+0x1d4>)
 8012c34:	f240 1279 	movw	r2, #377	; 0x179
 8012c38:	496a      	ldr	r1, [pc, #424]	; (8012de4 <dhcp_select+0x1e0>)
 8012c3a:	4869      	ldr	r0, [pc, #420]	; (8012de0 <dhcp_select+0x1dc>)
 8012c3c:	f004 fd14 	bl	8017668 <iprintf>
 8012c40:	f06f 0305 	mvn.w	r3, #5
 8012c44:	e0c3      	b.n	8012dce <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012c46:	2101      	movs	r1, #1
 8012c48:	69b8      	ldr	r0, [r7, #24]
 8012c4a:	f000 ff8b 	bl	8013b64 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c4e:	f107 030c 	add.w	r3, r7, #12
 8012c52:	2203      	movs	r2, #3
 8012c54:	69b9      	ldr	r1, [r7, #24]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f001 fc10 	bl	801447c <dhcp_create_msg>
 8012c5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f000 8085 	beq.w	8012d70 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c6c:	89b8      	ldrh	r0, [r7, #12]
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c74:	2302      	movs	r3, #2
 8012c76:	2239      	movs	r2, #57	; 0x39
 8012c78:	f000 ff8e 	bl	8013b98 <dhcp_option>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012c80:	89b8      	ldrh	r0, [r7, #12]
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	f000 ffdd 	bl	8013c4c <dhcp_option_short>
 8012c92:	4603      	mov	r3, r0
 8012c94:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012c96:	89b8      	ldrh	r0, [r7, #12]
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c9e:	2304      	movs	r3, #4
 8012ca0:	2232      	movs	r2, #50	; 0x32
 8012ca2:	f000 ff79 	bl	8013b98 <dhcp_option>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012caa:	89bc      	ldrh	r4, [r7, #12]
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	69db      	ldr	r3, [r3, #28]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f7 f959 	bl	8009f6e <lwip_htonl>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f000 fff4 	bl	8013cb0 <dhcp_option_long>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012ccc:	89b8      	ldrh	r0, [r7, #12]
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cd4:	2304      	movs	r3, #4
 8012cd6:	2236      	movs	r2, #54	; 0x36
 8012cd8:	f000 ff5e 	bl	8013b98 <dhcp_option>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012ce0:	89bc      	ldrh	r4, [r7, #12]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	699b      	ldr	r3, [r3, #24]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f7 f93e 	bl	8009f6e <lwip_htonl>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 ffd9 	bl	8013cb0 <dhcp_option_long>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012d02:	89b8      	ldrh	r0, [r7, #12]
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	2237      	movs	r2, #55	; 0x37
 8012d0e:	f000 ff43 	bl	8013b98 <dhcp_option>
 8012d12:	4603      	mov	r3, r0
 8012d14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d16:	2300      	movs	r3, #0
 8012d18:	77bb      	strb	r3, [r7, #30]
 8012d1a:	e00e      	b.n	8012d3a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012d1c:	89b8      	ldrh	r0, [r7, #12]
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d24:	7fbb      	ldrb	r3, [r7, #30]
 8012d26:	4a30      	ldr	r2, [pc, #192]	; (8012de8 <dhcp_select+0x1e4>)
 8012d28:	5cd3      	ldrb	r3, [r2, r3]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	f000 ff68 	bl	8013c00 <dhcp_option_byte>
 8012d30:	4603      	mov	r3, r0
 8012d32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d34:	7fbb      	ldrb	r3, [r7, #30]
 8012d36:	3301      	adds	r3, #1
 8012d38:	77bb      	strb	r3, [r7, #30]
 8012d3a:	7fbb      	ldrb	r3, [r7, #30]
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d9ed      	bls.n	8012d1c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012d40:	89b8      	ldrh	r0, [r7, #12]
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	33f0      	adds	r3, #240	; 0xf0
 8012d46:	697a      	ldr	r2, [r7, #20]
 8012d48:	4619      	mov	r1, r3
 8012d4a:	f001 fc6d 	bl	8014628 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012d4e:	4b27      	ldr	r3, [pc, #156]	; (8012dec <dhcp_select+0x1e8>)
 8012d50:	6818      	ldr	r0, [r3, #0]
 8012d52:	4b27      	ldr	r3, [pc, #156]	; (8012df0 <dhcp_select+0x1ec>)
 8012d54:	9301      	str	r3, [sp, #4]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	2343      	movs	r3, #67	; 0x43
 8012d5c:	4a25      	ldr	r2, [pc, #148]	; (8012df4 <dhcp_select+0x1f0>)
 8012d5e:	6979      	ldr	r1, [r7, #20]
 8012d60:	f7ff fbd0 	bl	8012504 <udp_sendto_if_src>
 8012d64:	4603      	mov	r3, r0
 8012d66:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012d68:	6978      	ldr	r0, [r7, #20]
 8012d6a:	f7f8 fc85 	bl	800b678 <pbuf_free>
 8012d6e:	e001      	b.n	8012d74 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012d70:	23ff      	movs	r3, #255	; 0xff
 8012d72:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	799b      	ldrb	r3, [r3, #6]
 8012d78:	2bff      	cmp	r3, #255	; 0xff
 8012d7a:	d005      	beq.n	8012d88 <dhcp_select+0x184>
    dhcp->tries++;
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	799b      	ldrb	r3, [r3, #6]
 8012d80:	3301      	adds	r3, #1
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	69bb      	ldr	r3, [r7, #24]
 8012d86:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	799b      	ldrb	r3, [r3, #6]
 8012d8c:	2b05      	cmp	r3, #5
 8012d8e:	d80d      	bhi.n	8012dac <dhcp_select+0x1a8>
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	799b      	ldrb	r3, [r3, #6]
 8012d94:	461a      	mov	r2, r3
 8012d96:	2301      	movs	r3, #1
 8012d98:	4093      	lsls	r3, r2
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	0152      	lsls	r2, r2, #5
 8012da0:	1ad2      	subs	r2, r2, r3
 8012da2:	0092      	lsls	r2, r2, #2
 8012da4:	4413      	add	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	e001      	b.n	8012db0 <dhcp_select+0x1ac>
 8012dac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012db0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012db2:	89fb      	ldrh	r3, [r7, #14]
 8012db4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012db8:	4a0f      	ldr	r2, [pc, #60]	; (8012df8 <dhcp_select+0x1f4>)
 8012dba:	fb82 1203 	smull	r1, r2, r2, r3
 8012dbe:	1152      	asrs	r2, r2, #5
 8012dc0:	17db      	asrs	r3, r3, #31
 8012dc2:	1ad3      	subs	r3, r2, r3
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3720      	adds	r7, #32
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	0801ef5c 	.word	0x0801ef5c
 8012ddc:	0801f008 	.word	0x0801f008
 8012de0:	0801efbc 	.word	0x0801efbc
 8012de4:	0801f024 	.word	0x0801f024
 8012de8:	200005c8 	.word	0x200005c8
 8012dec:	20001258 	.word	0x20001258
 8012df0:	08033a18 	.word	0x08033a18
 8012df4:	08033a1c 	.word	0x08033a1c
 8012df8:	10624dd3 	.word	0x10624dd3

08012dfc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012e02:	4b27      	ldr	r3, [pc, #156]	; (8012ea0 <dhcp_coarse_tmr+0xa4>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	607b      	str	r3, [r7, #4]
 8012e08:	e042      	b.n	8012e90 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e0e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d039      	beq.n	8012e8a <dhcp_coarse_tmr+0x8e>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	795b      	ldrb	r3, [r3, #5]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d035      	beq.n	8012e8a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	8a9b      	ldrh	r3, [r3, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d012      	beq.n	8012e4c <dhcp_coarse_tmr+0x50>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	8a5b      	ldrh	r3, [r3, #18]
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	825a      	strh	r2, [r3, #18]
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	8a5a      	ldrh	r2, [r3, #18]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	8a9b      	ldrh	r3, [r3, #20]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d106      	bne.n	8012e4c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f000 fdf6 	bl	8013a30 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 f969 	bl	801311c <dhcp_start>
 8012e4a:	e01e      	b.n	8012e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	8a1b      	ldrh	r3, [r3, #16]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d00b      	beq.n	8012e6c <dhcp_coarse_tmr+0x70>
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	8a1b      	ldrh	r3, [r3, #16]
 8012e58:	1e5a      	subs	r2, r3, #1
 8012e5a:	b291      	uxth	r1, r2
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	8211      	strh	r1, [r2, #16]
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d103      	bne.n	8012e6c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 f8c6 	bl	8012ff6 <dhcp_t2_timeout>
 8012e6a:	e00e      	b.n	8012e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	89db      	ldrh	r3, [r3, #14]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00a      	beq.n	8012e8a <dhcp_coarse_tmr+0x8e>
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	89db      	ldrh	r3, [r3, #14]
 8012e78:	1e5a      	subs	r2, r3, #1
 8012e7a:	b291      	uxth	r1, r2
 8012e7c:	683a      	ldr	r2, [r7, #0]
 8012e7e:	81d1      	strh	r1, [r2, #14]
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d102      	bne.n	8012e8a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f888 	bl	8012f9a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	607b      	str	r3, [r7, #4]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1b9      	bne.n	8012e0a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012e96:	bf00      	nop
 8012e98:	bf00      	nop
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	2000d84c 	.word	0x2000d84c

08012ea4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012eaa:	4b16      	ldr	r3, [pc, #88]	; (8012f04 <dhcp_fine_tmr+0x60>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	607b      	str	r3, [r7, #4]
 8012eb0:	e020      	b.n	8012ef4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d017      	beq.n	8012eee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	891b      	ldrh	r3, [r3, #8]
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	d906      	bls.n	8012ed4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	891b      	ldrh	r3, [r3, #8]
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	811a      	strh	r2, [r3, #8]
 8012ed2:	e00c      	b.n	8012eee <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	891b      	ldrh	r3, [r3, #8]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d108      	bne.n	8012eee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	891b      	ldrh	r3, [r3, #8]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 f80d 	bl	8012f08 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	607b      	str	r3, [r7, #4]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1db      	bne.n	8012eb2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012efa:	bf00      	nop
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	2000d84c 	.word	0x2000d84c

08012f08 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	795b      	ldrb	r3, [r3, #5]
 8012f1a:	2b0c      	cmp	r3, #12
 8012f1c:	d003      	beq.n	8012f26 <dhcp_timeout+0x1e>
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	795b      	ldrb	r3, [r3, #5]
 8012f22:	2b06      	cmp	r3, #6
 8012f24:	d103      	bne.n	8012f2e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fa18 	bl	801335c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012f2c:	e031      	b.n	8012f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	795b      	ldrb	r3, [r3, #5]
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d10e      	bne.n	8012f54 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	799b      	ldrb	r3, [r3, #6]
 8012f3a:	2b05      	cmp	r3, #5
 8012f3c:	d803      	bhi.n	8012f46 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff fe60 	bl	8012c04 <dhcp_select>
}
 8012f44:	e025      	b.n	8012f92 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 fd72 	bl	8013a30 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 f8e5 	bl	801311c <dhcp_start>
}
 8012f52:	e01e      	b.n	8012f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	795b      	ldrb	r3, [r3, #5]
 8012f58:	2b08      	cmp	r3, #8
 8012f5a:	d10b      	bne.n	8012f74 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	799b      	ldrb	r3, [r3, #6]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d803      	bhi.n	8012f6c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7ff fdf3 	bl	8012b50 <dhcp_check>
}
 8012f6a:	e012      	b.n	8012f92 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 fa97 	bl	80134a0 <dhcp_bind>
}
 8012f72:	e00e      	b.n	8012f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	795b      	ldrb	r3, [r3, #5]
 8012f78:	2b03      	cmp	r3, #3
 8012f7a:	d10a      	bne.n	8012f92 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	799b      	ldrb	r3, [r3, #6]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d803      	bhi.n	8012f8c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f000 fc9d 	bl	80138c4 <dhcp_reboot>
}
 8012f8a:	e002      	b.n	8012f92 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f000 f9e5 	bl	801335c <dhcp_discover>
}
 8012f92:	bf00      	nop
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b084      	sub	sp, #16
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	795b      	ldrb	r3, [r3, #5]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d007      	beq.n	8012fc0 <dhcp_t1_timeout+0x26>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	795b      	ldrb	r3, [r3, #5]
 8012fb4:	2b0a      	cmp	r3, #10
 8012fb6:	d003      	beq.n	8012fc0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012fbc:	2b05      	cmp	r3, #5
 8012fbe:	d116      	bne.n	8012fee <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 fb47 	bl	8013654 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	899b      	ldrh	r3, [r3, #12]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	8a5b      	ldrh	r3, [r3, #18]
 8012fd0:	1ad3      	subs	r3, r2, r3
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	dd0b      	ble.n	8012fee <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	899b      	ldrh	r3, [r3, #12]
 8012fda:	461a      	mov	r2, r3
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	8a5b      	ldrh	r3, [r3, #18]
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	0fda      	lsrs	r2, r3, #31
 8012fe4:	4413      	add	r3, r2
 8012fe6:	105b      	asrs	r3, r3, #1
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012fee:	bf00      	nop
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b084      	sub	sp, #16
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013002:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	795b      	ldrb	r3, [r3, #5]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d00b      	beq.n	8013024 <dhcp_t2_timeout+0x2e>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	795b      	ldrb	r3, [r3, #5]
 8013010:	2b0a      	cmp	r3, #10
 8013012:	d007      	beq.n	8013024 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013018:	2b05      	cmp	r3, #5
 801301a:	d003      	beq.n	8013024 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	795b      	ldrb	r3, [r3, #5]
 8013020:	2b04      	cmp	r3, #4
 8013022:	d116      	bne.n	8013052 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f000 fbb1 	bl	801378c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	8a9b      	ldrh	r3, [r3, #20]
 801302e:	461a      	mov	r2, r3
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	8a5b      	ldrh	r3, [r3, #18]
 8013034:	1ad3      	subs	r3, r2, r3
 8013036:	2b01      	cmp	r3, #1
 8013038:	dd0b      	ble.n	8013052 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	8a9b      	ldrh	r3, [r3, #20]
 801303e:	461a      	mov	r2, r3
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	8a5b      	ldrh	r3, [r3, #18]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	0fda      	lsrs	r2, r3, #31
 8013048:	4413      	add	r3, r2
 801304a:	105b      	asrs	r3, r3, #1
 801304c:	b29a      	uxth	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013052:	bf00      	nop
 8013054:	3710      	adds	r7, #16
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
	...

0801305c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801306a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2200      	movs	r2, #0
 8013070:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2200      	movs	r2, #0
 8013076:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013078:	4b26      	ldr	r3, [pc, #152]	; (8013114 <dhcp_handle_ack+0xb8>)
 801307a:	78db      	ldrb	r3, [r3, #3]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d003      	beq.n	8013088 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013080:	4b25      	ldr	r3, [pc, #148]	; (8013118 <dhcp_handle_ack+0xbc>)
 8013082:	68da      	ldr	r2, [r3, #12]
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013088:	4b22      	ldr	r3, [pc, #136]	; (8013114 <dhcp_handle_ack+0xb8>)
 801308a:	791b      	ldrb	r3, [r3, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d004      	beq.n	801309a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013090:	4b21      	ldr	r3, [pc, #132]	; (8013118 <dhcp_handle_ack+0xbc>)
 8013092:	691a      	ldr	r2, [r3, #16]
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	62da      	str	r2, [r3, #44]	; 0x2c
 8013098:	e004      	b.n	80130a4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801309e:	085a      	lsrs	r2, r3, #1
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80130a4:	4b1b      	ldr	r3, [pc, #108]	; (8013114 <dhcp_handle_ack+0xb8>)
 80130a6:	795b      	ldrb	r3, [r3, #5]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d004      	beq.n	80130b6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80130ac:	4b1a      	ldr	r3, [pc, #104]	; (8013118 <dhcp_handle_ack+0xbc>)
 80130ae:	695a      	ldr	r2, [r3, #20]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	631a      	str	r2, [r3, #48]	; 0x30
 80130b4:	e007      	b.n	80130c6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80130ba:	4613      	mov	r3, r2
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	1a9b      	subs	r3, r3, r2
 80130c0:	08da      	lsrs	r2, r3, #3
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	691a      	ldr	r2, [r3, #16]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80130ce:	4b11      	ldr	r3, [pc, #68]	; (8013114 <dhcp_handle_ack+0xb8>)
 80130d0:	799b      	ldrb	r3, [r3, #6]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00b      	beq.n	80130ee <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80130d6:	4b10      	ldr	r3, [pc, #64]	; (8013118 <dhcp_handle_ack+0xbc>)
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f6 ff47 	bl	8009f6e <lwip_htonl>
 80130e0:	4602      	mov	r2, r0
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2201      	movs	r2, #1
 80130ea:	71da      	strb	r2, [r3, #7]
 80130ec:	e002      	b.n	80130f4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2200      	movs	r2, #0
 80130f2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80130f4:	4b07      	ldr	r3, [pc, #28]	; (8013114 <dhcp_handle_ack+0xb8>)
 80130f6:	79db      	ldrb	r3, [r3, #7]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d007      	beq.n	801310c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80130fc:	4b06      	ldr	r3, [pc, #24]	; (8013118 <dhcp_handle_ack+0xbc>)
 80130fe:	69db      	ldr	r3, [r3, #28]
 8013100:	4618      	mov	r0, r3
 8013102:	f7f6 ff34 	bl	8009f6e <lwip_htonl>
 8013106:	4602      	mov	r2, r0
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801310c:	bf00      	nop
 801310e:	3710      	adds	r7, #16
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	2000d878 	.word	0x2000d878
 8013118:	2000d880 	.word	0x2000d880

0801311c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d109      	bne.n	801313e <dhcp_start+0x22>
 801312a:	4b37      	ldr	r3, [pc, #220]	; (8013208 <dhcp_start+0xec>)
 801312c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013130:	4936      	ldr	r1, [pc, #216]	; (801320c <dhcp_start+0xf0>)
 8013132:	4837      	ldr	r0, [pc, #220]	; (8013210 <dhcp_start+0xf4>)
 8013134:	f004 fa98 	bl	8017668 <iprintf>
 8013138:	f06f 030f 	mvn.w	r3, #15
 801313c:	e060      	b.n	8013200 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013144:	f003 0301 	and.w	r3, r3, #1
 8013148:	2b00      	cmp	r3, #0
 801314a:	d109      	bne.n	8013160 <dhcp_start+0x44>
 801314c:	4b2e      	ldr	r3, [pc, #184]	; (8013208 <dhcp_start+0xec>)
 801314e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013152:	4930      	ldr	r1, [pc, #192]	; (8013214 <dhcp_start+0xf8>)
 8013154:	482e      	ldr	r0, [pc, #184]	; (8013210 <dhcp_start+0xf4>)
 8013156:	f004 fa87 	bl	8017668 <iprintf>
 801315a:	f06f 030f 	mvn.w	r3, #15
 801315e:	e04f      	b.n	8013200 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013164:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801316a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801316e:	d202      	bcs.n	8013176 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013174:	e044      	b.n	8013200 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10d      	bne.n	8013198 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801317c:	2034      	movs	r0, #52	; 0x34
 801317e:	f7f7 faa7 	bl	800a6d0 <mem_malloc>
 8013182:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d102      	bne.n	8013190 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801318a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801318e:	e037      	b.n	8013200 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	68fa      	ldr	r2, [r7, #12]
 8013194:	625a      	str	r2, [r3, #36]	; 0x24
 8013196:	e005      	b.n	80131a4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	791b      	ldrb	r3, [r3, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d001      	beq.n	80131a4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80131a0:	f7ff fc92 	bl	8012ac8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80131a4:	2234      	movs	r2, #52	; 0x34
 80131a6:	2100      	movs	r1, #0
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f003 fdeb 	bl	8016d84 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80131ae:	f7ff fc39 	bl	8012a24 <dhcp_inc_pcb_refcount>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <dhcp_start+0xa2>
    return ERR_MEM;
 80131b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131bc:	e020      	b.n	8013200 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2201      	movs	r2, #1
 80131c2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80131ca:	f003 0304 	and.w	r3, r3, #4
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d105      	bne.n	80131de <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80131d2:	2102      	movs	r1, #2
 80131d4:	68f8      	ldr	r0, [r7, #12]
 80131d6:	f000 fcc5 	bl	8013b64 <dhcp_set_state>
    return ERR_OK;
 80131da:	2300      	movs	r3, #0
 80131dc:	e010      	b.n	8013200 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 f8bc 	bl	801335c <dhcp_discover>
 80131e4:	4603      	mov	r3, r0
 80131e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80131e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d005      	beq.n	80131fc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f000 fc1d 	bl	8013a30 <dhcp_release_and_stop>
    return ERR_MEM;
 80131f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131fa:	e001      	b.n	8013200 <dhcp_start+0xe4>
  }
  return result;
 80131fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013200:	4618      	mov	r0, r3
 8013202:	3710      	adds	r7, #16
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}
 8013208:	0801ef5c 	.word	0x0801ef5c
 801320c:	0801f040 	.word	0x0801f040
 8013210:	0801efbc 	.word	0x0801efbc
 8013214:	0801f084 	.word	0x0801f084

08013218 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d107      	bne.n	8013238 <dhcp_arp_reply+0x20>
 8013228:	4b0e      	ldr	r3, [pc, #56]	; (8013264 <dhcp_arp_reply+0x4c>)
 801322a:	f240 328b 	movw	r2, #907	; 0x38b
 801322e:	490e      	ldr	r1, [pc, #56]	; (8013268 <dhcp_arp_reply+0x50>)
 8013230:	480e      	ldr	r0, [pc, #56]	; (801326c <dhcp_arp_reply+0x54>)
 8013232:	f004 fa19 	bl	8017668 <iprintf>
 8013236:	e012      	b.n	801325e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00c      	beq.n	801325e <dhcp_arp_reply+0x46>
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	795b      	ldrb	r3, [r3, #5]
 8013248:	2b08      	cmp	r3, #8
 801324a:	d108      	bne.n	801325e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	69db      	ldr	r3, [r3, #28]
 8013254:	429a      	cmp	r2, r3
 8013256:	d102      	bne.n	801325e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f000 f809 	bl	8013270 <dhcp_decline>
    }
  }
}
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	0801ef5c 	.word	0x0801ef5c
 8013268:	0801f040 	.word	0x0801f040
 801326c:	0801efbc 	.word	0x0801efbc

08013270 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013270:	b5b0      	push	{r4, r5, r7, lr}
 8013272:	b08a      	sub	sp, #40	; 0x28
 8013274:	af02      	add	r7, sp, #8
 8013276:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801327c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801327e:	210c      	movs	r1, #12
 8013280:	69b8      	ldr	r0, [r7, #24]
 8013282:	f000 fc6f 	bl	8013b64 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013286:	f107 030c 	add.w	r3, r7, #12
 801328a:	2204      	movs	r2, #4
 801328c:	69b9      	ldr	r1, [r7, #24]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f001 f8f4 	bl	801447c <dhcp_create_msg>
 8013294:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d035      	beq.n	8013308 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80132a2:	89b8      	ldrh	r0, [r7, #12]
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132aa:	2304      	movs	r3, #4
 80132ac:	2232      	movs	r2, #50	; 0x32
 80132ae:	f000 fc73 	bl	8013b98 <dhcp_option>
 80132b2:	4603      	mov	r3, r0
 80132b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80132b6:	89bc      	ldrh	r4, [r7, #12]
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	69db      	ldr	r3, [r3, #28]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7f6 fe53 	bl	8009f6e <lwip_htonl>
 80132c8:	4603      	mov	r3, r0
 80132ca:	461a      	mov	r2, r3
 80132cc:	4629      	mov	r1, r5
 80132ce:	4620      	mov	r0, r4
 80132d0:	f000 fcee 	bl	8013cb0 <dhcp_option_long>
 80132d4:	4603      	mov	r3, r0
 80132d6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80132d8:	89b8      	ldrh	r0, [r7, #12]
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	33f0      	adds	r3, #240	; 0xf0
 80132de:	697a      	ldr	r2, [r7, #20]
 80132e0:	4619      	mov	r1, r3
 80132e2:	f001 f9a1 	bl	8014628 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80132e6:	4b19      	ldr	r3, [pc, #100]	; (801334c <dhcp_decline+0xdc>)
 80132e8:	6818      	ldr	r0, [r3, #0]
 80132ea:	4b19      	ldr	r3, [pc, #100]	; (8013350 <dhcp_decline+0xe0>)
 80132ec:	9301      	str	r3, [sp, #4]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	2343      	movs	r3, #67	; 0x43
 80132f4:	4a17      	ldr	r2, [pc, #92]	; (8013354 <dhcp_decline+0xe4>)
 80132f6:	6979      	ldr	r1, [r7, #20]
 80132f8:	f7ff f904 	bl	8012504 <udp_sendto_if_src>
 80132fc:	4603      	mov	r3, r0
 80132fe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013300:	6978      	ldr	r0, [r7, #20]
 8013302:	f7f8 f9b9 	bl	800b678 <pbuf_free>
 8013306:	e001      	b.n	801330c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013308:	23ff      	movs	r3, #255	; 0xff
 801330a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	799b      	ldrb	r3, [r3, #6]
 8013310:	2bff      	cmp	r3, #255	; 0xff
 8013312:	d005      	beq.n	8013320 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	799b      	ldrb	r3, [r3, #6]
 8013318:	3301      	adds	r3, #1
 801331a:	b2da      	uxtb	r2, r3
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013320:	f242 7310 	movw	r3, #10000	; 0x2710
 8013324:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013326:	89fb      	ldrh	r3, [r7, #14]
 8013328:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801332c:	4a0a      	ldr	r2, [pc, #40]	; (8013358 <dhcp_decline+0xe8>)
 801332e:	fb82 1203 	smull	r1, r2, r2, r3
 8013332:	1152      	asrs	r2, r2, #5
 8013334:	17db      	asrs	r3, r3, #31
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	b29a      	uxth	r2, r3
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801333e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3720      	adds	r7, #32
 8013346:	46bd      	mov	sp, r7
 8013348:	bdb0      	pop	{r4, r5, r7, pc}
 801334a:	bf00      	nop
 801334c:	20001258 	.word	0x20001258
 8013350:	08033a18 	.word	0x08033a18
 8013354:	08033a1c 	.word	0x08033a1c
 8013358:	10624dd3 	.word	0x10624dd3

0801335c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b08a      	sub	sp, #40	; 0x28
 8013360:	af02      	add	r7, sp, #8
 8013362:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013368:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801336a:	2300      	movs	r3, #0
 801336c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	2200      	movs	r2, #0
 8013372:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013374:	2106      	movs	r1, #6
 8013376:	69b8      	ldr	r0, [r7, #24]
 8013378:	f000 fbf4 	bl	8013b64 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801337c:	f107 0308 	add.w	r3, r7, #8
 8013380:	2201      	movs	r2, #1
 8013382:	69b9      	ldr	r1, [r7, #24]
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f001 f879 	bl	801447c <dhcp_create_msg>
 801338a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d04b      	beq.n	801342a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013398:	8938      	ldrh	r0, [r7, #8]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133a0:	2302      	movs	r3, #2
 80133a2:	2239      	movs	r2, #57	; 0x39
 80133a4:	f000 fbf8 	bl	8013b98 <dhcp_option>
 80133a8:	4603      	mov	r3, r0
 80133aa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80133ac:	8938      	ldrh	r0, [r7, #8]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133b8:	461a      	mov	r2, r3
 80133ba:	f000 fc47 	bl	8013c4c <dhcp_option_short>
 80133be:	4603      	mov	r3, r0
 80133c0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80133c2:	8938      	ldrh	r0, [r7, #8]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133ca:	2303      	movs	r3, #3
 80133cc:	2237      	movs	r2, #55	; 0x37
 80133ce:	f000 fbe3 	bl	8013b98 <dhcp_option>
 80133d2:	4603      	mov	r3, r0
 80133d4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133d6:	2300      	movs	r3, #0
 80133d8:	77fb      	strb	r3, [r7, #31]
 80133da:	e00e      	b.n	80133fa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80133dc:	8938      	ldrh	r0, [r7, #8]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133e4:	7ffb      	ldrb	r3, [r7, #31]
 80133e6:	4a29      	ldr	r2, [pc, #164]	; (801348c <dhcp_discover+0x130>)
 80133e8:	5cd3      	ldrb	r3, [r2, r3]
 80133ea:	461a      	mov	r2, r3
 80133ec:	f000 fc08 	bl	8013c00 <dhcp_option_byte>
 80133f0:	4603      	mov	r3, r0
 80133f2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133f4:	7ffb      	ldrb	r3, [r7, #31]
 80133f6:	3301      	adds	r3, #1
 80133f8:	77fb      	strb	r3, [r7, #31]
 80133fa:	7ffb      	ldrb	r3, [r7, #31]
 80133fc:	2b02      	cmp	r3, #2
 80133fe:	d9ed      	bls.n	80133dc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013400:	8938      	ldrh	r0, [r7, #8]
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	33f0      	adds	r3, #240	; 0xf0
 8013406:	693a      	ldr	r2, [r7, #16]
 8013408:	4619      	mov	r1, r3
 801340a:	f001 f90d 	bl	8014628 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801340e:	4b20      	ldr	r3, [pc, #128]	; (8013490 <dhcp_discover+0x134>)
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	4b20      	ldr	r3, [pc, #128]	; (8013494 <dhcp_discover+0x138>)
 8013414:	9301      	str	r3, [sp, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	2343      	movs	r3, #67	; 0x43
 801341c:	4a1e      	ldr	r2, [pc, #120]	; (8013498 <dhcp_discover+0x13c>)
 801341e:	6939      	ldr	r1, [r7, #16]
 8013420:	f7ff f870 	bl	8012504 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013424:	6938      	ldr	r0, [r7, #16]
 8013426:	f7f8 f927 	bl	800b678 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	799b      	ldrb	r3, [r3, #6]
 801342e:	2bff      	cmp	r3, #255	; 0xff
 8013430:	d005      	beq.n	801343e <dhcp_discover+0xe2>
    dhcp->tries++;
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	799b      	ldrb	r3, [r3, #6]
 8013436:	3301      	adds	r3, #1
 8013438:	b2da      	uxtb	r2, r3
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	799b      	ldrb	r3, [r3, #6]
 8013442:	2b05      	cmp	r3, #5
 8013444:	d80d      	bhi.n	8013462 <dhcp_discover+0x106>
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	799b      	ldrb	r3, [r3, #6]
 801344a:	461a      	mov	r2, r3
 801344c:	2301      	movs	r3, #1
 801344e:	4093      	lsls	r3, r2
 8013450:	b29b      	uxth	r3, r3
 8013452:	461a      	mov	r2, r3
 8013454:	0152      	lsls	r2, r2, #5
 8013456:	1ad2      	subs	r2, r2, r3
 8013458:	0092      	lsls	r2, r2, #2
 801345a:	4413      	add	r3, r2
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	b29b      	uxth	r3, r3
 8013460:	e001      	b.n	8013466 <dhcp_discover+0x10a>
 8013462:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013466:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013468:	897b      	ldrh	r3, [r7, #10]
 801346a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801346e:	4a0b      	ldr	r2, [pc, #44]	; (801349c <dhcp_discover+0x140>)
 8013470:	fb82 1203 	smull	r1, r2, r2, r3
 8013474:	1152      	asrs	r2, r2, #5
 8013476:	17db      	asrs	r3, r3, #31
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	b29a      	uxth	r2, r3
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013484:	4618      	mov	r0, r3
 8013486:	3720      	adds	r7, #32
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	200005c8 	.word	0x200005c8
 8013490:	20001258 	.word	0x20001258
 8013494:	08033a18 	.word	0x08033a18
 8013498:	08033a1c 	.word	0x08033a1c
 801349c:	10624dd3 	.word	0x10624dd3

080134a0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b088      	sub	sp, #32
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d107      	bne.n	80134be <dhcp_bind+0x1e>
 80134ae:	4b64      	ldr	r3, [pc, #400]	; (8013640 <dhcp_bind+0x1a0>)
 80134b0:	f240 4215 	movw	r2, #1045	; 0x415
 80134b4:	4963      	ldr	r1, [pc, #396]	; (8013644 <dhcp_bind+0x1a4>)
 80134b6:	4864      	ldr	r0, [pc, #400]	; (8013648 <dhcp_bind+0x1a8>)
 80134b8:	f004 f8d6 	bl	8017668 <iprintf>
 80134bc:	e0bc      	b.n	8013638 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134c2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d107      	bne.n	80134da <dhcp_bind+0x3a>
 80134ca:	4b5d      	ldr	r3, [pc, #372]	; (8013640 <dhcp_bind+0x1a0>)
 80134cc:	f240 4217 	movw	r2, #1047	; 0x417
 80134d0:	495e      	ldr	r1, [pc, #376]	; (801364c <dhcp_bind+0x1ac>)
 80134d2:	485d      	ldr	r0, [pc, #372]	; (8013648 <dhcp_bind+0x1a8>)
 80134d4:	f004 f8c8 	bl	8017668 <iprintf>
 80134d8:	e0ae      	b.n	8013638 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	2200      	movs	r2, #0
 80134de:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134e8:	d019      	beq.n	801351e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ee:	331e      	adds	r3, #30
 80134f0:	4a57      	ldr	r2, [pc, #348]	; (8013650 <dhcp_bind+0x1b0>)
 80134f2:	fba2 2303 	umull	r2, r3, r2, r3
 80134f6:	095b      	lsrs	r3, r3, #5
 80134f8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80134fa:	69fb      	ldr	r3, [r7, #28]
 80134fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013500:	d302      	bcc.n	8013508 <dhcp_bind+0x68>
      timeout = 0xffff;
 8013502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013506:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	b29a      	uxth	r2, r3
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	8a9b      	ldrh	r3, [r3, #20]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013518:	69bb      	ldr	r3, [r7, #24]
 801351a:	2201      	movs	r2, #1
 801351c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013526:	d01d      	beq.n	8013564 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801352c:	331e      	adds	r3, #30
 801352e:	4a48      	ldr	r2, [pc, #288]	; (8013650 <dhcp_bind+0x1b0>)
 8013530:	fba2 2303 	umull	r2, r3, r2, r3
 8013534:	095b      	lsrs	r3, r3, #5
 8013536:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801353e:	d302      	bcc.n	8013546 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013544:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	b29a      	uxth	r2, r3
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	895b      	ldrh	r3, [r3, #10]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d102      	bne.n	801355c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	2201      	movs	r2, #1
 801355a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	895a      	ldrh	r2, [r3, #10]
 8013560:	69bb      	ldr	r3, [r7, #24]
 8013562:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801356c:	d01d      	beq.n	80135aa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013572:	331e      	adds	r3, #30
 8013574:	4a36      	ldr	r2, [pc, #216]	; (8013650 <dhcp_bind+0x1b0>)
 8013576:	fba2 2303 	umull	r2, r3, r2, r3
 801357a:	095b      	lsrs	r3, r3, #5
 801357c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013584:	d302      	bcc.n	801358c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801358a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	b29a      	uxth	r2, r3
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	899b      	ldrh	r3, [r3, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d102      	bne.n	80135a2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	2201      	movs	r2, #1
 80135a0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	899a      	ldrh	r2, [r3, #12]
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	895a      	ldrh	r2, [r3, #10]
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	899b      	ldrh	r3, [r3, #12]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d306      	bcc.n	80135c4 <dhcp_bind+0x124>
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	899b      	ldrh	r3, [r3, #12]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d002      	beq.n	80135c4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	2200      	movs	r2, #0
 80135c2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	79db      	ldrb	r3, [r3, #7]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d003      	beq.n	80135d4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	6a1b      	ldr	r3, [r3, #32]
 80135d0:	613b      	str	r3, [r7, #16]
 80135d2:	e014      	b.n	80135fe <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	331c      	adds	r3, #28
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80135dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	db02      	blt.n	80135ea <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80135e4:	23ff      	movs	r3, #255	; 0xff
 80135e6:	613b      	str	r3, [r7, #16]
 80135e8:	e009      	b.n	80135fe <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80135ea:	7dfb      	ldrb	r3, [r7, #23]
 80135ec:	2bbf      	cmp	r3, #191	; 0xbf
 80135ee:	d903      	bls.n	80135f8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80135f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80135f4:	613b      	str	r3, [r7, #16]
 80135f6:	e002      	b.n	80135fe <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80135f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135fc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013602:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d108      	bne.n	801361c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	69da      	ldr	r2, [r3, #28]
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	4013      	ands	r3, r2
 8013612:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801361a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801361c:	210a      	movs	r1, #10
 801361e:	69b8      	ldr	r0, [r7, #24]
 8013620:	f000 faa0 	bl	8013b64 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	f103 011c 	add.w	r1, r3, #28
 801362a:	f107 030c 	add.w	r3, r7, #12
 801362e:	f107 0210 	add.w	r2, r7, #16
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7f7 fba8 	bl	800ad88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013638:	3720      	adds	r7, #32
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	0801ef5c 	.word	0x0801ef5c
 8013644:	0801f0bc 	.word	0x0801f0bc
 8013648:	0801efbc 	.word	0x0801efbc
 801364c:	0801f0d8 	.word	0x0801f0d8
 8013650:	88888889 	.word	0x88888889

08013654 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08a      	sub	sp, #40	; 0x28
 8013658:	af02      	add	r7, sp, #8
 801365a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013660:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013662:	2105      	movs	r1, #5
 8013664:	69b8      	ldr	r0, [r7, #24]
 8013666:	f000 fa7d 	bl	8013b64 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801366a:	f107 030c 	add.w	r3, r7, #12
 801366e:	2203      	movs	r2, #3
 8013670:	69b9      	ldr	r1, [r7, #24]
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f000 ff02 	bl	801447c <dhcp_create_msg>
 8013678:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d04e      	beq.n	801371e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013686:	89b8      	ldrh	r0, [r7, #12]
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801368e:	2302      	movs	r3, #2
 8013690:	2239      	movs	r2, #57	; 0x39
 8013692:	f000 fa81 	bl	8013b98 <dhcp_option>
 8013696:	4603      	mov	r3, r0
 8013698:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801369a:	89b8      	ldrh	r0, [r7, #12]
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136a6:	461a      	mov	r2, r3
 80136a8:	f000 fad0 	bl	8013c4c <dhcp_option_short>
 80136ac:	4603      	mov	r3, r0
 80136ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80136b0:	89b8      	ldrh	r0, [r7, #12]
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136b8:	2303      	movs	r3, #3
 80136ba:	2237      	movs	r2, #55	; 0x37
 80136bc:	f000 fa6c 	bl	8013b98 <dhcp_option>
 80136c0:	4603      	mov	r3, r0
 80136c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80136c4:	2300      	movs	r3, #0
 80136c6:	77bb      	strb	r3, [r7, #30]
 80136c8:	e00e      	b.n	80136e8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80136ca:	89b8      	ldrh	r0, [r7, #12]
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136d2:	7fbb      	ldrb	r3, [r7, #30]
 80136d4:	4a2a      	ldr	r2, [pc, #168]	; (8013780 <dhcp_renew+0x12c>)
 80136d6:	5cd3      	ldrb	r3, [r2, r3]
 80136d8:	461a      	mov	r2, r3
 80136da:	f000 fa91 	bl	8013c00 <dhcp_option_byte>
 80136de:	4603      	mov	r3, r0
 80136e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80136e2:	7fbb      	ldrb	r3, [r7, #30]
 80136e4:	3301      	adds	r3, #1
 80136e6:	77bb      	strb	r3, [r7, #30]
 80136e8:	7fbb      	ldrb	r3, [r7, #30]
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	d9ed      	bls.n	80136ca <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80136ee:	89b8      	ldrh	r0, [r7, #12]
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	33f0      	adds	r3, #240	; 0xf0
 80136f4:	697a      	ldr	r2, [r7, #20]
 80136f6:	4619      	mov	r1, r3
 80136f8:	f000 ff96 	bl	8014628 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80136fc:	4b21      	ldr	r3, [pc, #132]	; (8013784 <dhcp_renew+0x130>)
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	f103 0218 	add.w	r2, r3, #24
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	2343      	movs	r3, #67	; 0x43
 801370c:	6979      	ldr	r1, [r7, #20]
 801370e:	f7fe fe85 	bl	801241c <udp_sendto_if>
 8013712:	4603      	mov	r3, r0
 8013714:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013716:	6978      	ldr	r0, [r7, #20]
 8013718:	f7f7 ffae 	bl	800b678 <pbuf_free>
 801371c:	e001      	b.n	8013722 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801371e:	23ff      	movs	r3, #255	; 0xff
 8013720:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	799b      	ldrb	r3, [r3, #6]
 8013726:	2bff      	cmp	r3, #255	; 0xff
 8013728:	d005      	beq.n	8013736 <dhcp_renew+0xe2>
    dhcp->tries++;
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	799b      	ldrb	r3, [r3, #6]
 801372e:	3301      	adds	r3, #1
 8013730:	b2da      	uxtb	r2, r3
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	799b      	ldrb	r3, [r3, #6]
 801373a:	2b09      	cmp	r3, #9
 801373c:	d80a      	bhi.n	8013754 <dhcp_renew+0x100>
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	799b      	ldrb	r3, [r3, #6]
 8013742:	b29b      	uxth	r3, r3
 8013744:	461a      	mov	r2, r3
 8013746:	0152      	lsls	r2, r2, #5
 8013748:	1ad2      	subs	r2, r2, r3
 801374a:	0092      	lsls	r2, r2, #2
 801374c:	4413      	add	r3, r2
 801374e:	011b      	lsls	r3, r3, #4
 8013750:	b29b      	uxth	r3, r3
 8013752:	e001      	b.n	8013758 <dhcp_renew+0x104>
 8013754:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013758:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801375a:	89fb      	ldrh	r3, [r7, #14]
 801375c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013760:	4a09      	ldr	r2, [pc, #36]	; (8013788 <dhcp_renew+0x134>)
 8013762:	fb82 1203 	smull	r1, r2, r2, r3
 8013766:	1152      	asrs	r2, r2, #5
 8013768:	17db      	asrs	r3, r3, #31
 801376a:	1ad3      	subs	r3, r2, r3
 801376c:	b29a      	uxth	r2, r3
 801376e:	69bb      	ldr	r3, [r7, #24]
 8013770:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013772:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013776:	4618      	mov	r0, r3
 8013778:	3720      	adds	r7, #32
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	200005c8 	.word	0x200005c8
 8013784:	20001258 	.word	0x20001258
 8013788:	10624dd3 	.word	0x10624dd3

0801378c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08a      	sub	sp, #40	; 0x28
 8013790:	af02      	add	r7, sp, #8
 8013792:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013798:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801379a:	2104      	movs	r1, #4
 801379c:	69b8      	ldr	r0, [r7, #24]
 801379e:	f000 f9e1 	bl	8013b64 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80137a2:	f107 030c 	add.w	r3, r7, #12
 80137a6:	2203      	movs	r2, #3
 80137a8:	69b9      	ldr	r1, [r7, #24]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fe66 	bl	801447c <dhcp_create_msg>
 80137b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d04c      	beq.n	8013852 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80137be:	89b8      	ldrh	r0, [r7, #12]
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137c6:	2302      	movs	r3, #2
 80137c8:	2239      	movs	r2, #57	; 0x39
 80137ca:	f000 f9e5 	bl	8013b98 <dhcp_option>
 80137ce:	4603      	mov	r3, r0
 80137d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80137d2:	89b8      	ldrh	r0, [r7, #12]
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137de:	461a      	mov	r2, r3
 80137e0:	f000 fa34 	bl	8013c4c <dhcp_option_short>
 80137e4:	4603      	mov	r3, r0
 80137e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80137e8:	89b8      	ldrh	r0, [r7, #12]
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137f0:	2303      	movs	r3, #3
 80137f2:	2237      	movs	r2, #55	; 0x37
 80137f4:	f000 f9d0 	bl	8013b98 <dhcp_option>
 80137f8:	4603      	mov	r3, r0
 80137fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137fc:	2300      	movs	r3, #0
 80137fe:	77bb      	strb	r3, [r7, #30]
 8013800:	e00e      	b.n	8013820 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013802:	89b8      	ldrh	r0, [r7, #12]
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801380a:	7fbb      	ldrb	r3, [r7, #30]
 801380c:	4a29      	ldr	r2, [pc, #164]	; (80138b4 <dhcp_rebind+0x128>)
 801380e:	5cd3      	ldrb	r3, [r2, r3]
 8013810:	461a      	mov	r2, r3
 8013812:	f000 f9f5 	bl	8013c00 <dhcp_option_byte>
 8013816:	4603      	mov	r3, r0
 8013818:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801381a:	7fbb      	ldrb	r3, [r7, #30]
 801381c:	3301      	adds	r3, #1
 801381e:	77bb      	strb	r3, [r7, #30]
 8013820:	7fbb      	ldrb	r3, [r7, #30]
 8013822:	2b02      	cmp	r3, #2
 8013824:	d9ed      	bls.n	8013802 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013826:	89b8      	ldrh	r0, [r7, #12]
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	33f0      	adds	r3, #240	; 0xf0
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	4619      	mov	r1, r3
 8013830:	f000 fefa 	bl	8014628 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013834:	4b20      	ldr	r3, [pc, #128]	; (80138b8 <dhcp_rebind+0x12c>)
 8013836:	6818      	ldr	r0, [r3, #0]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	2343      	movs	r3, #67	; 0x43
 801383e:	4a1f      	ldr	r2, [pc, #124]	; (80138bc <dhcp_rebind+0x130>)
 8013840:	6979      	ldr	r1, [r7, #20]
 8013842:	f7fe fdeb 	bl	801241c <udp_sendto_if>
 8013846:	4603      	mov	r3, r0
 8013848:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801384a:	6978      	ldr	r0, [r7, #20]
 801384c:	f7f7 ff14 	bl	800b678 <pbuf_free>
 8013850:	e001      	b.n	8013856 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013852:	23ff      	movs	r3, #255	; 0xff
 8013854:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	799b      	ldrb	r3, [r3, #6]
 801385a:	2bff      	cmp	r3, #255	; 0xff
 801385c:	d005      	beq.n	801386a <dhcp_rebind+0xde>
    dhcp->tries++;
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	799b      	ldrb	r3, [r3, #6]
 8013862:	3301      	adds	r3, #1
 8013864:	b2da      	uxtb	r2, r3
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	799b      	ldrb	r3, [r3, #6]
 801386e:	2b09      	cmp	r3, #9
 8013870:	d80a      	bhi.n	8013888 <dhcp_rebind+0xfc>
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	799b      	ldrb	r3, [r3, #6]
 8013876:	b29b      	uxth	r3, r3
 8013878:	461a      	mov	r2, r3
 801387a:	0152      	lsls	r2, r2, #5
 801387c:	1ad2      	subs	r2, r2, r3
 801387e:	0092      	lsls	r2, r2, #2
 8013880:	4413      	add	r3, r2
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	b29b      	uxth	r3, r3
 8013886:	e001      	b.n	801388c <dhcp_rebind+0x100>
 8013888:	f242 7310 	movw	r3, #10000	; 0x2710
 801388c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801388e:	89fb      	ldrh	r3, [r7, #14]
 8013890:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013894:	4a0a      	ldr	r2, [pc, #40]	; (80138c0 <dhcp_rebind+0x134>)
 8013896:	fb82 1203 	smull	r1, r2, r2, r3
 801389a:	1152      	asrs	r2, r2, #5
 801389c:	17db      	asrs	r3, r3, #31
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80138a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3720      	adds	r7, #32
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	200005c8 	.word	0x200005c8
 80138b8:	20001258 	.word	0x20001258
 80138bc:	08033a1c 	.word	0x08033a1c
 80138c0:	10624dd3 	.word	0x10624dd3

080138c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80138c4:	b5b0      	push	{r4, r5, r7, lr}
 80138c6:	b08a      	sub	sp, #40	; 0x28
 80138c8:	af02      	add	r7, sp, #8
 80138ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80138d2:	2103      	movs	r1, #3
 80138d4:	69b8      	ldr	r0, [r7, #24]
 80138d6:	f000 f945 	bl	8013b64 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80138da:	f107 030c 	add.w	r3, r7, #12
 80138de:	2203      	movs	r2, #3
 80138e0:	69b9      	ldr	r1, [r7, #24]
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 fdca 	bl	801447c <dhcp_create_msg>
 80138e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d066      	beq.n	80139be <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80138f6:	89b8      	ldrh	r0, [r7, #12]
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138fe:	2302      	movs	r3, #2
 8013900:	2239      	movs	r2, #57	; 0x39
 8013902:	f000 f949 	bl	8013b98 <dhcp_option>
 8013906:	4603      	mov	r3, r0
 8013908:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801390a:	89b8      	ldrh	r0, [r7, #12]
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	33f0      	adds	r3, #240	; 0xf0
 8013910:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013914:	4619      	mov	r1, r3
 8013916:	f000 f999 	bl	8013c4c <dhcp_option_short>
 801391a:	4603      	mov	r3, r0
 801391c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801391e:	89b8      	ldrh	r0, [r7, #12]
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013926:	2304      	movs	r3, #4
 8013928:	2232      	movs	r2, #50	; 0x32
 801392a:	f000 f935 	bl	8013b98 <dhcp_option>
 801392e:	4603      	mov	r3, r0
 8013930:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013932:	89bc      	ldrh	r4, [r7, #12]
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	69db      	ldr	r3, [r3, #28]
 801393e:	4618      	mov	r0, r3
 8013940:	f7f6 fb15 	bl	8009f6e <lwip_htonl>
 8013944:	4603      	mov	r3, r0
 8013946:	461a      	mov	r2, r3
 8013948:	4629      	mov	r1, r5
 801394a:	4620      	mov	r0, r4
 801394c:	f000 f9b0 	bl	8013cb0 <dhcp_option_long>
 8013950:	4603      	mov	r3, r0
 8013952:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013954:	89b8      	ldrh	r0, [r7, #12]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801395c:	2303      	movs	r3, #3
 801395e:	2237      	movs	r2, #55	; 0x37
 8013960:	f000 f91a 	bl	8013b98 <dhcp_option>
 8013964:	4603      	mov	r3, r0
 8013966:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013968:	2300      	movs	r3, #0
 801396a:	77bb      	strb	r3, [r7, #30]
 801396c:	e00e      	b.n	801398c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801396e:	89b8      	ldrh	r0, [r7, #12]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013976:	7fbb      	ldrb	r3, [r7, #30]
 8013978:	4a29      	ldr	r2, [pc, #164]	; (8013a20 <dhcp_reboot+0x15c>)
 801397a:	5cd3      	ldrb	r3, [r2, r3]
 801397c:	461a      	mov	r2, r3
 801397e:	f000 f93f 	bl	8013c00 <dhcp_option_byte>
 8013982:	4603      	mov	r3, r0
 8013984:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013986:	7fbb      	ldrb	r3, [r7, #30]
 8013988:	3301      	adds	r3, #1
 801398a:	77bb      	strb	r3, [r7, #30]
 801398c:	7fbb      	ldrb	r3, [r7, #30]
 801398e:	2b02      	cmp	r3, #2
 8013990:	d9ed      	bls.n	801396e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013992:	89b8      	ldrh	r0, [r7, #12]
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	33f0      	adds	r3, #240	; 0xf0
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	4619      	mov	r1, r3
 801399c:	f000 fe44 	bl	8014628 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80139a0:	4b20      	ldr	r3, [pc, #128]	; (8013a24 <dhcp_reboot+0x160>)
 80139a2:	6818      	ldr	r0, [r3, #0]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	9300      	str	r3, [sp, #0]
 80139a8:	2343      	movs	r3, #67	; 0x43
 80139aa:	4a1f      	ldr	r2, [pc, #124]	; (8013a28 <dhcp_reboot+0x164>)
 80139ac:	6979      	ldr	r1, [r7, #20]
 80139ae:	f7fe fd35 	bl	801241c <udp_sendto_if>
 80139b2:	4603      	mov	r3, r0
 80139b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80139b6:	6978      	ldr	r0, [r7, #20]
 80139b8:	f7f7 fe5e 	bl	800b678 <pbuf_free>
 80139bc:	e001      	b.n	80139c2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80139be:	23ff      	movs	r3, #255	; 0xff
 80139c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80139c2:	69bb      	ldr	r3, [r7, #24]
 80139c4:	799b      	ldrb	r3, [r3, #6]
 80139c6:	2bff      	cmp	r3, #255	; 0xff
 80139c8:	d005      	beq.n	80139d6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80139ca:	69bb      	ldr	r3, [r7, #24]
 80139cc:	799b      	ldrb	r3, [r3, #6]
 80139ce:	3301      	adds	r3, #1
 80139d0:	b2da      	uxtb	r2, r3
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80139d6:	69bb      	ldr	r3, [r7, #24]
 80139d8:	799b      	ldrb	r3, [r3, #6]
 80139da:	2b09      	cmp	r3, #9
 80139dc:	d80a      	bhi.n	80139f4 <dhcp_reboot+0x130>
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	799b      	ldrb	r3, [r3, #6]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	461a      	mov	r2, r3
 80139e6:	0152      	lsls	r2, r2, #5
 80139e8:	1ad2      	subs	r2, r2, r3
 80139ea:	0092      	lsls	r2, r2, #2
 80139ec:	4413      	add	r3, r2
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	e001      	b.n	80139f8 <dhcp_reboot+0x134>
 80139f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80139f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80139fa:	89fb      	ldrh	r3, [r7, #14]
 80139fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013a00:	4a0a      	ldr	r2, [pc, #40]	; (8013a2c <dhcp_reboot+0x168>)
 8013a02:	fb82 1203 	smull	r1, r2, r2, r3
 8013a06:	1152      	asrs	r2, r2, #5
 8013a08:	17db      	asrs	r3, r3, #31
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3720      	adds	r7, #32
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	200005c8 	.word	0x200005c8
 8013a24:	20001258 	.word	0x20001258
 8013a28:	08033a1c 	.word	0x08033a1c
 8013a2c:	10624dd3 	.word	0x10624dd3

08013a30 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013a30:	b5b0      	push	{r4, r5, r7, lr}
 8013a32:	b08a      	sub	sp, #40	; 0x28
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a3c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f000 8084 	beq.w	8013b4e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	795b      	ldrb	r3, [r3, #5]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f000 8081 	beq.w	8013b52 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	2200      	movs	r2, #0
 8013a5a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	2200      	movs	r2, #0
 8013a66:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	2200      	movs	r2, #0
 8013a72:	631a      	str	r2, [r3, #48]	; 0x30
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	2200      	movs	r2, #0
 8013a88:	829a      	strh	r2, [r3, #20]
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	8a9a      	ldrh	r2, [r3, #20]
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	825a      	strh	r2, [r3, #18]
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	8a5a      	ldrh	r2, [r3, #18]
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	821a      	strh	r2, [r3, #16]
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	8a1a      	ldrh	r2, [r3, #16]
 8013a9e:	69fb      	ldr	r3, [r7, #28]
 8013aa0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 fdee 	bl	8014684 <dhcp_supplied_address>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d03b      	beq.n	8013b26 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013aae:	f107 030e 	add.w	r3, r7, #14
 8013ab2:	2207      	movs	r2, #7
 8013ab4:	69f9      	ldr	r1, [r7, #28]
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f000 fce0 	bl	801447c <dhcp_create_msg>
 8013abc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d030      	beq.n	8013b26 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013aca:	89f8      	ldrh	r0, [r7, #14]
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ad2:	2304      	movs	r3, #4
 8013ad4:	2236      	movs	r2, #54	; 0x36
 8013ad6:	f000 f85f 	bl	8013b98 <dhcp_option>
 8013ada:	4603      	mov	r3, r0
 8013adc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013ade:	89fc      	ldrh	r4, [r7, #14]
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7f6 fa40 	bl	8009f6e <lwip_htonl>
 8013aee:	4603      	mov	r3, r0
 8013af0:	461a      	mov	r2, r3
 8013af2:	4629      	mov	r1, r5
 8013af4:	4620      	mov	r0, r4
 8013af6:	f000 f8db 	bl	8013cb0 <dhcp_option_long>
 8013afa:	4603      	mov	r3, r0
 8013afc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013afe:	89f8      	ldrh	r0, [r7, #14]
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	33f0      	adds	r3, #240	; 0xf0
 8013b04:	69ba      	ldr	r2, [r7, #24]
 8013b06:	4619      	mov	r1, r3
 8013b08:	f000 fd8e 	bl	8014628 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013b0c:	4b13      	ldr	r3, [pc, #76]	; (8013b5c <dhcp_release_and_stop+0x12c>)
 8013b0e:	6818      	ldr	r0, [r3, #0]
 8013b10:	f107 0210 	add.w	r2, r7, #16
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	2343      	movs	r3, #67	; 0x43
 8013b1a:	69b9      	ldr	r1, [r7, #24]
 8013b1c:	f7fe fc7e 	bl	801241c <udp_sendto_if>
      pbuf_free(p_out);
 8013b20:	69b8      	ldr	r0, [r7, #24]
 8013b22:	f7f7 fda9 	bl	800b678 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013b26:	4b0e      	ldr	r3, [pc, #56]	; (8013b60 <dhcp_release_and_stop+0x130>)
 8013b28:	4a0d      	ldr	r2, [pc, #52]	; (8013b60 <dhcp_release_and_stop+0x130>)
 8013b2a:	490d      	ldr	r1, [pc, #52]	; (8013b60 <dhcp_release_and_stop+0x130>)
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7f7 f92b 	bl	800ad88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013b32:	2100      	movs	r1, #0
 8013b34:	69f8      	ldr	r0, [r7, #28]
 8013b36:	f000 f815 	bl	8013b64 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013b3a:	69fb      	ldr	r3, [r7, #28]
 8013b3c:	791b      	ldrb	r3, [r3, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d008      	beq.n	8013b54 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013b42:	f7fe ffc1 	bl	8012ac8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	711a      	strb	r2, [r3, #4]
 8013b4c:	e002      	b.n	8013b54 <dhcp_release_and_stop+0x124>
    return;
 8013b4e:	bf00      	nop
 8013b50:	e000      	b.n	8013b54 <dhcp_release_and_stop+0x124>
    return;
 8013b52:	bf00      	nop
  }
}
 8013b54:	3720      	adds	r7, #32
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bdb0      	pop	{r4, r5, r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	20001258 	.word	0x20001258
 8013b60:	08033a18 	.word	0x08033a18

08013b64 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	795b      	ldrb	r3, [r3, #5]
 8013b74:	78fa      	ldrb	r2, [r7, #3]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d008      	beq.n	8013b8c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	78fa      	ldrb	r2, [r7, #3]
 8013b7e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	811a      	strh	r2, [r3, #8]
  }
}
 8013b8c:	bf00      	nop
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6039      	str	r1, [r7, #0]
 8013ba0:	4611      	mov	r1, r2
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	80fb      	strh	r3, [r7, #6]
 8013ba8:	460b      	mov	r3, r1
 8013baa:	717b      	strb	r3, [r7, #5]
 8013bac:	4613      	mov	r3, r2
 8013bae:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013bb0:	88fa      	ldrh	r2, [r7, #6]
 8013bb2:	793b      	ldrb	r3, [r7, #4]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	3302      	adds	r3, #2
 8013bb8:	2b44      	cmp	r3, #68	; 0x44
 8013bba:	d906      	bls.n	8013bca <dhcp_option+0x32>
 8013bbc:	4b0d      	ldr	r3, [pc, #52]	; (8013bf4 <dhcp_option+0x5c>)
 8013bbe:	f240 529a 	movw	r2, #1434	; 0x59a
 8013bc2:	490d      	ldr	r1, [pc, #52]	; (8013bf8 <dhcp_option+0x60>)
 8013bc4:	480d      	ldr	r0, [pc, #52]	; (8013bfc <dhcp_option+0x64>)
 8013bc6:	f003 fd4f 	bl	8017668 <iprintf>
  options[options_out_len++] = option_type;
 8013bca:	88fb      	ldrh	r3, [r7, #6]
 8013bcc:	1c5a      	adds	r2, r3, #1
 8013bce:	80fa      	strh	r2, [r7, #6]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	797a      	ldrb	r2, [r7, #5]
 8013bd8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013bda:	88fb      	ldrh	r3, [r7, #6]
 8013bdc:	1c5a      	adds	r2, r3, #1
 8013bde:	80fa      	strh	r2, [r7, #6]
 8013be0:	461a      	mov	r2, r3
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	4413      	add	r3, r2
 8013be6:	793a      	ldrb	r2, [r7, #4]
 8013be8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013bea:	88fb      	ldrh	r3, [r7, #6]
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	0801ef5c 	.word	0x0801ef5c
 8013bf8:	0801f0f0 	.word	0x0801f0f0
 8013bfc:	0801efbc 	.word	0x0801efbc

08013c00 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b082      	sub	sp, #8
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	6039      	str	r1, [r7, #0]
 8013c0a:	80fb      	strh	r3, [r7, #6]
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013c10:	88fb      	ldrh	r3, [r7, #6]
 8013c12:	2b43      	cmp	r3, #67	; 0x43
 8013c14:	d906      	bls.n	8013c24 <dhcp_option_byte+0x24>
 8013c16:	4b0a      	ldr	r3, [pc, #40]	; (8013c40 <dhcp_option_byte+0x40>)
 8013c18:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013c1c:	4909      	ldr	r1, [pc, #36]	; (8013c44 <dhcp_option_byte+0x44>)
 8013c1e:	480a      	ldr	r0, [pc, #40]	; (8013c48 <dhcp_option_byte+0x48>)
 8013c20:	f003 fd22 	bl	8017668 <iprintf>
  options[options_out_len++] = value;
 8013c24:	88fb      	ldrh	r3, [r7, #6]
 8013c26:	1c5a      	adds	r2, r3, #1
 8013c28:	80fa      	strh	r2, [r7, #6]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	4413      	add	r3, r2
 8013c30:	797a      	ldrb	r2, [r7, #5]
 8013c32:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013c34:	88fb      	ldrh	r3, [r7, #6]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3708      	adds	r7, #8
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	0801ef5c 	.word	0x0801ef5c
 8013c44:	0801f134 	.word	0x0801f134
 8013c48:	0801efbc 	.word	0x0801efbc

08013c4c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	4603      	mov	r3, r0
 8013c54:	6039      	str	r1, [r7, #0]
 8013c56:	80fb      	strh	r3, [r7, #6]
 8013c58:	4613      	mov	r3, r2
 8013c5a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013c5c:	88fb      	ldrh	r3, [r7, #6]
 8013c5e:	3302      	adds	r3, #2
 8013c60:	2b44      	cmp	r3, #68	; 0x44
 8013c62:	d906      	bls.n	8013c72 <dhcp_option_short+0x26>
 8013c64:	4b0f      	ldr	r3, [pc, #60]	; (8013ca4 <dhcp_option_short+0x58>)
 8013c66:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013c6a:	490f      	ldr	r1, [pc, #60]	; (8013ca8 <dhcp_option_short+0x5c>)
 8013c6c:	480f      	ldr	r0, [pc, #60]	; (8013cac <dhcp_option_short+0x60>)
 8013c6e:	f003 fcfb 	bl	8017668 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013c72:	88bb      	ldrh	r3, [r7, #4]
 8013c74:	0a1b      	lsrs	r3, r3, #8
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	88fb      	ldrh	r3, [r7, #6]
 8013c7a:	1c59      	adds	r1, r3, #1
 8013c7c:	80f9      	strh	r1, [r7, #6]
 8013c7e:	4619      	mov	r1, r3
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	440b      	add	r3, r1
 8013c84:	b2d2      	uxtb	r2, r2
 8013c86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013c88:	88fb      	ldrh	r3, [r7, #6]
 8013c8a:	1c5a      	adds	r2, r3, #1
 8013c8c:	80fa      	strh	r2, [r7, #6]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	4413      	add	r3, r2
 8013c94:	88ba      	ldrh	r2, [r7, #4]
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013c9a:	88fb      	ldrh	r3, [r7, #6]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}
 8013ca4:	0801ef5c 	.word	0x0801ef5c
 8013ca8:	0801f16c 	.word	0x0801f16c
 8013cac:	0801efbc 	.word	0x0801efbc

08013cb0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
 8013cbc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013cbe:	89fb      	ldrh	r3, [r7, #14]
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	2b44      	cmp	r3, #68	; 0x44
 8013cc4:	d906      	bls.n	8013cd4 <dhcp_option_long+0x24>
 8013cc6:	4b19      	ldr	r3, [pc, #100]	; (8013d2c <dhcp_option_long+0x7c>)
 8013cc8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013ccc:	4918      	ldr	r1, [pc, #96]	; (8013d30 <dhcp_option_long+0x80>)
 8013cce:	4819      	ldr	r0, [pc, #100]	; (8013d34 <dhcp_option_long+0x84>)
 8013cd0:	f003 fcca 	bl	8017668 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	0e1a      	lsrs	r2, r3, #24
 8013cd8:	89fb      	ldrh	r3, [r7, #14]
 8013cda:	1c59      	adds	r1, r3, #1
 8013cdc:	81f9      	strh	r1, [r7, #14]
 8013cde:	4619      	mov	r1, r3
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	440b      	add	r3, r1
 8013ce4:	b2d2      	uxtb	r2, r2
 8013ce6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	0c1a      	lsrs	r2, r3, #16
 8013cec:	89fb      	ldrh	r3, [r7, #14]
 8013cee:	1c59      	adds	r1, r3, #1
 8013cf0:	81f9      	strh	r1, [r7, #14]
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	440b      	add	r3, r1
 8013cf8:	b2d2      	uxtb	r2, r2
 8013cfa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	0a1a      	lsrs	r2, r3, #8
 8013d00:	89fb      	ldrh	r3, [r7, #14]
 8013d02:	1c59      	adds	r1, r3, #1
 8013d04:	81f9      	strh	r1, [r7, #14]
 8013d06:	4619      	mov	r1, r3
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	440b      	add	r3, r1
 8013d0c:	b2d2      	uxtb	r2, r2
 8013d0e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013d10:	89fb      	ldrh	r3, [r7, #14]
 8013d12:	1c5a      	adds	r2, r3, #1
 8013d14:	81fa      	strh	r2, [r7, #14]
 8013d16:	461a      	mov	r2, r3
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	b2d2      	uxtb	r2, r2
 8013d20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d22:	89fb      	ldrh	r3, [r7, #14]
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3710      	adds	r7, #16
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	0801ef5c 	.word	0x0801ef5c
 8013d30:	0801f1a8 	.word	0x0801f1a8
 8013d34:	0801efbc 	.word	0x0801efbc

08013d38 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b090      	sub	sp, #64	; 0x40
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013d4a:	2208      	movs	r2, #8
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	48be      	ldr	r0, [pc, #760]	; (8014048 <dhcp_parse_reply+0x310>)
 8013d50:	f003 f818 	bl	8016d84 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	895b      	ldrh	r3, [r3, #10]
 8013d58:	2b2b      	cmp	r3, #43	; 0x2b
 8013d5a:	d802      	bhi.n	8013d62 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013d5c:	f06f 0301 	mvn.w	r3, #1
 8013d60:	e2a8      	b.n	80142b4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013d68:	23f0      	movs	r3, #240	; 0xf0
 8013d6a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	891b      	ldrh	r3, [r3, #8]
 8013d70:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013d76:	e00c      	b.n	8013d92 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7a:	895b      	ldrh	r3, [r3, #10]
 8013d7c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	895b      	ldrh	r3, [r3, #10]
 8013d86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d004      	beq.n	8013da2 <dhcp_parse_reply+0x6a>
 8013d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9a:	895b      	ldrh	r3, [r3, #10]
 8013d9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d2ea      	bcs.n	8013d78 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013da8:	f06f 0301 	mvn.w	r3, #1
 8013dac:	e282      	b.n	80142b4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013db0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013db2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013db4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013dbc:	e23a      	b.n	8014234 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013dc2:	4413      	add	r3, r2
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dd2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013dd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dd6:	3302      	adds	r3, #2
 8013dd8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013dda:	8bfa      	ldrh	r2, [r7, #30]
 8013ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dde:	429a      	cmp	r2, r3
 8013de0:	d202      	bcs.n	8013de8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013de2:	f06f 0301 	mvn.w	r3, #1
 8013de6:	e265      	b.n	80142b4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013de8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dea:	3301      	adds	r3, #1
 8013dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dee:	8952      	ldrh	r2, [r2, #10]
 8013df0:	4293      	cmp	r3, r2
 8013df2:	da07      	bge.n	8013e04 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013df4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013df6:	3301      	adds	r3, #1
 8013df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013dfa:	4413      	add	r3, r2
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e02:	e00b      	b.n	8013e1c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d004      	beq.n	8013e16 <dhcp_parse_reply+0xde>
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	e000      	b.n	8013e18 <dhcp_parse_reply+0xe0>
 8013e16:	2300      	movs	r3, #0
 8013e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013e24:	7dfb      	ldrb	r3, [r7, #23]
 8013e26:	2b3b      	cmp	r3, #59	; 0x3b
 8013e28:	f200 812d 	bhi.w	8014086 <dhcp_parse_reply+0x34e>
 8013e2c:	a201      	add	r2, pc, #4	; (adr r2, 8013e34 <dhcp_parse_reply+0xfc>)
 8013e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e32:	bf00      	nop
 8013e34:	08013f25 	.word	0x08013f25
 8013e38:	08013f35 	.word	0x08013f35
 8013e3c:	08014087 	.word	0x08014087
 8013e40:	08013f57 	.word	0x08013f57
 8013e44:	08014087 	.word	0x08014087
 8013e48:	08014087 	.word	0x08014087
 8013e4c:	08014087 	.word	0x08014087
 8013e50:	08014087 	.word	0x08014087
 8013e54:	08014087 	.word	0x08014087
 8013e58:	08014087 	.word	0x08014087
 8013e5c:	08014087 	.word	0x08014087
 8013e60:	08014087 	.word	0x08014087
 8013e64:	08014087 	.word	0x08014087
 8013e68:	08014087 	.word	0x08014087
 8013e6c:	08014087 	.word	0x08014087
 8013e70:	08014087 	.word	0x08014087
 8013e74:	08014087 	.word	0x08014087
 8013e78:	08014087 	.word	0x08014087
 8013e7c:	08014087 	.word	0x08014087
 8013e80:	08014087 	.word	0x08014087
 8013e84:	08014087 	.word	0x08014087
 8013e88:	08014087 	.word	0x08014087
 8013e8c:	08014087 	.word	0x08014087
 8013e90:	08014087 	.word	0x08014087
 8013e94:	08014087 	.word	0x08014087
 8013e98:	08014087 	.word	0x08014087
 8013e9c:	08014087 	.word	0x08014087
 8013ea0:	08014087 	.word	0x08014087
 8013ea4:	08014087 	.word	0x08014087
 8013ea8:	08014087 	.word	0x08014087
 8013eac:	08014087 	.word	0x08014087
 8013eb0:	08014087 	.word	0x08014087
 8013eb4:	08014087 	.word	0x08014087
 8013eb8:	08014087 	.word	0x08014087
 8013ebc:	08014087 	.word	0x08014087
 8013ec0:	08014087 	.word	0x08014087
 8013ec4:	08014087 	.word	0x08014087
 8013ec8:	08014087 	.word	0x08014087
 8013ecc:	08014087 	.word	0x08014087
 8013ed0:	08014087 	.word	0x08014087
 8013ed4:	08014087 	.word	0x08014087
 8013ed8:	08014087 	.word	0x08014087
 8013edc:	08014087 	.word	0x08014087
 8013ee0:	08014087 	.word	0x08014087
 8013ee4:	08014087 	.word	0x08014087
 8013ee8:	08014087 	.word	0x08014087
 8013eec:	08014087 	.word	0x08014087
 8013ef0:	08014087 	.word	0x08014087
 8013ef4:	08014087 	.word	0x08014087
 8013ef8:	08014087 	.word	0x08014087
 8013efc:	08014087 	.word	0x08014087
 8013f00:	08013f83 	.word	0x08013f83
 8013f04:	08013fa5 	.word	0x08013fa5
 8013f08:	08013fe1 	.word	0x08013fe1
 8013f0c:	08014003 	.word	0x08014003
 8013f10:	08014087 	.word	0x08014087
 8013f14:	08014087 	.word	0x08014087
 8013f18:	08014087 	.word	0x08014087
 8013f1c:	08014025 	.word	0x08014025
 8013f20:	08014065 	.word	0x08014065
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013f32:	e0ac      	b.n	801408e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f38:	2b04      	cmp	r3, #4
 8013f3a:	d009      	beq.n	8013f50 <dhcp_parse_reply+0x218>
 8013f3c:	4b43      	ldr	r3, [pc, #268]	; (801404c <dhcp_parse_reply+0x314>)
 8013f3e:	f240 622e 	movw	r2, #1582	; 0x62e
 8013f42:	4943      	ldr	r1, [pc, #268]	; (8014050 <dhcp_parse_reply+0x318>)
 8013f44:	4843      	ldr	r0, [pc, #268]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013f46:	f003 fb8f 	bl	8017668 <iprintf>
 8013f4a:	f06f 0305 	mvn.w	r3, #5
 8013f4e:	e1b1      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013f50:	2306      	movs	r3, #6
 8013f52:	623b      	str	r3, [r7, #32]
        break;
 8013f54:	e09b      	b.n	801408e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013f56:	2304      	movs	r3, #4
 8013f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d209      	bcs.n	8013f7c <dhcp_parse_reply+0x244>
 8013f68:	4b38      	ldr	r3, [pc, #224]	; (801404c <dhcp_parse_reply+0x314>)
 8013f6a:	f240 6233 	movw	r2, #1587	; 0x633
 8013f6e:	493a      	ldr	r1, [pc, #232]	; (8014058 <dhcp_parse_reply+0x320>)
 8013f70:	4838      	ldr	r0, [pc, #224]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013f72:	f003 fb79 	bl	8017668 <iprintf>
 8013f76:	f06f 0305 	mvn.w	r3, #5
 8013f7a:	e19b      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013f7c:	2307      	movs	r3, #7
 8013f7e:	623b      	str	r3, [r7, #32]
        break;
 8013f80:	e085      	b.n	801408e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f86:	2b04      	cmp	r3, #4
 8013f88:	d009      	beq.n	8013f9e <dhcp_parse_reply+0x266>
 8013f8a:	4b30      	ldr	r3, [pc, #192]	; (801404c <dhcp_parse_reply+0x314>)
 8013f8c:	f240 6241 	movw	r2, #1601	; 0x641
 8013f90:	492f      	ldr	r1, [pc, #188]	; (8014050 <dhcp_parse_reply+0x318>)
 8013f92:	4830      	ldr	r0, [pc, #192]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013f94:	f003 fb68 	bl	8017668 <iprintf>
 8013f98:	f06f 0305 	mvn.w	r3, #5
 8013f9c:	e18a      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013f9e:	2303      	movs	r3, #3
 8013fa0:	623b      	str	r3, [r7, #32]
        break;
 8013fa2:	e074      	b.n	801408e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d009      	beq.n	8013fc0 <dhcp_parse_reply+0x288>
 8013fac:	4b27      	ldr	r3, [pc, #156]	; (801404c <dhcp_parse_reply+0x314>)
 8013fae:	f240 624f 	movw	r2, #1615	; 0x64f
 8013fb2:	492a      	ldr	r1, [pc, #168]	; (801405c <dhcp_parse_reply+0x324>)
 8013fb4:	4827      	ldr	r0, [pc, #156]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013fb6:	f003 fb57 	bl	8017668 <iprintf>
 8013fba:	f06f 0305 	mvn.w	r3, #5
 8013fbe:	e179      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013fc2:	2bf0      	cmp	r3, #240	; 0xf0
 8013fc4:	d009      	beq.n	8013fda <dhcp_parse_reply+0x2a2>
 8013fc6:	4b21      	ldr	r3, [pc, #132]	; (801404c <dhcp_parse_reply+0x314>)
 8013fc8:	f240 6251 	movw	r2, #1617	; 0x651
 8013fcc:	4924      	ldr	r1, [pc, #144]	; (8014060 <dhcp_parse_reply+0x328>)
 8013fce:	4821      	ldr	r0, [pc, #132]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013fd0:	f003 fb4a 	bl	8017668 <iprintf>
 8013fd4:	f06f 0305 	mvn.w	r3, #5
 8013fd8:	e16c      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	623b      	str	r3, [r7, #32]
        break;
 8013fde:	e056      	b.n	801408e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	d009      	beq.n	8013ffc <dhcp_parse_reply+0x2c4>
 8013fe8:	4b18      	ldr	r3, [pc, #96]	; (801404c <dhcp_parse_reply+0x314>)
 8013fea:	f240 6255 	movw	r2, #1621	; 0x655
 8013fee:	491b      	ldr	r1, [pc, #108]	; (801405c <dhcp_parse_reply+0x324>)
 8013ff0:	4818      	ldr	r0, [pc, #96]	; (8014054 <dhcp_parse_reply+0x31c>)
 8013ff2:	f003 fb39 	bl	8017668 <iprintf>
 8013ff6:	f06f 0305 	mvn.w	r3, #5
 8013ffa:	e15b      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	623b      	str	r3, [r7, #32]
        break;
 8014000:	e045      	b.n	801408e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014006:	2b04      	cmp	r3, #4
 8014008:	d009      	beq.n	801401e <dhcp_parse_reply+0x2e6>
 801400a:	4b10      	ldr	r3, [pc, #64]	; (801404c <dhcp_parse_reply+0x314>)
 801400c:	f240 6259 	movw	r2, #1625	; 0x659
 8014010:	490f      	ldr	r1, [pc, #60]	; (8014050 <dhcp_parse_reply+0x318>)
 8014012:	4810      	ldr	r0, [pc, #64]	; (8014054 <dhcp_parse_reply+0x31c>)
 8014014:	f003 fb28 	bl	8017668 <iprintf>
 8014018:	f06f 0305 	mvn.w	r3, #5
 801401c:	e14a      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801401e:	2302      	movs	r3, #2
 8014020:	623b      	str	r3, [r7, #32]
        break;
 8014022:	e034      	b.n	801408e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014028:	2b04      	cmp	r3, #4
 801402a:	d009      	beq.n	8014040 <dhcp_parse_reply+0x308>
 801402c:	4b07      	ldr	r3, [pc, #28]	; (801404c <dhcp_parse_reply+0x314>)
 801402e:	f240 625d 	movw	r2, #1629	; 0x65d
 8014032:	4907      	ldr	r1, [pc, #28]	; (8014050 <dhcp_parse_reply+0x318>)
 8014034:	4807      	ldr	r0, [pc, #28]	; (8014054 <dhcp_parse_reply+0x31c>)
 8014036:	f003 fb17 	bl	8017668 <iprintf>
 801403a:	f06f 0305 	mvn.w	r3, #5
 801403e:	e139      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014040:	2304      	movs	r3, #4
 8014042:	623b      	str	r3, [r7, #32]
        break;
 8014044:	e023      	b.n	801408e <dhcp_parse_reply+0x356>
 8014046:	bf00      	nop
 8014048:	2000d878 	.word	0x2000d878
 801404c:	0801ef5c 	.word	0x0801ef5c
 8014050:	0801f1e4 	.word	0x0801f1e4
 8014054:	0801efbc 	.word	0x0801efbc
 8014058:	0801f1f0 	.word	0x0801f1f0
 801405c:	0801f204 	.word	0x0801f204
 8014060:	0801f210 	.word	0x0801f210
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014068:	2b04      	cmp	r3, #4
 801406a:	d009      	beq.n	8014080 <dhcp_parse_reply+0x348>
 801406c:	4b93      	ldr	r3, [pc, #588]	; (80142bc <dhcp_parse_reply+0x584>)
 801406e:	f240 6261 	movw	r2, #1633	; 0x661
 8014072:	4993      	ldr	r1, [pc, #588]	; (80142c0 <dhcp_parse_reply+0x588>)
 8014074:	4893      	ldr	r0, [pc, #588]	; (80142c4 <dhcp_parse_reply+0x58c>)
 8014076:	f003 faf7 	bl	8017668 <iprintf>
 801407a:	f06f 0305 	mvn.w	r3, #5
 801407e:	e119      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014080:	2305      	movs	r3, #5
 8014082:	623b      	str	r3, [r7, #32]
        break;
 8014084:	e003      	b.n	801408e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014086:	2300      	movs	r3, #0
 8014088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801408c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801408e:	7dfb      	ldrb	r3, [r7, #23]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d103      	bne.n	801409c <dhcp_parse_reply+0x364>
      offset++;
 8014094:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014096:	3301      	adds	r3, #1
 8014098:	877b      	strh	r3, [r7, #58]	; 0x3a
 801409a:	e0a1      	b.n	80141e0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801409c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801409e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140a2:	4413      	add	r3, r2
 80140a4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80140a8:	4293      	cmp	r3, r2
 80140aa:	dd02      	ble.n	80140b2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80140ac:	f06f 0301 	mvn.w	r3, #1
 80140b0:	e100      	b.n	80142b4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80140b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80140ba:	4413      	add	r3, r2
 80140bc:	b29b      	uxth	r3, r3
 80140be:	3302      	adds	r3, #2
 80140c0:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80140c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	f000 808a 	beq.w	80141e0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80140cc:	2300      	movs	r3, #0
 80140ce:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80140d0:	6a3b      	ldr	r3, [r7, #32]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	db02      	blt.n	80140dc <dhcp_parse_reply+0x3a4>
 80140d6:	6a3b      	ldr	r3, [r7, #32]
 80140d8:	2b07      	cmp	r3, #7
 80140da:	dd06      	ble.n	80140ea <dhcp_parse_reply+0x3b2>
 80140dc:	4b77      	ldr	r3, [pc, #476]	; (80142bc <dhcp_parse_reply+0x584>)
 80140de:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80140e2:	4979      	ldr	r1, [pc, #484]	; (80142c8 <dhcp_parse_reply+0x590>)
 80140e4:	4877      	ldr	r0, [pc, #476]	; (80142c4 <dhcp_parse_reply+0x58c>)
 80140e6:	f003 fabf 	bl	8017668 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80140ea:	4a78      	ldr	r2, [pc, #480]	; (80142cc <dhcp_parse_reply+0x594>)
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	4413      	add	r3, r2
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d174      	bne.n	80141e0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80140f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140fa:	2b04      	cmp	r3, #4
 80140fc:	bf28      	it	cs
 80140fe:	2304      	movcs	r3, #4
 8014100:	b2db      	uxtb	r3, r3
 8014102:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014104:	8bfb      	ldrh	r3, [r7, #30]
 8014106:	8aba      	ldrh	r2, [r7, #20]
 8014108:	f107 0108 	add.w	r1, r7, #8
 801410c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801410e:	f7f7 fcad 	bl	800ba6c <pbuf_copy_partial>
 8014112:	4603      	mov	r3, r0
 8014114:	461a      	mov	r2, r3
 8014116:	8abb      	ldrh	r3, [r7, #20]
 8014118:	4293      	cmp	r3, r2
 801411a:	d002      	beq.n	8014122 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 801411c:	f06f 0301 	mvn.w	r3, #1
 8014120:	e0c8      	b.n	80142b4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014126:	2b04      	cmp	r3, #4
 8014128:	d933      	bls.n	8014192 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801412a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801412e:	f003 0303 	and.w	r3, r3, #3
 8014132:	b2db      	uxtb	r3, r3
 8014134:	2b00      	cmp	r3, #0
 8014136:	d009      	beq.n	801414c <dhcp_parse_reply+0x414>
 8014138:	4b60      	ldr	r3, [pc, #384]	; (80142bc <dhcp_parse_reply+0x584>)
 801413a:	f240 6281 	movw	r2, #1665	; 0x681
 801413e:	4964      	ldr	r1, [pc, #400]	; (80142d0 <dhcp_parse_reply+0x598>)
 8014140:	4860      	ldr	r0, [pc, #384]	; (80142c4 <dhcp_parse_reply+0x58c>)
 8014142:	f003 fa91 	bl	8017668 <iprintf>
 8014146:	f06f 0305 	mvn.w	r3, #5
 801414a:	e0b3      	b.n	80142b4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801414c:	4a5f      	ldr	r2, [pc, #380]	; (80142cc <dhcp_parse_reply+0x594>)
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	4413      	add	r3, r2
 8014152:	2201      	movs	r2, #1
 8014154:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	4618      	mov	r0, r3
 801415a:	f7f5 ff08 	bl	8009f6e <lwip_htonl>
 801415e:	4602      	mov	r2, r0
 8014160:	495c      	ldr	r1, [pc, #368]	; (80142d4 <dhcp_parse_reply+0x59c>)
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801416c:	3b04      	subs	r3, #4
 801416e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014172:	8bfb      	ldrh	r3, [r7, #30]
 8014174:	3304      	adds	r3, #4
 8014176:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014178:	8a7a      	ldrh	r2, [r7, #18]
 801417a:	8bfb      	ldrh	r3, [r7, #30]
 801417c:	429a      	cmp	r2, r3
 801417e:	d202      	bcs.n	8014186 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014180:	f06f 0301 	mvn.w	r3, #1
 8014184:	e096      	b.n	80142b4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014186:	8a7b      	ldrh	r3, [r7, #18]
 8014188:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801418a:	6a3b      	ldr	r3, [r7, #32]
 801418c:	3301      	adds	r3, #1
 801418e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014190:	e79e      	b.n	80140d0 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014196:	2b04      	cmp	r3, #4
 8014198:	d106      	bne.n	80141a8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	4618      	mov	r0, r3
 801419e:	f7f5 fee6 	bl	8009f6e <lwip_htonl>
 80141a2:	4603      	mov	r3, r0
 80141a4:	60bb      	str	r3, [r7, #8]
 80141a6:	e011      	b.n	80141cc <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80141a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d009      	beq.n	80141c4 <dhcp_parse_reply+0x48c>
 80141b0:	4b42      	ldr	r3, [pc, #264]	; (80142bc <dhcp_parse_reply+0x584>)
 80141b2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80141b6:	4948      	ldr	r1, [pc, #288]	; (80142d8 <dhcp_parse_reply+0x5a0>)
 80141b8:	4842      	ldr	r0, [pc, #264]	; (80142c4 <dhcp_parse_reply+0x58c>)
 80141ba:	f003 fa55 	bl	8017668 <iprintf>
 80141be:	f06f 0305 	mvn.w	r3, #5
 80141c2:	e077      	b.n	80142b4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80141c4:	f107 0308 	add.w	r3, r7, #8
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80141cc:	4a3f      	ldr	r2, [pc, #252]	; (80142cc <dhcp_parse_reply+0x594>)
 80141ce:	6a3b      	ldr	r3, [r7, #32]
 80141d0:	4413      	add	r3, r2
 80141d2:	2201      	movs	r2, #1
 80141d4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	493e      	ldr	r1, [pc, #248]	; (80142d4 <dhcp_parse_reply+0x59c>)
 80141da:	6a3b      	ldr	r3, [r7, #32]
 80141dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80141e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e2:	895b      	ldrh	r3, [r3, #10]
 80141e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d324      	bcc.n	8014234 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80141ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ec:	895b      	ldrh	r3, [r3, #10]
 80141ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80141f0:	1ad3      	subs	r3, r2, r3
 80141f2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80141f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f6:	895b      	ldrh	r3, [r3, #10]
 80141f8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80141fa:	1ad3      	subs	r3, r2, r3
 80141fc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80141fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014202:	429a      	cmp	r2, r3
 8014204:	d213      	bcs.n	801422e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420e:	2b00      	cmp	r3, #0
 8014210:	d109      	bne.n	8014226 <dhcp_parse_reply+0x4ee>
 8014212:	4b2a      	ldr	r3, [pc, #168]	; (80142bc <dhcp_parse_reply+0x584>)
 8014214:	f240 629d 	movw	r2, #1693	; 0x69d
 8014218:	4930      	ldr	r1, [pc, #192]	; (80142dc <dhcp_parse_reply+0x5a4>)
 801421a:	482a      	ldr	r0, [pc, #168]	; (80142c4 <dhcp_parse_reply+0x58c>)
 801421c:	f003 fa24 	bl	8017668 <iprintf>
 8014220:	f06f 0305 	mvn.w	r3, #5
 8014224:	e046      	b.n	80142b4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801422c:	e002      	b.n	8014234 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801422e:	f06f 0301 	mvn.w	r3, #1
 8014232:	e03f      	b.n	80142b4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014236:	2b00      	cmp	r3, #0
 8014238:	d00a      	beq.n	8014250 <dhcp_parse_reply+0x518>
 801423a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801423c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801423e:	429a      	cmp	r2, r3
 8014240:	d206      	bcs.n	8014250 <dhcp_parse_reply+0x518>
 8014242:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014246:	4413      	add	r3, r2
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	2bff      	cmp	r3, #255	; 0xff
 801424c:	f47f adb7 	bne.w	8013dbe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014250:	4b1e      	ldr	r3, [pc, #120]	; (80142cc <dhcp_parse_reply+0x594>)
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d018      	beq.n	801428a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014258:	4b1e      	ldr	r3, [pc, #120]	; (80142d4 <dhcp_parse_reply+0x59c>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801425e:	4b1b      	ldr	r3, [pc, #108]	; (80142cc <dhcp_parse_reply+0x594>)
 8014260:	2200      	movs	r2, #0
 8014262:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2b01      	cmp	r3, #1
 8014268:	d102      	bne.n	8014270 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801426a:	2301      	movs	r3, #1
 801426c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801426e:	e00c      	b.n	801428a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b02      	cmp	r3, #2
 8014274:	d102      	bne.n	801427c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014276:	2301      	movs	r3, #1
 8014278:	62bb      	str	r3, [r7, #40]	; 0x28
 801427a:	e006      	b.n	801428a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2b03      	cmp	r3, #3
 8014280:	d103      	bne.n	801428a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014282:	2301      	movs	r3, #1
 8014284:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014286:	2301      	movs	r3, #1
 8014288:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428c:	2b00      	cmp	r3, #0
 801428e:	d006      	beq.n	801429e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014290:	2300      	movs	r3, #0
 8014292:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014294:	236c      	movs	r3, #108	; 0x6c
 8014296:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014298:	23ec      	movs	r3, #236	; 0xec
 801429a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801429c:	e569      	b.n	8013d72 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d006      	beq.n	80142b2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80142a4:	2300      	movs	r3, #0
 80142a6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80142a8:	232c      	movs	r3, #44	; 0x2c
 80142aa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80142ac:	236c      	movs	r3, #108	; 0x6c
 80142ae:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80142b0:	e55f      	b.n	8013d72 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80142b2:	2300      	movs	r3, #0
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3740      	adds	r7, #64	; 0x40
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	0801ef5c 	.word	0x0801ef5c
 80142c0:	0801f1e4 	.word	0x0801f1e4
 80142c4:	0801efbc 	.word	0x0801efbc
 80142c8:	0801f228 	.word	0x0801f228
 80142cc:	2000d878 	.word	0x2000d878
 80142d0:	0801f23c 	.word	0x0801f23c
 80142d4:	2000d880 	.word	0x2000d880
 80142d8:	0801f254 	.word	0x0801f254
 80142dc:	0801f268 	.word	0x0801f268

080142e0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b08a      	sub	sp, #40	; 0x28
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
 80142ec:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80142ee:	4b60      	ldr	r3, [pc, #384]	; (8014470 <dhcp_recv+0x190>)
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	2b00      	cmp	r3, #0
 8014304:	f000 809d 	beq.w	8014442 <dhcp_recv+0x162>
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	791b      	ldrb	r3, [r3, #4]
 801430c:	2b00      	cmp	r3, #0
 801430e:	f000 8098 	beq.w	8014442 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	895b      	ldrh	r3, [r3, #10]
 8014316:	2b2b      	cmp	r3, #43	; 0x2b
 8014318:	f240 8095 	bls.w	8014446 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	2b02      	cmp	r3, #2
 8014322:	f040 8092 	bne.w	801444a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014326:	2300      	movs	r3, #0
 8014328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801432c:	e012      	b.n	8014354 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801432e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014332:	6a3a      	ldr	r2, [r7, #32]
 8014334:	4413      	add	r3, r2
 8014336:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801433a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801433e:	69b9      	ldr	r1, [r7, #24]
 8014340:	440b      	add	r3, r1
 8014342:	7f1b      	ldrb	r3, [r3, #28]
 8014344:	429a      	cmp	r2, r3
 8014346:	f040 8082 	bne.w	801444e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801434a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801434e:	3301      	adds	r3, #1
 8014350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014354:	6a3b      	ldr	r3, [r7, #32]
 8014356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801435a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801435e:	429a      	cmp	r2, r3
 8014360:	d203      	bcs.n	801436a <dhcp_recv+0x8a>
 8014362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014366:	2b05      	cmp	r3, #5
 8014368:	d9e1      	bls.n	801432e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	4618      	mov	r0, r3
 8014370:	f7f5 fdfd 	bl	8009f6e <lwip_htonl>
 8014374:	4602      	mov	r2, r0
 8014376:	69fb      	ldr	r3, [r7, #28]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	429a      	cmp	r2, r3
 801437c:	d169      	bne.n	8014452 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801437e:	69f9      	ldr	r1, [r7, #28]
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7ff fcd9 	bl	8013d38 <dhcp_parse_reply>
 8014386:	4603      	mov	r3, r0
 8014388:	2b00      	cmp	r3, #0
 801438a:	d164      	bne.n	8014456 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801438c:	4b39      	ldr	r3, [pc, #228]	; (8014474 <dhcp_recv+0x194>)
 801438e:	785b      	ldrb	r3, [r3, #1]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d062      	beq.n	801445a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801439a:	4b37      	ldr	r3, [pc, #220]	; (8014478 <dhcp_recv+0x198>)
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80143a0:	7cfb      	ldrb	r3, [r7, #19]
 80143a2:	2b05      	cmp	r3, #5
 80143a4:	d12a      	bne.n	80143fc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	795b      	ldrb	r3, [r3, #5]
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d112      	bne.n	80143d4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80143ae:	6979      	ldr	r1, [r7, #20]
 80143b0:	6a38      	ldr	r0, [r7, #32]
 80143b2:	f7fe fe53 	bl	801305c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80143bc:	f003 0308 	and.w	r3, r3, #8
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d003      	beq.n	80143cc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80143c4:	6a38      	ldr	r0, [r7, #32]
 80143c6:	f7fe fbc3 	bl	8012b50 <dhcp_check>
 80143ca:	e049      	b.n	8014460 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80143cc:	6a38      	ldr	r0, [r7, #32]
 80143ce:	f7ff f867 	bl	80134a0 <dhcp_bind>
 80143d2:	e045      	b.n	8014460 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	795b      	ldrb	r3, [r3, #5]
 80143d8:	2b03      	cmp	r3, #3
 80143da:	d007      	beq.n	80143ec <dhcp_recv+0x10c>
 80143dc:	69fb      	ldr	r3, [r7, #28]
 80143de:	795b      	ldrb	r3, [r3, #5]
 80143e0:	2b04      	cmp	r3, #4
 80143e2:	d003      	beq.n	80143ec <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80143e8:	2b05      	cmp	r3, #5
 80143ea:	d139      	bne.n	8014460 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80143ec:	6979      	ldr	r1, [r7, #20]
 80143ee:	6a38      	ldr	r0, [r7, #32]
 80143f0:	f7fe fe34 	bl	801305c <dhcp_handle_ack>
      dhcp_bind(netif);
 80143f4:	6a38      	ldr	r0, [r7, #32]
 80143f6:	f7ff f853 	bl	80134a0 <dhcp_bind>
 80143fa:	e031      	b.n	8014460 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80143fc:	7cfb      	ldrb	r3, [r7, #19]
 80143fe:	2b06      	cmp	r3, #6
 8014400:	d113      	bne.n	801442a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014406:	2b03      	cmp	r3, #3
 8014408:	d00b      	beq.n	8014422 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	795b      	ldrb	r3, [r3, #5]
 801440e:	2b01      	cmp	r3, #1
 8014410:	d007      	beq.n	8014422 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014416:	2b04      	cmp	r3, #4
 8014418:	d003      	beq.n	8014422 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	795b      	ldrb	r3, [r3, #5]
 801441e:	2b05      	cmp	r3, #5
 8014420:	d103      	bne.n	801442a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014422:	6a38      	ldr	r0, [r7, #32]
 8014424:	f7fe fb7a 	bl	8012b1c <dhcp_handle_nak>
 8014428:	e01a      	b.n	8014460 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801442a:	7cfb      	ldrb	r3, [r7, #19]
 801442c:	2b02      	cmp	r3, #2
 801442e:	d116      	bne.n	801445e <dhcp_recv+0x17e>
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	795b      	ldrb	r3, [r3, #5]
 8014434:	2b06      	cmp	r3, #6
 8014436:	d112      	bne.n	801445e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014438:	6979      	ldr	r1, [r7, #20]
 801443a:	6a38      	ldr	r0, [r7, #32]
 801443c:	f7fe fbbc 	bl	8012bb8 <dhcp_handle_offer>
 8014440:	e00e      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014442:	bf00      	nop
 8014444:	e00c      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014446:	bf00      	nop
 8014448:	e00a      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801444a:	bf00      	nop
 801444c:	e008      	b.n	8014460 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801444e:	bf00      	nop
 8014450:	e006      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014452:	bf00      	nop
 8014454:	e004      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014456:	bf00      	nop
 8014458:	e002      	b.n	8014460 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801445a:	bf00      	nop
 801445c:	e000      	b.n	8014460 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801445e:	bf00      	nop
  pbuf_free(p);
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f7 f909 	bl	800b678 <pbuf_free>
}
 8014466:	bf00      	nop
 8014468:	3728      	adds	r7, #40	; 0x28
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	20009f2c 	.word	0x20009f2c
 8014474:	2000d878 	.word	0x2000d878
 8014478:	2000d880 	.word	0x2000d880

0801447c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b088      	sub	sp, #32
 8014480:	af00      	add	r7, sp, #0
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	603b      	str	r3, [r7, #0]
 8014488:	4613      	mov	r3, r2
 801448a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d108      	bne.n	80144a4 <dhcp_create_msg+0x28>
 8014492:	4b5f      	ldr	r3, [pc, #380]	; (8014610 <dhcp_create_msg+0x194>)
 8014494:	f240 7269 	movw	r2, #1897	; 0x769
 8014498:	495e      	ldr	r1, [pc, #376]	; (8014614 <dhcp_create_msg+0x198>)
 801449a:	485f      	ldr	r0, [pc, #380]	; (8014618 <dhcp_create_msg+0x19c>)
 801449c:	f003 f8e4 	bl	8017668 <iprintf>
 80144a0:	2300      	movs	r3, #0
 80144a2:	e0b1      	b.n	8014608 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d108      	bne.n	80144bc <dhcp_create_msg+0x40>
 80144aa:	4b59      	ldr	r3, [pc, #356]	; (8014610 <dhcp_create_msg+0x194>)
 80144ac:	f240 726a 	movw	r2, #1898	; 0x76a
 80144b0:	495a      	ldr	r1, [pc, #360]	; (801461c <dhcp_create_msg+0x1a0>)
 80144b2:	4859      	ldr	r0, [pc, #356]	; (8014618 <dhcp_create_msg+0x19c>)
 80144b4:	f003 f8d8 	bl	8017668 <iprintf>
 80144b8:	2300      	movs	r3, #0
 80144ba:	e0a5      	b.n	8014608 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80144bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144c0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80144c4:	2036      	movs	r0, #54	; 0x36
 80144c6:	f7f6 fdf3 	bl	800b0b0 <pbuf_alloc>
 80144ca:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80144d2:	2300      	movs	r3, #0
 80144d4:	e098      	b.n	8014608 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	895b      	ldrh	r3, [r3, #10]
 80144da:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80144de:	d206      	bcs.n	80144ee <dhcp_create_msg+0x72>
 80144e0:	4b4b      	ldr	r3, [pc, #300]	; (8014610 <dhcp_create_msg+0x194>)
 80144e2:	f240 7271 	movw	r2, #1905	; 0x771
 80144e6:	494e      	ldr	r1, [pc, #312]	; (8014620 <dhcp_create_msg+0x1a4>)
 80144e8:	484b      	ldr	r0, [pc, #300]	; (8014618 <dhcp_create_msg+0x19c>)
 80144ea:	f003 f8bd 	bl	8017668 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	2b03      	cmp	r3, #3
 80144f2:	d103      	bne.n	80144fc <dhcp_create_msg+0x80>
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	795b      	ldrb	r3, [r3, #5]
 80144f8:	2b03      	cmp	r3, #3
 80144fa:	d10d      	bne.n	8014518 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	799b      	ldrb	r3, [r3, #6]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d105      	bne.n	8014510 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014504:	f003 f93e 	bl	8017784 <rand>
 8014508:	4603      	mov	r3, r0
 801450a:	461a      	mov	r2, r3
 801450c:	4b45      	ldr	r3, [pc, #276]	; (8014624 <dhcp_create_msg+0x1a8>)
 801450e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014510:	4b44      	ldr	r3, [pc, #272]	; (8014624 <dhcp_create_msg+0x1a8>)
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801451e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014522:	2100      	movs	r1, #0
 8014524:	6978      	ldr	r0, [r7, #20]
 8014526:	f002 fc2d 	bl	8016d84 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	2201      	movs	r2, #1
 801452e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	2201      	movs	r2, #1
 8014534:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4618      	mov	r0, r3
 8014546:	f7f5 fd12 	bl	8009f6e <lwip_htonl>
 801454a:	4602      	mov	r2, r0
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014550:	79fb      	ldrb	r3, [r7, #7]
 8014552:	2b08      	cmp	r3, #8
 8014554:	d010      	beq.n	8014578 <dhcp_create_msg+0xfc>
 8014556:	79fb      	ldrb	r3, [r7, #7]
 8014558:	2b04      	cmp	r3, #4
 801455a:	d00d      	beq.n	8014578 <dhcp_create_msg+0xfc>
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	2b07      	cmp	r3, #7
 8014560:	d00a      	beq.n	8014578 <dhcp_create_msg+0xfc>
 8014562:	79fb      	ldrb	r3, [r7, #7]
 8014564:	2b03      	cmp	r3, #3
 8014566:	d10c      	bne.n	8014582 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801456c:	2b05      	cmp	r3, #5
 801456e:	d003      	beq.n	8014578 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	795b      	ldrb	r3, [r3, #5]
 8014574:	2b04      	cmp	r3, #4
 8014576:	d104      	bne.n	8014582 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	3304      	adds	r3, #4
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014582:	2300      	movs	r3, #0
 8014584:	83fb      	strh	r3, [r7, #30]
 8014586:	e00c      	b.n	80145a2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014588:	8bfa      	ldrh	r2, [r7, #30]
 801458a:	8bfb      	ldrh	r3, [r7, #30]
 801458c:	68f9      	ldr	r1, [r7, #12]
 801458e:	440a      	add	r2, r1
 8014590:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8014594:	697a      	ldr	r2, [r7, #20]
 8014596:	4413      	add	r3, r2
 8014598:	460a      	mov	r2, r1
 801459a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801459c:	8bfb      	ldrh	r3, [r7, #30]
 801459e:	3301      	adds	r3, #1
 80145a0:	83fb      	strh	r3, [r7, #30]
 80145a2:	8bfb      	ldrh	r3, [r7, #30]
 80145a4:	2b05      	cmp	r3, #5
 80145a6:	d9ef      	bls.n	8014588 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	2200      	movs	r2, #0
 80145ac:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80145b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80145b4:	2200      	movs	r2, #0
 80145b6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80145ba:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80145be:	2200      	movs	r2, #0
 80145c0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80145c4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80145c8:	2200      	movs	r2, #0
 80145ca:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80145ce:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145d8:	2301      	movs	r3, #1
 80145da:	2235      	movs	r2, #53	; 0x35
 80145dc:	2000      	movs	r0, #0
 80145de:	f7ff fadb 	bl	8013b98 <dhcp_option>
 80145e2:	4603      	mov	r3, r0
 80145e4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80145e6:	697b      	ldr	r3, [r7, #20]
 80145e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145ec:	79fa      	ldrb	r2, [r7, #7]
 80145ee:	8a7b      	ldrh	r3, [r7, #18]
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7ff fb05 	bl	8013c00 <dhcp_option_byte>
 80145f6:	4603      	mov	r3, r0
 80145f8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80145fa:	683b      	ldr	r3, [r7, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d002      	beq.n	8014606 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	8a7a      	ldrh	r2, [r7, #18]
 8014604:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014606:	69bb      	ldr	r3, [r7, #24]
}
 8014608:	4618      	mov	r0, r3
 801460a:	3720      	adds	r7, #32
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	0801ef5c 	.word	0x0801ef5c
 8014614:	0801f27c 	.word	0x0801f27c
 8014618:	0801efbc 	.word	0x0801efbc
 801461c:	0801f29c 	.word	0x0801f29c
 8014620:	0801f2bc 	.word	0x0801f2bc
 8014624:	20001260 	.word	0x20001260

08014628 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	4603      	mov	r3, r0
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014636:	89fb      	ldrh	r3, [r7, #14]
 8014638:	1c5a      	adds	r2, r3, #1
 801463a:	81fa      	strh	r2, [r7, #14]
 801463c:	461a      	mov	r2, r3
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	4413      	add	r3, r2
 8014642:	22ff      	movs	r2, #255	; 0xff
 8014644:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014646:	e007      	b.n	8014658 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014648:	89fb      	ldrh	r3, [r7, #14]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	81fa      	strh	r2, [r7, #14]
 801464e:	461a      	mov	r2, r3
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	4413      	add	r3, r2
 8014654:	2200      	movs	r2, #0
 8014656:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014658:	89fb      	ldrh	r3, [r7, #14]
 801465a:	2b43      	cmp	r3, #67	; 0x43
 801465c:	d904      	bls.n	8014668 <dhcp_option_trailer+0x40>
 801465e:	89fb      	ldrh	r3, [r7, #14]
 8014660:	f003 0303 	and.w	r3, r3, #3
 8014664:	2b00      	cmp	r3, #0
 8014666:	d002      	beq.n	801466e <dhcp_option_trailer+0x46>
 8014668:	89fb      	ldrh	r3, [r7, #14]
 801466a:	2b43      	cmp	r3, #67	; 0x43
 801466c:	d9ec      	bls.n	8014648 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801466e:	89fb      	ldrh	r3, [r7, #14]
 8014670:	33f0      	adds	r3, #240	; 0xf0
 8014672:	b29b      	uxth	r3, r3
 8014674:	4619      	mov	r1, r3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7f6 fe78 	bl	800b36c <pbuf_realloc>
}
 801467c:	bf00      	nop
 801467e:	3710      	adds	r7, #16
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014684:	b480      	push	{r7}
 8014686:	b085      	sub	sp, #20
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d017      	beq.n	80146c2 <dhcp_supplied_address+0x3e>
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014696:	2b00      	cmp	r3, #0
 8014698:	d013      	beq.n	80146c2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	795b      	ldrb	r3, [r3, #5]
 80146a4:	2b0a      	cmp	r3, #10
 80146a6:	d007      	beq.n	80146b8 <dhcp_supplied_address+0x34>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	795b      	ldrb	r3, [r3, #5]
 80146ac:	2b05      	cmp	r3, #5
 80146ae:	d003      	beq.n	80146b8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80146b4:	2b04      	cmp	r3, #4
 80146b6:	d101      	bne.n	80146bc <dhcp_supplied_address+0x38>
 80146b8:	2301      	movs	r3, #1
 80146ba:	e000      	b.n	80146be <dhcp_supplied_address+0x3a>
 80146bc:	2300      	movs	r3, #0
 80146be:	b2db      	uxtb	r3, r3
 80146c0:	e000      	b.n	80146c4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80146c2:	2300      	movs	r3, #0
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3714      	adds	r7, #20
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr

080146d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80146d8:	4915      	ldr	r1, [pc, #84]	; (8014730 <etharp_free_entry+0x60>)
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	4613      	mov	r3, r2
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	4413      	add	r3, r2
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	440b      	add	r3, r1
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d013      	beq.n	8014714 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80146ec:	4910      	ldr	r1, [pc, #64]	; (8014730 <etharp_free_entry+0x60>)
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	4613      	mov	r3, r2
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	4413      	add	r3, r2
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	440b      	add	r3, r1
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7f6 ffbb 	bl	800b678 <pbuf_free>
    arp_table[i].q = NULL;
 8014702:	490b      	ldr	r1, [pc, #44]	; (8014730 <etharp_free_entry+0x60>)
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	2200      	movs	r2, #0
 8014712:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014714:	4906      	ldr	r1, [pc, #24]	; (8014730 <etharp_free_entry+0x60>)
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	4613      	mov	r3, r2
 801471a:	005b      	lsls	r3, r3, #1
 801471c:	4413      	add	r3, r2
 801471e:	00db      	lsls	r3, r3, #3
 8014720:	440b      	add	r3, r1
 8014722:	3314      	adds	r3, #20
 8014724:	2200      	movs	r2, #0
 8014726:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014728:	bf00      	nop
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	20001264 	.word	0x20001264

08014734 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801473a:	2300      	movs	r3, #0
 801473c:	607b      	str	r3, [r7, #4]
 801473e:	e096      	b.n	801486e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014740:	494f      	ldr	r1, [pc, #316]	; (8014880 <etharp_tmr+0x14c>)
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	440b      	add	r3, r1
 801474e:	3314      	adds	r3, #20
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014754:	78fb      	ldrb	r3, [r7, #3]
 8014756:	2b00      	cmp	r3, #0
 8014758:	f000 8086 	beq.w	8014868 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801475c:	4948      	ldr	r1, [pc, #288]	; (8014880 <etharp_tmr+0x14c>)
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	4613      	mov	r3, r2
 8014762:	005b      	lsls	r3, r3, #1
 8014764:	4413      	add	r3, r2
 8014766:	00db      	lsls	r3, r3, #3
 8014768:	440b      	add	r3, r1
 801476a:	3312      	adds	r3, #18
 801476c:	881b      	ldrh	r3, [r3, #0]
 801476e:	3301      	adds	r3, #1
 8014770:	b298      	uxth	r0, r3
 8014772:	4943      	ldr	r1, [pc, #268]	; (8014880 <etharp_tmr+0x14c>)
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	4613      	mov	r3, r2
 8014778:	005b      	lsls	r3, r3, #1
 801477a:	4413      	add	r3, r2
 801477c:	00db      	lsls	r3, r3, #3
 801477e:	440b      	add	r3, r1
 8014780:	3312      	adds	r3, #18
 8014782:	4602      	mov	r2, r0
 8014784:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014786:	493e      	ldr	r1, [pc, #248]	; (8014880 <etharp_tmr+0x14c>)
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	4613      	mov	r3, r2
 801478c:	005b      	lsls	r3, r3, #1
 801478e:	4413      	add	r3, r2
 8014790:	00db      	lsls	r3, r3, #3
 8014792:	440b      	add	r3, r1
 8014794:	3312      	adds	r3, #18
 8014796:	881b      	ldrh	r3, [r3, #0]
 8014798:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801479c:	d215      	bcs.n	80147ca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801479e:	4938      	ldr	r1, [pc, #224]	; (8014880 <etharp_tmr+0x14c>)
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	4613      	mov	r3, r2
 80147a4:	005b      	lsls	r3, r3, #1
 80147a6:	4413      	add	r3, r2
 80147a8:	00db      	lsls	r3, r3, #3
 80147aa:	440b      	add	r3, r1
 80147ac:	3314      	adds	r3, #20
 80147ae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d10e      	bne.n	80147d2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80147b4:	4932      	ldr	r1, [pc, #200]	; (8014880 <etharp_tmr+0x14c>)
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	4613      	mov	r3, r2
 80147ba:	005b      	lsls	r3, r3, #1
 80147bc:	4413      	add	r3, r2
 80147be:	00db      	lsls	r3, r3, #3
 80147c0:	440b      	add	r3, r1
 80147c2:	3312      	adds	r3, #18
 80147c4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80147c6:	2b04      	cmp	r3, #4
 80147c8:	d903      	bls.n	80147d2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7ff ff80 	bl	80146d0 <etharp_free_entry>
 80147d0:	e04a      	b.n	8014868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80147d2:	492b      	ldr	r1, [pc, #172]	; (8014880 <etharp_tmr+0x14c>)
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	440b      	add	r3, r1
 80147e0:	3314      	adds	r3, #20
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d10a      	bne.n	80147fe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80147e8:	4925      	ldr	r1, [pc, #148]	; (8014880 <etharp_tmr+0x14c>)
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4613      	mov	r3, r2
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	4413      	add	r3, r2
 80147f2:	00db      	lsls	r3, r3, #3
 80147f4:	440b      	add	r3, r1
 80147f6:	3314      	adds	r3, #20
 80147f8:	2204      	movs	r2, #4
 80147fa:	701a      	strb	r2, [r3, #0]
 80147fc:	e034      	b.n	8014868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80147fe:	4920      	ldr	r1, [pc, #128]	; (8014880 <etharp_tmr+0x14c>)
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	4613      	mov	r3, r2
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	4413      	add	r3, r2
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	440b      	add	r3, r1
 801480c:	3314      	adds	r3, #20
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	2b04      	cmp	r3, #4
 8014812:	d10a      	bne.n	801482a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014814:	491a      	ldr	r1, [pc, #104]	; (8014880 <etharp_tmr+0x14c>)
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	4613      	mov	r3, r2
 801481a:	005b      	lsls	r3, r3, #1
 801481c:	4413      	add	r3, r2
 801481e:	00db      	lsls	r3, r3, #3
 8014820:	440b      	add	r3, r1
 8014822:	3314      	adds	r3, #20
 8014824:	2202      	movs	r2, #2
 8014826:	701a      	strb	r2, [r3, #0]
 8014828:	e01e      	b.n	8014868 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801482a:	4915      	ldr	r1, [pc, #84]	; (8014880 <etharp_tmr+0x14c>)
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	4613      	mov	r3, r2
 8014830:	005b      	lsls	r3, r3, #1
 8014832:	4413      	add	r3, r2
 8014834:	00db      	lsls	r3, r3, #3
 8014836:	440b      	add	r3, r1
 8014838:	3314      	adds	r3, #20
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d113      	bne.n	8014868 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014840:	490f      	ldr	r1, [pc, #60]	; (8014880 <etharp_tmr+0x14c>)
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	4613      	mov	r3, r2
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	4413      	add	r3, r2
 801484a:	00db      	lsls	r3, r3, #3
 801484c:	440b      	add	r3, r1
 801484e:	3308      	adds	r3, #8
 8014850:	6818      	ldr	r0, [r3, #0]
 8014852:	687a      	ldr	r2, [r7, #4]
 8014854:	4613      	mov	r3, r2
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	4413      	add	r3, r2
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	4a08      	ldr	r2, [pc, #32]	; (8014880 <etharp_tmr+0x14c>)
 801485e:	4413      	add	r3, r2
 8014860:	3304      	adds	r3, #4
 8014862:	4619      	mov	r1, r3
 8014864:	f000 fe72 	bl	801554c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	3301      	adds	r3, #1
 801486c:	607b      	str	r3, [r7, #4]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2b09      	cmp	r3, #9
 8014872:	f77f af65 	ble.w	8014740 <etharp_tmr+0xc>
      }
    }
  }
}
 8014876:	bf00      	nop
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	20001264 	.word	0x20001264

08014884 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b08a      	sub	sp, #40	; 0x28
 8014888:	af00      	add	r7, sp, #0
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	460b      	mov	r3, r1
 801488e:	607a      	str	r2, [r7, #4]
 8014890:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014892:	230a      	movs	r3, #10
 8014894:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014896:	230a      	movs	r3, #10
 8014898:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801489a:	230a      	movs	r3, #10
 801489c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801489e:	2300      	movs	r3, #0
 80148a0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80148a2:	230a      	movs	r3, #10
 80148a4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80148a6:	2300      	movs	r3, #0
 80148a8:	83bb      	strh	r3, [r7, #28]
 80148aa:	2300      	movs	r3, #0
 80148ac:	837b      	strh	r3, [r7, #26]
 80148ae:	2300      	movs	r3, #0
 80148b0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148b2:	2300      	movs	r3, #0
 80148b4:	843b      	strh	r3, [r7, #32]
 80148b6:	e0ae      	b.n	8014a16 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80148b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148bc:	49a6      	ldr	r1, [pc, #664]	; (8014b58 <etharp_find_entry+0x2d4>)
 80148be:	4613      	mov	r3, r2
 80148c0:	005b      	lsls	r3, r3, #1
 80148c2:	4413      	add	r3, r2
 80148c4:	00db      	lsls	r3, r3, #3
 80148c6:	440b      	add	r3, r1
 80148c8:	3314      	adds	r3, #20
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80148ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80148d2:	2b0a      	cmp	r3, #10
 80148d4:	d105      	bne.n	80148e2 <etharp_find_entry+0x5e>
 80148d6:	7dfb      	ldrb	r3, [r7, #23]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d102      	bne.n	80148e2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80148dc:	8c3b      	ldrh	r3, [r7, #32]
 80148de:	847b      	strh	r3, [r7, #34]	; 0x22
 80148e0:	e095      	b.n	8014a0e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80148e2:	7dfb      	ldrb	r3, [r7, #23]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	f000 8092 	beq.w	8014a0e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d009      	beq.n	8014904 <etharp_find_entry+0x80>
 80148f0:	7dfb      	ldrb	r3, [r7, #23]
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d806      	bhi.n	8014904 <etharp_find_entry+0x80>
 80148f6:	4b99      	ldr	r3, [pc, #612]	; (8014b5c <etharp_find_entry+0x2d8>)
 80148f8:	f240 1223 	movw	r2, #291	; 0x123
 80148fc:	4998      	ldr	r1, [pc, #608]	; (8014b60 <etharp_find_entry+0x2dc>)
 80148fe:	4899      	ldr	r0, [pc, #612]	; (8014b64 <etharp_find_entry+0x2e0>)
 8014900:	f002 feb2 	bl	8017668 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d020      	beq.n	801494c <etharp_find_entry+0xc8>
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6819      	ldr	r1, [r3, #0]
 801490e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014912:	4891      	ldr	r0, [pc, #580]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014914:	4613      	mov	r3, r2
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	4413      	add	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	4403      	add	r3, r0
 801491e:	3304      	adds	r3, #4
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	4299      	cmp	r1, r3
 8014924:	d112      	bne.n	801494c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d00c      	beq.n	8014946 <etharp_find_entry+0xc2>
 801492c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014930:	4989      	ldr	r1, [pc, #548]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014932:	4613      	mov	r3, r2
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	4413      	add	r3, r2
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	440b      	add	r3, r1
 801493c:	3308      	adds	r3, #8
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	429a      	cmp	r2, r3
 8014944:	d102      	bne.n	801494c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014946:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801494a:	e100      	b.n	8014b4e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801494c:	7dfb      	ldrb	r3, [r7, #23]
 801494e:	2b01      	cmp	r3, #1
 8014950:	d140      	bne.n	80149d4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014956:	4980      	ldr	r1, [pc, #512]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014958:	4613      	mov	r3, r2
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	4413      	add	r3, r2
 801495e:	00db      	lsls	r3, r3, #3
 8014960:	440b      	add	r3, r1
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d01a      	beq.n	801499e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801496c:	497a      	ldr	r1, [pc, #488]	; (8014b58 <etharp_find_entry+0x2d4>)
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3312      	adds	r3, #18
 801497a:	881b      	ldrh	r3, [r3, #0]
 801497c:	8bba      	ldrh	r2, [r7, #28]
 801497e:	429a      	cmp	r2, r3
 8014980:	d845      	bhi.n	8014a0e <etharp_find_entry+0x18a>
            old_queue = i;
 8014982:	8c3b      	ldrh	r3, [r7, #32]
 8014984:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801498a:	4973      	ldr	r1, [pc, #460]	; (8014b58 <etharp_find_entry+0x2d4>)
 801498c:	4613      	mov	r3, r2
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4413      	add	r3, r2
 8014992:	00db      	lsls	r3, r3, #3
 8014994:	440b      	add	r3, r1
 8014996:	3312      	adds	r3, #18
 8014998:	881b      	ldrh	r3, [r3, #0]
 801499a:	83bb      	strh	r3, [r7, #28]
 801499c:	e037      	b.n	8014a0e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801499e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149a2:	496d      	ldr	r1, [pc, #436]	; (8014b58 <etharp_find_entry+0x2d4>)
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	440b      	add	r3, r1
 80149ae:	3312      	adds	r3, #18
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	8b7a      	ldrh	r2, [r7, #26]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d82a      	bhi.n	8014a0e <etharp_find_entry+0x18a>
            old_pending = i;
 80149b8:	8c3b      	ldrh	r3, [r7, #32]
 80149ba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80149bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c0:	4965      	ldr	r1, [pc, #404]	; (8014b58 <etharp_find_entry+0x2d4>)
 80149c2:	4613      	mov	r3, r2
 80149c4:	005b      	lsls	r3, r3, #1
 80149c6:	4413      	add	r3, r2
 80149c8:	00db      	lsls	r3, r3, #3
 80149ca:	440b      	add	r3, r1
 80149cc:	3312      	adds	r3, #18
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	837b      	strh	r3, [r7, #26]
 80149d2:	e01c      	b.n	8014a0e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80149d4:	7dfb      	ldrb	r3, [r7, #23]
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d919      	bls.n	8014a0e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80149da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149de:	495e      	ldr	r1, [pc, #376]	; (8014b58 <etharp_find_entry+0x2d4>)
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	440b      	add	r3, r1
 80149ea:	3312      	adds	r3, #18
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	8b3a      	ldrh	r2, [r7, #24]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d80c      	bhi.n	8014a0e <etharp_find_entry+0x18a>
            old_stable = i;
 80149f4:	8c3b      	ldrh	r3, [r7, #32]
 80149f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80149f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149fc:	4956      	ldr	r1, [pc, #344]	; (8014b58 <etharp_find_entry+0x2d4>)
 80149fe:	4613      	mov	r3, r2
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	4413      	add	r3, r2
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	440b      	add	r3, r1
 8014a08:	3312      	adds	r3, #18
 8014a0a:	881b      	ldrh	r3, [r3, #0]
 8014a0c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a0e:	8c3b      	ldrh	r3, [r7, #32]
 8014a10:	3301      	adds	r3, #1
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	843b      	strh	r3, [r7, #32]
 8014a16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a1a:	2b09      	cmp	r3, #9
 8014a1c:	f77f af4c 	ble.w	80148b8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014a20:	7afb      	ldrb	r3, [r7, #11]
 8014a22:	f003 0302 	and.w	r3, r3, #2
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d108      	bne.n	8014a3c <etharp_find_entry+0x1b8>
 8014a2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a2e:	2b0a      	cmp	r3, #10
 8014a30:	d107      	bne.n	8014a42 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014a32:	7afb      	ldrb	r3, [r7, #11]
 8014a34:	f003 0301 	and.w	r3, r3, #1
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d102      	bne.n	8014a42 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a40:	e085      	b.n	8014b4e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014a42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a46:	2b09      	cmp	r3, #9
 8014a48:	dc02      	bgt.n	8014a50 <etharp_find_entry+0x1cc>
    i = empty;
 8014a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a4c:	843b      	strh	r3, [r7, #32]
 8014a4e:	e039      	b.n	8014ac4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014a50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014a54:	2b09      	cmp	r3, #9
 8014a56:	dc14      	bgt.n	8014a82 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a5a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a60:	493d      	ldr	r1, [pc, #244]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	440b      	add	r3, r1
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d018      	beq.n	8014aa4 <etharp_find_entry+0x220>
 8014a72:	4b3a      	ldr	r3, [pc, #232]	; (8014b5c <etharp_find_entry+0x2d8>)
 8014a74:	f240 126d 	movw	r2, #365	; 0x16d
 8014a78:	493b      	ldr	r1, [pc, #236]	; (8014b68 <etharp_find_entry+0x2e4>)
 8014a7a:	483a      	ldr	r0, [pc, #232]	; (8014b64 <etharp_find_entry+0x2e0>)
 8014a7c:	f002 fdf4 	bl	8017668 <iprintf>
 8014a80:	e010      	b.n	8014aa4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014a82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014a86:	2b09      	cmp	r3, #9
 8014a88:	dc02      	bgt.n	8014a90 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014a8c:	843b      	strh	r3, [r7, #32]
 8014a8e:	e009      	b.n	8014aa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014a90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014a94:	2b09      	cmp	r3, #9
 8014a96:	dc02      	bgt.n	8014a9e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014a98:	8bfb      	ldrh	r3, [r7, #30]
 8014a9a:	843b      	strh	r3, [r7, #32]
 8014a9c:	e002      	b.n	8014aa4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aa2:	e054      	b.n	8014b4e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014aa4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014aa8:	2b09      	cmp	r3, #9
 8014aaa:	dd06      	ble.n	8014aba <etharp_find_entry+0x236>
 8014aac:	4b2b      	ldr	r3, [pc, #172]	; (8014b5c <etharp_find_entry+0x2d8>)
 8014aae:	f240 127f 	movw	r2, #383	; 0x17f
 8014ab2:	492e      	ldr	r1, [pc, #184]	; (8014b6c <etharp_find_entry+0x2e8>)
 8014ab4:	482b      	ldr	r0, [pc, #172]	; (8014b64 <etharp_find_entry+0x2e0>)
 8014ab6:	f002 fdd7 	bl	8017668 <iprintf>
    etharp_free_entry(i);
 8014aba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7ff fe06 	bl	80146d0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ac4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ac8:	2b09      	cmp	r3, #9
 8014aca:	dd06      	ble.n	8014ada <etharp_find_entry+0x256>
 8014acc:	4b23      	ldr	r3, [pc, #140]	; (8014b5c <etharp_find_entry+0x2d8>)
 8014ace:	f240 1283 	movw	r2, #387	; 0x183
 8014ad2:	4926      	ldr	r1, [pc, #152]	; (8014b6c <etharp_find_entry+0x2e8>)
 8014ad4:	4823      	ldr	r0, [pc, #140]	; (8014b64 <etharp_find_entry+0x2e0>)
 8014ad6:	f002 fdc7 	bl	8017668 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014ada:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ade:	491e      	ldr	r1, [pc, #120]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	005b      	lsls	r3, r3, #1
 8014ae4:	4413      	add	r3, r2
 8014ae6:	00db      	lsls	r3, r3, #3
 8014ae8:	440b      	add	r3, r1
 8014aea:	3314      	adds	r3, #20
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d006      	beq.n	8014b00 <etharp_find_entry+0x27c>
 8014af2:	4b1a      	ldr	r3, [pc, #104]	; (8014b5c <etharp_find_entry+0x2d8>)
 8014af4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014af8:	491d      	ldr	r1, [pc, #116]	; (8014b70 <etharp_find_entry+0x2ec>)
 8014afa:	481a      	ldr	r0, [pc, #104]	; (8014b64 <etharp_find_entry+0x2e0>)
 8014afc:	f002 fdb4 	bl	8017668 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d00b      	beq.n	8014b1e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014b06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	6819      	ldr	r1, [r3, #0]
 8014b0e:	4812      	ldr	r0, [pc, #72]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014b10:	4613      	mov	r3, r2
 8014b12:	005b      	lsls	r3, r3, #1
 8014b14:	4413      	add	r3, r2
 8014b16:	00db      	lsls	r3, r3, #3
 8014b18:	4403      	add	r3, r0
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014b1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b22:	490d      	ldr	r1, [pc, #52]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014b24:	4613      	mov	r3, r2
 8014b26:	005b      	lsls	r3, r3, #1
 8014b28:	4413      	add	r3, r2
 8014b2a:	00db      	lsls	r3, r3, #3
 8014b2c:	440b      	add	r3, r1
 8014b2e:	3312      	adds	r3, #18
 8014b30:	2200      	movs	r2, #0
 8014b32:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014b34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b38:	4907      	ldr	r1, [pc, #28]	; (8014b58 <etharp_find_entry+0x2d4>)
 8014b3a:	4613      	mov	r3, r2
 8014b3c:	005b      	lsls	r3, r3, #1
 8014b3e:	4413      	add	r3, r2
 8014b40:	00db      	lsls	r3, r3, #3
 8014b42:	440b      	add	r3, r1
 8014b44:	3308      	adds	r3, #8
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014b4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3728      	adds	r7, #40	; 0x28
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	20001264 	.word	0x20001264
 8014b5c:	0801f2fc 	.word	0x0801f2fc
 8014b60:	0801f334 	.word	0x0801f334
 8014b64:	0801f374 	.word	0x0801f374
 8014b68:	0801f39c 	.word	0x0801f39c
 8014b6c:	0801f3b4 	.word	0x0801f3b4
 8014b70:	0801f3c8 	.word	0x0801f3c8

08014b74 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b088      	sub	sp, #32
 8014b78:	af02      	add	r7, sp, #8
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b88:	2b06      	cmp	r3, #6
 8014b8a:	d006      	beq.n	8014b9a <etharp_update_arp_entry+0x26>
 8014b8c:	4b48      	ldr	r3, [pc, #288]	; (8014cb0 <etharp_update_arp_entry+0x13c>)
 8014b8e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014b92:	4948      	ldr	r1, [pc, #288]	; (8014cb4 <etharp_update_arp_entry+0x140>)
 8014b94:	4848      	ldr	r0, [pc, #288]	; (8014cb8 <etharp_update_arp_entry+0x144>)
 8014b96:	f002 fd67 	bl	8017668 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d012      	beq.n	8014bc6 <etharp_update_arp_entry+0x52>
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00e      	beq.n	8014bc6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	68f9      	ldr	r1, [r7, #12]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f001 f937 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 8014bb4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d105      	bne.n	8014bc6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bc2:	2be0      	cmp	r3, #224	; 0xe0
 8014bc4:	d102      	bne.n	8014bcc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014bc6:	f06f 030f 	mvn.w	r3, #15
 8014bca:	e06c      	b.n	8014ca6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014bcc:	78fb      	ldrb	r3, [r7, #3]
 8014bce:	68fa      	ldr	r2, [r7, #12]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	68b8      	ldr	r0, [r7, #8]
 8014bd4:	f7ff fe56 	bl	8014884 <etharp_find_entry>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014bdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	da02      	bge.n	8014bea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014be4:	8afb      	ldrh	r3, [r7, #22]
 8014be6:	b25b      	sxtb	r3, r3
 8014be8:	e05d      	b.n	8014ca6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014bea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bee:	4933      	ldr	r1, [pc, #204]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	005b      	lsls	r3, r3, #1
 8014bf4:	4413      	add	r3, r2
 8014bf6:	00db      	lsls	r3, r3, #3
 8014bf8:	440b      	add	r3, r1
 8014bfa:	3314      	adds	r3, #20
 8014bfc:	2202      	movs	r2, #2
 8014bfe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014c00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c04:	492d      	ldr	r1, [pc, #180]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c06:	4613      	mov	r3, r2
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	4413      	add	r3, r2
 8014c0c:	00db      	lsls	r3, r3, #3
 8014c0e:	440b      	add	r3, r1
 8014c10:	3308      	adds	r3, #8
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014c16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c1a:	4613      	mov	r3, r2
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	4413      	add	r3, r2
 8014c20:	00db      	lsls	r3, r3, #3
 8014c22:	3308      	adds	r3, #8
 8014c24:	4a25      	ldr	r2, [pc, #148]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c26:	4413      	add	r3, r2
 8014c28:	3304      	adds	r3, #4
 8014c2a:	2206      	movs	r2, #6
 8014c2c:	6879      	ldr	r1, [r7, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f002 f880 	bl	8016d34 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014c34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c38:	4920      	ldr	r1, [pc, #128]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	4413      	add	r3, r2
 8014c40:	00db      	lsls	r3, r3, #3
 8014c42:	440b      	add	r3, r1
 8014c44:	3312      	adds	r3, #18
 8014c46:	2200      	movs	r2, #0
 8014c48:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014c4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c4e:	491b      	ldr	r1, [pc, #108]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	440b      	add	r3, r1
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d021      	beq.n	8014ca4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014c60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c64:	4915      	ldr	r1, [pc, #84]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c66:	4613      	mov	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	440b      	add	r3, r1
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014c74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c78:	4910      	ldr	r1, [pc, #64]	; (8014cbc <etharp_update_arp_entry+0x148>)
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	005b      	lsls	r3, r3, #1
 8014c7e:	4413      	add	r3, r2
 8014c80:	00db      	lsls	r3, r3, #3
 8014c82:	440b      	add	r3, r1
 8014c84:	2200      	movs	r2, #0
 8014c86:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6939      	ldr	r1, [r7, #16]
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f001 ffc9 	bl	8016c30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014c9e:	6938      	ldr	r0, [r7, #16]
 8014ca0:	f7f6 fcea 	bl	800b678 <pbuf_free>
  }
  return ERR_OK;
 8014ca4:	2300      	movs	r3, #0
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	0801f2fc 	.word	0x0801f2fc
 8014cb4:	0801f3f4 	.word	0x0801f3f4
 8014cb8:	0801f374 	.word	0x0801f374
 8014cbc:	20001264 	.word	0x20001264

08014cc0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cc8:	2300      	movs	r3, #0
 8014cca:	60fb      	str	r3, [r7, #12]
 8014ccc:	e01e      	b.n	8014d0c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014cce:	4913      	ldr	r1, [pc, #76]	; (8014d1c <etharp_cleanup_netif+0x5c>)
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	4413      	add	r3, r2
 8014cd8:	00db      	lsls	r3, r3, #3
 8014cda:	440b      	add	r3, r1
 8014cdc:	3314      	adds	r3, #20
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014ce2:	7afb      	ldrb	r3, [r7, #11]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00e      	beq.n	8014d06 <etharp_cleanup_netif+0x46>
 8014ce8:	490c      	ldr	r1, [pc, #48]	; (8014d1c <etharp_cleanup_netif+0x5c>)
 8014cea:	68fa      	ldr	r2, [r7, #12]
 8014cec:	4613      	mov	r3, r2
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	4413      	add	r3, r2
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	440b      	add	r3, r1
 8014cf6:	3308      	adds	r3, #8
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d102      	bne.n	8014d06 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f7ff fce5 	bl	80146d0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	60fb      	str	r3, [r7, #12]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b09      	cmp	r3, #9
 8014d10:	dddd      	ble.n	8014cce <etharp_cleanup_netif+0xe>
    }
  }
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}
 8014d1c:	20001264 	.word	0x20001264

08014d20 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014d20:	b5b0      	push	{r4, r5, r7, lr}
 8014d22:	b08a      	sub	sp, #40	; 0x28
 8014d24:	af04      	add	r7, sp, #16
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d107      	bne.n	8014d40 <etharp_input+0x20>
 8014d30:	4b3f      	ldr	r3, [pc, #252]	; (8014e30 <etharp_input+0x110>)
 8014d32:	f240 228a 	movw	r2, #650	; 0x28a
 8014d36:	493f      	ldr	r1, [pc, #252]	; (8014e34 <etharp_input+0x114>)
 8014d38:	483f      	ldr	r0, [pc, #252]	; (8014e38 <etharp_input+0x118>)
 8014d3a:	f002 fc95 	bl	8017668 <iprintf>
 8014d3e:	e074      	b.n	8014e2a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d50:	d10c      	bne.n	8014d6c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d56:	2b06      	cmp	r3, #6
 8014d58:	d108      	bne.n	8014d6c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d5e:	2b04      	cmp	r3, #4
 8014d60:	d104      	bne.n	8014d6c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	885b      	ldrh	r3, [r3, #2]
 8014d66:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d68:	2b08      	cmp	r3, #8
 8014d6a:	d003      	beq.n	8014d74 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7f6 fc83 	bl	800b678 <pbuf_free>
    return;
 8014d72:	e05a      	b.n	8014e2a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	330e      	adds	r3, #14
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	3318      	adds	r3, #24
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	3304      	adds	r3, #4
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d102      	bne.n	8014d94 <etharp_input+0x74>
    for_us = 0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	75fb      	strb	r3, [r7, #23]
 8014d92:	e009      	b.n	8014da8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	3304      	adds	r3, #4
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	bf0c      	ite	eq
 8014da0:	2301      	moveq	r3, #1
 8014da2:	2300      	movne	r3, #0
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	f103 0208 	add.w	r2, r3, #8
 8014dae:	7dfb      	ldrb	r3, [r7, #23]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d001      	beq.n	8014db8 <etharp_input+0x98>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <etharp_input+0x9a>
 8014db8:	2302      	movs	r3, #2
 8014dba:	f107 010c 	add.w	r1, r7, #12
 8014dbe:	6838      	ldr	r0, [r7, #0]
 8014dc0:	f7ff fed8 	bl	8014b74 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	88db      	ldrh	r3, [r3, #6]
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014dce:	d003      	beq.n	8014dd8 <etharp_input+0xb8>
 8014dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dd4:	d01e      	beq.n	8014e14 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014dd6:	e025      	b.n	8014e24 <etharp_input+0x104>
      if (for_us) {
 8014dd8:	7dfb      	ldrb	r3, [r7, #23]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d021      	beq.n	8014e22 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014df4:	693a      	ldr	r2, [r7, #16]
 8014df6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014df8:	2102      	movs	r1, #2
 8014dfa:	9103      	str	r1, [sp, #12]
 8014dfc:	f107 010c 	add.w	r1, r7, #12
 8014e00:	9102      	str	r1, [sp, #8]
 8014e02:	9201      	str	r2, [sp, #4]
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	462b      	mov	r3, r5
 8014e08:	4622      	mov	r2, r4
 8014e0a:	4601      	mov	r1, r0
 8014e0c:	6838      	ldr	r0, [r7, #0]
 8014e0e:	f000 faef 	bl	80153f0 <etharp_raw>
      break;
 8014e12:	e006      	b.n	8014e22 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014e14:	f107 030c 	add.w	r3, r7, #12
 8014e18:	4619      	mov	r1, r3
 8014e1a:	6838      	ldr	r0, [r7, #0]
 8014e1c:	f7fe f9fc 	bl	8013218 <dhcp_arp_reply>
      break;
 8014e20:	e000      	b.n	8014e24 <etharp_input+0x104>
      break;
 8014e22:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f7f6 fc27 	bl	800b678 <pbuf_free>
}
 8014e2a:	3718      	adds	r7, #24
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8014e30:	0801f2fc 	.word	0x0801f2fc
 8014e34:	0801f44c 	.word	0x0801f44c
 8014e38:	0801f374 	.word	0x0801f374

08014e3c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af02      	add	r7, sp, #8
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
 8014e46:	4613      	mov	r3, r2
 8014e48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014e4a:	79fa      	ldrb	r2, [r7, #7]
 8014e4c:	4944      	ldr	r1, [pc, #272]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014e4e:	4613      	mov	r3, r2
 8014e50:	005b      	lsls	r3, r3, #1
 8014e52:	4413      	add	r3, r2
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	440b      	add	r3, r1
 8014e58:	3314      	adds	r3, #20
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d806      	bhi.n	8014e6e <etharp_output_to_arp_index+0x32>
 8014e60:	4b40      	ldr	r3, [pc, #256]	; (8014f64 <etharp_output_to_arp_index+0x128>)
 8014e62:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014e66:	4940      	ldr	r1, [pc, #256]	; (8014f68 <etharp_output_to_arp_index+0x12c>)
 8014e68:	4840      	ldr	r0, [pc, #256]	; (8014f6c <etharp_output_to_arp_index+0x130>)
 8014e6a:	f002 fbfd 	bl	8017668 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014e6e:	79fa      	ldrb	r2, [r7, #7]
 8014e70:	493b      	ldr	r1, [pc, #236]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014e72:	4613      	mov	r3, r2
 8014e74:	005b      	lsls	r3, r3, #1
 8014e76:	4413      	add	r3, r2
 8014e78:	00db      	lsls	r3, r3, #3
 8014e7a:	440b      	add	r3, r1
 8014e7c:	3314      	adds	r3, #20
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d153      	bne.n	8014f2c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014e84:	79fa      	ldrb	r2, [r7, #7]
 8014e86:	4936      	ldr	r1, [pc, #216]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014e88:	4613      	mov	r3, r2
 8014e8a:	005b      	lsls	r3, r3, #1
 8014e8c:	4413      	add	r3, r2
 8014e8e:	00db      	lsls	r3, r3, #3
 8014e90:	440b      	add	r3, r1
 8014e92:	3312      	adds	r3, #18
 8014e94:	881b      	ldrh	r3, [r3, #0]
 8014e96:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014e9a:	d919      	bls.n	8014ed0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014e9c:	79fa      	ldrb	r2, [r7, #7]
 8014e9e:	4613      	mov	r3, r2
 8014ea0:	005b      	lsls	r3, r3, #1
 8014ea2:	4413      	add	r3, r2
 8014ea4:	00db      	lsls	r3, r3, #3
 8014ea6:	4a2e      	ldr	r2, [pc, #184]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014ea8:	4413      	add	r3, r2
 8014eaa:	3304      	adds	r3, #4
 8014eac:	4619      	mov	r1, r3
 8014eae:	68f8      	ldr	r0, [r7, #12]
 8014eb0:	f000 fb4c 	bl	801554c <etharp_request>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d138      	bne.n	8014f2c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014eba:	79fa      	ldrb	r2, [r7, #7]
 8014ebc:	4928      	ldr	r1, [pc, #160]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014ebe:	4613      	mov	r3, r2
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	4413      	add	r3, r2
 8014ec4:	00db      	lsls	r3, r3, #3
 8014ec6:	440b      	add	r3, r1
 8014ec8:	3314      	adds	r3, #20
 8014eca:	2203      	movs	r2, #3
 8014ecc:	701a      	strb	r2, [r3, #0]
 8014ece:	e02d      	b.n	8014f2c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014ed0:	79fa      	ldrb	r2, [r7, #7]
 8014ed2:	4923      	ldr	r1, [pc, #140]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	440b      	add	r3, r1
 8014ede:	3312      	adds	r3, #18
 8014ee0:	881b      	ldrh	r3, [r3, #0]
 8014ee2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014ee6:	d321      	bcc.n	8014f2c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014ee8:	79fa      	ldrb	r2, [r7, #7]
 8014eea:	4613      	mov	r3, r2
 8014eec:	005b      	lsls	r3, r3, #1
 8014eee:	4413      	add	r3, r2
 8014ef0:	00db      	lsls	r3, r3, #3
 8014ef2:	4a1b      	ldr	r2, [pc, #108]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014ef4:	4413      	add	r3, r2
 8014ef6:	1d19      	adds	r1, r3, #4
 8014ef8:	79fa      	ldrb	r2, [r7, #7]
 8014efa:	4613      	mov	r3, r2
 8014efc:	005b      	lsls	r3, r3, #1
 8014efe:	4413      	add	r3, r2
 8014f00:	00db      	lsls	r3, r3, #3
 8014f02:	3308      	adds	r3, #8
 8014f04:	4a16      	ldr	r2, [pc, #88]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014f06:	4413      	add	r3, r2
 8014f08:	3304      	adds	r3, #4
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 fafb 	bl	8015508 <etharp_request_dst>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d109      	bne.n	8014f2c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f18:	79fa      	ldrb	r2, [r7, #7]
 8014f1a:	4911      	ldr	r1, [pc, #68]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	4413      	add	r3, r2
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	440b      	add	r3, r1
 8014f26:	3314      	adds	r3, #20
 8014f28:	2203      	movs	r2, #3
 8014f2a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014f32:	79fa      	ldrb	r2, [r7, #7]
 8014f34:	4613      	mov	r3, r2
 8014f36:	005b      	lsls	r3, r3, #1
 8014f38:	4413      	add	r3, r2
 8014f3a:	00db      	lsls	r3, r3, #3
 8014f3c:	3308      	adds	r3, #8
 8014f3e:	4a08      	ldr	r2, [pc, #32]	; (8014f60 <etharp_output_to_arp_index+0x124>)
 8014f40:	4413      	add	r3, r2
 8014f42:	3304      	adds	r3, #4
 8014f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f48:	9200      	str	r2, [sp, #0]
 8014f4a:	460a      	mov	r2, r1
 8014f4c:	68b9      	ldr	r1, [r7, #8]
 8014f4e:	68f8      	ldr	r0, [r7, #12]
 8014f50:	f001 fe6e 	bl	8016c30 <ethernet_output>
 8014f54:	4603      	mov	r3, r0
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3710      	adds	r7, #16
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	20001264 	.word	0x20001264
 8014f64:	0801f2fc 	.word	0x0801f2fc
 8014f68:	0801f46c 	.word	0x0801f46c
 8014f6c:	0801f374 	.word	0x0801f374

08014f70 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08a      	sub	sp, #40	; 0x28
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d106      	bne.n	8014f94 <etharp_output+0x24>
 8014f86:	4b73      	ldr	r3, [pc, #460]	; (8015154 <etharp_output+0x1e4>)
 8014f88:	f240 321e 	movw	r2, #798	; 0x31e
 8014f8c:	4972      	ldr	r1, [pc, #456]	; (8015158 <etharp_output+0x1e8>)
 8014f8e:	4873      	ldr	r0, [pc, #460]	; (801515c <etharp_output+0x1ec>)
 8014f90:	f002 fb6a 	bl	8017668 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d106      	bne.n	8014fa8 <etharp_output+0x38>
 8014f9a:	4b6e      	ldr	r3, [pc, #440]	; (8015154 <etharp_output+0x1e4>)
 8014f9c:	f240 321f 	movw	r2, #799	; 0x31f
 8014fa0:	496f      	ldr	r1, [pc, #444]	; (8015160 <etharp_output+0x1f0>)
 8014fa2:	486e      	ldr	r0, [pc, #440]	; (801515c <etharp_output+0x1ec>)
 8014fa4:	f002 fb60 	bl	8017668 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d106      	bne.n	8014fbc <etharp_output+0x4c>
 8014fae:	4b69      	ldr	r3, [pc, #420]	; (8015154 <etharp_output+0x1e4>)
 8014fb0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014fb4:	496b      	ldr	r1, [pc, #428]	; (8015164 <etharp_output+0x1f4>)
 8014fb6:	4869      	ldr	r0, [pc, #420]	; (801515c <etharp_output+0x1ec>)
 8014fb8:	f002 fb56 	bl	8017668 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	68f9      	ldr	r1, [r7, #12]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f000 ff2d 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d002      	beq.n	8014fd4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014fce:	4b66      	ldr	r3, [pc, #408]	; (8015168 <etharp_output+0x1f8>)
 8014fd0:	61fb      	str	r3, [r7, #28]
 8014fd2:	e0af      	b.n	8015134 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014fdc:	2be0      	cmp	r3, #224	; 0xe0
 8014fde:	d118      	bne.n	8015012 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014fe8:	235e      	movs	r3, #94	; 0x5e
 8014fea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	781b      	ldrb	r3, [r3, #0]
 8014ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ff6:	b2db      	uxtb	r3, r3
 8014ff8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	3303      	adds	r3, #3
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801500a:	f107 0310 	add.w	r3, r7, #16
 801500e:	61fb      	str	r3, [r7, #28]
 8015010:	e090      	b.n	8015134 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	3304      	adds	r3, #4
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	405a      	eors	r2, r3
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	3308      	adds	r3, #8
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4013      	ands	r3, r2
 8015026:	2b00      	cmp	r3, #0
 8015028:	d012      	beq.n	8015050 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015030:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015034:	4293      	cmp	r3, r2
 8015036:	d00b      	beq.n	8015050 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	330c      	adds	r3, #12
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d003      	beq.n	801504a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	330c      	adds	r3, #12
 8015046:	61bb      	str	r3, [r7, #24]
 8015048:	e002      	b.n	8015050 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801504a:	f06f 0303 	mvn.w	r3, #3
 801504e:	e07d      	b.n	801514c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015050:	4b46      	ldr	r3, [pc, #280]	; (801516c <etharp_output+0x1fc>)
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	4619      	mov	r1, r3
 8015056:	4a46      	ldr	r2, [pc, #280]	; (8015170 <etharp_output+0x200>)
 8015058:	460b      	mov	r3, r1
 801505a:	005b      	lsls	r3, r3, #1
 801505c:	440b      	add	r3, r1
 801505e:	00db      	lsls	r3, r3, #3
 8015060:	4413      	add	r3, r2
 8015062:	3314      	adds	r3, #20
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	2b01      	cmp	r3, #1
 8015068:	d925      	bls.n	80150b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801506a:	4b40      	ldr	r3, [pc, #256]	; (801516c <etharp_output+0x1fc>)
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	4619      	mov	r1, r3
 8015070:	4a3f      	ldr	r2, [pc, #252]	; (8015170 <etharp_output+0x200>)
 8015072:	460b      	mov	r3, r1
 8015074:	005b      	lsls	r3, r3, #1
 8015076:	440b      	add	r3, r1
 8015078:	00db      	lsls	r3, r3, #3
 801507a:	4413      	add	r3, r2
 801507c:	3308      	adds	r3, #8
 801507e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	429a      	cmp	r2, r3
 8015084:	d117      	bne.n	80150b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	4b38      	ldr	r3, [pc, #224]	; (801516c <etharp_output+0x1fc>)
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	4618      	mov	r0, r3
 8015090:	4937      	ldr	r1, [pc, #220]	; (8015170 <etharp_output+0x200>)
 8015092:	4603      	mov	r3, r0
 8015094:	005b      	lsls	r3, r3, #1
 8015096:	4403      	add	r3, r0
 8015098:	00db      	lsls	r3, r3, #3
 801509a:	440b      	add	r3, r1
 801509c:	3304      	adds	r3, #4
 801509e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d108      	bne.n	80150b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80150a4:	4b31      	ldr	r3, [pc, #196]	; (801516c <etharp_output+0x1fc>)
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	461a      	mov	r2, r3
 80150aa:	68b9      	ldr	r1, [r7, #8]
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	f7ff fec5 	bl	8014e3c <etharp_output_to_arp_index>
 80150b2:	4603      	mov	r3, r0
 80150b4:	e04a      	b.n	801514c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80150b6:	2300      	movs	r3, #0
 80150b8:	75fb      	strb	r3, [r7, #23]
 80150ba:	e031      	b.n	8015120 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80150bc:	7dfa      	ldrb	r2, [r7, #23]
 80150be:	492c      	ldr	r1, [pc, #176]	; (8015170 <etharp_output+0x200>)
 80150c0:	4613      	mov	r3, r2
 80150c2:	005b      	lsls	r3, r3, #1
 80150c4:	4413      	add	r3, r2
 80150c6:	00db      	lsls	r3, r3, #3
 80150c8:	440b      	add	r3, r1
 80150ca:	3314      	adds	r3, #20
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	d923      	bls.n	801511a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80150d2:	7dfa      	ldrb	r2, [r7, #23]
 80150d4:	4926      	ldr	r1, [pc, #152]	; (8015170 <etharp_output+0x200>)
 80150d6:	4613      	mov	r3, r2
 80150d8:	005b      	lsls	r3, r3, #1
 80150da:	4413      	add	r3, r2
 80150dc:	00db      	lsls	r3, r3, #3
 80150de:	440b      	add	r3, r1
 80150e0:	3308      	adds	r3, #8
 80150e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d117      	bne.n	801511a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80150ea:	69bb      	ldr	r3, [r7, #24]
 80150ec:	6819      	ldr	r1, [r3, #0]
 80150ee:	7dfa      	ldrb	r2, [r7, #23]
 80150f0:	481f      	ldr	r0, [pc, #124]	; (8015170 <etharp_output+0x200>)
 80150f2:	4613      	mov	r3, r2
 80150f4:	005b      	lsls	r3, r3, #1
 80150f6:	4413      	add	r3, r2
 80150f8:	00db      	lsls	r3, r3, #3
 80150fa:	4403      	add	r3, r0
 80150fc:	3304      	adds	r3, #4
 80150fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015100:	4299      	cmp	r1, r3
 8015102:	d10a      	bne.n	801511a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015104:	4a19      	ldr	r2, [pc, #100]	; (801516c <etharp_output+0x1fc>)
 8015106:	7dfb      	ldrb	r3, [r7, #23]
 8015108:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801510a:	7dfb      	ldrb	r3, [r7, #23]
 801510c:	461a      	mov	r2, r3
 801510e:	68b9      	ldr	r1, [r7, #8]
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	f7ff fe93 	bl	8014e3c <etharp_output_to_arp_index>
 8015116:	4603      	mov	r3, r0
 8015118:	e018      	b.n	801514c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801511a:	7dfb      	ldrb	r3, [r7, #23]
 801511c:	3301      	adds	r3, #1
 801511e:	75fb      	strb	r3, [r7, #23]
 8015120:	7dfb      	ldrb	r3, [r7, #23]
 8015122:	2b09      	cmp	r3, #9
 8015124:	d9ca      	bls.n	80150bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015126:	68ba      	ldr	r2, [r7, #8]
 8015128:	69b9      	ldr	r1, [r7, #24]
 801512a:	68f8      	ldr	r0, [r7, #12]
 801512c:	f000 f822 	bl	8015174 <etharp_query>
 8015130:	4603      	mov	r3, r0
 8015132:	e00b      	b.n	801514c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801513a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	69fb      	ldr	r3, [r7, #28]
 8015142:	68b9      	ldr	r1, [r7, #8]
 8015144:	68f8      	ldr	r0, [r7, #12]
 8015146:	f001 fd73 	bl	8016c30 <ethernet_output>
 801514a:	4603      	mov	r3, r0
}
 801514c:	4618      	mov	r0, r3
 801514e:	3720      	adds	r7, #32
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	0801f2fc 	.word	0x0801f2fc
 8015158:	0801f44c 	.word	0x0801f44c
 801515c:	0801f374 	.word	0x0801f374
 8015160:	0801f49c 	.word	0x0801f49c
 8015164:	0801f43c 	.word	0x0801f43c
 8015168:	08033a20 	.word	0x08033a20
 801516c:	20001354 	.word	0x20001354
 8015170:	20001264 	.word	0x20001264

08015174 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08c      	sub	sp, #48	; 0x30
 8015178:	af02      	add	r7, sp, #8
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	332a      	adds	r3, #42	; 0x2a
 8015184:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015186:	23ff      	movs	r3, #255	; 0xff
 8015188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801518c:	2300      	movs	r3, #0
 801518e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	68f9      	ldr	r1, [r7, #12]
 8015196:	4618      	mov	r0, r3
 8015198:	f000 fe43 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 801519c:	4603      	mov	r3, r0
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d10c      	bne.n	80151bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80151aa:	2be0      	cmp	r3, #224	; 0xe0
 80151ac:	d006      	beq.n	80151bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d003      	beq.n	80151bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d102      	bne.n	80151c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80151bc:	f06f 030f 	mvn.w	r3, #15
 80151c0:	e101      	b.n	80153c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	2101      	movs	r1, #1
 80151c6:	68b8      	ldr	r0, [r7, #8]
 80151c8:	f7ff fb5c 	bl	8014884 <etharp_find_entry>
 80151cc:	4603      	mov	r3, r0
 80151ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80151d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	da02      	bge.n	80151de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80151d8:	8a7b      	ldrh	r3, [r7, #18]
 80151da:	b25b      	sxtb	r3, r3
 80151dc:	e0f3      	b.n	80153c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80151de:	8a7b      	ldrh	r3, [r7, #18]
 80151e0:	2b7e      	cmp	r3, #126	; 0x7e
 80151e2:	d906      	bls.n	80151f2 <etharp_query+0x7e>
 80151e4:	4b7a      	ldr	r3, [pc, #488]	; (80153d0 <etharp_query+0x25c>)
 80151e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80151ea:	497a      	ldr	r1, [pc, #488]	; (80153d4 <etharp_query+0x260>)
 80151ec:	487a      	ldr	r0, [pc, #488]	; (80153d8 <etharp_query+0x264>)
 80151ee:	f002 fa3b 	bl	8017668 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80151f2:	8a7b      	ldrh	r3, [r7, #18]
 80151f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80151f6:	7c7a      	ldrb	r2, [r7, #17]
 80151f8:	4978      	ldr	r1, [pc, #480]	; (80153dc <etharp_query+0x268>)
 80151fa:	4613      	mov	r3, r2
 80151fc:	005b      	lsls	r3, r3, #1
 80151fe:	4413      	add	r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	440b      	add	r3, r1
 8015204:	3314      	adds	r3, #20
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d115      	bne.n	8015238 <etharp_query+0xc4>
    is_new_entry = 1;
 801520c:	2301      	movs	r3, #1
 801520e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015210:	7c7a      	ldrb	r2, [r7, #17]
 8015212:	4972      	ldr	r1, [pc, #456]	; (80153dc <etharp_query+0x268>)
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	440b      	add	r3, r1
 801521e:	3314      	adds	r3, #20
 8015220:	2201      	movs	r2, #1
 8015222:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015224:	7c7a      	ldrb	r2, [r7, #17]
 8015226:	496d      	ldr	r1, [pc, #436]	; (80153dc <etharp_query+0x268>)
 8015228:	4613      	mov	r3, r2
 801522a:	005b      	lsls	r3, r3, #1
 801522c:	4413      	add	r3, r2
 801522e:	00db      	lsls	r3, r3, #3
 8015230:	440b      	add	r3, r1
 8015232:	3308      	adds	r3, #8
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015238:	7c7a      	ldrb	r2, [r7, #17]
 801523a:	4968      	ldr	r1, [pc, #416]	; (80153dc <etharp_query+0x268>)
 801523c:	4613      	mov	r3, r2
 801523e:	005b      	lsls	r3, r3, #1
 8015240:	4413      	add	r3, r2
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	440b      	add	r3, r1
 8015246:	3314      	adds	r3, #20
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	2b01      	cmp	r3, #1
 801524c:	d011      	beq.n	8015272 <etharp_query+0xfe>
 801524e:	7c7a      	ldrb	r2, [r7, #17]
 8015250:	4962      	ldr	r1, [pc, #392]	; (80153dc <etharp_query+0x268>)
 8015252:	4613      	mov	r3, r2
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	4413      	add	r3, r2
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	440b      	add	r3, r1
 801525c:	3314      	adds	r3, #20
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	2b01      	cmp	r3, #1
 8015262:	d806      	bhi.n	8015272 <etharp_query+0xfe>
 8015264:	4b5a      	ldr	r3, [pc, #360]	; (80153d0 <etharp_query+0x25c>)
 8015266:	f240 32cd 	movw	r2, #973	; 0x3cd
 801526a:	495d      	ldr	r1, [pc, #372]	; (80153e0 <etharp_query+0x26c>)
 801526c:	485a      	ldr	r0, [pc, #360]	; (80153d8 <etharp_query+0x264>)
 801526e:	f002 f9fb 	bl	8017668 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015272:	6a3b      	ldr	r3, [r7, #32]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d102      	bne.n	801527e <etharp_query+0x10a>
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d10c      	bne.n	8015298 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801527e:	68b9      	ldr	r1, [r7, #8]
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f000 f963 	bl	801554c <etharp_request>
 8015286:	4603      	mov	r3, r0
 8015288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d102      	bne.n	8015298 <etharp_query+0x124>
      return result;
 8015292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015296:	e096      	b.n	80153c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d106      	bne.n	80152ac <etharp_query+0x138>
 801529e:	4b4c      	ldr	r3, [pc, #304]	; (80153d0 <etharp_query+0x25c>)
 80152a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80152a4:	494f      	ldr	r1, [pc, #316]	; (80153e4 <etharp_query+0x270>)
 80152a6:	484c      	ldr	r0, [pc, #304]	; (80153d8 <etharp_query+0x264>)
 80152a8:	f002 f9de 	bl	8017668 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80152ac:	7c7a      	ldrb	r2, [r7, #17]
 80152ae:	494b      	ldr	r1, [pc, #300]	; (80153dc <etharp_query+0x268>)
 80152b0:	4613      	mov	r3, r2
 80152b2:	005b      	lsls	r3, r3, #1
 80152b4:	4413      	add	r3, r2
 80152b6:	00db      	lsls	r3, r3, #3
 80152b8:	440b      	add	r3, r1
 80152ba:	3314      	adds	r3, #20
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d917      	bls.n	80152f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80152c2:	4a49      	ldr	r2, [pc, #292]	; (80153e8 <etharp_query+0x274>)
 80152c4:	7c7b      	ldrb	r3, [r7, #17]
 80152c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80152c8:	7c7a      	ldrb	r2, [r7, #17]
 80152ca:	4613      	mov	r3, r2
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	4413      	add	r3, r2
 80152d0:	00db      	lsls	r3, r3, #3
 80152d2:	3308      	adds	r3, #8
 80152d4:	4a41      	ldr	r2, [pc, #260]	; (80153dc <etharp_query+0x268>)
 80152d6:	4413      	add	r3, r2
 80152d8:	3304      	adds	r3, #4
 80152da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152de:	9200      	str	r2, [sp, #0]
 80152e0:	697a      	ldr	r2, [r7, #20]
 80152e2:	6879      	ldr	r1, [r7, #4]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f001 fca3 	bl	8016c30 <ethernet_output>
 80152ea:	4603      	mov	r3, r0
 80152ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152f0:	e067      	b.n	80153c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80152f2:	7c7a      	ldrb	r2, [r7, #17]
 80152f4:	4939      	ldr	r1, [pc, #228]	; (80153dc <etharp_query+0x268>)
 80152f6:	4613      	mov	r3, r2
 80152f8:	005b      	lsls	r3, r3, #1
 80152fa:	4413      	add	r3, r2
 80152fc:	00db      	lsls	r3, r3, #3
 80152fe:	440b      	add	r3, r1
 8015300:	3314      	adds	r3, #20
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	2b01      	cmp	r3, #1
 8015306:	d15c      	bne.n	80153c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015308:	2300      	movs	r3, #0
 801530a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015310:	e01c      	b.n	801534c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	895a      	ldrh	r2, [r3, #10]
 8015316:	69fb      	ldr	r3, [r7, #28]
 8015318:	891b      	ldrh	r3, [r3, #8]
 801531a:	429a      	cmp	r2, r3
 801531c:	d10a      	bne.n	8015334 <etharp_query+0x1c0>
 801531e:	69fb      	ldr	r3, [r7, #28]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d006      	beq.n	8015334 <etharp_query+0x1c0>
 8015326:	4b2a      	ldr	r3, [pc, #168]	; (80153d0 <etharp_query+0x25c>)
 8015328:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801532c:	492f      	ldr	r1, [pc, #188]	; (80153ec <etharp_query+0x278>)
 801532e:	482a      	ldr	r0, [pc, #168]	; (80153d8 <etharp_query+0x264>)
 8015330:	f002 f99a 	bl	8017668 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	7b1b      	ldrb	r3, [r3, #12]
 8015338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801533c:	2b00      	cmp	r3, #0
 801533e:	d002      	beq.n	8015346 <etharp_query+0x1d2>
        copy_needed = 1;
 8015340:	2301      	movs	r3, #1
 8015342:	61bb      	str	r3, [r7, #24]
        break;
 8015344:	e005      	b.n	8015352 <etharp_query+0x1de>
      }
      p = p->next;
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d1df      	bne.n	8015312 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d007      	beq.n	8015368 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801535e:	200e      	movs	r0, #14
 8015360:	f7f6 fbf6 	bl	800bb50 <pbuf_clone>
 8015364:	61f8      	str	r0, [r7, #28]
 8015366:	e004      	b.n	8015372 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801536c:	69f8      	ldr	r0, [r7, #28]
 801536e:	f7f6 fa23 	bl	800b7b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d021      	beq.n	80153bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015378:	7c7a      	ldrb	r2, [r7, #17]
 801537a:	4918      	ldr	r1, [pc, #96]	; (80153dc <etharp_query+0x268>)
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	440b      	add	r3, r1
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00a      	beq.n	80153a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801538c:	7c7a      	ldrb	r2, [r7, #17]
 801538e:	4913      	ldr	r1, [pc, #76]	; (80153dc <etharp_query+0x268>)
 8015390:	4613      	mov	r3, r2
 8015392:	005b      	lsls	r3, r3, #1
 8015394:	4413      	add	r3, r2
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	440b      	add	r3, r1
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	4618      	mov	r0, r3
 801539e:	f7f6 f96b 	bl	800b678 <pbuf_free>
      }
      arp_table[i].q = p;
 80153a2:	7c7a      	ldrb	r2, [r7, #17]
 80153a4:	490d      	ldr	r1, [pc, #52]	; (80153dc <etharp_query+0x268>)
 80153a6:	4613      	mov	r3, r2
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4413      	add	r3, r2
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	440b      	add	r3, r1
 80153b0:	69fa      	ldr	r2, [r7, #28]
 80153b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80153b4:	2300      	movs	r3, #0
 80153b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80153ba:	e002      	b.n	80153c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80153bc:	23ff      	movs	r3, #255	; 0xff
 80153be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80153c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3728      	adds	r7, #40	; 0x28
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	0801f2fc 	.word	0x0801f2fc
 80153d4:	0801f4a8 	.word	0x0801f4a8
 80153d8:	0801f374 	.word	0x0801f374
 80153dc:	20001264 	.word	0x20001264
 80153e0:	0801f4b8 	.word	0x0801f4b8
 80153e4:	0801f49c 	.word	0x0801f49c
 80153e8:	20001354 	.word	0x20001354
 80153ec:	0801f4e0 	.word	0x0801f4e0

080153f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b08a      	sub	sp, #40	; 0x28
 80153f4:	af02      	add	r7, sp, #8
 80153f6:	60f8      	str	r0, [r7, #12]
 80153f8:	60b9      	str	r1, [r7, #8]
 80153fa:	607a      	str	r2, [r7, #4]
 80153fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80153fe:	2300      	movs	r3, #0
 8015400:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d106      	bne.n	8015416 <etharp_raw+0x26>
 8015408:	4b3a      	ldr	r3, [pc, #232]	; (80154f4 <etharp_raw+0x104>)
 801540a:	f240 4257 	movw	r2, #1111	; 0x457
 801540e:	493a      	ldr	r1, [pc, #232]	; (80154f8 <etharp_raw+0x108>)
 8015410:	483a      	ldr	r0, [pc, #232]	; (80154fc <etharp_raw+0x10c>)
 8015412:	f002 f929 	bl	8017668 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015416:	f44f 7220 	mov.w	r2, #640	; 0x280
 801541a:	211c      	movs	r1, #28
 801541c:	200e      	movs	r0, #14
 801541e:	f7f5 fe47 	bl	800b0b0 <pbuf_alloc>
 8015422:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d102      	bne.n	8015430 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801542a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801542e:	e05d      	b.n	80154ec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	895b      	ldrh	r3, [r3, #10]
 8015434:	2b1b      	cmp	r3, #27
 8015436:	d806      	bhi.n	8015446 <etharp_raw+0x56>
 8015438:	4b2e      	ldr	r3, [pc, #184]	; (80154f4 <etharp_raw+0x104>)
 801543a:	f240 4262 	movw	r2, #1122	; 0x462
 801543e:	4930      	ldr	r1, [pc, #192]	; (8015500 <etharp_raw+0x110>)
 8015440:	482e      	ldr	r0, [pc, #184]	; (80154fc <etharp_raw+0x10c>)
 8015442:	f002 f911 	bl	8017668 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015446:	69bb      	ldr	r3, [r7, #24]
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801544c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801544e:	4618      	mov	r0, r3
 8015450:	f7f4 fd78 	bl	8009f44 <lwip_htons>
 8015454:	4603      	mov	r3, r0
 8015456:	461a      	mov	r2, r3
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015462:	2b06      	cmp	r3, #6
 8015464:	d006      	beq.n	8015474 <etharp_raw+0x84>
 8015466:	4b23      	ldr	r3, [pc, #140]	; (80154f4 <etharp_raw+0x104>)
 8015468:	f240 4269 	movw	r2, #1129	; 0x469
 801546c:	4925      	ldr	r1, [pc, #148]	; (8015504 <etharp_raw+0x114>)
 801546e:	4823      	ldr	r0, [pc, #140]	; (80154fc <etharp_raw+0x10c>)
 8015470:	f002 f8fa 	bl	8017668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	3308      	adds	r3, #8
 8015478:	2206      	movs	r2, #6
 801547a:	6839      	ldr	r1, [r7, #0]
 801547c:	4618      	mov	r0, r3
 801547e:	f001 fc59 	bl	8016d34 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	3312      	adds	r3, #18
 8015486:	2206      	movs	r2, #6
 8015488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801548a:	4618      	mov	r0, r3
 801548c:	f001 fc52 	bl	8016d34 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	330e      	adds	r3, #14
 8015494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015496:	6812      	ldr	r2, [r2, #0]
 8015498:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	3318      	adds	r3, #24
 801549e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154a0:	6812      	ldr	r2, [r2, #0]
 80154a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f042 0201 	orr.w	r2, r2, #1
 80154b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	2200      	movs	r2, #0
 80154b6:	f042 0208 	orr.w	r2, r2, #8
 80154ba:	709a      	strb	r2, [r3, #2]
 80154bc:	2200      	movs	r2, #0
 80154be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	2206      	movs	r2, #6
 80154c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	2204      	movs	r2, #4
 80154ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80154cc:	f640 0306 	movw	r3, #2054	; 0x806
 80154d0:	9300      	str	r3, [sp, #0]
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	68ba      	ldr	r2, [r7, #8]
 80154d6:	69b9      	ldr	r1, [r7, #24]
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f001 fba9 	bl	8016c30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80154de:	69b8      	ldr	r0, [r7, #24]
 80154e0:	f7f6 f8ca 	bl	800b678 <pbuf_free>
  p = NULL;
 80154e4:	2300      	movs	r3, #0
 80154e6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80154e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3720      	adds	r7, #32
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	0801f2fc 	.word	0x0801f2fc
 80154f8:	0801f44c 	.word	0x0801f44c
 80154fc:	0801f374 	.word	0x0801f374
 8015500:	0801f4fc 	.word	0x0801f4fc
 8015504:	0801f530 	.word	0x0801f530

08015508 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b088      	sub	sp, #32
 801550c:	af04      	add	r7, sp, #16
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015524:	2201      	movs	r2, #1
 8015526:	9203      	str	r2, [sp, #12]
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	9202      	str	r2, [sp, #8]
 801552c:	4a06      	ldr	r2, [pc, #24]	; (8015548 <etharp_request_dst+0x40>)
 801552e:	9201      	str	r2, [sp, #4]
 8015530:	9300      	str	r3, [sp, #0]
 8015532:	4603      	mov	r3, r0
 8015534:	687a      	ldr	r2, [r7, #4]
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f7ff ff5a 	bl	80153f0 <etharp_raw>
 801553c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801553e:	4618      	mov	r0, r3
 8015540:	3710      	adds	r7, #16
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	08033a28 	.word	0x08033a28

0801554c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015556:	4a05      	ldr	r2, [pc, #20]	; (801556c <etharp_request+0x20>)
 8015558:	6839      	ldr	r1, [r7, #0]
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff ffd4 	bl	8015508 <etharp_request_dst>
 8015560:	4603      	mov	r3, r0
}
 8015562:	4618      	mov	r0, r3
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	08033a20 	.word	0x08033a20

08015570 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b08e      	sub	sp, #56	; 0x38
 8015574:	af04      	add	r7, sp, #16
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801557a:	4b79      	ldr	r3, [pc, #484]	; (8015760 <icmp_input+0x1f0>)
 801557c:	689b      	ldr	r3, [r3, #8]
 801557e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	f003 030f 	and.w	r3, r3, #15
 8015588:	b2db      	uxtb	r3, r3
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	b2db      	uxtb	r3, r3
 801558e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015592:	2b13      	cmp	r3, #19
 8015594:	f240 80cd 	bls.w	8015732 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	895b      	ldrh	r3, [r3, #10]
 801559c:	2b03      	cmp	r3, #3
 801559e:	f240 80ca 	bls.w	8015736 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	685b      	ldr	r3, [r3, #4]
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80155ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f000 80b7 	beq.w	8015724 <icmp_input+0x1b4>
 80155b6:	2b08      	cmp	r3, #8
 80155b8:	f040 80b7 	bne.w	801572a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80155bc:	4b69      	ldr	r3, [pc, #420]	; (8015764 <icmp_input+0x1f4>)
 80155be:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80155c0:	4b67      	ldr	r3, [pc, #412]	; (8015760 <icmp_input+0x1f0>)
 80155c2:	695b      	ldr	r3, [r3, #20]
 80155c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155c8:	2be0      	cmp	r3, #224	; 0xe0
 80155ca:	f000 80bb 	beq.w	8015744 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80155ce:	4b64      	ldr	r3, [pc, #400]	; (8015760 <icmp_input+0x1f0>)
 80155d0:	695b      	ldr	r3, [r3, #20]
 80155d2:	4a63      	ldr	r2, [pc, #396]	; (8015760 <icmp_input+0x1f0>)
 80155d4:	6812      	ldr	r2, [r2, #0]
 80155d6:	4611      	mov	r1, r2
 80155d8:	4618      	mov	r0, r3
 80155da:	f000 fc22 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f040 80b1 	bne.w	8015748 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	891b      	ldrh	r3, [r3, #8]
 80155ea:	2b07      	cmp	r3, #7
 80155ec:	f240 80a5 	bls.w	801573a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80155f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155f2:	330e      	adds	r3, #14
 80155f4:	4619      	mov	r1, r3
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f7f5 ffa8 	bl	800b54c <pbuf_add_header>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d04b      	beq.n	801569a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	891a      	ldrh	r2, [r3, #8]
 8015606:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015608:	4413      	add	r3, r2
 801560a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	891b      	ldrh	r3, [r3, #8]
 8015610:	8b7a      	ldrh	r2, [r7, #26]
 8015612:	429a      	cmp	r2, r3
 8015614:	f0c0 809a 	bcc.w	801574c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015618:	8b7b      	ldrh	r3, [r7, #26]
 801561a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801561e:	4619      	mov	r1, r3
 8015620:	200e      	movs	r0, #14
 8015622:	f7f5 fd45 	bl	800b0b0 <pbuf_alloc>
 8015626:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 8090 	beq.w	8015750 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	895b      	ldrh	r3, [r3, #10]
 8015634:	461a      	mov	r2, r3
 8015636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015638:	3308      	adds	r3, #8
 801563a:	429a      	cmp	r2, r3
 801563c:	d203      	bcs.n	8015646 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801563e:	6978      	ldr	r0, [r7, #20]
 8015640:	f7f6 f81a 	bl	800b678 <pbuf_free>
          goto icmperr;
 8015644:	e085      	b.n	8015752 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801564c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801564e:	4618      	mov	r0, r3
 8015650:	f001 fb70 	bl	8016d34 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015656:	4619      	mov	r1, r3
 8015658:	6978      	ldr	r0, [r7, #20]
 801565a:	f7f5 ff87 	bl	800b56c <pbuf_remove_header>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d009      	beq.n	8015678 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015664:	4b40      	ldr	r3, [pc, #256]	; (8015768 <icmp_input+0x1f8>)
 8015666:	22b6      	movs	r2, #182	; 0xb6
 8015668:	4940      	ldr	r1, [pc, #256]	; (801576c <icmp_input+0x1fc>)
 801566a:	4841      	ldr	r0, [pc, #260]	; (8015770 <icmp_input+0x200>)
 801566c:	f001 fffc 	bl	8017668 <iprintf>
          pbuf_free(r);
 8015670:	6978      	ldr	r0, [r7, #20]
 8015672:	f7f6 f801 	bl	800b678 <pbuf_free>
          goto icmperr;
 8015676:	e06c      	b.n	8015752 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015678:	6879      	ldr	r1, [r7, #4]
 801567a:	6978      	ldr	r0, [r7, #20]
 801567c:	f7f6 f924 	bl	800b8c8 <pbuf_copy>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d003      	beq.n	801568e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015686:	6978      	ldr	r0, [r7, #20]
 8015688:	f7f5 fff6 	bl	800b678 <pbuf_free>
          goto icmperr;
 801568c:	e061      	b.n	8015752 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f7f5 fff2 	bl	800b678 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	607b      	str	r3, [r7, #4]
 8015698:	e00f      	b.n	80156ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801569a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801569c:	330e      	adds	r3, #14
 801569e:	4619      	mov	r1, r3
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7f5 ff63 	bl	800b56c <pbuf_remove_header>
 80156a6:	4603      	mov	r3, r0
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d006      	beq.n	80156ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80156ac:	4b2e      	ldr	r3, [pc, #184]	; (8015768 <icmp_input+0x1f8>)
 80156ae:	22c7      	movs	r2, #199	; 0xc7
 80156b0:	4930      	ldr	r1, [pc, #192]	; (8015774 <icmp_input+0x204>)
 80156b2:	482f      	ldr	r0, [pc, #188]	; (8015770 <icmp_input+0x200>)
 80156b4:	f001 ffd8 	bl	8017668 <iprintf>
          goto icmperr;
 80156b8:	e04b      	b.n	8015752 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80156c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156c2:	4619      	mov	r1, r3
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7f5 ff41 	bl	800b54c <pbuf_add_header>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d12b      	bne.n	8015728 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80156de:	4b20      	ldr	r3, [pc, #128]	; (8015760 <icmp_input+0x1f0>)
 80156e0:	691a      	ldr	r2, [r3, #16]
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	2200      	movs	r2, #0
 80156ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	2200      	movs	r2, #0
 80156f0:	709a      	strb	r2, [r3, #2]
 80156f2:	2200      	movs	r2, #0
 80156f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	22ff      	movs	r2, #255	; 0xff
 80156fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	2200      	movs	r2, #0
 8015700:	729a      	strb	r2, [r3, #10]
 8015702:	2200      	movs	r2, #0
 8015704:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	9302      	str	r3, [sp, #8]
 801570a:	2301      	movs	r3, #1
 801570c:	9301      	str	r3, [sp, #4]
 801570e:	2300      	movs	r3, #0
 8015710:	9300      	str	r3, [sp, #0]
 8015712:	23ff      	movs	r3, #255	; 0xff
 8015714:	2200      	movs	r2, #0
 8015716:	69f9      	ldr	r1, [r7, #28]
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f000 fa99 	bl	8015c50 <ip4_output_if>
 801571e:	4603      	mov	r3, r0
 8015720:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015722:	e001      	b.n	8015728 <icmp_input+0x1b8>
      break;
 8015724:	bf00      	nop
 8015726:	e000      	b.n	801572a <icmp_input+0x1ba>
      break;
 8015728:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f7f5 ffa4 	bl	800b678 <pbuf_free>
  return;
 8015730:	e013      	b.n	801575a <icmp_input+0x1ea>
    goto lenerr;
 8015732:	bf00      	nop
 8015734:	e002      	b.n	801573c <icmp_input+0x1cc>
    goto lenerr;
 8015736:	bf00      	nop
 8015738:	e000      	b.n	801573c <icmp_input+0x1cc>
        goto lenerr;
 801573a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7f5 ff9b 	bl	800b678 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015742:	e00a      	b.n	801575a <icmp_input+0x1ea>
        goto icmperr;
 8015744:	bf00      	nop
 8015746:	e004      	b.n	8015752 <icmp_input+0x1e2>
        goto icmperr;
 8015748:	bf00      	nop
 801574a:	e002      	b.n	8015752 <icmp_input+0x1e2>
          goto icmperr;
 801574c:	bf00      	nop
 801574e:	e000      	b.n	8015752 <icmp_input+0x1e2>
          goto icmperr;
 8015750:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7f5 ff90 	bl	800b678 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015758:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801575a:	3728      	adds	r7, #40	; 0x28
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	20009f2c 	.word	0x20009f2c
 8015764:	20009f40 	.word	0x20009f40
 8015768:	0801f574 	.word	0x0801f574
 801576c:	0801f5ac 	.word	0x0801f5ac
 8015770:	0801f5e4 	.word	0x0801f5e4
 8015774:	0801f60c 	.word	0x0801f60c

08015778 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	460b      	mov	r3, r1
 8015782:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015784:	78fb      	ldrb	r3, [r7, #3]
 8015786:	461a      	mov	r2, r3
 8015788:	2103      	movs	r1, #3
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 f814 	bl	80157b8 <icmp_send_response>
}
 8015790:	bf00      	nop
 8015792:	3708      	adds	r7, #8
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}

08015798 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	460b      	mov	r3, r1
 80157a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80157a4:	78fb      	ldrb	r3, [r7, #3]
 80157a6:	461a      	mov	r2, r3
 80157a8:	210b      	movs	r1, #11
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f000 f804 	bl	80157b8 <icmp_send_response>
}
 80157b0:	bf00      	nop
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08c      	sub	sp, #48	; 0x30
 80157bc:	af04      	add	r7, sp, #16
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	460b      	mov	r3, r1
 80157c2:	70fb      	strb	r3, [r7, #3]
 80157c4:	4613      	mov	r3, r2
 80157c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80157c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157cc:	2124      	movs	r1, #36	; 0x24
 80157ce:	2022      	movs	r0, #34	; 0x22
 80157d0:	f7f5 fc6e 	bl	800b0b0 <pbuf_alloc>
 80157d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d04c      	beq.n	8015876 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	895b      	ldrh	r3, [r3, #10]
 80157e0:	2b23      	cmp	r3, #35	; 0x23
 80157e2:	d806      	bhi.n	80157f2 <icmp_send_response+0x3a>
 80157e4:	4b26      	ldr	r3, [pc, #152]	; (8015880 <icmp_send_response+0xc8>)
 80157e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80157ea:	4926      	ldr	r1, [pc, #152]	; (8015884 <icmp_send_response+0xcc>)
 80157ec:	4826      	ldr	r0, [pc, #152]	; (8015888 <icmp_send_response+0xd0>)
 80157ee:	f001 ff3b 	bl	8017668 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80157f8:	69fb      	ldr	r3, [r7, #28]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	78fa      	ldrb	r2, [r7, #3]
 8015802:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	78ba      	ldrb	r2, [r7, #2]
 8015808:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	2200      	movs	r2, #0
 801580e:	711a      	strb	r2, [r3, #4]
 8015810:	2200      	movs	r2, #0
 8015812:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	2200      	movs	r2, #0
 8015818:	719a      	strb	r2, [r3, #6]
 801581a:	2200      	movs	r2, #0
 801581c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	f103 0008 	add.w	r0, r3, #8
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	221c      	movs	r2, #28
 801582c:	4619      	mov	r1, r3
 801582e:	f001 fa81 	bl	8016d34 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015838:	f107 030c 	add.w	r3, r7, #12
 801583c:	4618      	mov	r0, r3
 801583e:	f000 f825 	bl	801588c <ip4_route>
 8015842:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d011      	beq.n	801586e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	2200      	movs	r2, #0
 801584e:	709a      	strb	r2, [r3, #2]
 8015850:	2200      	movs	r2, #0
 8015852:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015854:	f107 020c 	add.w	r2, r7, #12
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	9302      	str	r3, [sp, #8]
 801585c:	2301      	movs	r3, #1
 801585e:	9301      	str	r3, [sp, #4]
 8015860:	2300      	movs	r3, #0
 8015862:	9300      	str	r3, [sp, #0]
 8015864:	23ff      	movs	r3, #255	; 0xff
 8015866:	2100      	movs	r1, #0
 8015868:	69f8      	ldr	r0, [r7, #28]
 801586a:	f000 f9f1 	bl	8015c50 <ip4_output_if>
  }
  pbuf_free(q);
 801586e:	69f8      	ldr	r0, [r7, #28]
 8015870:	f7f5 ff02 	bl	800b678 <pbuf_free>
 8015874:	e000      	b.n	8015878 <icmp_send_response+0xc0>
    return;
 8015876:	bf00      	nop
}
 8015878:	3720      	adds	r7, #32
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	0801f574 	.word	0x0801f574
 8015884:	0801f640 	.word	0x0801f640
 8015888:	0801f5e4 	.word	0x0801f5e4

0801588c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801588c:	b480      	push	{r7}
 801588e:	b085      	sub	sp, #20
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015894:	4b33      	ldr	r3, [pc, #204]	; (8015964 <ip4_route+0xd8>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	60fb      	str	r3, [r7, #12]
 801589a:	e036      	b.n	801590a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158a2:	f003 0301 	and.w	r3, r3, #1
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d02b      	beq.n	8015904 <ip4_route+0x78>
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158b2:	089b      	lsrs	r3, r3, #2
 80158b4:	f003 0301 	and.w	r3, r3, #1
 80158b8:	b2db      	uxtb	r3, r3
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d022      	beq.n	8015904 <ip4_route+0x78>
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	3304      	adds	r3, #4
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d01d      	beq.n	8015904 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	3304      	adds	r3, #4
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	405a      	eors	r2, r3
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	3308      	adds	r3, #8
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	4013      	ands	r3, r2
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d101      	bne.n	80158e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	e038      	b.n	8015956 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158ea:	f003 0302 	and.w	r3, r3, #2
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d108      	bne.n	8015904 <ip4_route+0x78>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	330c      	adds	r3, #12
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d101      	bne.n	8015904 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	e028      	b.n	8015956 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	60fb      	str	r3, [r7, #12]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d1c5      	bne.n	801589c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015910:	4b15      	ldr	r3, [pc, #84]	; (8015968 <ip4_route+0xdc>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d01a      	beq.n	801594e <ip4_route+0xc2>
 8015918:	4b13      	ldr	r3, [pc, #76]	; (8015968 <ip4_route+0xdc>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015920:	f003 0301 	and.w	r3, r3, #1
 8015924:	2b00      	cmp	r3, #0
 8015926:	d012      	beq.n	801594e <ip4_route+0xc2>
 8015928:	4b0f      	ldr	r3, [pc, #60]	; (8015968 <ip4_route+0xdc>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015930:	f003 0304 	and.w	r3, r3, #4
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00a      	beq.n	801594e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015938:	4b0b      	ldr	r3, [pc, #44]	; (8015968 <ip4_route+0xdc>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	3304      	adds	r3, #4
 801593e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015940:	2b00      	cmp	r3, #0
 8015942:	d004      	beq.n	801594e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	b2db      	uxtb	r3, r3
 801594a:	2b7f      	cmp	r3, #127	; 0x7f
 801594c:	d101      	bne.n	8015952 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801594e:	2300      	movs	r3, #0
 8015950:	e001      	b.n	8015956 <ip4_route+0xca>
  }

  return netif_default;
 8015952:	4b05      	ldr	r3, [pc, #20]	; (8015968 <ip4_route+0xdc>)
 8015954:	681b      	ldr	r3, [r3, #0]
}
 8015956:	4618      	mov	r0, r3
 8015958:	3714      	adds	r7, #20
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr
 8015962:	bf00      	nop
 8015964:	2000d84c 	.word	0x2000d84c
 8015968:	2000d850 	.word	0x2000d850

0801596c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b082      	sub	sp, #8
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801597a:	f003 0301 	and.w	r3, r3, #1
 801597e:	b2db      	uxtb	r3, r3
 8015980:	2b00      	cmp	r3, #0
 8015982:	d016      	beq.n	80159b2 <ip4_input_accept+0x46>
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	3304      	adds	r3, #4
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d011      	beq.n	80159b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801598e:	4b0b      	ldr	r3, [pc, #44]	; (80159bc <ip4_input_accept+0x50>)
 8015990:	695a      	ldr	r2, [r3, #20]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	3304      	adds	r3, #4
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	429a      	cmp	r2, r3
 801599a:	d008      	beq.n	80159ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801599c:	4b07      	ldr	r3, [pc, #28]	; (80159bc <ip4_input_accept+0x50>)
 801599e:	695b      	ldr	r3, [r3, #20]
 80159a0:	6879      	ldr	r1, [r7, #4]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f000 fa3d 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 80159a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d001      	beq.n	80159b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80159ae:	2301      	movs	r3, #1
 80159b0:	e000      	b.n	80159b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80159b2:	2300      	movs	r3, #0
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	20009f2c 	.word	0x20009f2c

080159c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b088      	sub	sp, #32
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80159ca:	2301      	movs	r3, #1
 80159cc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80159d4:	69fb      	ldr	r3, [r7, #28]
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	091b      	lsrs	r3, r3, #4
 80159da:	b2db      	uxtb	r3, r3
 80159dc:	2b04      	cmp	r3, #4
 80159de:	d007      	beq.n	80159f0 <ip4_input+0x30>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f000 fa11 	bl	8015e08 <ip4_debug_print>
    pbuf_free(p);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f7f5 fe46 	bl	800b678 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80159ec:	2300      	movs	r3, #0
 80159ee:	e126      	b.n	8015c3e <ip4_input+0x27e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	f003 030f 	and.w	r3, r3, #15
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	009b      	lsls	r3, r3, #2
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015a00:	69fb      	ldr	r3, [r7, #28]
 8015a02:	885b      	ldrh	r3, [r3, #2]
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7f4 fa9c 	bl	8009f44 <lwip_htons>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	891b      	ldrh	r3, [r3, #8]
 8015a14:	8a3a      	ldrh	r2, [r7, #16]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d204      	bcs.n	8015a24 <ip4_input+0x64>
    pbuf_realloc(p, iphdr_len);
 8015a1a:	8a3b      	ldrh	r3, [r7, #16]
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7f5 fca4 	bl	800b36c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	895b      	ldrh	r3, [r3, #10]
 8015a28:	8a7a      	ldrh	r2, [r7, #18]
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d807      	bhi.n	8015a3e <ip4_input+0x7e>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	891b      	ldrh	r3, [r3, #8]
 8015a32:	8a3a      	ldrh	r2, [r7, #16]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d802      	bhi.n	8015a3e <ip4_input+0x7e>
 8015a38:	8a7b      	ldrh	r3, [r7, #18]
 8015a3a:	2b13      	cmp	r3, #19
 8015a3c:	d804      	bhi.n	8015a48 <ip4_input+0x88>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f7f5 fe1a 	bl	800b678 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015a44:	2300      	movs	r3, #0
 8015a46:	e0fa      	b.n	8015c3e <ip4_input+0x27e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015a48:	69fb      	ldr	r3, [r7, #28]
 8015a4a:	691b      	ldr	r3, [r3, #16]
 8015a4c:	4a7e      	ldr	r2, [pc, #504]	; (8015c48 <ip4_input+0x288>)
 8015a4e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015a50:	69fb      	ldr	r3, [r7, #28]
 8015a52:	68db      	ldr	r3, [r3, #12]
 8015a54:	4a7c      	ldr	r2, [pc, #496]	; (8015c48 <ip4_input+0x288>)
 8015a56:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a58:	4b7b      	ldr	r3, [pc, #492]	; (8015c48 <ip4_input+0x288>)
 8015a5a:	695b      	ldr	r3, [r3, #20]
 8015a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a60:	2be0      	cmp	r3, #224	; 0xe0
 8015a62:	d112      	bne.n	8015a8a <ip4_input+0xca>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015a6a:	f003 0301 	and.w	r3, r3, #1
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d007      	beq.n	8015a84 <ip4_input+0xc4>
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	3304      	adds	r3, #4
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d002      	beq.n	8015a84 <ip4_input+0xc4>
      netif = inp;
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	61bb      	str	r3, [r7, #24]
 8015a82:	e02a      	b.n	8015ada <ip4_input+0x11a>
    } else {
      netif = NULL;
 8015a84:	2300      	movs	r3, #0
 8015a86:	61bb      	str	r3, [r7, #24]
 8015a88:	e027      	b.n	8015ada <ip4_input+0x11a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015a8a:	6838      	ldr	r0, [r7, #0]
 8015a8c:	f7ff ff6e 	bl	801596c <ip4_input_accept>
 8015a90:	4603      	mov	r3, r0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d002      	beq.n	8015a9c <ip4_input+0xdc>
      netif = inp;
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	61bb      	str	r3, [r7, #24]
 8015a9a:	e01e      	b.n	8015ada <ip4_input+0x11a>
    } else {
      netif = NULL;
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015aa0:	4b69      	ldr	r3, [pc, #420]	; (8015c48 <ip4_input+0x288>)
 8015aa2:	695b      	ldr	r3, [r3, #20]
 8015aa4:	b2db      	uxtb	r3, r3
 8015aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8015aa8:	d017      	beq.n	8015ada <ip4_input+0x11a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015aaa:	4b68      	ldr	r3, [pc, #416]	; (8015c4c <ip4_input+0x28c>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	61bb      	str	r3, [r7, #24]
 8015ab0:	e00e      	b.n	8015ad0 <ip4_input+0x110>
          if (netif == inp) {
 8015ab2:	69ba      	ldr	r2, [r7, #24]
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d006      	beq.n	8015ac8 <ip4_input+0x108>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015aba:	69b8      	ldr	r0, [r7, #24]
 8015abc:	f7ff ff56 	bl	801596c <ip4_input_accept>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d108      	bne.n	8015ad8 <ip4_input+0x118>
 8015ac6:	e000      	b.n	8015aca <ip4_input+0x10a>
            continue;
 8015ac8:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	61bb      	str	r3, [r7, #24]
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d1ed      	bne.n	8015ab2 <ip4_input+0xf2>
 8015ad6:	e000      	b.n	8015ada <ip4_input+0x11a>
            break;
 8015ad8:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d111      	bne.n	8015b04 <ip4_input+0x144>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	7a5b      	ldrb	r3, [r3, #9]
 8015ae4:	2b11      	cmp	r3, #17
 8015ae6:	d10d      	bne.n	8015b04 <ip4_input+0x144>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015ae8:	8a7b      	ldrh	r3, [r7, #18]
 8015aea:	69fa      	ldr	r2, [r7, #28]
 8015aec:	4413      	add	r3, r2
 8015aee:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	885b      	ldrh	r3, [r3, #2]
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015afa:	d103      	bne.n	8015b04 <ip4_input+0x144>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015b00:	2300      	movs	r3, #0
 8015b02:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d017      	beq.n	8015b3a <ip4_input+0x17a>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015b0a:	4b4f      	ldr	r3, [pc, #316]	; (8015c48 <ip4_input+0x288>)
 8015b0c:	691b      	ldr	r3, [r3, #16]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d013      	beq.n	8015b3a <ip4_input+0x17a>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015b12:	4b4d      	ldr	r3, [pc, #308]	; (8015c48 <ip4_input+0x288>)
 8015b14:	691b      	ldr	r3, [r3, #16]
 8015b16:	6839      	ldr	r1, [r7, #0]
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f000 f982 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d105      	bne.n	8015b30 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015b24:	4b48      	ldr	r3, [pc, #288]	; (8015c48 <ip4_input+0x288>)
 8015b26:	691b      	ldr	r3, [r3, #16]
 8015b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015b2c:	2be0      	cmp	r3, #224	; 0xe0
 8015b2e:	d104      	bne.n	8015b3a <ip4_input+0x17a>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f7f5 fda1 	bl	800b678 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015b36:	2300      	movs	r3, #0
 8015b38:	e081      	b.n	8015c3e <ip4_input+0x27e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d104      	bne.n	8015b4a <ip4_input+0x18a>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f7f5 fd99 	bl	800b678 <pbuf_free>
    return ERR_OK;
 8015b46:	2300      	movs	r3, #0
 8015b48:	e079      	b.n	8015c3e <ip4_input+0x27e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	88db      	ldrh	r3, [r3, #6]
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	461a      	mov	r2, r3
 8015b52:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015b56:	4013      	ands	r3, r2
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00b      	beq.n	8015b74 <ip4_input+0x1b4>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fca5 	bl	80164ac <ip4_reass>
 8015b62:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <ip4_input+0x1ae>
      return ERR_OK;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	e067      	b.n	8015c3e <ip4_input+0x27e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	61fb      	str	r3, [r7, #28]
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f000 f947 	bl	8015e08 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015b7a:	4a33      	ldr	r2, [pc, #204]	; (8015c48 <ip4_input+0x288>)
 8015b7c:	69bb      	ldr	r3, [r7, #24]
 8015b7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015b80:	4a31      	ldr	r2, [pc, #196]	; (8015c48 <ip4_input+0x288>)
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015b86:	4a30      	ldr	r2, [pc, #192]	; (8015c48 <ip4_input+0x288>)
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 030f 	and.w	r3, r3, #15
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	b29a      	uxth	r2, r3
 8015b9c:	4b2a      	ldr	r3, [pc, #168]	; (8015c48 <ip4_input+0x288>)
 8015b9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015ba0:	8a7b      	ldrh	r3, [r7, #18]
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7f5 fce1 	bl	800b56c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	7a5b      	ldrb	r3, [r3, #9]
 8015bae:	2b11      	cmp	r3, #17
 8015bb0:	d006      	beq.n	8015bc0 <ip4_input+0x200>
 8015bb2:	2b11      	cmp	r3, #17
 8015bb4:	dc13      	bgt.n	8015bde <ip4_input+0x21e>
 8015bb6:	2b01      	cmp	r3, #1
 8015bb8:	d00c      	beq.n	8015bd4 <ip4_input+0x214>
 8015bba:	2b06      	cmp	r3, #6
 8015bbc:	d005      	beq.n	8015bca <ip4_input+0x20a>
 8015bbe:	e00e      	b.n	8015bde <ip4_input+0x21e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015bc0:	6839      	ldr	r1, [r7, #0]
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f7fc fb12 	bl	80121ec <udp_input>
        break;
 8015bc8:	e026      	b.n	8015c18 <ip4_input+0x258>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015bca:	6839      	ldr	r1, [r7, #0]
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f7f7 fec9 	bl	800d964 <tcp_input>
        break;
 8015bd2:	e021      	b.n	8015c18 <ip4_input+0x258>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015bd4:	6839      	ldr	r1, [r7, #0]
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7ff fcca 	bl	8015570 <icmp_input>
        break;
 8015bdc:	e01c      	b.n	8015c18 <ip4_input+0x258>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015bde:	4b1a      	ldr	r3, [pc, #104]	; (8015c48 <ip4_input+0x288>)
 8015be0:	695b      	ldr	r3, [r3, #20]
 8015be2:	69b9      	ldr	r1, [r7, #24]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f000 f91c 	bl	8015e22 <ip4_addr_isbroadcast_u32>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d10f      	bne.n	8015c10 <ip4_input+0x250>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bf0:	4b15      	ldr	r3, [pc, #84]	; (8015c48 <ip4_input+0x288>)
 8015bf2:	695b      	ldr	r3, [r3, #20]
 8015bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015bf8:	2be0      	cmp	r3, #224	; 0xe0
 8015bfa:	d009      	beq.n	8015c10 <ip4_input+0x250>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c00:	4619      	mov	r1, r3
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f7f5 fd25 	bl	800b652 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015c08:	2102      	movs	r1, #2
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f7ff fdb4 	bl	8015778 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7f5 fd31 	bl	800b678 <pbuf_free>
        break;
 8015c16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015c18:	4b0b      	ldr	r3, [pc, #44]	; (8015c48 <ip4_input+0x288>)
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015c1e:	4b0a      	ldr	r3, [pc, #40]	; (8015c48 <ip4_input+0x288>)
 8015c20:	2200      	movs	r2, #0
 8015c22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015c24:	4b08      	ldr	r3, [pc, #32]	; (8015c48 <ip4_input+0x288>)
 8015c26:	2200      	movs	r2, #0
 8015c28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015c2a:	4b07      	ldr	r3, [pc, #28]	; (8015c48 <ip4_input+0x288>)
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015c30:	4b05      	ldr	r3, [pc, #20]	; (8015c48 <ip4_input+0x288>)
 8015c32:	2200      	movs	r2, #0
 8015c34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015c36:	4b04      	ldr	r3, [pc, #16]	; (8015c48 <ip4_input+0x288>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015c3c:	2300      	movs	r3, #0
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3720      	adds	r7, #32
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	20009f2c 	.word	0x20009f2c
 8015c4c:	2000d84c 	.word	0x2000d84c

08015c50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08a      	sub	sp, #40	; 0x28
 8015c54:	af04      	add	r7, sp, #16
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d009      	beq.n	8015c7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d003      	beq.n	8015c76 <ip4_output_if+0x26>
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d102      	bne.n	8015c7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c78:	3304      	adds	r3, #4
 8015c7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c7c:	78fa      	ldrb	r2, [r7, #3]
 8015c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c80:	9302      	str	r3, [sp, #8]
 8015c82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c86:	9301      	str	r3, [sp, #4]
 8015c88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	4613      	mov	r3, r2
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	6979      	ldr	r1, [r7, #20]
 8015c94:	68f8      	ldr	r0, [r7, #12]
 8015c96:	f000 f805 	bl	8015ca4 <ip4_output_if_src>
 8015c9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3718      	adds	r7, #24
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b088      	sub	sp, #32
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	7b9b      	ldrb	r3, [r3, #14]
 8015cb6:	2b01      	cmp	r3, #1
 8015cb8:	d006      	beq.n	8015cc8 <ip4_output_if_src+0x24>
 8015cba:	4b4d      	ldr	r3, [pc, #308]	; (8015df0 <ip4_output_if_src+0x14c>)
 8015cbc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015cc0:	494c      	ldr	r1, [pc, #304]	; (8015df4 <ip4_output_if_src+0x150>)
 8015cc2:	484d      	ldr	r0, [pc, #308]	; (8015df8 <ip4_output_if_src+0x154>)
 8015cc4:	f001 fcd0 	bl	8017668 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d060      	beq.n	8015d90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015cce:	2314      	movs	r3, #20
 8015cd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015cd2:	2114      	movs	r1, #20
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f7f5 fc39 	bl	800b54c <pbuf_add_header>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d002      	beq.n	8015ce6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ce0:	f06f 0301 	mvn.w	r3, #1
 8015ce4:	e07f      	b.n	8015de6 <ip4_output_if_src+0x142>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	895b      	ldrh	r3, [r3, #10]
 8015cf0:	2b13      	cmp	r3, #19
 8015cf2:	d806      	bhi.n	8015d02 <ip4_output_if_src+0x5e>
 8015cf4:	4b3e      	ldr	r3, [pc, #248]	; (8015df0 <ip4_output_if_src+0x14c>)
 8015cf6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015cfa:	4940      	ldr	r1, [pc, #256]	; (8015dfc <ip4_output_if_src+0x158>)
 8015cfc:	483e      	ldr	r0, [pc, #248]	; (8015df8 <ip4_output_if_src+0x154>)
 8015cfe:	f001 fcb3 	bl	8017668 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	78fa      	ldrb	r2, [r7, #3]
 8015d06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015d08:	69fb      	ldr	r3, [r7, #28]
 8015d0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015d0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	69fb      	ldr	r3, [r7, #28]
 8015d16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015d18:	8b7b      	ldrh	r3, [r7, #26]
 8015d1a:	089b      	lsrs	r3, r3, #2
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d24:	b2da      	uxtb	r2, r3
 8015d26:	69fb      	ldr	r3, [r7, #28]
 8015d28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015d2a:	69fb      	ldr	r3, [r7, #28]
 8015d2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	891b      	ldrh	r3, [r3, #8]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f4 f904 	bl	8009f44 <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	461a      	mov	r2, r3
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015d44:	69fb      	ldr	r3, [r7, #28]
 8015d46:	2200      	movs	r2, #0
 8015d48:	719a      	strb	r2, [r3, #6]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015d4e:	4b2c      	ldr	r3, [pc, #176]	; (8015e00 <ip4_output_if_src+0x15c>)
 8015d50:	881b      	ldrh	r3, [r3, #0]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7f4 f8f6 	bl	8009f44 <lwip_htons>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015d60:	4b27      	ldr	r3, [pc, #156]	; (8015e00 <ip4_output_if_src+0x15c>)
 8015d62:	881b      	ldrh	r3, [r3, #0]
 8015d64:	3301      	adds	r3, #1
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	4b25      	ldr	r3, [pc, #148]	; (8015e00 <ip4_output_if_src+0x15c>)
 8015d6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d104      	bne.n	8015d7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015d72:	4b24      	ldr	r3, [pc, #144]	; (8015e04 <ip4_output_if_src+0x160>)
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	60da      	str	r2, [r3, #12]
 8015d7a:	e003      	b.n	8015d84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	2200      	movs	r2, #0
 8015d88:	729a      	strb	r2, [r3, #10]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	72da      	strb	r2, [r3, #11]
 8015d8e:	e00f      	b.n	8015db0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	895b      	ldrh	r3, [r3, #10]
 8015d94:	2b13      	cmp	r3, #19
 8015d96:	d802      	bhi.n	8015d9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d98:	f06f 0301 	mvn.w	r3, #1
 8015d9c:	e023      	b.n	8015de6 <ip4_output_if_src+0x142>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	691b      	ldr	r3, [r3, #16]
 8015da8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015daa:	f107 0314 	add.w	r3, r7, #20
 8015dae:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 8015db0:	68f8      	ldr	r0, [r7, #12]
 8015db2:	f000 f829 	bl	8015e08 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d00c      	beq.n	8015dd8 <ip4_output_if_src+0x134>
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	891a      	ldrh	r2, [r3, #8]
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d906      	bls.n	8015dd8 <ip4_output_if_src+0x134>
    return ip4_frag(p, netif, dest);
 8015dca:	687a      	ldr	r2, [r7, #4]
 8015dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015dce:	68f8      	ldr	r0, [r7, #12]
 8015dd0:	f000 fd5a 	bl	8016888 <ip4_frag>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	e006      	b.n	8015de6 <ip4_output_if_src+0x142>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dda:	695b      	ldr	r3, [r3, #20]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	68f9      	ldr	r1, [r7, #12]
 8015de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015de2:	4798      	blx	r3
 8015de4:	4603      	mov	r3, r0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3720      	adds	r7, #32
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	0801f66c 	.word	0x0801f66c
 8015df4:	0801f6a0 	.word	0x0801f6a0
 8015df8:	0801f6ac 	.word	0x0801f6ac
 8015dfc:	0801f6d4 	.word	0x0801f6d4
 8015e00:	20001356 	.word	0x20001356
 8015e04:	08033a18 	.word	0x08033a18

08015e08 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b085      	sub	sp, #20
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	60fb      	str	r3, [r7, #12]
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 8015e16:	bf00      	nop
 8015e18:	3714      	adds	r7, #20
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e20:	4770      	bx	lr

08015e22 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015e22:	b480      	push	{r7}
 8015e24:	b085      	sub	sp, #20
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
 8015e2a:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e36:	d002      	beq.n	8015e3e <ip4_addr_isbroadcast_u32+0x1c>
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d101      	bne.n	8015e42 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e02a      	b.n	8015e98 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e48:	f003 0302 	and.w	r3, r3, #2
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d101      	bne.n	8015e54 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015e50:	2300      	movs	r3, #0
 8015e52:	e021      	b.n	8015e98 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	3304      	adds	r3, #4
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d101      	bne.n	8015e64 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015e60:	2300      	movs	r3, #0
 8015e62:	e019      	b.n	8015e98 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015e64:	68fa      	ldr	r2, [r7, #12]
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	3304      	adds	r3, #4
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	405a      	eors	r2, r3
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	3308      	adds	r3, #8
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	4013      	ands	r3, r2
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d10d      	bne.n	8015e96 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	3308      	adds	r3, #8
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	43da      	mvns	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	3308      	adds	r3, #8
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d101      	bne.n	8015e96 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015e92:	2301      	movs	r3, #1
 8015e94:	e000      	b.n	8015e98 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015e96:	2300      	movs	r3, #0
  }
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3714      	adds	r7, #20
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015eae:	4b12      	ldr	r3, [pc, #72]	; (8015ef8 <ip_reass_tmr+0x54>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015eb4:	e018      	b.n	8015ee8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	7fdb      	ldrb	r3, [r3, #31]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d00b      	beq.n	8015ed6 <ip_reass_tmr+0x32>
      r->timer--;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	7fdb      	ldrb	r3, [r3, #31]
 8015ec2:	3b01      	subs	r3, #1
 8015ec4:	b2da      	uxtb	r2, r3
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	60fb      	str	r3, [r7, #12]
 8015ed4:	e008      	b.n	8015ee8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015ee0:	68b9      	ldr	r1, [r7, #8]
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f000 f80a 	bl	8015efc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d1e3      	bne.n	8015eb6 <ip_reass_tmr+0x12>
    }
  }
}
 8015eee:	bf00      	nop
 8015ef0:	bf00      	nop
 8015ef2:	3710      	adds	r7, #16
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}
 8015ef8:	20001358 	.word	0x20001358

08015efc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b088      	sub	sp, #32
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015f0a:	683a      	ldr	r2, [r7, #0]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d105      	bne.n	8015f1e <ip_reass_free_complete_datagram+0x22>
 8015f12:	4b45      	ldr	r3, [pc, #276]	; (8016028 <ip_reass_free_complete_datagram+0x12c>)
 8015f14:	22ab      	movs	r2, #171	; 0xab
 8015f16:	4945      	ldr	r1, [pc, #276]	; (801602c <ip_reass_free_complete_datagram+0x130>)
 8015f18:	4845      	ldr	r0, [pc, #276]	; (8016030 <ip_reass_free_complete_datagram+0x134>)
 8015f1a:	f001 fba5 	bl	8017668 <iprintf>
  if (prev != NULL) {
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00a      	beq.n	8015f3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d005      	beq.n	8015f3a <ip_reass_free_complete_datagram+0x3e>
 8015f2e:	4b3e      	ldr	r3, [pc, #248]	; (8016028 <ip_reass_free_complete_datagram+0x12c>)
 8015f30:	22ad      	movs	r2, #173	; 0xad
 8015f32:	4940      	ldr	r1, [pc, #256]	; (8016034 <ip_reass_free_complete_datagram+0x138>)
 8015f34:	483e      	ldr	r0, [pc, #248]	; (8016030 <ip_reass_free_complete_datagram+0x134>)
 8015f36:	f001 fb97 	bl	8017668 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	685b      	ldr	r3, [r3, #4]
 8015f3e:	685b      	ldr	r3, [r3, #4]
 8015f40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	889b      	ldrh	r3, [r3, #4]
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d12a      	bne.n	8015fa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	685b      	ldr	r3, [r3, #4]
 8015f50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015f5a:	69bb      	ldr	r3, [r7, #24]
 8015f5c:	6858      	ldr	r0, [r3, #4]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	3308      	adds	r3, #8
 8015f62:	2214      	movs	r2, #20
 8015f64:	4619      	mov	r1, r3
 8015f66:	f000 fee5 	bl	8016d34 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015f6a:	2101      	movs	r1, #1
 8015f6c:	69b8      	ldr	r0, [r7, #24]
 8015f6e:	f7ff fc13 	bl	8015798 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015f72:	69b8      	ldr	r0, [r7, #24]
 8015f74:	f7f5 fc08 	bl	800b788 <pbuf_clen>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f7c:	8bfa      	ldrh	r2, [r7, #30]
 8015f7e:	8a7b      	ldrh	r3, [r7, #18]
 8015f80:	4413      	add	r3, r2
 8015f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f86:	db05      	blt.n	8015f94 <ip_reass_free_complete_datagram+0x98>
 8015f88:	4b27      	ldr	r3, [pc, #156]	; (8016028 <ip_reass_free_complete_datagram+0x12c>)
 8015f8a:	22bc      	movs	r2, #188	; 0xbc
 8015f8c:	492a      	ldr	r1, [pc, #168]	; (8016038 <ip_reass_free_complete_datagram+0x13c>)
 8015f8e:	4828      	ldr	r0, [pc, #160]	; (8016030 <ip_reass_free_complete_datagram+0x134>)
 8015f90:	f001 fb6a 	bl	8017668 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f94:	8bfa      	ldrh	r2, [r7, #30]
 8015f96:	8a7b      	ldrh	r3, [r7, #18]
 8015f98:	4413      	add	r3, r2
 8015f9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015f9c:	69b8      	ldr	r0, [r7, #24]
 8015f9e:	f7f5 fb6b 	bl	800b678 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015fa8:	e01f      	b.n	8015fea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015faa:	69bb      	ldr	r3, [r7, #24]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015fba:	68f8      	ldr	r0, [r7, #12]
 8015fbc:	f7f5 fbe4 	bl	800b788 <pbuf_clen>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015fc4:	8bfa      	ldrh	r2, [r7, #30]
 8015fc6:	8a7b      	ldrh	r3, [r7, #18]
 8015fc8:	4413      	add	r3, r2
 8015fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fce:	db05      	blt.n	8015fdc <ip_reass_free_complete_datagram+0xe0>
 8015fd0:	4b15      	ldr	r3, [pc, #84]	; (8016028 <ip_reass_free_complete_datagram+0x12c>)
 8015fd2:	22cc      	movs	r2, #204	; 0xcc
 8015fd4:	4918      	ldr	r1, [pc, #96]	; (8016038 <ip_reass_free_complete_datagram+0x13c>)
 8015fd6:	4816      	ldr	r0, [pc, #88]	; (8016030 <ip_reass_free_complete_datagram+0x134>)
 8015fd8:	f001 fb46 	bl	8017668 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015fdc:	8bfa      	ldrh	r2, [r7, #30]
 8015fde:	8a7b      	ldrh	r3, [r7, #18]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7f5 fb47 	bl	800b678 <pbuf_free>
  while (p != NULL) {
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d1dc      	bne.n	8015faa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015ff0:	6839      	ldr	r1, [r7, #0]
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 f8c2 	bl	801617c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015ff8:	4b10      	ldr	r3, [pc, #64]	; (801603c <ip_reass_free_complete_datagram+0x140>)
 8015ffa:	881b      	ldrh	r3, [r3, #0]
 8015ffc:	8bfa      	ldrh	r2, [r7, #30]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d905      	bls.n	801600e <ip_reass_free_complete_datagram+0x112>
 8016002:	4b09      	ldr	r3, [pc, #36]	; (8016028 <ip_reass_free_complete_datagram+0x12c>)
 8016004:	22d2      	movs	r2, #210	; 0xd2
 8016006:	490e      	ldr	r1, [pc, #56]	; (8016040 <ip_reass_free_complete_datagram+0x144>)
 8016008:	4809      	ldr	r0, [pc, #36]	; (8016030 <ip_reass_free_complete_datagram+0x134>)
 801600a:	f001 fb2d 	bl	8017668 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801600e:	4b0b      	ldr	r3, [pc, #44]	; (801603c <ip_reass_free_complete_datagram+0x140>)
 8016010:	881a      	ldrh	r2, [r3, #0]
 8016012:	8bfb      	ldrh	r3, [r7, #30]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	b29a      	uxth	r2, r3
 8016018:	4b08      	ldr	r3, [pc, #32]	; (801603c <ip_reass_free_complete_datagram+0x140>)
 801601a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801601c:	8bfb      	ldrh	r3, [r7, #30]
}
 801601e:	4618      	mov	r0, r3
 8016020:	3720      	adds	r7, #32
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	0801f704 	.word	0x0801f704
 801602c:	0801f740 	.word	0x0801f740
 8016030:	0801f74c 	.word	0x0801f74c
 8016034:	0801f774 	.word	0x0801f774
 8016038:	0801f788 	.word	0x0801f788
 801603c:	2000135c 	.word	0x2000135c
 8016040:	0801f7a8 	.word	0x0801f7a8

08016044 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b08a      	sub	sp, #40	; 0x28
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801604e:	2300      	movs	r3, #0
 8016050:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016052:	2300      	movs	r3, #0
 8016054:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016056:	2300      	movs	r3, #0
 8016058:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801605a:	2300      	movs	r3, #0
 801605c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016062:	4b28      	ldr	r3, [pc, #160]	; (8016104 <ip_reass_remove_oldest_datagram+0xc0>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016068:	e030      	b.n	80160cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801606c:	695a      	ldr	r2, [r3, #20]
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	68db      	ldr	r3, [r3, #12]
 8016072:	429a      	cmp	r2, r3
 8016074:	d10c      	bne.n	8016090 <ip_reass_remove_oldest_datagram+0x4c>
 8016076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016078:	699a      	ldr	r2, [r3, #24]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	691b      	ldr	r3, [r3, #16]
 801607e:	429a      	cmp	r2, r3
 8016080:	d106      	bne.n	8016090 <ip_reass_remove_oldest_datagram+0x4c>
 8016082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016084:	899a      	ldrh	r2, [r3, #12]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	889b      	ldrh	r3, [r3, #4]
 801608a:	b29b      	uxth	r3, r3
 801608c:	429a      	cmp	r2, r3
 801608e:	d014      	beq.n	80160ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016090:	693b      	ldr	r3, [r7, #16]
 8016092:	3301      	adds	r3, #1
 8016094:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d104      	bne.n	80160a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80160a0:	69fb      	ldr	r3, [r7, #28]
 80160a2:	61bb      	str	r3, [r7, #24]
 80160a4:	e009      	b.n	80160ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80160a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a8:	7fda      	ldrb	r2, [r3, #31]
 80160aa:	6a3b      	ldr	r3, [r7, #32]
 80160ac:	7fdb      	ldrb	r3, [r3, #31]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d803      	bhi.n	80160ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80160b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80160b6:	69fb      	ldr	r3, [r7, #28]
 80160b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80160ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d001      	beq.n	80160c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80160c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80160c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80160cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d1cb      	bne.n	801606a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80160d2:	6a3b      	ldr	r3, [r7, #32]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d008      	beq.n	80160ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80160d8:	69b9      	ldr	r1, [r7, #24]
 80160da:	6a38      	ldr	r0, [r7, #32]
 80160dc:	f7ff ff0e 	bl	8015efc <ip_reass_free_complete_datagram>
 80160e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80160e2:	697a      	ldr	r2, [r7, #20]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	4413      	add	r3, r2
 80160e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80160ea:	697a      	ldr	r2, [r7, #20]
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	da02      	bge.n	80160f8 <ip_reass_remove_oldest_datagram+0xb4>
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	dcac      	bgt.n	8016052 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80160f8:	697b      	ldr	r3, [r7, #20]
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3728      	adds	r7, #40	; 0x28
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	20001358 	.word	0x20001358

08016108 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016112:	2004      	movs	r0, #4
 8016114:	f7f4 fc4a 	bl	800a9ac <memp_malloc>
 8016118:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d110      	bne.n	8016142 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff ff8e 	bl	8016044 <ip_reass_remove_oldest_datagram>
 8016128:	4602      	mov	r2, r0
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	4293      	cmp	r3, r2
 801612e:	dc03      	bgt.n	8016138 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016130:	2004      	movs	r0, #4
 8016132:	f7f4 fc3b 	bl	800a9ac <memp_malloc>
 8016136:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d101      	bne.n	8016142 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801613e:	2300      	movs	r3, #0
 8016140:	e016      	b.n	8016170 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016142:	2220      	movs	r2, #32
 8016144:	2100      	movs	r1, #0
 8016146:	68f8      	ldr	r0, [r7, #12]
 8016148:	f000 fe1c 	bl	8016d84 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	220f      	movs	r2, #15
 8016150:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016152:	4b09      	ldr	r3, [pc, #36]	; (8016178 <ip_reass_enqueue_new_datagram+0x70>)
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801615a:	4a07      	ldr	r2, [pc, #28]	; (8016178 <ip_reass_enqueue_new_datagram+0x70>)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	3308      	adds	r3, #8
 8016164:	2214      	movs	r2, #20
 8016166:	6879      	ldr	r1, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	f000 fde3 	bl	8016d34 <memcpy>
  return ipr;
 801616e:	68fb      	ldr	r3, [r7, #12]
}
 8016170:	4618      	mov	r0, r3
 8016172:	3710      	adds	r7, #16
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	20001358 	.word	0x20001358

0801617c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b082      	sub	sp, #8
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016186:	4b10      	ldr	r3, [pc, #64]	; (80161c8 <ip_reass_dequeue_datagram+0x4c>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	429a      	cmp	r2, r3
 801618e:	d104      	bne.n	801619a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	4a0c      	ldr	r2, [pc, #48]	; (80161c8 <ip_reass_dequeue_datagram+0x4c>)
 8016196:	6013      	str	r3, [r2, #0]
 8016198:	e00d      	b.n	80161b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d106      	bne.n	80161ae <ip_reass_dequeue_datagram+0x32>
 80161a0:	4b0a      	ldr	r3, [pc, #40]	; (80161cc <ip_reass_dequeue_datagram+0x50>)
 80161a2:	f240 1245 	movw	r2, #325	; 0x145
 80161a6:	490a      	ldr	r1, [pc, #40]	; (80161d0 <ip_reass_dequeue_datagram+0x54>)
 80161a8:	480a      	ldr	r0, [pc, #40]	; (80161d4 <ip_reass_dequeue_datagram+0x58>)
 80161aa:	f001 fa5d 	bl	8017668 <iprintf>
    prev->next = ipr->next;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681a      	ldr	r2, [r3, #0]
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80161b6:	6879      	ldr	r1, [r7, #4]
 80161b8:	2004      	movs	r0, #4
 80161ba:	f7f4 fc43 	bl	800aa44 <memp_free>
}
 80161be:	bf00      	nop
 80161c0:	3708      	adds	r7, #8
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	20001358 	.word	0x20001358
 80161cc:	0801f704 	.word	0x0801f704
 80161d0:	0801f7cc 	.word	0x0801f7cc
 80161d4:	0801f74c 	.word	0x0801f74c

080161d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b08c      	sub	sp, #48	; 0x30
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80161e4:	2300      	movs	r3, #0
 80161e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80161e8:	2301      	movs	r3, #1
 80161ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80161f2:	69fb      	ldr	r3, [r7, #28]
 80161f4:	885b      	ldrh	r3, [r3, #2]
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7f3 fea3 	bl	8009f44 <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016202:	69fb      	ldr	r3, [r7, #28]
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	f003 030f 	and.w	r3, r3, #15
 801620a:	b2db      	uxtb	r3, r3
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016210:	7e7b      	ldrb	r3, [r7, #25]
 8016212:	b29b      	uxth	r3, r3
 8016214:	8b7a      	ldrh	r2, [r7, #26]
 8016216:	429a      	cmp	r2, r3
 8016218:	d202      	bcs.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801621a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801621e:	e135      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016220:	7e7b      	ldrb	r3, [r7, #25]
 8016222:	b29b      	uxth	r3, r3
 8016224:	8b7a      	ldrh	r2, [r7, #26]
 8016226:	1ad3      	subs	r3, r2, r3
 8016228:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801622a:	69fb      	ldr	r3, [r7, #28]
 801622c:	88db      	ldrh	r3, [r3, #6]
 801622e:	b29b      	uxth	r3, r3
 8016230:	4618      	mov	r0, r3
 8016232:	f7f3 fe87 	bl	8009f44 <lwip_htons>
 8016236:	4603      	mov	r3, r0
 8016238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801623c:	b29b      	uxth	r3, r3
 801623e:	00db      	lsls	r3, r3, #3
 8016240:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624a:	2200      	movs	r2, #0
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	2200      	movs	r2, #0
 8016250:	705a      	strb	r2, [r3, #1]
 8016252:	2200      	movs	r2, #0
 8016254:	709a      	strb	r2, [r3, #2]
 8016256:	2200      	movs	r2, #0
 8016258:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	8afa      	ldrh	r2, [r7, #22]
 801625e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016260:	8afa      	ldrh	r2, [r7, #22]
 8016262:	8b7b      	ldrh	r3, [r7, #26]
 8016264:	4413      	add	r3, r2
 8016266:	b29a      	uxth	r2, r3
 8016268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626e:	88db      	ldrh	r3, [r3, #6]
 8016270:	b29b      	uxth	r3, r3
 8016272:	8afa      	ldrh	r2, [r7, #22]
 8016274:	429a      	cmp	r2, r3
 8016276:	d902      	bls.n	801627e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801627c:	e106      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	685b      	ldr	r3, [r3, #4]
 8016282:	627b      	str	r3, [r7, #36]	; 0x24
 8016284:	e068      	b.n	8016358 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016288:	685b      	ldr	r3, [r3, #4]
 801628a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801628e:	889b      	ldrh	r3, [r3, #4]
 8016290:	b29a      	uxth	r2, r3
 8016292:	693b      	ldr	r3, [r7, #16]
 8016294:	889b      	ldrh	r3, [r3, #4]
 8016296:	b29b      	uxth	r3, r3
 8016298:	429a      	cmp	r2, r3
 801629a:	d235      	bcs.n	8016308 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80162a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d020      	beq.n	80162ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80162a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162aa:	889b      	ldrh	r3, [r3, #4]
 80162ac:	b29a      	uxth	r2, r3
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	88db      	ldrh	r3, [r3, #6]
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d307      	bcc.n	80162c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	88db      	ldrh	r3, [r3, #6]
 80162bc:	b29a      	uxth	r2, r3
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	889b      	ldrh	r3, [r3, #4]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d902      	bls.n	80162ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162cc:	e0de      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80162ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d0:	68ba      	ldr	r2, [r7, #8]
 80162d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80162d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d6:	88db      	ldrh	r3, [r3, #6]
 80162d8:	b29a      	uxth	r2, r3
 80162da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162dc:	889b      	ldrh	r3, [r3, #4]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d03d      	beq.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80162e4:	2300      	movs	r3, #0
 80162e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80162e8:	e03a      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	88db      	ldrh	r3, [r3, #6]
 80162ee:	b29a      	uxth	r2, r3
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	889b      	ldrh	r3, [r3, #4]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d902      	bls.n	8016300 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162fe:	e0c5      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	68ba      	ldr	r2, [r7, #8]
 8016304:	605a      	str	r2, [r3, #4]
      break;
 8016306:	e02b      	b.n	8016360 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	889b      	ldrh	r3, [r3, #4]
 801630c:	b29a      	uxth	r2, r3
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	889b      	ldrh	r3, [r3, #4]
 8016312:	b29b      	uxth	r3, r3
 8016314:	429a      	cmp	r2, r3
 8016316:	d102      	bne.n	801631e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801631c:	e0b6      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016320:	889b      	ldrh	r3, [r3, #4]
 8016322:	b29a      	uxth	r2, r3
 8016324:	693b      	ldr	r3, [r7, #16]
 8016326:	88db      	ldrh	r3, [r3, #6]
 8016328:	b29b      	uxth	r3, r3
 801632a:	429a      	cmp	r2, r3
 801632c:	d202      	bcs.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801632e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016332:	e0ab      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016336:	2b00      	cmp	r3, #0
 8016338:	d009      	beq.n	801634e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633c:	88db      	ldrh	r3, [r3, #6]
 801633e:	b29a      	uxth	r2, r3
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	889b      	ldrh	r3, [r3, #4]
 8016344:	b29b      	uxth	r3, r3
 8016346:	429a      	cmp	r2, r3
 8016348:	d001      	beq.n	801634e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801634a:	2300      	movs	r3, #0
 801634c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016354:	693b      	ldr	r3, [r7, #16]
 8016356:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635a:	2b00      	cmp	r3, #0
 801635c:	d193      	bne.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801635e:	e000      	b.n	8016362 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016360:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	2b00      	cmp	r3, #0
 8016366:	d12d      	bne.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636a:	2b00      	cmp	r3, #0
 801636c:	d01c      	beq.n	80163a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016370:	88db      	ldrh	r3, [r3, #6]
 8016372:	b29a      	uxth	r2, r3
 8016374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016376:	889b      	ldrh	r3, [r3, #4]
 8016378:	b29b      	uxth	r3, r3
 801637a:	429a      	cmp	r2, r3
 801637c:	d906      	bls.n	801638c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801637e:	4b45      	ldr	r3, [pc, #276]	; (8016494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016380:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016384:	4944      	ldr	r1, [pc, #272]	; (8016498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016386:	4845      	ldr	r0, [pc, #276]	; (801649c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016388:	f001 f96e 	bl	8017668 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638e:	68ba      	ldr	r2, [r7, #8]
 8016390:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	88db      	ldrh	r3, [r3, #6]
 8016396:	b29a      	uxth	r2, r3
 8016398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639a:	889b      	ldrh	r3, [r3, #4]
 801639c:	b29b      	uxth	r3, r3
 801639e:	429a      	cmp	r2, r3
 80163a0:	d010      	beq.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80163a2:	2300      	movs	r3, #0
 80163a4:	623b      	str	r3, [r7, #32]
 80163a6:	e00d      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d006      	beq.n	80163be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80163b0:	4b38      	ldr	r3, [pc, #224]	; (8016494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80163b6:	493a      	ldr	r1, [pc, #232]	; (80164a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80163b8:	4838      	ldr	r0, [pc, #224]	; (801649c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163ba:	f001 f955 	bl	8017668 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d105      	bne.n	80163d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	7f9b      	ldrb	r3, [r3, #30]
 80163ce:	f003 0301 	and.w	r3, r3, #1
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d059      	beq.n	801648a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d04f      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d006      	beq.n	80163f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	685b      	ldr	r3, [r3, #4]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	889b      	ldrh	r3, [r3, #4]
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d002      	beq.n	80163f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	623b      	str	r3, [r7, #32]
 80163f6:	e041      	b.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80163f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80163fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016402:	e012      	b.n	801642a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801640c:	88db      	ldrh	r3, [r3, #6]
 801640e:	b29a      	uxth	r2, r3
 8016410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016412:	889b      	ldrh	r3, [r3, #4]
 8016414:	b29b      	uxth	r3, r3
 8016416:	429a      	cmp	r2, r3
 8016418:	d002      	beq.n	8016420 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801641a:	2300      	movs	r3, #0
 801641c:	623b      	str	r3, [r7, #32]
            break;
 801641e:	e007      	b.n	8016430 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016422:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642c:	2b00      	cmp	r3, #0
 801642e:	d1e9      	bne.n	8016404 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016430:	6a3b      	ldr	r3, [r7, #32]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d022      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d106      	bne.n	801644c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801643e:	4b15      	ldr	r3, [pc, #84]	; (8016494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016440:	f240 12df 	movw	r2, #479	; 0x1df
 8016444:	4917      	ldr	r1, [pc, #92]	; (80164a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016446:	4815      	ldr	r0, [pc, #84]	; (801649c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016448:	f001 f90e 	bl	8017668 <iprintf>
          LWIP_ASSERT("sanity check",
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	685b      	ldr	r3, [r3, #4]
 8016450:	685b      	ldr	r3, [r3, #4]
 8016452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016454:	429a      	cmp	r2, r3
 8016456:	d106      	bne.n	8016466 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016458:	4b0e      	ldr	r3, [pc, #56]	; (8016494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801645a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801645e:	4911      	ldr	r1, [pc, #68]	; (80164a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016460:	480e      	ldr	r0, [pc, #56]	; (801649c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016462:	f001 f901 	bl	8017668 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801646e:	4b09      	ldr	r3, [pc, #36]	; (8016494 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016470:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016474:	490c      	ldr	r1, [pc, #48]	; (80164a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016476:	4809      	ldr	r0, [pc, #36]	; (801649c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016478:	f001 f8f6 	bl	8017668 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801647c:	6a3b      	ldr	r3, [r7, #32]
 801647e:	2b00      	cmp	r3, #0
 8016480:	bf14      	ite	ne
 8016482:	2301      	movne	r3, #1
 8016484:	2300      	moveq	r3, #0
 8016486:	b2db      	uxtb	r3, r3
 8016488:	e000      	b.n	801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801648a:	2300      	movs	r3, #0
}
 801648c:	4618      	mov	r0, r3
 801648e:	3730      	adds	r7, #48	; 0x30
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	0801f704 	.word	0x0801f704
 8016498:	0801f7e8 	.word	0x0801f7e8
 801649c:	0801f74c 	.word	0x0801f74c
 80164a0:	0801f808 	.word	0x0801f808
 80164a4:	0801f840 	.word	0x0801f840
 80164a8:	0801f850 	.word	0x0801f850

080164ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b08e      	sub	sp, #56	; 0x38
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80164ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	f003 030f 	and.w	r3, r3, #15
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	009b      	lsls	r3, r3, #2
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	2b14      	cmp	r3, #20
 80164ca:	f040 8167 	bne.w	801679c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d0:	88db      	ldrh	r3, [r3, #6]
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f3 fd35 	bl	8009f44 <lwip_htons>
 80164da:	4603      	mov	r3, r0
 80164dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	00db      	lsls	r3, r3, #3
 80164e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80164e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e8:	885b      	ldrh	r3, [r3, #2]
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7f3 fd29 	bl	8009f44 <lwip_htons>
 80164f2:	4603      	mov	r3, r0
 80164f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80164f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	f003 030f 	and.w	r3, r3, #15
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	009b      	lsls	r3, r3, #2
 8016502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801650a:	b29b      	uxth	r3, r3
 801650c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801650e:	429a      	cmp	r2, r3
 8016510:	f0c0 8146 	bcc.w	80167a0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016518:	b29b      	uxth	r3, r3
 801651a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801651c:	1ad3      	subs	r3, r2, r3
 801651e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f7f5 f931 	bl	800b788 <pbuf_clen>
 8016526:	4603      	mov	r3, r0
 8016528:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801652a:	4b9f      	ldr	r3, [pc, #636]	; (80167a8 <ip4_reass+0x2fc>)
 801652c:	881b      	ldrh	r3, [r3, #0]
 801652e:	461a      	mov	r2, r3
 8016530:	8c3b      	ldrh	r3, [r7, #32]
 8016532:	4413      	add	r3, r2
 8016534:	2b0a      	cmp	r3, #10
 8016536:	dd10      	ble.n	801655a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016538:	8c3b      	ldrh	r3, [r7, #32]
 801653a:	4619      	mov	r1, r3
 801653c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801653e:	f7ff fd81 	bl	8016044 <ip_reass_remove_oldest_datagram>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	f000 812d 	beq.w	80167a4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801654a:	4b97      	ldr	r3, [pc, #604]	; (80167a8 <ip4_reass+0x2fc>)
 801654c:	881b      	ldrh	r3, [r3, #0]
 801654e:	461a      	mov	r2, r3
 8016550:	8c3b      	ldrh	r3, [r7, #32]
 8016552:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016554:	2b0a      	cmp	r3, #10
 8016556:	f300 8125 	bgt.w	80167a4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801655a:	4b94      	ldr	r3, [pc, #592]	; (80167ac <ip4_reass+0x300>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	633b      	str	r3, [r7, #48]	; 0x30
 8016560:	e015      	b.n	801658e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016564:	695a      	ldr	r2, [r3, #20]
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	429a      	cmp	r2, r3
 801656c:	d10c      	bne.n	8016588 <ip4_reass+0xdc>
 801656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016570:	699a      	ldr	r2, [r3, #24]
 8016572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016574:	691b      	ldr	r3, [r3, #16]
 8016576:	429a      	cmp	r2, r3
 8016578:	d106      	bne.n	8016588 <ip4_reass+0xdc>
 801657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801657c:	899a      	ldrh	r2, [r3, #12]
 801657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016580:	889b      	ldrh	r3, [r3, #4]
 8016582:	b29b      	uxth	r3, r3
 8016584:	429a      	cmp	r2, r3
 8016586:	d006      	beq.n	8016596 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	633b      	str	r3, [r7, #48]	; 0x30
 801658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016590:	2b00      	cmp	r3, #0
 8016592:	d1e6      	bne.n	8016562 <ip4_reass+0xb6>
 8016594:	e000      	b.n	8016598 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016596:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659a:	2b00      	cmp	r3, #0
 801659c:	d109      	bne.n	80165b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801659e:	8c3b      	ldrh	r3, [r7, #32]
 80165a0:	4619      	mov	r1, r3
 80165a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165a4:	f7ff fdb0 	bl	8016108 <ip_reass_enqueue_new_datagram>
 80165a8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80165aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d11c      	bne.n	80165ea <ip4_reass+0x13e>
      goto nullreturn;
 80165b0:	e109      	b.n	80167c6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80165b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b4:	88db      	ldrh	r3, [r3, #6]
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f3 fcc3 	bl	8009f44 <lwip_htons>
 80165be:	4603      	mov	r3, r0
 80165c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d110      	bne.n	80165ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80165c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ca:	89db      	ldrh	r3, [r3, #14]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f7f3 fcb9 	bl	8009f44 <lwip_htons>
 80165d2:	4603      	mov	r3, r0
 80165d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d006      	beq.n	80165ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80165dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165de:	3308      	adds	r3, #8
 80165e0:	2214      	movs	r2, #20
 80165e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165e4:	4618      	mov	r0, r3
 80165e6:	f000 fba5 	bl	8016d34 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ec:	88db      	ldrh	r3, [r3, #6]
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	f003 0320 	and.w	r3, r3, #32
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	bf0c      	ite	eq
 80165f8:	2301      	moveq	r3, #1
 80165fa:	2300      	movne	r3, #0
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00e      	beq.n	8016624 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016606:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801660a:	4413      	add	r3, r2
 801660c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801660e:	8b7a      	ldrh	r2, [r7, #26]
 8016610:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016612:	429a      	cmp	r2, r3
 8016614:	f0c0 80a0 	bcc.w	8016758 <ip4_reass+0x2ac>
 8016618:	8b7b      	ldrh	r3, [r7, #26]
 801661a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801661e:	4293      	cmp	r3, r2
 8016620:	f200 809a 	bhi.w	8016758 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016624:	69fa      	ldr	r2, [r7, #28]
 8016626:	6879      	ldr	r1, [r7, #4]
 8016628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801662a:	f7ff fdd5 	bl	80161d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801662e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016636:	f000 8091 	beq.w	801675c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801663a:	4b5b      	ldr	r3, [pc, #364]	; (80167a8 <ip4_reass+0x2fc>)
 801663c:	881a      	ldrh	r2, [r3, #0]
 801663e:	8c3b      	ldrh	r3, [r7, #32]
 8016640:	4413      	add	r3, r2
 8016642:	b29a      	uxth	r2, r3
 8016644:	4b58      	ldr	r3, [pc, #352]	; (80167a8 <ip4_reass+0x2fc>)
 8016646:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d00d      	beq.n	801666a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801664e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016652:	4413      	add	r3, r2
 8016654:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016658:	8a7a      	ldrh	r2, [r7, #18]
 801665a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665e:	7f9b      	ldrb	r3, [r3, #30]
 8016660:	f043 0301 	orr.w	r3, r3, #1
 8016664:	b2da      	uxtb	r2, r3
 8016666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016668:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d171      	bne.n	8016754 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016672:	8b9b      	ldrh	r3, [r3, #28]
 8016674:	3314      	adds	r3, #20
 8016676:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	685b      	ldr	r3, [r3, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668c:	3308      	adds	r3, #8
 801668e:	2214      	movs	r2, #20
 8016690:	4619      	mov	r1, r3
 8016692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016694:	f000 fb4e 	bl	8016d34 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016698:	8a3b      	ldrh	r3, [r7, #16]
 801669a:	4618      	mov	r0, r3
 801669c:	f7f3 fc52 	bl	8009f44 <lwip_htons>
 80166a0:	4603      	mov	r3, r0
 80166a2:	461a      	mov	r2, r3
 80166a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80166a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166aa:	2200      	movs	r2, #0
 80166ac:	719a      	strb	r2, [r3, #6]
 80166ae:	2200      	movs	r2, #0
 80166b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80166b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b4:	2200      	movs	r2, #0
 80166b6:	729a      	strb	r2, [r3, #10]
 80166b8:	2200      	movs	r2, #0
 80166ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80166bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166be:	685b      	ldr	r3, [r3, #4]
 80166c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80166c2:	e00d      	b.n	80166e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80166c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166c6:	685b      	ldr	r3, [r3, #4]
 80166c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80166ca:	2114      	movs	r1, #20
 80166cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80166ce:	f7f4 ff4d 	bl	800b56c <pbuf_remove_header>
      pbuf_cat(p, r);
 80166d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f7f5 f891 	bl	800b7fc <pbuf_cat>
      r = iprh->next_pbuf;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80166e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d1ee      	bne.n	80166c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80166e6:	4b31      	ldr	r3, [pc, #196]	; (80167ac <ip4_reass+0x300>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d102      	bne.n	80166f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80166f0:	2300      	movs	r3, #0
 80166f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166f4:	e010      	b.n	8016718 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166f6:	4b2d      	ldr	r3, [pc, #180]	; (80167ac <ip4_reass+0x300>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166fc:	e007      	b.n	801670e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80166fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016704:	429a      	cmp	r2, r3
 8016706:	d006      	beq.n	8016716 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016710:	2b00      	cmp	r3, #0
 8016712:	d1f4      	bne.n	80166fe <ip4_reass+0x252>
 8016714:	e000      	b.n	8016718 <ip4_reass+0x26c>
          break;
 8016716:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801671a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801671c:	f7ff fd2e 	bl	801617c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f7f5 f831 	bl	800b788 <pbuf_clen>
 8016726:	4603      	mov	r3, r0
 8016728:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801672a:	4b1f      	ldr	r3, [pc, #124]	; (80167a8 <ip4_reass+0x2fc>)
 801672c:	881b      	ldrh	r3, [r3, #0]
 801672e:	8c3a      	ldrh	r2, [r7, #32]
 8016730:	429a      	cmp	r2, r3
 8016732:	d906      	bls.n	8016742 <ip4_reass+0x296>
 8016734:	4b1e      	ldr	r3, [pc, #120]	; (80167b0 <ip4_reass+0x304>)
 8016736:	f240 229b 	movw	r2, #667	; 0x29b
 801673a:	491e      	ldr	r1, [pc, #120]	; (80167b4 <ip4_reass+0x308>)
 801673c:	481e      	ldr	r0, [pc, #120]	; (80167b8 <ip4_reass+0x30c>)
 801673e:	f000 ff93 	bl	8017668 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016742:	4b19      	ldr	r3, [pc, #100]	; (80167a8 <ip4_reass+0x2fc>)
 8016744:	881a      	ldrh	r2, [r3, #0]
 8016746:	8c3b      	ldrh	r3, [r7, #32]
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	b29a      	uxth	r2, r3
 801674c:	4b16      	ldr	r3, [pc, #88]	; (80167a8 <ip4_reass+0x2fc>)
 801674e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	e03c      	b.n	80167ce <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016754:	2300      	movs	r3, #0
 8016756:	e03a      	b.n	80167ce <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016758:	bf00      	nop
 801675a:	e000      	b.n	801675e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801675c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016760:	2b00      	cmp	r3, #0
 8016762:	d106      	bne.n	8016772 <ip4_reass+0x2c6>
 8016764:	4b12      	ldr	r3, [pc, #72]	; (80167b0 <ip4_reass+0x304>)
 8016766:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801676a:	4914      	ldr	r1, [pc, #80]	; (80167bc <ip4_reass+0x310>)
 801676c:	4812      	ldr	r0, [pc, #72]	; (80167b8 <ip4_reass+0x30c>)
 801676e:	f000 ff7b 	bl	8017668 <iprintf>
  if (ipr->p == NULL) {
 8016772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d124      	bne.n	80167c4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801677a:	4b0c      	ldr	r3, [pc, #48]	; (80167ac <ip4_reass+0x300>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016780:	429a      	cmp	r2, r3
 8016782:	d006      	beq.n	8016792 <ip4_reass+0x2e6>
 8016784:	4b0a      	ldr	r3, [pc, #40]	; (80167b0 <ip4_reass+0x304>)
 8016786:	f240 22ab 	movw	r2, #683	; 0x2ab
 801678a:	490d      	ldr	r1, [pc, #52]	; (80167c0 <ip4_reass+0x314>)
 801678c:	480a      	ldr	r0, [pc, #40]	; (80167b8 <ip4_reass+0x30c>)
 801678e:	f000 ff6b 	bl	8017668 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016792:	2100      	movs	r1, #0
 8016794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016796:	f7ff fcf1 	bl	801617c <ip_reass_dequeue_datagram>
 801679a:	e014      	b.n	80167c6 <ip4_reass+0x31a>
    goto nullreturn;
 801679c:	bf00      	nop
 801679e:	e012      	b.n	80167c6 <ip4_reass+0x31a>
    goto nullreturn;
 80167a0:	bf00      	nop
 80167a2:	e010      	b.n	80167c6 <ip4_reass+0x31a>
      goto nullreturn;
 80167a4:	bf00      	nop
 80167a6:	e00e      	b.n	80167c6 <ip4_reass+0x31a>
 80167a8:	2000135c 	.word	0x2000135c
 80167ac:	20001358 	.word	0x20001358
 80167b0:	0801f704 	.word	0x0801f704
 80167b4:	0801f874 	.word	0x0801f874
 80167b8:	0801f74c 	.word	0x0801f74c
 80167bc:	0801f890 	.word	0x0801f890
 80167c0:	0801f89c 	.word	0x0801f89c
  }

nullreturn:
 80167c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f7f4 ff56 	bl	800b678 <pbuf_free>
  return NULL;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3738      	adds	r7, #56	; 0x38
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop

080167d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80167dc:	2005      	movs	r0, #5
 80167de:	f7f4 f8e5 	bl	800a9ac <memp_malloc>
 80167e2:	4603      	mov	r3, r0
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d106      	bne.n	8016804 <ip_frag_free_pbuf_custom_ref+0x1c>
 80167f6:	4b07      	ldr	r3, [pc, #28]	; (8016814 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80167f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80167fc:	4906      	ldr	r1, [pc, #24]	; (8016818 <ip_frag_free_pbuf_custom_ref+0x30>)
 80167fe:	4807      	ldr	r0, [pc, #28]	; (801681c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016800:	f000 ff32 	bl	8017668 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016804:	6879      	ldr	r1, [r7, #4]
 8016806:	2005      	movs	r0, #5
 8016808:	f7f4 f91c 	bl	800aa44 <memp_free>
}
 801680c:	bf00      	nop
 801680e:	3708      	adds	r7, #8
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	0801f704 	.word	0x0801f704
 8016818:	0801f8bc 	.word	0x0801f8bc
 801681c:	0801f74c 	.word	0x0801f74c

08016820 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b084      	sub	sp, #16
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d106      	bne.n	8016840 <ipfrag_free_pbuf_custom+0x20>
 8016832:	4b11      	ldr	r3, [pc, #68]	; (8016878 <ipfrag_free_pbuf_custom+0x58>)
 8016834:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016838:	4910      	ldr	r1, [pc, #64]	; (801687c <ipfrag_free_pbuf_custom+0x5c>)
 801683a:	4811      	ldr	r0, [pc, #68]	; (8016880 <ipfrag_free_pbuf_custom+0x60>)
 801683c:	f000 ff14 	bl	8017668 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016840:	68fa      	ldr	r2, [r7, #12]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	429a      	cmp	r2, r3
 8016846:	d006      	beq.n	8016856 <ipfrag_free_pbuf_custom+0x36>
 8016848:	4b0b      	ldr	r3, [pc, #44]	; (8016878 <ipfrag_free_pbuf_custom+0x58>)
 801684a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801684e:	490d      	ldr	r1, [pc, #52]	; (8016884 <ipfrag_free_pbuf_custom+0x64>)
 8016850:	480b      	ldr	r0, [pc, #44]	; (8016880 <ipfrag_free_pbuf_custom+0x60>)
 8016852:	f000 ff09 	bl	8017668 <iprintf>
  if (pcr->original != NULL) {
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	695b      	ldr	r3, [r3, #20]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d004      	beq.n	8016868 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	695b      	ldr	r3, [r3, #20]
 8016862:	4618      	mov	r0, r3
 8016864:	f7f4 ff08 	bl	800b678 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	f7ff ffbd 	bl	80167e8 <ip_frag_free_pbuf_custom_ref>
}
 801686e:	bf00      	nop
 8016870:	3710      	adds	r7, #16
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	0801f704 	.word	0x0801f704
 801687c:	0801f8c8 	.word	0x0801f8c8
 8016880:	0801f74c 	.word	0x0801f74c
 8016884:	0801f8d4 	.word	0x0801f8d4

08016888 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b094      	sub	sp, #80	; 0x50
 801688c:	af02      	add	r7, sp, #8
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	60b9      	str	r1, [r7, #8]
 8016892:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016894:	2300      	movs	r3, #0
 8016896:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801689e:	3b14      	subs	r3, #20
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	da00      	bge.n	80168a6 <ip4_frag+0x1e>
 80168a4:	3307      	adds	r3, #7
 80168a6:	10db      	asrs	r3, r3, #3
 80168a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80168aa:	2314      	movs	r3, #20
 80168ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80168b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80168b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	f003 030f 	and.w	r3, r3, #15
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	2b14      	cmp	r3, #20
 80168c8:	d002      	beq.n	80168d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80168ca:	f06f 0305 	mvn.w	r3, #5
 80168ce:	e110      	b.n	8016af2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	895b      	ldrh	r3, [r3, #10]
 80168d4:	2b13      	cmp	r3, #19
 80168d6:	d809      	bhi.n	80168ec <ip4_frag+0x64>
 80168d8:	4b88      	ldr	r3, [pc, #544]	; (8016afc <ip4_frag+0x274>)
 80168da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80168de:	4988      	ldr	r1, [pc, #544]	; (8016b00 <ip4_frag+0x278>)
 80168e0:	4888      	ldr	r0, [pc, #544]	; (8016b04 <ip4_frag+0x27c>)
 80168e2:	f000 fec1 	bl	8017668 <iprintf>
 80168e6:	f06f 0305 	mvn.w	r3, #5
 80168ea:	e102      	b.n	8016af2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80168ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ee:	88db      	ldrh	r3, [r3, #6]
 80168f0:	b29b      	uxth	r3, r3
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f3 fb26 	bl	8009f44 <lwip_htons>
 80168f8:	4603      	mov	r3, r0
 80168fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80168fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801690c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	891b      	ldrh	r3, [r3, #8]
 8016912:	3b14      	subs	r3, #20
 8016914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016918:	e0e1      	b.n	8016ade <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801691a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	b29b      	uxth	r3, r3
 8016920:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016924:	4293      	cmp	r3, r2
 8016926:	bf28      	it	cs
 8016928:	4613      	movcs	r3, r2
 801692a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801692c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016930:	2114      	movs	r1, #20
 8016932:	200e      	movs	r0, #14
 8016934:	f7f4 fbbc 	bl	800b0b0 <pbuf_alloc>
 8016938:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693c:	2b00      	cmp	r3, #0
 801693e:	f000 80d5 	beq.w	8016aec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016944:	895b      	ldrh	r3, [r3, #10]
 8016946:	2b13      	cmp	r3, #19
 8016948:	d806      	bhi.n	8016958 <ip4_frag+0xd0>
 801694a:	4b6c      	ldr	r3, [pc, #432]	; (8016afc <ip4_frag+0x274>)
 801694c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016950:	496d      	ldr	r1, [pc, #436]	; (8016b08 <ip4_frag+0x280>)
 8016952:	486c      	ldr	r0, [pc, #432]	; (8016b04 <ip4_frag+0x27c>)
 8016954:	f000 fe88 	bl	8017668 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	2214      	movs	r2, #20
 801695e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016960:	4618      	mov	r0, r3
 8016962:	f000 f9e7 	bl	8016d34 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801696c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801696e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016972:	e064      	b.n	8016a3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	895a      	ldrh	r2, [r3, #10]
 8016978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801697a:	1ad3      	subs	r3, r2, r3
 801697c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	895b      	ldrh	r3, [r3, #10]
 8016982:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016984:	429a      	cmp	r2, r3
 8016986:	d906      	bls.n	8016996 <ip4_frag+0x10e>
 8016988:	4b5c      	ldr	r3, [pc, #368]	; (8016afc <ip4_frag+0x274>)
 801698a:	f240 322d 	movw	r2, #813	; 0x32d
 801698e:	495f      	ldr	r1, [pc, #380]	; (8016b0c <ip4_frag+0x284>)
 8016990:	485c      	ldr	r0, [pc, #368]	; (8016b04 <ip4_frag+0x27c>)
 8016992:	f000 fe69 	bl	8017668 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016996:	8bfa      	ldrh	r2, [r7, #30]
 8016998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801699c:	4293      	cmp	r3, r2
 801699e:	bf28      	it	cs
 80169a0:	4613      	movcs	r3, r2
 80169a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80169a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d105      	bne.n	80169ba <ip4_frag+0x132>
        poff = 0;
 80169ae:	2300      	movs	r3, #0
 80169b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	60fb      	str	r3, [r7, #12]
        continue;
 80169b8:	e041      	b.n	8016a3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80169ba:	f7ff ff0d 	bl	80167d8 <ip_frag_alloc_pbuf_custom_ref>
 80169be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80169c0:	69bb      	ldr	r3, [r7, #24]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d103      	bne.n	80169ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80169c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169c8:	f7f4 fe56 	bl	800b678 <pbuf_free>
        goto memerr;
 80169cc:	e08f      	b.n	8016aee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80169ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80169d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80169d6:	4413      	add	r3, r2
 80169d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80169dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80169e0:	9201      	str	r2, [sp, #4]
 80169e2:	9300      	str	r3, [sp, #0]
 80169e4:	4603      	mov	r3, r0
 80169e6:	2241      	movs	r2, #65	; 0x41
 80169e8:	2000      	movs	r0, #0
 80169ea:	f7f4 fc8b 	bl	800b304 <pbuf_alloced_custom>
 80169ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d106      	bne.n	8016a04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80169f6:	69b8      	ldr	r0, [r7, #24]
 80169f8:	f7ff fef6 	bl	80167e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80169fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169fe:	f7f4 fe3b 	bl	800b678 <pbuf_free>
        goto memerr;
 8016a02:	e074      	b.n	8016aee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016a04:	68f8      	ldr	r0, [r7, #12]
 8016a06:	f7f4 fed7 	bl	800b7b8 <pbuf_ref>
      pcr->original = p;
 8016a0a:	69bb      	ldr	r3, [r7, #24]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016a10:	69bb      	ldr	r3, [r7, #24]
 8016a12:	4a3f      	ldr	r2, [pc, #252]	; (8016b10 <ip4_frag+0x288>)
 8016a14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016a16:	6979      	ldr	r1, [r7, #20]
 8016a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a1a:	f7f4 feef 	bl	800b7fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016a1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016a22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016a2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d004      	beq.n	8016a3e <ip4_frag+0x1b6>
        poff = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016a3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d196      	bne.n	8016974 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016a46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a4c:	4413      	add	r3, r2
 8016a4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a54:	f1a3 0213 	sub.w	r2, r3, #19
 8016a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	bfcc      	ite	gt
 8016a60:	2301      	movgt	r3, #1
 8016a62:	2300      	movle	r3, #0
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016a72:	6a3b      	ldr	r3, [r7, #32]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d002      	beq.n	8016a7e <ip4_frag+0x1f6>
 8016a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d003      	beq.n	8016a86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016a84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016a86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7f3 fa5b 	bl	8009f44 <lwip_htons>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	461a      	mov	r2, r3
 8016a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016a96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a98:	3314      	adds	r3, #20
 8016a9a:	b29b      	uxth	r3, r3
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7f3 fa51 	bl	8009f44 <lwip_htons>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	461a      	mov	r2, r3
 8016aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aac:	2200      	movs	r2, #0
 8016aae:	729a      	strb	r2, [r3, #10]
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	695b      	ldr	r3, [r3, #20]
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016abc:	68b8      	ldr	r0, [r7, #8]
 8016abe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ac2:	f7f4 fdd9 	bl	800b678 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016ac6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016acc:	1ad3      	subs	r3, r2, r3
 8016ace:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016ad2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016ad6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016ad8:	4413      	add	r3, r2
 8016ada:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	f47f af19 	bne.w	801691a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	e002      	b.n	8016af2 <ip4_frag+0x26a>
      goto memerr;
 8016aec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3748      	adds	r7, #72	; 0x48
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	0801f704 	.word	0x0801f704
 8016b00:	0801f8e0 	.word	0x0801f8e0
 8016b04:	0801f74c 	.word	0x0801f74c
 8016b08:	0801f8fc 	.word	0x0801f8fc
 8016b0c:	0801f91c 	.word	0x0801f91c
 8016b10:	08016821 	.word	0x08016821

08016b14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b086      	sub	sp, #24
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016b1e:	230e      	movs	r3, #14
 8016b20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	895b      	ldrh	r3, [r3, #10]
 8016b26:	2b0e      	cmp	r3, #14
 8016b28:	d96e      	bls.n	8016c08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	7bdb      	ldrb	r3, [r3, #15]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d106      	bne.n	8016b40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b38:	3301      	adds	r3, #1
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	685b      	ldr	r3, [r3, #4]
 8016b44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	7b1a      	ldrb	r2, [r3, #12]
 8016b4a:	7b5b      	ldrb	r3, [r3, #13]
 8016b4c:	021b      	lsls	r3, r3, #8
 8016b4e:	4313      	orrs	r3, r2
 8016b50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	f003 0301 	and.w	r3, r3, #1
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d023      	beq.n	8016ba6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	2b01      	cmp	r3, #1
 8016b64:	d10f      	bne.n	8016b86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	785b      	ldrb	r3, [r3, #1]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d11b      	bne.n	8016ba6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b72:	2b5e      	cmp	r3, #94	; 0x5e
 8016b74:	d117      	bne.n	8016ba6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	7b5b      	ldrb	r3, [r3, #13]
 8016b7a:	f043 0310 	orr.w	r3, r3, #16
 8016b7e:	b2da      	uxtb	r2, r3
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	735a      	strb	r2, [r3, #13]
 8016b84:	e00f      	b.n	8016ba6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	2206      	movs	r2, #6
 8016b8a:	4928      	ldr	r1, [pc, #160]	; (8016c2c <ethernet_input+0x118>)
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f000 f8c3 	bl	8016d18 <memcmp>
 8016b92:	4603      	mov	r3, r0
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d106      	bne.n	8016ba6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	7b5b      	ldrb	r3, [r3, #13]
 8016b9c:	f043 0308 	orr.w	r3, r3, #8
 8016ba0:	b2da      	uxtb	r2, r3
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016ba6:	89fb      	ldrh	r3, [r7, #14]
 8016ba8:	2b08      	cmp	r3, #8
 8016baa:	d003      	beq.n	8016bb4 <ethernet_input+0xa0>
 8016bac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016bb0:	d014      	beq.n	8016bdc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016bb2:	e032      	b.n	8016c1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016bba:	f003 0308 	and.w	r3, r3, #8
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d024      	beq.n	8016c0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016bc2:	8afb      	ldrh	r3, [r7, #22]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f7f4 fcd0 	bl	800b56c <pbuf_remove_header>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d11e      	bne.n	8016c10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016bd2:	6839      	ldr	r1, [r7, #0]
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f7fe fef3 	bl	80159c0 <ip4_input>
      break;
 8016bda:	e013      	b.n	8016c04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016be2:	f003 0308 	and.w	r3, r3, #8
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d014      	beq.n	8016c14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016bea:	8afb      	ldrh	r3, [r7, #22]
 8016bec:	4619      	mov	r1, r3
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7f4 fcbc 	bl	800b56c <pbuf_remove_header>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d10e      	bne.n	8016c18 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016bfa:	6839      	ldr	r1, [r7, #0]
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f7fe f88f 	bl	8014d20 <etharp_input>
      break;
 8016c02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016c04:	2300      	movs	r3, #0
 8016c06:	e00c      	b.n	8016c22 <ethernet_input+0x10e>
    goto free_and_return;
 8016c08:	bf00      	nop
 8016c0a:	e006      	b.n	8016c1a <ethernet_input+0x106>
        goto free_and_return;
 8016c0c:	bf00      	nop
 8016c0e:	e004      	b.n	8016c1a <ethernet_input+0x106>
        goto free_and_return;
 8016c10:	bf00      	nop
 8016c12:	e002      	b.n	8016c1a <ethernet_input+0x106>
        goto free_and_return;
 8016c14:	bf00      	nop
 8016c16:	e000      	b.n	8016c1a <ethernet_input+0x106>
        goto free_and_return;
 8016c18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f7f4 fd2c 	bl	800b678 <pbuf_free>
  return ERR_OK;
 8016c20:	2300      	movs	r3, #0
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	3718      	adds	r7, #24
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}
 8016c2a:	bf00      	nop
 8016c2c:	08033a20 	.word	0x08033a20

08016c30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b086      	sub	sp, #24
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016c3e:	8c3b      	ldrh	r3, [r7, #32]
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f3 f97f 	bl	8009f44 <lwip_htons>
 8016c46:	4603      	mov	r3, r0
 8016c48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016c4a:	210e      	movs	r1, #14
 8016c4c:	68b8      	ldr	r0, [r7, #8]
 8016c4e:	f7f4 fc7d 	bl	800b54c <pbuf_add_header>
 8016c52:	4603      	mov	r3, r0
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d125      	bne.n	8016ca4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	8afa      	ldrh	r2, [r7, #22]
 8016c62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	2206      	movs	r2, #6
 8016c68:	6839      	ldr	r1, [r7, #0]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f000 f862 	bl	8016d34 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	3306      	adds	r3, #6
 8016c74:	2206      	movs	r2, #6
 8016c76:	6879      	ldr	r1, [r7, #4]
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f000 f85b 	bl	8016d34 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c84:	2b06      	cmp	r3, #6
 8016c86:	d006      	beq.n	8016c96 <ethernet_output+0x66>
 8016c88:	4b0a      	ldr	r3, [pc, #40]	; (8016cb4 <ethernet_output+0x84>)
 8016c8a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016c8e:	490a      	ldr	r1, [pc, #40]	; (8016cb8 <ethernet_output+0x88>)
 8016c90:	480a      	ldr	r0, [pc, #40]	; (8016cbc <ethernet_output+0x8c>)
 8016c92:	f000 fce9 	bl	8017668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	699b      	ldr	r3, [r3, #24]
 8016c9a:	68b9      	ldr	r1, [r7, #8]
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	4798      	blx	r3
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	e002      	b.n	8016caa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016ca4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016ca6:	f06f 0301 	mvn.w	r3, #1
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3718      	adds	r7, #24
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	0801f92c 	.word	0x0801f92c
 8016cb8:	0801f964 	.word	0x0801f964
 8016cbc:	0801f998 	.word	0x0801f998

08016cc0 <atof>:
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	f001 bc7b 	b.w	80185bc <strtod>

08016cc6 <atoi>:
 8016cc6:	220a      	movs	r2, #10
 8016cc8:	2100      	movs	r1, #0
 8016cca:	f001 bd67 	b.w	801879c <strtol>
	...

08016cd0 <__libc_init_array>:
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	4d0d      	ldr	r5, [pc, #52]	; (8016d08 <__libc_init_array+0x38>)
 8016cd4:	4c0d      	ldr	r4, [pc, #52]	; (8016d0c <__libc_init_array+0x3c>)
 8016cd6:	1b64      	subs	r4, r4, r5
 8016cd8:	10a4      	asrs	r4, r4, #2
 8016cda:	2600      	movs	r6, #0
 8016cdc:	42a6      	cmp	r6, r4
 8016cde:	d109      	bne.n	8016cf4 <__libc_init_array+0x24>
 8016ce0:	4d0b      	ldr	r5, [pc, #44]	; (8016d10 <__libc_init_array+0x40>)
 8016ce2:	4c0c      	ldr	r4, [pc, #48]	; (8016d14 <__libc_init_array+0x44>)
 8016ce4:	f004 fc02 	bl	801b4ec <_init>
 8016ce8:	1b64      	subs	r4, r4, r5
 8016cea:	10a4      	asrs	r4, r4, #2
 8016cec:	2600      	movs	r6, #0
 8016cee:	42a6      	cmp	r6, r4
 8016cf0:	d105      	bne.n	8016cfe <__libc_init_array+0x2e>
 8016cf2:	bd70      	pop	{r4, r5, r6, pc}
 8016cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cf8:	4798      	blx	r3
 8016cfa:	3601      	adds	r6, #1
 8016cfc:	e7ee      	b.n	8016cdc <__libc_init_array+0xc>
 8016cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d02:	4798      	blx	r3
 8016d04:	3601      	adds	r6, #1
 8016d06:	e7f2      	b.n	8016cee <__libc_init_array+0x1e>
 8016d08:	08033fa8 	.word	0x08033fa8
 8016d0c:	08033fa8 	.word	0x08033fa8
 8016d10:	08033fa8 	.word	0x08033fa8
 8016d14:	08033fac 	.word	0x08033fac

08016d18 <memcmp>:
 8016d18:	b530      	push	{r4, r5, lr}
 8016d1a:	3901      	subs	r1, #1
 8016d1c:	2400      	movs	r4, #0
 8016d1e:	42a2      	cmp	r2, r4
 8016d20:	d101      	bne.n	8016d26 <memcmp+0xe>
 8016d22:	2000      	movs	r0, #0
 8016d24:	e005      	b.n	8016d32 <memcmp+0x1a>
 8016d26:	5d03      	ldrb	r3, [r0, r4]
 8016d28:	3401      	adds	r4, #1
 8016d2a:	5d0d      	ldrb	r5, [r1, r4]
 8016d2c:	42ab      	cmp	r3, r5
 8016d2e:	d0f6      	beq.n	8016d1e <memcmp+0x6>
 8016d30:	1b58      	subs	r0, r3, r5
 8016d32:	bd30      	pop	{r4, r5, pc}

08016d34 <memcpy>:
 8016d34:	440a      	add	r2, r1
 8016d36:	4291      	cmp	r1, r2
 8016d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d3c:	d100      	bne.n	8016d40 <memcpy+0xc>
 8016d3e:	4770      	bx	lr
 8016d40:	b510      	push	{r4, lr}
 8016d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d4a:	4291      	cmp	r1, r2
 8016d4c:	d1f9      	bne.n	8016d42 <memcpy+0xe>
 8016d4e:	bd10      	pop	{r4, pc}

08016d50 <memmove>:
 8016d50:	4288      	cmp	r0, r1
 8016d52:	b510      	push	{r4, lr}
 8016d54:	eb01 0402 	add.w	r4, r1, r2
 8016d58:	d902      	bls.n	8016d60 <memmove+0x10>
 8016d5a:	4284      	cmp	r4, r0
 8016d5c:	4623      	mov	r3, r4
 8016d5e:	d807      	bhi.n	8016d70 <memmove+0x20>
 8016d60:	1e43      	subs	r3, r0, #1
 8016d62:	42a1      	cmp	r1, r4
 8016d64:	d008      	beq.n	8016d78 <memmove+0x28>
 8016d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d6e:	e7f8      	b.n	8016d62 <memmove+0x12>
 8016d70:	4402      	add	r2, r0
 8016d72:	4601      	mov	r1, r0
 8016d74:	428a      	cmp	r2, r1
 8016d76:	d100      	bne.n	8016d7a <memmove+0x2a>
 8016d78:	bd10      	pop	{r4, pc}
 8016d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d82:	e7f7      	b.n	8016d74 <memmove+0x24>

08016d84 <memset>:
 8016d84:	4402      	add	r2, r0
 8016d86:	4603      	mov	r3, r0
 8016d88:	4293      	cmp	r3, r2
 8016d8a:	d100      	bne.n	8016d8e <memset+0xa>
 8016d8c:	4770      	bx	lr
 8016d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8016d92:	e7f9      	b.n	8016d88 <memset+0x4>

08016d94 <__cvt>:
 8016d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d98:	ec55 4b10 	vmov	r4, r5, d0
 8016d9c:	2d00      	cmp	r5, #0
 8016d9e:	460e      	mov	r6, r1
 8016da0:	4619      	mov	r1, r3
 8016da2:	462b      	mov	r3, r5
 8016da4:	bfbb      	ittet	lt
 8016da6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016daa:	461d      	movlt	r5, r3
 8016dac:	2300      	movge	r3, #0
 8016dae:	232d      	movlt	r3, #45	; 0x2d
 8016db0:	700b      	strb	r3, [r1, #0]
 8016db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016db4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016db8:	4691      	mov	r9, r2
 8016dba:	f023 0820 	bic.w	r8, r3, #32
 8016dbe:	bfbc      	itt	lt
 8016dc0:	4622      	movlt	r2, r4
 8016dc2:	4614      	movlt	r4, r2
 8016dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016dc8:	d005      	beq.n	8016dd6 <__cvt+0x42>
 8016dca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016dce:	d100      	bne.n	8016dd2 <__cvt+0x3e>
 8016dd0:	3601      	adds	r6, #1
 8016dd2:	2102      	movs	r1, #2
 8016dd4:	e000      	b.n	8016dd8 <__cvt+0x44>
 8016dd6:	2103      	movs	r1, #3
 8016dd8:	ab03      	add	r3, sp, #12
 8016dda:	9301      	str	r3, [sp, #4]
 8016ddc:	ab02      	add	r3, sp, #8
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	ec45 4b10 	vmov	d0, r4, r5
 8016de4:	4653      	mov	r3, sl
 8016de6:	4632      	mov	r2, r6
 8016de8:	f001 fe4e 	bl	8018a88 <_dtoa_r>
 8016dec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016df0:	4607      	mov	r7, r0
 8016df2:	d102      	bne.n	8016dfa <__cvt+0x66>
 8016df4:	f019 0f01 	tst.w	r9, #1
 8016df8:	d022      	beq.n	8016e40 <__cvt+0xac>
 8016dfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016dfe:	eb07 0906 	add.w	r9, r7, r6
 8016e02:	d110      	bne.n	8016e26 <__cvt+0x92>
 8016e04:	783b      	ldrb	r3, [r7, #0]
 8016e06:	2b30      	cmp	r3, #48	; 0x30
 8016e08:	d10a      	bne.n	8016e20 <__cvt+0x8c>
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	4620      	mov	r0, r4
 8016e10:	4629      	mov	r1, r5
 8016e12:	f7e9 fe69 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e16:	b918      	cbnz	r0, 8016e20 <__cvt+0x8c>
 8016e18:	f1c6 0601 	rsb	r6, r6, #1
 8016e1c:	f8ca 6000 	str.w	r6, [sl]
 8016e20:	f8da 3000 	ldr.w	r3, [sl]
 8016e24:	4499      	add	r9, r3
 8016e26:	2200      	movs	r2, #0
 8016e28:	2300      	movs	r3, #0
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	f7e9 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e32:	b108      	cbz	r0, 8016e38 <__cvt+0xa4>
 8016e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8016e38:	2230      	movs	r2, #48	; 0x30
 8016e3a:	9b03      	ldr	r3, [sp, #12]
 8016e3c:	454b      	cmp	r3, r9
 8016e3e:	d307      	bcc.n	8016e50 <__cvt+0xbc>
 8016e40:	9b03      	ldr	r3, [sp, #12]
 8016e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e44:	1bdb      	subs	r3, r3, r7
 8016e46:	4638      	mov	r0, r7
 8016e48:	6013      	str	r3, [r2, #0]
 8016e4a:	b004      	add	sp, #16
 8016e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e50:	1c59      	adds	r1, r3, #1
 8016e52:	9103      	str	r1, [sp, #12]
 8016e54:	701a      	strb	r2, [r3, #0]
 8016e56:	e7f0      	b.n	8016e3a <__cvt+0xa6>

08016e58 <__exponent>:
 8016e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2900      	cmp	r1, #0
 8016e5e:	bfb8      	it	lt
 8016e60:	4249      	neglt	r1, r1
 8016e62:	f803 2b02 	strb.w	r2, [r3], #2
 8016e66:	bfb4      	ite	lt
 8016e68:	222d      	movlt	r2, #45	; 0x2d
 8016e6a:	222b      	movge	r2, #43	; 0x2b
 8016e6c:	2909      	cmp	r1, #9
 8016e6e:	7042      	strb	r2, [r0, #1]
 8016e70:	dd2a      	ble.n	8016ec8 <__exponent+0x70>
 8016e72:	f10d 0407 	add.w	r4, sp, #7
 8016e76:	46a4      	mov	ip, r4
 8016e78:	270a      	movs	r7, #10
 8016e7a:	46a6      	mov	lr, r4
 8016e7c:	460a      	mov	r2, r1
 8016e7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8016e82:	fb07 1516 	mls	r5, r7, r6, r1
 8016e86:	3530      	adds	r5, #48	; 0x30
 8016e88:	2a63      	cmp	r2, #99	; 0x63
 8016e8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8016e8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016e92:	4631      	mov	r1, r6
 8016e94:	dcf1      	bgt.n	8016e7a <__exponent+0x22>
 8016e96:	3130      	adds	r1, #48	; 0x30
 8016e98:	f1ae 0502 	sub.w	r5, lr, #2
 8016e9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016ea0:	1c44      	adds	r4, r0, #1
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	4561      	cmp	r1, ip
 8016ea6:	d30a      	bcc.n	8016ebe <__exponent+0x66>
 8016ea8:	f10d 0209 	add.w	r2, sp, #9
 8016eac:	eba2 020e 	sub.w	r2, r2, lr
 8016eb0:	4565      	cmp	r5, ip
 8016eb2:	bf88      	it	hi
 8016eb4:	2200      	movhi	r2, #0
 8016eb6:	4413      	add	r3, r2
 8016eb8:	1a18      	subs	r0, r3, r0
 8016eba:	b003      	add	sp, #12
 8016ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ec2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016ec6:	e7ed      	b.n	8016ea4 <__exponent+0x4c>
 8016ec8:	2330      	movs	r3, #48	; 0x30
 8016eca:	3130      	adds	r1, #48	; 0x30
 8016ecc:	7083      	strb	r3, [r0, #2]
 8016ece:	70c1      	strb	r1, [r0, #3]
 8016ed0:	1d03      	adds	r3, r0, #4
 8016ed2:	e7f1      	b.n	8016eb8 <__exponent+0x60>

08016ed4 <_printf_float>:
 8016ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	ed2d 8b02 	vpush	{d8}
 8016edc:	b08d      	sub	sp, #52	; 0x34
 8016ede:	460c      	mov	r4, r1
 8016ee0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016ee4:	4616      	mov	r6, r2
 8016ee6:	461f      	mov	r7, r3
 8016ee8:	4605      	mov	r5, r0
 8016eea:	f003 f8f7 	bl	801a0dc <_localeconv_r>
 8016eee:	f8d0 a000 	ldr.w	sl, [r0]
 8016ef2:	4650      	mov	r0, sl
 8016ef4:	f7e9 f976 	bl	80001e4 <strlen>
 8016ef8:	2300      	movs	r3, #0
 8016efa:	930a      	str	r3, [sp, #40]	; 0x28
 8016efc:	6823      	ldr	r3, [r4, #0]
 8016efe:	9305      	str	r3, [sp, #20]
 8016f00:	f8d8 3000 	ldr.w	r3, [r8]
 8016f04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016f08:	3307      	adds	r3, #7
 8016f0a:	f023 0307 	bic.w	r3, r3, #7
 8016f0e:	f103 0208 	add.w	r2, r3, #8
 8016f12:	f8c8 2000 	str.w	r2, [r8]
 8016f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016f1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016f22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016f26:	9307      	str	r3, [sp, #28]
 8016f28:	f8cd 8018 	str.w	r8, [sp, #24]
 8016f2c:	ee08 0a10 	vmov	s16, r0
 8016f30:	4b9f      	ldr	r3, [pc, #636]	; (80171b0 <_printf_float+0x2dc>)
 8016f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f3a:	f7e9 fe07 	bl	8000b4c <__aeabi_dcmpun>
 8016f3e:	bb88      	cbnz	r0, 8016fa4 <_printf_float+0xd0>
 8016f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f44:	4b9a      	ldr	r3, [pc, #616]	; (80171b0 <_printf_float+0x2dc>)
 8016f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f4a:	f7e9 fde1 	bl	8000b10 <__aeabi_dcmple>
 8016f4e:	bb48      	cbnz	r0, 8016fa4 <_printf_float+0xd0>
 8016f50:	2200      	movs	r2, #0
 8016f52:	2300      	movs	r3, #0
 8016f54:	4640      	mov	r0, r8
 8016f56:	4649      	mov	r1, r9
 8016f58:	f7e9 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8016f5c:	b110      	cbz	r0, 8016f64 <_printf_float+0x90>
 8016f5e:	232d      	movs	r3, #45	; 0x2d
 8016f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f64:	4b93      	ldr	r3, [pc, #588]	; (80171b4 <_printf_float+0x2e0>)
 8016f66:	4894      	ldr	r0, [pc, #592]	; (80171b8 <_printf_float+0x2e4>)
 8016f68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016f6c:	bf94      	ite	ls
 8016f6e:	4698      	movls	r8, r3
 8016f70:	4680      	movhi	r8, r0
 8016f72:	2303      	movs	r3, #3
 8016f74:	6123      	str	r3, [r4, #16]
 8016f76:	9b05      	ldr	r3, [sp, #20]
 8016f78:	f023 0204 	bic.w	r2, r3, #4
 8016f7c:	6022      	str	r2, [r4, #0]
 8016f7e:	f04f 0900 	mov.w	r9, #0
 8016f82:	9700      	str	r7, [sp, #0]
 8016f84:	4633      	mov	r3, r6
 8016f86:	aa0b      	add	r2, sp, #44	; 0x2c
 8016f88:	4621      	mov	r1, r4
 8016f8a:	4628      	mov	r0, r5
 8016f8c:	f000 f9d8 	bl	8017340 <_printf_common>
 8016f90:	3001      	adds	r0, #1
 8016f92:	f040 8090 	bne.w	80170b6 <_printf_float+0x1e2>
 8016f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f9a:	b00d      	add	sp, #52	; 0x34
 8016f9c:	ecbd 8b02 	vpop	{d8}
 8016fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa4:	4642      	mov	r2, r8
 8016fa6:	464b      	mov	r3, r9
 8016fa8:	4640      	mov	r0, r8
 8016faa:	4649      	mov	r1, r9
 8016fac:	f7e9 fdce 	bl	8000b4c <__aeabi_dcmpun>
 8016fb0:	b140      	cbz	r0, 8016fc4 <_printf_float+0xf0>
 8016fb2:	464b      	mov	r3, r9
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	bfbc      	itt	lt
 8016fb8:	232d      	movlt	r3, #45	; 0x2d
 8016fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016fbe:	487f      	ldr	r0, [pc, #508]	; (80171bc <_printf_float+0x2e8>)
 8016fc0:	4b7f      	ldr	r3, [pc, #508]	; (80171c0 <_printf_float+0x2ec>)
 8016fc2:	e7d1      	b.n	8016f68 <_printf_float+0x94>
 8016fc4:	6863      	ldr	r3, [r4, #4]
 8016fc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016fca:	9206      	str	r2, [sp, #24]
 8016fcc:	1c5a      	adds	r2, r3, #1
 8016fce:	d13f      	bne.n	8017050 <_printf_float+0x17c>
 8016fd0:	2306      	movs	r3, #6
 8016fd2:	6063      	str	r3, [r4, #4]
 8016fd4:	9b05      	ldr	r3, [sp, #20]
 8016fd6:	6861      	ldr	r1, [r4, #4]
 8016fd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016fdc:	2300      	movs	r3, #0
 8016fde:	9303      	str	r3, [sp, #12]
 8016fe0:	ab0a      	add	r3, sp, #40	; 0x28
 8016fe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016fe6:	ab09      	add	r3, sp, #36	; 0x24
 8016fe8:	ec49 8b10 	vmov	d0, r8, r9
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	6022      	str	r2, [r4, #0]
 8016ff0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f7ff fecd 	bl	8016d94 <__cvt>
 8016ffa:	9b06      	ldr	r3, [sp, #24]
 8016ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ffe:	2b47      	cmp	r3, #71	; 0x47
 8017000:	4680      	mov	r8, r0
 8017002:	d108      	bne.n	8017016 <_printf_float+0x142>
 8017004:	1cc8      	adds	r0, r1, #3
 8017006:	db02      	blt.n	801700e <_printf_float+0x13a>
 8017008:	6863      	ldr	r3, [r4, #4]
 801700a:	4299      	cmp	r1, r3
 801700c:	dd41      	ble.n	8017092 <_printf_float+0x1be>
 801700e:	f1ab 0b02 	sub.w	fp, fp, #2
 8017012:	fa5f fb8b 	uxtb.w	fp, fp
 8017016:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801701a:	d820      	bhi.n	801705e <_printf_float+0x18a>
 801701c:	3901      	subs	r1, #1
 801701e:	465a      	mov	r2, fp
 8017020:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017024:	9109      	str	r1, [sp, #36]	; 0x24
 8017026:	f7ff ff17 	bl	8016e58 <__exponent>
 801702a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801702c:	1813      	adds	r3, r2, r0
 801702e:	2a01      	cmp	r2, #1
 8017030:	4681      	mov	r9, r0
 8017032:	6123      	str	r3, [r4, #16]
 8017034:	dc02      	bgt.n	801703c <_printf_float+0x168>
 8017036:	6822      	ldr	r2, [r4, #0]
 8017038:	07d2      	lsls	r2, r2, #31
 801703a:	d501      	bpl.n	8017040 <_printf_float+0x16c>
 801703c:	3301      	adds	r3, #1
 801703e:	6123      	str	r3, [r4, #16]
 8017040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017044:	2b00      	cmp	r3, #0
 8017046:	d09c      	beq.n	8016f82 <_printf_float+0xae>
 8017048:	232d      	movs	r3, #45	; 0x2d
 801704a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801704e:	e798      	b.n	8016f82 <_printf_float+0xae>
 8017050:	9a06      	ldr	r2, [sp, #24]
 8017052:	2a47      	cmp	r2, #71	; 0x47
 8017054:	d1be      	bne.n	8016fd4 <_printf_float+0x100>
 8017056:	2b00      	cmp	r3, #0
 8017058:	d1bc      	bne.n	8016fd4 <_printf_float+0x100>
 801705a:	2301      	movs	r3, #1
 801705c:	e7b9      	b.n	8016fd2 <_printf_float+0xfe>
 801705e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017062:	d118      	bne.n	8017096 <_printf_float+0x1c2>
 8017064:	2900      	cmp	r1, #0
 8017066:	6863      	ldr	r3, [r4, #4]
 8017068:	dd0b      	ble.n	8017082 <_printf_float+0x1ae>
 801706a:	6121      	str	r1, [r4, #16]
 801706c:	b913      	cbnz	r3, 8017074 <_printf_float+0x1a0>
 801706e:	6822      	ldr	r2, [r4, #0]
 8017070:	07d0      	lsls	r0, r2, #31
 8017072:	d502      	bpl.n	801707a <_printf_float+0x1a6>
 8017074:	3301      	adds	r3, #1
 8017076:	440b      	add	r3, r1
 8017078:	6123      	str	r3, [r4, #16]
 801707a:	65a1      	str	r1, [r4, #88]	; 0x58
 801707c:	f04f 0900 	mov.w	r9, #0
 8017080:	e7de      	b.n	8017040 <_printf_float+0x16c>
 8017082:	b913      	cbnz	r3, 801708a <_printf_float+0x1b6>
 8017084:	6822      	ldr	r2, [r4, #0]
 8017086:	07d2      	lsls	r2, r2, #31
 8017088:	d501      	bpl.n	801708e <_printf_float+0x1ba>
 801708a:	3302      	adds	r3, #2
 801708c:	e7f4      	b.n	8017078 <_printf_float+0x1a4>
 801708e:	2301      	movs	r3, #1
 8017090:	e7f2      	b.n	8017078 <_printf_float+0x1a4>
 8017092:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017098:	4299      	cmp	r1, r3
 801709a:	db05      	blt.n	80170a8 <_printf_float+0x1d4>
 801709c:	6823      	ldr	r3, [r4, #0]
 801709e:	6121      	str	r1, [r4, #16]
 80170a0:	07d8      	lsls	r0, r3, #31
 80170a2:	d5ea      	bpl.n	801707a <_printf_float+0x1a6>
 80170a4:	1c4b      	adds	r3, r1, #1
 80170a6:	e7e7      	b.n	8017078 <_printf_float+0x1a4>
 80170a8:	2900      	cmp	r1, #0
 80170aa:	bfd4      	ite	le
 80170ac:	f1c1 0202 	rsble	r2, r1, #2
 80170b0:	2201      	movgt	r2, #1
 80170b2:	4413      	add	r3, r2
 80170b4:	e7e0      	b.n	8017078 <_printf_float+0x1a4>
 80170b6:	6823      	ldr	r3, [r4, #0]
 80170b8:	055a      	lsls	r2, r3, #21
 80170ba:	d407      	bmi.n	80170cc <_printf_float+0x1f8>
 80170bc:	6923      	ldr	r3, [r4, #16]
 80170be:	4642      	mov	r2, r8
 80170c0:	4631      	mov	r1, r6
 80170c2:	4628      	mov	r0, r5
 80170c4:	47b8      	blx	r7
 80170c6:	3001      	adds	r0, #1
 80170c8:	d12c      	bne.n	8017124 <_printf_float+0x250>
 80170ca:	e764      	b.n	8016f96 <_printf_float+0xc2>
 80170cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80170d0:	f240 80e0 	bls.w	8017294 <_printf_float+0x3c0>
 80170d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80170d8:	2200      	movs	r2, #0
 80170da:	2300      	movs	r3, #0
 80170dc:	f7e9 fd04 	bl	8000ae8 <__aeabi_dcmpeq>
 80170e0:	2800      	cmp	r0, #0
 80170e2:	d034      	beq.n	801714e <_printf_float+0x27a>
 80170e4:	4a37      	ldr	r2, [pc, #220]	; (80171c4 <_printf_float+0x2f0>)
 80170e6:	2301      	movs	r3, #1
 80170e8:	4631      	mov	r1, r6
 80170ea:	4628      	mov	r0, r5
 80170ec:	47b8      	blx	r7
 80170ee:	3001      	adds	r0, #1
 80170f0:	f43f af51 	beq.w	8016f96 <_printf_float+0xc2>
 80170f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80170f8:	429a      	cmp	r2, r3
 80170fa:	db02      	blt.n	8017102 <_printf_float+0x22e>
 80170fc:	6823      	ldr	r3, [r4, #0]
 80170fe:	07d8      	lsls	r0, r3, #31
 8017100:	d510      	bpl.n	8017124 <_printf_float+0x250>
 8017102:	ee18 3a10 	vmov	r3, s16
 8017106:	4652      	mov	r2, sl
 8017108:	4631      	mov	r1, r6
 801710a:	4628      	mov	r0, r5
 801710c:	47b8      	blx	r7
 801710e:	3001      	adds	r0, #1
 8017110:	f43f af41 	beq.w	8016f96 <_printf_float+0xc2>
 8017114:	f04f 0800 	mov.w	r8, #0
 8017118:	f104 091a 	add.w	r9, r4, #26
 801711c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801711e:	3b01      	subs	r3, #1
 8017120:	4543      	cmp	r3, r8
 8017122:	dc09      	bgt.n	8017138 <_printf_float+0x264>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	079b      	lsls	r3, r3, #30
 8017128:	f100 8105 	bmi.w	8017336 <_printf_float+0x462>
 801712c:	68e0      	ldr	r0, [r4, #12]
 801712e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017130:	4298      	cmp	r0, r3
 8017132:	bfb8      	it	lt
 8017134:	4618      	movlt	r0, r3
 8017136:	e730      	b.n	8016f9a <_printf_float+0xc6>
 8017138:	2301      	movs	r3, #1
 801713a:	464a      	mov	r2, r9
 801713c:	4631      	mov	r1, r6
 801713e:	4628      	mov	r0, r5
 8017140:	47b8      	blx	r7
 8017142:	3001      	adds	r0, #1
 8017144:	f43f af27 	beq.w	8016f96 <_printf_float+0xc2>
 8017148:	f108 0801 	add.w	r8, r8, #1
 801714c:	e7e6      	b.n	801711c <_printf_float+0x248>
 801714e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017150:	2b00      	cmp	r3, #0
 8017152:	dc39      	bgt.n	80171c8 <_printf_float+0x2f4>
 8017154:	4a1b      	ldr	r2, [pc, #108]	; (80171c4 <_printf_float+0x2f0>)
 8017156:	2301      	movs	r3, #1
 8017158:	4631      	mov	r1, r6
 801715a:	4628      	mov	r0, r5
 801715c:	47b8      	blx	r7
 801715e:	3001      	adds	r0, #1
 8017160:	f43f af19 	beq.w	8016f96 <_printf_float+0xc2>
 8017164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017168:	4313      	orrs	r3, r2
 801716a:	d102      	bne.n	8017172 <_printf_float+0x29e>
 801716c:	6823      	ldr	r3, [r4, #0]
 801716e:	07d9      	lsls	r1, r3, #31
 8017170:	d5d8      	bpl.n	8017124 <_printf_float+0x250>
 8017172:	ee18 3a10 	vmov	r3, s16
 8017176:	4652      	mov	r2, sl
 8017178:	4631      	mov	r1, r6
 801717a:	4628      	mov	r0, r5
 801717c:	47b8      	blx	r7
 801717e:	3001      	adds	r0, #1
 8017180:	f43f af09 	beq.w	8016f96 <_printf_float+0xc2>
 8017184:	f04f 0900 	mov.w	r9, #0
 8017188:	f104 0a1a 	add.w	sl, r4, #26
 801718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801718e:	425b      	negs	r3, r3
 8017190:	454b      	cmp	r3, r9
 8017192:	dc01      	bgt.n	8017198 <_printf_float+0x2c4>
 8017194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017196:	e792      	b.n	80170be <_printf_float+0x1ea>
 8017198:	2301      	movs	r3, #1
 801719a:	4652      	mov	r2, sl
 801719c:	4631      	mov	r1, r6
 801719e:	4628      	mov	r0, r5
 80171a0:	47b8      	blx	r7
 80171a2:	3001      	adds	r0, #1
 80171a4:	f43f aef7 	beq.w	8016f96 <_printf_float+0xc2>
 80171a8:	f109 0901 	add.w	r9, r9, #1
 80171ac:	e7ee      	b.n	801718c <_printf_float+0x2b8>
 80171ae:	bf00      	nop
 80171b0:	7fefffff 	.word	0x7fefffff
 80171b4:	08033b34 	.word	0x08033b34
 80171b8:	08033b38 	.word	0x08033b38
 80171bc:	08033b40 	.word	0x08033b40
 80171c0:	08033b3c 	.word	0x08033b3c
 80171c4:	08033b44 	.word	0x08033b44
 80171c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80171cc:	429a      	cmp	r2, r3
 80171ce:	bfa8      	it	ge
 80171d0:	461a      	movge	r2, r3
 80171d2:	2a00      	cmp	r2, #0
 80171d4:	4691      	mov	r9, r2
 80171d6:	dc37      	bgt.n	8017248 <_printf_float+0x374>
 80171d8:	f04f 0b00 	mov.w	fp, #0
 80171dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80171e0:	f104 021a 	add.w	r2, r4, #26
 80171e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80171e6:	9305      	str	r3, [sp, #20]
 80171e8:	eba3 0309 	sub.w	r3, r3, r9
 80171ec:	455b      	cmp	r3, fp
 80171ee:	dc33      	bgt.n	8017258 <_printf_float+0x384>
 80171f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80171f4:	429a      	cmp	r2, r3
 80171f6:	db3b      	blt.n	8017270 <_printf_float+0x39c>
 80171f8:	6823      	ldr	r3, [r4, #0]
 80171fa:	07da      	lsls	r2, r3, #31
 80171fc:	d438      	bmi.n	8017270 <_printf_float+0x39c>
 80171fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017200:	9b05      	ldr	r3, [sp, #20]
 8017202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	eba2 0901 	sub.w	r9, r2, r1
 801720a:	4599      	cmp	r9, r3
 801720c:	bfa8      	it	ge
 801720e:	4699      	movge	r9, r3
 8017210:	f1b9 0f00 	cmp.w	r9, #0
 8017214:	dc35      	bgt.n	8017282 <_printf_float+0x3ae>
 8017216:	f04f 0800 	mov.w	r8, #0
 801721a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801721e:	f104 0a1a 	add.w	sl, r4, #26
 8017222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017226:	1a9b      	subs	r3, r3, r2
 8017228:	eba3 0309 	sub.w	r3, r3, r9
 801722c:	4543      	cmp	r3, r8
 801722e:	f77f af79 	ble.w	8017124 <_printf_float+0x250>
 8017232:	2301      	movs	r3, #1
 8017234:	4652      	mov	r2, sl
 8017236:	4631      	mov	r1, r6
 8017238:	4628      	mov	r0, r5
 801723a:	47b8      	blx	r7
 801723c:	3001      	adds	r0, #1
 801723e:	f43f aeaa 	beq.w	8016f96 <_printf_float+0xc2>
 8017242:	f108 0801 	add.w	r8, r8, #1
 8017246:	e7ec      	b.n	8017222 <_printf_float+0x34e>
 8017248:	4613      	mov	r3, r2
 801724a:	4631      	mov	r1, r6
 801724c:	4642      	mov	r2, r8
 801724e:	4628      	mov	r0, r5
 8017250:	47b8      	blx	r7
 8017252:	3001      	adds	r0, #1
 8017254:	d1c0      	bne.n	80171d8 <_printf_float+0x304>
 8017256:	e69e      	b.n	8016f96 <_printf_float+0xc2>
 8017258:	2301      	movs	r3, #1
 801725a:	4631      	mov	r1, r6
 801725c:	4628      	mov	r0, r5
 801725e:	9205      	str	r2, [sp, #20]
 8017260:	47b8      	blx	r7
 8017262:	3001      	adds	r0, #1
 8017264:	f43f ae97 	beq.w	8016f96 <_printf_float+0xc2>
 8017268:	9a05      	ldr	r2, [sp, #20]
 801726a:	f10b 0b01 	add.w	fp, fp, #1
 801726e:	e7b9      	b.n	80171e4 <_printf_float+0x310>
 8017270:	ee18 3a10 	vmov	r3, s16
 8017274:	4652      	mov	r2, sl
 8017276:	4631      	mov	r1, r6
 8017278:	4628      	mov	r0, r5
 801727a:	47b8      	blx	r7
 801727c:	3001      	adds	r0, #1
 801727e:	d1be      	bne.n	80171fe <_printf_float+0x32a>
 8017280:	e689      	b.n	8016f96 <_printf_float+0xc2>
 8017282:	9a05      	ldr	r2, [sp, #20]
 8017284:	464b      	mov	r3, r9
 8017286:	4442      	add	r2, r8
 8017288:	4631      	mov	r1, r6
 801728a:	4628      	mov	r0, r5
 801728c:	47b8      	blx	r7
 801728e:	3001      	adds	r0, #1
 8017290:	d1c1      	bne.n	8017216 <_printf_float+0x342>
 8017292:	e680      	b.n	8016f96 <_printf_float+0xc2>
 8017294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017296:	2a01      	cmp	r2, #1
 8017298:	dc01      	bgt.n	801729e <_printf_float+0x3ca>
 801729a:	07db      	lsls	r3, r3, #31
 801729c:	d538      	bpl.n	8017310 <_printf_float+0x43c>
 801729e:	2301      	movs	r3, #1
 80172a0:	4642      	mov	r2, r8
 80172a2:	4631      	mov	r1, r6
 80172a4:	4628      	mov	r0, r5
 80172a6:	47b8      	blx	r7
 80172a8:	3001      	adds	r0, #1
 80172aa:	f43f ae74 	beq.w	8016f96 <_printf_float+0xc2>
 80172ae:	ee18 3a10 	vmov	r3, s16
 80172b2:	4652      	mov	r2, sl
 80172b4:	4631      	mov	r1, r6
 80172b6:	4628      	mov	r0, r5
 80172b8:	47b8      	blx	r7
 80172ba:	3001      	adds	r0, #1
 80172bc:	f43f ae6b 	beq.w	8016f96 <_printf_float+0xc2>
 80172c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80172c4:	2200      	movs	r2, #0
 80172c6:	2300      	movs	r3, #0
 80172c8:	f7e9 fc0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80172cc:	b9d8      	cbnz	r0, 8017306 <_printf_float+0x432>
 80172ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172d0:	f108 0201 	add.w	r2, r8, #1
 80172d4:	3b01      	subs	r3, #1
 80172d6:	4631      	mov	r1, r6
 80172d8:	4628      	mov	r0, r5
 80172da:	47b8      	blx	r7
 80172dc:	3001      	adds	r0, #1
 80172de:	d10e      	bne.n	80172fe <_printf_float+0x42a>
 80172e0:	e659      	b.n	8016f96 <_printf_float+0xc2>
 80172e2:	2301      	movs	r3, #1
 80172e4:	4652      	mov	r2, sl
 80172e6:	4631      	mov	r1, r6
 80172e8:	4628      	mov	r0, r5
 80172ea:	47b8      	blx	r7
 80172ec:	3001      	adds	r0, #1
 80172ee:	f43f ae52 	beq.w	8016f96 <_printf_float+0xc2>
 80172f2:	f108 0801 	add.w	r8, r8, #1
 80172f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172f8:	3b01      	subs	r3, #1
 80172fa:	4543      	cmp	r3, r8
 80172fc:	dcf1      	bgt.n	80172e2 <_printf_float+0x40e>
 80172fe:	464b      	mov	r3, r9
 8017300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017304:	e6dc      	b.n	80170c0 <_printf_float+0x1ec>
 8017306:	f04f 0800 	mov.w	r8, #0
 801730a:	f104 0a1a 	add.w	sl, r4, #26
 801730e:	e7f2      	b.n	80172f6 <_printf_float+0x422>
 8017310:	2301      	movs	r3, #1
 8017312:	4642      	mov	r2, r8
 8017314:	e7df      	b.n	80172d6 <_printf_float+0x402>
 8017316:	2301      	movs	r3, #1
 8017318:	464a      	mov	r2, r9
 801731a:	4631      	mov	r1, r6
 801731c:	4628      	mov	r0, r5
 801731e:	47b8      	blx	r7
 8017320:	3001      	adds	r0, #1
 8017322:	f43f ae38 	beq.w	8016f96 <_printf_float+0xc2>
 8017326:	f108 0801 	add.w	r8, r8, #1
 801732a:	68e3      	ldr	r3, [r4, #12]
 801732c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801732e:	1a5b      	subs	r3, r3, r1
 8017330:	4543      	cmp	r3, r8
 8017332:	dcf0      	bgt.n	8017316 <_printf_float+0x442>
 8017334:	e6fa      	b.n	801712c <_printf_float+0x258>
 8017336:	f04f 0800 	mov.w	r8, #0
 801733a:	f104 0919 	add.w	r9, r4, #25
 801733e:	e7f4      	b.n	801732a <_printf_float+0x456>

08017340 <_printf_common>:
 8017340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017344:	4616      	mov	r6, r2
 8017346:	4699      	mov	r9, r3
 8017348:	688a      	ldr	r2, [r1, #8]
 801734a:	690b      	ldr	r3, [r1, #16]
 801734c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017350:	4293      	cmp	r3, r2
 8017352:	bfb8      	it	lt
 8017354:	4613      	movlt	r3, r2
 8017356:	6033      	str	r3, [r6, #0]
 8017358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801735c:	4607      	mov	r7, r0
 801735e:	460c      	mov	r4, r1
 8017360:	b10a      	cbz	r2, 8017366 <_printf_common+0x26>
 8017362:	3301      	adds	r3, #1
 8017364:	6033      	str	r3, [r6, #0]
 8017366:	6823      	ldr	r3, [r4, #0]
 8017368:	0699      	lsls	r1, r3, #26
 801736a:	bf42      	ittt	mi
 801736c:	6833      	ldrmi	r3, [r6, #0]
 801736e:	3302      	addmi	r3, #2
 8017370:	6033      	strmi	r3, [r6, #0]
 8017372:	6825      	ldr	r5, [r4, #0]
 8017374:	f015 0506 	ands.w	r5, r5, #6
 8017378:	d106      	bne.n	8017388 <_printf_common+0x48>
 801737a:	f104 0a19 	add.w	sl, r4, #25
 801737e:	68e3      	ldr	r3, [r4, #12]
 8017380:	6832      	ldr	r2, [r6, #0]
 8017382:	1a9b      	subs	r3, r3, r2
 8017384:	42ab      	cmp	r3, r5
 8017386:	dc26      	bgt.n	80173d6 <_printf_common+0x96>
 8017388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801738c:	1e13      	subs	r3, r2, #0
 801738e:	6822      	ldr	r2, [r4, #0]
 8017390:	bf18      	it	ne
 8017392:	2301      	movne	r3, #1
 8017394:	0692      	lsls	r2, r2, #26
 8017396:	d42b      	bmi.n	80173f0 <_printf_common+0xb0>
 8017398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801739c:	4649      	mov	r1, r9
 801739e:	4638      	mov	r0, r7
 80173a0:	47c0      	blx	r8
 80173a2:	3001      	adds	r0, #1
 80173a4:	d01e      	beq.n	80173e4 <_printf_common+0xa4>
 80173a6:	6823      	ldr	r3, [r4, #0]
 80173a8:	68e5      	ldr	r5, [r4, #12]
 80173aa:	6832      	ldr	r2, [r6, #0]
 80173ac:	f003 0306 	and.w	r3, r3, #6
 80173b0:	2b04      	cmp	r3, #4
 80173b2:	bf08      	it	eq
 80173b4:	1aad      	subeq	r5, r5, r2
 80173b6:	68a3      	ldr	r3, [r4, #8]
 80173b8:	6922      	ldr	r2, [r4, #16]
 80173ba:	bf0c      	ite	eq
 80173bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173c0:	2500      	movne	r5, #0
 80173c2:	4293      	cmp	r3, r2
 80173c4:	bfc4      	itt	gt
 80173c6:	1a9b      	subgt	r3, r3, r2
 80173c8:	18ed      	addgt	r5, r5, r3
 80173ca:	2600      	movs	r6, #0
 80173cc:	341a      	adds	r4, #26
 80173ce:	42b5      	cmp	r5, r6
 80173d0:	d11a      	bne.n	8017408 <_printf_common+0xc8>
 80173d2:	2000      	movs	r0, #0
 80173d4:	e008      	b.n	80173e8 <_printf_common+0xa8>
 80173d6:	2301      	movs	r3, #1
 80173d8:	4652      	mov	r2, sl
 80173da:	4649      	mov	r1, r9
 80173dc:	4638      	mov	r0, r7
 80173de:	47c0      	blx	r8
 80173e0:	3001      	adds	r0, #1
 80173e2:	d103      	bne.n	80173ec <_printf_common+0xac>
 80173e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ec:	3501      	adds	r5, #1
 80173ee:	e7c6      	b.n	801737e <_printf_common+0x3e>
 80173f0:	18e1      	adds	r1, r4, r3
 80173f2:	1c5a      	adds	r2, r3, #1
 80173f4:	2030      	movs	r0, #48	; 0x30
 80173f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80173fa:	4422      	add	r2, r4
 80173fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017404:	3302      	adds	r3, #2
 8017406:	e7c7      	b.n	8017398 <_printf_common+0x58>
 8017408:	2301      	movs	r3, #1
 801740a:	4622      	mov	r2, r4
 801740c:	4649      	mov	r1, r9
 801740e:	4638      	mov	r0, r7
 8017410:	47c0      	blx	r8
 8017412:	3001      	adds	r0, #1
 8017414:	d0e6      	beq.n	80173e4 <_printf_common+0xa4>
 8017416:	3601      	adds	r6, #1
 8017418:	e7d9      	b.n	80173ce <_printf_common+0x8e>
	...

0801741c <_printf_i>:
 801741c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017420:	460c      	mov	r4, r1
 8017422:	4691      	mov	r9, r2
 8017424:	7e27      	ldrb	r7, [r4, #24]
 8017426:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017428:	2f78      	cmp	r7, #120	; 0x78
 801742a:	4680      	mov	r8, r0
 801742c:	469a      	mov	sl, r3
 801742e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017432:	d807      	bhi.n	8017444 <_printf_i+0x28>
 8017434:	2f62      	cmp	r7, #98	; 0x62
 8017436:	d80a      	bhi.n	801744e <_printf_i+0x32>
 8017438:	2f00      	cmp	r7, #0
 801743a:	f000 80d8 	beq.w	80175ee <_printf_i+0x1d2>
 801743e:	2f58      	cmp	r7, #88	; 0x58
 8017440:	f000 80a3 	beq.w	801758a <_printf_i+0x16e>
 8017444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801744c:	e03a      	b.n	80174c4 <_printf_i+0xa8>
 801744e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017452:	2b15      	cmp	r3, #21
 8017454:	d8f6      	bhi.n	8017444 <_printf_i+0x28>
 8017456:	a001      	add	r0, pc, #4	; (adr r0, 801745c <_printf_i+0x40>)
 8017458:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801745c:	080174b5 	.word	0x080174b5
 8017460:	080174c9 	.word	0x080174c9
 8017464:	08017445 	.word	0x08017445
 8017468:	08017445 	.word	0x08017445
 801746c:	08017445 	.word	0x08017445
 8017470:	08017445 	.word	0x08017445
 8017474:	080174c9 	.word	0x080174c9
 8017478:	08017445 	.word	0x08017445
 801747c:	08017445 	.word	0x08017445
 8017480:	08017445 	.word	0x08017445
 8017484:	08017445 	.word	0x08017445
 8017488:	080175d5 	.word	0x080175d5
 801748c:	080174f9 	.word	0x080174f9
 8017490:	080175b7 	.word	0x080175b7
 8017494:	08017445 	.word	0x08017445
 8017498:	08017445 	.word	0x08017445
 801749c:	080175f7 	.word	0x080175f7
 80174a0:	08017445 	.word	0x08017445
 80174a4:	080174f9 	.word	0x080174f9
 80174a8:	08017445 	.word	0x08017445
 80174ac:	08017445 	.word	0x08017445
 80174b0:	080175bf 	.word	0x080175bf
 80174b4:	680b      	ldr	r3, [r1, #0]
 80174b6:	1d1a      	adds	r2, r3, #4
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	600a      	str	r2, [r1, #0]
 80174bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80174c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80174c4:	2301      	movs	r3, #1
 80174c6:	e0a3      	b.n	8017610 <_printf_i+0x1f4>
 80174c8:	6825      	ldr	r5, [r4, #0]
 80174ca:	6808      	ldr	r0, [r1, #0]
 80174cc:	062e      	lsls	r6, r5, #24
 80174ce:	f100 0304 	add.w	r3, r0, #4
 80174d2:	d50a      	bpl.n	80174ea <_printf_i+0xce>
 80174d4:	6805      	ldr	r5, [r0, #0]
 80174d6:	600b      	str	r3, [r1, #0]
 80174d8:	2d00      	cmp	r5, #0
 80174da:	da03      	bge.n	80174e4 <_printf_i+0xc8>
 80174dc:	232d      	movs	r3, #45	; 0x2d
 80174de:	426d      	negs	r5, r5
 80174e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174e4:	485e      	ldr	r0, [pc, #376]	; (8017660 <_printf_i+0x244>)
 80174e6:	230a      	movs	r3, #10
 80174e8:	e019      	b.n	801751e <_printf_i+0x102>
 80174ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80174ee:	6805      	ldr	r5, [r0, #0]
 80174f0:	600b      	str	r3, [r1, #0]
 80174f2:	bf18      	it	ne
 80174f4:	b22d      	sxthne	r5, r5
 80174f6:	e7ef      	b.n	80174d8 <_printf_i+0xbc>
 80174f8:	680b      	ldr	r3, [r1, #0]
 80174fa:	6825      	ldr	r5, [r4, #0]
 80174fc:	1d18      	adds	r0, r3, #4
 80174fe:	6008      	str	r0, [r1, #0]
 8017500:	0628      	lsls	r0, r5, #24
 8017502:	d501      	bpl.n	8017508 <_printf_i+0xec>
 8017504:	681d      	ldr	r5, [r3, #0]
 8017506:	e002      	b.n	801750e <_printf_i+0xf2>
 8017508:	0669      	lsls	r1, r5, #25
 801750a:	d5fb      	bpl.n	8017504 <_printf_i+0xe8>
 801750c:	881d      	ldrh	r5, [r3, #0]
 801750e:	4854      	ldr	r0, [pc, #336]	; (8017660 <_printf_i+0x244>)
 8017510:	2f6f      	cmp	r7, #111	; 0x6f
 8017512:	bf0c      	ite	eq
 8017514:	2308      	moveq	r3, #8
 8017516:	230a      	movne	r3, #10
 8017518:	2100      	movs	r1, #0
 801751a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801751e:	6866      	ldr	r6, [r4, #4]
 8017520:	60a6      	str	r6, [r4, #8]
 8017522:	2e00      	cmp	r6, #0
 8017524:	bfa2      	ittt	ge
 8017526:	6821      	ldrge	r1, [r4, #0]
 8017528:	f021 0104 	bicge.w	r1, r1, #4
 801752c:	6021      	strge	r1, [r4, #0]
 801752e:	b90d      	cbnz	r5, 8017534 <_printf_i+0x118>
 8017530:	2e00      	cmp	r6, #0
 8017532:	d04d      	beq.n	80175d0 <_printf_i+0x1b4>
 8017534:	4616      	mov	r6, r2
 8017536:	fbb5 f1f3 	udiv	r1, r5, r3
 801753a:	fb03 5711 	mls	r7, r3, r1, r5
 801753e:	5dc7      	ldrb	r7, [r0, r7]
 8017540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017544:	462f      	mov	r7, r5
 8017546:	42bb      	cmp	r3, r7
 8017548:	460d      	mov	r5, r1
 801754a:	d9f4      	bls.n	8017536 <_printf_i+0x11a>
 801754c:	2b08      	cmp	r3, #8
 801754e:	d10b      	bne.n	8017568 <_printf_i+0x14c>
 8017550:	6823      	ldr	r3, [r4, #0]
 8017552:	07df      	lsls	r7, r3, #31
 8017554:	d508      	bpl.n	8017568 <_printf_i+0x14c>
 8017556:	6923      	ldr	r3, [r4, #16]
 8017558:	6861      	ldr	r1, [r4, #4]
 801755a:	4299      	cmp	r1, r3
 801755c:	bfde      	ittt	le
 801755e:	2330      	movle	r3, #48	; 0x30
 8017560:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017564:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017568:	1b92      	subs	r2, r2, r6
 801756a:	6122      	str	r2, [r4, #16]
 801756c:	f8cd a000 	str.w	sl, [sp]
 8017570:	464b      	mov	r3, r9
 8017572:	aa03      	add	r2, sp, #12
 8017574:	4621      	mov	r1, r4
 8017576:	4640      	mov	r0, r8
 8017578:	f7ff fee2 	bl	8017340 <_printf_common>
 801757c:	3001      	adds	r0, #1
 801757e:	d14c      	bne.n	801761a <_printf_i+0x1fe>
 8017580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017584:	b004      	add	sp, #16
 8017586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801758a:	4835      	ldr	r0, [pc, #212]	; (8017660 <_printf_i+0x244>)
 801758c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017590:	6823      	ldr	r3, [r4, #0]
 8017592:	680e      	ldr	r6, [r1, #0]
 8017594:	061f      	lsls	r7, r3, #24
 8017596:	f856 5b04 	ldr.w	r5, [r6], #4
 801759a:	600e      	str	r6, [r1, #0]
 801759c:	d514      	bpl.n	80175c8 <_printf_i+0x1ac>
 801759e:	07d9      	lsls	r1, r3, #31
 80175a0:	bf44      	itt	mi
 80175a2:	f043 0320 	orrmi.w	r3, r3, #32
 80175a6:	6023      	strmi	r3, [r4, #0]
 80175a8:	b91d      	cbnz	r5, 80175b2 <_printf_i+0x196>
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	f023 0320 	bic.w	r3, r3, #32
 80175b0:	6023      	str	r3, [r4, #0]
 80175b2:	2310      	movs	r3, #16
 80175b4:	e7b0      	b.n	8017518 <_printf_i+0xfc>
 80175b6:	6823      	ldr	r3, [r4, #0]
 80175b8:	f043 0320 	orr.w	r3, r3, #32
 80175bc:	6023      	str	r3, [r4, #0]
 80175be:	2378      	movs	r3, #120	; 0x78
 80175c0:	4828      	ldr	r0, [pc, #160]	; (8017664 <_printf_i+0x248>)
 80175c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80175c6:	e7e3      	b.n	8017590 <_printf_i+0x174>
 80175c8:	065e      	lsls	r6, r3, #25
 80175ca:	bf48      	it	mi
 80175cc:	b2ad      	uxthmi	r5, r5
 80175ce:	e7e6      	b.n	801759e <_printf_i+0x182>
 80175d0:	4616      	mov	r6, r2
 80175d2:	e7bb      	b.n	801754c <_printf_i+0x130>
 80175d4:	680b      	ldr	r3, [r1, #0]
 80175d6:	6826      	ldr	r6, [r4, #0]
 80175d8:	6960      	ldr	r0, [r4, #20]
 80175da:	1d1d      	adds	r5, r3, #4
 80175dc:	600d      	str	r5, [r1, #0]
 80175de:	0635      	lsls	r5, r6, #24
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	d501      	bpl.n	80175e8 <_printf_i+0x1cc>
 80175e4:	6018      	str	r0, [r3, #0]
 80175e6:	e002      	b.n	80175ee <_printf_i+0x1d2>
 80175e8:	0671      	lsls	r1, r6, #25
 80175ea:	d5fb      	bpl.n	80175e4 <_printf_i+0x1c8>
 80175ec:	8018      	strh	r0, [r3, #0]
 80175ee:	2300      	movs	r3, #0
 80175f0:	6123      	str	r3, [r4, #16]
 80175f2:	4616      	mov	r6, r2
 80175f4:	e7ba      	b.n	801756c <_printf_i+0x150>
 80175f6:	680b      	ldr	r3, [r1, #0]
 80175f8:	1d1a      	adds	r2, r3, #4
 80175fa:	600a      	str	r2, [r1, #0]
 80175fc:	681e      	ldr	r6, [r3, #0]
 80175fe:	6862      	ldr	r2, [r4, #4]
 8017600:	2100      	movs	r1, #0
 8017602:	4630      	mov	r0, r6
 8017604:	f7e8 fdfc 	bl	8000200 <memchr>
 8017608:	b108      	cbz	r0, 801760e <_printf_i+0x1f2>
 801760a:	1b80      	subs	r0, r0, r6
 801760c:	6060      	str	r0, [r4, #4]
 801760e:	6863      	ldr	r3, [r4, #4]
 8017610:	6123      	str	r3, [r4, #16]
 8017612:	2300      	movs	r3, #0
 8017614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017618:	e7a8      	b.n	801756c <_printf_i+0x150>
 801761a:	6923      	ldr	r3, [r4, #16]
 801761c:	4632      	mov	r2, r6
 801761e:	4649      	mov	r1, r9
 8017620:	4640      	mov	r0, r8
 8017622:	47d0      	blx	sl
 8017624:	3001      	adds	r0, #1
 8017626:	d0ab      	beq.n	8017580 <_printf_i+0x164>
 8017628:	6823      	ldr	r3, [r4, #0]
 801762a:	079b      	lsls	r3, r3, #30
 801762c:	d413      	bmi.n	8017656 <_printf_i+0x23a>
 801762e:	68e0      	ldr	r0, [r4, #12]
 8017630:	9b03      	ldr	r3, [sp, #12]
 8017632:	4298      	cmp	r0, r3
 8017634:	bfb8      	it	lt
 8017636:	4618      	movlt	r0, r3
 8017638:	e7a4      	b.n	8017584 <_printf_i+0x168>
 801763a:	2301      	movs	r3, #1
 801763c:	4632      	mov	r2, r6
 801763e:	4649      	mov	r1, r9
 8017640:	4640      	mov	r0, r8
 8017642:	47d0      	blx	sl
 8017644:	3001      	adds	r0, #1
 8017646:	d09b      	beq.n	8017580 <_printf_i+0x164>
 8017648:	3501      	adds	r5, #1
 801764a:	68e3      	ldr	r3, [r4, #12]
 801764c:	9903      	ldr	r1, [sp, #12]
 801764e:	1a5b      	subs	r3, r3, r1
 8017650:	42ab      	cmp	r3, r5
 8017652:	dcf2      	bgt.n	801763a <_printf_i+0x21e>
 8017654:	e7eb      	b.n	801762e <_printf_i+0x212>
 8017656:	2500      	movs	r5, #0
 8017658:	f104 0619 	add.w	r6, r4, #25
 801765c:	e7f5      	b.n	801764a <_printf_i+0x22e>
 801765e:	bf00      	nop
 8017660:	08033b46 	.word	0x08033b46
 8017664:	08033b57 	.word	0x08033b57

08017668 <iprintf>:
 8017668:	b40f      	push	{r0, r1, r2, r3}
 801766a:	4b0a      	ldr	r3, [pc, #40]	; (8017694 <iprintf+0x2c>)
 801766c:	b513      	push	{r0, r1, r4, lr}
 801766e:	681c      	ldr	r4, [r3, #0]
 8017670:	b124      	cbz	r4, 801767c <iprintf+0x14>
 8017672:	69a3      	ldr	r3, [r4, #24]
 8017674:	b913      	cbnz	r3, 801767c <iprintf+0x14>
 8017676:	4620      	mov	r0, r4
 8017678:	f002 f912 	bl	80198a0 <__sinit>
 801767c:	ab05      	add	r3, sp, #20
 801767e:	9a04      	ldr	r2, [sp, #16]
 8017680:	68a1      	ldr	r1, [r4, #8]
 8017682:	9301      	str	r3, [sp, #4]
 8017684:	4620      	mov	r0, r4
 8017686:	f003 fca9 	bl	801afdc <_vfiprintf_r>
 801768a:	b002      	add	sp, #8
 801768c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017690:	b004      	add	sp, #16
 8017692:	4770      	bx	lr
 8017694:	200005cc 	.word	0x200005cc

08017698 <_puts_r>:
 8017698:	b570      	push	{r4, r5, r6, lr}
 801769a:	460e      	mov	r6, r1
 801769c:	4605      	mov	r5, r0
 801769e:	b118      	cbz	r0, 80176a8 <_puts_r+0x10>
 80176a0:	6983      	ldr	r3, [r0, #24]
 80176a2:	b90b      	cbnz	r3, 80176a8 <_puts_r+0x10>
 80176a4:	f002 f8fc 	bl	80198a0 <__sinit>
 80176a8:	69ab      	ldr	r3, [r5, #24]
 80176aa:	68ac      	ldr	r4, [r5, #8]
 80176ac:	b913      	cbnz	r3, 80176b4 <_puts_r+0x1c>
 80176ae:	4628      	mov	r0, r5
 80176b0:	f002 f8f6 	bl	80198a0 <__sinit>
 80176b4:	4b2c      	ldr	r3, [pc, #176]	; (8017768 <_puts_r+0xd0>)
 80176b6:	429c      	cmp	r4, r3
 80176b8:	d120      	bne.n	80176fc <_puts_r+0x64>
 80176ba:	686c      	ldr	r4, [r5, #4]
 80176bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176be:	07db      	lsls	r3, r3, #31
 80176c0:	d405      	bmi.n	80176ce <_puts_r+0x36>
 80176c2:	89a3      	ldrh	r3, [r4, #12]
 80176c4:	0598      	lsls	r0, r3, #22
 80176c6:	d402      	bmi.n	80176ce <_puts_r+0x36>
 80176c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ca:	f002 fd0c 	bl	801a0e6 <__retarget_lock_acquire_recursive>
 80176ce:	89a3      	ldrh	r3, [r4, #12]
 80176d0:	0719      	lsls	r1, r3, #28
 80176d2:	d51d      	bpl.n	8017710 <_puts_r+0x78>
 80176d4:	6923      	ldr	r3, [r4, #16]
 80176d6:	b1db      	cbz	r3, 8017710 <_puts_r+0x78>
 80176d8:	3e01      	subs	r6, #1
 80176da:	68a3      	ldr	r3, [r4, #8]
 80176dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80176e0:	3b01      	subs	r3, #1
 80176e2:	60a3      	str	r3, [r4, #8]
 80176e4:	bb39      	cbnz	r1, 8017736 <_puts_r+0x9e>
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	da38      	bge.n	801775c <_puts_r+0xc4>
 80176ea:	4622      	mov	r2, r4
 80176ec:	210a      	movs	r1, #10
 80176ee:	4628      	mov	r0, r5
 80176f0:	f001 f85e 	bl	80187b0 <__swbuf_r>
 80176f4:	3001      	adds	r0, #1
 80176f6:	d011      	beq.n	801771c <_puts_r+0x84>
 80176f8:	250a      	movs	r5, #10
 80176fa:	e011      	b.n	8017720 <_puts_r+0x88>
 80176fc:	4b1b      	ldr	r3, [pc, #108]	; (801776c <_puts_r+0xd4>)
 80176fe:	429c      	cmp	r4, r3
 8017700:	d101      	bne.n	8017706 <_puts_r+0x6e>
 8017702:	68ac      	ldr	r4, [r5, #8]
 8017704:	e7da      	b.n	80176bc <_puts_r+0x24>
 8017706:	4b1a      	ldr	r3, [pc, #104]	; (8017770 <_puts_r+0xd8>)
 8017708:	429c      	cmp	r4, r3
 801770a:	bf08      	it	eq
 801770c:	68ec      	ldreq	r4, [r5, #12]
 801770e:	e7d5      	b.n	80176bc <_puts_r+0x24>
 8017710:	4621      	mov	r1, r4
 8017712:	4628      	mov	r0, r5
 8017714:	f001 f89e 	bl	8018854 <__swsetup_r>
 8017718:	2800      	cmp	r0, #0
 801771a:	d0dd      	beq.n	80176d8 <_puts_r+0x40>
 801771c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017722:	07da      	lsls	r2, r3, #31
 8017724:	d405      	bmi.n	8017732 <_puts_r+0x9a>
 8017726:	89a3      	ldrh	r3, [r4, #12]
 8017728:	059b      	lsls	r3, r3, #22
 801772a:	d402      	bmi.n	8017732 <_puts_r+0x9a>
 801772c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801772e:	f002 fcdb 	bl	801a0e8 <__retarget_lock_release_recursive>
 8017732:	4628      	mov	r0, r5
 8017734:	bd70      	pop	{r4, r5, r6, pc}
 8017736:	2b00      	cmp	r3, #0
 8017738:	da04      	bge.n	8017744 <_puts_r+0xac>
 801773a:	69a2      	ldr	r2, [r4, #24]
 801773c:	429a      	cmp	r2, r3
 801773e:	dc06      	bgt.n	801774e <_puts_r+0xb6>
 8017740:	290a      	cmp	r1, #10
 8017742:	d004      	beq.n	801774e <_puts_r+0xb6>
 8017744:	6823      	ldr	r3, [r4, #0]
 8017746:	1c5a      	adds	r2, r3, #1
 8017748:	6022      	str	r2, [r4, #0]
 801774a:	7019      	strb	r1, [r3, #0]
 801774c:	e7c5      	b.n	80176da <_puts_r+0x42>
 801774e:	4622      	mov	r2, r4
 8017750:	4628      	mov	r0, r5
 8017752:	f001 f82d 	bl	80187b0 <__swbuf_r>
 8017756:	3001      	adds	r0, #1
 8017758:	d1bf      	bne.n	80176da <_puts_r+0x42>
 801775a:	e7df      	b.n	801771c <_puts_r+0x84>
 801775c:	6823      	ldr	r3, [r4, #0]
 801775e:	250a      	movs	r5, #10
 8017760:	1c5a      	adds	r2, r3, #1
 8017762:	6022      	str	r2, [r4, #0]
 8017764:	701d      	strb	r5, [r3, #0]
 8017766:	e7db      	b.n	8017720 <_puts_r+0x88>
 8017768:	08033d6c 	.word	0x08033d6c
 801776c:	08033d8c 	.word	0x08033d8c
 8017770:	08033d4c 	.word	0x08033d4c

08017774 <puts>:
 8017774:	4b02      	ldr	r3, [pc, #8]	; (8017780 <puts+0xc>)
 8017776:	4601      	mov	r1, r0
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	f7ff bf8d 	b.w	8017698 <_puts_r>
 801777e:	bf00      	nop
 8017780:	200005cc 	.word	0x200005cc

08017784 <rand>:
 8017784:	4b17      	ldr	r3, [pc, #92]	; (80177e4 <rand+0x60>)
 8017786:	b510      	push	{r4, lr}
 8017788:	681c      	ldr	r4, [r3, #0]
 801778a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801778c:	b9b3      	cbnz	r3, 80177bc <rand+0x38>
 801778e:	2018      	movs	r0, #24
 8017790:	f002 fd10 	bl	801a1b4 <malloc>
 8017794:	63a0      	str	r0, [r4, #56]	; 0x38
 8017796:	b928      	cbnz	r0, 80177a4 <rand+0x20>
 8017798:	4602      	mov	r2, r0
 801779a:	4b13      	ldr	r3, [pc, #76]	; (80177e8 <rand+0x64>)
 801779c:	4813      	ldr	r0, [pc, #76]	; (80177ec <rand+0x68>)
 801779e:	214e      	movs	r1, #78	; 0x4e
 80177a0:	f001 f8c6 	bl	8018930 <__assert_func>
 80177a4:	4a12      	ldr	r2, [pc, #72]	; (80177f0 <rand+0x6c>)
 80177a6:	4b13      	ldr	r3, [pc, #76]	; (80177f4 <rand+0x70>)
 80177a8:	e9c0 2300 	strd	r2, r3, [r0]
 80177ac:	4b12      	ldr	r3, [pc, #72]	; (80177f8 <rand+0x74>)
 80177ae:	6083      	str	r3, [r0, #8]
 80177b0:	230b      	movs	r3, #11
 80177b2:	8183      	strh	r3, [r0, #12]
 80177b4:	2201      	movs	r2, #1
 80177b6:	2300      	movs	r3, #0
 80177b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80177bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80177be:	480f      	ldr	r0, [pc, #60]	; (80177fc <rand+0x78>)
 80177c0:	690a      	ldr	r2, [r1, #16]
 80177c2:	694b      	ldr	r3, [r1, #20]
 80177c4:	4c0e      	ldr	r4, [pc, #56]	; (8017800 <rand+0x7c>)
 80177c6:	4350      	muls	r0, r2
 80177c8:	fb04 0003 	mla	r0, r4, r3, r0
 80177cc:	fba2 3404 	umull	r3, r4, r2, r4
 80177d0:	1c5a      	adds	r2, r3, #1
 80177d2:	4404      	add	r4, r0
 80177d4:	f144 0000 	adc.w	r0, r4, #0
 80177d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80177dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80177e0:	bd10      	pop	{r4, pc}
 80177e2:	bf00      	nop
 80177e4:	200005cc 	.word	0x200005cc
 80177e8:	08033b68 	.word	0x08033b68
 80177ec:	08033b7f 	.word	0x08033b7f
 80177f0:	abcd330e 	.word	0xabcd330e
 80177f4:	e66d1234 	.word	0xe66d1234
 80177f8:	0005deec 	.word	0x0005deec
 80177fc:	5851f42d 	.word	0x5851f42d
 8017800:	4c957f2d 	.word	0x4c957f2d

08017804 <sniprintf>:
 8017804:	b40c      	push	{r2, r3}
 8017806:	b530      	push	{r4, r5, lr}
 8017808:	4b17      	ldr	r3, [pc, #92]	; (8017868 <sniprintf+0x64>)
 801780a:	1e0c      	subs	r4, r1, #0
 801780c:	681d      	ldr	r5, [r3, #0]
 801780e:	b09d      	sub	sp, #116	; 0x74
 8017810:	da08      	bge.n	8017824 <sniprintf+0x20>
 8017812:	238b      	movs	r3, #139	; 0x8b
 8017814:	602b      	str	r3, [r5, #0]
 8017816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801781a:	b01d      	add	sp, #116	; 0x74
 801781c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017820:	b002      	add	sp, #8
 8017822:	4770      	bx	lr
 8017824:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017828:	f8ad 3014 	strh.w	r3, [sp, #20]
 801782c:	bf14      	ite	ne
 801782e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017832:	4623      	moveq	r3, r4
 8017834:	9304      	str	r3, [sp, #16]
 8017836:	9307      	str	r3, [sp, #28]
 8017838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801783c:	9002      	str	r0, [sp, #8]
 801783e:	9006      	str	r0, [sp, #24]
 8017840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017846:	ab21      	add	r3, sp, #132	; 0x84
 8017848:	a902      	add	r1, sp, #8
 801784a:	4628      	mov	r0, r5
 801784c:	9301      	str	r3, [sp, #4]
 801784e:	f003 fa9b 	bl	801ad88 <_svfiprintf_r>
 8017852:	1c43      	adds	r3, r0, #1
 8017854:	bfbc      	itt	lt
 8017856:	238b      	movlt	r3, #139	; 0x8b
 8017858:	602b      	strlt	r3, [r5, #0]
 801785a:	2c00      	cmp	r4, #0
 801785c:	d0dd      	beq.n	801781a <sniprintf+0x16>
 801785e:	9b02      	ldr	r3, [sp, #8]
 8017860:	2200      	movs	r2, #0
 8017862:	701a      	strb	r2, [r3, #0]
 8017864:	e7d9      	b.n	801781a <sniprintf+0x16>
 8017866:	bf00      	nop
 8017868:	200005cc 	.word	0x200005cc

0801786c <siprintf>:
 801786c:	b40e      	push	{r1, r2, r3}
 801786e:	b500      	push	{lr}
 8017870:	b09c      	sub	sp, #112	; 0x70
 8017872:	ab1d      	add	r3, sp, #116	; 0x74
 8017874:	9002      	str	r0, [sp, #8]
 8017876:	9006      	str	r0, [sp, #24]
 8017878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801787c:	4809      	ldr	r0, [pc, #36]	; (80178a4 <siprintf+0x38>)
 801787e:	9107      	str	r1, [sp, #28]
 8017880:	9104      	str	r1, [sp, #16]
 8017882:	4909      	ldr	r1, [pc, #36]	; (80178a8 <siprintf+0x3c>)
 8017884:	f853 2b04 	ldr.w	r2, [r3], #4
 8017888:	9105      	str	r1, [sp, #20]
 801788a:	6800      	ldr	r0, [r0, #0]
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	a902      	add	r1, sp, #8
 8017890:	f003 fa7a 	bl	801ad88 <_svfiprintf_r>
 8017894:	9b02      	ldr	r3, [sp, #8]
 8017896:	2200      	movs	r2, #0
 8017898:	701a      	strb	r2, [r3, #0]
 801789a:	b01c      	add	sp, #112	; 0x70
 801789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80178a0:	b003      	add	sp, #12
 80178a2:	4770      	bx	lr
 80178a4:	200005cc 	.word	0x200005cc
 80178a8:	ffff0208 	.word	0xffff0208

080178ac <strcat>:
 80178ac:	b510      	push	{r4, lr}
 80178ae:	4602      	mov	r2, r0
 80178b0:	7814      	ldrb	r4, [r2, #0]
 80178b2:	4613      	mov	r3, r2
 80178b4:	3201      	adds	r2, #1
 80178b6:	2c00      	cmp	r4, #0
 80178b8:	d1fa      	bne.n	80178b0 <strcat+0x4>
 80178ba:	3b01      	subs	r3, #1
 80178bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178c4:	2a00      	cmp	r2, #0
 80178c6:	d1f9      	bne.n	80178bc <strcat+0x10>
 80178c8:	bd10      	pop	{r4, pc}

080178ca <strchr>:
 80178ca:	b2c9      	uxtb	r1, r1
 80178cc:	4603      	mov	r3, r0
 80178ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d2:	b11a      	cbz	r2, 80178dc <strchr+0x12>
 80178d4:	428a      	cmp	r2, r1
 80178d6:	d1f9      	bne.n	80178cc <strchr+0x2>
 80178d8:	4618      	mov	r0, r3
 80178da:	4770      	bx	lr
 80178dc:	2900      	cmp	r1, #0
 80178de:	bf18      	it	ne
 80178e0:	2300      	movne	r3, #0
 80178e2:	e7f9      	b.n	80178d8 <strchr+0xe>

080178e4 <strcpy>:
 80178e4:	4603      	mov	r3, r0
 80178e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178ea:	f803 2b01 	strb.w	r2, [r3], #1
 80178ee:	2a00      	cmp	r2, #0
 80178f0:	d1f9      	bne.n	80178e6 <strcpy+0x2>
 80178f2:	4770      	bx	lr

080178f4 <strncmp>:
 80178f4:	b510      	push	{r4, lr}
 80178f6:	b16a      	cbz	r2, 8017914 <strncmp+0x20>
 80178f8:	3901      	subs	r1, #1
 80178fa:	1884      	adds	r4, r0, r2
 80178fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017900:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017904:	4293      	cmp	r3, r2
 8017906:	d103      	bne.n	8017910 <strncmp+0x1c>
 8017908:	42a0      	cmp	r0, r4
 801790a:	d001      	beq.n	8017910 <strncmp+0x1c>
 801790c:	2b00      	cmp	r3, #0
 801790e:	d1f5      	bne.n	80178fc <strncmp+0x8>
 8017910:	1a98      	subs	r0, r3, r2
 8017912:	bd10      	pop	{r4, pc}
 8017914:	4610      	mov	r0, r2
 8017916:	e7fc      	b.n	8017912 <strncmp+0x1e>

08017918 <strncpy>:
 8017918:	b510      	push	{r4, lr}
 801791a:	3901      	subs	r1, #1
 801791c:	4603      	mov	r3, r0
 801791e:	b132      	cbz	r2, 801792e <strncpy+0x16>
 8017920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017924:	f803 4b01 	strb.w	r4, [r3], #1
 8017928:	3a01      	subs	r2, #1
 801792a:	2c00      	cmp	r4, #0
 801792c:	d1f7      	bne.n	801791e <strncpy+0x6>
 801792e:	441a      	add	r2, r3
 8017930:	2100      	movs	r1, #0
 8017932:	4293      	cmp	r3, r2
 8017934:	d100      	bne.n	8017938 <strncpy+0x20>
 8017936:	bd10      	pop	{r4, pc}
 8017938:	f803 1b01 	strb.w	r1, [r3], #1
 801793c:	e7f9      	b.n	8017932 <strncpy+0x1a>

0801793e <strstr>:
 801793e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017940:	780c      	ldrb	r4, [r1, #0]
 8017942:	b164      	cbz	r4, 801795e <strstr+0x20>
 8017944:	4603      	mov	r3, r0
 8017946:	781a      	ldrb	r2, [r3, #0]
 8017948:	4618      	mov	r0, r3
 801794a:	1c5e      	adds	r6, r3, #1
 801794c:	b90a      	cbnz	r2, 8017952 <strstr+0x14>
 801794e:	4610      	mov	r0, r2
 8017950:	e005      	b.n	801795e <strstr+0x20>
 8017952:	4294      	cmp	r4, r2
 8017954:	d108      	bne.n	8017968 <strstr+0x2a>
 8017956:	460d      	mov	r5, r1
 8017958:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801795c:	b902      	cbnz	r2, 8017960 <strstr+0x22>
 801795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017960:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017964:	4297      	cmp	r7, r2
 8017966:	d0f7      	beq.n	8017958 <strstr+0x1a>
 8017968:	4633      	mov	r3, r6
 801796a:	e7ec      	b.n	8017946 <strstr+0x8>

0801796c <sulp>:
 801796c:	b570      	push	{r4, r5, r6, lr}
 801796e:	4604      	mov	r4, r0
 8017970:	460d      	mov	r5, r1
 8017972:	ec45 4b10 	vmov	d0, r4, r5
 8017976:	4616      	mov	r6, r2
 8017978:	f002 ffa2 	bl	801a8c0 <__ulp>
 801797c:	ec51 0b10 	vmov	r0, r1, d0
 8017980:	b17e      	cbz	r6, 80179a2 <sulp+0x36>
 8017982:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017986:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801798a:	2b00      	cmp	r3, #0
 801798c:	dd09      	ble.n	80179a2 <sulp+0x36>
 801798e:	051b      	lsls	r3, r3, #20
 8017990:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017994:	2400      	movs	r4, #0
 8017996:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801799a:	4622      	mov	r2, r4
 801799c:	462b      	mov	r3, r5
 801799e:	f7e8 fe3b 	bl	8000618 <__aeabi_dmul>
 80179a2:	bd70      	pop	{r4, r5, r6, pc}
 80179a4:	0000      	movs	r0, r0
	...

080179a8 <_strtod_l>:
 80179a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ac:	b0a3      	sub	sp, #140	; 0x8c
 80179ae:	461f      	mov	r7, r3
 80179b0:	2300      	movs	r3, #0
 80179b2:	931e      	str	r3, [sp, #120]	; 0x78
 80179b4:	4ba4      	ldr	r3, [pc, #656]	; (8017c48 <_strtod_l+0x2a0>)
 80179b6:	9219      	str	r2, [sp, #100]	; 0x64
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	9307      	str	r3, [sp, #28]
 80179bc:	4604      	mov	r4, r0
 80179be:	4618      	mov	r0, r3
 80179c0:	4688      	mov	r8, r1
 80179c2:	f7e8 fc0f 	bl	80001e4 <strlen>
 80179c6:	f04f 0a00 	mov.w	sl, #0
 80179ca:	4605      	mov	r5, r0
 80179cc:	f04f 0b00 	mov.w	fp, #0
 80179d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80179d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80179d6:	781a      	ldrb	r2, [r3, #0]
 80179d8:	2a2b      	cmp	r2, #43	; 0x2b
 80179da:	d04c      	beq.n	8017a76 <_strtod_l+0xce>
 80179dc:	d839      	bhi.n	8017a52 <_strtod_l+0xaa>
 80179de:	2a0d      	cmp	r2, #13
 80179e0:	d832      	bhi.n	8017a48 <_strtod_l+0xa0>
 80179e2:	2a08      	cmp	r2, #8
 80179e4:	d832      	bhi.n	8017a4c <_strtod_l+0xa4>
 80179e6:	2a00      	cmp	r2, #0
 80179e8:	d03c      	beq.n	8017a64 <_strtod_l+0xbc>
 80179ea:	2300      	movs	r3, #0
 80179ec:	930e      	str	r3, [sp, #56]	; 0x38
 80179ee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80179f0:	7833      	ldrb	r3, [r6, #0]
 80179f2:	2b30      	cmp	r3, #48	; 0x30
 80179f4:	f040 80b4 	bne.w	8017b60 <_strtod_l+0x1b8>
 80179f8:	7873      	ldrb	r3, [r6, #1]
 80179fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80179fe:	2b58      	cmp	r3, #88	; 0x58
 8017a00:	d16c      	bne.n	8017adc <_strtod_l+0x134>
 8017a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	ab1e      	add	r3, sp, #120	; 0x78
 8017a08:	9702      	str	r7, [sp, #8]
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	4a8f      	ldr	r2, [pc, #572]	; (8017c4c <_strtod_l+0x2a4>)
 8017a0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8017a10:	a91d      	add	r1, sp, #116	; 0x74
 8017a12:	4620      	mov	r0, r4
 8017a14:	f002 f85a 	bl	8019acc <__gethex>
 8017a18:	f010 0707 	ands.w	r7, r0, #7
 8017a1c:	4605      	mov	r5, r0
 8017a1e:	d005      	beq.n	8017a2c <_strtod_l+0x84>
 8017a20:	2f06      	cmp	r7, #6
 8017a22:	d12a      	bne.n	8017a7a <_strtod_l+0xd2>
 8017a24:	3601      	adds	r6, #1
 8017a26:	2300      	movs	r3, #0
 8017a28:	961d      	str	r6, [sp, #116]	; 0x74
 8017a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8017a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f040 8596 	bne.w	8018560 <_strtod_l+0xbb8>
 8017a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a36:	b1db      	cbz	r3, 8017a70 <_strtod_l+0xc8>
 8017a38:	4652      	mov	r2, sl
 8017a3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017a3e:	ec43 2b10 	vmov	d0, r2, r3
 8017a42:	b023      	add	sp, #140	; 0x8c
 8017a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a48:	2a20      	cmp	r2, #32
 8017a4a:	d1ce      	bne.n	80179ea <_strtod_l+0x42>
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	931d      	str	r3, [sp, #116]	; 0x74
 8017a50:	e7c0      	b.n	80179d4 <_strtod_l+0x2c>
 8017a52:	2a2d      	cmp	r2, #45	; 0x2d
 8017a54:	d1c9      	bne.n	80179ea <_strtod_l+0x42>
 8017a56:	2201      	movs	r2, #1
 8017a58:	920e      	str	r2, [sp, #56]	; 0x38
 8017a5a:	1c5a      	adds	r2, r3, #1
 8017a5c:	921d      	str	r2, [sp, #116]	; 0x74
 8017a5e:	785b      	ldrb	r3, [r3, #1]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d1c4      	bne.n	80179ee <_strtod_l+0x46>
 8017a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017a66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f040 8576 	bne.w	801855c <_strtod_l+0xbb4>
 8017a70:	4652      	mov	r2, sl
 8017a72:	465b      	mov	r3, fp
 8017a74:	e7e3      	b.n	8017a3e <_strtod_l+0x96>
 8017a76:	2200      	movs	r2, #0
 8017a78:	e7ee      	b.n	8017a58 <_strtod_l+0xb0>
 8017a7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017a7c:	b13a      	cbz	r2, 8017a8e <_strtod_l+0xe6>
 8017a7e:	2135      	movs	r1, #53	; 0x35
 8017a80:	a820      	add	r0, sp, #128	; 0x80
 8017a82:	f003 f828 	bl	801aad6 <__copybits>
 8017a86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017a88:	4620      	mov	r0, r4
 8017a8a:	f002 fbed 	bl	801a268 <_Bfree>
 8017a8e:	3f01      	subs	r7, #1
 8017a90:	2f05      	cmp	r7, #5
 8017a92:	d807      	bhi.n	8017aa4 <_strtod_l+0xfc>
 8017a94:	e8df f007 	tbb	[pc, r7]
 8017a98:	1d180b0e 	.word	0x1d180b0e
 8017a9c:	030e      	.short	0x030e
 8017a9e:	f04f 0b00 	mov.w	fp, #0
 8017aa2:	46da      	mov	sl, fp
 8017aa4:	0728      	lsls	r0, r5, #28
 8017aa6:	d5c1      	bpl.n	8017a2c <_strtod_l+0x84>
 8017aa8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017aac:	e7be      	b.n	8017a2c <_strtod_l+0x84>
 8017aae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017ab2:	e7f7      	b.n	8017aa4 <_strtod_l+0xfc>
 8017ab4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017ab8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017aba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017abe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017ac2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017ac6:	e7ed      	b.n	8017aa4 <_strtod_l+0xfc>
 8017ac8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017c50 <_strtod_l+0x2a8>
 8017acc:	f04f 0a00 	mov.w	sl, #0
 8017ad0:	e7e8      	b.n	8017aa4 <_strtod_l+0xfc>
 8017ad2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017ad6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017ada:	e7e3      	b.n	8017aa4 <_strtod_l+0xfc>
 8017adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ade:	1c5a      	adds	r2, r3, #1
 8017ae0:	921d      	str	r2, [sp, #116]	; 0x74
 8017ae2:	785b      	ldrb	r3, [r3, #1]
 8017ae4:	2b30      	cmp	r3, #48	; 0x30
 8017ae6:	d0f9      	beq.n	8017adc <_strtod_l+0x134>
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d09f      	beq.n	8017a2c <_strtod_l+0x84>
 8017aec:	2301      	movs	r3, #1
 8017aee:	f04f 0900 	mov.w	r9, #0
 8017af2:	9304      	str	r3, [sp, #16]
 8017af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017af6:	930a      	str	r3, [sp, #40]	; 0x28
 8017af8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017afc:	464f      	mov	r7, r9
 8017afe:	220a      	movs	r2, #10
 8017b00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017b02:	7806      	ldrb	r6, [r0, #0]
 8017b04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017b08:	b2d9      	uxtb	r1, r3
 8017b0a:	2909      	cmp	r1, #9
 8017b0c:	d92a      	bls.n	8017b64 <_strtod_l+0x1bc>
 8017b0e:	9907      	ldr	r1, [sp, #28]
 8017b10:	462a      	mov	r2, r5
 8017b12:	f7ff feef 	bl	80178f4 <strncmp>
 8017b16:	b398      	cbz	r0, 8017b80 <_strtod_l+0x1d8>
 8017b18:	2000      	movs	r0, #0
 8017b1a:	4633      	mov	r3, r6
 8017b1c:	463d      	mov	r5, r7
 8017b1e:	9007      	str	r0, [sp, #28]
 8017b20:	4602      	mov	r2, r0
 8017b22:	2b65      	cmp	r3, #101	; 0x65
 8017b24:	d001      	beq.n	8017b2a <_strtod_l+0x182>
 8017b26:	2b45      	cmp	r3, #69	; 0x45
 8017b28:	d118      	bne.n	8017b5c <_strtod_l+0x1b4>
 8017b2a:	b91d      	cbnz	r5, 8017b34 <_strtod_l+0x18c>
 8017b2c:	9b04      	ldr	r3, [sp, #16]
 8017b2e:	4303      	orrs	r3, r0
 8017b30:	d098      	beq.n	8017a64 <_strtod_l+0xbc>
 8017b32:	2500      	movs	r5, #0
 8017b34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017b38:	f108 0301 	add.w	r3, r8, #1
 8017b3c:	931d      	str	r3, [sp, #116]	; 0x74
 8017b3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017b42:	2b2b      	cmp	r3, #43	; 0x2b
 8017b44:	d075      	beq.n	8017c32 <_strtod_l+0x28a>
 8017b46:	2b2d      	cmp	r3, #45	; 0x2d
 8017b48:	d07b      	beq.n	8017c42 <_strtod_l+0x29a>
 8017b4a:	f04f 0c00 	mov.w	ip, #0
 8017b4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017b52:	2909      	cmp	r1, #9
 8017b54:	f240 8082 	bls.w	8017c5c <_strtod_l+0x2b4>
 8017b58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017b5c:	2600      	movs	r6, #0
 8017b5e:	e09d      	b.n	8017c9c <_strtod_l+0x2f4>
 8017b60:	2300      	movs	r3, #0
 8017b62:	e7c4      	b.n	8017aee <_strtod_l+0x146>
 8017b64:	2f08      	cmp	r7, #8
 8017b66:	bfd8      	it	le
 8017b68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017b6a:	f100 0001 	add.w	r0, r0, #1
 8017b6e:	bfda      	itte	le
 8017b70:	fb02 3301 	mlale	r3, r2, r1, r3
 8017b74:	9309      	strle	r3, [sp, #36]	; 0x24
 8017b76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017b7a:	3701      	adds	r7, #1
 8017b7c:	901d      	str	r0, [sp, #116]	; 0x74
 8017b7e:	e7bf      	b.n	8017b00 <_strtod_l+0x158>
 8017b80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b82:	195a      	adds	r2, r3, r5
 8017b84:	921d      	str	r2, [sp, #116]	; 0x74
 8017b86:	5d5b      	ldrb	r3, [r3, r5]
 8017b88:	2f00      	cmp	r7, #0
 8017b8a:	d037      	beq.n	8017bfc <_strtod_l+0x254>
 8017b8c:	9007      	str	r0, [sp, #28]
 8017b8e:	463d      	mov	r5, r7
 8017b90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017b94:	2a09      	cmp	r2, #9
 8017b96:	d912      	bls.n	8017bbe <_strtod_l+0x216>
 8017b98:	2201      	movs	r2, #1
 8017b9a:	e7c2      	b.n	8017b22 <_strtod_l+0x17a>
 8017b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b9e:	1c5a      	adds	r2, r3, #1
 8017ba0:	921d      	str	r2, [sp, #116]	; 0x74
 8017ba2:	785b      	ldrb	r3, [r3, #1]
 8017ba4:	3001      	adds	r0, #1
 8017ba6:	2b30      	cmp	r3, #48	; 0x30
 8017ba8:	d0f8      	beq.n	8017b9c <_strtod_l+0x1f4>
 8017baa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017bae:	2a08      	cmp	r2, #8
 8017bb0:	f200 84db 	bhi.w	801856a <_strtod_l+0xbc2>
 8017bb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017bb6:	9007      	str	r0, [sp, #28]
 8017bb8:	2000      	movs	r0, #0
 8017bba:	920a      	str	r2, [sp, #40]	; 0x28
 8017bbc:	4605      	mov	r5, r0
 8017bbe:	3b30      	subs	r3, #48	; 0x30
 8017bc0:	f100 0201 	add.w	r2, r0, #1
 8017bc4:	d014      	beq.n	8017bf0 <_strtod_l+0x248>
 8017bc6:	9907      	ldr	r1, [sp, #28]
 8017bc8:	4411      	add	r1, r2
 8017bca:	9107      	str	r1, [sp, #28]
 8017bcc:	462a      	mov	r2, r5
 8017bce:	eb00 0e05 	add.w	lr, r0, r5
 8017bd2:	210a      	movs	r1, #10
 8017bd4:	4572      	cmp	r2, lr
 8017bd6:	d113      	bne.n	8017c00 <_strtod_l+0x258>
 8017bd8:	182a      	adds	r2, r5, r0
 8017bda:	2a08      	cmp	r2, #8
 8017bdc:	f105 0501 	add.w	r5, r5, #1
 8017be0:	4405      	add	r5, r0
 8017be2:	dc1c      	bgt.n	8017c1e <_strtod_l+0x276>
 8017be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017be6:	220a      	movs	r2, #10
 8017be8:	fb02 3301 	mla	r3, r2, r1, r3
 8017bec:	9309      	str	r3, [sp, #36]	; 0x24
 8017bee:	2200      	movs	r2, #0
 8017bf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bf2:	1c59      	adds	r1, r3, #1
 8017bf4:	911d      	str	r1, [sp, #116]	; 0x74
 8017bf6:	785b      	ldrb	r3, [r3, #1]
 8017bf8:	4610      	mov	r0, r2
 8017bfa:	e7c9      	b.n	8017b90 <_strtod_l+0x1e8>
 8017bfc:	4638      	mov	r0, r7
 8017bfe:	e7d2      	b.n	8017ba6 <_strtod_l+0x1fe>
 8017c00:	2a08      	cmp	r2, #8
 8017c02:	dc04      	bgt.n	8017c0e <_strtod_l+0x266>
 8017c04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017c06:	434e      	muls	r6, r1
 8017c08:	9609      	str	r6, [sp, #36]	; 0x24
 8017c0a:	3201      	adds	r2, #1
 8017c0c:	e7e2      	b.n	8017bd4 <_strtod_l+0x22c>
 8017c0e:	f102 0c01 	add.w	ip, r2, #1
 8017c12:	f1bc 0f10 	cmp.w	ip, #16
 8017c16:	bfd8      	it	le
 8017c18:	fb01 f909 	mulle.w	r9, r1, r9
 8017c1c:	e7f5      	b.n	8017c0a <_strtod_l+0x262>
 8017c1e:	2d10      	cmp	r5, #16
 8017c20:	bfdc      	itt	le
 8017c22:	220a      	movle	r2, #10
 8017c24:	fb02 3909 	mlale	r9, r2, r9, r3
 8017c28:	e7e1      	b.n	8017bee <_strtod_l+0x246>
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	9307      	str	r3, [sp, #28]
 8017c2e:	2201      	movs	r2, #1
 8017c30:	e77c      	b.n	8017b2c <_strtod_l+0x184>
 8017c32:	f04f 0c00 	mov.w	ip, #0
 8017c36:	f108 0302 	add.w	r3, r8, #2
 8017c3a:	931d      	str	r3, [sp, #116]	; 0x74
 8017c3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017c40:	e785      	b.n	8017b4e <_strtod_l+0x1a6>
 8017c42:	f04f 0c01 	mov.w	ip, #1
 8017c46:	e7f6      	b.n	8017c36 <_strtod_l+0x28e>
 8017c48:	08033e18 	.word	0x08033e18
 8017c4c:	08033be0 	.word	0x08033be0
 8017c50:	7ff00000 	.word	0x7ff00000
 8017c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c56:	1c59      	adds	r1, r3, #1
 8017c58:	911d      	str	r1, [sp, #116]	; 0x74
 8017c5a:	785b      	ldrb	r3, [r3, #1]
 8017c5c:	2b30      	cmp	r3, #48	; 0x30
 8017c5e:	d0f9      	beq.n	8017c54 <_strtod_l+0x2ac>
 8017c60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017c64:	2908      	cmp	r1, #8
 8017c66:	f63f af79 	bhi.w	8017b5c <_strtod_l+0x1b4>
 8017c6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017c6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c70:	9308      	str	r3, [sp, #32]
 8017c72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c74:	1c59      	adds	r1, r3, #1
 8017c76:	911d      	str	r1, [sp, #116]	; 0x74
 8017c78:	785b      	ldrb	r3, [r3, #1]
 8017c7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017c7e:	2e09      	cmp	r6, #9
 8017c80:	d937      	bls.n	8017cf2 <_strtod_l+0x34a>
 8017c82:	9e08      	ldr	r6, [sp, #32]
 8017c84:	1b89      	subs	r1, r1, r6
 8017c86:	2908      	cmp	r1, #8
 8017c88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017c8c:	dc02      	bgt.n	8017c94 <_strtod_l+0x2ec>
 8017c8e:	4576      	cmp	r6, lr
 8017c90:	bfa8      	it	ge
 8017c92:	4676      	movge	r6, lr
 8017c94:	f1bc 0f00 	cmp.w	ip, #0
 8017c98:	d000      	beq.n	8017c9c <_strtod_l+0x2f4>
 8017c9a:	4276      	negs	r6, r6
 8017c9c:	2d00      	cmp	r5, #0
 8017c9e:	d14f      	bne.n	8017d40 <_strtod_l+0x398>
 8017ca0:	9904      	ldr	r1, [sp, #16]
 8017ca2:	4301      	orrs	r1, r0
 8017ca4:	f47f aec2 	bne.w	8017a2c <_strtod_l+0x84>
 8017ca8:	2a00      	cmp	r2, #0
 8017caa:	f47f aedb 	bne.w	8017a64 <_strtod_l+0xbc>
 8017cae:	2b69      	cmp	r3, #105	; 0x69
 8017cb0:	d027      	beq.n	8017d02 <_strtod_l+0x35a>
 8017cb2:	dc24      	bgt.n	8017cfe <_strtod_l+0x356>
 8017cb4:	2b49      	cmp	r3, #73	; 0x49
 8017cb6:	d024      	beq.n	8017d02 <_strtod_l+0x35a>
 8017cb8:	2b4e      	cmp	r3, #78	; 0x4e
 8017cba:	f47f aed3 	bne.w	8017a64 <_strtod_l+0xbc>
 8017cbe:	499e      	ldr	r1, [pc, #632]	; (8017f38 <_strtod_l+0x590>)
 8017cc0:	a81d      	add	r0, sp, #116	; 0x74
 8017cc2:	f002 f95b 	bl	8019f7c <__match>
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	f43f aecc 	beq.w	8017a64 <_strtod_l+0xbc>
 8017ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	2b28      	cmp	r3, #40	; 0x28
 8017cd2:	d12d      	bne.n	8017d30 <_strtod_l+0x388>
 8017cd4:	4999      	ldr	r1, [pc, #612]	; (8017f3c <_strtod_l+0x594>)
 8017cd6:	aa20      	add	r2, sp, #128	; 0x80
 8017cd8:	a81d      	add	r0, sp, #116	; 0x74
 8017cda:	f002 f963 	bl	8019fa4 <__hexnan>
 8017cde:	2805      	cmp	r0, #5
 8017ce0:	d126      	bne.n	8017d30 <_strtod_l+0x388>
 8017ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ce4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017ce8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017cec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017cf0:	e69c      	b.n	8017a2c <_strtod_l+0x84>
 8017cf2:	210a      	movs	r1, #10
 8017cf4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017cf8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017cfc:	e7b9      	b.n	8017c72 <_strtod_l+0x2ca>
 8017cfe:	2b6e      	cmp	r3, #110	; 0x6e
 8017d00:	e7db      	b.n	8017cba <_strtod_l+0x312>
 8017d02:	498f      	ldr	r1, [pc, #572]	; (8017f40 <_strtod_l+0x598>)
 8017d04:	a81d      	add	r0, sp, #116	; 0x74
 8017d06:	f002 f939 	bl	8019f7c <__match>
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	f43f aeaa 	beq.w	8017a64 <_strtod_l+0xbc>
 8017d10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d12:	498c      	ldr	r1, [pc, #560]	; (8017f44 <_strtod_l+0x59c>)
 8017d14:	3b01      	subs	r3, #1
 8017d16:	a81d      	add	r0, sp, #116	; 0x74
 8017d18:	931d      	str	r3, [sp, #116]	; 0x74
 8017d1a:	f002 f92f 	bl	8019f7c <__match>
 8017d1e:	b910      	cbnz	r0, 8017d26 <_strtod_l+0x37e>
 8017d20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d22:	3301      	adds	r3, #1
 8017d24:	931d      	str	r3, [sp, #116]	; 0x74
 8017d26:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017f54 <_strtod_l+0x5ac>
 8017d2a:	f04f 0a00 	mov.w	sl, #0
 8017d2e:	e67d      	b.n	8017a2c <_strtod_l+0x84>
 8017d30:	4885      	ldr	r0, [pc, #532]	; (8017f48 <_strtod_l+0x5a0>)
 8017d32:	f003 fa85 	bl	801b240 <nan>
 8017d36:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017d3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017d3e:	e675      	b.n	8017a2c <_strtod_l+0x84>
 8017d40:	9b07      	ldr	r3, [sp, #28]
 8017d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d44:	1af3      	subs	r3, r6, r3
 8017d46:	2f00      	cmp	r7, #0
 8017d48:	bf08      	it	eq
 8017d4a:	462f      	moveq	r7, r5
 8017d4c:	2d10      	cmp	r5, #16
 8017d4e:	9308      	str	r3, [sp, #32]
 8017d50:	46a8      	mov	r8, r5
 8017d52:	bfa8      	it	ge
 8017d54:	f04f 0810 	movge.w	r8, #16
 8017d58:	f7e8 fbe4 	bl	8000524 <__aeabi_ui2d>
 8017d5c:	2d09      	cmp	r5, #9
 8017d5e:	4682      	mov	sl, r0
 8017d60:	468b      	mov	fp, r1
 8017d62:	dd13      	ble.n	8017d8c <_strtod_l+0x3e4>
 8017d64:	4b79      	ldr	r3, [pc, #484]	; (8017f4c <_strtod_l+0x5a4>)
 8017d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017d6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017d6e:	f7e8 fc53 	bl	8000618 <__aeabi_dmul>
 8017d72:	4682      	mov	sl, r0
 8017d74:	4648      	mov	r0, r9
 8017d76:	468b      	mov	fp, r1
 8017d78:	f7e8 fbd4 	bl	8000524 <__aeabi_ui2d>
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	460b      	mov	r3, r1
 8017d80:	4650      	mov	r0, sl
 8017d82:	4659      	mov	r1, fp
 8017d84:	f7e8 fa92 	bl	80002ac <__adddf3>
 8017d88:	4682      	mov	sl, r0
 8017d8a:	468b      	mov	fp, r1
 8017d8c:	2d0f      	cmp	r5, #15
 8017d8e:	dc38      	bgt.n	8017e02 <_strtod_l+0x45a>
 8017d90:	9b08      	ldr	r3, [sp, #32]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	f43f ae4a 	beq.w	8017a2c <_strtod_l+0x84>
 8017d98:	dd24      	ble.n	8017de4 <_strtod_l+0x43c>
 8017d9a:	2b16      	cmp	r3, #22
 8017d9c:	dc0b      	bgt.n	8017db6 <_strtod_l+0x40e>
 8017d9e:	4d6b      	ldr	r5, [pc, #428]	; (8017f4c <_strtod_l+0x5a4>)
 8017da0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017da4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017da8:	4652      	mov	r2, sl
 8017daa:	465b      	mov	r3, fp
 8017dac:	f7e8 fc34 	bl	8000618 <__aeabi_dmul>
 8017db0:	4682      	mov	sl, r0
 8017db2:	468b      	mov	fp, r1
 8017db4:	e63a      	b.n	8017a2c <_strtod_l+0x84>
 8017db6:	9a08      	ldr	r2, [sp, #32]
 8017db8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	db20      	blt.n	8017e02 <_strtod_l+0x45a>
 8017dc0:	4c62      	ldr	r4, [pc, #392]	; (8017f4c <_strtod_l+0x5a4>)
 8017dc2:	f1c5 050f 	rsb	r5, r5, #15
 8017dc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017dca:	4652      	mov	r2, sl
 8017dcc:	465b      	mov	r3, fp
 8017dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dd2:	f7e8 fc21 	bl	8000618 <__aeabi_dmul>
 8017dd6:	9b08      	ldr	r3, [sp, #32]
 8017dd8:	1b5d      	subs	r5, r3, r5
 8017dda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017de2:	e7e3      	b.n	8017dac <_strtod_l+0x404>
 8017de4:	9b08      	ldr	r3, [sp, #32]
 8017de6:	3316      	adds	r3, #22
 8017de8:	db0b      	blt.n	8017e02 <_strtod_l+0x45a>
 8017dea:	9b07      	ldr	r3, [sp, #28]
 8017dec:	4a57      	ldr	r2, [pc, #348]	; (8017f4c <_strtod_l+0x5a4>)
 8017dee:	1b9e      	subs	r6, r3, r6
 8017df0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017df4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017df8:	4650      	mov	r0, sl
 8017dfa:	4659      	mov	r1, fp
 8017dfc:	f7e8 fd36 	bl	800086c <__aeabi_ddiv>
 8017e00:	e7d6      	b.n	8017db0 <_strtod_l+0x408>
 8017e02:	9b08      	ldr	r3, [sp, #32]
 8017e04:	eba5 0808 	sub.w	r8, r5, r8
 8017e08:	4498      	add	r8, r3
 8017e0a:	f1b8 0f00 	cmp.w	r8, #0
 8017e0e:	dd71      	ble.n	8017ef4 <_strtod_l+0x54c>
 8017e10:	f018 030f 	ands.w	r3, r8, #15
 8017e14:	d00a      	beq.n	8017e2c <_strtod_l+0x484>
 8017e16:	494d      	ldr	r1, [pc, #308]	; (8017f4c <_strtod_l+0x5a4>)
 8017e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017e1c:	4652      	mov	r2, sl
 8017e1e:	465b      	mov	r3, fp
 8017e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e24:	f7e8 fbf8 	bl	8000618 <__aeabi_dmul>
 8017e28:	4682      	mov	sl, r0
 8017e2a:	468b      	mov	fp, r1
 8017e2c:	f038 080f 	bics.w	r8, r8, #15
 8017e30:	d04d      	beq.n	8017ece <_strtod_l+0x526>
 8017e32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017e36:	dd22      	ble.n	8017e7e <_strtod_l+0x4d6>
 8017e38:	2500      	movs	r5, #0
 8017e3a:	462e      	mov	r6, r5
 8017e3c:	9509      	str	r5, [sp, #36]	; 0x24
 8017e3e:	9507      	str	r5, [sp, #28]
 8017e40:	2322      	movs	r3, #34	; 0x22
 8017e42:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017f54 <_strtod_l+0x5ac>
 8017e46:	6023      	str	r3, [r4, #0]
 8017e48:	f04f 0a00 	mov.w	sl, #0
 8017e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	f43f adec 	beq.w	8017a2c <_strtod_l+0x84>
 8017e54:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017e56:	4620      	mov	r0, r4
 8017e58:	f002 fa06 	bl	801a268 <_Bfree>
 8017e5c:	9907      	ldr	r1, [sp, #28]
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f002 fa02 	bl	801a268 <_Bfree>
 8017e64:	4631      	mov	r1, r6
 8017e66:	4620      	mov	r0, r4
 8017e68:	f002 f9fe 	bl	801a268 <_Bfree>
 8017e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f002 f9fa 	bl	801a268 <_Bfree>
 8017e74:	4629      	mov	r1, r5
 8017e76:	4620      	mov	r0, r4
 8017e78:	f002 f9f6 	bl	801a268 <_Bfree>
 8017e7c:	e5d6      	b.n	8017a2c <_strtod_l+0x84>
 8017e7e:	2300      	movs	r3, #0
 8017e80:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017e84:	4650      	mov	r0, sl
 8017e86:	4659      	mov	r1, fp
 8017e88:	4699      	mov	r9, r3
 8017e8a:	f1b8 0f01 	cmp.w	r8, #1
 8017e8e:	dc21      	bgt.n	8017ed4 <_strtod_l+0x52c>
 8017e90:	b10b      	cbz	r3, 8017e96 <_strtod_l+0x4ee>
 8017e92:	4682      	mov	sl, r0
 8017e94:	468b      	mov	fp, r1
 8017e96:	4b2e      	ldr	r3, [pc, #184]	; (8017f50 <_strtod_l+0x5a8>)
 8017e98:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017e9c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017ea0:	4652      	mov	r2, sl
 8017ea2:	465b      	mov	r3, fp
 8017ea4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017ea8:	f7e8 fbb6 	bl	8000618 <__aeabi_dmul>
 8017eac:	4b29      	ldr	r3, [pc, #164]	; (8017f54 <_strtod_l+0x5ac>)
 8017eae:	460a      	mov	r2, r1
 8017eb0:	400b      	ands	r3, r1
 8017eb2:	4929      	ldr	r1, [pc, #164]	; (8017f58 <_strtod_l+0x5b0>)
 8017eb4:	428b      	cmp	r3, r1
 8017eb6:	4682      	mov	sl, r0
 8017eb8:	d8be      	bhi.n	8017e38 <_strtod_l+0x490>
 8017eba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017ebe:	428b      	cmp	r3, r1
 8017ec0:	bf86      	itte	hi
 8017ec2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017f5c <_strtod_l+0x5b4>
 8017ec6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8017eca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017ece:	2300      	movs	r3, #0
 8017ed0:	9304      	str	r3, [sp, #16]
 8017ed2:	e081      	b.n	8017fd8 <_strtod_l+0x630>
 8017ed4:	f018 0f01 	tst.w	r8, #1
 8017ed8:	d007      	beq.n	8017eea <_strtod_l+0x542>
 8017eda:	4b1d      	ldr	r3, [pc, #116]	; (8017f50 <_strtod_l+0x5a8>)
 8017edc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee4:	f7e8 fb98 	bl	8000618 <__aeabi_dmul>
 8017ee8:	2301      	movs	r3, #1
 8017eea:	f109 0901 	add.w	r9, r9, #1
 8017eee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017ef2:	e7ca      	b.n	8017e8a <_strtod_l+0x4e2>
 8017ef4:	d0eb      	beq.n	8017ece <_strtod_l+0x526>
 8017ef6:	f1c8 0800 	rsb	r8, r8, #0
 8017efa:	f018 020f 	ands.w	r2, r8, #15
 8017efe:	d00a      	beq.n	8017f16 <_strtod_l+0x56e>
 8017f00:	4b12      	ldr	r3, [pc, #72]	; (8017f4c <_strtod_l+0x5a4>)
 8017f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f06:	4650      	mov	r0, sl
 8017f08:	4659      	mov	r1, fp
 8017f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0e:	f7e8 fcad 	bl	800086c <__aeabi_ddiv>
 8017f12:	4682      	mov	sl, r0
 8017f14:	468b      	mov	fp, r1
 8017f16:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017f1a:	d0d8      	beq.n	8017ece <_strtod_l+0x526>
 8017f1c:	f1b8 0f1f 	cmp.w	r8, #31
 8017f20:	dd1e      	ble.n	8017f60 <_strtod_l+0x5b8>
 8017f22:	2500      	movs	r5, #0
 8017f24:	462e      	mov	r6, r5
 8017f26:	9509      	str	r5, [sp, #36]	; 0x24
 8017f28:	9507      	str	r5, [sp, #28]
 8017f2a:	2322      	movs	r3, #34	; 0x22
 8017f2c:	f04f 0a00 	mov.w	sl, #0
 8017f30:	f04f 0b00 	mov.w	fp, #0
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	e789      	b.n	8017e4c <_strtod_l+0x4a4>
 8017f38:	08033b41 	.word	0x08033b41
 8017f3c:	08033bf4 	.word	0x08033bf4
 8017f40:	08033b39 	.word	0x08033b39
 8017f44:	08033cd0 	.word	0x08033cd0
 8017f48:	08033ccc 	.word	0x08033ccc
 8017f4c:	08033eb8 	.word	0x08033eb8
 8017f50:	08033e90 	.word	0x08033e90
 8017f54:	7ff00000 	.word	0x7ff00000
 8017f58:	7ca00000 	.word	0x7ca00000
 8017f5c:	7fefffff 	.word	0x7fefffff
 8017f60:	f018 0310 	ands.w	r3, r8, #16
 8017f64:	bf18      	it	ne
 8017f66:	236a      	movne	r3, #106	; 0x6a
 8017f68:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018320 <_strtod_l+0x978>
 8017f6c:	9304      	str	r3, [sp, #16]
 8017f6e:	4650      	mov	r0, sl
 8017f70:	4659      	mov	r1, fp
 8017f72:	2300      	movs	r3, #0
 8017f74:	f018 0f01 	tst.w	r8, #1
 8017f78:	d004      	beq.n	8017f84 <_strtod_l+0x5dc>
 8017f7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017f7e:	f7e8 fb4b 	bl	8000618 <__aeabi_dmul>
 8017f82:	2301      	movs	r3, #1
 8017f84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017f88:	f109 0908 	add.w	r9, r9, #8
 8017f8c:	d1f2      	bne.n	8017f74 <_strtod_l+0x5cc>
 8017f8e:	b10b      	cbz	r3, 8017f94 <_strtod_l+0x5ec>
 8017f90:	4682      	mov	sl, r0
 8017f92:	468b      	mov	fp, r1
 8017f94:	9b04      	ldr	r3, [sp, #16]
 8017f96:	b1bb      	cbz	r3, 8017fc8 <_strtod_l+0x620>
 8017f98:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017f9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	4659      	mov	r1, fp
 8017fa4:	dd10      	ble.n	8017fc8 <_strtod_l+0x620>
 8017fa6:	2b1f      	cmp	r3, #31
 8017fa8:	f340 8128 	ble.w	80181fc <_strtod_l+0x854>
 8017fac:	2b34      	cmp	r3, #52	; 0x34
 8017fae:	bfde      	ittt	le
 8017fb0:	3b20      	suble	r3, #32
 8017fb2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8017fb6:	fa02 f303 	lslle.w	r3, r2, r3
 8017fba:	f04f 0a00 	mov.w	sl, #0
 8017fbe:	bfcc      	ite	gt
 8017fc0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017fc4:	ea03 0b01 	andle.w	fp, r3, r1
 8017fc8:	2200      	movs	r2, #0
 8017fca:	2300      	movs	r3, #0
 8017fcc:	4650      	mov	r0, sl
 8017fce:	4659      	mov	r1, fp
 8017fd0:	f7e8 fd8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	d1a4      	bne.n	8017f22 <_strtod_l+0x57a>
 8017fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fda:	9300      	str	r3, [sp, #0]
 8017fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017fde:	462b      	mov	r3, r5
 8017fe0:	463a      	mov	r2, r7
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	f002 f9ac 	bl	801a340 <__s2b>
 8017fe8:	9009      	str	r0, [sp, #36]	; 0x24
 8017fea:	2800      	cmp	r0, #0
 8017fec:	f43f af24 	beq.w	8017e38 <_strtod_l+0x490>
 8017ff0:	9b07      	ldr	r3, [sp, #28]
 8017ff2:	1b9e      	subs	r6, r3, r6
 8017ff4:	9b08      	ldr	r3, [sp, #32]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	bfb4      	ite	lt
 8017ffa:	4633      	movlt	r3, r6
 8017ffc:	2300      	movge	r3, #0
 8017ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8018000:	9b08      	ldr	r3, [sp, #32]
 8018002:	2500      	movs	r5, #0
 8018004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018008:	9318      	str	r3, [sp, #96]	; 0x60
 801800a:	462e      	mov	r6, r5
 801800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801800e:	4620      	mov	r0, r4
 8018010:	6859      	ldr	r1, [r3, #4]
 8018012:	f002 f8e9 	bl	801a1e8 <_Balloc>
 8018016:	9007      	str	r0, [sp, #28]
 8018018:	2800      	cmp	r0, #0
 801801a:	f43f af11 	beq.w	8017e40 <_strtod_l+0x498>
 801801e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018020:	691a      	ldr	r2, [r3, #16]
 8018022:	3202      	adds	r2, #2
 8018024:	f103 010c 	add.w	r1, r3, #12
 8018028:	0092      	lsls	r2, r2, #2
 801802a:	300c      	adds	r0, #12
 801802c:	f7fe fe82 	bl	8016d34 <memcpy>
 8018030:	ec4b ab10 	vmov	d0, sl, fp
 8018034:	aa20      	add	r2, sp, #128	; 0x80
 8018036:	a91f      	add	r1, sp, #124	; 0x7c
 8018038:	4620      	mov	r0, r4
 801803a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801803e:	f002 fcbb 	bl	801a9b8 <__d2b>
 8018042:	901e      	str	r0, [sp, #120]	; 0x78
 8018044:	2800      	cmp	r0, #0
 8018046:	f43f aefb 	beq.w	8017e40 <_strtod_l+0x498>
 801804a:	2101      	movs	r1, #1
 801804c:	4620      	mov	r0, r4
 801804e:	f002 fa11 	bl	801a474 <__i2b>
 8018052:	4606      	mov	r6, r0
 8018054:	2800      	cmp	r0, #0
 8018056:	f43f aef3 	beq.w	8017e40 <_strtod_l+0x498>
 801805a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801805c:	9904      	ldr	r1, [sp, #16]
 801805e:	2b00      	cmp	r3, #0
 8018060:	bfab      	itete	ge
 8018062:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8018064:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8018066:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018068:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801806c:	bfac      	ite	ge
 801806e:	eb03 0902 	addge.w	r9, r3, r2
 8018072:	1ad7      	sublt	r7, r2, r3
 8018074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018076:	eba3 0801 	sub.w	r8, r3, r1
 801807a:	4490      	add	r8, r2
 801807c:	4ba3      	ldr	r3, [pc, #652]	; (801830c <_strtod_l+0x964>)
 801807e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8018082:	4598      	cmp	r8, r3
 8018084:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018088:	f280 80cc 	bge.w	8018224 <_strtod_l+0x87c>
 801808c:	eba3 0308 	sub.w	r3, r3, r8
 8018090:	2b1f      	cmp	r3, #31
 8018092:	eba2 0203 	sub.w	r2, r2, r3
 8018096:	f04f 0101 	mov.w	r1, #1
 801809a:	f300 80b6 	bgt.w	801820a <_strtod_l+0x862>
 801809e:	fa01 f303 	lsl.w	r3, r1, r3
 80180a2:	9311      	str	r3, [sp, #68]	; 0x44
 80180a4:	2300      	movs	r3, #0
 80180a6:	930c      	str	r3, [sp, #48]	; 0x30
 80180a8:	eb09 0802 	add.w	r8, r9, r2
 80180ac:	9b04      	ldr	r3, [sp, #16]
 80180ae:	45c1      	cmp	r9, r8
 80180b0:	4417      	add	r7, r2
 80180b2:	441f      	add	r7, r3
 80180b4:	464b      	mov	r3, r9
 80180b6:	bfa8      	it	ge
 80180b8:	4643      	movge	r3, r8
 80180ba:	42bb      	cmp	r3, r7
 80180bc:	bfa8      	it	ge
 80180be:	463b      	movge	r3, r7
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	bfc2      	ittt	gt
 80180c4:	eba8 0803 	subgt.w	r8, r8, r3
 80180c8:	1aff      	subgt	r7, r7, r3
 80180ca:	eba9 0903 	subgt.w	r9, r9, r3
 80180ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	dd17      	ble.n	8018104 <_strtod_l+0x75c>
 80180d4:	4631      	mov	r1, r6
 80180d6:	461a      	mov	r2, r3
 80180d8:	4620      	mov	r0, r4
 80180da:	f002 fa87 	bl	801a5ec <__pow5mult>
 80180de:	4606      	mov	r6, r0
 80180e0:	2800      	cmp	r0, #0
 80180e2:	f43f aead 	beq.w	8017e40 <_strtod_l+0x498>
 80180e6:	4601      	mov	r1, r0
 80180e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80180ea:	4620      	mov	r0, r4
 80180ec:	f002 f9d8 	bl	801a4a0 <__multiply>
 80180f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80180f2:	2800      	cmp	r0, #0
 80180f4:	f43f aea4 	beq.w	8017e40 <_strtod_l+0x498>
 80180f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80180fa:	4620      	mov	r0, r4
 80180fc:	f002 f8b4 	bl	801a268 <_Bfree>
 8018100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018102:	931e      	str	r3, [sp, #120]	; 0x78
 8018104:	f1b8 0f00 	cmp.w	r8, #0
 8018108:	f300 8091 	bgt.w	801822e <_strtod_l+0x886>
 801810c:	9b08      	ldr	r3, [sp, #32]
 801810e:	2b00      	cmp	r3, #0
 8018110:	dd08      	ble.n	8018124 <_strtod_l+0x77c>
 8018112:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018114:	9907      	ldr	r1, [sp, #28]
 8018116:	4620      	mov	r0, r4
 8018118:	f002 fa68 	bl	801a5ec <__pow5mult>
 801811c:	9007      	str	r0, [sp, #28]
 801811e:	2800      	cmp	r0, #0
 8018120:	f43f ae8e 	beq.w	8017e40 <_strtod_l+0x498>
 8018124:	2f00      	cmp	r7, #0
 8018126:	dd08      	ble.n	801813a <_strtod_l+0x792>
 8018128:	9907      	ldr	r1, [sp, #28]
 801812a:	463a      	mov	r2, r7
 801812c:	4620      	mov	r0, r4
 801812e:	f002 fab7 	bl	801a6a0 <__lshift>
 8018132:	9007      	str	r0, [sp, #28]
 8018134:	2800      	cmp	r0, #0
 8018136:	f43f ae83 	beq.w	8017e40 <_strtod_l+0x498>
 801813a:	f1b9 0f00 	cmp.w	r9, #0
 801813e:	dd08      	ble.n	8018152 <_strtod_l+0x7aa>
 8018140:	4631      	mov	r1, r6
 8018142:	464a      	mov	r2, r9
 8018144:	4620      	mov	r0, r4
 8018146:	f002 faab 	bl	801a6a0 <__lshift>
 801814a:	4606      	mov	r6, r0
 801814c:	2800      	cmp	r0, #0
 801814e:	f43f ae77 	beq.w	8017e40 <_strtod_l+0x498>
 8018152:	9a07      	ldr	r2, [sp, #28]
 8018154:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018156:	4620      	mov	r0, r4
 8018158:	f002 fb2a 	bl	801a7b0 <__mdiff>
 801815c:	4605      	mov	r5, r0
 801815e:	2800      	cmp	r0, #0
 8018160:	f43f ae6e 	beq.w	8017e40 <_strtod_l+0x498>
 8018164:	68c3      	ldr	r3, [r0, #12]
 8018166:	930f      	str	r3, [sp, #60]	; 0x3c
 8018168:	2300      	movs	r3, #0
 801816a:	60c3      	str	r3, [r0, #12]
 801816c:	4631      	mov	r1, r6
 801816e:	f002 fb03 	bl	801a778 <__mcmp>
 8018172:	2800      	cmp	r0, #0
 8018174:	da65      	bge.n	8018242 <_strtod_l+0x89a>
 8018176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018178:	ea53 030a 	orrs.w	r3, r3, sl
 801817c:	f040 8087 	bne.w	801828e <_strtod_l+0x8e6>
 8018180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018184:	2b00      	cmp	r3, #0
 8018186:	f040 8082 	bne.w	801828e <_strtod_l+0x8e6>
 801818a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801818e:	0d1b      	lsrs	r3, r3, #20
 8018190:	051b      	lsls	r3, r3, #20
 8018192:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018196:	d97a      	bls.n	801828e <_strtod_l+0x8e6>
 8018198:	696b      	ldr	r3, [r5, #20]
 801819a:	b913      	cbnz	r3, 80181a2 <_strtod_l+0x7fa>
 801819c:	692b      	ldr	r3, [r5, #16]
 801819e:	2b01      	cmp	r3, #1
 80181a0:	dd75      	ble.n	801828e <_strtod_l+0x8e6>
 80181a2:	4629      	mov	r1, r5
 80181a4:	2201      	movs	r2, #1
 80181a6:	4620      	mov	r0, r4
 80181a8:	f002 fa7a 	bl	801a6a0 <__lshift>
 80181ac:	4631      	mov	r1, r6
 80181ae:	4605      	mov	r5, r0
 80181b0:	f002 fae2 	bl	801a778 <__mcmp>
 80181b4:	2800      	cmp	r0, #0
 80181b6:	dd6a      	ble.n	801828e <_strtod_l+0x8e6>
 80181b8:	9904      	ldr	r1, [sp, #16]
 80181ba:	4a55      	ldr	r2, [pc, #340]	; (8018310 <_strtod_l+0x968>)
 80181bc:	465b      	mov	r3, fp
 80181be:	2900      	cmp	r1, #0
 80181c0:	f000 8085 	beq.w	80182ce <_strtod_l+0x926>
 80181c4:	ea02 010b 	and.w	r1, r2, fp
 80181c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80181cc:	dc7f      	bgt.n	80182ce <_strtod_l+0x926>
 80181ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80181d2:	f77f aeaa 	ble.w	8017f2a <_strtod_l+0x582>
 80181d6:	4a4f      	ldr	r2, [pc, #316]	; (8018314 <_strtod_l+0x96c>)
 80181d8:	2300      	movs	r3, #0
 80181da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80181de:	4650      	mov	r0, sl
 80181e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80181e4:	4659      	mov	r1, fp
 80181e6:	f7e8 fa17 	bl	8000618 <__aeabi_dmul>
 80181ea:	460b      	mov	r3, r1
 80181ec:	4303      	orrs	r3, r0
 80181ee:	bf08      	it	eq
 80181f0:	2322      	moveq	r3, #34	; 0x22
 80181f2:	4682      	mov	sl, r0
 80181f4:	468b      	mov	fp, r1
 80181f6:	bf08      	it	eq
 80181f8:	6023      	streq	r3, [r4, #0]
 80181fa:	e62b      	b.n	8017e54 <_strtod_l+0x4ac>
 80181fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018200:	fa02 f303 	lsl.w	r3, r2, r3
 8018204:	ea03 0a0a 	and.w	sl, r3, sl
 8018208:	e6de      	b.n	8017fc8 <_strtod_l+0x620>
 801820a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801820e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801821a:	fa01 f308 	lsl.w	r3, r1, r8
 801821e:	930c      	str	r3, [sp, #48]	; 0x30
 8018220:	9111      	str	r1, [sp, #68]	; 0x44
 8018222:	e741      	b.n	80180a8 <_strtod_l+0x700>
 8018224:	2300      	movs	r3, #0
 8018226:	930c      	str	r3, [sp, #48]	; 0x30
 8018228:	2301      	movs	r3, #1
 801822a:	9311      	str	r3, [sp, #68]	; 0x44
 801822c:	e73c      	b.n	80180a8 <_strtod_l+0x700>
 801822e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018230:	4642      	mov	r2, r8
 8018232:	4620      	mov	r0, r4
 8018234:	f002 fa34 	bl	801a6a0 <__lshift>
 8018238:	901e      	str	r0, [sp, #120]	; 0x78
 801823a:	2800      	cmp	r0, #0
 801823c:	f47f af66 	bne.w	801810c <_strtod_l+0x764>
 8018240:	e5fe      	b.n	8017e40 <_strtod_l+0x498>
 8018242:	465f      	mov	r7, fp
 8018244:	d16e      	bne.n	8018324 <_strtod_l+0x97c>
 8018246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801824c:	b342      	cbz	r2, 80182a0 <_strtod_l+0x8f8>
 801824e:	4a32      	ldr	r2, [pc, #200]	; (8018318 <_strtod_l+0x970>)
 8018250:	4293      	cmp	r3, r2
 8018252:	d128      	bne.n	80182a6 <_strtod_l+0x8fe>
 8018254:	9b04      	ldr	r3, [sp, #16]
 8018256:	4650      	mov	r0, sl
 8018258:	b1eb      	cbz	r3, 8018296 <_strtod_l+0x8ee>
 801825a:	4a2d      	ldr	r2, [pc, #180]	; (8018310 <_strtod_l+0x968>)
 801825c:	403a      	ands	r2, r7
 801825e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018262:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018266:	d819      	bhi.n	801829c <_strtod_l+0x8f4>
 8018268:	0d12      	lsrs	r2, r2, #20
 801826a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801826e:	fa01 f303 	lsl.w	r3, r1, r3
 8018272:	4298      	cmp	r0, r3
 8018274:	d117      	bne.n	80182a6 <_strtod_l+0x8fe>
 8018276:	4b29      	ldr	r3, [pc, #164]	; (801831c <_strtod_l+0x974>)
 8018278:	429f      	cmp	r7, r3
 801827a:	d102      	bne.n	8018282 <_strtod_l+0x8da>
 801827c:	3001      	adds	r0, #1
 801827e:	f43f addf 	beq.w	8017e40 <_strtod_l+0x498>
 8018282:	4b23      	ldr	r3, [pc, #140]	; (8018310 <_strtod_l+0x968>)
 8018284:	403b      	ands	r3, r7
 8018286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801828a:	f04f 0a00 	mov.w	sl, #0
 801828e:	9b04      	ldr	r3, [sp, #16]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d1a0      	bne.n	80181d6 <_strtod_l+0x82e>
 8018294:	e5de      	b.n	8017e54 <_strtod_l+0x4ac>
 8018296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801829a:	e7ea      	b.n	8018272 <_strtod_l+0x8ca>
 801829c:	460b      	mov	r3, r1
 801829e:	e7e8      	b.n	8018272 <_strtod_l+0x8ca>
 80182a0:	ea53 030a 	orrs.w	r3, r3, sl
 80182a4:	d088      	beq.n	80181b8 <_strtod_l+0x810>
 80182a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182a8:	b1db      	cbz	r3, 80182e2 <_strtod_l+0x93a>
 80182aa:	423b      	tst	r3, r7
 80182ac:	d0ef      	beq.n	801828e <_strtod_l+0x8e6>
 80182ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182b0:	9a04      	ldr	r2, [sp, #16]
 80182b2:	4650      	mov	r0, sl
 80182b4:	4659      	mov	r1, fp
 80182b6:	b1c3      	cbz	r3, 80182ea <_strtod_l+0x942>
 80182b8:	f7ff fb58 	bl	801796c <sulp>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80182c4:	f7e7 fff2 	bl	80002ac <__adddf3>
 80182c8:	4682      	mov	sl, r0
 80182ca:	468b      	mov	fp, r1
 80182cc:	e7df      	b.n	801828e <_strtod_l+0x8e6>
 80182ce:	4013      	ands	r3, r2
 80182d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80182d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80182d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80182dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80182e0:	e7d5      	b.n	801828e <_strtod_l+0x8e6>
 80182e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80182e4:	ea13 0f0a 	tst.w	r3, sl
 80182e8:	e7e0      	b.n	80182ac <_strtod_l+0x904>
 80182ea:	f7ff fb3f 	bl	801796c <sulp>
 80182ee:	4602      	mov	r2, r0
 80182f0:	460b      	mov	r3, r1
 80182f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80182f6:	f7e7 ffd7 	bl	80002a8 <__aeabi_dsub>
 80182fa:	2200      	movs	r2, #0
 80182fc:	2300      	movs	r3, #0
 80182fe:	4682      	mov	sl, r0
 8018300:	468b      	mov	fp, r1
 8018302:	f7e8 fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8018306:	2800      	cmp	r0, #0
 8018308:	d0c1      	beq.n	801828e <_strtod_l+0x8e6>
 801830a:	e60e      	b.n	8017f2a <_strtod_l+0x582>
 801830c:	fffffc02 	.word	0xfffffc02
 8018310:	7ff00000 	.word	0x7ff00000
 8018314:	39500000 	.word	0x39500000
 8018318:	000fffff 	.word	0x000fffff
 801831c:	7fefffff 	.word	0x7fefffff
 8018320:	08033c08 	.word	0x08033c08
 8018324:	4631      	mov	r1, r6
 8018326:	4628      	mov	r0, r5
 8018328:	f002 fba2 	bl	801aa70 <__ratio>
 801832c:	ec59 8b10 	vmov	r8, r9, d0
 8018330:	ee10 0a10 	vmov	r0, s0
 8018334:	2200      	movs	r2, #0
 8018336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801833a:	4649      	mov	r1, r9
 801833c:	f7e8 fbe8 	bl	8000b10 <__aeabi_dcmple>
 8018340:	2800      	cmp	r0, #0
 8018342:	d07c      	beq.n	801843e <_strtod_l+0xa96>
 8018344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018346:	2b00      	cmp	r3, #0
 8018348:	d04c      	beq.n	80183e4 <_strtod_l+0xa3c>
 801834a:	4b95      	ldr	r3, [pc, #596]	; (80185a0 <_strtod_l+0xbf8>)
 801834c:	2200      	movs	r2, #0
 801834e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80185a0 <_strtod_l+0xbf8>
 8018356:	f04f 0800 	mov.w	r8, #0
 801835a:	4b92      	ldr	r3, [pc, #584]	; (80185a4 <_strtod_l+0xbfc>)
 801835c:	403b      	ands	r3, r7
 801835e:	9311      	str	r3, [sp, #68]	; 0x44
 8018360:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018362:	4b91      	ldr	r3, [pc, #580]	; (80185a8 <_strtod_l+0xc00>)
 8018364:	429a      	cmp	r2, r3
 8018366:	f040 80b2 	bne.w	80184ce <_strtod_l+0xb26>
 801836a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801836e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018372:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018376:	ec4b ab10 	vmov	d0, sl, fp
 801837a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801837e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018382:	f002 fa9d 	bl	801a8c0 <__ulp>
 8018386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801838a:	ec53 2b10 	vmov	r2, r3, d0
 801838e:	f7e8 f943 	bl	8000618 <__aeabi_dmul>
 8018392:	4652      	mov	r2, sl
 8018394:	465b      	mov	r3, fp
 8018396:	f7e7 ff89 	bl	80002ac <__adddf3>
 801839a:	460b      	mov	r3, r1
 801839c:	4981      	ldr	r1, [pc, #516]	; (80185a4 <_strtod_l+0xbfc>)
 801839e:	4a83      	ldr	r2, [pc, #524]	; (80185ac <_strtod_l+0xc04>)
 80183a0:	4019      	ands	r1, r3
 80183a2:	4291      	cmp	r1, r2
 80183a4:	4682      	mov	sl, r0
 80183a6:	d95e      	bls.n	8018466 <_strtod_l+0xabe>
 80183a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80183aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80183ae:	4293      	cmp	r3, r2
 80183b0:	d103      	bne.n	80183ba <_strtod_l+0xa12>
 80183b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183b4:	3301      	adds	r3, #1
 80183b6:	f43f ad43 	beq.w	8017e40 <_strtod_l+0x498>
 80183ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80185b8 <_strtod_l+0xc10>
 80183be:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80183c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80183c4:	4620      	mov	r0, r4
 80183c6:	f001 ff4f 	bl	801a268 <_Bfree>
 80183ca:	9907      	ldr	r1, [sp, #28]
 80183cc:	4620      	mov	r0, r4
 80183ce:	f001 ff4b 	bl	801a268 <_Bfree>
 80183d2:	4631      	mov	r1, r6
 80183d4:	4620      	mov	r0, r4
 80183d6:	f001 ff47 	bl	801a268 <_Bfree>
 80183da:	4629      	mov	r1, r5
 80183dc:	4620      	mov	r0, r4
 80183de:	f001 ff43 	bl	801a268 <_Bfree>
 80183e2:	e613      	b.n	801800c <_strtod_l+0x664>
 80183e4:	f1ba 0f00 	cmp.w	sl, #0
 80183e8:	d11b      	bne.n	8018422 <_strtod_l+0xa7a>
 80183ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183ee:	b9f3      	cbnz	r3, 801842e <_strtod_l+0xa86>
 80183f0:	4b6b      	ldr	r3, [pc, #428]	; (80185a0 <_strtod_l+0xbf8>)
 80183f2:	2200      	movs	r2, #0
 80183f4:	4640      	mov	r0, r8
 80183f6:	4649      	mov	r1, r9
 80183f8:	f7e8 fb80 	bl	8000afc <__aeabi_dcmplt>
 80183fc:	b9d0      	cbnz	r0, 8018434 <_strtod_l+0xa8c>
 80183fe:	4640      	mov	r0, r8
 8018400:	4649      	mov	r1, r9
 8018402:	4b6b      	ldr	r3, [pc, #428]	; (80185b0 <_strtod_l+0xc08>)
 8018404:	2200      	movs	r2, #0
 8018406:	f7e8 f907 	bl	8000618 <__aeabi_dmul>
 801840a:	4680      	mov	r8, r0
 801840c:	4689      	mov	r9, r1
 801840e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018412:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8018416:	931b      	str	r3, [sp, #108]	; 0x6c
 8018418:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801841c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018420:	e79b      	b.n	801835a <_strtod_l+0x9b2>
 8018422:	f1ba 0f01 	cmp.w	sl, #1
 8018426:	d102      	bne.n	801842e <_strtod_l+0xa86>
 8018428:	2f00      	cmp	r7, #0
 801842a:	f43f ad7e 	beq.w	8017f2a <_strtod_l+0x582>
 801842e:	4b61      	ldr	r3, [pc, #388]	; (80185b4 <_strtod_l+0xc0c>)
 8018430:	2200      	movs	r2, #0
 8018432:	e78c      	b.n	801834e <_strtod_l+0x9a6>
 8018434:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80185b0 <_strtod_l+0xc08>
 8018438:	f04f 0800 	mov.w	r8, #0
 801843c:	e7e7      	b.n	801840e <_strtod_l+0xa66>
 801843e:	4b5c      	ldr	r3, [pc, #368]	; (80185b0 <_strtod_l+0xc08>)
 8018440:	4640      	mov	r0, r8
 8018442:	4649      	mov	r1, r9
 8018444:	2200      	movs	r2, #0
 8018446:	f7e8 f8e7 	bl	8000618 <__aeabi_dmul>
 801844a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801844c:	4680      	mov	r8, r0
 801844e:	4689      	mov	r9, r1
 8018450:	b933      	cbnz	r3, 8018460 <_strtod_l+0xab8>
 8018452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018456:	9012      	str	r0, [sp, #72]	; 0x48
 8018458:	9313      	str	r3, [sp, #76]	; 0x4c
 801845a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801845e:	e7dd      	b.n	801841c <_strtod_l+0xa74>
 8018460:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018464:	e7f9      	b.n	801845a <_strtod_l+0xab2>
 8018466:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801846a:	9b04      	ldr	r3, [sp, #16]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d1a8      	bne.n	80183c2 <_strtod_l+0xa1a>
 8018470:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018474:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018476:	0d1b      	lsrs	r3, r3, #20
 8018478:	051b      	lsls	r3, r3, #20
 801847a:	429a      	cmp	r2, r3
 801847c:	d1a1      	bne.n	80183c2 <_strtod_l+0xa1a>
 801847e:	4640      	mov	r0, r8
 8018480:	4649      	mov	r1, r9
 8018482:	f7e8 fbd9 	bl	8000c38 <__aeabi_d2lz>
 8018486:	f7e8 f899 	bl	80005bc <__aeabi_l2d>
 801848a:	4602      	mov	r2, r0
 801848c:	460b      	mov	r3, r1
 801848e:	4640      	mov	r0, r8
 8018490:	4649      	mov	r1, r9
 8018492:	f7e7 ff09 	bl	80002a8 <__aeabi_dsub>
 8018496:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801849c:	ea43 030a 	orr.w	r3, r3, sl
 80184a0:	4313      	orrs	r3, r2
 80184a2:	4680      	mov	r8, r0
 80184a4:	4689      	mov	r9, r1
 80184a6:	d053      	beq.n	8018550 <_strtod_l+0xba8>
 80184a8:	a335      	add	r3, pc, #212	; (adr r3, 8018580 <_strtod_l+0xbd8>)
 80184aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ae:	f7e8 fb25 	bl	8000afc <__aeabi_dcmplt>
 80184b2:	2800      	cmp	r0, #0
 80184b4:	f47f acce 	bne.w	8017e54 <_strtod_l+0x4ac>
 80184b8:	a333      	add	r3, pc, #204	; (adr r3, 8018588 <_strtod_l+0xbe0>)
 80184ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184be:	4640      	mov	r0, r8
 80184c0:	4649      	mov	r1, r9
 80184c2:	f7e8 fb39 	bl	8000b38 <__aeabi_dcmpgt>
 80184c6:	2800      	cmp	r0, #0
 80184c8:	f43f af7b 	beq.w	80183c2 <_strtod_l+0xa1a>
 80184cc:	e4c2      	b.n	8017e54 <_strtod_l+0x4ac>
 80184ce:	9b04      	ldr	r3, [sp, #16]
 80184d0:	b333      	cbz	r3, 8018520 <_strtod_l+0xb78>
 80184d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80184d8:	d822      	bhi.n	8018520 <_strtod_l+0xb78>
 80184da:	a32d      	add	r3, pc, #180	; (adr r3, 8018590 <_strtod_l+0xbe8>)
 80184dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184e0:	4640      	mov	r0, r8
 80184e2:	4649      	mov	r1, r9
 80184e4:	f7e8 fb14 	bl	8000b10 <__aeabi_dcmple>
 80184e8:	b1a0      	cbz	r0, 8018514 <_strtod_l+0xb6c>
 80184ea:	4649      	mov	r1, r9
 80184ec:	4640      	mov	r0, r8
 80184ee:	f7e8 fb6b 	bl	8000bc8 <__aeabi_d2uiz>
 80184f2:	2801      	cmp	r0, #1
 80184f4:	bf38      	it	cc
 80184f6:	2001      	movcc	r0, #1
 80184f8:	f7e8 f814 	bl	8000524 <__aeabi_ui2d>
 80184fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184fe:	4680      	mov	r8, r0
 8018500:	4689      	mov	r9, r1
 8018502:	bb13      	cbnz	r3, 801854a <_strtod_l+0xba2>
 8018504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018508:	9014      	str	r0, [sp, #80]	; 0x50
 801850a:	9315      	str	r3, [sp, #84]	; 0x54
 801850c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018510:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018516:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018518:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801851c:	1a9b      	subs	r3, r3, r2
 801851e:	930d      	str	r3, [sp, #52]	; 0x34
 8018520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018524:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801852c:	f002 f9c8 	bl	801a8c0 <__ulp>
 8018530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018534:	ec53 2b10 	vmov	r2, r3, d0
 8018538:	f7e8 f86e 	bl	8000618 <__aeabi_dmul>
 801853c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018540:	f7e7 feb4 	bl	80002ac <__adddf3>
 8018544:	4682      	mov	sl, r0
 8018546:	468b      	mov	fp, r1
 8018548:	e78f      	b.n	801846a <_strtod_l+0xac2>
 801854a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801854e:	e7dd      	b.n	801850c <_strtod_l+0xb64>
 8018550:	a311      	add	r3, pc, #68	; (adr r3, 8018598 <_strtod_l+0xbf0>)
 8018552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018556:	f7e8 fad1 	bl	8000afc <__aeabi_dcmplt>
 801855a:	e7b4      	b.n	80184c6 <_strtod_l+0xb1e>
 801855c:	2300      	movs	r3, #0
 801855e:	930e      	str	r3, [sp, #56]	; 0x38
 8018560:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018564:	6013      	str	r3, [r2, #0]
 8018566:	f7ff ba65 	b.w	8017a34 <_strtod_l+0x8c>
 801856a:	2b65      	cmp	r3, #101	; 0x65
 801856c:	f43f ab5d 	beq.w	8017c2a <_strtod_l+0x282>
 8018570:	2b45      	cmp	r3, #69	; 0x45
 8018572:	f43f ab5a 	beq.w	8017c2a <_strtod_l+0x282>
 8018576:	2201      	movs	r2, #1
 8018578:	f7ff bb92 	b.w	8017ca0 <_strtod_l+0x2f8>
 801857c:	f3af 8000 	nop.w
 8018580:	94a03595 	.word	0x94a03595
 8018584:	3fdfffff 	.word	0x3fdfffff
 8018588:	35afe535 	.word	0x35afe535
 801858c:	3fe00000 	.word	0x3fe00000
 8018590:	ffc00000 	.word	0xffc00000
 8018594:	41dfffff 	.word	0x41dfffff
 8018598:	94a03595 	.word	0x94a03595
 801859c:	3fcfffff 	.word	0x3fcfffff
 80185a0:	3ff00000 	.word	0x3ff00000
 80185a4:	7ff00000 	.word	0x7ff00000
 80185a8:	7fe00000 	.word	0x7fe00000
 80185ac:	7c9fffff 	.word	0x7c9fffff
 80185b0:	3fe00000 	.word	0x3fe00000
 80185b4:	bff00000 	.word	0xbff00000
 80185b8:	7fefffff 	.word	0x7fefffff

080185bc <strtod>:
 80185bc:	460a      	mov	r2, r1
 80185be:	4601      	mov	r1, r0
 80185c0:	4802      	ldr	r0, [pc, #8]	; (80185cc <strtod+0x10>)
 80185c2:	4b03      	ldr	r3, [pc, #12]	; (80185d0 <strtod+0x14>)
 80185c4:	6800      	ldr	r0, [r0, #0]
 80185c6:	f7ff b9ef 	b.w	80179a8 <_strtod_l>
 80185ca:	bf00      	nop
 80185cc:	200005cc 	.word	0x200005cc
 80185d0:	20000634 	.word	0x20000634

080185d4 <strtok>:
 80185d4:	4b16      	ldr	r3, [pc, #88]	; (8018630 <strtok+0x5c>)
 80185d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185d8:	681e      	ldr	r6, [r3, #0]
 80185da:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80185dc:	4605      	mov	r5, r0
 80185de:	b9fc      	cbnz	r4, 8018620 <strtok+0x4c>
 80185e0:	2050      	movs	r0, #80	; 0x50
 80185e2:	9101      	str	r1, [sp, #4]
 80185e4:	f001 fde6 	bl	801a1b4 <malloc>
 80185e8:	9901      	ldr	r1, [sp, #4]
 80185ea:	65b0      	str	r0, [r6, #88]	; 0x58
 80185ec:	4602      	mov	r2, r0
 80185ee:	b920      	cbnz	r0, 80185fa <strtok+0x26>
 80185f0:	4b10      	ldr	r3, [pc, #64]	; (8018634 <strtok+0x60>)
 80185f2:	4811      	ldr	r0, [pc, #68]	; (8018638 <strtok+0x64>)
 80185f4:	2157      	movs	r1, #87	; 0x57
 80185f6:	f000 f99b 	bl	8018930 <__assert_func>
 80185fa:	e9c0 4400 	strd	r4, r4, [r0]
 80185fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018602:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018606:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801860a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801860e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018612:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018616:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801861a:	6184      	str	r4, [r0, #24]
 801861c:	7704      	strb	r4, [r0, #28]
 801861e:	6244      	str	r4, [r0, #36]	; 0x24
 8018620:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018622:	2301      	movs	r3, #1
 8018624:	4628      	mov	r0, r5
 8018626:	b002      	add	sp, #8
 8018628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801862c:	f000 b806 	b.w	801863c <__strtok_r>
 8018630:	200005cc 	.word	0x200005cc
 8018634:	08033b68 	.word	0x08033b68
 8018638:	08033c30 	.word	0x08033c30

0801863c <__strtok_r>:
 801863c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801863e:	b908      	cbnz	r0, 8018644 <__strtok_r+0x8>
 8018640:	6810      	ldr	r0, [r2, #0]
 8018642:	b188      	cbz	r0, 8018668 <__strtok_r+0x2c>
 8018644:	4604      	mov	r4, r0
 8018646:	4620      	mov	r0, r4
 8018648:	f814 5b01 	ldrb.w	r5, [r4], #1
 801864c:	460f      	mov	r7, r1
 801864e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018652:	b91e      	cbnz	r6, 801865c <__strtok_r+0x20>
 8018654:	b965      	cbnz	r5, 8018670 <__strtok_r+0x34>
 8018656:	6015      	str	r5, [r2, #0]
 8018658:	4628      	mov	r0, r5
 801865a:	e005      	b.n	8018668 <__strtok_r+0x2c>
 801865c:	42b5      	cmp	r5, r6
 801865e:	d1f6      	bne.n	801864e <__strtok_r+0x12>
 8018660:	2b00      	cmp	r3, #0
 8018662:	d1f0      	bne.n	8018646 <__strtok_r+0xa>
 8018664:	6014      	str	r4, [r2, #0]
 8018666:	7003      	strb	r3, [r0, #0]
 8018668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801866a:	461c      	mov	r4, r3
 801866c:	e00c      	b.n	8018688 <__strtok_r+0x4c>
 801866e:	b915      	cbnz	r5, 8018676 <__strtok_r+0x3a>
 8018670:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018674:	460e      	mov	r6, r1
 8018676:	f816 5b01 	ldrb.w	r5, [r6], #1
 801867a:	42ab      	cmp	r3, r5
 801867c:	d1f7      	bne.n	801866e <__strtok_r+0x32>
 801867e:	2b00      	cmp	r3, #0
 8018680:	d0f3      	beq.n	801866a <__strtok_r+0x2e>
 8018682:	2300      	movs	r3, #0
 8018684:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018688:	6014      	str	r4, [r2, #0]
 801868a:	e7ed      	b.n	8018668 <__strtok_r+0x2c>

0801868c <strtok_r>:
 801868c:	2301      	movs	r3, #1
 801868e:	f7ff bfd5 	b.w	801863c <__strtok_r>
	...

08018694 <_strtol_l.isra.0>:
 8018694:	2b01      	cmp	r3, #1
 8018696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801869a:	d001      	beq.n	80186a0 <_strtol_l.isra.0+0xc>
 801869c:	2b24      	cmp	r3, #36	; 0x24
 801869e:	d906      	bls.n	80186ae <_strtol_l.isra.0+0x1a>
 80186a0:	f000 ffde 	bl	8019660 <__errno>
 80186a4:	2316      	movs	r3, #22
 80186a6:	6003      	str	r3, [r0, #0]
 80186a8:	2000      	movs	r0, #0
 80186aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ae:	4f3a      	ldr	r7, [pc, #232]	; (8018798 <_strtol_l.isra.0+0x104>)
 80186b0:	468e      	mov	lr, r1
 80186b2:	4676      	mov	r6, lr
 80186b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80186b8:	5de5      	ldrb	r5, [r4, r7]
 80186ba:	f015 0508 	ands.w	r5, r5, #8
 80186be:	d1f8      	bne.n	80186b2 <_strtol_l.isra.0+0x1e>
 80186c0:	2c2d      	cmp	r4, #45	; 0x2d
 80186c2:	d134      	bne.n	801872e <_strtol_l.isra.0+0x9a>
 80186c4:	f89e 4000 	ldrb.w	r4, [lr]
 80186c8:	f04f 0801 	mov.w	r8, #1
 80186cc:	f106 0e02 	add.w	lr, r6, #2
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d05c      	beq.n	801878e <_strtol_l.isra.0+0xfa>
 80186d4:	2b10      	cmp	r3, #16
 80186d6:	d10c      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 80186d8:	2c30      	cmp	r4, #48	; 0x30
 80186da:	d10a      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 80186dc:	f89e 4000 	ldrb.w	r4, [lr]
 80186e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80186e4:	2c58      	cmp	r4, #88	; 0x58
 80186e6:	d14d      	bne.n	8018784 <_strtol_l.isra.0+0xf0>
 80186e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80186ec:	2310      	movs	r3, #16
 80186ee:	f10e 0e02 	add.w	lr, lr, #2
 80186f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80186f6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80186fa:	2600      	movs	r6, #0
 80186fc:	fbbc f9f3 	udiv	r9, ip, r3
 8018700:	4635      	mov	r5, r6
 8018702:	fb03 ca19 	mls	sl, r3, r9, ip
 8018706:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801870a:	2f09      	cmp	r7, #9
 801870c:	d818      	bhi.n	8018740 <_strtol_l.isra.0+0xac>
 801870e:	463c      	mov	r4, r7
 8018710:	42a3      	cmp	r3, r4
 8018712:	dd24      	ble.n	801875e <_strtol_l.isra.0+0xca>
 8018714:	2e00      	cmp	r6, #0
 8018716:	db1f      	blt.n	8018758 <_strtol_l.isra.0+0xc4>
 8018718:	45a9      	cmp	r9, r5
 801871a:	d31d      	bcc.n	8018758 <_strtol_l.isra.0+0xc4>
 801871c:	d101      	bne.n	8018722 <_strtol_l.isra.0+0x8e>
 801871e:	45a2      	cmp	sl, r4
 8018720:	db1a      	blt.n	8018758 <_strtol_l.isra.0+0xc4>
 8018722:	fb05 4503 	mla	r5, r5, r3, r4
 8018726:	2601      	movs	r6, #1
 8018728:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801872c:	e7eb      	b.n	8018706 <_strtol_l.isra.0+0x72>
 801872e:	2c2b      	cmp	r4, #43	; 0x2b
 8018730:	bf08      	it	eq
 8018732:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018736:	46a8      	mov	r8, r5
 8018738:	bf08      	it	eq
 801873a:	f106 0e02 	addeq.w	lr, r6, #2
 801873e:	e7c7      	b.n	80186d0 <_strtol_l.isra.0+0x3c>
 8018740:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018744:	2f19      	cmp	r7, #25
 8018746:	d801      	bhi.n	801874c <_strtol_l.isra.0+0xb8>
 8018748:	3c37      	subs	r4, #55	; 0x37
 801874a:	e7e1      	b.n	8018710 <_strtol_l.isra.0+0x7c>
 801874c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018750:	2f19      	cmp	r7, #25
 8018752:	d804      	bhi.n	801875e <_strtol_l.isra.0+0xca>
 8018754:	3c57      	subs	r4, #87	; 0x57
 8018756:	e7db      	b.n	8018710 <_strtol_l.isra.0+0x7c>
 8018758:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801875c:	e7e4      	b.n	8018728 <_strtol_l.isra.0+0x94>
 801875e:	2e00      	cmp	r6, #0
 8018760:	da05      	bge.n	801876e <_strtol_l.isra.0+0xda>
 8018762:	2322      	movs	r3, #34	; 0x22
 8018764:	6003      	str	r3, [r0, #0]
 8018766:	4665      	mov	r5, ip
 8018768:	b942      	cbnz	r2, 801877c <_strtol_l.isra.0+0xe8>
 801876a:	4628      	mov	r0, r5
 801876c:	e79d      	b.n	80186aa <_strtol_l.isra.0+0x16>
 801876e:	f1b8 0f00 	cmp.w	r8, #0
 8018772:	d000      	beq.n	8018776 <_strtol_l.isra.0+0xe2>
 8018774:	426d      	negs	r5, r5
 8018776:	2a00      	cmp	r2, #0
 8018778:	d0f7      	beq.n	801876a <_strtol_l.isra.0+0xd6>
 801877a:	b10e      	cbz	r6, 8018780 <_strtol_l.isra.0+0xec>
 801877c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8018780:	6011      	str	r1, [r2, #0]
 8018782:	e7f2      	b.n	801876a <_strtol_l.isra.0+0xd6>
 8018784:	2430      	movs	r4, #48	; 0x30
 8018786:	2b00      	cmp	r3, #0
 8018788:	d1b3      	bne.n	80186f2 <_strtol_l.isra.0+0x5e>
 801878a:	2308      	movs	r3, #8
 801878c:	e7b1      	b.n	80186f2 <_strtol_l.isra.0+0x5e>
 801878e:	2c30      	cmp	r4, #48	; 0x30
 8018790:	d0a4      	beq.n	80186dc <_strtol_l.isra.0+0x48>
 8018792:	230a      	movs	r3, #10
 8018794:	e7ad      	b.n	80186f2 <_strtol_l.isra.0+0x5e>
 8018796:	bf00      	nop
 8018798:	08033a2f 	.word	0x08033a2f

0801879c <strtol>:
 801879c:	4613      	mov	r3, r2
 801879e:	460a      	mov	r2, r1
 80187a0:	4601      	mov	r1, r0
 80187a2:	4802      	ldr	r0, [pc, #8]	; (80187ac <strtol+0x10>)
 80187a4:	6800      	ldr	r0, [r0, #0]
 80187a6:	f7ff bf75 	b.w	8018694 <_strtol_l.isra.0>
 80187aa:	bf00      	nop
 80187ac:	200005cc 	.word	0x200005cc

080187b0 <__swbuf_r>:
 80187b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b2:	460e      	mov	r6, r1
 80187b4:	4614      	mov	r4, r2
 80187b6:	4605      	mov	r5, r0
 80187b8:	b118      	cbz	r0, 80187c2 <__swbuf_r+0x12>
 80187ba:	6983      	ldr	r3, [r0, #24]
 80187bc:	b90b      	cbnz	r3, 80187c2 <__swbuf_r+0x12>
 80187be:	f001 f86f 	bl	80198a0 <__sinit>
 80187c2:	4b21      	ldr	r3, [pc, #132]	; (8018848 <__swbuf_r+0x98>)
 80187c4:	429c      	cmp	r4, r3
 80187c6:	d12b      	bne.n	8018820 <__swbuf_r+0x70>
 80187c8:	686c      	ldr	r4, [r5, #4]
 80187ca:	69a3      	ldr	r3, [r4, #24]
 80187cc:	60a3      	str	r3, [r4, #8]
 80187ce:	89a3      	ldrh	r3, [r4, #12]
 80187d0:	071a      	lsls	r2, r3, #28
 80187d2:	d52f      	bpl.n	8018834 <__swbuf_r+0x84>
 80187d4:	6923      	ldr	r3, [r4, #16]
 80187d6:	b36b      	cbz	r3, 8018834 <__swbuf_r+0x84>
 80187d8:	6923      	ldr	r3, [r4, #16]
 80187da:	6820      	ldr	r0, [r4, #0]
 80187dc:	1ac0      	subs	r0, r0, r3
 80187de:	6963      	ldr	r3, [r4, #20]
 80187e0:	b2f6      	uxtb	r6, r6
 80187e2:	4283      	cmp	r3, r0
 80187e4:	4637      	mov	r7, r6
 80187e6:	dc04      	bgt.n	80187f2 <__swbuf_r+0x42>
 80187e8:	4621      	mov	r1, r4
 80187ea:	4628      	mov	r0, r5
 80187ec:	f000 ffc4 	bl	8019778 <_fflush_r>
 80187f0:	bb30      	cbnz	r0, 8018840 <__swbuf_r+0x90>
 80187f2:	68a3      	ldr	r3, [r4, #8]
 80187f4:	3b01      	subs	r3, #1
 80187f6:	60a3      	str	r3, [r4, #8]
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	1c5a      	adds	r2, r3, #1
 80187fc:	6022      	str	r2, [r4, #0]
 80187fe:	701e      	strb	r6, [r3, #0]
 8018800:	6963      	ldr	r3, [r4, #20]
 8018802:	3001      	adds	r0, #1
 8018804:	4283      	cmp	r3, r0
 8018806:	d004      	beq.n	8018812 <__swbuf_r+0x62>
 8018808:	89a3      	ldrh	r3, [r4, #12]
 801880a:	07db      	lsls	r3, r3, #31
 801880c:	d506      	bpl.n	801881c <__swbuf_r+0x6c>
 801880e:	2e0a      	cmp	r6, #10
 8018810:	d104      	bne.n	801881c <__swbuf_r+0x6c>
 8018812:	4621      	mov	r1, r4
 8018814:	4628      	mov	r0, r5
 8018816:	f000 ffaf 	bl	8019778 <_fflush_r>
 801881a:	b988      	cbnz	r0, 8018840 <__swbuf_r+0x90>
 801881c:	4638      	mov	r0, r7
 801881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018820:	4b0a      	ldr	r3, [pc, #40]	; (801884c <__swbuf_r+0x9c>)
 8018822:	429c      	cmp	r4, r3
 8018824:	d101      	bne.n	801882a <__swbuf_r+0x7a>
 8018826:	68ac      	ldr	r4, [r5, #8]
 8018828:	e7cf      	b.n	80187ca <__swbuf_r+0x1a>
 801882a:	4b09      	ldr	r3, [pc, #36]	; (8018850 <__swbuf_r+0xa0>)
 801882c:	429c      	cmp	r4, r3
 801882e:	bf08      	it	eq
 8018830:	68ec      	ldreq	r4, [r5, #12]
 8018832:	e7ca      	b.n	80187ca <__swbuf_r+0x1a>
 8018834:	4621      	mov	r1, r4
 8018836:	4628      	mov	r0, r5
 8018838:	f000 f80c 	bl	8018854 <__swsetup_r>
 801883c:	2800      	cmp	r0, #0
 801883e:	d0cb      	beq.n	80187d8 <__swbuf_r+0x28>
 8018840:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018844:	e7ea      	b.n	801881c <__swbuf_r+0x6c>
 8018846:	bf00      	nop
 8018848:	08033d6c 	.word	0x08033d6c
 801884c:	08033d8c 	.word	0x08033d8c
 8018850:	08033d4c 	.word	0x08033d4c

08018854 <__swsetup_r>:
 8018854:	4b32      	ldr	r3, [pc, #200]	; (8018920 <__swsetup_r+0xcc>)
 8018856:	b570      	push	{r4, r5, r6, lr}
 8018858:	681d      	ldr	r5, [r3, #0]
 801885a:	4606      	mov	r6, r0
 801885c:	460c      	mov	r4, r1
 801885e:	b125      	cbz	r5, 801886a <__swsetup_r+0x16>
 8018860:	69ab      	ldr	r3, [r5, #24]
 8018862:	b913      	cbnz	r3, 801886a <__swsetup_r+0x16>
 8018864:	4628      	mov	r0, r5
 8018866:	f001 f81b 	bl	80198a0 <__sinit>
 801886a:	4b2e      	ldr	r3, [pc, #184]	; (8018924 <__swsetup_r+0xd0>)
 801886c:	429c      	cmp	r4, r3
 801886e:	d10f      	bne.n	8018890 <__swsetup_r+0x3c>
 8018870:	686c      	ldr	r4, [r5, #4]
 8018872:	89a3      	ldrh	r3, [r4, #12]
 8018874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018878:	0719      	lsls	r1, r3, #28
 801887a:	d42c      	bmi.n	80188d6 <__swsetup_r+0x82>
 801887c:	06dd      	lsls	r5, r3, #27
 801887e:	d411      	bmi.n	80188a4 <__swsetup_r+0x50>
 8018880:	2309      	movs	r3, #9
 8018882:	6033      	str	r3, [r6, #0]
 8018884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018888:	81a3      	strh	r3, [r4, #12]
 801888a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801888e:	e03e      	b.n	801890e <__swsetup_r+0xba>
 8018890:	4b25      	ldr	r3, [pc, #148]	; (8018928 <__swsetup_r+0xd4>)
 8018892:	429c      	cmp	r4, r3
 8018894:	d101      	bne.n	801889a <__swsetup_r+0x46>
 8018896:	68ac      	ldr	r4, [r5, #8]
 8018898:	e7eb      	b.n	8018872 <__swsetup_r+0x1e>
 801889a:	4b24      	ldr	r3, [pc, #144]	; (801892c <__swsetup_r+0xd8>)
 801889c:	429c      	cmp	r4, r3
 801889e:	bf08      	it	eq
 80188a0:	68ec      	ldreq	r4, [r5, #12]
 80188a2:	e7e6      	b.n	8018872 <__swsetup_r+0x1e>
 80188a4:	0758      	lsls	r0, r3, #29
 80188a6:	d512      	bpl.n	80188ce <__swsetup_r+0x7a>
 80188a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188aa:	b141      	cbz	r1, 80188be <__swsetup_r+0x6a>
 80188ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80188b0:	4299      	cmp	r1, r3
 80188b2:	d002      	beq.n	80188ba <__swsetup_r+0x66>
 80188b4:	4630      	mov	r0, r6
 80188b6:	f002 f961 	bl	801ab7c <_free_r>
 80188ba:	2300      	movs	r3, #0
 80188bc:	6363      	str	r3, [r4, #52]	; 0x34
 80188be:	89a3      	ldrh	r3, [r4, #12]
 80188c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80188c4:	81a3      	strh	r3, [r4, #12]
 80188c6:	2300      	movs	r3, #0
 80188c8:	6063      	str	r3, [r4, #4]
 80188ca:	6923      	ldr	r3, [r4, #16]
 80188cc:	6023      	str	r3, [r4, #0]
 80188ce:	89a3      	ldrh	r3, [r4, #12]
 80188d0:	f043 0308 	orr.w	r3, r3, #8
 80188d4:	81a3      	strh	r3, [r4, #12]
 80188d6:	6923      	ldr	r3, [r4, #16]
 80188d8:	b94b      	cbnz	r3, 80188ee <__swsetup_r+0x9a>
 80188da:	89a3      	ldrh	r3, [r4, #12]
 80188dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80188e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188e4:	d003      	beq.n	80188ee <__swsetup_r+0x9a>
 80188e6:	4621      	mov	r1, r4
 80188e8:	4630      	mov	r0, r6
 80188ea:	f001 fc23 	bl	801a134 <__smakebuf_r>
 80188ee:	89a0      	ldrh	r0, [r4, #12]
 80188f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188f4:	f010 0301 	ands.w	r3, r0, #1
 80188f8:	d00a      	beq.n	8018910 <__swsetup_r+0xbc>
 80188fa:	2300      	movs	r3, #0
 80188fc:	60a3      	str	r3, [r4, #8]
 80188fe:	6963      	ldr	r3, [r4, #20]
 8018900:	425b      	negs	r3, r3
 8018902:	61a3      	str	r3, [r4, #24]
 8018904:	6923      	ldr	r3, [r4, #16]
 8018906:	b943      	cbnz	r3, 801891a <__swsetup_r+0xc6>
 8018908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801890c:	d1ba      	bne.n	8018884 <__swsetup_r+0x30>
 801890e:	bd70      	pop	{r4, r5, r6, pc}
 8018910:	0781      	lsls	r1, r0, #30
 8018912:	bf58      	it	pl
 8018914:	6963      	ldrpl	r3, [r4, #20]
 8018916:	60a3      	str	r3, [r4, #8]
 8018918:	e7f4      	b.n	8018904 <__swsetup_r+0xb0>
 801891a:	2000      	movs	r0, #0
 801891c:	e7f7      	b.n	801890e <__swsetup_r+0xba>
 801891e:	bf00      	nop
 8018920:	200005cc 	.word	0x200005cc
 8018924:	08033d6c 	.word	0x08033d6c
 8018928:	08033d8c 	.word	0x08033d8c
 801892c:	08033d4c 	.word	0x08033d4c

08018930 <__assert_func>:
 8018930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018932:	4614      	mov	r4, r2
 8018934:	461a      	mov	r2, r3
 8018936:	4b09      	ldr	r3, [pc, #36]	; (801895c <__assert_func+0x2c>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	4605      	mov	r5, r0
 801893c:	68d8      	ldr	r0, [r3, #12]
 801893e:	b14c      	cbz	r4, 8018954 <__assert_func+0x24>
 8018940:	4b07      	ldr	r3, [pc, #28]	; (8018960 <__assert_func+0x30>)
 8018942:	9100      	str	r1, [sp, #0]
 8018944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018948:	4906      	ldr	r1, [pc, #24]	; (8018964 <__assert_func+0x34>)
 801894a:	462b      	mov	r3, r5
 801894c:	f001 f826 	bl	801999c <fiprintf>
 8018950:	f002 fcf0 	bl	801b334 <abort>
 8018954:	4b04      	ldr	r3, [pc, #16]	; (8018968 <__assert_func+0x38>)
 8018956:	461c      	mov	r4, r3
 8018958:	e7f3      	b.n	8018942 <__assert_func+0x12>
 801895a:	bf00      	nop
 801895c:	200005cc 	.word	0x200005cc
 8018960:	08033c91 	.word	0x08033c91
 8018964:	08033c9e 	.word	0x08033c9e
 8018968:	08033ccc 	.word	0x08033ccc

0801896c <quorem>:
 801896c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018970:	6903      	ldr	r3, [r0, #16]
 8018972:	690c      	ldr	r4, [r1, #16]
 8018974:	42a3      	cmp	r3, r4
 8018976:	4607      	mov	r7, r0
 8018978:	f2c0 8081 	blt.w	8018a7e <quorem+0x112>
 801897c:	3c01      	subs	r4, #1
 801897e:	f101 0814 	add.w	r8, r1, #20
 8018982:	f100 0514 	add.w	r5, r0, #20
 8018986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801898a:	9301      	str	r3, [sp, #4]
 801898c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018994:	3301      	adds	r3, #1
 8018996:	429a      	cmp	r2, r3
 8018998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801899c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80189a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80189a4:	d331      	bcc.n	8018a0a <quorem+0x9e>
 80189a6:	f04f 0e00 	mov.w	lr, #0
 80189aa:	4640      	mov	r0, r8
 80189ac:	46ac      	mov	ip, r5
 80189ae:	46f2      	mov	sl, lr
 80189b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80189b4:	b293      	uxth	r3, r2
 80189b6:	fb06 e303 	mla	r3, r6, r3, lr
 80189ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80189be:	b29b      	uxth	r3, r3
 80189c0:	ebaa 0303 	sub.w	r3, sl, r3
 80189c4:	0c12      	lsrs	r2, r2, #16
 80189c6:	f8dc a000 	ldr.w	sl, [ip]
 80189ca:	fb06 e202 	mla	r2, r6, r2, lr
 80189ce:	fa13 f38a 	uxtah	r3, r3, sl
 80189d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80189d6:	fa1f fa82 	uxth.w	sl, r2
 80189da:	f8dc 2000 	ldr.w	r2, [ip]
 80189de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80189e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189ec:	4581      	cmp	r9, r0
 80189ee:	f84c 3b04 	str.w	r3, [ip], #4
 80189f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80189f6:	d2db      	bcs.n	80189b0 <quorem+0x44>
 80189f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80189fc:	b92b      	cbnz	r3, 8018a0a <quorem+0x9e>
 80189fe:	9b01      	ldr	r3, [sp, #4]
 8018a00:	3b04      	subs	r3, #4
 8018a02:	429d      	cmp	r5, r3
 8018a04:	461a      	mov	r2, r3
 8018a06:	d32e      	bcc.n	8018a66 <quorem+0xfa>
 8018a08:	613c      	str	r4, [r7, #16]
 8018a0a:	4638      	mov	r0, r7
 8018a0c:	f001 feb4 	bl	801a778 <__mcmp>
 8018a10:	2800      	cmp	r0, #0
 8018a12:	db24      	blt.n	8018a5e <quorem+0xf2>
 8018a14:	3601      	adds	r6, #1
 8018a16:	4628      	mov	r0, r5
 8018a18:	f04f 0c00 	mov.w	ip, #0
 8018a1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018a20:	f8d0 e000 	ldr.w	lr, [r0]
 8018a24:	b293      	uxth	r3, r2
 8018a26:	ebac 0303 	sub.w	r3, ip, r3
 8018a2a:	0c12      	lsrs	r2, r2, #16
 8018a2c:	fa13 f38e 	uxtah	r3, r3, lr
 8018a30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018a3e:	45c1      	cmp	r9, r8
 8018a40:	f840 3b04 	str.w	r3, [r0], #4
 8018a44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018a48:	d2e8      	bcs.n	8018a1c <quorem+0xb0>
 8018a4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a52:	b922      	cbnz	r2, 8018a5e <quorem+0xf2>
 8018a54:	3b04      	subs	r3, #4
 8018a56:	429d      	cmp	r5, r3
 8018a58:	461a      	mov	r2, r3
 8018a5a:	d30a      	bcc.n	8018a72 <quorem+0x106>
 8018a5c:	613c      	str	r4, [r7, #16]
 8018a5e:	4630      	mov	r0, r6
 8018a60:	b003      	add	sp, #12
 8018a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a66:	6812      	ldr	r2, [r2, #0]
 8018a68:	3b04      	subs	r3, #4
 8018a6a:	2a00      	cmp	r2, #0
 8018a6c:	d1cc      	bne.n	8018a08 <quorem+0x9c>
 8018a6e:	3c01      	subs	r4, #1
 8018a70:	e7c7      	b.n	8018a02 <quorem+0x96>
 8018a72:	6812      	ldr	r2, [r2, #0]
 8018a74:	3b04      	subs	r3, #4
 8018a76:	2a00      	cmp	r2, #0
 8018a78:	d1f0      	bne.n	8018a5c <quorem+0xf0>
 8018a7a:	3c01      	subs	r4, #1
 8018a7c:	e7eb      	b.n	8018a56 <quorem+0xea>
 8018a7e:	2000      	movs	r0, #0
 8018a80:	e7ee      	b.n	8018a60 <quorem+0xf4>
 8018a82:	0000      	movs	r0, r0
 8018a84:	0000      	movs	r0, r0
	...

08018a88 <_dtoa_r>:
 8018a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a8c:	ed2d 8b02 	vpush	{d8}
 8018a90:	ec57 6b10 	vmov	r6, r7, d0
 8018a94:	b095      	sub	sp, #84	; 0x54
 8018a96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018a9c:	9105      	str	r1, [sp, #20]
 8018a9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018aa2:	4604      	mov	r4, r0
 8018aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8018aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8018aa8:	b975      	cbnz	r5, 8018ac8 <_dtoa_r+0x40>
 8018aaa:	2010      	movs	r0, #16
 8018aac:	f001 fb82 	bl	801a1b4 <malloc>
 8018ab0:	4602      	mov	r2, r0
 8018ab2:	6260      	str	r0, [r4, #36]	; 0x24
 8018ab4:	b920      	cbnz	r0, 8018ac0 <_dtoa_r+0x38>
 8018ab6:	4bb2      	ldr	r3, [pc, #712]	; (8018d80 <_dtoa_r+0x2f8>)
 8018ab8:	21ea      	movs	r1, #234	; 0xea
 8018aba:	48b2      	ldr	r0, [pc, #712]	; (8018d84 <_dtoa_r+0x2fc>)
 8018abc:	f7ff ff38 	bl	8018930 <__assert_func>
 8018ac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018ac4:	6005      	str	r5, [r0, #0]
 8018ac6:	60c5      	str	r5, [r0, #12]
 8018ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018aca:	6819      	ldr	r1, [r3, #0]
 8018acc:	b151      	cbz	r1, 8018ae4 <_dtoa_r+0x5c>
 8018ace:	685a      	ldr	r2, [r3, #4]
 8018ad0:	604a      	str	r2, [r1, #4]
 8018ad2:	2301      	movs	r3, #1
 8018ad4:	4093      	lsls	r3, r2
 8018ad6:	608b      	str	r3, [r1, #8]
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f001 fbc5 	bl	801a268 <_Bfree>
 8018ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	601a      	str	r2, [r3, #0]
 8018ae4:	1e3b      	subs	r3, r7, #0
 8018ae6:	bfb9      	ittee	lt
 8018ae8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018aec:	9303      	strlt	r3, [sp, #12]
 8018aee:	2300      	movge	r3, #0
 8018af0:	f8c8 3000 	strge.w	r3, [r8]
 8018af4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018af8:	4ba3      	ldr	r3, [pc, #652]	; (8018d88 <_dtoa_r+0x300>)
 8018afa:	bfbc      	itt	lt
 8018afc:	2201      	movlt	r2, #1
 8018afe:	f8c8 2000 	strlt.w	r2, [r8]
 8018b02:	ea33 0309 	bics.w	r3, r3, r9
 8018b06:	d11b      	bne.n	8018b40 <_dtoa_r+0xb8>
 8018b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8018b0e:	6013      	str	r3, [r2, #0]
 8018b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018b14:	4333      	orrs	r3, r6
 8018b16:	f000 857a 	beq.w	801960e <_dtoa_r+0xb86>
 8018b1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b1c:	b963      	cbnz	r3, 8018b38 <_dtoa_r+0xb0>
 8018b1e:	4b9b      	ldr	r3, [pc, #620]	; (8018d8c <_dtoa_r+0x304>)
 8018b20:	e024      	b.n	8018b6c <_dtoa_r+0xe4>
 8018b22:	4b9b      	ldr	r3, [pc, #620]	; (8018d90 <_dtoa_r+0x308>)
 8018b24:	9300      	str	r3, [sp, #0]
 8018b26:	3308      	adds	r3, #8
 8018b28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018b2a:	6013      	str	r3, [r2, #0]
 8018b2c:	9800      	ldr	r0, [sp, #0]
 8018b2e:	b015      	add	sp, #84	; 0x54
 8018b30:	ecbd 8b02 	vpop	{d8}
 8018b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b38:	4b94      	ldr	r3, [pc, #592]	; (8018d8c <_dtoa_r+0x304>)
 8018b3a:	9300      	str	r3, [sp, #0]
 8018b3c:	3303      	adds	r3, #3
 8018b3e:	e7f3      	b.n	8018b28 <_dtoa_r+0xa0>
 8018b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b44:	2200      	movs	r2, #0
 8018b46:	ec51 0b17 	vmov	r0, r1, d7
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018b50:	f7e7 ffca 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b54:	4680      	mov	r8, r0
 8018b56:	b158      	cbz	r0, 8018b70 <_dtoa_r+0xe8>
 8018b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	6013      	str	r3, [r2, #0]
 8018b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f000 8551 	beq.w	8019608 <_dtoa_r+0xb80>
 8018b66:	488b      	ldr	r0, [pc, #556]	; (8018d94 <_dtoa_r+0x30c>)
 8018b68:	6018      	str	r0, [r3, #0]
 8018b6a:	1e43      	subs	r3, r0, #1
 8018b6c:	9300      	str	r3, [sp, #0]
 8018b6e:	e7dd      	b.n	8018b2c <_dtoa_r+0xa4>
 8018b70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018b74:	aa12      	add	r2, sp, #72	; 0x48
 8018b76:	a913      	add	r1, sp, #76	; 0x4c
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f001 ff1d 	bl	801a9b8 <__d2b>
 8018b7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018b82:	4683      	mov	fp, r0
 8018b84:	2d00      	cmp	r5, #0
 8018b86:	d07c      	beq.n	8018c82 <_dtoa_r+0x1fa>
 8018b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018b96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018b9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018ba2:	4b7d      	ldr	r3, [pc, #500]	; (8018d98 <_dtoa_r+0x310>)
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	4630      	mov	r0, r6
 8018ba8:	4639      	mov	r1, r7
 8018baa:	f7e7 fb7d 	bl	80002a8 <__aeabi_dsub>
 8018bae:	a36e      	add	r3, pc, #440	; (adr r3, 8018d68 <_dtoa_r+0x2e0>)
 8018bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb4:	f7e7 fd30 	bl	8000618 <__aeabi_dmul>
 8018bb8:	a36d      	add	r3, pc, #436	; (adr r3, 8018d70 <_dtoa_r+0x2e8>)
 8018bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bbe:	f7e7 fb75 	bl	80002ac <__adddf3>
 8018bc2:	4606      	mov	r6, r0
 8018bc4:	4628      	mov	r0, r5
 8018bc6:	460f      	mov	r7, r1
 8018bc8:	f7e7 fcbc 	bl	8000544 <__aeabi_i2d>
 8018bcc:	a36a      	add	r3, pc, #424	; (adr r3, 8018d78 <_dtoa_r+0x2f0>)
 8018bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd2:	f7e7 fd21 	bl	8000618 <__aeabi_dmul>
 8018bd6:	4602      	mov	r2, r0
 8018bd8:	460b      	mov	r3, r1
 8018bda:	4630      	mov	r0, r6
 8018bdc:	4639      	mov	r1, r7
 8018bde:	f7e7 fb65 	bl	80002ac <__adddf3>
 8018be2:	4606      	mov	r6, r0
 8018be4:	460f      	mov	r7, r1
 8018be6:	f7e7 ffc7 	bl	8000b78 <__aeabi_d2iz>
 8018bea:	2200      	movs	r2, #0
 8018bec:	4682      	mov	sl, r0
 8018bee:	2300      	movs	r3, #0
 8018bf0:	4630      	mov	r0, r6
 8018bf2:	4639      	mov	r1, r7
 8018bf4:	f7e7 ff82 	bl	8000afc <__aeabi_dcmplt>
 8018bf8:	b148      	cbz	r0, 8018c0e <_dtoa_r+0x186>
 8018bfa:	4650      	mov	r0, sl
 8018bfc:	f7e7 fca2 	bl	8000544 <__aeabi_i2d>
 8018c00:	4632      	mov	r2, r6
 8018c02:	463b      	mov	r3, r7
 8018c04:	f7e7 ff70 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c08:	b908      	cbnz	r0, 8018c0e <_dtoa_r+0x186>
 8018c0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018c0e:	f1ba 0f16 	cmp.w	sl, #22
 8018c12:	d854      	bhi.n	8018cbe <_dtoa_r+0x236>
 8018c14:	4b61      	ldr	r3, [pc, #388]	; (8018d9c <_dtoa_r+0x314>)
 8018c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018c22:	f7e7 ff6b 	bl	8000afc <__aeabi_dcmplt>
 8018c26:	2800      	cmp	r0, #0
 8018c28:	d04b      	beq.n	8018cc2 <_dtoa_r+0x23a>
 8018c2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018c2e:	2300      	movs	r3, #0
 8018c30:	930e      	str	r3, [sp, #56]	; 0x38
 8018c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c34:	1b5d      	subs	r5, r3, r5
 8018c36:	1e6b      	subs	r3, r5, #1
 8018c38:	9304      	str	r3, [sp, #16]
 8018c3a:	bf43      	ittte	mi
 8018c3c:	2300      	movmi	r3, #0
 8018c3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8018c42:	9304      	strmi	r3, [sp, #16]
 8018c44:	f04f 0800 	movpl.w	r8, #0
 8018c48:	f1ba 0f00 	cmp.w	sl, #0
 8018c4c:	db3b      	blt.n	8018cc6 <_dtoa_r+0x23e>
 8018c4e:	9b04      	ldr	r3, [sp, #16]
 8018c50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018c54:	4453      	add	r3, sl
 8018c56:	9304      	str	r3, [sp, #16]
 8018c58:	2300      	movs	r3, #0
 8018c5a:	9306      	str	r3, [sp, #24]
 8018c5c:	9b05      	ldr	r3, [sp, #20]
 8018c5e:	2b09      	cmp	r3, #9
 8018c60:	d869      	bhi.n	8018d36 <_dtoa_r+0x2ae>
 8018c62:	2b05      	cmp	r3, #5
 8018c64:	bfc4      	itt	gt
 8018c66:	3b04      	subgt	r3, #4
 8018c68:	9305      	strgt	r3, [sp, #20]
 8018c6a:	9b05      	ldr	r3, [sp, #20]
 8018c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8018c70:	bfcc      	ite	gt
 8018c72:	2500      	movgt	r5, #0
 8018c74:	2501      	movle	r5, #1
 8018c76:	2b03      	cmp	r3, #3
 8018c78:	d869      	bhi.n	8018d4e <_dtoa_r+0x2c6>
 8018c7a:	e8df f003 	tbb	[pc, r3]
 8018c7e:	4e2c      	.short	0x4e2c
 8018c80:	5a4c      	.short	0x5a4c
 8018c82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018c86:	441d      	add	r5, r3
 8018c88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018c8c:	2b20      	cmp	r3, #32
 8018c8e:	bfc1      	itttt	gt
 8018c90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018c94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018c98:	fa09 f303 	lslgt.w	r3, r9, r3
 8018c9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018ca0:	bfda      	itte	le
 8018ca2:	f1c3 0320 	rsble	r3, r3, #32
 8018ca6:	fa06 f003 	lslle.w	r0, r6, r3
 8018caa:	4318      	orrgt	r0, r3
 8018cac:	f7e7 fc3a 	bl	8000524 <__aeabi_ui2d>
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018cb8:	3d01      	subs	r5, #1
 8018cba:	9310      	str	r3, [sp, #64]	; 0x40
 8018cbc:	e771      	b.n	8018ba2 <_dtoa_r+0x11a>
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	e7b6      	b.n	8018c30 <_dtoa_r+0x1a8>
 8018cc2:	900e      	str	r0, [sp, #56]	; 0x38
 8018cc4:	e7b5      	b.n	8018c32 <_dtoa_r+0x1aa>
 8018cc6:	f1ca 0300 	rsb	r3, sl, #0
 8018cca:	9306      	str	r3, [sp, #24]
 8018ccc:	2300      	movs	r3, #0
 8018cce:	eba8 080a 	sub.w	r8, r8, sl
 8018cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8018cd4:	e7c2      	b.n	8018c5c <_dtoa_r+0x1d4>
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	9308      	str	r3, [sp, #32]
 8018cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	dc39      	bgt.n	8018d54 <_dtoa_r+0x2cc>
 8018ce0:	f04f 0901 	mov.w	r9, #1
 8018ce4:	f8cd 9004 	str.w	r9, [sp, #4]
 8018ce8:	464b      	mov	r3, r9
 8018cea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018cee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	6042      	str	r2, [r0, #4]
 8018cf4:	2204      	movs	r2, #4
 8018cf6:	f102 0614 	add.w	r6, r2, #20
 8018cfa:	429e      	cmp	r6, r3
 8018cfc:	6841      	ldr	r1, [r0, #4]
 8018cfe:	d92f      	bls.n	8018d60 <_dtoa_r+0x2d8>
 8018d00:	4620      	mov	r0, r4
 8018d02:	f001 fa71 	bl	801a1e8 <_Balloc>
 8018d06:	9000      	str	r0, [sp, #0]
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d14b      	bne.n	8018da4 <_dtoa_r+0x31c>
 8018d0c:	4b24      	ldr	r3, [pc, #144]	; (8018da0 <_dtoa_r+0x318>)
 8018d0e:	4602      	mov	r2, r0
 8018d10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018d14:	e6d1      	b.n	8018aba <_dtoa_r+0x32>
 8018d16:	2301      	movs	r3, #1
 8018d18:	e7de      	b.n	8018cd8 <_dtoa_r+0x250>
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	9308      	str	r3, [sp, #32]
 8018d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d20:	eb0a 0903 	add.w	r9, sl, r3
 8018d24:	f109 0301 	add.w	r3, r9, #1
 8018d28:	2b01      	cmp	r3, #1
 8018d2a:	9301      	str	r3, [sp, #4]
 8018d2c:	bfb8      	it	lt
 8018d2e:	2301      	movlt	r3, #1
 8018d30:	e7dd      	b.n	8018cee <_dtoa_r+0x266>
 8018d32:	2301      	movs	r3, #1
 8018d34:	e7f2      	b.n	8018d1c <_dtoa_r+0x294>
 8018d36:	2501      	movs	r5, #1
 8018d38:	2300      	movs	r3, #0
 8018d3a:	9305      	str	r3, [sp, #20]
 8018d3c:	9508      	str	r5, [sp, #32]
 8018d3e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8018d42:	2200      	movs	r2, #0
 8018d44:	f8cd 9004 	str.w	r9, [sp, #4]
 8018d48:	2312      	movs	r3, #18
 8018d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8018d4c:	e7cf      	b.n	8018cee <_dtoa_r+0x266>
 8018d4e:	2301      	movs	r3, #1
 8018d50:	9308      	str	r3, [sp, #32]
 8018d52:	e7f4      	b.n	8018d3e <_dtoa_r+0x2b6>
 8018d54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018d58:	f8cd 9004 	str.w	r9, [sp, #4]
 8018d5c:	464b      	mov	r3, r9
 8018d5e:	e7c6      	b.n	8018cee <_dtoa_r+0x266>
 8018d60:	3101      	adds	r1, #1
 8018d62:	6041      	str	r1, [r0, #4]
 8018d64:	0052      	lsls	r2, r2, #1
 8018d66:	e7c6      	b.n	8018cf6 <_dtoa_r+0x26e>
 8018d68:	636f4361 	.word	0x636f4361
 8018d6c:	3fd287a7 	.word	0x3fd287a7
 8018d70:	8b60c8b3 	.word	0x8b60c8b3
 8018d74:	3fc68a28 	.word	0x3fc68a28
 8018d78:	509f79fb 	.word	0x509f79fb
 8018d7c:	3fd34413 	.word	0x3fd34413
 8018d80:	08033b68 	.word	0x08033b68
 8018d84:	08033cda 	.word	0x08033cda
 8018d88:	7ff00000 	.word	0x7ff00000
 8018d8c:	08033cd6 	.word	0x08033cd6
 8018d90:	08033ccd 	.word	0x08033ccd
 8018d94:	08033b45 	.word	0x08033b45
 8018d98:	3ff80000 	.word	0x3ff80000
 8018d9c:	08033eb8 	.word	0x08033eb8
 8018da0:	08033d39 	.word	0x08033d39
 8018da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018da6:	9a00      	ldr	r2, [sp, #0]
 8018da8:	601a      	str	r2, [r3, #0]
 8018daa:	9b01      	ldr	r3, [sp, #4]
 8018dac:	2b0e      	cmp	r3, #14
 8018dae:	f200 80ad 	bhi.w	8018f0c <_dtoa_r+0x484>
 8018db2:	2d00      	cmp	r5, #0
 8018db4:	f000 80aa 	beq.w	8018f0c <_dtoa_r+0x484>
 8018db8:	f1ba 0f00 	cmp.w	sl, #0
 8018dbc:	dd36      	ble.n	8018e2c <_dtoa_r+0x3a4>
 8018dbe:	4ac3      	ldr	r2, [pc, #780]	; (80190cc <_dtoa_r+0x644>)
 8018dc0:	f00a 030f 	and.w	r3, sl, #15
 8018dc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018dc8:	ed93 7b00 	vldr	d7, [r3]
 8018dcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018dd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8018dd8:	eef0 8a67 	vmov.f32	s17, s15
 8018ddc:	d016      	beq.n	8018e0c <_dtoa_r+0x384>
 8018dde:	4bbc      	ldr	r3, [pc, #752]	; (80190d0 <_dtoa_r+0x648>)
 8018de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018de4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018de8:	f7e7 fd40 	bl	800086c <__aeabi_ddiv>
 8018dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018df0:	f007 070f 	and.w	r7, r7, #15
 8018df4:	2503      	movs	r5, #3
 8018df6:	4eb6      	ldr	r6, [pc, #728]	; (80190d0 <_dtoa_r+0x648>)
 8018df8:	b957      	cbnz	r7, 8018e10 <_dtoa_r+0x388>
 8018dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018dfe:	ec53 2b18 	vmov	r2, r3, d8
 8018e02:	f7e7 fd33 	bl	800086c <__aeabi_ddiv>
 8018e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e0a:	e029      	b.n	8018e60 <_dtoa_r+0x3d8>
 8018e0c:	2502      	movs	r5, #2
 8018e0e:	e7f2      	b.n	8018df6 <_dtoa_r+0x36e>
 8018e10:	07f9      	lsls	r1, r7, #31
 8018e12:	d508      	bpl.n	8018e26 <_dtoa_r+0x39e>
 8018e14:	ec51 0b18 	vmov	r0, r1, d8
 8018e18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018e1c:	f7e7 fbfc 	bl	8000618 <__aeabi_dmul>
 8018e20:	ec41 0b18 	vmov	d8, r0, r1
 8018e24:	3501      	adds	r5, #1
 8018e26:	107f      	asrs	r7, r7, #1
 8018e28:	3608      	adds	r6, #8
 8018e2a:	e7e5      	b.n	8018df8 <_dtoa_r+0x370>
 8018e2c:	f000 80a6 	beq.w	8018f7c <_dtoa_r+0x4f4>
 8018e30:	f1ca 0600 	rsb	r6, sl, #0
 8018e34:	4ba5      	ldr	r3, [pc, #660]	; (80190cc <_dtoa_r+0x644>)
 8018e36:	4fa6      	ldr	r7, [pc, #664]	; (80190d0 <_dtoa_r+0x648>)
 8018e38:	f006 020f 	and.w	r2, r6, #15
 8018e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018e48:	f7e7 fbe6 	bl	8000618 <__aeabi_dmul>
 8018e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e50:	1136      	asrs	r6, r6, #4
 8018e52:	2300      	movs	r3, #0
 8018e54:	2502      	movs	r5, #2
 8018e56:	2e00      	cmp	r6, #0
 8018e58:	f040 8085 	bne.w	8018f66 <_dtoa_r+0x4de>
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d1d2      	bne.n	8018e06 <_dtoa_r+0x37e>
 8018e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	f000 808c 	beq.w	8018f80 <_dtoa_r+0x4f8>
 8018e68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018e6c:	4b99      	ldr	r3, [pc, #612]	; (80190d4 <_dtoa_r+0x64c>)
 8018e6e:	2200      	movs	r2, #0
 8018e70:	4630      	mov	r0, r6
 8018e72:	4639      	mov	r1, r7
 8018e74:	f7e7 fe42 	bl	8000afc <__aeabi_dcmplt>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	f000 8081 	beq.w	8018f80 <_dtoa_r+0x4f8>
 8018e7e:	9b01      	ldr	r3, [sp, #4]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d07d      	beq.n	8018f80 <_dtoa_r+0x4f8>
 8018e84:	f1b9 0f00 	cmp.w	r9, #0
 8018e88:	dd3c      	ble.n	8018f04 <_dtoa_r+0x47c>
 8018e8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8018e8e:	9307      	str	r3, [sp, #28]
 8018e90:	2200      	movs	r2, #0
 8018e92:	4b91      	ldr	r3, [pc, #580]	; (80190d8 <_dtoa_r+0x650>)
 8018e94:	4630      	mov	r0, r6
 8018e96:	4639      	mov	r1, r7
 8018e98:	f7e7 fbbe 	bl	8000618 <__aeabi_dmul>
 8018e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ea0:	3501      	adds	r5, #1
 8018ea2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018ea6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018eaa:	4628      	mov	r0, r5
 8018eac:	f7e7 fb4a 	bl	8000544 <__aeabi_i2d>
 8018eb0:	4632      	mov	r2, r6
 8018eb2:	463b      	mov	r3, r7
 8018eb4:	f7e7 fbb0 	bl	8000618 <__aeabi_dmul>
 8018eb8:	4b88      	ldr	r3, [pc, #544]	; (80190dc <_dtoa_r+0x654>)
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f7e7 f9f6 	bl	80002ac <__adddf3>
 8018ec0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ec8:	9303      	str	r3, [sp, #12]
 8018eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d15c      	bne.n	8018f8a <_dtoa_r+0x502>
 8018ed0:	4b83      	ldr	r3, [pc, #524]	; (80190e0 <_dtoa_r+0x658>)
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	4630      	mov	r0, r6
 8018ed6:	4639      	mov	r1, r7
 8018ed8:	f7e7 f9e6 	bl	80002a8 <__aeabi_dsub>
 8018edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ee0:	4606      	mov	r6, r0
 8018ee2:	460f      	mov	r7, r1
 8018ee4:	f7e7 fe28 	bl	8000b38 <__aeabi_dcmpgt>
 8018ee8:	2800      	cmp	r0, #0
 8018eea:	f040 8296 	bne.w	801941a <_dtoa_r+0x992>
 8018eee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018ef2:	4630      	mov	r0, r6
 8018ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ef8:	4639      	mov	r1, r7
 8018efa:	f7e7 fdff 	bl	8000afc <__aeabi_dcmplt>
 8018efe:	2800      	cmp	r0, #0
 8018f00:	f040 8288 	bne.w	8019414 <_dtoa_r+0x98c>
 8018f04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f2c0 8158 	blt.w	80191c4 <_dtoa_r+0x73c>
 8018f14:	f1ba 0f0e 	cmp.w	sl, #14
 8018f18:	f300 8154 	bgt.w	80191c4 <_dtoa_r+0x73c>
 8018f1c:	4b6b      	ldr	r3, [pc, #428]	; (80190cc <_dtoa_r+0x644>)
 8018f1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018f22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f280 80e3 	bge.w	80190f4 <_dtoa_r+0x66c>
 8018f2e:	9b01      	ldr	r3, [sp, #4]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	f300 80df 	bgt.w	80190f4 <_dtoa_r+0x66c>
 8018f36:	f040 826d 	bne.w	8019414 <_dtoa_r+0x98c>
 8018f3a:	4b69      	ldr	r3, [pc, #420]	; (80190e0 <_dtoa_r+0x658>)
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	4640      	mov	r0, r8
 8018f40:	4649      	mov	r1, r9
 8018f42:	f7e7 fb69 	bl	8000618 <__aeabi_dmul>
 8018f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018f4a:	f7e7 fdeb 	bl	8000b24 <__aeabi_dcmpge>
 8018f4e:	9e01      	ldr	r6, [sp, #4]
 8018f50:	4637      	mov	r7, r6
 8018f52:	2800      	cmp	r0, #0
 8018f54:	f040 8243 	bne.w	80193de <_dtoa_r+0x956>
 8018f58:	9d00      	ldr	r5, [sp, #0]
 8018f5a:	2331      	movs	r3, #49	; 0x31
 8018f5c:	f805 3b01 	strb.w	r3, [r5], #1
 8018f60:	f10a 0a01 	add.w	sl, sl, #1
 8018f64:	e23f      	b.n	80193e6 <_dtoa_r+0x95e>
 8018f66:	07f2      	lsls	r2, r6, #31
 8018f68:	d505      	bpl.n	8018f76 <_dtoa_r+0x4ee>
 8018f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f6e:	f7e7 fb53 	bl	8000618 <__aeabi_dmul>
 8018f72:	3501      	adds	r5, #1
 8018f74:	2301      	movs	r3, #1
 8018f76:	1076      	asrs	r6, r6, #1
 8018f78:	3708      	adds	r7, #8
 8018f7a:	e76c      	b.n	8018e56 <_dtoa_r+0x3ce>
 8018f7c:	2502      	movs	r5, #2
 8018f7e:	e76f      	b.n	8018e60 <_dtoa_r+0x3d8>
 8018f80:	9b01      	ldr	r3, [sp, #4]
 8018f82:	f8cd a01c 	str.w	sl, [sp, #28]
 8018f86:	930c      	str	r3, [sp, #48]	; 0x30
 8018f88:	e78d      	b.n	8018ea6 <_dtoa_r+0x41e>
 8018f8a:	9900      	ldr	r1, [sp, #0]
 8018f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f90:	4b4e      	ldr	r3, [pc, #312]	; (80190cc <_dtoa_r+0x644>)
 8018f92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f96:	4401      	add	r1, r0
 8018f98:	9102      	str	r1, [sp, #8]
 8018f9a:	9908      	ldr	r1, [sp, #32]
 8018f9c:	eeb0 8a47 	vmov.f32	s16, s14
 8018fa0:	eef0 8a67 	vmov.f32	s17, s15
 8018fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018fa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018fac:	2900      	cmp	r1, #0
 8018fae:	d045      	beq.n	801903c <_dtoa_r+0x5b4>
 8018fb0:	494c      	ldr	r1, [pc, #304]	; (80190e4 <_dtoa_r+0x65c>)
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	f7e7 fc5a 	bl	800086c <__aeabi_ddiv>
 8018fb8:	ec53 2b18 	vmov	r2, r3, d8
 8018fbc:	f7e7 f974 	bl	80002a8 <__aeabi_dsub>
 8018fc0:	9d00      	ldr	r5, [sp, #0]
 8018fc2:	ec41 0b18 	vmov	d8, r0, r1
 8018fc6:	4639      	mov	r1, r7
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f7e7 fdd5 	bl	8000b78 <__aeabi_d2iz>
 8018fce:	900c      	str	r0, [sp, #48]	; 0x30
 8018fd0:	f7e7 fab8 	bl	8000544 <__aeabi_i2d>
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	460b      	mov	r3, r1
 8018fd8:	4630      	mov	r0, r6
 8018fda:	4639      	mov	r1, r7
 8018fdc:	f7e7 f964 	bl	80002a8 <__aeabi_dsub>
 8018fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018fe2:	3330      	adds	r3, #48	; 0x30
 8018fe4:	f805 3b01 	strb.w	r3, [r5], #1
 8018fe8:	ec53 2b18 	vmov	r2, r3, d8
 8018fec:	4606      	mov	r6, r0
 8018fee:	460f      	mov	r7, r1
 8018ff0:	f7e7 fd84 	bl	8000afc <__aeabi_dcmplt>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d165      	bne.n	80190c4 <_dtoa_r+0x63c>
 8018ff8:	4632      	mov	r2, r6
 8018ffa:	463b      	mov	r3, r7
 8018ffc:	4935      	ldr	r1, [pc, #212]	; (80190d4 <_dtoa_r+0x64c>)
 8018ffe:	2000      	movs	r0, #0
 8019000:	f7e7 f952 	bl	80002a8 <__aeabi_dsub>
 8019004:	ec53 2b18 	vmov	r2, r3, d8
 8019008:	f7e7 fd78 	bl	8000afc <__aeabi_dcmplt>
 801900c:	2800      	cmp	r0, #0
 801900e:	f040 80b9 	bne.w	8019184 <_dtoa_r+0x6fc>
 8019012:	9b02      	ldr	r3, [sp, #8]
 8019014:	429d      	cmp	r5, r3
 8019016:	f43f af75 	beq.w	8018f04 <_dtoa_r+0x47c>
 801901a:	4b2f      	ldr	r3, [pc, #188]	; (80190d8 <_dtoa_r+0x650>)
 801901c:	ec51 0b18 	vmov	r0, r1, d8
 8019020:	2200      	movs	r2, #0
 8019022:	f7e7 faf9 	bl	8000618 <__aeabi_dmul>
 8019026:	4b2c      	ldr	r3, [pc, #176]	; (80190d8 <_dtoa_r+0x650>)
 8019028:	ec41 0b18 	vmov	d8, r0, r1
 801902c:	2200      	movs	r2, #0
 801902e:	4630      	mov	r0, r6
 8019030:	4639      	mov	r1, r7
 8019032:	f7e7 faf1 	bl	8000618 <__aeabi_dmul>
 8019036:	4606      	mov	r6, r0
 8019038:	460f      	mov	r7, r1
 801903a:	e7c4      	b.n	8018fc6 <_dtoa_r+0x53e>
 801903c:	ec51 0b17 	vmov	r0, r1, d7
 8019040:	f7e7 faea 	bl	8000618 <__aeabi_dmul>
 8019044:	9b02      	ldr	r3, [sp, #8]
 8019046:	9d00      	ldr	r5, [sp, #0]
 8019048:	930c      	str	r3, [sp, #48]	; 0x30
 801904a:	ec41 0b18 	vmov	d8, r0, r1
 801904e:	4639      	mov	r1, r7
 8019050:	4630      	mov	r0, r6
 8019052:	f7e7 fd91 	bl	8000b78 <__aeabi_d2iz>
 8019056:	9011      	str	r0, [sp, #68]	; 0x44
 8019058:	f7e7 fa74 	bl	8000544 <__aeabi_i2d>
 801905c:	4602      	mov	r2, r0
 801905e:	460b      	mov	r3, r1
 8019060:	4630      	mov	r0, r6
 8019062:	4639      	mov	r1, r7
 8019064:	f7e7 f920 	bl	80002a8 <__aeabi_dsub>
 8019068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801906a:	3330      	adds	r3, #48	; 0x30
 801906c:	f805 3b01 	strb.w	r3, [r5], #1
 8019070:	9b02      	ldr	r3, [sp, #8]
 8019072:	429d      	cmp	r5, r3
 8019074:	4606      	mov	r6, r0
 8019076:	460f      	mov	r7, r1
 8019078:	f04f 0200 	mov.w	r2, #0
 801907c:	d134      	bne.n	80190e8 <_dtoa_r+0x660>
 801907e:	4b19      	ldr	r3, [pc, #100]	; (80190e4 <_dtoa_r+0x65c>)
 8019080:	ec51 0b18 	vmov	r0, r1, d8
 8019084:	f7e7 f912 	bl	80002ac <__adddf3>
 8019088:	4602      	mov	r2, r0
 801908a:	460b      	mov	r3, r1
 801908c:	4630      	mov	r0, r6
 801908e:	4639      	mov	r1, r7
 8019090:	f7e7 fd52 	bl	8000b38 <__aeabi_dcmpgt>
 8019094:	2800      	cmp	r0, #0
 8019096:	d175      	bne.n	8019184 <_dtoa_r+0x6fc>
 8019098:	ec53 2b18 	vmov	r2, r3, d8
 801909c:	4911      	ldr	r1, [pc, #68]	; (80190e4 <_dtoa_r+0x65c>)
 801909e:	2000      	movs	r0, #0
 80190a0:	f7e7 f902 	bl	80002a8 <__aeabi_dsub>
 80190a4:	4602      	mov	r2, r0
 80190a6:	460b      	mov	r3, r1
 80190a8:	4630      	mov	r0, r6
 80190aa:	4639      	mov	r1, r7
 80190ac:	f7e7 fd26 	bl	8000afc <__aeabi_dcmplt>
 80190b0:	2800      	cmp	r0, #0
 80190b2:	f43f af27 	beq.w	8018f04 <_dtoa_r+0x47c>
 80190b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80190b8:	1e6b      	subs	r3, r5, #1
 80190ba:	930c      	str	r3, [sp, #48]	; 0x30
 80190bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80190c0:	2b30      	cmp	r3, #48	; 0x30
 80190c2:	d0f8      	beq.n	80190b6 <_dtoa_r+0x62e>
 80190c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80190c8:	e04a      	b.n	8019160 <_dtoa_r+0x6d8>
 80190ca:	bf00      	nop
 80190cc:	08033eb8 	.word	0x08033eb8
 80190d0:	08033e90 	.word	0x08033e90
 80190d4:	3ff00000 	.word	0x3ff00000
 80190d8:	40240000 	.word	0x40240000
 80190dc:	401c0000 	.word	0x401c0000
 80190e0:	40140000 	.word	0x40140000
 80190e4:	3fe00000 	.word	0x3fe00000
 80190e8:	4baf      	ldr	r3, [pc, #700]	; (80193a8 <_dtoa_r+0x920>)
 80190ea:	f7e7 fa95 	bl	8000618 <__aeabi_dmul>
 80190ee:	4606      	mov	r6, r0
 80190f0:	460f      	mov	r7, r1
 80190f2:	e7ac      	b.n	801904e <_dtoa_r+0x5c6>
 80190f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80190f8:	9d00      	ldr	r5, [sp, #0]
 80190fa:	4642      	mov	r2, r8
 80190fc:	464b      	mov	r3, r9
 80190fe:	4630      	mov	r0, r6
 8019100:	4639      	mov	r1, r7
 8019102:	f7e7 fbb3 	bl	800086c <__aeabi_ddiv>
 8019106:	f7e7 fd37 	bl	8000b78 <__aeabi_d2iz>
 801910a:	9002      	str	r0, [sp, #8]
 801910c:	f7e7 fa1a 	bl	8000544 <__aeabi_i2d>
 8019110:	4642      	mov	r2, r8
 8019112:	464b      	mov	r3, r9
 8019114:	f7e7 fa80 	bl	8000618 <__aeabi_dmul>
 8019118:	4602      	mov	r2, r0
 801911a:	460b      	mov	r3, r1
 801911c:	4630      	mov	r0, r6
 801911e:	4639      	mov	r1, r7
 8019120:	f7e7 f8c2 	bl	80002a8 <__aeabi_dsub>
 8019124:	9e02      	ldr	r6, [sp, #8]
 8019126:	9f01      	ldr	r7, [sp, #4]
 8019128:	3630      	adds	r6, #48	; 0x30
 801912a:	f805 6b01 	strb.w	r6, [r5], #1
 801912e:	9e00      	ldr	r6, [sp, #0]
 8019130:	1bae      	subs	r6, r5, r6
 8019132:	42b7      	cmp	r7, r6
 8019134:	4602      	mov	r2, r0
 8019136:	460b      	mov	r3, r1
 8019138:	d137      	bne.n	80191aa <_dtoa_r+0x722>
 801913a:	f7e7 f8b7 	bl	80002ac <__adddf3>
 801913e:	4642      	mov	r2, r8
 8019140:	464b      	mov	r3, r9
 8019142:	4606      	mov	r6, r0
 8019144:	460f      	mov	r7, r1
 8019146:	f7e7 fcf7 	bl	8000b38 <__aeabi_dcmpgt>
 801914a:	b9c8      	cbnz	r0, 8019180 <_dtoa_r+0x6f8>
 801914c:	4642      	mov	r2, r8
 801914e:	464b      	mov	r3, r9
 8019150:	4630      	mov	r0, r6
 8019152:	4639      	mov	r1, r7
 8019154:	f7e7 fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8019158:	b110      	cbz	r0, 8019160 <_dtoa_r+0x6d8>
 801915a:	9b02      	ldr	r3, [sp, #8]
 801915c:	07d9      	lsls	r1, r3, #31
 801915e:	d40f      	bmi.n	8019180 <_dtoa_r+0x6f8>
 8019160:	4620      	mov	r0, r4
 8019162:	4659      	mov	r1, fp
 8019164:	f001 f880 	bl	801a268 <_Bfree>
 8019168:	2300      	movs	r3, #0
 801916a:	702b      	strb	r3, [r5, #0]
 801916c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801916e:	f10a 0001 	add.w	r0, sl, #1
 8019172:	6018      	str	r0, [r3, #0]
 8019174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019176:	2b00      	cmp	r3, #0
 8019178:	f43f acd8 	beq.w	8018b2c <_dtoa_r+0xa4>
 801917c:	601d      	str	r5, [r3, #0]
 801917e:	e4d5      	b.n	8018b2c <_dtoa_r+0xa4>
 8019180:	f8cd a01c 	str.w	sl, [sp, #28]
 8019184:	462b      	mov	r3, r5
 8019186:	461d      	mov	r5, r3
 8019188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801918c:	2a39      	cmp	r2, #57	; 0x39
 801918e:	d108      	bne.n	80191a2 <_dtoa_r+0x71a>
 8019190:	9a00      	ldr	r2, [sp, #0]
 8019192:	429a      	cmp	r2, r3
 8019194:	d1f7      	bne.n	8019186 <_dtoa_r+0x6fe>
 8019196:	9a07      	ldr	r2, [sp, #28]
 8019198:	9900      	ldr	r1, [sp, #0]
 801919a:	3201      	adds	r2, #1
 801919c:	9207      	str	r2, [sp, #28]
 801919e:	2230      	movs	r2, #48	; 0x30
 80191a0:	700a      	strb	r2, [r1, #0]
 80191a2:	781a      	ldrb	r2, [r3, #0]
 80191a4:	3201      	adds	r2, #1
 80191a6:	701a      	strb	r2, [r3, #0]
 80191a8:	e78c      	b.n	80190c4 <_dtoa_r+0x63c>
 80191aa:	4b7f      	ldr	r3, [pc, #508]	; (80193a8 <_dtoa_r+0x920>)
 80191ac:	2200      	movs	r2, #0
 80191ae:	f7e7 fa33 	bl	8000618 <__aeabi_dmul>
 80191b2:	2200      	movs	r2, #0
 80191b4:	2300      	movs	r3, #0
 80191b6:	4606      	mov	r6, r0
 80191b8:	460f      	mov	r7, r1
 80191ba:	f7e7 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80191be:	2800      	cmp	r0, #0
 80191c0:	d09b      	beq.n	80190fa <_dtoa_r+0x672>
 80191c2:	e7cd      	b.n	8019160 <_dtoa_r+0x6d8>
 80191c4:	9a08      	ldr	r2, [sp, #32]
 80191c6:	2a00      	cmp	r2, #0
 80191c8:	f000 80c4 	beq.w	8019354 <_dtoa_r+0x8cc>
 80191cc:	9a05      	ldr	r2, [sp, #20]
 80191ce:	2a01      	cmp	r2, #1
 80191d0:	f300 80a8 	bgt.w	8019324 <_dtoa_r+0x89c>
 80191d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80191d6:	2a00      	cmp	r2, #0
 80191d8:	f000 80a0 	beq.w	801931c <_dtoa_r+0x894>
 80191dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80191e0:	9e06      	ldr	r6, [sp, #24]
 80191e2:	4645      	mov	r5, r8
 80191e4:	9a04      	ldr	r2, [sp, #16]
 80191e6:	2101      	movs	r1, #1
 80191e8:	441a      	add	r2, r3
 80191ea:	4620      	mov	r0, r4
 80191ec:	4498      	add	r8, r3
 80191ee:	9204      	str	r2, [sp, #16]
 80191f0:	f001 f940 	bl	801a474 <__i2b>
 80191f4:	4607      	mov	r7, r0
 80191f6:	2d00      	cmp	r5, #0
 80191f8:	dd0b      	ble.n	8019212 <_dtoa_r+0x78a>
 80191fa:	9b04      	ldr	r3, [sp, #16]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	dd08      	ble.n	8019212 <_dtoa_r+0x78a>
 8019200:	42ab      	cmp	r3, r5
 8019202:	9a04      	ldr	r2, [sp, #16]
 8019204:	bfa8      	it	ge
 8019206:	462b      	movge	r3, r5
 8019208:	eba8 0803 	sub.w	r8, r8, r3
 801920c:	1aed      	subs	r5, r5, r3
 801920e:	1ad3      	subs	r3, r2, r3
 8019210:	9304      	str	r3, [sp, #16]
 8019212:	9b06      	ldr	r3, [sp, #24]
 8019214:	b1fb      	cbz	r3, 8019256 <_dtoa_r+0x7ce>
 8019216:	9b08      	ldr	r3, [sp, #32]
 8019218:	2b00      	cmp	r3, #0
 801921a:	f000 809f 	beq.w	801935c <_dtoa_r+0x8d4>
 801921e:	2e00      	cmp	r6, #0
 8019220:	dd11      	ble.n	8019246 <_dtoa_r+0x7be>
 8019222:	4639      	mov	r1, r7
 8019224:	4632      	mov	r2, r6
 8019226:	4620      	mov	r0, r4
 8019228:	f001 f9e0 	bl	801a5ec <__pow5mult>
 801922c:	465a      	mov	r2, fp
 801922e:	4601      	mov	r1, r0
 8019230:	4607      	mov	r7, r0
 8019232:	4620      	mov	r0, r4
 8019234:	f001 f934 	bl	801a4a0 <__multiply>
 8019238:	4659      	mov	r1, fp
 801923a:	9007      	str	r0, [sp, #28]
 801923c:	4620      	mov	r0, r4
 801923e:	f001 f813 	bl	801a268 <_Bfree>
 8019242:	9b07      	ldr	r3, [sp, #28]
 8019244:	469b      	mov	fp, r3
 8019246:	9b06      	ldr	r3, [sp, #24]
 8019248:	1b9a      	subs	r2, r3, r6
 801924a:	d004      	beq.n	8019256 <_dtoa_r+0x7ce>
 801924c:	4659      	mov	r1, fp
 801924e:	4620      	mov	r0, r4
 8019250:	f001 f9cc 	bl	801a5ec <__pow5mult>
 8019254:	4683      	mov	fp, r0
 8019256:	2101      	movs	r1, #1
 8019258:	4620      	mov	r0, r4
 801925a:	f001 f90b 	bl	801a474 <__i2b>
 801925e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019260:	2b00      	cmp	r3, #0
 8019262:	4606      	mov	r6, r0
 8019264:	dd7c      	ble.n	8019360 <_dtoa_r+0x8d8>
 8019266:	461a      	mov	r2, r3
 8019268:	4601      	mov	r1, r0
 801926a:	4620      	mov	r0, r4
 801926c:	f001 f9be 	bl	801a5ec <__pow5mult>
 8019270:	9b05      	ldr	r3, [sp, #20]
 8019272:	2b01      	cmp	r3, #1
 8019274:	4606      	mov	r6, r0
 8019276:	dd76      	ble.n	8019366 <_dtoa_r+0x8de>
 8019278:	2300      	movs	r3, #0
 801927a:	9306      	str	r3, [sp, #24]
 801927c:	6933      	ldr	r3, [r6, #16]
 801927e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019282:	6918      	ldr	r0, [r3, #16]
 8019284:	f001 f8a6 	bl	801a3d4 <__hi0bits>
 8019288:	f1c0 0020 	rsb	r0, r0, #32
 801928c:	9b04      	ldr	r3, [sp, #16]
 801928e:	4418      	add	r0, r3
 8019290:	f010 001f 	ands.w	r0, r0, #31
 8019294:	f000 8086 	beq.w	80193a4 <_dtoa_r+0x91c>
 8019298:	f1c0 0320 	rsb	r3, r0, #32
 801929c:	2b04      	cmp	r3, #4
 801929e:	dd7f      	ble.n	80193a0 <_dtoa_r+0x918>
 80192a0:	f1c0 001c 	rsb	r0, r0, #28
 80192a4:	9b04      	ldr	r3, [sp, #16]
 80192a6:	4403      	add	r3, r0
 80192a8:	4480      	add	r8, r0
 80192aa:	4405      	add	r5, r0
 80192ac:	9304      	str	r3, [sp, #16]
 80192ae:	f1b8 0f00 	cmp.w	r8, #0
 80192b2:	dd05      	ble.n	80192c0 <_dtoa_r+0x838>
 80192b4:	4659      	mov	r1, fp
 80192b6:	4642      	mov	r2, r8
 80192b8:	4620      	mov	r0, r4
 80192ba:	f001 f9f1 	bl	801a6a0 <__lshift>
 80192be:	4683      	mov	fp, r0
 80192c0:	9b04      	ldr	r3, [sp, #16]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	dd05      	ble.n	80192d2 <_dtoa_r+0x84a>
 80192c6:	4631      	mov	r1, r6
 80192c8:	461a      	mov	r2, r3
 80192ca:	4620      	mov	r0, r4
 80192cc:	f001 f9e8 	bl	801a6a0 <__lshift>
 80192d0:	4606      	mov	r6, r0
 80192d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d069      	beq.n	80193ac <_dtoa_r+0x924>
 80192d8:	4631      	mov	r1, r6
 80192da:	4658      	mov	r0, fp
 80192dc:	f001 fa4c 	bl	801a778 <__mcmp>
 80192e0:	2800      	cmp	r0, #0
 80192e2:	da63      	bge.n	80193ac <_dtoa_r+0x924>
 80192e4:	2300      	movs	r3, #0
 80192e6:	4659      	mov	r1, fp
 80192e8:	220a      	movs	r2, #10
 80192ea:	4620      	mov	r0, r4
 80192ec:	f000 ffde 	bl	801a2ac <__multadd>
 80192f0:	9b08      	ldr	r3, [sp, #32]
 80192f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80192f6:	4683      	mov	fp, r0
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	f000 818f 	beq.w	801961c <_dtoa_r+0xb94>
 80192fe:	4639      	mov	r1, r7
 8019300:	2300      	movs	r3, #0
 8019302:	220a      	movs	r2, #10
 8019304:	4620      	mov	r0, r4
 8019306:	f000 ffd1 	bl	801a2ac <__multadd>
 801930a:	f1b9 0f00 	cmp.w	r9, #0
 801930e:	4607      	mov	r7, r0
 8019310:	f300 808e 	bgt.w	8019430 <_dtoa_r+0x9a8>
 8019314:	9b05      	ldr	r3, [sp, #20]
 8019316:	2b02      	cmp	r3, #2
 8019318:	dc50      	bgt.n	80193bc <_dtoa_r+0x934>
 801931a:	e089      	b.n	8019430 <_dtoa_r+0x9a8>
 801931c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801931e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019322:	e75d      	b.n	80191e0 <_dtoa_r+0x758>
 8019324:	9b01      	ldr	r3, [sp, #4]
 8019326:	1e5e      	subs	r6, r3, #1
 8019328:	9b06      	ldr	r3, [sp, #24]
 801932a:	42b3      	cmp	r3, r6
 801932c:	bfbf      	itttt	lt
 801932e:	9b06      	ldrlt	r3, [sp, #24]
 8019330:	9606      	strlt	r6, [sp, #24]
 8019332:	1af2      	sublt	r2, r6, r3
 8019334:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019336:	bfb6      	itet	lt
 8019338:	189b      	addlt	r3, r3, r2
 801933a:	1b9e      	subge	r6, r3, r6
 801933c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801933e:	9b01      	ldr	r3, [sp, #4]
 8019340:	bfb8      	it	lt
 8019342:	2600      	movlt	r6, #0
 8019344:	2b00      	cmp	r3, #0
 8019346:	bfb5      	itete	lt
 8019348:	eba8 0503 	sublt.w	r5, r8, r3
 801934c:	9b01      	ldrge	r3, [sp, #4]
 801934e:	2300      	movlt	r3, #0
 8019350:	4645      	movge	r5, r8
 8019352:	e747      	b.n	80191e4 <_dtoa_r+0x75c>
 8019354:	9e06      	ldr	r6, [sp, #24]
 8019356:	9f08      	ldr	r7, [sp, #32]
 8019358:	4645      	mov	r5, r8
 801935a:	e74c      	b.n	80191f6 <_dtoa_r+0x76e>
 801935c:	9a06      	ldr	r2, [sp, #24]
 801935e:	e775      	b.n	801924c <_dtoa_r+0x7c4>
 8019360:	9b05      	ldr	r3, [sp, #20]
 8019362:	2b01      	cmp	r3, #1
 8019364:	dc18      	bgt.n	8019398 <_dtoa_r+0x910>
 8019366:	9b02      	ldr	r3, [sp, #8]
 8019368:	b9b3      	cbnz	r3, 8019398 <_dtoa_r+0x910>
 801936a:	9b03      	ldr	r3, [sp, #12]
 801936c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019370:	b9a3      	cbnz	r3, 801939c <_dtoa_r+0x914>
 8019372:	9b03      	ldr	r3, [sp, #12]
 8019374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019378:	0d1b      	lsrs	r3, r3, #20
 801937a:	051b      	lsls	r3, r3, #20
 801937c:	b12b      	cbz	r3, 801938a <_dtoa_r+0x902>
 801937e:	9b04      	ldr	r3, [sp, #16]
 8019380:	3301      	adds	r3, #1
 8019382:	9304      	str	r3, [sp, #16]
 8019384:	f108 0801 	add.w	r8, r8, #1
 8019388:	2301      	movs	r3, #1
 801938a:	9306      	str	r3, [sp, #24]
 801938c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801938e:	2b00      	cmp	r3, #0
 8019390:	f47f af74 	bne.w	801927c <_dtoa_r+0x7f4>
 8019394:	2001      	movs	r0, #1
 8019396:	e779      	b.n	801928c <_dtoa_r+0x804>
 8019398:	2300      	movs	r3, #0
 801939a:	e7f6      	b.n	801938a <_dtoa_r+0x902>
 801939c:	9b02      	ldr	r3, [sp, #8]
 801939e:	e7f4      	b.n	801938a <_dtoa_r+0x902>
 80193a0:	d085      	beq.n	80192ae <_dtoa_r+0x826>
 80193a2:	4618      	mov	r0, r3
 80193a4:	301c      	adds	r0, #28
 80193a6:	e77d      	b.n	80192a4 <_dtoa_r+0x81c>
 80193a8:	40240000 	.word	0x40240000
 80193ac:	9b01      	ldr	r3, [sp, #4]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	dc38      	bgt.n	8019424 <_dtoa_r+0x99c>
 80193b2:	9b05      	ldr	r3, [sp, #20]
 80193b4:	2b02      	cmp	r3, #2
 80193b6:	dd35      	ble.n	8019424 <_dtoa_r+0x99c>
 80193b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80193bc:	f1b9 0f00 	cmp.w	r9, #0
 80193c0:	d10d      	bne.n	80193de <_dtoa_r+0x956>
 80193c2:	4631      	mov	r1, r6
 80193c4:	464b      	mov	r3, r9
 80193c6:	2205      	movs	r2, #5
 80193c8:	4620      	mov	r0, r4
 80193ca:	f000 ff6f 	bl	801a2ac <__multadd>
 80193ce:	4601      	mov	r1, r0
 80193d0:	4606      	mov	r6, r0
 80193d2:	4658      	mov	r0, fp
 80193d4:	f001 f9d0 	bl	801a778 <__mcmp>
 80193d8:	2800      	cmp	r0, #0
 80193da:	f73f adbd 	bgt.w	8018f58 <_dtoa_r+0x4d0>
 80193de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193e0:	9d00      	ldr	r5, [sp, #0]
 80193e2:	ea6f 0a03 	mvn.w	sl, r3
 80193e6:	f04f 0800 	mov.w	r8, #0
 80193ea:	4631      	mov	r1, r6
 80193ec:	4620      	mov	r0, r4
 80193ee:	f000 ff3b 	bl	801a268 <_Bfree>
 80193f2:	2f00      	cmp	r7, #0
 80193f4:	f43f aeb4 	beq.w	8019160 <_dtoa_r+0x6d8>
 80193f8:	f1b8 0f00 	cmp.w	r8, #0
 80193fc:	d005      	beq.n	801940a <_dtoa_r+0x982>
 80193fe:	45b8      	cmp	r8, r7
 8019400:	d003      	beq.n	801940a <_dtoa_r+0x982>
 8019402:	4641      	mov	r1, r8
 8019404:	4620      	mov	r0, r4
 8019406:	f000 ff2f 	bl	801a268 <_Bfree>
 801940a:	4639      	mov	r1, r7
 801940c:	4620      	mov	r0, r4
 801940e:	f000 ff2b 	bl	801a268 <_Bfree>
 8019412:	e6a5      	b.n	8019160 <_dtoa_r+0x6d8>
 8019414:	2600      	movs	r6, #0
 8019416:	4637      	mov	r7, r6
 8019418:	e7e1      	b.n	80193de <_dtoa_r+0x956>
 801941a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801941c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019420:	4637      	mov	r7, r6
 8019422:	e599      	b.n	8018f58 <_dtoa_r+0x4d0>
 8019424:	9b08      	ldr	r3, [sp, #32]
 8019426:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801942a:	2b00      	cmp	r3, #0
 801942c:	f000 80fd 	beq.w	801962a <_dtoa_r+0xba2>
 8019430:	2d00      	cmp	r5, #0
 8019432:	dd05      	ble.n	8019440 <_dtoa_r+0x9b8>
 8019434:	4639      	mov	r1, r7
 8019436:	462a      	mov	r2, r5
 8019438:	4620      	mov	r0, r4
 801943a:	f001 f931 	bl	801a6a0 <__lshift>
 801943e:	4607      	mov	r7, r0
 8019440:	9b06      	ldr	r3, [sp, #24]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d05c      	beq.n	8019500 <_dtoa_r+0xa78>
 8019446:	6879      	ldr	r1, [r7, #4]
 8019448:	4620      	mov	r0, r4
 801944a:	f000 fecd 	bl	801a1e8 <_Balloc>
 801944e:	4605      	mov	r5, r0
 8019450:	b928      	cbnz	r0, 801945e <_dtoa_r+0x9d6>
 8019452:	4b80      	ldr	r3, [pc, #512]	; (8019654 <_dtoa_r+0xbcc>)
 8019454:	4602      	mov	r2, r0
 8019456:	f240 21ea 	movw	r1, #746	; 0x2ea
 801945a:	f7ff bb2e 	b.w	8018aba <_dtoa_r+0x32>
 801945e:	693a      	ldr	r2, [r7, #16]
 8019460:	3202      	adds	r2, #2
 8019462:	0092      	lsls	r2, r2, #2
 8019464:	f107 010c 	add.w	r1, r7, #12
 8019468:	300c      	adds	r0, #12
 801946a:	f7fd fc63 	bl	8016d34 <memcpy>
 801946e:	2201      	movs	r2, #1
 8019470:	4629      	mov	r1, r5
 8019472:	4620      	mov	r0, r4
 8019474:	f001 f914 	bl	801a6a0 <__lshift>
 8019478:	9b00      	ldr	r3, [sp, #0]
 801947a:	3301      	adds	r3, #1
 801947c:	9301      	str	r3, [sp, #4]
 801947e:	9b00      	ldr	r3, [sp, #0]
 8019480:	444b      	add	r3, r9
 8019482:	9307      	str	r3, [sp, #28]
 8019484:	9b02      	ldr	r3, [sp, #8]
 8019486:	f003 0301 	and.w	r3, r3, #1
 801948a:	46b8      	mov	r8, r7
 801948c:	9306      	str	r3, [sp, #24]
 801948e:	4607      	mov	r7, r0
 8019490:	9b01      	ldr	r3, [sp, #4]
 8019492:	4631      	mov	r1, r6
 8019494:	3b01      	subs	r3, #1
 8019496:	4658      	mov	r0, fp
 8019498:	9302      	str	r3, [sp, #8]
 801949a:	f7ff fa67 	bl	801896c <quorem>
 801949e:	4603      	mov	r3, r0
 80194a0:	3330      	adds	r3, #48	; 0x30
 80194a2:	9004      	str	r0, [sp, #16]
 80194a4:	4641      	mov	r1, r8
 80194a6:	4658      	mov	r0, fp
 80194a8:	9308      	str	r3, [sp, #32]
 80194aa:	f001 f965 	bl	801a778 <__mcmp>
 80194ae:	463a      	mov	r2, r7
 80194b0:	4681      	mov	r9, r0
 80194b2:	4631      	mov	r1, r6
 80194b4:	4620      	mov	r0, r4
 80194b6:	f001 f97b 	bl	801a7b0 <__mdiff>
 80194ba:	68c2      	ldr	r2, [r0, #12]
 80194bc:	9b08      	ldr	r3, [sp, #32]
 80194be:	4605      	mov	r5, r0
 80194c0:	bb02      	cbnz	r2, 8019504 <_dtoa_r+0xa7c>
 80194c2:	4601      	mov	r1, r0
 80194c4:	4658      	mov	r0, fp
 80194c6:	f001 f957 	bl	801a778 <__mcmp>
 80194ca:	9b08      	ldr	r3, [sp, #32]
 80194cc:	4602      	mov	r2, r0
 80194ce:	4629      	mov	r1, r5
 80194d0:	4620      	mov	r0, r4
 80194d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80194d6:	f000 fec7 	bl	801a268 <_Bfree>
 80194da:	9b05      	ldr	r3, [sp, #20]
 80194dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194de:	9d01      	ldr	r5, [sp, #4]
 80194e0:	ea43 0102 	orr.w	r1, r3, r2
 80194e4:	9b06      	ldr	r3, [sp, #24]
 80194e6:	430b      	orrs	r3, r1
 80194e8:	9b08      	ldr	r3, [sp, #32]
 80194ea:	d10d      	bne.n	8019508 <_dtoa_r+0xa80>
 80194ec:	2b39      	cmp	r3, #57	; 0x39
 80194ee:	d029      	beq.n	8019544 <_dtoa_r+0xabc>
 80194f0:	f1b9 0f00 	cmp.w	r9, #0
 80194f4:	dd01      	ble.n	80194fa <_dtoa_r+0xa72>
 80194f6:	9b04      	ldr	r3, [sp, #16]
 80194f8:	3331      	adds	r3, #49	; 0x31
 80194fa:	9a02      	ldr	r2, [sp, #8]
 80194fc:	7013      	strb	r3, [r2, #0]
 80194fe:	e774      	b.n	80193ea <_dtoa_r+0x962>
 8019500:	4638      	mov	r0, r7
 8019502:	e7b9      	b.n	8019478 <_dtoa_r+0x9f0>
 8019504:	2201      	movs	r2, #1
 8019506:	e7e2      	b.n	80194ce <_dtoa_r+0xa46>
 8019508:	f1b9 0f00 	cmp.w	r9, #0
 801950c:	db06      	blt.n	801951c <_dtoa_r+0xa94>
 801950e:	9905      	ldr	r1, [sp, #20]
 8019510:	ea41 0909 	orr.w	r9, r1, r9
 8019514:	9906      	ldr	r1, [sp, #24]
 8019516:	ea59 0101 	orrs.w	r1, r9, r1
 801951a:	d120      	bne.n	801955e <_dtoa_r+0xad6>
 801951c:	2a00      	cmp	r2, #0
 801951e:	ddec      	ble.n	80194fa <_dtoa_r+0xa72>
 8019520:	4659      	mov	r1, fp
 8019522:	2201      	movs	r2, #1
 8019524:	4620      	mov	r0, r4
 8019526:	9301      	str	r3, [sp, #4]
 8019528:	f001 f8ba 	bl	801a6a0 <__lshift>
 801952c:	4631      	mov	r1, r6
 801952e:	4683      	mov	fp, r0
 8019530:	f001 f922 	bl	801a778 <__mcmp>
 8019534:	2800      	cmp	r0, #0
 8019536:	9b01      	ldr	r3, [sp, #4]
 8019538:	dc02      	bgt.n	8019540 <_dtoa_r+0xab8>
 801953a:	d1de      	bne.n	80194fa <_dtoa_r+0xa72>
 801953c:	07da      	lsls	r2, r3, #31
 801953e:	d5dc      	bpl.n	80194fa <_dtoa_r+0xa72>
 8019540:	2b39      	cmp	r3, #57	; 0x39
 8019542:	d1d8      	bne.n	80194f6 <_dtoa_r+0xa6e>
 8019544:	9a02      	ldr	r2, [sp, #8]
 8019546:	2339      	movs	r3, #57	; 0x39
 8019548:	7013      	strb	r3, [r2, #0]
 801954a:	462b      	mov	r3, r5
 801954c:	461d      	mov	r5, r3
 801954e:	3b01      	subs	r3, #1
 8019550:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019554:	2a39      	cmp	r2, #57	; 0x39
 8019556:	d050      	beq.n	80195fa <_dtoa_r+0xb72>
 8019558:	3201      	adds	r2, #1
 801955a:	701a      	strb	r2, [r3, #0]
 801955c:	e745      	b.n	80193ea <_dtoa_r+0x962>
 801955e:	2a00      	cmp	r2, #0
 8019560:	dd03      	ble.n	801956a <_dtoa_r+0xae2>
 8019562:	2b39      	cmp	r3, #57	; 0x39
 8019564:	d0ee      	beq.n	8019544 <_dtoa_r+0xabc>
 8019566:	3301      	adds	r3, #1
 8019568:	e7c7      	b.n	80194fa <_dtoa_r+0xa72>
 801956a:	9a01      	ldr	r2, [sp, #4]
 801956c:	9907      	ldr	r1, [sp, #28]
 801956e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019572:	428a      	cmp	r2, r1
 8019574:	d02a      	beq.n	80195cc <_dtoa_r+0xb44>
 8019576:	4659      	mov	r1, fp
 8019578:	2300      	movs	r3, #0
 801957a:	220a      	movs	r2, #10
 801957c:	4620      	mov	r0, r4
 801957e:	f000 fe95 	bl	801a2ac <__multadd>
 8019582:	45b8      	cmp	r8, r7
 8019584:	4683      	mov	fp, r0
 8019586:	f04f 0300 	mov.w	r3, #0
 801958a:	f04f 020a 	mov.w	r2, #10
 801958e:	4641      	mov	r1, r8
 8019590:	4620      	mov	r0, r4
 8019592:	d107      	bne.n	80195a4 <_dtoa_r+0xb1c>
 8019594:	f000 fe8a 	bl	801a2ac <__multadd>
 8019598:	4680      	mov	r8, r0
 801959a:	4607      	mov	r7, r0
 801959c:	9b01      	ldr	r3, [sp, #4]
 801959e:	3301      	adds	r3, #1
 80195a0:	9301      	str	r3, [sp, #4]
 80195a2:	e775      	b.n	8019490 <_dtoa_r+0xa08>
 80195a4:	f000 fe82 	bl	801a2ac <__multadd>
 80195a8:	4639      	mov	r1, r7
 80195aa:	4680      	mov	r8, r0
 80195ac:	2300      	movs	r3, #0
 80195ae:	220a      	movs	r2, #10
 80195b0:	4620      	mov	r0, r4
 80195b2:	f000 fe7b 	bl	801a2ac <__multadd>
 80195b6:	4607      	mov	r7, r0
 80195b8:	e7f0      	b.n	801959c <_dtoa_r+0xb14>
 80195ba:	f1b9 0f00 	cmp.w	r9, #0
 80195be:	9a00      	ldr	r2, [sp, #0]
 80195c0:	bfcc      	ite	gt
 80195c2:	464d      	movgt	r5, r9
 80195c4:	2501      	movle	r5, #1
 80195c6:	4415      	add	r5, r2
 80195c8:	f04f 0800 	mov.w	r8, #0
 80195cc:	4659      	mov	r1, fp
 80195ce:	2201      	movs	r2, #1
 80195d0:	4620      	mov	r0, r4
 80195d2:	9301      	str	r3, [sp, #4]
 80195d4:	f001 f864 	bl	801a6a0 <__lshift>
 80195d8:	4631      	mov	r1, r6
 80195da:	4683      	mov	fp, r0
 80195dc:	f001 f8cc 	bl	801a778 <__mcmp>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	dcb2      	bgt.n	801954a <_dtoa_r+0xac2>
 80195e4:	d102      	bne.n	80195ec <_dtoa_r+0xb64>
 80195e6:	9b01      	ldr	r3, [sp, #4]
 80195e8:	07db      	lsls	r3, r3, #31
 80195ea:	d4ae      	bmi.n	801954a <_dtoa_r+0xac2>
 80195ec:	462b      	mov	r3, r5
 80195ee:	461d      	mov	r5, r3
 80195f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195f4:	2a30      	cmp	r2, #48	; 0x30
 80195f6:	d0fa      	beq.n	80195ee <_dtoa_r+0xb66>
 80195f8:	e6f7      	b.n	80193ea <_dtoa_r+0x962>
 80195fa:	9a00      	ldr	r2, [sp, #0]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d1a5      	bne.n	801954c <_dtoa_r+0xac4>
 8019600:	f10a 0a01 	add.w	sl, sl, #1
 8019604:	2331      	movs	r3, #49	; 0x31
 8019606:	e779      	b.n	80194fc <_dtoa_r+0xa74>
 8019608:	4b13      	ldr	r3, [pc, #76]	; (8019658 <_dtoa_r+0xbd0>)
 801960a:	f7ff baaf 	b.w	8018b6c <_dtoa_r+0xe4>
 801960e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019610:	2b00      	cmp	r3, #0
 8019612:	f47f aa86 	bne.w	8018b22 <_dtoa_r+0x9a>
 8019616:	4b11      	ldr	r3, [pc, #68]	; (801965c <_dtoa_r+0xbd4>)
 8019618:	f7ff baa8 	b.w	8018b6c <_dtoa_r+0xe4>
 801961c:	f1b9 0f00 	cmp.w	r9, #0
 8019620:	dc03      	bgt.n	801962a <_dtoa_r+0xba2>
 8019622:	9b05      	ldr	r3, [sp, #20]
 8019624:	2b02      	cmp	r3, #2
 8019626:	f73f aec9 	bgt.w	80193bc <_dtoa_r+0x934>
 801962a:	9d00      	ldr	r5, [sp, #0]
 801962c:	4631      	mov	r1, r6
 801962e:	4658      	mov	r0, fp
 8019630:	f7ff f99c 	bl	801896c <quorem>
 8019634:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019638:	f805 3b01 	strb.w	r3, [r5], #1
 801963c:	9a00      	ldr	r2, [sp, #0]
 801963e:	1aaa      	subs	r2, r5, r2
 8019640:	4591      	cmp	r9, r2
 8019642:	ddba      	ble.n	80195ba <_dtoa_r+0xb32>
 8019644:	4659      	mov	r1, fp
 8019646:	2300      	movs	r3, #0
 8019648:	220a      	movs	r2, #10
 801964a:	4620      	mov	r0, r4
 801964c:	f000 fe2e 	bl	801a2ac <__multadd>
 8019650:	4683      	mov	fp, r0
 8019652:	e7eb      	b.n	801962c <_dtoa_r+0xba4>
 8019654:	08033d39 	.word	0x08033d39
 8019658:	08033b44 	.word	0x08033b44
 801965c:	08033ccd 	.word	0x08033ccd

08019660 <__errno>:
 8019660:	4b01      	ldr	r3, [pc, #4]	; (8019668 <__errno+0x8>)
 8019662:	6818      	ldr	r0, [r3, #0]
 8019664:	4770      	bx	lr
 8019666:	bf00      	nop
 8019668:	200005cc 	.word	0x200005cc

0801966c <__sflush_r>:
 801966c:	898a      	ldrh	r2, [r1, #12]
 801966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019672:	4605      	mov	r5, r0
 8019674:	0710      	lsls	r0, r2, #28
 8019676:	460c      	mov	r4, r1
 8019678:	d458      	bmi.n	801972c <__sflush_r+0xc0>
 801967a:	684b      	ldr	r3, [r1, #4]
 801967c:	2b00      	cmp	r3, #0
 801967e:	dc05      	bgt.n	801968c <__sflush_r+0x20>
 8019680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019682:	2b00      	cmp	r3, #0
 8019684:	dc02      	bgt.n	801968c <__sflush_r+0x20>
 8019686:	2000      	movs	r0, #0
 8019688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801968c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801968e:	2e00      	cmp	r6, #0
 8019690:	d0f9      	beq.n	8019686 <__sflush_r+0x1a>
 8019692:	2300      	movs	r3, #0
 8019694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019698:	682f      	ldr	r7, [r5, #0]
 801969a:	602b      	str	r3, [r5, #0]
 801969c:	d032      	beq.n	8019704 <__sflush_r+0x98>
 801969e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80196a0:	89a3      	ldrh	r3, [r4, #12]
 80196a2:	075a      	lsls	r2, r3, #29
 80196a4:	d505      	bpl.n	80196b2 <__sflush_r+0x46>
 80196a6:	6863      	ldr	r3, [r4, #4]
 80196a8:	1ac0      	subs	r0, r0, r3
 80196aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80196ac:	b10b      	cbz	r3, 80196b2 <__sflush_r+0x46>
 80196ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80196b0:	1ac0      	subs	r0, r0, r3
 80196b2:	2300      	movs	r3, #0
 80196b4:	4602      	mov	r2, r0
 80196b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80196b8:	6a21      	ldr	r1, [r4, #32]
 80196ba:	4628      	mov	r0, r5
 80196bc:	47b0      	blx	r6
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	d106      	bne.n	80196d2 <__sflush_r+0x66>
 80196c4:	6829      	ldr	r1, [r5, #0]
 80196c6:	291d      	cmp	r1, #29
 80196c8:	d82c      	bhi.n	8019724 <__sflush_r+0xb8>
 80196ca:	4a2a      	ldr	r2, [pc, #168]	; (8019774 <__sflush_r+0x108>)
 80196cc:	40ca      	lsrs	r2, r1
 80196ce:	07d6      	lsls	r6, r2, #31
 80196d0:	d528      	bpl.n	8019724 <__sflush_r+0xb8>
 80196d2:	2200      	movs	r2, #0
 80196d4:	6062      	str	r2, [r4, #4]
 80196d6:	04d9      	lsls	r1, r3, #19
 80196d8:	6922      	ldr	r2, [r4, #16]
 80196da:	6022      	str	r2, [r4, #0]
 80196dc:	d504      	bpl.n	80196e8 <__sflush_r+0x7c>
 80196de:	1c42      	adds	r2, r0, #1
 80196e0:	d101      	bne.n	80196e6 <__sflush_r+0x7a>
 80196e2:	682b      	ldr	r3, [r5, #0]
 80196e4:	b903      	cbnz	r3, 80196e8 <__sflush_r+0x7c>
 80196e6:	6560      	str	r0, [r4, #84]	; 0x54
 80196e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196ea:	602f      	str	r7, [r5, #0]
 80196ec:	2900      	cmp	r1, #0
 80196ee:	d0ca      	beq.n	8019686 <__sflush_r+0x1a>
 80196f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196f4:	4299      	cmp	r1, r3
 80196f6:	d002      	beq.n	80196fe <__sflush_r+0x92>
 80196f8:	4628      	mov	r0, r5
 80196fa:	f001 fa3f 	bl	801ab7c <_free_r>
 80196fe:	2000      	movs	r0, #0
 8019700:	6360      	str	r0, [r4, #52]	; 0x34
 8019702:	e7c1      	b.n	8019688 <__sflush_r+0x1c>
 8019704:	6a21      	ldr	r1, [r4, #32]
 8019706:	2301      	movs	r3, #1
 8019708:	4628      	mov	r0, r5
 801970a:	47b0      	blx	r6
 801970c:	1c41      	adds	r1, r0, #1
 801970e:	d1c7      	bne.n	80196a0 <__sflush_r+0x34>
 8019710:	682b      	ldr	r3, [r5, #0]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d0c4      	beq.n	80196a0 <__sflush_r+0x34>
 8019716:	2b1d      	cmp	r3, #29
 8019718:	d001      	beq.n	801971e <__sflush_r+0xb2>
 801971a:	2b16      	cmp	r3, #22
 801971c:	d101      	bne.n	8019722 <__sflush_r+0xb6>
 801971e:	602f      	str	r7, [r5, #0]
 8019720:	e7b1      	b.n	8019686 <__sflush_r+0x1a>
 8019722:	89a3      	ldrh	r3, [r4, #12]
 8019724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019728:	81a3      	strh	r3, [r4, #12]
 801972a:	e7ad      	b.n	8019688 <__sflush_r+0x1c>
 801972c:	690f      	ldr	r7, [r1, #16]
 801972e:	2f00      	cmp	r7, #0
 8019730:	d0a9      	beq.n	8019686 <__sflush_r+0x1a>
 8019732:	0793      	lsls	r3, r2, #30
 8019734:	680e      	ldr	r6, [r1, #0]
 8019736:	bf08      	it	eq
 8019738:	694b      	ldreq	r3, [r1, #20]
 801973a:	600f      	str	r7, [r1, #0]
 801973c:	bf18      	it	ne
 801973e:	2300      	movne	r3, #0
 8019740:	eba6 0807 	sub.w	r8, r6, r7
 8019744:	608b      	str	r3, [r1, #8]
 8019746:	f1b8 0f00 	cmp.w	r8, #0
 801974a:	dd9c      	ble.n	8019686 <__sflush_r+0x1a>
 801974c:	6a21      	ldr	r1, [r4, #32]
 801974e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019750:	4643      	mov	r3, r8
 8019752:	463a      	mov	r2, r7
 8019754:	4628      	mov	r0, r5
 8019756:	47b0      	blx	r6
 8019758:	2800      	cmp	r0, #0
 801975a:	dc06      	bgt.n	801976a <__sflush_r+0xfe>
 801975c:	89a3      	ldrh	r3, [r4, #12]
 801975e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019762:	81a3      	strh	r3, [r4, #12]
 8019764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019768:	e78e      	b.n	8019688 <__sflush_r+0x1c>
 801976a:	4407      	add	r7, r0
 801976c:	eba8 0800 	sub.w	r8, r8, r0
 8019770:	e7e9      	b.n	8019746 <__sflush_r+0xda>
 8019772:	bf00      	nop
 8019774:	20400001 	.word	0x20400001

08019778 <_fflush_r>:
 8019778:	b538      	push	{r3, r4, r5, lr}
 801977a:	690b      	ldr	r3, [r1, #16]
 801977c:	4605      	mov	r5, r0
 801977e:	460c      	mov	r4, r1
 8019780:	b913      	cbnz	r3, 8019788 <_fflush_r+0x10>
 8019782:	2500      	movs	r5, #0
 8019784:	4628      	mov	r0, r5
 8019786:	bd38      	pop	{r3, r4, r5, pc}
 8019788:	b118      	cbz	r0, 8019792 <_fflush_r+0x1a>
 801978a:	6983      	ldr	r3, [r0, #24]
 801978c:	b90b      	cbnz	r3, 8019792 <_fflush_r+0x1a>
 801978e:	f000 f887 	bl	80198a0 <__sinit>
 8019792:	4b14      	ldr	r3, [pc, #80]	; (80197e4 <_fflush_r+0x6c>)
 8019794:	429c      	cmp	r4, r3
 8019796:	d11b      	bne.n	80197d0 <_fflush_r+0x58>
 8019798:	686c      	ldr	r4, [r5, #4]
 801979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d0ef      	beq.n	8019782 <_fflush_r+0xa>
 80197a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80197a4:	07d0      	lsls	r0, r2, #31
 80197a6:	d404      	bmi.n	80197b2 <_fflush_r+0x3a>
 80197a8:	0599      	lsls	r1, r3, #22
 80197aa:	d402      	bmi.n	80197b2 <_fflush_r+0x3a>
 80197ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197ae:	f000 fc9a 	bl	801a0e6 <__retarget_lock_acquire_recursive>
 80197b2:	4628      	mov	r0, r5
 80197b4:	4621      	mov	r1, r4
 80197b6:	f7ff ff59 	bl	801966c <__sflush_r>
 80197ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80197bc:	07da      	lsls	r2, r3, #31
 80197be:	4605      	mov	r5, r0
 80197c0:	d4e0      	bmi.n	8019784 <_fflush_r+0xc>
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	059b      	lsls	r3, r3, #22
 80197c6:	d4dd      	bmi.n	8019784 <_fflush_r+0xc>
 80197c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197ca:	f000 fc8d 	bl	801a0e8 <__retarget_lock_release_recursive>
 80197ce:	e7d9      	b.n	8019784 <_fflush_r+0xc>
 80197d0:	4b05      	ldr	r3, [pc, #20]	; (80197e8 <_fflush_r+0x70>)
 80197d2:	429c      	cmp	r4, r3
 80197d4:	d101      	bne.n	80197da <_fflush_r+0x62>
 80197d6:	68ac      	ldr	r4, [r5, #8]
 80197d8:	e7df      	b.n	801979a <_fflush_r+0x22>
 80197da:	4b04      	ldr	r3, [pc, #16]	; (80197ec <_fflush_r+0x74>)
 80197dc:	429c      	cmp	r4, r3
 80197de:	bf08      	it	eq
 80197e0:	68ec      	ldreq	r4, [r5, #12]
 80197e2:	e7da      	b.n	801979a <_fflush_r+0x22>
 80197e4:	08033d6c 	.word	0x08033d6c
 80197e8:	08033d8c 	.word	0x08033d8c
 80197ec:	08033d4c 	.word	0x08033d4c

080197f0 <std>:
 80197f0:	2300      	movs	r3, #0
 80197f2:	b510      	push	{r4, lr}
 80197f4:	4604      	mov	r4, r0
 80197f6:	e9c0 3300 	strd	r3, r3, [r0]
 80197fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80197fe:	6083      	str	r3, [r0, #8]
 8019800:	8181      	strh	r1, [r0, #12]
 8019802:	6643      	str	r3, [r0, #100]	; 0x64
 8019804:	81c2      	strh	r2, [r0, #14]
 8019806:	6183      	str	r3, [r0, #24]
 8019808:	4619      	mov	r1, r3
 801980a:	2208      	movs	r2, #8
 801980c:	305c      	adds	r0, #92	; 0x5c
 801980e:	f7fd fab9 	bl	8016d84 <memset>
 8019812:	4b05      	ldr	r3, [pc, #20]	; (8019828 <std+0x38>)
 8019814:	6263      	str	r3, [r4, #36]	; 0x24
 8019816:	4b05      	ldr	r3, [pc, #20]	; (801982c <std+0x3c>)
 8019818:	62a3      	str	r3, [r4, #40]	; 0x28
 801981a:	4b05      	ldr	r3, [pc, #20]	; (8019830 <std+0x40>)
 801981c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801981e:	4b05      	ldr	r3, [pc, #20]	; (8019834 <std+0x44>)
 8019820:	6224      	str	r4, [r4, #32]
 8019822:	6323      	str	r3, [r4, #48]	; 0x30
 8019824:	bd10      	pop	{r4, pc}
 8019826:	bf00      	nop
 8019828:	0801b271 	.word	0x0801b271
 801982c:	0801b293 	.word	0x0801b293
 8019830:	0801b2cb 	.word	0x0801b2cb
 8019834:	0801b2ef 	.word	0x0801b2ef

08019838 <_cleanup_r>:
 8019838:	4901      	ldr	r1, [pc, #4]	; (8019840 <_cleanup_r+0x8>)
 801983a:	f000 b8c1 	b.w	80199c0 <_fwalk_reent>
 801983e:	bf00      	nop
 8019840:	08019779 	.word	0x08019779

08019844 <__sfmoreglue>:
 8019844:	b570      	push	{r4, r5, r6, lr}
 8019846:	1e4a      	subs	r2, r1, #1
 8019848:	2568      	movs	r5, #104	; 0x68
 801984a:	4355      	muls	r5, r2
 801984c:	460e      	mov	r6, r1
 801984e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019852:	f001 f9e3 	bl	801ac1c <_malloc_r>
 8019856:	4604      	mov	r4, r0
 8019858:	b140      	cbz	r0, 801986c <__sfmoreglue+0x28>
 801985a:	2100      	movs	r1, #0
 801985c:	e9c0 1600 	strd	r1, r6, [r0]
 8019860:	300c      	adds	r0, #12
 8019862:	60a0      	str	r0, [r4, #8]
 8019864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019868:	f7fd fa8c 	bl	8016d84 <memset>
 801986c:	4620      	mov	r0, r4
 801986e:	bd70      	pop	{r4, r5, r6, pc}

08019870 <__sfp_lock_acquire>:
 8019870:	4801      	ldr	r0, [pc, #4]	; (8019878 <__sfp_lock_acquire+0x8>)
 8019872:	f000 bc38 	b.w	801a0e6 <__retarget_lock_acquire_recursive>
 8019876:	bf00      	nop
 8019878:	2000d8ac 	.word	0x2000d8ac

0801987c <__sfp_lock_release>:
 801987c:	4801      	ldr	r0, [pc, #4]	; (8019884 <__sfp_lock_release+0x8>)
 801987e:	f000 bc33 	b.w	801a0e8 <__retarget_lock_release_recursive>
 8019882:	bf00      	nop
 8019884:	2000d8ac 	.word	0x2000d8ac

08019888 <__sinit_lock_acquire>:
 8019888:	4801      	ldr	r0, [pc, #4]	; (8019890 <__sinit_lock_acquire+0x8>)
 801988a:	f000 bc2c 	b.w	801a0e6 <__retarget_lock_acquire_recursive>
 801988e:	bf00      	nop
 8019890:	2000d8a7 	.word	0x2000d8a7

08019894 <__sinit_lock_release>:
 8019894:	4801      	ldr	r0, [pc, #4]	; (801989c <__sinit_lock_release+0x8>)
 8019896:	f000 bc27 	b.w	801a0e8 <__retarget_lock_release_recursive>
 801989a:	bf00      	nop
 801989c:	2000d8a7 	.word	0x2000d8a7

080198a0 <__sinit>:
 80198a0:	b510      	push	{r4, lr}
 80198a2:	4604      	mov	r4, r0
 80198a4:	f7ff fff0 	bl	8019888 <__sinit_lock_acquire>
 80198a8:	69a3      	ldr	r3, [r4, #24]
 80198aa:	b11b      	cbz	r3, 80198b4 <__sinit+0x14>
 80198ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198b0:	f7ff bff0 	b.w	8019894 <__sinit_lock_release>
 80198b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80198b8:	6523      	str	r3, [r4, #80]	; 0x50
 80198ba:	4b13      	ldr	r3, [pc, #76]	; (8019908 <__sinit+0x68>)
 80198bc:	4a13      	ldr	r2, [pc, #76]	; (801990c <__sinit+0x6c>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80198c2:	42a3      	cmp	r3, r4
 80198c4:	bf04      	itt	eq
 80198c6:	2301      	moveq	r3, #1
 80198c8:	61a3      	streq	r3, [r4, #24]
 80198ca:	4620      	mov	r0, r4
 80198cc:	f000 f820 	bl	8019910 <__sfp>
 80198d0:	6060      	str	r0, [r4, #4]
 80198d2:	4620      	mov	r0, r4
 80198d4:	f000 f81c 	bl	8019910 <__sfp>
 80198d8:	60a0      	str	r0, [r4, #8]
 80198da:	4620      	mov	r0, r4
 80198dc:	f000 f818 	bl	8019910 <__sfp>
 80198e0:	2200      	movs	r2, #0
 80198e2:	60e0      	str	r0, [r4, #12]
 80198e4:	2104      	movs	r1, #4
 80198e6:	6860      	ldr	r0, [r4, #4]
 80198e8:	f7ff ff82 	bl	80197f0 <std>
 80198ec:	68a0      	ldr	r0, [r4, #8]
 80198ee:	2201      	movs	r2, #1
 80198f0:	2109      	movs	r1, #9
 80198f2:	f7ff ff7d 	bl	80197f0 <std>
 80198f6:	68e0      	ldr	r0, [r4, #12]
 80198f8:	2202      	movs	r2, #2
 80198fa:	2112      	movs	r1, #18
 80198fc:	f7ff ff78 	bl	80197f0 <std>
 8019900:	2301      	movs	r3, #1
 8019902:	61a3      	str	r3, [r4, #24]
 8019904:	e7d2      	b.n	80198ac <__sinit+0xc>
 8019906:	bf00      	nop
 8019908:	08033b30 	.word	0x08033b30
 801990c:	08019839 	.word	0x08019839

08019910 <__sfp>:
 8019910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019912:	4607      	mov	r7, r0
 8019914:	f7ff ffac 	bl	8019870 <__sfp_lock_acquire>
 8019918:	4b1e      	ldr	r3, [pc, #120]	; (8019994 <__sfp+0x84>)
 801991a:	681e      	ldr	r6, [r3, #0]
 801991c:	69b3      	ldr	r3, [r6, #24]
 801991e:	b913      	cbnz	r3, 8019926 <__sfp+0x16>
 8019920:	4630      	mov	r0, r6
 8019922:	f7ff ffbd 	bl	80198a0 <__sinit>
 8019926:	3648      	adds	r6, #72	; 0x48
 8019928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801992c:	3b01      	subs	r3, #1
 801992e:	d503      	bpl.n	8019938 <__sfp+0x28>
 8019930:	6833      	ldr	r3, [r6, #0]
 8019932:	b30b      	cbz	r3, 8019978 <__sfp+0x68>
 8019934:	6836      	ldr	r6, [r6, #0]
 8019936:	e7f7      	b.n	8019928 <__sfp+0x18>
 8019938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801993c:	b9d5      	cbnz	r5, 8019974 <__sfp+0x64>
 801993e:	4b16      	ldr	r3, [pc, #88]	; (8019998 <__sfp+0x88>)
 8019940:	60e3      	str	r3, [r4, #12]
 8019942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019946:	6665      	str	r5, [r4, #100]	; 0x64
 8019948:	f000 fbcc 	bl	801a0e4 <__retarget_lock_init_recursive>
 801994c:	f7ff ff96 	bl	801987c <__sfp_lock_release>
 8019950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019958:	6025      	str	r5, [r4, #0]
 801995a:	61a5      	str	r5, [r4, #24]
 801995c:	2208      	movs	r2, #8
 801995e:	4629      	mov	r1, r5
 8019960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019964:	f7fd fa0e 	bl	8016d84 <memset>
 8019968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801996c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019970:	4620      	mov	r0, r4
 8019972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019974:	3468      	adds	r4, #104	; 0x68
 8019976:	e7d9      	b.n	801992c <__sfp+0x1c>
 8019978:	2104      	movs	r1, #4
 801997a:	4638      	mov	r0, r7
 801997c:	f7ff ff62 	bl	8019844 <__sfmoreglue>
 8019980:	4604      	mov	r4, r0
 8019982:	6030      	str	r0, [r6, #0]
 8019984:	2800      	cmp	r0, #0
 8019986:	d1d5      	bne.n	8019934 <__sfp+0x24>
 8019988:	f7ff ff78 	bl	801987c <__sfp_lock_release>
 801998c:	230c      	movs	r3, #12
 801998e:	603b      	str	r3, [r7, #0]
 8019990:	e7ee      	b.n	8019970 <__sfp+0x60>
 8019992:	bf00      	nop
 8019994:	08033b30 	.word	0x08033b30
 8019998:	ffff0001 	.word	0xffff0001

0801999c <fiprintf>:
 801999c:	b40e      	push	{r1, r2, r3}
 801999e:	b503      	push	{r0, r1, lr}
 80199a0:	4601      	mov	r1, r0
 80199a2:	ab03      	add	r3, sp, #12
 80199a4:	4805      	ldr	r0, [pc, #20]	; (80199bc <fiprintf+0x20>)
 80199a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80199aa:	6800      	ldr	r0, [r0, #0]
 80199ac:	9301      	str	r3, [sp, #4]
 80199ae:	f001 fb15 	bl	801afdc <_vfiprintf_r>
 80199b2:	b002      	add	sp, #8
 80199b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80199b8:	b003      	add	sp, #12
 80199ba:	4770      	bx	lr
 80199bc:	200005cc 	.word	0x200005cc

080199c0 <_fwalk_reent>:
 80199c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199c4:	4606      	mov	r6, r0
 80199c6:	4688      	mov	r8, r1
 80199c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80199cc:	2700      	movs	r7, #0
 80199ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80199d2:	f1b9 0901 	subs.w	r9, r9, #1
 80199d6:	d505      	bpl.n	80199e4 <_fwalk_reent+0x24>
 80199d8:	6824      	ldr	r4, [r4, #0]
 80199da:	2c00      	cmp	r4, #0
 80199dc:	d1f7      	bne.n	80199ce <_fwalk_reent+0xe>
 80199de:	4638      	mov	r0, r7
 80199e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199e4:	89ab      	ldrh	r3, [r5, #12]
 80199e6:	2b01      	cmp	r3, #1
 80199e8:	d907      	bls.n	80199fa <_fwalk_reent+0x3a>
 80199ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80199ee:	3301      	adds	r3, #1
 80199f0:	d003      	beq.n	80199fa <_fwalk_reent+0x3a>
 80199f2:	4629      	mov	r1, r5
 80199f4:	4630      	mov	r0, r6
 80199f6:	47c0      	blx	r8
 80199f8:	4307      	orrs	r7, r0
 80199fa:	3568      	adds	r5, #104	; 0x68
 80199fc:	e7e9      	b.n	80199d2 <_fwalk_reent+0x12>

080199fe <rshift>:
 80199fe:	6903      	ldr	r3, [r0, #16]
 8019a00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a08:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019a0c:	f100 0414 	add.w	r4, r0, #20
 8019a10:	dd45      	ble.n	8019a9e <rshift+0xa0>
 8019a12:	f011 011f 	ands.w	r1, r1, #31
 8019a16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019a1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019a1e:	d10c      	bne.n	8019a3a <rshift+0x3c>
 8019a20:	f100 0710 	add.w	r7, r0, #16
 8019a24:	4629      	mov	r1, r5
 8019a26:	42b1      	cmp	r1, r6
 8019a28:	d334      	bcc.n	8019a94 <rshift+0x96>
 8019a2a:	1a9b      	subs	r3, r3, r2
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	1eea      	subs	r2, r5, #3
 8019a30:	4296      	cmp	r6, r2
 8019a32:	bf38      	it	cc
 8019a34:	2300      	movcc	r3, #0
 8019a36:	4423      	add	r3, r4
 8019a38:	e015      	b.n	8019a66 <rshift+0x68>
 8019a3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019a3e:	f1c1 0820 	rsb	r8, r1, #32
 8019a42:	40cf      	lsrs	r7, r1
 8019a44:	f105 0e04 	add.w	lr, r5, #4
 8019a48:	46a1      	mov	r9, r4
 8019a4a:	4576      	cmp	r6, lr
 8019a4c:	46f4      	mov	ip, lr
 8019a4e:	d815      	bhi.n	8019a7c <rshift+0x7e>
 8019a50:	1a9b      	subs	r3, r3, r2
 8019a52:	009a      	lsls	r2, r3, #2
 8019a54:	3a04      	subs	r2, #4
 8019a56:	3501      	adds	r5, #1
 8019a58:	42ae      	cmp	r6, r5
 8019a5a:	bf38      	it	cc
 8019a5c:	2200      	movcc	r2, #0
 8019a5e:	18a3      	adds	r3, r4, r2
 8019a60:	50a7      	str	r7, [r4, r2]
 8019a62:	b107      	cbz	r7, 8019a66 <rshift+0x68>
 8019a64:	3304      	adds	r3, #4
 8019a66:	1b1a      	subs	r2, r3, r4
 8019a68:	42a3      	cmp	r3, r4
 8019a6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019a6e:	bf08      	it	eq
 8019a70:	2300      	moveq	r3, #0
 8019a72:	6102      	str	r2, [r0, #16]
 8019a74:	bf08      	it	eq
 8019a76:	6143      	streq	r3, [r0, #20]
 8019a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a7c:	f8dc c000 	ldr.w	ip, [ip]
 8019a80:	fa0c fc08 	lsl.w	ip, ip, r8
 8019a84:	ea4c 0707 	orr.w	r7, ip, r7
 8019a88:	f849 7b04 	str.w	r7, [r9], #4
 8019a8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019a90:	40cf      	lsrs	r7, r1
 8019a92:	e7da      	b.n	8019a4a <rshift+0x4c>
 8019a94:	f851 cb04 	ldr.w	ip, [r1], #4
 8019a98:	f847 cf04 	str.w	ip, [r7, #4]!
 8019a9c:	e7c3      	b.n	8019a26 <rshift+0x28>
 8019a9e:	4623      	mov	r3, r4
 8019aa0:	e7e1      	b.n	8019a66 <rshift+0x68>

08019aa2 <__hexdig_fun>:
 8019aa2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019aa6:	2b09      	cmp	r3, #9
 8019aa8:	d802      	bhi.n	8019ab0 <__hexdig_fun+0xe>
 8019aaa:	3820      	subs	r0, #32
 8019aac:	b2c0      	uxtb	r0, r0
 8019aae:	4770      	bx	lr
 8019ab0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019ab4:	2b05      	cmp	r3, #5
 8019ab6:	d801      	bhi.n	8019abc <__hexdig_fun+0x1a>
 8019ab8:	3847      	subs	r0, #71	; 0x47
 8019aba:	e7f7      	b.n	8019aac <__hexdig_fun+0xa>
 8019abc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019ac0:	2b05      	cmp	r3, #5
 8019ac2:	d801      	bhi.n	8019ac8 <__hexdig_fun+0x26>
 8019ac4:	3827      	subs	r0, #39	; 0x27
 8019ac6:	e7f1      	b.n	8019aac <__hexdig_fun+0xa>
 8019ac8:	2000      	movs	r0, #0
 8019aca:	4770      	bx	lr

08019acc <__gethex>:
 8019acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad0:	ed2d 8b02 	vpush	{d8}
 8019ad4:	b089      	sub	sp, #36	; 0x24
 8019ad6:	ee08 0a10 	vmov	s16, r0
 8019ada:	9304      	str	r3, [sp, #16]
 8019adc:	4bbc      	ldr	r3, [pc, #752]	; (8019dd0 <__gethex+0x304>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	9301      	str	r3, [sp, #4]
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	468b      	mov	fp, r1
 8019ae6:	4690      	mov	r8, r2
 8019ae8:	f7e6 fb7c 	bl	80001e4 <strlen>
 8019aec:	9b01      	ldr	r3, [sp, #4]
 8019aee:	f8db 2000 	ldr.w	r2, [fp]
 8019af2:	4403      	add	r3, r0
 8019af4:	4682      	mov	sl, r0
 8019af6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019afa:	9305      	str	r3, [sp, #20]
 8019afc:	1c93      	adds	r3, r2, #2
 8019afe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019b02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019b06:	32fe      	adds	r2, #254	; 0xfe
 8019b08:	18d1      	adds	r1, r2, r3
 8019b0a:	461f      	mov	r7, r3
 8019b0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019b10:	9100      	str	r1, [sp, #0]
 8019b12:	2830      	cmp	r0, #48	; 0x30
 8019b14:	d0f8      	beq.n	8019b08 <__gethex+0x3c>
 8019b16:	f7ff ffc4 	bl	8019aa2 <__hexdig_fun>
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	d13a      	bne.n	8019b96 <__gethex+0xca>
 8019b20:	9901      	ldr	r1, [sp, #4]
 8019b22:	4652      	mov	r2, sl
 8019b24:	4638      	mov	r0, r7
 8019b26:	f7fd fee5 	bl	80178f4 <strncmp>
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	2800      	cmp	r0, #0
 8019b2e:	d168      	bne.n	8019c02 <__gethex+0x136>
 8019b30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019b34:	eb07 060a 	add.w	r6, r7, sl
 8019b38:	f7ff ffb3 	bl	8019aa2 <__hexdig_fun>
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d062      	beq.n	8019c06 <__gethex+0x13a>
 8019b40:	4633      	mov	r3, r6
 8019b42:	7818      	ldrb	r0, [r3, #0]
 8019b44:	2830      	cmp	r0, #48	; 0x30
 8019b46:	461f      	mov	r7, r3
 8019b48:	f103 0301 	add.w	r3, r3, #1
 8019b4c:	d0f9      	beq.n	8019b42 <__gethex+0x76>
 8019b4e:	f7ff ffa8 	bl	8019aa2 <__hexdig_fun>
 8019b52:	2301      	movs	r3, #1
 8019b54:	fab0 f480 	clz	r4, r0
 8019b58:	0964      	lsrs	r4, r4, #5
 8019b5a:	4635      	mov	r5, r6
 8019b5c:	9300      	str	r3, [sp, #0]
 8019b5e:	463a      	mov	r2, r7
 8019b60:	4616      	mov	r6, r2
 8019b62:	3201      	adds	r2, #1
 8019b64:	7830      	ldrb	r0, [r6, #0]
 8019b66:	f7ff ff9c 	bl	8019aa2 <__hexdig_fun>
 8019b6a:	2800      	cmp	r0, #0
 8019b6c:	d1f8      	bne.n	8019b60 <__gethex+0x94>
 8019b6e:	9901      	ldr	r1, [sp, #4]
 8019b70:	4652      	mov	r2, sl
 8019b72:	4630      	mov	r0, r6
 8019b74:	f7fd febe 	bl	80178f4 <strncmp>
 8019b78:	b980      	cbnz	r0, 8019b9c <__gethex+0xd0>
 8019b7a:	b94d      	cbnz	r5, 8019b90 <__gethex+0xc4>
 8019b7c:	eb06 050a 	add.w	r5, r6, sl
 8019b80:	462a      	mov	r2, r5
 8019b82:	4616      	mov	r6, r2
 8019b84:	3201      	adds	r2, #1
 8019b86:	7830      	ldrb	r0, [r6, #0]
 8019b88:	f7ff ff8b 	bl	8019aa2 <__hexdig_fun>
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	d1f8      	bne.n	8019b82 <__gethex+0xb6>
 8019b90:	1bad      	subs	r5, r5, r6
 8019b92:	00ad      	lsls	r5, r5, #2
 8019b94:	e004      	b.n	8019ba0 <__gethex+0xd4>
 8019b96:	2400      	movs	r4, #0
 8019b98:	4625      	mov	r5, r4
 8019b9a:	e7e0      	b.n	8019b5e <__gethex+0x92>
 8019b9c:	2d00      	cmp	r5, #0
 8019b9e:	d1f7      	bne.n	8019b90 <__gethex+0xc4>
 8019ba0:	7833      	ldrb	r3, [r6, #0]
 8019ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019ba6:	2b50      	cmp	r3, #80	; 0x50
 8019ba8:	d13b      	bne.n	8019c22 <__gethex+0x156>
 8019baa:	7873      	ldrb	r3, [r6, #1]
 8019bac:	2b2b      	cmp	r3, #43	; 0x2b
 8019bae:	d02c      	beq.n	8019c0a <__gethex+0x13e>
 8019bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8019bb2:	d02e      	beq.n	8019c12 <__gethex+0x146>
 8019bb4:	1c71      	adds	r1, r6, #1
 8019bb6:	f04f 0900 	mov.w	r9, #0
 8019bba:	7808      	ldrb	r0, [r1, #0]
 8019bbc:	f7ff ff71 	bl	8019aa2 <__hexdig_fun>
 8019bc0:	1e43      	subs	r3, r0, #1
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	2b18      	cmp	r3, #24
 8019bc6:	d82c      	bhi.n	8019c22 <__gethex+0x156>
 8019bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8019bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019bd0:	f7ff ff67 	bl	8019aa2 <__hexdig_fun>
 8019bd4:	1e43      	subs	r3, r0, #1
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	2b18      	cmp	r3, #24
 8019bda:	d91d      	bls.n	8019c18 <__gethex+0x14c>
 8019bdc:	f1b9 0f00 	cmp.w	r9, #0
 8019be0:	d000      	beq.n	8019be4 <__gethex+0x118>
 8019be2:	4252      	negs	r2, r2
 8019be4:	4415      	add	r5, r2
 8019be6:	f8cb 1000 	str.w	r1, [fp]
 8019bea:	b1e4      	cbz	r4, 8019c26 <__gethex+0x15a>
 8019bec:	9b00      	ldr	r3, [sp, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	bf14      	ite	ne
 8019bf2:	2700      	movne	r7, #0
 8019bf4:	2706      	moveq	r7, #6
 8019bf6:	4638      	mov	r0, r7
 8019bf8:	b009      	add	sp, #36	; 0x24
 8019bfa:	ecbd 8b02 	vpop	{d8}
 8019bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c02:	463e      	mov	r6, r7
 8019c04:	4625      	mov	r5, r4
 8019c06:	2401      	movs	r4, #1
 8019c08:	e7ca      	b.n	8019ba0 <__gethex+0xd4>
 8019c0a:	f04f 0900 	mov.w	r9, #0
 8019c0e:	1cb1      	adds	r1, r6, #2
 8019c10:	e7d3      	b.n	8019bba <__gethex+0xee>
 8019c12:	f04f 0901 	mov.w	r9, #1
 8019c16:	e7fa      	b.n	8019c0e <__gethex+0x142>
 8019c18:	230a      	movs	r3, #10
 8019c1a:	fb03 0202 	mla	r2, r3, r2, r0
 8019c1e:	3a10      	subs	r2, #16
 8019c20:	e7d4      	b.n	8019bcc <__gethex+0x100>
 8019c22:	4631      	mov	r1, r6
 8019c24:	e7df      	b.n	8019be6 <__gethex+0x11a>
 8019c26:	1bf3      	subs	r3, r6, r7
 8019c28:	3b01      	subs	r3, #1
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	2b07      	cmp	r3, #7
 8019c2e:	dc0b      	bgt.n	8019c48 <__gethex+0x17c>
 8019c30:	ee18 0a10 	vmov	r0, s16
 8019c34:	f000 fad8 	bl	801a1e8 <_Balloc>
 8019c38:	4604      	mov	r4, r0
 8019c3a:	b940      	cbnz	r0, 8019c4e <__gethex+0x182>
 8019c3c:	4b65      	ldr	r3, [pc, #404]	; (8019dd4 <__gethex+0x308>)
 8019c3e:	4602      	mov	r2, r0
 8019c40:	21de      	movs	r1, #222	; 0xde
 8019c42:	4865      	ldr	r0, [pc, #404]	; (8019dd8 <__gethex+0x30c>)
 8019c44:	f7fe fe74 	bl	8018930 <__assert_func>
 8019c48:	3101      	adds	r1, #1
 8019c4a:	105b      	asrs	r3, r3, #1
 8019c4c:	e7ee      	b.n	8019c2c <__gethex+0x160>
 8019c4e:	f100 0914 	add.w	r9, r0, #20
 8019c52:	f04f 0b00 	mov.w	fp, #0
 8019c56:	f1ca 0301 	rsb	r3, sl, #1
 8019c5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8019c5e:	f8cd b000 	str.w	fp, [sp]
 8019c62:	9306      	str	r3, [sp, #24]
 8019c64:	42b7      	cmp	r7, r6
 8019c66:	d340      	bcc.n	8019cea <__gethex+0x21e>
 8019c68:	9802      	ldr	r0, [sp, #8]
 8019c6a:	9b00      	ldr	r3, [sp, #0]
 8019c6c:	f840 3b04 	str.w	r3, [r0], #4
 8019c70:	eba0 0009 	sub.w	r0, r0, r9
 8019c74:	1080      	asrs	r0, r0, #2
 8019c76:	0146      	lsls	r6, r0, #5
 8019c78:	6120      	str	r0, [r4, #16]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f000 fbaa 	bl	801a3d4 <__hi0bits>
 8019c80:	1a30      	subs	r0, r6, r0
 8019c82:	f8d8 6000 	ldr.w	r6, [r8]
 8019c86:	42b0      	cmp	r0, r6
 8019c88:	dd63      	ble.n	8019d52 <__gethex+0x286>
 8019c8a:	1b87      	subs	r7, r0, r6
 8019c8c:	4639      	mov	r1, r7
 8019c8e:	4620      	mov	r0, r4
 8019c90:	f000 ff44 	bl	801ab1c <__any_on>
 8019c94:	4682      	mov	sl, r0
 8019c96:	b1a8      	cbz	r0, 8019cc4 <__gethex+0x1f8>
 8019c98:	1e7b      	subs	r3, r7, #1
 8019c9a:	1159      	asrs	r1, r3, #5
 8019c9c:	f003 021f 	and.w	r2, r3, #31
 8019ca0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019ca4:	f04f 0a01 	mov.w	sl, #1
 8019ca8:	fa0a f202 	lsl.w	r2, sl, r2
 8019cac:	420a      	tst	r2, r1
 8019cae:	d009      	beq.n	8019cc4 <__gethex+0x1f8>
 8019cb0:	4553      	cmp	r3, sl
 8019cb2:	dd05      	ble.n	8019cc0 <__gethex+0x1f4>
 8019cb4:	1eb9      	subs	r1, r7, #2
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	f000 ff30 	bl	801ab1c <__any_on>
 8019cbc:	2800      	cmp	r0, #0
 8019cbe:	d145      	bne.n	8019d4c <__gethex+0x280>
 8019cc0:	f04f 0a02 	mov.w	sl, #2
 8019cc4:	4639      	mov	r1, r7
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f7ff fe99 	bl	80199fe <rshift>
 8019ccc:	443d      	add	r5, r7
 8019cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019cd2:	42ab      	cmp	r3, r5
 8019cd4:	da4c      	bge.n	8019d70 <__gethex+0x2a4>
 8019cd6:	ee18 0a10 	vmov	r0, s16
 8019cda:	4621      	mov	r1, r4
 8019cdc:	f000 fac4 	bl	801a268 <_Bfree>
 8019ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	6013      	str	r3, [r2, #0]
 8019ce6:	27a3      	movs	r7, #163	; 0xa3
 8019ce8:	e785      	b.n	8019bf6 <__gethex+0x12a>
 8019cea:	1e73      	subs	r3, r6, #1
 8019cec:	9a05      	ldr	r2, [sp, #20]
 8019cee:	9303      	str	r3, [sp, #12]
 8019cf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	d019      	beq.n	8019d2c <__gethex+0x260>
 8019cf8:	f1bb 0f20 	cmp.w	fp, #32
 8019cfc:	d107      	bne.n	8019d0e <__gethex+0x242>
 8019cfe:	9b02      	ldr	r3, [sp, #8]
 8019d00:	9a00      	ldr	r2, [sp, #0]
 8019d02:	f843 2b04 	str.w	r2, [r3], #4
 8019d06:	9302      	str	r3, [sp, #8]
 8019d08:	2300      	movs	r3, #0
 8019d0a:	9300      	str	r3, [sp, #0]
 8019d0c:	469b      	mov	fp, r3
 8019d0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019d12:	f7ff fec6 	bl	8019aa2 <__hexdig_fun>
 8019d16:	9b00      	ldr	r3, [sp, #0]
 8019d18:	f000 000f 	and.w	r0, r0, #15
 8019d1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019d20:	4303      	orrs	r3, r0
 8019d22:	9300      	str	r3, [sp, #0]
 8019d24:	f10b 0b04 	add.w	fp, fp, #4
 8019d28:	9b03      	ldr	r3, [sp, #12]
 8019d2a:	e00d      	b.n	8019d48 <__gethex+0x27c>
 8019d2c:	9b03      	ldr	r3, [sp, #12]
 8019d2e:	9a06      	ldr	r2, [sp, #24]
 8019d30:	4413      	add	r3, r2
 8019d32:	42bb      	cmp	r3, r7
 8019d34:	d3e0      	bcc.n	8019cf8 <__gethex+0x22c>
 8019d36:	4618      	mov	r0, r3
 8019d38:	9901      	ldr	r1, [sp, #4]
 8019d3a:	9307      	str	r3, [sp, #28]
 8019d3c:	4652      	mov	r2, sl
 8019d3e:	f7fd fdd9 	bl	80178f4 <strncmp>
 8019d42:	9b07      	ldr	r3, [sp, #28]
 8019d44:	2800      	cmp	r0, #0
 8019d46:	d1d7      	bne.n	8019cf8 <__gethex+0x22c>
 8019d48:	461e      	mov	r6, r3
 8019d4a:	e78b      	b.n	8019c64 <__gethex+0x198>
 8019d4c:	f04f 0a03 	mov.w	sl, #3
 8019d50:	e7b8      	b.n	8019cc4 <__gethex+0x1f8>
 8019d52:	da0a      	bge.n	8019d6a <__gethex+0x29e>
 8019d54:	1a37      	subs	r7, r6, r0
 8019d56:	4621      	mov	r1, r4
 8019d58:	ee18 0a10 	vmov	r0, s16
 8019d5c:	463a      	mov	r2, r7
 8019d5e:	f000 fc9f 	bl	801a6a0 <__lshift>
 8019d62:	1bed      	subs	r5, r5, r7
 8019d64:	4604      	mov	r4, r0
 8019d66:	f100 0914 	add.w	r9, r0, #20
 8019d6a:	f04f 0a00 	mov.w	sl, #0
 8019d6e:	e7ae      	b.n	8019cce <__gethex+0x202>
 8019d70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019d74:	42a8      	cmp	r0, r5
 8019d76:	dd72      	ble.n	8019e5e <__gethex+0x392>
 8019d78:	1b45      	subs	r5, r0, r5
 8019d7a:	42ae      	cmp	r6, r5
 8019d7c:	dc36      	bgt.n	8019dec <__gethex+0x320>
 8019d7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d82:	2b02      	cmp	r3, #2
 8019d84:	d02a      	beq.n	8019ddc <__gethex+0x310>
 8019d86:	2b03      	cmp	r3, #3
 8019d88:	d02c      	beq.n	8019de4 <__gethex+0x318>
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d115      	bne.n	8019dba <__gethex+0x2ee>
 8019d8e:	42ae      	cmp	r6, r5
 8019d90:	d113      	bne.n	8019dba <__gethex+0x2ee>
 8019d92:	2e01      	cmp	r6, #1
 8019d94:	d10b      	bne.n	8019dae <__gethex+0x2e2>
 8019d96:	9a04      	ldr	r2, [sp, #16]
 8019d98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019d9c:	6013      	str	r3, [r2, #0]
 8019d9e:	2301      	movs	r3, #1
 8019da0:	6123      	str	r3, [r4, #16]
 8019da2:	f8c9 3000 	str.w	r3, [r9]
 8019da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019da8:	2762      	movs	r7, #98	; 0x62
 8019daa:	601c      	str	r4, [r3, #0]
 8019dac:	e723      	b.n	8019bf6 <__gethex+0x12a>
 8019dae:	1e71      	subs	r1, r6, #1
 8019db0:	4620      	mov	r0, r4
 8019db2:	f000 feb3 	bl	801ab1c <__any_on>
 8019db6:	2800      	cmp	r0, #0
 8019db8:	d1ed      	bne.n	8019d96 <__gethex+0x2ca>
 8019dba:	ee18 0a10 	vmov	r0, s16
 8019dbe:	4621      	mov	r1, r4
 8019dc0:	f000 fa52 	bl	801a268 <_Bfree>
 8019dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019dc6:	2300      	movs	r3, #0
 8019dc8:	6013      	str	r3, [r2, #0]
 8019dca:	2750      	movs	r7, #80	; 0x50
 8019dcc:	e713      	b.n	8019bf6 <__gethex+0x12a>
 8019dce:	bf00      	nop
 8019dd0:	08033e18 	.word	0x08033e18
 8019dd4:	08033d39 	.word	0x08033d39
 8019dd8:	08033dac 	.word	0x08033dac
 8019ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d1eb      	bne.n	8019dba <__gethex+0x2ee>
 8019de2:	e7d8      	b.n	8019d96 <__gethex+0x2ca>
 8019de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d1d5      	bne.n	8019d96 <__gethex+0x2ca>
 8019dea:	e7e6      	b.n	8019dba <__gethex+0x2ee>
 8019dec:	1e6f      	subs	r7, r5, #1
 8019dee:	f1ba 0f00 	cmp.w	sl, #0
 8019df2:	d131      	bne.n	8019e58 <__gethex+0x38c>
 8019df4:	b127      	cbz	r7, 8019e00 <__gethex+0x334>
 8019df6:	4639      	mov	r1, r7
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f000 fe8f 	bl	801ab1c <__any_on>
 8019dfe:	4682      	mov	sl, r0
 8019e00:	117b      	asrs	r3, r7, #5
 8019e02:	2101      	movs	r1, #1
 8019e04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019e08:	f007 071f 	and.w	r7, r7, #31
 8019e0c:	fa01 f707 	lsl.w	r7, r1, r7
 8019e10:	421f      	tst	r7, r3
 8019e12:	4629      	mov	r1, r5
 8019e14:	4620      	mov	r0, r4
 8019e16:	bf18      	it	ne
 8019e18:	f04a 0a02 	orrne.w	sl, sl, #2
 8019e1c:	1b76      	subs	r6, r6, r5
 8019e1e:	f7ff fdee 	bl	80199fe <rshift>
 8019e22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019e26:	2702      	movs	r7, #2
 8019e28:	f1ba 0f00 	cmp.w	sl, #0
 8019e2c:	d048      	beq.n	8019ec0 <__gethex+0x3f4>
 8019e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019e32:	2b02      	cmp	r3, #2
 8019e34:	d015      	beq.n	8019e62 <__gethex+0x396>
 8019e36:	2b03      	cmp	r3, #3
 8019e38:	d017      	beq.n	8019e6a <__gethex+0x39e>
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d109      	bne.n	8019e52 <__gethex+0x386>
 8019e3e:	f01a 0f02 	tst.w	sl, #2
 8019e42:	d006      	beq.n	8019e52 <__gethex+0x386>
 8019e44:	f8d9 0000 	ldr.w	r0, [r9]
 8019e48:	ea4a 0a00 	orr.w	sl, sl, r0
 8019e4c:	f01a 0f01 	tst.w	sl, #1
 8019e50:	d10e      	bne.n	8019e70 <__gethex+0x3a4>
 8019e52:	f047 0710 	orr.w	r7, r7, #16
 8019e56:	e033      	b.n	8019ec0 <__gethex+0x3f4>
 8019e58:	f04f 0a01 	mov.w	sl, #1
 8019e5c:	e7d0      	b.n	8019e00 <__gethex+0x334>
 8019e5e:	2701      	movs	r7, #1
 8019e60:	e7e2      	b.n	8019e28 <__gethex+0x35c>
 8019e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e64:	f1c3 0301 	rsb	r3, r3, #1
 8019e68:	9315      	str	r3, [sp, #84]	; 0x54
 8019e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d0f0      	beq.n	8019e52 <__gethex+0x386>
 8019e70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019e74:	f104 0314 	add.w	r3, r4, #20
 8019e78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019e7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019e80:	f04f 0c00 	mov.w	ip, #0
 8019e84:	4618      	mov	r0, r3
 8019e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8019e8e:	d01c      	beq.n	8019eca <__gethex+0x3fe>
 8019e90:	3201      	adds	r2, #1
 8019e92:	6002      	str	r2, [r0, #0]
 8019e94:	2f02      	cmp	r7, #2
 8019e96:	f104 0314 	add.w	r3, r4, #20
 8019e9a:	d13f      	bne.n	8019f1c <__gethex+0x450>
 8019e9c:	f8d8 2000 	ldr.w	r2, [r8]
 8019ea0:	3a01      	subs	r2, #1
 8019ea2:	42b2      	cmp	r2, r6
 8019ea4:	d10a      	bne.n	8019ebc <__gethex+0x3f0>
 8019ea6:	1171      	asrs	r1, r6, #5
 8019ea8:	2201      	movs	r2, #1
 8019eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019eae:	f006 061f 	and.w	r6, r6, #31
 8019eb2:	fa02 f606 	lsl.w	r6, r2, r6
 8019eb6:	421e      	tst	r6, r3
 8019eb8:	bf18      	it	ne
 8019eba:	4617      	movne	r7, r2
 8019ebc:	f047 0720 	orr.w	r7, r7, #32
 8019ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ec2:	601c      	str	r4, [r3, #0]
 8019ec4:	9b04      	ldr	r3, [sp, #16]
 8019ec6:	601d      	str	r5, [r3, #0]
 8019ec8:	e695      	b.n	8019bf6 <__gethex+0x12a>
 8019eca:	4299      	cmp	r1, r3
 8019ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8019ed0:	d8d8      	bhi.n	8019e84 <__gethex+0x3b8>
 8019ed2:	68a3      	ldr	r3, [r4, #8]
 8019ed4:	459b      	cmp	fp, r3
 8019ed6:	db19      	blt.n	8019f0c <__gethex+0x440>
 8019ed8:	6861      	ldr	r1, [r4, #4]
 8019eda:	ee18 0a10 	vmov	r0, s16
 8019ede:	3101      	adds	r1, #1
 8019ee0:	f000 f982 	bl	801a1e8 <_Balloc>
 8019ee4:	4681      	mov	r9, r0
 8019ee6:	b918      	cbnz	r0, 8019ef0 <__gethex+0x424>
 8019ee8:	4b1a      	ldr	r3, [pc, #104]	; (8019f54 <__gethex+0x488>)
 8019eea:	4602      	mov	r2, r0
 8019eec:	2184      	movs	r1, #132	; 0x84
 8019eee:	e6a8      	b.n	8019c42 <__gethex+0x176>
 8019ef0:	6922      	ldr	r2, [r4, #16]
 8019ef2:	3202      	adds	r2, #2
 8019ef4:	f104 010c 	add.w	r1, r4, #12
 8019ef8:	0092      	lsls	r2, r2, #2
 8019efa:	300c      	adds	r0, #12
 8019efc:	f7fc ff1a 	bl	8016d34 <memcpy>
 8019f00:	4621      	mov	r1, r4
 8019f02:	ee18 0a10 	vmov	r0, s16
 8019f06:	f000 f9af 	bl	801a268 <_Bfree>
 8019f0a:	464c      	mov	r4, r9
 8019f0c:	6923      	ldr	r3, [r4, #16]
 8019f0e:	1c5a      	adds	r2, r3, #1
 8019f10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019f14:	6122      	str	r2, [r4, #16]
 8019f16:	2201      	movs	r2, #1
 8019f18:	615a      	str	r2, [r3, #20]
 8019f1a:	e7bb      	b.n	8019e94 <__gethex+0x3c8>
 8019f1c:	6922      	ldr	r2, [r4, #16]
 8019f1e:	455a      	cmp	r2, fp
 8019f20:	dd0b      	ble.n	8019f3a <__gethex+0x46e>
 8019f22:	2101      	movs	r1, #1
 8019f24:	4620      	mov	r0, r4
 8019f26:	f7ff fd6a 	bl	80199fe <rshift>
 8019f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019f2e:	3501      	adds	r5, #1
 8019f30:	42ab      	cmp	r3, r5
 8019f32:	f6ff aed0 	blt.w	8019cd6 <__gethex+0x20a>
 8019f36:	2701      	movs	r7, #1
 8019f38:	e7c0      	b.n	8019ebc <__gethex+0x3f0>
 8019f3a:	f016 061f 	ands.w	r6, r6, #31
 8019f3e:	d0fa      	beq.n	8019f36 <__gethex+0x46a>
 8019f40:	449a      	add	sl, r3
 8019f42:	f1c6 0620 	rsb	r6, r6, #32
 8019f46:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019f4a:	f000 fa43 	bl	801a3d4 <__hi0bits>
 8019f4e:	42b0      	cmp	r0, r6
 8019f50:	dbe7      	blt.n	8019f22 <__gethex+0x456>
 8019f52:	e7f0      	b.n	8019f36 <__gethex+0x46a>
 8019f54:	08033d39 	.word	0x08033d39

08019f58 <L_shift>:
 8019f58:	f1c2 0208 	rsb	r2, r2, #8
 8019f5c:	0092      	lsls	r2, r2, #2
 8019f5e:	b570      	push	{r4, r5, r6, lr}
 8019f60:	f1c2 0620 	rsb	r6, r2, #32
 8019f64:	6843      	ldr	r3, [r0, #4]
 8019f66:	6804      	ldr	r4, [r0, #0]
 8019f68:	fa03 f506 	lsl.w	r5, r3, r6
 8019f6c:	432c      	orrs	r4, r5
 8019f6e:	40d3      	lsrs	r3, r2
 8019f70:	6004      	str	r4, [r0, #0]
 8019f72:	f840 3f04 	str.w	r3, [r0, #4]!
 8019f76:	4288      	cmp	r0, r1
 8019f78:	d3f4      	bcc.n	8019f64 <L_shift+0xc>
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}

08019f7c <__match>:
 8019f7c:	b530      	push	{r4, r5, lr}
 8019f7e:	6803      	ldr	r3, [r0, #0]
 8019f80:	3301      	adds	r3, #1
 8019f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f86:	b914      	cbnz	r4, 8019f8e <__match+0x12>
 8019f88:	6003      	str	r3, [r0, #0]
 8019f8a:	2001      	movs	r0, #1
 8019f8c:	bd30      	pop	{r4, r5, pc}
 8019f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019f96:	2d19      	cmp	r5, #25
 8019f98:	bf98      	it	ls
 8019f9a:	3220      	addls	r2, #32
 8019f9c:	42a2      	cmp	r2, r4
 8019f9e:	d0f0      	beq.n	8019f82 <__match+0x6>
 8019fa0:	2000      	movs	r0, #0
 8019fa2:	e7f3      	b.n	8019f8c <__match+0x10>

08019fa4 <__hexnan>:
 8019fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa8:	680b      	ldr	r3, [r1, #0]
 8019faa:	6801      	ldr	r1, [r0, #0]
 8019fac:	115e      	asrs	r6, r3, #5
 8019fae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019fb2:	f013 031f 	ands.w	r3, r3, #31
 8019fb6:	b087      	sub	sp, #28
 8019fb8:	bf18      	it	ne
 8019fba:	3604      	addne	r6, #4
 8019fbc:	2500      	movs	r5, #0
 8019fbe:	1f37      	subs	r7, r6, #4
 8019fc0:	4682      	mov	sl, r0
 8019fc2:	4690      	mov	r8, r2
 8019fc4:	9301      	str	r3, [sp, #4]
 8019fc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8019fca:	46b9      	mov	r9, r7
 8019fcc:	463c      	mov	r4, r7
 8019fce:	9502      	str	r5, [sp, #8]
 8019fd0:	46ab      	mov	fp, r5
 8019fd2:	784a      	ldrb	r2, [r1, #1]
 8019fd4:	1c4b      	adds	r3, r1, #1
 8019fd6:	9303      	str	r3, [sp, #12]
 8019fd8:	b342      	cbz	r2, 801a02c <__hexnan+0x88>
 8019fda:	4610      	mov	r0, r2
 8019fdc:	9105      	str	r1, [sp, #20]
 8019fde:	9204      	str	r2, [sp, #16]
 8019fe0:	f7ff fd5f 	bl	8019aa2 <__hexdig_fun>
 8019fe4:	2800      	cmp	r0, #0
 8019fe6:	d14f      	bne.n	801a088 <__hexnan+0xe4>
 8019fe8:	9a04      	ldr	r2, [sp, #16]
 8019fea:	9905      	ldr	r1, [sp, #20]
 8019fec:	2a20      	cmp	r2, #32
 8019fee:	d818      	bhi.n	801a022 <__hexnan+0x7e>
 8019ff0:	9b02      	ldr	r3, [sp, #8]
 8019ff2:	459b      	cmp	fp, r3
 8019ff4:	dd13      	ble.n	801a01e <__hexnan+0x7a>
 8019ff6:	454c      	cmp	r4, r9
 8019ff8:	d206      	bcs.n	801a008 <__hexnan+0x64>
 8019ffa:	2d07      	cmp	r5, #7
 8019ffc:	dc04      	bgt.n	801a008 <__hexnan+0x64>
 8019ffe:	462a      	mov	r2, r5
 801a000:	4649      	mov	r1, r9
 801a002:	4620      	mov	r0, r4
 801a004:	f7ff ffa8 	bl	8019f58 <L_shift>
 801a008:	4544      	cmp	r4, r8
 801a00a:	d950      	bls.n	801a0ae <__hexnan+0x10a>
 801a00c:	2300      	movs	r3, #0
 801a00e:	f1a4 0904 	sub.w	r9, r4, #4
 801a012:	f844 3c04 	str.w	r3, [r4, #-4]
 801a016:	f8cd b008 	str.w	fp, [sp, #8]
 801a01a:	464c      	mov	r4, r9
 801a01c:	461d      	mov	r5, r3
 801a01e:	9903      	ldr	r1, [sp, #12]
 801a020:	e7d7      	b.n	8019fd2 <__hexnan+0x2e>
 801a022:	2a29      	cmp	r2, #41	; 0x29
 801a024:	d156      	bne.n	801a0d4 <__hexnan+0x130>
 801a026:	3102      	adds	r1, #2
 801a028:	f8ca 1000 	str.w	r1, [sl]
 801a02c:	f1bb 0f00 	cmp.w	fp, #0
 801a030:	d050      	beq.n	801a0d4 <__hexnan+0x130>
 801a032:	454c      	cmp	r4, r9
 801a034:	d206      	bcs.n	801a044 <__hexnan+0xa0>
 801a036:	2d07      	cmp	r5, #7
 801a038:	dc04      	bgt.n	801a044 <__hexnan+0xa0>
 801a03a:	462a      	mov	r2, r5
 801a03c:	4649      	mov	r1, r9
 801a03e:	4620      	mov	r0, r4
 801a040:	f7ff ff8a 	bl	8019f58 <L_shift>
 801a044:	4544      	cmp	r4, r8
 801a046:	d934      	bls.n	801a0b2 <__hexnan+0x10e>
 801a048:	f1a8 0204 	sub.w	r2, r8, #4
 801a04c:	4623      	mov	r3, r4
 801a04e:	f853 1b04 	ldr.w	r1, [r3], #4
 801a052:	f842 1f04 	str.w	r1, [r2, #4]!
 801a056:	429f      	cmp	r7, r3
 801a058:	d2f9      	bcs.n	801a04e <__hexnan+0xaa>
 801a05a:	1b3b      	subs	r3, r7, r4
 801a05c:	f023 0303 	bic.w	r3, r3, #3
 801a060:	3304      	adds	r3, #4
 801a062:	3401      	adds	r4, #1
 801a064:	3e03      	subs	r6, #3
 801a066:	42b4      	cmp	r4, r6
 801a068:	bf88      	it	hi
 801a06a:	2304      	movhi	r3, #4
 801a06c:	4443      	add	r3, r8
 801a06e:	2200      	movs	r2, #0
 801a070:	f843 2b04 	str.w	r2, [r3], #4
 801a074:	429f      	cmp	r7, r3
 801a076:	d2fb      	bcs.n	801a070 <__hexnan+0xcc>
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	b91b      	cbnz	r3, 801a084 <__hexnan+0xe0>
 801a07c:	4547      	cmp	r7, r8
 801a07e:	d127      	bne.n	801a0d0 <__hexnan+0x12c>
 801a080:	2301      	movs	r3, #1
 801a082:	603b      	str	r3, [r7, #0]
 801a084:	2005      	movs	r0, #5
 801a086:	e026      	b.n	801a0d6 <__hexnan+0x132>
 801a088:	3501      	adds	r5, #1
 801a08a:	2d08      	cmp	r5, #8
 801a08c:	f10b 0b01 	add.w	fp, fp, #1
 801a090:	dd06      	ble.n	801a0a0 <__hexnan+0xfc>
 801a092:	4544      	cmp	r4, r8
 801a094:	d9c3      	bls.n	801a01e <__hexnan+0x7a>
 801a096:	2300      	movs	r3, #0
 801a098:	f844 3c04 	str.w	r3, [r4, #-4]
 801a09c:	2501      	movs	r5, #1
 801a09e:	3c04      	subs	r4, #4
 801a0a0:	6822      	ldr	r2, [r4, #0]
 801a0a2:	f000 000f 	and.w	r0, r0, #15
 801a0a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a0aa:	6022      	str	r2, [r4, #0]
 801a0ac:	e7b7      	b.n	801a01e <__hexnan+0x7a>
 801a0ae:	2508      	movs	r5, #8
 801a0b0:	e7b5      	b.n	801a01e <__hexnan+0x7a>
 801a0b2:	9b01      	ldr	r3, [sp, #4]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d0df      	beq.n	801a078 <__hexnan+0xd4>
 801a0b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a0bc:	f1c3 0320 	rsb	r3, r3, #32
 801a0c0:	fa22 f303 	lsr.w	r3, r2, r3
 801a0c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a0c8:	401a      	ands	r2, r3
 801a0ca:	f846 2c04 	str.w	r2, [r6, #-4]
 801a0ce:	e7d3      	b.n	801a078 <__hexnan+0xd4>
 801a0d0:	3f04      	subs	r7, #4
 801a0d2:	e7d1      	b.n	801a078 <__hexnan+0xd4>
 801a0d4:	2004      	movs	r0, #4
 801a0d6:	b007      	add	sp, #28
 801a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0dc <_localeconv_r>:
 801a0dc:	4800      	ldr	r0, [pc, #0]	; (801a0e0 <_localeconv_r+0x4>)
 801a0de:	4770      	bx	lr
 801a0e0:	20000724 	.word	0x20000724

0801a0e4 <__retarget_lock_init_recursive>:
 801a0e4:	4770      	bx	lr

0801a0e6 <__retarget_lock_acquire_recursive>:
 801a0e6:	4770      	bx	lr

0801a0e8 <__retarget_lock_release_recursive>:
 801a0e8:	4770      	bx	lr

0801a0ea <__swhatbuf_r>:
 801a0ea:	b570      	push	{r4, r5, r6, lr}
 801a0ec:	460e      	mov	r6, r1
 801a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f2:	2900      	cmp	r1, #0
 801a0f4:	b096      	sub	sp, #88	; 0x58
 801a0f6:	4614      	mov	r4, r2
 801a0f8:	461d      	mov	r5, r3
 801a0fa:	da07      	bge.n	801a10c <__swhatbuf_r+0x22>
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	602b      	str	r3, [r5, #0]
 801a100:	89b3      	ldrh	r3, [r6, #12]
 801a102:	061a      	lsls	r2, r3, #24
 801a104:	d410      	bmi.n	801a128 <__swhatbuf_r+0x3e>
 801a106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a10a:	e00e      	b.n	801a12a <__swhatbuf_r+0x40>
 801a10c:	466a      	mov	r2, sp
 801a10e:	f001 f929 	bl	801b364 <_fstat_r>
 801a112:	2800      	cmp	r0, #0
 801a114:	dbf2      	blt.n	801a0fc <__swhatbuf_r+0x12>
 801a116:	9a01      	ldr	r2, [sp, #4]
 801a118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a11c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a120:	425a      	negs	r2, r3
 801a122:	415a      	adcs	r2, r3
 801a124:	602a      	str	r2, [r5, #0]
 801a126:	e7ee      	b.n	801a106 <__swhatbuf_r+0x1c>
 801a128:	2340      	movs	r3, #64	; 0x40
 801a12a:	2000      	movs	r0, #0
 801a12c:	6023      	str	r3, [r4, #0]
 801a12e:	b016      	add	sp, #88	; 0x58
 801a130:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a134 <__smakebuf_r>:
 801a134:	898b      	ldrh	r3, [r1, #12]
 801a136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a138:	079d      	lsls	r5, r3, #30
 801a13a:	4606      	mov	r6, r0
 801a13c:	460c      	mov	r4, r1
 801a13e:	d507      	bpl.n	801a150 <__smakebuf_r+0x1c>
 801a140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a144:	6023      	str	r3, [r4, #0]
 801a146:	6123      	str	r3, [r4, #16]
 801a148:	2301      	movs	r3, #1
 801a14a:	6163      	str	r3, [r4, #20]
 801a14c:	b002      	add	sp, #8
 801a14e:	bd70      	pop	{r4, r5, r6, pc}
 801a150:	ab01      	add	r3, sp, #4
 801a152:	466a      	mov	r2, sp
 801a154:	f7ff ffc9 	bl	801a0ea <__swhatbuf_r>
 801a158:	9900      	ldr	r1, [sp, #0]
 801a15a:	4605      	mov	r5, r0
 801a15c:	4630      	mov	r0, r6
 801a15e:	f000 fd5d 	bl	801ac1c <_malloc_r>
 801a162:	b948      	cbnz	r0, 801a178 <__smakebuf_r+0x44>
 801a164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a168:	059a      	lsls	r2, r3, #22
 801a16a:	d4ef      	bmi.n	801a14c <__smakebuf_r+0x18>
 801a16c:	f023 0303 	bic.w	r3, r3, #3
 801a170:	f043 0302 	orr.w	r3, r3, #2
 801a174:	81a3      	strh	r3, [r4, #12]
 801a176:	e7e3      	b.n	801a140 <__smakebuf_r+0xc>
 801a178:	4b0d      	ldr	r3, [pc, #52]	; (801a1b0 <__smakebuf_r+0x7c>)
 801a17a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a17c:	89a3      	ldrh	r3, [r4, #12]
 801a17e:	6020      	str	r0, [r4, #0]
 801a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a184:	81a3      	strh	r3, [r4, #12]
 801a186:	9b00      	ldr	r3, [sp, #0]
 801a188:	6163      	str	r3, [r4, #20]
 801a18a:	9b01      	ldr	r3, [sp, #4]
 801a18c:	6120      	str	r0, [r4, #16]
 801a18e:	b15b      	cbz	r3, 801a1a8 <__smakebuf_r+0x74>
 801a190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a194:	4630      	mov	r0, r6
 801a196:	f001 f8f7 	bl	801b388 <_isatty_r>
 801a19a:	b128      	cbz	r0, 801a1a8 <__smakebuf_r+0x74>
 801a19c:	89a3      	ldrh	r3, [r4, #12]
 801a19e:	f023 0303 	bic.w	r3, r3, #3
 801a1a2:	f043 0301 	orr.w	r3, r3, #1
 801a1a6:	81a3      	strh	r3, [r4, #12]
 801a1a8:	89a0      	ldrh	r0, [r4, #12]
 801a1aa:	4305      	orrs	r5, r0
 801a1ac:	81a5      	strh	r5, [r4, #12]
 801a1ae:	e7cd      	b.n	801a14c <__smakebuf_r+0x18>
 801a1b0:	08019839 	.word	0x08019839

0801a1b4 <malloc>:
 801a1b4:	4b02      	ldr	r3, [pc, #8]	; (801a1c0 <malloc+0xc>)
 801a1b6:	4601      	mov	r1, r0
 801a1b8:	6818      	ldr	r0, [r3, #0]
 801a1ba:	f000 bd2f 	b.w	801ac1c <_malloc_r>
 801a1be:	bf00      	nop
 801a1c0:	200005cc 	.word	0x200005cc

0801a1c4 <__ascii_mbtowc>:
 801a1c4:	b082      	sub	sp, #8
 801a1c6:	b901      	cbnz	r1, 801a1ca <__ascii_mbtowc+0x6>
 801a1c8:	a901      	add	r1, sp, #4
 801a1ca:	b142      	cbz	r2, 801a1de <__ascii_mbtowc+0x1a>
 801a1cc:	b14b      	cbz	r3, 801a1e2 <__ascii_mbtowc+0x1e>
 801a1ce:	7813      	ldrb	r3, [r2, #0]
 801a1d0:	600b      	str	r3, [r1, #0]
 801a1d2:	7812      	ldrb	r2, [r2, #0]
 801a1d4:	1e10      	subs	r0, r2, #0
 801a1d6:	bf18      	it	ne
 801a1d8:	2001      	movne	r0, #1
 801a1da:	b002      	add	sp, #8
 801a1dc:	4770      	bx	lr
 801a1de:	4610      	mov	r0, r2
 801a1e0:	e7fb      	b.n	801a1da <__ascii_mbtowc+0x16>
 801a1e2:	f06f 0001 	mvn.w	r0, #1
 801a1e6:	e7f8      	b.n	801a1da <__ascii_mbtowc+0x16>

0801a1e8 <_Balloc>:
 801a1e8:	b570      	push	{r4, r5, r6, lr}
 801a1ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	460d      	mov	r5, r1
 801a1f0:	b976      	cbnz	r6, 801a210 <_Balloc+0x28>
 801a1f2:	2010      	movs	r0, #16
 801a1f4:	f7ff ffde 	bl	801a1b4 <malloc>
 801a1f8:	4602      	mov	r2, r0
 801a1fa:	6260      	str	r0, [r4, #36]	; 0x24
 801a1fc:	b920      	cbnz	r0, 801a208 <_Balloc+0x20>
 801a1fe:	4b18      	ldr	r3, [pc, #96]	; (801a260 <_Balloc+0x78>)
 801a200:	4818      	ldr	r0, [pc, #96]	; (801a264 <_Balloc+0x7c>)
 801a202:	2166      	movs	r1, #102	; 0x66
 801a204:	f7fe fb94 	bl	8018930 <__assert_func>
 801a208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a20c:	6006      	str	r6, [r0, #0]
 801a20e:	60c6      	str	r6, [r0, #12]
 801a210:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a212:	68f3      	ldr	r3, [r6, #12]
 801a214:	b183      	cbz	r3, 801a238 <_Balloc+0x50>
 801a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a218:	68db      	ldr	r3, [r3, #12]
 801a21a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a21e:	b9b8      	cbnz	r0, 801a250 <_Balloc+0x68>
 801a220:	2101      	movs	r1, #1
 801a222:	fa01 f605 	lsl.w	r6, r1, r5
 801a226:	1d72      	adds	r2, r6, #5
 801a228:	0092      	lsls	r2, r2, #2
 801a22a:	4620      	mov	r0, r4
 801a22c:	f000 fc97 	bl	801ab5e <_calloc_r>
 801a230:	b160      	cbz	r0, 801a24c <_Balloc+0x64>
 801a232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a236:	e00e      	b.n	801a256 <_Balloc+0x6e>
 801a238:	2221      	movs	r2, #33	; 0x21
 801a23a:	2104      	movs	r1, #4
 801a23c:	4620      	mov	r0, r4
 801a23e:	f000 fc8e 	bl	801ab5e <_calloc_r>
 801a242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a244:	60f0      	str	r0, [r6, #12]
 801a246:	68db      	ldr	r3, [r3, #12]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d1e4      	bne.n	801a216 <_Balloc+0x2e>
 801a24c:	2000      	movs	r0, #0
 801a24e:	bd70      	pop	{r4, r5, r6, pc}
 801a250:	6802      	ldr	r2, [r0, #0]
 801a252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a256:	2300      	movs	r3, #0
 801a258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a25c:	e7f7      	b.n	801a24e <_Balloc+0x66>
 801a25e:	bf00      	nop
 801a260:	08033b68 	.word	0x08033b68
 801a264:	08033e2c 	.word	0x08033e2c

0801a268 <_Bfree>:
 801a268:	b570      	push	{r4, r5, r6, lr}
 801a26a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a26c:	4605      	mov	r5, r0
 801a26e:	460c      	mov	r4, r1
 801a270:	b976      	cbnz	r6, 801a290 <_Bfree+0x28>
 801a272:	2010      	movs	r0, #16
 801a274:	f7ff ff9e 	bl	801a1b4 <malloc>
 801a278:	4602      	mov	r2, r0
 801a27a:	6268      	str	r0, [r5, #36]	; 0x24
 801a27c:	b920      	cbnz	r0, 801a288 <_Bfree+0x20>
 801a27e:	4b09      	ldr	r3, [pc, #36]	; (801a2a4 <_Bfree+0x3c>)
 801a280:	4809      	ldr	r0, [pc, #36]	; (801a2a8 <_Bfree+0x40>)
 801a282:	218a      	movs	r1, #138	; 0x8a
 801a284:	f7fe fb54 	bl	8018930 <__assert_func>
 801a288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a28c:	6006      	str	r6, [r0, #0]
 801a28e:	60c6      	str	r6, [r0, #12]
 801a290:	b13c      	cbz	r4, 801a2a2 <_Bfree+0x3a>
 801a292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a294:	6862      	ldr	r2, [r4, #4]
 801a296:	68db      	ldr	r3, [r3, #12]
 801a298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a29c:	6021      	str	r1, [r4, #0]
 801a29e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a2a2:	bd70      	pop	{r4, r5, r6, pc}
 801a2a4:	08033b68 	.word	0x08033b68
 801a2a8:	08033e2c 	.word	0x08033e2c

0801a2ac <__multadd>:
 801a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2b0:	690e      	ldr	r6, [r1, #16]
 801a2b2:	4607      	mov	r7, r0
 801a2b4:	4698      	mov	r8, r3
 801a2b6:	460c      	mov	r4, r1
 801a2b8:	f101 0014 	add.w	r0, r1, #20
 801a2bc:	2300      	movs	r3, #0
 801a2be:	6805      	ldr	r5, [r0, #0]
 801a2c0:	b2a9      	uxth	r1, r5
 801a2c2:	fb02 8101 	mla	r1, r2, r1, r8
 801a2c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a2ca:	0c2d      	lsrs	r5, r5, #16
 801a2cc:	fb02 c505 	mla	r5, r2, r5, ip
 801a2d0:	b289      	uxth	r1, r1
 801a2d2:	3301      	adds	r3, #1
 801a2d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a2d8:	429e      	cmp	r6, r3
 801a2da:	f840 1b04 	str.w	r1, [r0], #4
 801a2de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a2e2:	dcec      	bgt.n	801a2be <__multadd+0x12>
 801a2e4:	f1b8 0f00 	cmp.w	r8, #0
 801a2e8:	d022      	beq.n	801a330 <__multadd+0x84>
 801a2ea:	68a3      	ldr	r3, [r4, #8]
 801a2ec:	42b3      	cmp	r3, r6
 801a2ee:	dc19      	bgt.n	801a324 <__multadd+0x78>
 801a2f0:	6861      	ldr	r1, [r4, #4]
 801a2f2:	4638      	mov	r0, r7
 801a2f4:	3101      	adds	r1, #1
 801a2f6:	f7ff ff77 	bl	801a1e8 <_Balloc>
 801a2fa:	4605      	mov	r5, r0
 801a2fc:	b928      	cbnz	r0, 801a30a <__multadd+0x5e>
 801a2fe:	4602      	mov	r2, r0
 801a300:	4b0d      	ldr	r3, [pc, #52]	; (801a338 <__multadd+0x8c>)
 801a302:	480e      	ldr	r0, [pc, #56]	; (801a33c <__multadd+0x90>)
 801a304:	21b5      	movs	r1, #181	; 0xb5
 801a306:	f7fe fb13 	bl	8018930 <__assert_func>
 801a30a:	6922      	ldr	r2, [r4, #16]
 801a30c:	3202      	adds	r2, #2
 801a30e:	f104 010c 	add.w	r1, r4, #12
 801a312:	0092      	lsls	r2, r2, #2
 801a314:	300c      	adds	r0, #12
 801a316:	f7fc fd0d 	bl	8016d34 <memcpy>
 801a31a:	4621      	mov	r1, r4
 801a31c:	4638      	mov	r0, r7
 801a31e:	f7ff ffa3 	bl	801a268 <_Bfree>
 801a322:	462c      	mov	r4, r5
 801a324:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a328:	3601      	adds	r6, #1
 801a32a:	f8c3 8014 	str.w	r8, [r3, #20]
 801a32e:	6126      	str	r6, [r4, #16]
 801a330:	4620      	mov	r0, r4
 801a332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a336:	bf00      	nop
 801a338:	08033d39 	.word	0x08033d39
 801a33c:	08033e2c 	.word	0x08033e2c

0801a340 <__s2b>:
 801a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a344:	460c      	mov	r4, r1
 801a346:	4615      	mov	r5, r2
 801a348:	461f      	mov	r7, r3
 801a34a:	2209      	movs	r2, #9
 801a34c:	3308      	adds	r3, #8
 801a34e:	4606      	mov	r6, r0
 801a350:	fb93 f3f2 	sdiv	r3, r3, r2
 801a354:	2100      	movs	r1, #0
 801a356:	2201      	movs	r2, #1
 801a358:	429a      	cmp	r2, r3
 801a35a:	db09      	blt.n	801a370 <__s2b+0x30>
 801a35c:	4630      	mov	r0, r6
 801a35e:	f7ff ff43 	bl	801a1e8 <_Balloc>
 801a362:	b940      	cbnz	r0, 801a376 <__s2b+0x36>
 801a364:	4602      	mov	r2, r0
 801a366:	4b19      	ldr	r3, [pc, #100]	; (801a3cc <__s2b+0x8c>)
 801a368:	4819      	ldr	r0, [pc, #100]	; (801a3d0 <__s2b+0x90>)
 801a36a:	21ce      	movs	r1, #206	; 0xce
 801a36c:	f7fe fae0 	bl	8018930 <__assert_func>
 801a370:	0052      	lsls	r2, r2, #1
 801a372:	3101      	adds	r1, #1
 801a374:	e7f0      	b.n	801a358 <__s2b+0x18>
 801a376:	9b08      	ldr	r3, [sp, #32]
 801a378:	6143      	str	r3, [r0, #20]
 801a37a:	2d09      	cmp	r5, #9
 801a37c:	f04f 0301 	mov.w	r3, #1
 801a380:	6103      	str	r3, [r0, #16]
 801a382:	dd16      	ble.n	801a3b2 <__s2b+0x72>
 801a384:	f104 0909 	add.w	r9, r4, #9
 801a388:	46c8      	mov	r8, r9
 801a38a:	442c      	add	r4, r5
 801a38c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a390:	4601      	mov	r1, r0
 801a392:	3b30      	subs	r3, #48	; 0x30
 801a394:	220a      	movs	r2, #10
 801a396:	4630      	mov	r0, r6
 801a398:	f7ff ff88 	bl	801a2ac <__multadd>
 801a39c:	45a0      	cmp	r8, r4
 801a39e:	d1f5      	bne.n	801a38c <__s2b+0x4c>
 801a3a0:	f1a5 0408 	sub.w	r4, r5, #8
 801a3a4:	444c      	add	r4, r9
 801a3a6:	1b2d      	subs	r5, r5, r4
 801a3a8:	1963      	adds	r3, r4, r5
 801a3aa:	42bb      	cmp	r3, r7
 801a3ac:	db04      	blt.n	801a3b8 <__s2b+0x78>
 801a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3b2:	340a      	adds	r4, #10
 801a3b4:	2509      	movs	r5, #9
 801a3b6:	e7f6      	b.n	801a3a6 <__s2b+0x66>
 801a3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a3bc:	4601      	mov	r1, r0
 801a3be:	3b30      	subs	r3, #48	; 0x30
 801a3c0:	220a      	movs	r2, #10
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	f7ff ff72 	bl	801a2ac <__multadd>
 801a3c8:	e7ee      	b.n	801a3a8 <__s2b+0x68>
 801a3ca:	bf00      	nop
 801a3cc:	08033d39 	.word	0x08033d39
 801a3d0:	08033e2c 	.word	0x08033e2c

0801a3d4 <__hi0bits>:
 801a3d4:	0c03      	lsrs	r3, r0, #16
 801a3d6:	041b      	lsls	r3, r3, #16
 801a3d8:	b9d3      	cbnz	r3, 801a410 <__hi0bits+0x3c>
 801a3da:	0400      	lsls	r0, r0, #16
 801a3dc:	2310      	movs	r3, #16
 801a3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a3e2:	bf04      	itt	eq
 801a3e4:	0200      	lsleq	r0, r0, #8
 801a3e6:	3308      	addeq	r3, #8
 801a3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a3ec:	bf04      	itt	eq
 801a3ee:	0100      	lsleq	r0, r0, #4
 801a3f0:	3304      	addeq	r3, #4
 801a3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a3f6:	bf04      	itt	eq
 801a3f8:	0080      	lsleq	r0, r0, #2
 801a3fa:	3302      	addeq	r3, #2
 801a3fc:	2800      	cmp	r0, #0
 801a3fe:	db05      	blt.n	801a40c <__hi0bits+0x38>
 801a400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a404:	f103 0301 	add.w	r3, r3, #1
 801a408:	bf08      	it	eq
 801a40a:	2320      	moveq	r3, #32
 801a40c:	4618      	mov	r0, r3
 801a40e:	4770      	bx	lr
 801a410:	2300      	movs	r3, #0
 801a412:	e7e4      	b.n	801a3de <__hi0bits+0xa>

0801a414 <__lo0bits>:
 801a414:	6803      	ldr	r3, [r0, #0]
 801a416:	f013 0207 	ands.w	r2, r3, #7
 801a41a:	4601      	mov	r1, r0
 801a41c:	d00b      	beq.n	801a436 <__lo0bits+0x22>
 801a41e:	07da      	lsls	r2, r3, #31
 801a420:	d424      	bmi.n	801a46c <__lo0bits+0x58>
 801a422:	0798      	lsls	r0, r3, #30
 801a424:	bf49      	itett	mi
 801a426:	085b      	lsrmi	r3, r3, #1
 801a428:	089b      	lsrpl	r3, r3, #2
 801a42a:	2001      	movmi	r0, #1
 801a42c:	600b      	strmi	r3, [r1, #0]
 801a42e:	bf5c      	itt	pl
 801a430:	600b      	strpl	r3, [r1, #0]
 801a432:	2002      	movpl	r0, #2
 801a434:	4770      	bx	lr
 801a436:	b298      	uxth	r0, r3
 801a438:	b9b0      	cbnz	r0, 801a468 <__lo0bits+0x54>
 801a43a:	0c1b      	lsrs	r3, r3, #16
 801a43c:	2010      	movs	r0, #16
 801a43e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a442:	bf04      	itt	eq
 801a444:	0a1b      	lsreq	r3, r3, #8
 801a446:	3008      	addeq	r0, #8
 801a448:	071a      	lsls	r2, r3, #28
 801a44a:	bf04      	itt	eq
 801a44c:	091b      	lsreq	r3, r3, #4
 801a44e:	3004      	addeq	r0, #4
 801a450:	079a      	lsls	r2, r3, #30
 801a452:	bf04      	itt	eq
 801a454:	089b      	lsreq	r3, r3, #2
 801a456:	3002      	addeq	r0, #2
 801a458:	07da      	lsls	r2, r3, #31
 801a45a:	d403      	bmi.n	801a464 <__lo0bits+0x50>
 801a45c:	085b      	lsrs	r3, r3, #1
 801a45e:	f100 0001 	add.w	r0, r0, #1
 801a462:	d005      	beq.n	801a470 <__lo0bits+0x5c>
 801a464:	600b      	str	r3, [r1, #0]
 801a466:	4770      	bx	lr
 801a468:	4610      	mov	r0, r2
 801a46a:	e7e8      	b.n	801a43e <__lo0bits+0x2a>
 801a46c:	2000      	movs	r0, #0
 801a46e:	4770      	bx	lr
 801a470:	2020      	movs	r0, #32
 801a472:	4770      	bx	lr

0801a474 <__i2b>:
 801a474:	b510      	push	{r4, lr}
 801a476:	460c      	mov	r4, r1
 801a478:	2101      	movs	r1, #1
 801a47a:	f7ff feb5 	bl	801a1e8 <_Balloc>
 801a47e:	4602      	mov	r2, r0
 801a480:	b928      	cbnz	r0, 801a48e <__i2b+0x1a>
 801a482:	4b05      	ldr	r3, [pc, #20]	; (801a498 <__i2b+0x24>)
 801a484:	4805      	ldr	r0, [pc, #20]	; (801a49c <__i2b+0x28>)
 801a486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a48a:	f7fe fa51 	bl	8018930 <__assert_func>
 801a48e:	2301      	movs	r3, #1
 801a490:	6144      	str	r4, [r0, #20]
 801a492:	6103      	str	r3, [r0, #16]
 801a494:	bd10      	pop	{r4, pc}
 801a496:	bf00      	nop
 801a498:	08033d39 	.word	0x08033d39
 801a49c:	08033e2c 	.word	0x08033e2c

0801a4a0 <__multiply>:
 801a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4a4:	4614      	mov	r4, r2
 801a4a6:	690a      	ldr	r2, [r1, #16]
 801a4a8:	6923      	ldr	r3, [r4, #16]
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	bfb8      	it	lt
 801a4ae:	460b      	movlt	r3, r1
 801a4b0:	460d      	mov	r5, r1
 801a4b2:	bfbc      	itt	lt
 801a4b4:	4625      	movlt	r5, r4
 801a4b6:	461c      	movlt	r4, r3
 801a4b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a4bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a4c0:	68ab      	ldr	r3, [r5, #8]
 801a4c2:	6869      	ldr	r1, [r5, #4]
 801a4c4:	eb0a 0709 	add.w	r7, sl, r9
 801a4c8:	42bb      	cmp	r3, r7
 801a4ca:	b085      	sub	sp, #20
 801a4cc:	bfb8      	it	lt
 801a4ce:	3101      	addlt	r1, #1
 801a4d0:	f7ff fe8a 	bl	801a1e8 <_Balloc>
 801a4d4:	b930      	cbnz	r0, 801a4e4 <__multiply+0x44>
 801a4d6:	4602      	mov	r2, r0
 801a4d8:	4b42      	ldr	r3, [pc, #264]	; (801a5e4 <__multiply+0x144>)
 801a4da:	4843      	ldr	r0, [pc, #268]	; (801a5e8 <__multiply+0x148>)
 801a4dc:	f240 115d 	movw	r1, #349	; 0x15d
 801a4e0:	f7fe fa26 	bl	8018930 <__assert_func>
 801a4e4:	f100 0614 	add.w	r6, r0, #20
 801a4e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a4ec:	4633      	mov	r3, r6
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	4543      	cmp	r3, r8
 801a4f2:	d31e      	bcc.n	801a532 <__multiply+0x92>
 801a4f4:	f105 0c14 	add.w	ip, r5, #20
 801a4f8:	f104 0314 	add.w	r3, r4, #20
 801a4fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a500:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a504:	9202      	str	r2, [sp, #8]
 801a506:	ebac 0205 	sub.w	r2, ip, r5
 801a50a:	3a15      	subs	r2, #21
 801a50c:	f022 0203 	bic.w	r2, r2, #3
 801a510:	3204      	adds	r2, #4
 801a512:	f105 0115 	add.w	r1, r5, #21
 801a516:	458c      	cmp	ip, r1
 801a518:	bf38      	it	cc
 801a51a:	2204      	movcc	r2, #4
 801a51c:	9201      	str	r2, [sp, #4]
 801a51e:	9a02      	ldr	r2, [sp, #8]
 801a520:	9303      	str	r3, [sp, #12]
 801a522:	429a      	cmp	r2, r3
 801a524:	d808      	bhi.n	801a538 <__multiply+0x98>
 801a526:	2f00      	cmp	r7, #0
 801a528:	dc55      	bgt.n	801a5d6 <__multiply+0x136>
 801a52a:	6107      	str	r7, [r0, #16]
 801a52c:	b005      	add	sp, #20
 801a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a532:	f843 2b04 	str.w	r2, [r3], #4
 801a536:	e7db      	b.n	801a4f0 <__multiply+0x50>
 801a538:	f8b3 a000 	ldrh.w	sl, [r3]
 801a53c:	f1ba 0f00 	cmp.w	sl, #0
 801a540:	d020      	beq.n	801a584 <__multiply+0xe4>
 801a542:	f105 0e14 	add.w	lr, r5, #20
 801a546:	46b1      	mov	r9, r6
 801a548:	2200      	movs	r2, #0
 801a54a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a54e:	f8d9 b000 	ldr.w	fp, [r9]
 801a552:	b2a1      	uxth	r1, r4
 801a554:	fa1f fb8b 	uxth.w	fp, fp
 801a558:	fb0a b101 	mla	r1, sl, r1, fp
 801a55c:	4411      	add	r1, r2
 801a55e:	f8d9 2000 	ldr.w	r2, [r9]
 801a562:	0c24      	lsrs	r4, r4, #16
 801a564:	0c12      	lsrs	r2, r2, #16
 801a566:	fb0a 2404 	mla	r4, sl, r4, r2
 801a56a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a56e:	b289      	uxth	r1, r1
 801a570:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a574:	45f4      	cmp	ip, lr
 801a576:	f849 1b04 	str.w	r1, [r9], #4
 801a57a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a57e:	d8e4      	bhi.n	801a54a <__multiply+0xaa>
 801a580:	9901      	ldr	r1, [sp, #4]
 801a582:	5072      	str	r2, [r6, r1]
 801a584:	9a03      	ldr	r2, [sp, #12]
 801a586:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a58a:	3304      	adds	r3, #4
 801a58c:	f1b9 0f00 	cmp.w	r9, #0
 801a590:	d01f      	beq.n	801a5d2 <__multiply+0x132>
 801a592:	6834      	ldr	r4, [r6, #0]
 801a594:	f105 0114 	add.w	r1, r5, #20
 801a598:	46b6      	mov	lr, r6
 801a59a:	f04f 0a00 	mov.w	sl, #0
 801a59e:	880a      	ldrh	r2, [r1, #0]
 801a5a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a5a4:	fb09 b202 	mla	r2, r9, r2, fp
 801a5a8:	4492      	add	sl, r2
 801a5aa:	b2a4      	uxth	r4, r4
 801a5ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a5b0:	f84e 4b04 	str.w	r4, [lr], #4
 801a5b4:	f851 4b04 	ldr.w	r4, [r1], #4
 801a5b8:	f8be 2000 	ldrh.w	r2, [lr]
 801a5bc:	0c24      	lsrs	r4, r4, #16
 801a5be:	fb09 2404 	mla	r4, r9, r4, r2
 801a5c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a5c6:	458c      	cmp	ip, r1
 801a5c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a5cc:	d8e7      	bhi.n	801a59e <__multiply+0xfe>
 801a5ce:	9a01      	ldr	r2, [sp, #4]
 801a5d0:	50b4      	str	r4, [r6, r2]
 801a5d2:	3604      	adds	r6, #4
 801a5d4:	e7a3      	b.n	801a51e <__multiply+0x7e>
 801a5d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d1a5      	bne.n	801a52a <__multiply+0x8a>
 801a5de:	3f01      	subs	r7, #1
 801a5e0:	e7a1      	b.n	801a526 <__multiply+0x86>
 801a5e2:	bf00      	nop
 801a5e4:	08033d39 	.word	0x08033d39
 801a5e8:	08033e2c 	.word	0x08033e2c

0801a5ec <__pow5mult>:
 801a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5f0:	4615      	mov	r5, r2
 801a5f2:	f012 0203 	ands.w	r2, r2, #3
 801a5f6:	4606      	mov	r6, r0
 801a5f8:	460f      	mov	r7, r1
 801a5fa:	d007      	beq.n	801a60c <__pow5mult+0x20>
 801a5fc:	4c25      	ldr	r4, [pc, #148]	; (801a694 <__pow5mult+0xa8>)
 801a5fe:	3a01      	subs	r2, #1
 801a600:	2300      	movs	r3, #0
 801a602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a606:	f7ff fe51 	bl	801a2ac <__multadd>
 801a60a:	4607      	mov	r7, r0
 801a60c:	10ad      	asrs	r5, r5, #2
 801a60e:	d03d      	beq.n	801a68c <__pow5mult+0xa0>
 801a610:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a612:	b97c      	cbnz	r4, 801a634 <__pow5mult+0x48>
 801a614:	2010      	movs	r0, #16
 801a616:	f7ff fdcd 	bl	801a1b4 <malloc>
 801a61a:	4602      	mov	r2, r0
 801a61c:	6270      	str	r0, [r6, #36]	; 0x24
 801a61e:	b928      	cbnz	r0, 801a62c <__pow5mult+0x40>
 801a620:	4b1d      	ldr	r3, [pc, #116]	; (801a698 <__pow5mult+0xac>)
 801a622:	481e      	ldr	r0, [pc, #120]	; (801a69c <__pow5mult+0xb0>)
 801a624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a628:	f7fe f982 	bl	8018930 <__assert_func>
 801a62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a630:	6004      	str	r4, [r0, #0]
 801a632:	60c4      	str	r4, [r0, #12]
 801a634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a63c:	b94c      	cbnz	r4, 801a652 <__pow5mult+0x66>
 801a63e:	f240 2171 	movw	r1, #625	; 0x271
 801a642:	4630      	mov	r0, r6
 801a644:	f7ff ff16 	bl	801a474 <__i2b>
 801a648:	2300      	movs	r3, #0
 801a64a:	f8c8 0008 	str.w	r0, [r8, #8]
 801a64e:	4604      	mov	r4, r0
 801a650:	6003      	str	r3, [r0, #0]
 801a652:	f04f 0900 	mov.w	r9, #0
 801a656:	07eb      	lsls	r3, r5, #31
 801a658:	d50a      	bpl.n	801a670 <__pow5mult+0x84>
 801a65a:	4639      	mov	r1, r7
 801a65c:	4622      	mov	r2, r4
 801a65e:	4630      	mov	r0, r6
 801a660:	f7ff ff1e 	bl	801a4a0 <__multiply>
 801a664:	4639      	mov	r1, r7
 801a666:	4680      	mov	r8, r0
 801a668:	4630      	mov	r0, r6
 801a66a:	f7ff fdfd 	bl	801a268 <_Bfree>
 801a66e:	4647      	mov	r7, r8
 801a670:	106d      	asrs	r5, r5, #1
 801a672:	d00b      	beq.n	801a68c <__pow5mult+0xa0>
 801a674:	6820      	ldr	r0, [r4, #0]
 801a676:	b938      	cbnz	r0, 801a688 <__pow5mult+0x9c>
 801a678:	4622      	mov	r2, r4
 801a67a:	4621      	mov	r1, r4
 801a67c:	4630      	mov	r0, r6
 801a67e:	f7ff ff0f 	bl	801a4a0 <__multiply>
 801a682:	6020      	str	r0, [r4, #0]
 801a684:	f8c0 9000 	str.w	r9, [r0]
 801a688:	4604      	mov	r4, r0
 801a68a:	e7e4      	b.n	801a656 <__pow5mult+0x6a>
 801a68c:	4638      	mov	r0, r7
 801a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a692:	bf00      	nop
 801a694:	08033f80 	.word	0x08033f80
 801a698:	08033b68 	.word	0x08033b68
 801a69c:	08033e2c 	.word	0x08033e2c

0801a6a0 <__lshift>:
 801a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6a4:	460c      	mov	r4, r1
 801a6a6:	6849      	ldr	r1, [r1, #4]
 801a6a8:	6923      	ldr	r3, [r4, #16]
 801a6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a6ae:	68a3      	ldr	r3, [r4, #8]
 801a6b0:	4607      	mov	r7, r0
 801a6b2:	4691      	mov	r9, r2
 801a6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a6b8:	f108 0601 	add.w	r6, r8, #1
 801a6bc:	42b3      	cmp	r3, r6
 801a6be:	db0b      	blt.n	801a6d8 <__lshift+0x38>
 801a6c0:	4638      	mov	r0, r7
 801a6c2:	f7ff fd91 	bl	801a1e8 <_Balloc>
 801a6c6:	4605      	mov	r5, r0
 801a6c8:	b948      	cbnz	r0, 801a6de <__lshift+0x3e>
 801a6ca:	4602      	mov	r2, r0
 801a6cc:	4b28      	ldr	r3, [pc, #160]	; (801a770 <__lshift+0xd0>)
 801a6ce:	4829      	ldr	r0, [pc, #164]	; (801a774 <__lshift+0xd4>)
 801a6d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a6d4:	f7fe f92c 	bl	8018930 <__assert_func>
 801a6d8:	3101      	adds	r1, #1
 801a6da:	005b      	lsls	r3, r3, #1
 801a6dc:	e7ee      	b.n	801a6bc <__lshift+0x1c>
 801a6de:	2300      	movs	r3, #0
 801a6e0:	f100 0114 	add.w	r1, r0, #20
 801a6e4:	f100 0210 	add.w	r2, r0, #16
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	4553      	cmp	r3, sl
 801a6ec:	db33      	blt.n	801a756 <__lshift+0xb6>
 801a6ee:	6920      	ldr	r0, [r4, #16]
 801a6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a6f4:	f104 0314 	add.w	r3, r4, #20
 801a6f8:	f019 091f 	ands.w	r9, r9, #31
 801a6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a704:	d02b      	beq.n	801a75e <__lshift+0xbe>
 801a706:	f1c9 0e20 	rsb	lr, r9, #32
 801a70a:	468a      	mov	sl, r1
 801a70c:	2200      	movs	r2, #0
 801a70e:	6818      	ldr	r0, [r3, #0]
 801a710:	fa00 f009 	lsl.w	r0, r0, r9
 801a714:	4302      	orrs	r2, r0
 801a716:	f84a 2b04 	str.w	r2, [sl], #4
 801a71a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a71e:	459c      	cmp	ip, r3
 801a720:	fa22 f20e 	lsr.w	r2, r2, lr
 801a724:	d8f3      	bhi.n	801a70e <__lshift+0x6e>
 801a726:	ebac 0304 	sub.w	r3, ip, r4
 801a72a:	3b15      	subs	r3, #21
 801a72c:	f023 0303 	bic.w	r3, r3, #3
 801a730:	3304      	adds	r3, #4
 801a732:	f104 0015 	add.w	r0, r4, #21
 801a736:	4584      	cmp	ip, r0
 801a738:	bf38      	it	cc
 801a73a:	2304      	movcc	r3, #4
 801a73c:	50ca      	str	r2, [r1, r3]
 801a73e:	b10a      	cbz	r2, 801a744 <__lshift+0xa4>
 801a740:	f108 0602 	add.w	r6, r8, #2
 801a744:	3e01      	subs	r6, #1
 801a746:	4638      	mov	r0, r7
 801a748:	612e      	str	r6, [r5, #16]
 801a74a:	4621      	mov	r1, r4
 801a74c:	f7ff fd8c 	bl	801a268 <_Bfree>
 801a750:	4628      	mov	r0, r5
 801a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a756:	f842 0f04 	str.w	r0, [r2, #4]!
 801a75a:	3301      	adds	r3, #1
 801a75c:	e7c5      	b.n	801a6ea <__lshift+0x4a>
 801a75e:	3904      	subs	r1, #4
 801a760:	f853 2b04 	ldr.w	r2, [r3], #4
 801a764:	f841 2f04 	str.w	r2, [r1, #4]!
 801a768:	459c      	cmp	ip, r3
 801a76a:	d8f9      	bhi.n	801a760 <__lshift+0xc0>
 801a76c:	e7ea      	b.n	801a744 <__lshift+0xa4>
 801a76e:	bf00      	nop
 801a770:	08033d39 	.word	0x08033d39
 801a774:	08033e2c 	.word	0x08033e2c

0801a778 <__mcmp>:
 801a778:	b530      	push	{r4, r5, lr}
 801a77a:	6902      	ldr	r2, [r0, #16]
 801a77c:	690c      	ldr	r4, [r1, #16]
 801a77e:	1b12      	subs	r2, r2, r4
 801a780:	d10e      	bne.n	801a7a0 <__mcmp+0x28>
 801a782:	f100 0314 	add.w	r3, r0, #20
 801a786:	3114      	adds	r1, #20
 801a788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a798:	42a5      	cmp	r5, r4
 801a79a:	d003      	beq.n	801a7a4 <__mcmp+0x2c>
 801a79c:	d305      	bcc.n	801a7aa <__mcmp+0x32>
 801a79e:	2201      	movs	r2, #1
 801a7a0:	4610      	mov	r0, r2
 801a7a2:	bd30      	pop	{r4, r5, pc}
 801a7a4:	4283      	cmp	r3, r0
 801a7a6:	d3f3      	bcc.n	801a790 <__mcmp+0x18>
 801a7a8:	e7fa      	b.n	801a7a0 <__mcmp+0x28>
 801a7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a7ae:	e7f7      	b.n	801a7a0 <__mcmp+0x28>

0801a7b0 <__mdiff>:
 801a7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b4:	460c      	mov	r4, r1
 801a7b6:	4606      	mov	r6, r0
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	4617      	mov	r7, r2
 801a7be:	f7ff ffdb 	bl	801a778 <__mcmp>
 801a7c2:	1e05      	subs	r5, r0, #0
 801a7c4:	d110      	bne.n	801a7e8 <__mdiff+0x38>
 801a7c6:	4629      	mov	r1, r5
 801a7c8:	4630      	mov	r0, r6
 801a7ca:	f7ff fd0d 	bl	801a1e8 <_Balloc>
 801a7ce:	b930      	cbnz	r0, 801a7de <__mdiff+0x2e>
 801a7d0:	4b39      	ldr	r3, [pc, #228]	; (801a8b8 <__mdiff+0x108>)
 801a7d2:	4602      	mov	r2, r0
 801a7d4:	f240 2132 	movw	r1, #562	; 0x232
 801a7d8:	4838      	ldr	r0, [pc, #224]	; (801a8bc <__mdiff+0x10c>)
 801a7da:	f7fe f8a9 	bl	8018930 <__assert_func>
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7e8:	bfa4      	itt	ge
 801a7ea:	463b      	movge	r3, r7
 801a7ec:	4627      	movge	r7, r4
 801a7ee:	4630      	mov	r0, r6
 801a7f0:	6879      	ldr	r1, [r7, #4]
 801a7f2:	bfa6      	itte	ge
 801a7f4:	461c      	movge	r4, r3
 801a7f6:	2500      	movge	r5, #0
 801a7f8:	2501      	movlt	r5, #1
 801a7fa:	f7ff fcf5 	bl	801a1e8 <_Balloc>
 801a7fe:	b920      	cbnz	r0, 801a80a <__mdiff+0x5a>
 801a800:	4b2d      	ldr	r3, [pc, #180]	; (801a8b8 <__mdiff+0x108>)
 801a802:	4602      	mov	r2, r0
 801a804:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a808:	e7e6      	b.n	801a7d8 <__mdiff+0x28>
 801a80a:	693e      	ldr	r6, [r7, #16]
 801a80c:	60c5      	str	r5, [r0, #12]
 801a80e:	6925      	ldr	r5, [r4, #16]
 801a810:	f107 0114 	add.w	r1, r7, #20
 801a814:	f104 0914 	add.w	r9, r4, #20
 801a818:	f100 0e14 	add.w	lr, r0, #20
 801a81c:	f107 0210 	add.w	r2, r7, #16
 801a820:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a824:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a828:	46f2      	mov	sl, lr
 801a82a:	2700      	movs	r7, #0
 801a82c:	f859 3b04 	ldr.w	r3, [r9], #4
 801a830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a834:	fa1f f883 	uxth.w	r8, r3
 801a838:	fa17 f78b 	uxtah	r7, r7, fp
 801a83c:	0c1b      	lsrs	r3, r3, #16
 801a83e:	eba7 0808 	sub.w	r8, r7, r8
 801a842:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a846:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a84a:	fa1f f888 	uxth.w	r8, r8
 801a84e:	141f      	asrs	r7, r3, #16
 801a850:	454d      	cmp	r5, r9
 801a852:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a856:	f84a 3b04 	str.w	r3, [sl], #4
 801a85a:	d8e7      	bhi.n	801a82c <__mdiff+0x7c>
 801a85c:	1b2b      	subs	r3, r5, r4
 801a85e:	3b15      	subs	r3, #21
 801a860:	f023 0303 	bic.w	r3, r3, #3
 801a864:	3304      	adds	r3, #4
 801a866:	3415      	adds	r4, #21
 801a868:	42a5      	cmp	r5, r4
 801a86a:	bf38      	it	cc
 801a86c:	2304      	movcc	r3, #4
 801a86e:	4419      	add	r1, r3
 801a870:	4473      	add	r3, lr
 801a872:	469e      	mov	lr, r3
 801a874:	460d      	mov	r5, r1
 801a876:	4565      	cmp	r5, ip
 801a878:	d30e      	bcc.n	801a898 <__mdiff+0xe8>
 801a87a:	f10c 0203 	add.w	r2, ip, #3
 801a87e:	1a52      	subs	r2, r2, r1
 801a880:	f022 0203 	bic.w	r2, r2, #3
 801a884:	3903      	subs	r1, #3
 801a886:	458c      	cmp	ip, r1
 801a888:	bf38      	it	cc
 801a88a:	2200      	movcc	r2, #0
 801a88c:	441a      	add	r2, r3
 801a88e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a892:	b17b      	cbz	r3, 801a8b4 <__mdiff+0x104>
 801a894:	6106      	str	r6, [r0, #16]
 801a896:	e7a5      	b.n	801a7e4 <__mdiff+0x34>
 801a898:	f855 8b04 	ldr.w	r8, [r5], #4
 801a89c:	fa17 f488 	uxtah	r4, r7, r8
 801a8a0:	1422      	asrs	r2, r4, #16
 801a8a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a8a6:	b2a4      	uxth	r4, r4
 801a8a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a8ac:	f84e 4b04 	str.w	r4, [lr], #4
 801a8b0:	1417      	asrs	r7, r2, #16
 801a8b2:	e7e0      	b.n	801a876 <__mdiff+0xc6>
 801a8b4:	3e01      	subs	r6, #1
 801a8b6:	e7ea      	b.n	801a88e <__mdiff+0xde>
 801a8b8:	08033d39 	.word	0x08033d39
 801a8bc:	08033e2c 	.word	0x08033e2c

0801a8c0 <__ulp>:
 801a8c0:	b082      	sub	sp, #8
 801a8c2:	ed8d 0b00 	vstr	d0, [sp]
 801a8c6:	9b01      	ldr	r3, [sp, #4]
 801a8c8:	4912      	ldr	r1, [pc, #72]	; (801a914 <__ulp+0x54>)
 801a8ca:	4019      	ands	r1, r3
 801a8cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a8d0:	2900      	cmp	r1, #0
 801a8d2:	dd05      	ble.n	801a8e0 <__ulp+0x20>
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	ec43 2b10 	vmov	d0, r2, r3
 801a8dc:	b002      	add	sp, #8
 801a8de:	4770      	bx	lr
 801a8e0:	4249      	negs	r1, r1
 801a8e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a8e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a8ea:	f04f 0200 	mov.w	r2, #0
 801a8ee:	f04f 0300 	mov.w	r3, #0
 801a8f2:	da04      	bge.n	801a8fe <__ulp+0x3e>
 801a8f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a8f8:	fa41 f300 	asr.w	r3, r1, r0
 801a8fc:	e7ec      	b.n	801a8d8 <__ulp+0x18>
 801a8fe:	f1a0 0114 	sub.w	r1, r0, #20
 801a902:	291e      	cmp	r1, #30
 801a904:	bfda      	itte	le
 801a906:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a90a:	fa20 f101 	lsrle.w	r1, r0, r1
 801a90e:	2101      	movgt	r1, #1
 801a910:	460a      	mov	r2, r1
 801a912:	e7e1      	b.n	801a8d8 <__ulp+0x18>
 801a914:	7ff00000 	.word	0x7ff00000

0801a918 <__b2d>:
 801a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a91a:	6905      	ldr	r5, [r0, #16]
 801a91c:	f100 0714 	add.w	r7, r0, #20
 801a920:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a924:	1f2e      	subs	r6, r5, #4
 801a926:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a92a:	4620      	mov	r0, r4
 801a92c:	f7ff fd52 	bl	801a3d4 <__hi0bits>
 801a930:	f1c0 0320 	rsb	r3, r0, #32
 801a934:	280a      	cmp	r0, #10
 801a936:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a9b4 <__b2d+0x9c>
 801a93a:	600b      	str	r3, [r1, #0]
 801a93c:	dc14      	bgt.n	801a968 <__b2d+0x50>
 801a93e:	f1c0 0e0b 	rsb	lr, r0, #11
 801a942:	fa24 f10e 	lsr.w	r1, r4, lr
 801a946:	42b7      	cmp	r7, r6
 801a948:	ea41 030c 	orr.w	r3, r1, ip
 801a94c:	bf34      	ite	cc
 801a94e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a952:	2100      	movcs	r1, #0
 801a954:	3015      	adds	r0, #21
 801a956:	fa04 f000 	lsl.w	r0, r4, r0
 801a95a:	fa21 f10e 	lsr.w	r1, r1, lr
 801a95e:	ea40 0201 	orr.w	r2, r0, r1
 801a962:	ec43 2b10 	vmov	d0, r2, r3
 801a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a968:	42b7      	cmp	r7, r6
 801a96a:	bf3a      	itte	cc
 801a96c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a970:	f1a5 0608 	subcc.w	r6, r5, #8
 801a974:	2100      	movcs	r1, #0
 801a976:	380b      	subs	r0, #11
 801a978:	d017      	beq.n	801a9aa <__b2d+0x92>
 801a97a:	f1c0 0c20 	rsb	ip, r0, #32
 801a97e:	fa04 f500 	lsl.w	r5, r4, r0
 801a982:	42be      	cmp	r6, r7
 801a984:	fa21 f40c 	lsr.w	r4, r1, ip
 801a988:	ea45 0504 	orr.w	r5, r5, r4
 801a98c:	bf8c      	ite	hi
 801a98e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a992:	2400      	movls	r4, #0
 801a994:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a998:	fa01 f000 	lsl.w	r0, r1, r0
 801a99c:	fa24 f40c 	lsr.w	r4, r4, ip
 801a9a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a9a4:	ea40 0204 	orr.w	r2, r0, r4
 801a9a8:	e7db      	b.n	801a962 <__b2d+0x4a>
 801a9aa:	ea44 030c 	orr.w	r3, r4, ip
 801a9ae:	460a      	mov	r2, r1
 801a9b0:	e7d7      	b.n	801a962 <__b2d+0x4a>
 801a9b2:	bf00      	nop
 801a9b4:	3ff00000 	.word	0x3ff00000

0801a9b8 <__d2b>:
 801a9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a9bc:	4689      	mov	r9, r1
 801a9be:	2101      	movs	r1, #1
 801a9c0:	ec57 6b10 	vmov	r6, r7, d0
 801a9c4:	4690      	mov	r8, r2
 801a9c6:	f7ff fc0f 	bl	801a1e8 <_Balloc>
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	b930      	cbnz	r0, 801a9dc <__d2b+0x24>
 801a9ce:	4602      	mov	r2, r0
 801a9d0:	4b25      	ldr	r3, [pc, #148]	; (801aa68 <__d2b+0xb0>)
 801a9d2:	4826      	ldr	r0, [pc, #152]	; (801aa6c <__d2b+0xb4>)
 801a9d4:	f240 310a 	movw	r1, #778	; 0x30a
 801a9d8:	f7fd ffaa 	bl	8018930 <__assert_func>
 801a9dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a9e4:	bb35      	cbnz	r5, 801aa34 <__d2b+0x7c>
 801a9e6:	2e00      	cmp	r6, #0
 801a9e8:	9301      	str	r3, [sp, #4]
 801a9ea:	d028      	beq.n	801aa3e <__d2b+0x86>
 801a9ec:	4668      	mov	r0, sp
 801a9ee:	9600      	str	r6, [sp, #0]
 801a9f0:	f7ff fd10 	bl	801a414 <__lo0bits>
 801a9f4:	9900      	ldr	r1, [sp, #0]
 801a9f6:	b300      	cbz	r0, 801aa3a <__d2b+0x82>
 801a9f8:	9a01      	ldr	r2, [sp, #4]
 801a9fa:	f1c0 0320 	rsb	r3, r0, #32
 801a9fe:	fa02 f303 	lsl.w	r3, r2, r3
 801aa02:	430b      	orrs	r3, r1
 801aa04:	40c2      	lsrs	r2, r0
 801aa06:	6163      	str	r3, [r4, #20]
 801aa08:	9201      	str	r2, [sp, #4]
 801aa0a:	9b01      	ldr	r3, [sp, #4]
 801aa0c:	61a3      	str	r3, [r4, #24]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	bf14      	ite	ne
 801aa12:	2202      	movne	r2, #2
 801aa14:	2201      	moveq	r2, #1
 801aa16:	6122      	str	r2, [r4, #16]
 801aa18:	b1d5      	cbz	r5, 801aa50 <__d2b+0x98>
 801aa1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801aa1e:	4405      	add	r5, r0
 801aa20:	f8c9 5000 	str.w	r5, [r9]
 801aa24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801aa28:	f8c8 0000 	str.w	r0, [r8]
 801aa2c:	4620      	mov	r0, r4
 801aa2e:	b003      	add	sp, #12
 801aa30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aa38:	e7d5      	b.n	801a9e6 <__d2b+0x2e>
 801aa3a:	6161      	str	r1, [r4, #20]
 801aa3c:	e7e5      	b.n	801aa0a <__d2b+0x52>
 801aa3e:	a801      	add	r0, sp, #4
 801aa40:	f7ff fce8 	bl	801a414 <__lo0bits>
 801aa44:	9b01      	ldr	r3, [sp, #4]
 801aa46:	6163      	str	r3, [r4, #20]
 801aa48:	2201      	movs	r2, #1
 801aa4a:	6122      	str	r2, [r4, #16]
 801aa4c:	3020      	adds	r0, #32
 801aa4e:	e7e3      	b.n	801aa18 <__d2b+0x60>
 801aa50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801aa54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801aa58:	f8c9 0000 	str.w	r0, [r9]
 801aa5c:	6918      	ldr	r0, [r3, #16]
 801aa5e:	f7ff fcb9 	bl	801a3d4 <__hi0bits>
 801aa62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801aa66:	e7df      	b.n	801aa28 <__d2b+0x70>
 801aa68:	08033d39 	.word	0x08033d39
 801aa6c:	08033e2c 	.word	0x08033e2c

0801aa70 <__ratio>:
 801aa70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa74:	4688      	mov	r8, r1
 801aa76:	4669      	mov	r1, sp
 801aa78:	4681      	mov	r9, r0
 801aa7a:	f7ff ff4d 	bl	801a918 <__b2d>
 801aa7e:	a901      	add	r1, sp, #4
 801aa80:	4640      	mov	r0, r8
 801aa82:	ec55 4b10 	vmov	r4, r5, d0
 801aa86:	f7ff ff47 	bl	801a918 <__b2d>
 801aa8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aa8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801aa92:	eba3 0c02 	sub.w	ip, r3, r2
 801aa96:	e9dd 3200 	ldrd	r3, r2, [sp]
 801aa9a:	1a9b      	subs	r3, r3, r2
 801aa9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801aaa0:	ec51 0b10 	vmov	r0, r1, d0
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	bfd6      	itet	le
 801aaa8:	460a      	movle	r2, r1
 801aaaa:	462a      	movgt	r2, r5
 801aaac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801aab0:	468b      	mov	fp, r1
 801aab2:	462f      	mov	r7, r5
 801aab4:	bfd4      	ite	le
 801aab6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801aaba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801aabe:	4620      	mov	r0, r4
 801aac0:	ee10 2a10 	vmov	r2, s0
 801aac4:	465b      	mov	r3, fp
 801aac6:	4639      	mov	r1, r7
 801aac8:	f7e5 fed0 	bl	800086c <__aeabi_ddiv>
 801aacc:	ec41 0b10 	vmov	d0, r0, r1
 801aad0:	b003      	add	sp, #12
 801aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aad6 <__copybits>:
 801aad6:	3901      	subs	r1, #1
 801aad8:	b570      	push	{r4, r5, r6, lr}
 801aada:	1149      	asrs	r1, r1, #5
 801aadc:	6914      	ldr	r4, [r2, #16]
 801aade:	3101      	adds	r1, #1
 801aae0:	f102 0314 	add.w	r3, r2, #20
 801aae4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aae8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801aaec:	1f05      	subs	r5, r0, #4
 801aaee:	42a3      	cmp	r3, r4
 801aaf0:	d30c      	bcc.n	801ab0c <__copybits+0x36>
 801aaf2:	1aa3      	subs	r3, r4, r2
 801aaf4:	3b11      	subs	r3, #17
 801aaf6:	f023 0303 	bic.w	r3, r3, #3
 801aafa:	3211      	adds	r2, #17
 801aafc:	42a2      	cmp	r2, r4
 801aafe:	bf88      	it	hi
 801ab00:	2300      	movhi	r3, #0
 801ab02:	4418      	add	r0, r3
 801ab04:	2300      	movs	r3, #0
 801ab06:	4288      	cmp	r0, r1
 801ab08:	d305      	bcc.n	801ab16 <__copybits+0x40>
 801ab0a:	bd70      	pop	{r4, r5, r6, pc}
 801ab0c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab10:	f845 6f04 	str.w	r6, [r5, #4]!
 801ab14:	e7eb      	b.n	801aaee <__copybits+0x18>
 801ab16:	f840 3b04 	str.w	r3, [r0], #4
 801ab1a:	e7f4      	b.n	801ab06 <__copybits+0x30>

0801ab1c <__any_on>:
 801ab1c:	f100 0214 	add.w	r2, r0, #20
 801ab20:	6900      	ldr	r0, [r0, #16]
 801ab22:	114b      	asrs	r3, r1, #5
 801ab24:	4298      	cmp	r0, r3
 801ab26:	b510      	push	{r4, lr}
 801ab28:	db11      	blt.n	801ab4e <__any_on+0x32>
 801ab2a:	dd0a      	ble.n	801ab42 <__any_on+0x26>
 801ab2c:	f011 011f 	ands.w	r1, r1, #31
 801ab30:	d007      	beq.n	801ab42 <__any_on+0x26>
 801ab32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ab36:	fa24 f001 	lsr.w	r0, r4, r1
 801ab3a:	fa00 f101 	lsl.w	r1, r0, r1
 801ab3e:	428c      	cmp	r4, r1
 801ab40:	d10b      	bne.n	801ab5a <__any_on+0x3e>
 801ab42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ab46:	4293      	cmp	r3, r2
 801ab48:	d803      	bhi.n	801ab52 <__any_on+0x36>
 801ab4a:	2000      	movs	r0, #0
 801ab4c:	bd10      	pop	{r4, pc}
 801ab4e:	4603      	mov	r3, r0
 801ab50:	e7f7      	b.n	801ab42 <__any_on+0x26>
 801ab52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ab56:	2900      	cmp	r1, #0
 801ab58:	d0f5      	beq.n	801ab46 <__any_on+0x2a>
 801ab5a:	2001      	movs	r0, #1
 801ab5c:	e7f6      	b.n	801ab4c <__any_on+0x30>

0801ab5e <_calloc_r>:
 801ab5e:	b513      	push	{r0, r1, r4, lr}
 801ab60:	434a      	muls	r2, r1
 801ab62:	4611      	mov	r1, r2
 801ab64:	9201      	str	r2, [sp, #4]
 801ab66:	f000 f859 	bl	801ac1c <_malloc_r>
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	b118      	cbz	r0, 801ab76 <_calloc_r+0x18>
 801ab6e:	9a01      	ldr	r2, [sp, #4]
 801ab70:	2100      	movs	r1, #0
 801ab72:	f7fc f907 	bl	8016d84 <memset>
 801ab76:	4620      	mov	r0, r4
 801ab78:	b002      	add	sp, #8
 801ab7a:	bd10      	pop	{r4, pc}

0801ab7c <_free_r>:
 801ab7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab7e:	2900      	cmp	r1, #0
 801ab80:	d048      	beq.n	801ac14 <_free_r+0x98>
 801ab82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab86:	9001      	str	r0, [sp, #4]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	f1a1 0404 	sub.w	r4, r1, #4
 801ab8e:	bfb8      	it	lt
 801ab90:	18e4      	addlt	r4, r4, r3
 801ab92:	f000 fc1b 	bl	801b3cc <__malloc_lock>
 801ab96:	4a20      	ldr	r2, [pc, #128]	; (801ac18 <_free_r+0x9c>)
 801ab98:	9801      	ldr	r0, [sp, #4]
 801ab9a:	6813      	ldr	r3, [r2, #0]
 801ab9c:	4615      	mov	r5, r2
 801ab9e:	b933      	cbnz	r3, 801abae <_free_r+0x32>
 801aba0:	6063      	str	r3, [r4, #4]
 801aba2:	6014      	str	r4, [r2, #0]
 801aba4:	b003      	add	sp, #12
 801aba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abaa:	f000 bc15 	b.w	801b3d8 <__malloc_unlock>
 801abae:	42a3      	cmp	r3, r4
 801abb0:	d90b      	bls.n	801abca <_free_r+0x4e>
 801abb2:	6821      	ldr	r1, [r4, #0]
 801abb4:	1862      	adds	r2, r4, r1
 801abb6:	4293      	cmp	r3, r2
 801abb8:	bf04      	itt	eq
 801abba:	681a      	ldreq	r2, [r3, #0]
 801abbc:	685b      	ldreq	r3, [r3, #4]
 801abbe:	6063      	str	r3, [r4, #4]
 801abc0:	bf04      	itt	eq
 801abc2:	1852      	addeq	r2, r2, r1
 801abc4:	6022      	streq	r2, [r4, #0]
 801abc6:	602c      	str	r4, [r5, #0]
 801abc8:	e7ec      	b.n	801aba4 <_free_r+0x28>
 801abca:	461a      	mov	r2, r3
 801abcc:	685b      	ldr	r3, [r3, #4]
 801abce:	b10b      	cbz	r3, 801abd4 <_free_r+0x58>
 801abd0:	42a3      	cmp	r3, r4
 801abd2:	d9fa      	bls.n	801abca <_free_r+0x4e>
 801abd4:	6811      	ldr	r1, [r2, #0]
 801abd6:	1855      	adds	r5, r2, r1
 801abd8:	42a5      	cmp	r5, r4
 801abda:	d10b      	bne.n	801abf4 <_free_r+0x78>
 801abdc:	6824      	ldr	r4, [r4, #0]
 801abde:	4421      	add	r1, r4
 801abe0:	1854      	adds	r4, r2, r1
 801abe2:	42a3      	cmp	r3, r4
 801abe4:	6011      	str	r1, [r2, #0]
 801abe6:	d1dd      	bne.n	801aba4 <_free_r+0x28>
 801abe8:	681c      	ldr	r4, [r3, #0]
 801abea:	685b      	ldr	r3, [r3, #4]
 801abec:	6053      	str	r3, [r2, #4]
 801abee:	4421      	add	r1, r4
 801abf0:	6011      	str	r1, [r2, #0]
 801abf2:	e7d7      	b.n	801aba4 <_free_r+0x28>
 801abf4:	d902      	bls.n	801abfc <_free_r+0x80>
 801abf6:	230c      	movs	r3, #12
 801abf8:	6003      	str	r3, [r0, #0]
 801abfa:	e7d3      	b.n	801aba4 <_free_r+0x28>
 801abfc:	6825      	ldr	r5, [r4, #0]
 801abfe:	1961      	adds	r1, r4, r5
 801ac00:	428b      	cmp	r3, r1
 801ac02:	bf04      	itt	eq
 801ac04:	6819      	ldreq	r1, [r3, #0]
 801ac06:	685b      	ldreq	r3, [r3, #4]
 801ac08:	6063      	str	r3, [r4, #4]
 801ac0a:	bf04      	itt	eq
 801ac0c:	1949      	addeq	r1, r1, r5
 801ac0e:	6021      	streq	r1, [r4, #0]
 801ac10:	6054      	str	r4, [r2, #4]
 801ac12:	e7c7      	b.n	801aba4 <_free_r+0x28>
 801ac14:	b003      	add	sp, #12
 801ac16:	bd30      	pop	{r4, r5, pc}
 801ac18:	20001360 	.word	0x20001360

0801ac1c <_malloc_r>:
 801ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac1e:	1ccd      	adds	r5, r1, #3
 801ac20:	f025 0503 	bic.w	r5, r5, #3
 801ac24:	3508      	adds	r5, #8
 801ac26:	2d0c      	cmp	r5, #12
 801ac28:	bf38      	it	cc
 801ac2a:	250c      	movcc	r5, #12
 801ac2c:	2d00      	cmp	r5, #0
 801ac2e:	4606      	mov	r6, r0
 801ac30:	db01      	blt.n	801ac36 <_malloc_r+0x1a>
 801ac32:	42a9      	cmp	r1, r5
 801ac34:	d903      	bls.n	801ac3e <_malloc_r+0x22>
 801ac36:	230c      	movs	r3, #12
 801ac38:	6033      	str	r3, [r6, #0]
 801ac3a:	2000      	movs	r0, #0
 801ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac3e:	f000 fbc5 	bl	801b3cc <__malloc_lock>
 801ac42:	4921      	ldr	r1, [pc, #132]	; (801acc8 <_malloc_r+0xac>)
 801ac44:	680a      	ldr	r2, [r1, #0]
 801ac46:	4614      	mov	r4, r2
 801ac48:	b99c      	cbnz	r4, 801ac72 <_malloc_r+0x56>
 801ac4a:	4f20      	ldr	r7, [pc, #128]	; (801accc <_malloc_r+0xb0>)
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	b923      	cbnz	r3, 801ac5a <_malloc_r+0x3e>
 801ac50:	4621      	mov	r1, r4
 801ac52:	4630      	mov	r0, r6
 801ac54:	f000 fafc 	bl	801b250 <_sbrk_r>
 801ac58:	6038      	str	r0, [r7, #0]
 801ac5a:	4629      	mov	r1, r5
 801ac5c:	4630      	mov	r0, r6
 801ac5e:	f000 faf7 	bl	801b250 <_sbrk_r>
 801ac62:	1c43      	adds	r3, r0, #1
 801ac64:	d123      	bne.n	801acae <_malloc_r+0x92>
 801ac66:	230c      	movs	r3, #12
 801ac68:	6033      	str	r3, [r6, #0]
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	f000 fbb4 	bl	801b3d8 <__malloc_unlock>
 801ac70:	e7e3      	b.n	801ac3a <_malloc_r+0x1e>
 801ac72:	6823      	ldr	r3, [r4, #0]
 801ac74:	1b5b      	subs	r3, r3, r5
 801ac76:	d417      	bmi.n	801aca8 <_malloc_r+0x8c>
 801ac78:	2b0b      	cmp	r3, #11
 801ac7a:	d903      	bls.n	801ac84 <_malloc_r+0x68>
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	441c      	add	r4, r3
 801ac80:	6025      	str	r5, [r4, #0]
 801ac82:	e004      	b.n	801ac8e <_malloc_r+0x72>
 801ac84:	6863      	ldr	r3, [r4, #4]
 801ac86:	42a2      	cmp	r2, r4
 801ac88:	bf0c      	ite	eq
 801ac8a:	600b      	streq	r3, [r1, #0]
 801ac8c:	6053      	strne	r3, [r2, #4]
 801ac8e:	4630      	mov	r0, r6
 801ac90:	f000 fba2 	bl	801b3d8 <__malloc_unlock>
 801ac94:	f104 000b 	add.w	r0, r4, #11
 801ac98:	1d23      	adds	r3, r4, #4
 801ac9a:	f020 0007 	bic.w	r0, r0, #7
 801ac9e:	1ac2      	subs	r2, r0, r3
 801aca0:	d0cc      	beq.n	801ac3c <_malloc_r+0x20>
 801aca2:	1a1b      	subs	r3, r3, r0
 801aca4:	50a3      	str	r3, [r4, r2]
 801aca6:	e7c9      	b.n	801ac3c <_malloc_r+0x20>
 801aca8:	4622      	mov	r2, r4
 801acaa:	6864      	ldr	r4, [r4, #4]
 801acac:	e7cc      	b.n	801ac48 <_malloc_r+0x2c>
 801acae:	1cc4      	adds	r4, r0, #3
 801acb0:	f024 0403 	bic.w	r4, r4, #3
 801acb4:	42a0      	cmp	r0, r4
 801acb6:	d0e3      	beq.n	801ac80 <_malloc_r+0x64>
 801acb8:	1a21      	subs	r1, r4, r0
 801acba:	4630      	mov	r0, r6
 801acbc:	f000 fac8 	bl	801b250 <_sbrk_r>
 801acc0:	3001      	adds	r0, #1
 801acc2:	d1dd      	bne.n	801ac80 <_malloc_r+0x64>
 801acc4:	e7cf      	b.n	801ac66 <_malloc_r+0x4a>
 801acc6:	bf00      	nop
 801acc8:	20001360 	.word	0x20001360
 801accc:	20001364 	.word	0x20001364

0801acd0 <__ssputs_r>:
 801acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acd4:	688e      	ldr	r6, [r1, #8]
 801acd6:	429e      	cmp	r6, r3
 801acd8:	4682      	mov	sl, r0
 801acda:	460c      	mov	r4, r1
 801acdc:	4690      	mov	r8, r2
 801acde:	461f      	mov	r7, r3
 801ace0:	d838      	bhi.n	801ad54 <__ssputs_r+0x84>
 801ace2:	898a      	ldrh	r2, [r1, #12]
 801ace4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ace8:	d032      	beq.n	801ad50 <__ssputs_r+0x80>
 801acea:	6825      	ldr	r5, [r4, #0]
 801acec:	6909      	ldr	r1, [r1, #16]
 801acee:	eba5 0901 	sub.w	r9, r5, r1
 801acf2:	6965      	ldr	r5, [r4, #20]
 801acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801acfc:	3301      	adds	r3, #1
 801acfe:	444b      	add	r3, r9
 801ad00:	106d      	asrs	r5, r5, #1
 801ad02:	429d      	cmp	r5, r3
 801ad04:	bf38      	it	cc
 801ad06:	461d      	movcc	r5, r3
 801ad08:	0553      	lsls	r3, r2, #21
 801ad0a:	d531      	bpl.n	801ad70 <__ssputs_r+0xa0>
 801ad0c:	4629      	mov	r1, r5
 801ad0e:	f7ff ff85 	bl	801ac1c <_malloc_r>
 801ad12:	4606      	mov	r6, r0
 801ad14:	b950      	cbnz	r0, 801ad2c <__ssputs_r+0x5c>
 801ad16:	230c      	movs	r3, #12
 801ad18:	f8ca 3000 	str.w	r3, [sl]
 801ad1c:	89a3      	ldrh	r3, [r4, #12]
 801ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad22:	81a3      	strh	r3, [r4, #12]
 801ad24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad2c:	6921      	ldr	r1, [r4, #16]
 801ad2e:	464a      	mov	r2, r9
 801ad30:	f7fc f800 	bl	8016d34 <memcpy>
 801ad34:	89a3      	ldrh	r3, [r4, #12]
 801ad36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ad3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad3e:	81a3      	strh	r3, [r4, #12]
 801ad40:	6126      	str	r6, [r4, #16]
 801ad42:	6165      	str	r5, [r4, #20]
 801ad44:	444e      	add	r6, r9
 801ad46:	eba5 0509 	sub.w	r5, r5, r9
 801ad4a:	6026      	str	r6, [r4, #0]
 801ad4c:	60a5      	str	r5, [r4, #8]
 801ad4e:	463e      	mov	r6, r7
 801ad50:	42be      	cmp	r6, r7
 801ad52:	d900      	bls.n	801ad56 <__ssputs_r+0x86>
 801ad54:	463e      	mov	r6, r7
 801ad56:	4632      	mov	r2, r6
 801ad58:	6820      	ldr	r0, [r4, #0]
 801ad5a:	4641      	mov	r1, r8
 801ad5c:	f7fb fff8 	bl	8016d50 <memmove>
 801ad60:	68a3      	ldr	r3, [r4, #8]
 801ad62:	6822      	ldr	r2, [r4, #0]
 801ad64:	1b9b      	subs	r3, r3, r6
 801ad66:	4432      	add	r2, r6
 801ad68:	60a3      	str	r3, [r4, #8]
 801ad6a:	6022      	str	r2, [r4, #0]
 801ad6c:	2000      	movs	r0, #0
 801ad6e:	e7db      	b.n	801ad28 <__ssputs_r+0x58>
 801ad70:	462a      	mov	r2, r5
 801ad72:	f000 fb37 	bl	801b3e4 <_realloc_r>
 801ad76:	4606      	mov	r6, r0
 801ad78:	2800      	cmp	r0, #0
 801ad7a:	d1e1      	bne.n	801ad40 <__ssputs_r+0x70>
 801ad7c:	6921      	ldr	r1, [r4, #16]
 801ad7e:	4650      	mov	r0, sl
 801ad80:	f7ff fefc 	bl	801ab7c <_free_r>
 801ad84:	e7c7      	b.n	801ad16 <__ssputs_r+0x46>
	...

0801ad88 <_svfiprintf_r>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	4698      	mov	r8, r3
 801ad8e:	898b      	ldrh	r3, [r1, #12]
 801ad90:	061b      	lsls	r3, r3, #24
 801ad92:	b09d      	sub	sp, #116	; 0x74
 801ad94:	4607      	mov	r7, r0
 801ad96:	460d      	mov	r5, r1
 801ad98:	4614      	mov	r4, r2
 801ad9a:	d50e      	bpl.n	801adba <_svfiprintf_r+0x32>
 801ad9c:	690b      	ldr	r3, [r1, #16]
 801ad9e:	b963      	cbnz	r3, 801adba <_svfiprintf_r+0x32>
 801ada0:	2140      	movs	r1, #64	; 0x40
 801ada2:	f7ff ff3b 	bl	801ac1c <_malloc_r>
 801ada6:	6028      	str	r0, [r5, #0]
 801ada8:	6128      	str	r0, [r5, #16]
 801adaa:	b920      	cbnz	r0, 801adb6 <_svfiprintf_r+0x2e>
 801adac:	230c      	movs	r3, #12
 801adae:	603b      	str	r3, [r7, #0]
 801adb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801adb4:	e0d1      	b.n	801af5a <_svfiprintf_r+0x1d2>
 801adb6:	2340      	movs	r3, #64	; 0x40
 801adb8:	616b      	str	r3, [r5, #20]
 801adba:	2300      	movs	r3, #0
 801adbc:	9309      	str	r3, [sp, #36]	; 0x24
 801adbe:	2320      	movs	r3, #32
 801adc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 801adc8:	2330      	movs	r3, #48	; 0x30
 801adca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801af74 <_svfiprintf_r+0x1ec>
 801adce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801add2:	f04f 0901 	mov.w	r9, #1
 801add6:	4623      	mov	r3, r4
 801add8:	469a      	mov	sl, r3
 801adda:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adde:	b10a      	cbz	r2, 801ade4 <_svfiprintf_r+0x5c>
 801ade0:	2a25      	cmp	r2, #37	; 0x25
 801ade2:	d1f9      	bne.n	801add8 <_svfiprintf_r+0x50>
 801ade4:	ebba 0b04 	subs.w	fp, sl, r4
 801ade8:	d00b      	beq.n	801ae02 <_svfiprintf_r+0x7a>
 801adea:	465b      	mov	r3, fp
 801adec:	4622      	mov	r2, r4
 801adee:	4629      	mov	r1, r5
 801adf0:	4638      	mov	r0, r7
 801adf2:	f7ff ff6d 	bl	801acd0 <__ssputs_r>
 801adf6:	3001      	adds	r0, #1
 801adf8:	f000 80aa 	beq.w	801af50 <_svfiprintf_r+0x1c8>
 801adfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adfe:	445a      	add	r2, fp
 801ae00:	9209      	str	r2, [sp, #36]	; 0x24
 801ae02:	f89a 3000 	ldrb.w	r3, [sl]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	f000 80a2 	beq.w	801af50 <_svfiprintf_r+0x1c8>
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ae12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae16:	f10a 0a01 	add.w	sl, sl, #1
 801ae1a:	9304      	str	r3, [sp, #16]
 801ae1c:	9307      	str	r3, [sp, #28]
 801ae1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae22:	931a      	str	r3, [sp, #104]	; 0x68
 801ae24:	4654      	mov	r4, sl
 801ae26:	2205      	movs	r2, #5
 801ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae2c:	4851      	ldr	r0, [pc, #324]	; (801af74 <_svfiprintf_r+0x1ec>)
 801ae2e:	f7e5 f9e7 	bl	8000200 <memchr>
 801ae32:	9a04      	ldr	r2, [sp, #16]
 801ae34:	b9d8      	cbnz	r0, 801ae6e <_svfiprintf_r+0xe6>
 801ae36:	06d0      	lsls	r0, r2, #27
 801ae38:	bf44      	itt	mi
 801ae3a:	2320      	movmi	r3, #32
 801ae3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae40:	0711      	lsls	r1, r2, #28
 801ae42:	bf44      	itt	mi
 801ae44:	232b      	movmi	r3, #43	; 0x2b
 801ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 801ae4e:	2b2a      	cmp	r3, #42	; 0x2a
 801ae50:	d015      	beq.n	801ae7e <_svfiprintf_r+0xf6>
 801ae52:	9a07      	ldr	r2, [sp, #28]
 801ae54:	4654      	mov	r4, sl
 801ae56:	2000      	movs	r0, #0
 801ae58:	f04f 0c0a 	mov.w	ip, #10
 801ae5c:	4621      	mov	r1, r4
 801ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae62:	3b30      	subs	r3, #48	; 0x30
 801ae64:	2b09      	cmp	r3, #9
 801ae66:	d94e      	bls.n	801af06 <_svfiprintf_r+0x17e>
 801ae68:	b1b0      	cbz	r0, 801ae98 <_svfiprintf_r+0x110>
 801ae6a:	9207      	str	r2, [sp, #28]
 801ae6c:	e014      	b.n	801ae98 <_svfiprintf_r+0x110>
 801ae6e:	eba0 0308 	sub.w	r3, r0, r8
 801ae72:	fa09 f303 	lsl.w	r3, r9, r3
 801ae76:	4313      	orrs	r3, r2
 801ae78:	9304      	str	r3, [sp, #16]
 801ae7a:	46a2      	mov	sl, r4
 801ae7c:	e7d2      	b.n	801ae24 <_svfiprintf_r+0x9c>
 801ae7e:	9b03      	ldr	r3, [sp, #12]
 801ae80:	1d19      	adds	r1, r3, #4
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	9103      	str	r1, [sp, #12]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	bfbb      	ittet	lt
 801ae8a:	425b      	neglt	r3, r3
 801ae8c:	f042 0202 	orrlt.w	r2, r2, #2
 801ae90:	9307      	strge	r3, [sp, #28]
 801ae92:	9307      	strlt	r3, [sp, #28]
 801ae94:	bfb8      	it	lt
 801ae96:	9204      	strlt	r2, [sp, #16]
 801ae98:	7823      	ldrb	r3, [r4, #0]
 801ae9a:	2b2e      	cmp	r3, #46	; 0x2e
 801ae9c:	d10c      	bne.n	801aeb8 <_svfiprintf_r+0x130>
 801ae9e:	7863      	ldrb	r3, [r4, #1]
 801aea0:	2b2a      	cmp	r3, #42	; 0x2a
 801aea2:	d135      	bne.n	801af10 <_svfiprintf_r+0x188>
 801aea4:	9b03      	ldr	r3, [sp, #12]
 801aea6:	1d1a      	adds	r2, r3, #4
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	9203      	str	r2, [sp, #12]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	bfb8      	it	lt
 801aeb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aeb4:	3402      	adds	r4, #2
 801aeb6:	9305      	str	r3, [sp, #20]
 801aeb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801af84 <_svfiprintf_r+0x1fc>
 801aebc:	7821      	ldrb	r1, [r4, #0]
 801aebe:	2203      	movs	r2, #3
 801aec0:	4650      	mov	r0, sl
 801aec2:	f7e5 f99d 	bl	8000200 <memchr>
 801aec6:	b140      	cbz	r0, 801aeda <_svfiprintf_r+0x152>
 801aec8:	2340      	movs	r3, #64	; 0x40
 801aeca:	eba0 000a 	sub.w	r0, r0, sl
 801aece:	fa03 f000 	lsl.w	r0, r3, r0
 801aed2:	9b04      	ldr	r3, [sp, #16]
 801aed4:	4303      	orrs	r3, r0
 801aed6:	3401      	adds	r4, #1
 801aed8:	9304      	str	r3, [sp, #16]
 801aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aede:	4826      	ldr	r0, [pc, #152]	; (801af78 <_svfiprintf_r+0x1f0>)
 801aee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aee4:	2206      	movs	r2, #6
 801aee6:	f7e5 f98b 	bl	8000200 <memchr>
 801aeea:	2800      	cmp	r0, #0
 801aeec:	d038      	beq.n	801af60 <_svfiprintf_r+0x1d8>
 801aeee:	4b23      	ldr	r3, [pc, #140]	; (801af7c <_svfiprintf_r+0x1f4>)
 801aef0:	bb1b      	cbnz	r3, 801af3a <_svfiprintf_r+0x1b2>
 801aef2:	9b03      	ldr	r3, [sp, #12]
 801aef4:	3307      	adds	r3, #7
 801aef6:	f023 0307 	bic.w	r3, r3, #7
 801aefa:	3308      	adds	r3, #8
 801aefc:	9303      	str	r3, [sp, #12]
 801aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af00:	4433      	add	r3, r6
 801af02:	9309      	str	r3, [sp, #36]	; 0x24
 801af04:	e767      	b.n	801add6 <_svfiprintf_r+0x4e>
 801af06:	fb0c 3202 	mla	r2, ip, r2, r3
 801af0a:	460c      	mov	r4, r1
 801af0c:	2001      	movs	r0, #1
 801af0e:	e7a5      	b.n	801ae5c <_svfiprintf_r+0xd4>
 801af10:	2300      	movs	r3, #0
 801af12:	3401      	adds	r4, #1
 801af14:	9305      	str	r3, [sp, #20]
 801af16:	4619      	mov	r1, r3
 801af18:	f04f 0c0a 	mov.w	ip, #10
 801af1c:	4620      	mov	r0, r4
 801af1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af22:	3a30      	subs	r2, #48	; 0x30
 801af24:	2a09      	cmp	r2, #9
 801af26:	d903      	bls.n	801af30 <_svfiprintf_r+0x1a8>
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d0c5      	beq.n	801aeb8 <_svfiprintf_r+0x130>
 801af2c:	9105      	str	r1, [sp, #20]
 801af2e:	e7c3      	b.n	801aeb8 <_svfiprintf_r+0x130>
 801af30:	fb0c 2101 	mla	r1, ip, r1, r2
 801af34:	4604      	mov	r4, r0
 801af36:	2301      	movs	r3, #1
 801af38:	e7f0      	b.n	801af1c <_svfiprintf_r+0x194>
 801af3a:	ab03      	add	r3, sp, #12
 801af3c:	9300      	str	r3, [sp, #0]
 801af3e:	462a      	mov	r2, r5
 801af40:	4b0f      	ldr	r3, [pc, #60]	; (801af80 <_svfiprintf_r+0x1f8>)
 801af42:	a904      	add	r1, sp, #16
 801af44:	4638      	mov	r0, r7
 801af46:	f7fb ffc5 	bl	8016ed4 <_printf_float>
 801af4a:	1c42      	adds	r2, r0, #1
 801af4c:	4606      	mov	r6, r0
 801af4e:	d1d6      	bne.n	801aefe <_svfiprintf_r+0x176>
 801af50:	89ab      	ldrh	r3, [r5, #12]
 801af52:	065b      	lsls	r3, r3, #25
 801af54:	f53f af2c 	bmi.w	801adb0 <_svfiprintf_r+0x28>
 801af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af5a:	b01d      	add	sp, #116	; 0x74
 801af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af60:	ab03      	add	r3, sp, #12
 801af62:	9300      	str	r3, [sp, #0]
 801af64:	462a      	mov	r2, r5
 801af66:	4b06      	ldr	r3, [pc, #24]	; (801af80 <_svfiprintf_r+0x1f8>)
 801af68:	a904      	add	r1, sp, #16
 801af6a:	4638      	mov	r0, r7
 801af6c:	f7fc fa56 	bl	801741c <_printf_i>
 801af70:	e7eb      	b.n	801af4a <_svfiprintf_r+0x1c2>
 801af72:	bf00      	nop
 801af74:	08033f8c 	.word	0x08033f8c
 801af78:	08033f96 	.word	0x08033f96
 801af7c:	08016ed5 	.word	0x08016ed5
 801af80:	0801acd1 	.word	0x0801acd1
 801af84:	08033f92 	.word	0x08033f92

0801af88 <__sfputc_r>:
 801af88:	6893      	ldr	r3, [r2, #8]
 801af8a:	3b01      	subs	r3, #1
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	b410      	push	{r4}
 801af90:	6093      	str	r3, [r2, #8]
 801af92:	da08      	bge.n	801afa6 <__sfputc_r+0x1e>
 801af94:	6994      	ldr	r4, [r2, #24]
 801af96:	42a3      	cmp	r3, r4
 801af98:	db01      	blt.n	801af9e <__sfputc_r+0x16>
 801af9a:	290a      	cmp	r1, #10
 801af9c:	d103      	bne.n	801afa6 <__sfputc_r+0x1e>
 801af9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afa2:	f7fd bc05 	b.w	80187b0 <__swbuf_r>
 801afa6:	6813      	ldr	r3, [r2, #0]
 801afa8:	1c58      	adds	r0, r3, #1
 801afaa:	6010      	str	r0, [r2, #0]
 801afac:	7019      	strb	r1, [r3, #0]
 801afae:	4608      	mov	r0, r1
 801afb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afb4:	4770      	bx	lr

0801afb6 <__sfputs_r>:
 801afb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afb8:	4606      	mov	r6, r0
 801afba:	460f      	mov	r7, r1
 801afbc:	4614      	mov	r4, r2
 801afbe:	18d5      	adds	r5, r2, r3
 801afc0:	42ac      	cmp	r4, r5
 801afc2:	d101      	bne.n	801afc8 <__sfputs_r+0x12>
 801afc4:	2000      	movs	r0, #0
 801afc6:	e007      	b.n	801afd8 <__sfputs_r+0x22>
 801afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afcc:	463a      	mov	r2, r7
 801afce:	4630      	mov	r0, r6
 801afd0:	f7ff ffda 	bl	801af88 <__sfputc_r>
 801afd4:	1c43      	adds	r3, r0, #1
 801afd6:	d1f3      	bne.n	801afc0 <__sfputs_r+0xa>
 801afd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801afdc <_vfiprintf_r>:
 801afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afe0:	460d      	mov	r5, r1
 801afe2:	b09d      	sub	sp, #116	; 0x74
 801afe4:	4614      	mov	r4, r2
 801afe6:	4698      	mov	r8, r3
 801afe8:	4606      	mov	r6, r0
 801afea:	b118      	cbz	r0, 801aff4 <_vfiprintf_r+0x18>
 801afec:	6983      	ldr	r3, [r0, #24]
 801afee:	b90b      	cbnz	r3, 801aff4 <_vfiprintf_r+0x18>
 801aff0:	f7fe fc56 	bl	80198a0 <__sinit>
 801aff4:	4b89      	ldr	r3, [pc, #548]	; (801b21c <_vfiprintf_r+0x240>)
 801aff6:	429d      	cmp	r5, r3
 801aff8:	d11b      	bne.n	801b032 <_vfiprintf_r+0x56>
 801affa:	6875      	ldr	r5, [r6, #4]
 801affc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801affe:	07d9      	lsls	r1, r3, #31
 801b000:	d405      	bmi.n	801b00e <_vfiprintf_r+0x32>
 801b002:	89ab      	ldrh	r3, [r5, #12]
 801b004:	059a      	lsls	r2, r3, #22
 801b006:	d402      	bmi.n	801b00e <_vfiprintf_r+0x32>
 801b008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b00a:	f7ff f86c 	bl	801a0e6 <__retarget_lock_acquire_recursive>
 801b00e:	89ab      	ldrh	r3, [r5, #12]
 801b010:	071b      	lsls	r3, r3, #28
 801b012:	d501      	bpl.n	801b018 <_vfiprintf_r+0x3c>
 801b014:	692b      	ldr	r3, [r5, #16]
 801b016:	b9eb      	cbnz	r3, 801b054 <_vfiprintf_r+0x78>
 801b018:	4629      	mov	r1, r5
 801b01a:	4630      	mov	r0, r6
 801b01c:	f7fd fc1a 	bl	8018854 <__swsetup_r>
 801b020:	b1c0      	cbz	r0, 801b054 <_vfiprintf_r+0x78>
 801b022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b024:	07dc      	lsls	r4, r3, #31
 801b026:	d50e      	bpl.n	801b046 <_vfiprintf_r+0x6a>
 801b028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b02c:	b01d      	add	sp, #116	; 0x74
 801b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b032:	4b7b      	ldr	r3, [pc, #492]	; (801b220 <_vfiprintf_r+0x244>)
 801b034:	429d      	cmp	r5, r3
 801b036:	d101      	bne.n	801b03c <_vfiprintf_r+0x60>
 801b038:	68b5      	ldr	r5, [r6, #8]
 801b03a:	e7df      	b.n	801affc <_vfiprintf_r+0x20>
 801b03c:	4b79      	ldr	r3, [pc, #484]	; (801b224 <_vfiprintf_r+0x248>)
 801b03e:	429d      	cmp	r5, r3
 801b040:	bf08      	it	eq
 801b042:	68f5      	ldreq	r5, [r6, #12]
 801b044:	e7da      	b.n	801affc <_vfiprintf_r+0x20>
 801b046:	89ab      	ldrh	r3, [r5, #12]
 801b048:	0598      	lsls	r0, r3, #22
 801b04a:	d4ed      	bmi.n	801b028 <_vfiprintf_r+0x4c>
 801b04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b04e:	f7ff f84b 	bl	801a0e8 <__retarget_lock_release_recursive>
 801b052:	e7e9      	b.n	801b028 <_vfiprintf_r+0x4c>
 801b054:	2300      	movs	r3, #0
 801b056:	9309      	str	r3, [sp, #36]	; 0x24
 801b058:	2320      	movs	r3, #32
 801b05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b05e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b062:	2330      	movs	r3, #48	; 0x30
 801b064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b228 <_vfiprintf_r+0x24c>
 801b068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b06c:	f04f 0901 	mov.w	r9, #1
 801b070:	4623      	mov	r3, r4
 801b072:	469a      	mov	sl, r3
 801b074:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b078:	b10a      	cbz	r2, 801b07e <_vfiprintf_r+0xa2>
 801b07a:	2a25      	cmp	r2, #37	; 0x25
 801b07c:	d1f9      	bne.n	801b072 <_vfiprintf_r+0x96>
 801b07e:	ebba 0b04 	subs.w	fp, sl, r4
 801b082:	d00b      	beq.n	801b09c <_vfiprintf_r+0xc0>
 801b084:	465b      	mov	r3, fp
 801b086:	4622      	mov	r2, r4
 801b088:	4629      	mov	r1, r5
 801b08a:	4630      	mov	r0, r6
 801b08c:	f7ff ff93 	bl	801afb6 <__sfputs_r>
 801b090:	3001      	adds	r0, #1
 801b092:	f000 80aa 	beq.w	801b1ea <_vfiprintf_r+0x20e>
 801b096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b098:	445a      	add	r2, fp
 801b09a:	9209      	str	r2, [sp, #36]	; 0x24
 801b09c:	f89a 3000 	ldrb.w	r3, [sl]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	f000 80a2 	beq.w	801b1ea <_vfiprintf_r+0x20e>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0b0:	f10a 0a01 	add.w	sl, sl, #1
 801b0b4:	9304      	str	r3, [sp, #16]
 801b0b6:	9307      	str	r3, [sp, #28]
 801b0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b0bc:	931a      	str	r3, [sp, #104]	; 0x68
 801b0be:	4654      	mov	r4, sl
 801b0c0:	2205      	movs	r2, #5
 801b0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0c6:	4858      	ldr	r0, [pc, #352]	; (801b228 <_vfiprintf_r+0x24c>)
 801b0c8:	f7e5 f89a 	bl	8000200 <memchr>
 801b0cc:	9a04      	ldr	r2, [sp, #16]
 801b0ce:	b9d8      	cbnz	r0, 801b108 <_vfiprintf_r+0x12c>
 801b0d0:	06d1      	lsls	r1, r2, #27
 801b0d2:	bf44      	itt	mi
 801b0d4:	2320      	movmi	r3, #32
 801b0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0da:	0713      	lsls	r3, r2, #28
 801b0dc:	bf44      	itt	mi
 801b0de:	232b      	movmi	r3, #43	; 0x2b
 801b0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0e4:	f89a 3000 	ldrb.w	r3, [sl]
 801b0e8:	2b2a      	cmp	r3, #42	; 0x2a
 801b0ea:	d015      	beq.n	801b118 <_vfiprintf_r+0x13c>
 801b0ec:	9a07      	ldr	r2, [sp, #28]
 801b0ee:	4654      	mov	r4, sl
 801b0f0:	2000      	movs	r0, #0
 801b0f2:	f04f 0c0a 	mov.w	ip, #10
 801b0f6:	4621      	mov	r1, r4
 801b0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0fc:	3b30      	subs	r3, #48	; 0x30
 801b0fe:	2b09      	cmp	r3, #9
 801b100:	d94e      	bls.n	801b1a0 <_vfiprintf_r+0x1c4>
 801b102:	b1b0      	cbz	r0, 801b132 <_vfiprintf_r+0x156>
 801b104:	9207      	str	r2, [sp, #28]
 801b106:	e014      	b.n	801b132 <_vfiprintf_r+0x156>
 801b108:	eba0 0308 	sub.w	r3, r0, r8
 801b10c:	fa09 f303 	lsl.w	r3, r9, r3
 801b110:	4313      	orrs	r3, r2
 801b112:	9304      	str	r3, [sp, #16]
 801b114:	46a2      	mov	sl, r4
 801b116:	e7d2      	b.n	801b0be <_vfiprintf_r+0xe2>
 801b118:	9b03      	ldr	r3, [sp, #12]
 801b11a:	1d19      	adds	r1, r3, #4
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	9103      	str	r1, [sp, #12]
 801b120:	2b00      	cmp	r3, #0
 801b122:	bfbb      	ittet	lt
 801b124:	425b      	neglt	r3, r3
 801b126:	f042 0202 	orrlt.w	r2, r2, #2
 801b12a:	9307      	strge	r3, [sp, #28]
 801b12c:	9307      	strlt	r3, [sp, #28]
 801b12e:	bfb8      	it	lt
 801b130:	9204      	strlt	r2, [sp, #16]
 801b132:	7823      	ldrb	r3, [r4, #0]
 801b134:	2b2e      	cmp	r3, #46	; 0x2e
 801b136:	d10c      	bne.n	801b152 <_vfiprintf_r+0x176>
 801b138:	7863      	ldrb	r3, [r4, #1]
 801b13a:	2b2a      	cmp	r3, #42	; 0x2a
 801b13c:	d135      	bne.n	801b1aa <_vfiprintf_r+0x1ce>
 801b13e:	9b03      	ldr	r3, [sp, #12]
 801b140:	1d1a      	adds	r2, r3, #4
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	9203      	str	r2, [sp, #12]
 801b146:	2b00      	cmp	r3, #0
 801b148:	bfb8      	it	lt
 801b14a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b14e:	3402      	adds	r4, #2
 801b150:	9305      	str	r3, [sp, #20]
 801b152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b238 <_vfiprintf_r+0x25c>
 801b156:	7821      	ldrb	r1, [r4, #0]
 801b158:	2203      	movs	r2, #3
 801b15a:	4650      	mov	r0, sl
 801b15c:	f7e5 f850 	bl	8000200 <memchr>
 801b160:	b140      	cbz	r0, 801b174 <_vfiprintf_r+0x198>
 801b162:	2340      	movs	r3, #64	; 0x40
 801b164:	eba0 000a 	sub.w	r0, r0, sl
 801b168:	fa03 f000 	lsl.w	r0, r3, r0
 801b16c:	9b04      	ldr	r3, [sp, #16]
 801b16e:	4303      	orrs	r3, r0
 801b170:	3401      	adds	r4, #1
 801b172:	9304      	str	r3, [sp, #16]
 801b174:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b178:	482c      	ldr	r0, [pc, #176]	; (801b22c <_vfiprintf_r+0x250>)
 801b17a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b17e:	2206      	movs	r2, #6
 801b180:	f7e5 f83e 	bl	8000200 <memchr>
 801b184:	2800      	cmp	r0, #0
 801b186:	d03f      	beq.n	801b208 <_vfiprintf_r+0x22c>
 801b188:	4b29      	ldr	r3, [pc, #164]	; (801b230 <_vfiprintf_r+0x254>)
 801b18a:	bb1b      	cbnz	r3, 801b1d4 <_vfiprintf_r+0x1f8>
 801b18c:	9b03      	ldr	r3, [sp, #12]
 801b18e:	3307      	adds	r3, #7
 801b190:	f023 0307 	bic.w	r3, r3, #7
 801b194:	3308      	adds	r3, #8
 801b196:	9303      	str	r3, [sp, #12]
 801b198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b19a:	443b      	add	r3, r7
 801b19c:	9309      	str	r3, [sp, #36]	; 0x24
 801b19e:	e767      	b.n	801b070 <_vfiprintf_r+0x94>
 801b1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1a4:	460c      	mov	r4, r1
 801b1a6:	2001      	movs	r0, #1
 801b1a8:	e7a5      	b.n	801b0f6 <_vfiprintf_r+0x11a>
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	3401      	adds	r4, #1
 801b1ae:	9305      	str	r3, [sp, #20]
 801b1b0:	4619      	mov	r1, r3
 801b1b2:	f04f 0c0a 	mov.w	ip, #10
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1bc:	3a30      	subs	r2, #48	; 0x30
 801b1be:	2a09      	cmp	r2, #9
 801b1c0:	d903      	bls.n	801b1ca <_vfiprintf_r+0x1ee>
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d0c5      	beq.n	801b152 <_vfiprintf_r+0x176>
 801b1c6:	9105      	str	r1, [sp, #20]
 801b1c8:	e7c3      	b.n	801b152 <_vfiprintf_r+0x176>
 801b1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	e7f0      	b.n	801b1b6 <_vfiprintf_r+0x1da>
 801b1d4:	ab03      	add	r3, sp, #12
 801b1d6:	9300      	str	r3, [sp, #0]
 801b1d8:	462a      	mov	r2, r5
 801b1da:	4b16      	ldr	r3, [pc, #88]	; (801b234 <_vfiprintf_r+0x258>)
 801b1dc:	a904      	add	r1, sp, #16
 801b1de:	4630      	mov	r0, r6
 801b1e0:	f7fb fe78 	bl	8016ed4 <_printf_float>
 801b1e4:	4607      	mov	r7, r0
 801b1e6:	1c78      	adds	r0, r7, #1
 801b1e8:	d1d6      	bne.n	801b198 <_vfiprintf_r+0x1bc>
 801b1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b1ec:	07d9      	lsls	r1, r3, #31
 801b1ee:	d405      	bmi.n	801b1fc <_vfiprintf_r+0x220>
 801b1f0:	89ab      	ldrh	r3, [r5, #12]
 801b1f2:	059a      	lsls	r2, r3, #22
 801b1f4:	d402      	bmi.n	801b1fc <_vfiprintf_r+0x220>
 801b1f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b1f8:	f7fe ff76 	bl	801a0e8 <__retarget_lock_release_recursive>
 801b1fc:	89ab      	ldrh	r3, [r5, #12]
 801b1fe:	065b      	lsls	r3, r3, #25
 801b200:	f53f af12 	bmi.w	801b028 <_vfiprintf_r+0x4c>
 801b204:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b206:	e711      	b.n	801b02c <_vfiprintf_r+0x50>
 801b208:	ab03      	add	r3, sp, #12
 801b20a:	9300      	str	r3, [sp, #0]
 801b20c:	462a      	mov	r2, r5
 801b20e:	4b09      	ldr	r3, [pc, #36]	; (801b234 <_vfiprintf_r+0x258>)
 801b210:	a904      	add	r1, sp, #16
 801b212:	4630      	mov	r0, r6
 801b214:	f7fc f902 	bl	801741c <_printf_i>
 801b218:	e7e4      	b.n	801b1e4 <_vfiprintf_r+0x208>
 801b21a:	bf00      	nop
 801b21c:	08033d6c 	.word	0x08033d6c
 801b220:	08033d8c 	.word	0x08033d8c
 801b224:	08033d4c 	.word	0x08033d4c
 801b228:	08033f8c 	.word	0x08033f8c
 801b22c:	08033f96 	.word	0x08033f96
 801b230:	08016ed5 	.word	0x08016ed5
 801b234:	0801afb7 	.word	0x0801afb7
 801b238:	08033f92 	.word	0x08033f92
 801b23c:	00000000 	.word	0x00000000

0801b240 <nan>:
 801b240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b248 <nan+0x8>
 801b244:	4770      	bx	lr
 801b246:	bf00      	nop
 801b248:	00000000 	.word	0x00000000
 801b24c:	7ff80000 	.word	0x7ff80000

0801b250 <_sbrk_r>:
 801b250:	b538      	push	{r3, r4, r5, lr}
 801b252:	4d06      	ldr	r5, [pc, #24]	; (801b26c <_sbrk_r+0x1c>)
 801b254:	2300      	movs	r3, #0
 801b256:	4604      	mov	r4, r0
 801b258:	4608      	mov	r0, r1
 801b25a:	602b      	str	r3, [r5, #0]
 801b25c:	f7e9 fb04 	bl	8004868 <_sbrk>
 801b260:	1c43      	adds	r3, r0, #1
 801b262:	d102      	bne.n	801b26a <_sbrk_r+0x1a>
 801b264:	682b      	ldr	r3, [r5, #0]
 801b266:	b103      	cbz	r3, 801b26a <_sbrk_r+0x1a>
 801b268:	6023      	str	r3, [r4, #0]
 801b26a:	bd38      	pop	{r3, r4, r5, pc}
 801b26c:	2000d8a0 	.word	0x2000d8a0

0801b270 <__sread>:
 801b270:	b510      	push	{r4, lr}
 801b272:	460c      	mov	r4, r1
 801b274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b278:	f000 f8da 	bl	801b430 <_read_r>
 801b27c:	2800      	cmp	r0, #0
 801b27e:	bfab      	itete	ge
 801b280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b282:	89a3      	ldrhlt	r3, [r4, #12]
 801b284:	181b      	addge	r3, r3, r0
 801b286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b28a:	bfac      	ite	ge
 801b28c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b28e:	81a3      	strhlt	r3, [r4, #12]
 801b290:	bd10      	pop	{r4, pc}

0801b292 <__swrite>:
 801b292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b296:	461f      	mov	r7, r3
 801b298:	898b      	ldrh	r3, [r1, #12]
 801b29a:	05db      	lsls	r3, r3, #23
 801b29c:	4605      	mov	r5, r0
 801b29e:	460c      	mov	r4, r1
 801b2a0:	4616      	mov	r6, r2
 801b2a2:	d505      	bpl.n	801b2b0 <__swrite+0x1e>
 801b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2a8:	2302      	movs	r3, #2
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	f000 f87c 	bl	801b3a8 <_lseek_r>
 801b2b0:	89a3      	ldrh	r3, [r4, #12]
 801b2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b2ba:	81a3      	strh	r3, [r4, #12]
 801b2bc:	4632      	mov	r2, r6
 801b2be:	463b      	mov	r3, r7
 801b2c0:	4628      	mov	r0, r5
 801b2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2c6:	f000 b823 	b.w	801b310 <_write_r>

0801b2ca <__sseek>:
 801b2ca:	b510      	push	{r4, lr}
 801b2cc:	460c      	mov	r4, r1
 801b2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2d2:	f000 f869 	bl	801b3a8 <_lseek_r>
 801b2d6:	1c43      	adds	r3, r0, #1
 801b2d8:	89a3      	ldrh	r3, [r4, #12]
 801b2da:	bf15      	itete	ne
 801b2dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801b2de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b2e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2e6:	81a3      	strheq	r3, [r4, #12]
 801b2e8:	bf18      	it	ne
 801b2ea:	81a3      	strhne	r3, [r4, #12]
 801b2ec:	bd10      	pop	{r4, pc}

0801b2ee <__sclose>:
 801b2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2f2:	f000 b827 	b.w	801b344 <_close_r>

0801b2f6 <__ascii_wctomb>:
 801b2f6:	b149      	cbz	r1, 801b30c <__ascii_wctomb+0x16>
 801b2f8:	2aff      	cmp	r2, #255	; 0xff
 801b2fa:	bf85      	ittet	hi
 801b2fc:	238a      	movhi	r3, #138	; 0x8a
 801b2fe:	6003      	strhi	r3, [r0, #0]
 801b300:	700a      	strbls	r2, [r1, #0]
 801b302:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b306:	bf98      	it	ls
 801b308:	2001      	movls	r0, #1
 801b30a:	4770      	bx	lr
 801b30c:	4608      	mov	r0, r1
 801b30e:	4770      	bx	lr

0801b310 <_write_r>:
 801b310:	b538      	push	{r3, r4, r5, lr}
 801b312:	4d07      	ldr	r5, [pc, #28]	; (801b330 <_write_r+0x20>)
 801b314:	4604      	mov	r4, r0
 801b316:	4608      	mov	r0, r1
 801b318:	4611      	mov	r1, r2
 801b31a:	2200      	movs	r2, #0
 801b31c:	602a      	str	r2, [r5, #0]
 801b31e:	461a      	mov	r2, r3
 801b320:	f7e8 fffa 	bl	8004318 <_write>
 801b324:	1c43      	adds	r3, r0, #1
 801b326:	d102      	bne.n	801b32e <_write_r+0x1e>
 801b328:	682b      	ldr	r3, [r5, #0]
 801b32a:	b103      	cbz	r3, 801b32e <_write_r+0x1e>
 801b32c:	6023      	str	r3, [r4, #0]
 801b32e:	bd38      	pop	{r3, r4, r5, pc}
 801b330:	2000d8a0 	.word	0x2000d8a0

0801b334 <abort>:
 801b334:	b508      	push	{r3, lr}
 801b336:	2006      	movs	r0, #6
 801b338:	f000 f8b4 	bl	801b4a4 <raise>
 801b33c:	2001      	movs	r0, #1
 801b33e:	f7e9 fa37 	bl	80047b0 <_exit>
	...

0801b344 <_close_r>:
 801b344:	b538      	push	{r3, r4, r5, lr}
 801b346:	4d06      	ldr	r5, [pc, #24]	; (801b360 <_close_r+0x1c>)
 801b348:	2300      	movs	r3, #0
 801b34a:	4604      	mov	r4, r0
 801b34c:	4608      	mov	r0, r1
 801b34e:	602b      	str	r3, [r5, #0]
 801b350:	f7e9 fa55 	bl	80047fe <_close>
 801b354:	1c43      	adds	r3, r0, #1
 801b356:	d102      	bne.n	801b35e <_close_r+0x1a>
 801b358:	682b      	ldr	r3, [r5, #0]
 801b35a:	b103      	cbz	r3, 801b35e <_close_r+0x1a>
 801b35c:	6023      	str	r3, [r4, #0]
 801b35e:	bd38      	pop	{r3, r4, r5, pc}
 801b360:	2000d8a0 	.word	0x2000d8a0

0801b364 <_fstat_r>:
 801b364:	b538      	push	{r3, r4, r5, lr}
 801b366:	4d07      	ldr	r5, [pc, #28]	; (801b384 <_fstat_r+0x20>)
 801b368:	2300      	movs	r3, #0
 801b36a:	4604      	mov	r4, r0
 801b36c:	4608      	mov	r0, r1
 801b36e:	4611      	mov	r1, r2
 801b370:	602b      	str	r3, [r5, #0]
 801b372:	f7e9 fa50 	bl	8004816 <_fstat>
 801b376:	1c43      	adds	r3, r0, #1
 801b378:	d102      	bne.n	801b380 <_fstat_r+0x1c>
 801b37a:	682b      	ldr	r3, [r5, #0]
 801b37c:	b103      	cbz	r3, 801b380 <_fstat_r+0x1c>
 801b37e:	6023      	str	r3, [r4, #0]
 801b380:	bd38      	pop	{r3, r4, r5, pc}
 801b382:	bf00      	nop
 801b384:	2000d8a0 	.word	0x2000d8a0

0801b388 <_isatty_r>:
 801b388:	b538      	push	{r3, r4, r5, lr}
 801b38a:	4d06      	ldr	r5, [pc, #24]	; (801b3a4 <_isatty_r+0x1c>)
 801b38c:	2300      	movs	r3, #0
 801b38e:	4604      	mov	r4, r0
 801b390:	4608      	mov	r0, r1
 801b392:	602b      	str	r3, [r5, #0]
 801b394:	f7e9 fa4f 	bl	8004836 <_isatty>
 801b398:	1c43      	adds	r3, r0, #1
 801b39a:	d102      	bne.n	801b3a2 <_isatty_r+0x1a>
 801b39c:	682b      	ldr	r3, [r5, #0]
 801b39e:	b103      	cbz	r3, 801b3a2 <_isatty_r+0x1a>
 801b3a0:	6023      	str	r3, [r4, #0]
 801b3a2:	bd38      	pop	{r3, r4, r5, pc}
 801b3a4:	2000d8a0 	.word	0x2000d8a0

0801b3a8 <_lseek_r>:
 801b3a8:	b538      	push	{r3, r4, r5, lr}
 801b3aa:	4d07      	ldr	r5, [pc, #28]	; (801b3c8 <_lseek_r+0x20>)
 801b3ac:	4604      	mov	r4, r0
 801b3ae:	4608      	mov	r0, r1
 801b3b0:	4611      	mov	r1, r2
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	602a      	str	r2, [r5, #0]
 801b3b6:	461a      	mov	r2, r3
 801b3b8:	f7e9 fa48 	bl	800484c <_lseek>
 801b3bc:	1c43      	adds	r3, r0, #1
 801b3be:	d102      	bne.n	801b3c6 <_lseek_r+0x1e>
 801b3c0:	682b      	ldr	r3, [r5, #0]
 801b3c2:	b103      	cbz	r3, 801b3c6 <_lseek_r+0x1e>
 801b3c4:	6023      	str	r3, [r4, #0]
 801b3c6:	bd38      	pop	{r3, r4, r5, pc}
 801b3c8:	2000d8a0 	.word	0x2000d8a0

0801b3cc <__malloc_lock>:
 801b3cc:	4801      	ldr	r0, [pc, #4]	; (801b3d4 <__malloc_lock+0x8>)
 801b3ce:	f7fe be8a 	b.w	801a0e6 <__retarget_lock_acquire_recursive>
 801b3d2:	bf00      	nop
 801b3d4:	2000d8a8 	.word	0x2000d8a8

0801b3d8 <__malloc_unlock>:
 801b3d8:	4801      	ldr	r0, [pc, #4]	; (801b3e0 <__malloc_unlock+0x8>)
 801b3da:	f7fe be85 	b.w	801a0e8 <__retarget_lock_release_recursive>
 801b3de:	bf00      	nop
 801b3e0:	2000d8a8 	.word	0x2000d8a8

0801b3e4 <_realloc_r>:
 801b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3e6:	4607      	mov	r7, r0
 801b3e8:	4614      	mov	r4, r2
 801b3ea:	460e      	mov	r6, r1
 801b3ec:	b921      	cbnz	r1, 801b3f8 <_realloc_r+0x14>
 801b3ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b3f2:	4611      	mov	r1, r2
 801b3f4:	f7ff bc12 	b.w	801ac1c <_malloc_r>
 801b3f8:	b922      	cbnz	r2, 801b404 <_realloc_r+0x20>
 801b3fa:	f7ff fbbf 	bl	801ab7c <_free_r>
 801b3fe:	4625      	mov	r5, r4
 801b400:	4628      	mov	r0, r5
 801b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b404:	f000 f86a 	bl	801b4dc <_malloc_usable_size_r>
 801b408:	42a0      	cmp	r0, r4
 801b40a:	d20f      	bcs.n	801b42c <_realloc_r+0x48>
 801b40c:	4621      	mov	r1, r4
 801b40e:	4638      	mov	r0, r7
 801b410:	f7ff fc04 	bl	801ac1c <_malloc_r>
 801b414:	4605      	mov	r5, r0
 801b416:	2800      	cmp	r0, #0
 801b418:	d0f2      	beq.n	801b400 <_realloc_r+0x1c>
 801b41a:	4631      	mov	r1, r6
 801b41c:	4622      	mov	r2, r4
 801b41e:	f7fb fc89 	bl	8016d34 <memcpy>
 801b422:	4631      	mov	r1, r6
 801b424:	4638      	mov	r0, r7
 801b426:	f7ff fba9 	bl	801ab7c <_free_r>
 801b42a:	e7e9      	b.n	801b400 <_realloc_r+0x1c>
 801b42c:	4635      	mov	r5, r6
 801b42e:	e7e7      	b.n	801b400 <_realloc_r+0x1c>

0801b430 <_read_r>:
 801b430:	b538      	push	{r3, r4, r5, lr}
 801b432:	4d07      	ldr	r5, [pc, #28]	; (801b450 <_read_r+0x20>)
 801b434:	4604      	mov	r4, r0
 801b436:	4608      	mov	r0, r1
 801b438:	4611      	mov	r1, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	602a      	str	r2, [r5, #0]
 801b43e:	461a      	mov	r2, r3
 801b440:	f7e9 f9c0 	bl	80047c4 <_read>
 801b444:	1c43      	adds	r3, r0, #1
 801b446:	d102      	bne.n	801b44e <_read_r+0x1e>
 801b448:	682b      	ldr	r3, [r5, #0]
 801b44a:	b103      	cbz	r3, 801b44e <_read_r+0x1e>
 801b44c:	6023      	str	r3, [r4, #0]
 801b44e:	bd38      	pop	{r3, r4, r5, pc}
 801b450:	2000d8a0 	.word	0x2000d8a0

0801b454 <_raise_r>:
 801b454:	291f      	cmp	r1, #31
 801b456:	b538      	push	{r3, r4, r5, lr}
 801b458:	4604      	mov	r4, r0
 801b45a:	460d      	mov	r5, r1
 801b45c:	d904      	bls.n	801b468 <_raise_r+0x14>
 801b45e:	2316      	movs	r3, #22
 801b460:	6003      	str	r3, [r0, #0]
 801b462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b466:	bd38      	pop	{r3, r4, r5, pc}
 801b468:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b46a:	b112      	cbz	r2, 801b472 <_raise_r+0x1e>
 801b46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b470:	b94b      	cbnz	r3, 801b486 <_raise_r+0x32>
 801b472:	4620      	mov	r0, r4
 801b474:	f000 f830 	bl	801b4d8 <_getpid_r>
 801b478:	462a      	mov	r2, r5
 801b47a:	4601      	mov	r1, r0
 801b47c:	4620      	mov	r0, r4
 801b47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b482:	f000 b817 	b.w	801b4b4 <_kill_r>
 801b486:	2b01      	cmp	r3, #1
 801b488:	d00a      	beq.n	801b4a0 <_raise_r+0x4c>
 801b48a:	1c59      	adds	r1, r3, #1
 801b48c:	d103      	bne.n	801b496 <_raise_r+0x42>
 801b48e:	2316      	movs	r3, #22
 801b490:	6003      	str	r3, [r0, #0]
 801b492:	2001      	movs	r0, #1
 801b494:	e7e7      	b.n	801b466 <_raise_r+0x12>
 801b496:	2400      	movs	r4, #0
 801b498:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b49c:	4628      	mov	r0, r5
 801b49e:	4798      	blx	r3
 801b4a0:	2000      	movs	r0, #0
 801b4a2:	e7e0      	b.n	801b466 <_raise_r+0x12>

0801b4a4 <raise>:
 801b4a4:	4b02      	ldr	r3, [pc, #8]	; (801b4b0 <raise+0xc>)
 801b4a6:	4601      	mov	r1, r0
 801b4a8:	6818      	ldr	r0, [r3, #0]
 801b4aa:	f7ff bfd3 	b.w	801b454 <_raise_r>
 801b4ae:	bf00      	nop
 801b4b0:	200005cc 	.word	0x200005cc

0801b4b4 <_kill_r>:
 801b4b4:	b538      	push	{r3, r4, r5, lr}
 801b4b6:	4d07      	ldr	r5, [pc, #28]	; (801b4d4 <_kill_r+0x20>)
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	4604      	mov	r4, r0
 801b4bc:	4608      	mov	r0, r1
 801b4be:	4611      	mov	r1, r2
 801b4c0:	602b      	str	r3, [r5, #0]
 801b4c2:	f7e9 f963 	bl	800478c <_kill>
 801b4c6:	1c43      	adds	r3, r0, #1
 801b4c8:	d102      	bne.n	801b4d0 <_kill_r+0x1c>
 801b4ca:	682b      	ldr	r3, [r5, #0]
 801b4cc:	b103      	cbz	r3, 801b4d0 <_kill_r+0x1c>
 801b4ce:	6023      	str	r3, [r4, #0]
 801b4d0:	bd38      	pop	{r3, r4, r5, pc}
 801b4d2:	bf00      	nop
 801b4d4:	2000d8a0 	.word	0x2000d8a0

0801b4d8 <_getpid_r>:
 801b4d8:	f7e9 b950 	b.w	800477c <_getpid>

0801b4dc <_malloc_usable_size_r>:
 801b4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b4e0:	1f18      	subs	r0, r3, #4
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	bfbc      	itt	lt
 801b4e6:	580b      	ldrlt	r3, [r1, r0]
 801b4e8:	18c0      	addlt	r0, r0, r3
 801b4ea:	4770      	bx	lr

0801b4ec <_init>:
 801b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ee:	bf00      	nop
 801b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4f2:	bc08      	pop	{r3}
 801b4f4:	469e      	mov	lr, r3
 801b4f6:	4770      	bx	lr

0801b4f8 <_fini>:
 801b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4fa:	bf00      	nop
 801b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4fe:	bc08      	pop	{r3}
 801b500:	469e      	mov	lr, r3
 801b502:	4770      	bx	lr
